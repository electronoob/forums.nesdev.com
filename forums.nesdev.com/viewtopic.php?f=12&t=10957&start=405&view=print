<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Why no SNES homebrew scene?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Why no SNES homebrew scene?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10957">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10957</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>28</strong> of <strong>30</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Stef</b> [ Thu Jul 05, 2018 5:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">If they don't want to spend 3 weeks for &quot;hello world&quot;, then they probably won't ever spend the time to make a full game for the system. I spent probably well over 3 weeeks when I wanted to do a &quot;hello world&quot; on NES back when I started this activity in 2002 at age 13 without any knownledge of the english language back then.</div><br /><br />Because you were truly passionate and you deeply wanted to do it... but that is not the case of everyone.<br />If the first step seems to be too high then a lot of people will be discouraged even if they had motivations to do it. At the opposite if things seems to be really easy (you can get your first &quot;hello world&quot; working in a couple of hours) then you may gain attention to the system when you weren't in first place, and at the end you may eventually find interests in developing something bigger.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>creaothceann</b> [ Thu Jul 05, 2018 6:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Stef wrote:</div><div class="quotecontent">When i said hardware abstraction, i speak about low level stuffs in general. In the end the library / API still need to fit the hardware design in some ways, but for instance it would be nice to not having to know that the OAM is split in 2 parts. At higher level i would say you won't even need to know you need to fill a OAM.</div><br />There's syntax vs. semantics. A higher-level language should be able to translate &quot;a = b;&quot; (or &quot;a := b&quot;) to the necessary mnemonic, depending on the current register state and where these variables/values are located. But it shouldn't abstract the SNES-specific hardware features; that can indeed be handled by an API function call.<br /><br />i.e. the language for the 65c816, a lower-level library for the SNES and a higher-level library for a game engine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Punch</b> [ Thu Jul 05, 2018 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">Stef wrote:</div><div class="quotecontent">Starting immediately with very low level and assembly is just too much for a lot of people, we don't want to spent 3 weeks just to understand how to display a simple &quot;hello world&quot; string on the screen.</div><br />If they don't want to spend 3 weeks for &quot;hello world&quot;, then they probably won't ever spend the time to make a full game for the system. I spent probably well over 3 weeeks when I wanted to do a &quot;hello world&quot; on NES back when I started this activity in 2002 at age 13 without any knownledge of the english language back then.</div><br /><br />I'm sorry but you're just showing your prejudice against high level programming. The small-C ish compiler for the PC engine is responsible for all current (and excellent) homebrew available, which despite being completely ignored when posted some pages before it's a pretty strong real-life example of real programmers doing real games for real 16-bit systems. Same with other consoles with varying levels of processing power (even Batari Basic expanded the 2600 homebrew library quite well).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DarkKobold</b> [ Thu Jul 05, 2018 2:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Punch wrote:</div><div class="quotecontent"><br />I'm sorry but you're just showing your prejudice against high level programming. The small-C ish compiler for the PC engine is responsible for all current (and excellent) homebrew available, which despite being completely ignored when posted some pages before it's a pretty strong real-life example of real programmers doing real games for real 16-bit systems. Same with other consoles with varying levels of processing power (even Batari Basic expanded the 2600 homebrew library quite well).</div><br /><br /><br />To me, it seems like a form of &quot;gatekeeping.&quot; You are only allowed to program for SNES if you learn ASM, and really care to put in the hard work! Who wants more homebrew anyway? <br /><br />I love the SNES, and I'd love to port my games. While C isn't the be-all end-all, and has it's own caveats, it's the easiest general way to put a game together. I feel like the general people here don't want more homebrew.<br /><br />I may just port to Genesis, and it's horrid sound chip.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Jul 05, 2018 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DarkKobold wrote:</div><div class="quotecontent">I feel like the general people here don't want more homebrew.<br /></div>I know I've said nothing else here, but I'd really be happy to see more SNES homebrew. (And yes, I wouldn't care what language it was written in!) I just don't have the correct kinds of skills to help with it.<br /><br />We do have a few grumpy people, unfortunately.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Jul 05, 2018 7:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In C compilers, is it common to pad 8-bit variables to 16-bit words?  Otherwise it would have to do all kinds of stuff with XBA and REP/SEP if you're adding or subtracting an 8-bit value from a 16-bit value.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jul 05, 2018 8:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">In C compilers, is it common to pad 8-bit variables to 16-bit words?  Otherwise it would have to do all kinds of stuff with XBA and REP/SEP if you're adding or subtracting an 8-bit value from a 16-bit value.</div><br />C structs are often padded, usually just to align to the size of the type of the next variable in the struct. The compiler is allowed to do this if needed for alignment or optimization. It's also common to have #pragma pack directives to disable it, where you need a specific memory layout.<br /><br />Alignment is the biggest issue necessitating this for the most part. On many modern platforms unaligned access might be a large performance problem, or even cause a crashing fault. It can also help with calculating the stride offsets for an array of structures if it's a power of two.<br /><br />Similarly, the result of malloc() is usually always aligned to 16-bytes or some other size so that it can be safely used with any primitive types the platform requires alignment for. There are compiler-specific extensions to add alignment requirements to types/structs as well. (C++11 finally created a standard &quot;align&quot; keyword.)<br /><br />If you're asking if CC65 does it, no I don't think it does (there's not even a #pragma pack), but it also has no aligned types since it only generates 8-bit code, so it doesn't really have any need for it either. Manually padding a struct for power-of-two stride might help a little though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Jul 05, 2018 9:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Similarly, the result of malloc() is usually always aligned to 16-bytes or some other size so that it can be safely used with any primitive types the platform requires alignment for. (There are compiler-specific extensions to add alignment requirements to types/structs as well.)</div><br />And if it's not implied or apparent to readers: this details of how this is accomplished (re: dynamic memory allocation) is complicated, compounded with mass variances between implementations (GNU libc vs. uClibc vs. musl vs. <a href="https://www.freebsd.org/cgi/man.cgi?query=malloc&amp;apropos=0&amp;sektion=0&amp;manpath=FreeBSD+9.3-stable&amp;arch=default&amp;format=html" class="postlink">FreeBSD 9.x and earlier libc (uses its own implementation)</a> vs. <a href="https://www.freebsd.org/cgi/man.cgi?query=malloc&amp;apropos=0&amp;sektion=0&amp;manpath=FreeBSD+11.2-stable&amp;arch=default&amp;format=html" class="postlink">FreeBSD 10.x later libc (uses jemalloc)</a>.  Functions like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">aligned_alloc&#40;&#41;</tt> (and non-standard <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">MALLOCX_ALIGN&#40;&#41;</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">MALLOCX_*_ALIGN&#40;&#41;</tt> for jemalloc) can guarantee alignment on some other boundary of your choice.<br /><br />Off-topic but semi-relevant: what's often unknown to general programmers is that many malloc implementations actually allocate more than what you ask for (ex. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc&#40;32&#41;</tt> will probably allocate 4096 bytes internally, but may pick something larger or smaller depending on all sorts of logic and heuristics), since the malloc implementation itself manages pages into different categories/sizings to greatly minimise memory fragmentation.  I believe several implementations also care deeply about cache line size.  For jemalloc, the implementation is actually described in the IMPLEMENTATION NOTES section of the man page I linked, ditto with older FreeBSD's libc.<br /><br />As for compilers (not libc/malloc!) deciding what to pad: depends on compiler.  This is especially a problem for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">struct</tt>s (it's one of the most commonly-discussed topics).  rainwarrior covered that most of its controlled with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">#pragma</tt>, varying per compiler.  Usually you'll find someone using something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">__attribute__&#40;&#40;aligned&#40;XXX&#41;,packed&#41;&#41;</tt>.  <a href="https://en.wikipedia.org/wiki/Data_structure_alignment" class="postlink">Wikipedia has an article</a> on the general matter of data structure alignment complexities with lots of C details.  Eric Raymond also has <a href="http://www.catb.org/esr/structure-packing/" class="postlink">a very detailed page</a> on the matter.<br /><br />Today's C compilers are often focused on portability (which was not a focus of C when originally created in the 70s, but within 4-5 years became a serious focal point that remains today), so there's that trade off too.<br /><br />It sounds to me like folks complaining about lack of C compiler essentially are saying &quot;assembly is fine but it takes a long time to write + is more tedious to deal with than something like C&quot;.  And that's very true!  Reading between the lines, to me that means an intermediary PL that is 65xxx-series friendly (re: limited registers, etc.), but not as tie-consuming as assembly, would benefit the masses.  What's funny about that is in the 70s and early 80s, there were some PLs invented with that sort of thing in mind (given the design of CPUs and systems during that era)... all of which by today have (generally) fallen out of favour in exchange for more commonplace PLs... C being one such PL.  :-)<br /><br />There really isn't something that fills the gap between C and assembly, and definitely even more so when taking the limits of the 65xxx architecture into consideration.  As such, the best two things we have right now are: a) cc65, which has had some games written in it (with assembly being required for important bits), and is 6502-centric (read: does not benefit from additional 65816 instructions, addressing modes, and register sizes), and b) Toshi Morita's lcc816, which in its current form won't emit 65816 assembly that's compatible with any present-day 65816 cross assembler.<br /><br />If I could magically wave my arms and make something happen, it would be to fix/improve 65816 support for cc65 and ca65 (the assembler, which does not cater well to 65816 in its present form (I've discussed this before)), and tell people &quot;if you know C, use this, but you are expected to also know 65816&quot;.  If said magic happened, I think Stef would probably put in the time/effort to do the dev env/lib/framework to make development easier for folks.  But I'm not a magic wizard.  IMO, the effort to make TM's lcc816 work with some present-day 65816 cross assemblers (ex. WLA-DX, etc.) would probably take less effort, *unless* the person doing the work is more familiar with compiler internals and compiler theory.<br /><br />And none of this even begins to touch base on graphical or audio tools.  That's a whole other world of hurt that, much like assemblers, had better support back in the snesdev heyday of the early 90s.  I could talk about that for hours but it's way off topic.  I do remember one thing, though: in the early 90s, there were lots of people who got interested in snesdev, did little doo-dads, then disappeared into the void once the subject of SPC700/audio/music came up.  I think the SNES happens to be an incredibly complicated console, probably overly so, but in a lot of ways I still think it feels way, *way* easier to program/work on than the NES.  I guess because I started with the SNES and later did NES stuff makes me a bit biased towards the 16-bit console.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Stef</b> [ Fri Jul 06, 2018 5:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">It sounds to me like folks complaining about lack of C compiler essentially are saying &quot;assembly is fine but it takes a long time to write + is more tedious to deal with than something like C&quot;.  And that's very true! <br /></div><br /><br />Of course, definitely this. I still think that for some people it would be even better to avoid using assembly at all if possible...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Reading between the lines, to me that means an intermediary PL that is 65xxx-series friendly (re: limited registers, etc.), but not as tie-consuming as assembly, would benefit the masses.  What's funny about that is in the 70s and early 80s, there were some PLs invented with that sort of thing in mind (given the design of CPUs and systems during that era)... all of which by today have (generally) fallen out of favour in exchange for more commonplace PLs... C being one such PL.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />There really isn't something that fills the gap between C and assembly, and definitely even more so when taking the limits of the 65xxx architecture into consideration.  As such, the best two things we have right now are: a) cc65, which has had some games written in it (with assembly being required for important bits), and is 6502-centric (read: does not benefit from additional 65816 instructions, addressing modes, and register sizes), and b) Toshi Morita's lcc816, which in its current form won't emit 65816 assembly that's compatible with any present-day 65816 cross assembler.<br /></div><br /><br />I don't think we really need to create a new intermediate PL, i think it would be better to improve the current available C compilers, standing with C language is definitely preferable as many people already know it and it offers easier portability (at least for some parts of the code).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I could magically wave my arms and make something happen, it would be to fix/improve 65816 support for cc65 and ca65 (the assembler, which does not cater well to 65816 in its present form (I've discussed this before)), and tell people &quot;if you know C, use this, but you are expected to also know 65816&quot;.  If said magic happened, I think Stef would probably put in the time/effort to do the dev env/lib/framework to make development easier for folks.  But I'm not a magic wizard.  IMO, the effort to make TM's lcc816 work with some present-day 65816 cross assemblers (ex. WLA-DX, etc.) would probably take less effort, *unless* the person doing the work is more familiar with compiler internals and compiler theory.<br /></div><br /><br />To be honest i don't know well these compilers but from what you told here, it sounds that trying to improve LCC816 to make it generate compatible assembly listing would be easier. But i don't really get it, i guess LCC816 is already producing valid binary code right ? what is the problem with it ? it don't allow to mix assembly code with C code ?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And none of this even begins to touch base on graphical or audio tools.  That's a whole other world of hurt that, much like assemblers, had better support back in the snesdev heyday of the early 90s.  I could talk about that for hours but it's way off topic.  I do remember one thing, though: in the early 90s, there were lots of people who got interested in snesdev, did little doo-dads, then disappeared into the void once the subject of SPC700/audio/music came up. <br />...<br /></div><br /><br />Yeah but that is something that will come next, first a &quot;usable&quot; C compiler, then a good library with good tools :p<br />That is just story of developing existing tools / libraries... from what i saw on this forum today things get better, we have sound driver good enough to be usable in game condition. Just need to include them in a SDK with a C API so they become easier to use <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 06, 2018 6:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Stef wrote:</div><div class="quotecontent">To be honest i don't know well these compilers but from what you told here, it sounds that trying to improve LCC816 to make it generate compatible assembly listing would be easier. But i don't really get it, i guess LCC816 is already producing valid binary code right ? what is the problem with it ? it don't allow to mix assembly code with C code ?</div><br />Syntax for directives and expressions varies from one assembler to another. It's not nearly as big as the difference between Intel syntax and GNU assembler's AT&amp;T syntax in i386, between Sony and MOS syntax in SPC700, or between Intel and Zilog syntax in 8080/Z80, but it does mean you can't assemble the same source code file in (say) ASM6 and ca65. My solution when building <em>Action 53</em> was to write preprocessors to turn a subset of NESASM or x816 syntax into something that ca65 could handle.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Jul 06, 2018 8:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think you can make an assembler with new instructions to make it more orthogonal, such as:<br /><br />ldx long<br /><br />but that will have to assemble to:<br /><br />sta shadow_reg<br />lda long<br />tax<br />lda shadow_reg<br /><br />which can slow it down quite a bit, it would have to use a bunch of variations depending on which regs are available.<br /><br />if A is available:<br />lda long<br />tax<br /><br />if A is unavailable, but Y is:<br />tay<br />lda long<br />tax<br />tya<br /><br />If directly before or after a &quot;sta mem&quot;<br /><br />sta mem<br />lda long<br />tax<br />lda mem<br /><br />Just too many variations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Jul 06, 2018 2:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Stef wrote:</div><div class="quotecontent">To be honest i don't know well these compilers but from what you told here, it sounds that trying to improve LCC816 to make it generate compatible assembly listing would be easier. But i don't really get it, i guess LCC816 is already producing valid binary code right ? what is the problem with it ? it don't allow to mix assembly code with C code ?</div><br />Toshi's lcc816 outputs assembly, not binary.  Its assembly is intended for use with ORCA/M, the Apple IIGS assembler -- which obviously nobody here is using.  :-)  I still have both my IIGS and ORCA/M (incl. manuals in PDF format); it's a top-grade assembler, so understanding what all the mnemonics and control directives do is very much possible.  There are also several bits that apparently output not-very-great code, which were rectified somehow but I believe Toshi lost the macros that improved it.  Please refer to the 6502.org thread I linked in a previous post for some details that he himself provides.  Toshi's also still around/active -- you can find him on LinkedIn or talk to him on the 6502.org forum -- and is a super friendly guy who did actual commercial SNES games (specifically the Zombies Ate My Neighbours SNES port).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Sat Jul 07, 2018 2:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />what actually is the &quot;difficult&quot; part about the SNES?<br /><br />The DMA stuff could just be wrapped in a macro, or you make macro that presets the 8 channels to do a thing, then get them to fire each DMA channel off as they want to do Thing X.<br /><br />How modular is ORCA, it is probably fairly easy to get a 65816 simulator and then enough Apple //gs file system rom mocked enough to give it what it expects and then run the ORCA assembler at ghz speed on a pc without having to go through a whole //gs emulator? That and its probably not that hard to translate the assem output. But having the 65816 simulator would be nice for other debugging tasks such as linking it in with BDD6502 <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Sat Jul 07, 2018 3:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For me, the banking is the greatest PITA.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sat Jul 07, 2018 5:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why no SNES homebrew scene?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All this time spent discussing SNES compilers, could have been spent working on a support library.  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>28</strong> of <strong>30</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>