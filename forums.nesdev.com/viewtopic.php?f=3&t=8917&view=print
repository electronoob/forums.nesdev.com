<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Mappers</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Mappers</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8917">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8917</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rhughes</b> [ Mon May 21, 2012 3:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Mappers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello
<br />
<br />I am just doing some research into the NES so as to create an emulator.
<br />
<br />I am trying to get my head around mappers. I have read lots of documents around the net and some entries in this website's wiki.
<br />
<br />Here is what I think I know and some questions. If you could please help me out I would be very grateful!
<br />
<br />There are LOTs of different mappers, some more common than others - such as MMC 1, MMC 3.
<br />
<br />The mapper is a chip on a cart's board which allows the 6502 to access more memory than is available on the NES by means of bank switching.
<br />
<br />Question: Where are the mappers' registers stored?
<br />
<br />Question: (Related to the above question) According to the Comprehensive NES Mapper Document v0.80 by \Firebug\, MMC 1 Register 0 is located at $8000 - $9FFF. This is a vast memory space for one register. What actually does this mean?
<br />
<br />Question: When is the mapper interfaced with? I am assuming that when the CPU reads/writes to either PKG-RAM/ROM or PPU memory, it first checks the currently used MMC registers to see which bank to go to? Or when one of the MMC registers is changed, the system swaps respective banks and thus the CPU simply reads from the active bank?
<br />
<br />Thank you all very much for your help,
<br />
<br />Richard Hughes

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>HardWareMan</b> [ Mon May 21, 2012 4:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You need to discover the term "mirroring".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon May 21, 2012 4:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A mapper is what we call a device in the cartridge that maps accesses to memory to various things. For instance, you can have a PRG ROM larger than 32k, and have the mapper switch which page appears when you read from 8000-BFFF.
<br />
<br />A mapper's registers are its internal state. They are stored inside the mapper chip itself. When it says a register is mapped to $8000-9FFF, it means that when you write a byte to any of these addresses, that byte is written to the mapper's internal register (it doesn't matter which particular address as long as it's in that range). Without a mapper a write to $8000-FFFF does nothing, since you can't write to ROM. Mappers take advantage of this unused address space for writing to allow you to control their internal state.
<br />
<br />Some mappers will also generate IRQ events, or perform other interesting functions (MMC5 has a built in multiplier). Some Famicom mappers have additional sound hardware as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rhughes</b> [ Mon May 21, 2012 4:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you both for the quick reply!
<br />
<br />That is wonderfully clear, thanks.
<br />
<br />So, as was mentioned by HardWareMan, would these values be mirrored throughout that whole memory space?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon May 21, 2012 8:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Like your example of the MMC1 reg0 it is mirrored through  $8000 - $9FFF
<br />
<br />This is done by ONLY looking at PRG /CE, and PRG A14 &amp; A13.  Those are they only address inputs the MMC1 has.  So it doesn't matter what A0-A12 are hence the mirror from $8000-9FFF.
<br />
<br />Not sure what you mean by "whole memory space" in your question.  Really the answer is specific to a given register on a given mapper.  Generally the mirror is only in the address range of the cartridge.  It'll never mirror with $0000-2000 for example because that would conflict with SRAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rhughes</b> [ Mon May 21, 2012 8:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In understand.
<br />
<br />What do you mean by "PRG /CE, and PRG A14 &amp; A13" - mappers-0.80.txt doesn't mention those expressions?
<br />
<br />(By whole address space I meant from $8000-$9FFF - sorry)
<br />
<br />Thanks,
<br />
<br />Richard

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 21, 2012 8:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />PRG A15 is the signal that carries bit 15 of the address being read or written by the CPU. It distinguishes $0000-$7FFF from $8000-$FFFF. It is not brought out to the cartridge edge connector, unlike the next four signals I'm about to describe.
<br />
<br />PRG A14 is the signal that carries bit 14 of the address being read or written by the CPU. It distinguishes $0000-$3FFF from $4000-$7FFF, or $8000-$BFFF from $C000-$FFFF.
<br />
<br />PRG A13 is the signal that carries bit 13 of the address being read or written by the CPU. It distinguishes $0000-$1FFF from $2000-$3FFF, $4000-$5FFF from $6000-$7FFF, $8000-$9FFF from $A000-$BFFF, or $C000-$DFFF from $E000-$FFFF.
<br />
<br />M2 is the CPU clock signal. It stands for "modified Phi2", where Phi2 is one of the clock phases in the 6502 CPU.
<br />
<br />PRG /CE (program chip enable), also called /PRGSEL (program select), is a signal to enable the ROM chip. The / means "active low", or that the chip should be enabled when the signal is 0 and disabled when it is 1. It is computed from A15 and M2 by a decoder chip inside the NES Control Deck, and it is low when a ROM should be providing data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon May 21, 2012 11:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rhughes wrote:</div><div class="quotecontent">Thank you both for the quick reply!<br /><br />That is wonderfully clear, thanks.<br /><br />So, as was mentioned by HardWareMan, would these values be mirrored throughout that whole memory space?</div>
<br />
<br />I think you are confused. Many mappers' registers are NOT readable. Some mappers don't decode addresses entirely giving them a range of addresses that will have the same behavior. Such as MMC1's PRG Page register will be written if you write to anywhere between $E000 and $FFFF. 
<br />
<br />But what appears when the CPU reads $E000 to $FFFF depends on the mapper's settings, it will be a page of PRG ROM, NOT the MMC1 register value.
<br />
<br />So there is alot of mirroring that goes on. This can be simulated with the AND bitwise operator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon May 21, 2012 2:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll try to explain a bit about the mirroring: Mirroring is a consequence of partial decoding of the address lines. Address lines are connections between the cart and the console, which are used to tell the cart the address of the byte the CPU needs to access.
<br />
<br />In order to make the mapper registers accessible to the program, the cart has to map them to certain addresses. The NES has 15 address lines connected to the cart (A0 through A14), enough to address anyone of 2^15 = 32768 bytes (hence why mapperless carts are limited to 32KB of ROM), but mappers don't have 32768 registers... even the most complex ones have no more than a couple dozen registers, so it would be a waste to watch all 15 address lines because that much precision isn't necessary.
<br />
<br />So, to save on the number of pins a mapper has, it will often only watch enough address lines to tell apart the registers it has. So it's common to see mappers with one register using all of $8000-$FFFF to access it, mappers with two registers dividing the PRG-ROM space in two, and so on (there's no rule for this though, and some mappers divide the addressing space in pretty crazy ways). The mirroring is just a consequence of ignoring some address lines.
<br />
<br />For example, if you ignore A0 (the lowest address line), but take all others into consideration, it will not be possible to distinguish between odd and even addresses, because the line that makes that selection is simply not connected to the mapper. For this reason, the mapper will act the same if $8000 or $8001 are accessed. $8002 and $8003 will also appear like the same address to the mapper. By ignoring some address lines, a bunch of addresses will look the same to the mapper, and this is why we often see vast ranges of addresses referencing a single register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rhughes</b> [ Tue May 22, 2012 3:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, I think I'm starting to understand.
<br />
<br />So really the process of the CPU reading from PRG-ROM is as follows:
<br />
<br />Read request -&gt; Access PRG-ROM page described by the mapper in question -&gt; Read byte(s) from the address on the active page
<br />
<br />So the address range $8000 - $FFFF is really a window into a possibly bigger PRG-ROM address space stored elsewhere.
<br />
<br />From what I have read, it seems that different mappers may affect all types of ROM spaces, but not RAM spaces - so, PRG-ROM and CHR-ROM, are there others?
<br />
<br />If a NES ROM has mapper number 0 or its PRG-ROM &lt; 32K, there is no mapper used, yes?
<br />
<br />Thanks again,
<br />
<br />Richard Hughes

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue May 22, 2012 4:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rhughes wrote:</div><div class="quotecontent">From what I have read, it seems that different mappers may affect all types of ROM spaces, but not RAM spaces - so, PRG-ROM and CHR-ROM, are there others?</div><br />Any memory can be bankswitched.<br /><br />Games on the SOROM, SXROM, ETROM, and EWROM boards have more than 8 KiB of PRG RAM. They change which page appears in $6000-$7FFF by writing to the mapper. It's possible to bankswitch CHR RAM; this is seen in about six licensed games (Pinbot, High Speed, Videomation, the Oeka Kids games, and some Japan-only RPG that I forget).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If a NES ROM has mapper number 0 or its PRG-ROM &lt; 32K, there is no mapper used, yes?</div>
<br />It's possible to have 16 KiB of PRG ROM and 16 KiB of CHR ROM on a CNROM board (Joust), which needs a mapper to switch the CHR ROM. It's also possible to have 32 KiB of PRG ROM and 16 KiB of CHR RAM on a CPROM board (Videomation), which needs a mapper to switch the CHR RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue May 22, 2012 7:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rhughes wrote:</div><div class="quotecontent">Read request -&gt; Access PRG-ROM page described by the mapper in question -&gt; Read byte(s) from the address on the active page</div><br />Yeah, but there might be more than one slot for pages.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So the address range $8000 - $FFFF is really a window into a possibly bigger PRG-ROM address space stored elsewhere.</div><br />Since there can be more than one slot, the range $8000-$FFFF can contain several windows. The most I've seen is 4 8KB windows (MMC3 and several other mappers). NSF uses 4KB banks I think.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">From what I have read, it seems that different mappers may affect all types of ROM spaces, but not RAM spaces - so, PRG-ROM and CHR-ROM, are there others?</div><br />The RAM at $000-$7FF can't be affected, because it's internal to the console, but RAM that's on the cart can ($6000-$7FFF, name table RAM, CHR-RAM). CHR-RAM is when the chip that usually contains the tiles is RAM instead of ROM, meaning it's empty when the program starts and the program itself has to write the tiles to it before being able to display them. the contents of CHR-RAM can be changed by the program as the game runs.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If a NES ROM has mapper number 0 or its PRG-ROM &lt; 32K, there is no mapper used, yes?</div>
<br />Mapper number 0 means no mapper, but ROMs that are 32Kb or smaller can use mappers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beannaich</b> [ Sat May 26, 2012 6:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sometimes emulator authors need a little code example to make things clearer. Here is my implementation of UxROM boards:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int prgBank&#91;2&#93;; // 2 registers for PRG banks, one variable, one fixed<br /><br />void Initialize&#40;void&#41;<br />&#123;<br />&nbsp; &nbsp; // Here, the two prgBank registers are set, the one being set to -1 is essentially constant, as it is never modified.<br />&nbsp; &nbsp; // Consider also, the bits of the 2 registers:<br />&nbsp; &nbsp; // bank&#91;0&#93; = 00 0000 0000 00.. .... .... ....<br />&nbsp; &nbsp; // bank&#91;1&#93; = 11 1111 1111 11.. .... .... ....<br />&nbsp; &nbsp; prgBank&#91;0&#93; = &#40;+0 * 16384&#41;;<br />&nbsp; &nbsp; prgBank&#91;1&#93; = &#40;-1 * 16384&#41;;<br />&#125;<br />void PokePrg&#40;int addr, byte data&#41;<br />&#123;<br />&nbsp; &nbsp; prgBank&#91;0&#93; = &#40;data * 16384&#41;; // Here's the bank switch, this method is called whenever a write between $8000 and $FFFF occurs.<br />&nbsp; &nbsp; // Multiplying by 16384 shifts the bits left by 14 leaving you with this:<br />&nbsp; &nbsp; // NN NNNN NN.. .... .... ....<br />&#125;<br /><br />int DecodePrgAddress&#40;int addr&#41;<br />&#123;<br />&nbsp; &nbsp; // here, 'addr' could be anything between &#40;and including&#41; $8000 - $FFFF<br />&nbsp; &nbsp; // since UxROM splits PRG ROM space into 2 16KB banks, we AND the address by $3FFF &#40;16 * 1024 - 1&#41;<br />&nbsp; &nbsp; // then using A14, we can determine which bank is being accessed.<br />&nbsp; &nbsp; // If A14 is 0, Bank $8000 - $BFFF is being accessed<br />&nbsp; &nbsp; // If A14 is 1, Bank $C000 - $FFFF is being accessed<br />&nbsp; &nbsp; // The final address will be composed like so:<br />&nbsp; &nbsp; // PP PPPP PPAA AAAA AAAA AAAA<br />&nbsp; &nbsp; // P: Bank number written to $8000 - $FFFF<br />&nbsp; &nbsp; // A: Address used during reads from $8000 - $FFFF<br />&nbsp; &nbsp; return prgBank&#91;addr &gt;&gt; 14 &amp; 1&#93; | &#40;addr &amp; 0x3FFF&#41;;<br />&#125;</div><br /><br />I hope that was clear and informative, and that it didn't confuse you. But this is essentially how hardware performs address decoding. It's implemented as a series of registers, AND, OR, XOR, and NOT gates.<br /><br />EDIT: I realized that if you subscribe to the iNES notion of what a PRG bank is, that this won't work as well. 'DecodePrgAddress' will return the proper index into a huge byte array consisting of the entire dump of a single PRG ROM chip, for example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">data = prgROM&#91;DecodePrgAddress&#40;PC&#41;&#93;;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sat May 26, 2012 8:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">beannaich wrote:</div><div class="quotecontent">EDIT: I realized that if you subscribe to the iNES notion of what a PRG bank is, that this won't work as well. 'DecodePrgAddress' will return the proper index into a huge byte array consisting of the entire dump of a single PRG ROM chip, for example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">data = prgROM&#91;DecodePrgAddress&#40;PC&#41;&#93;;</div></div>
<br />That's a good point.  In NESICIDE I drop the 16KB artificial boundary of a "bank" in the file while loading the file into the emulator.  Inside the emulator there's only the concept of 8KB banks for both PRG and CHR.  I realize this might not work well with NSF but as yet I have not tackled NSF.  I would expect this is how most emulators internally represent things...trying to keep in sync with the iNES boundary is silly once you get to the actual machine emulation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sat May 26, 2012 9:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">cpow wrote:</div><div class="quotecontent">In NESICIDE I drop the 16KB artificial boundary of a "bank" in the file while loading the file into the emulator.  Inside the emulator there's only the concept of 8KB banks for both PRG and CHR.  I realize this might not work well with NSF but as yet I have not tackled NSF.  I would expect this is how most emulators internally represent things...trying to keep in sync with the iNES boundary is silly once you get to the actual machine emulation.</div>
<br />
<br />Actually, PRG ROM banks are 16k ($4000), CHR ROM banks are 8k ($2000) stored in iNES format. When emulating, <strong>the smaller unit</strong> for PRG ROM banks is 8k ($2000), and 1k ($400) for CHR ROM banks.
<br />
<br />As curiosity, RockNES supports NSF and loads using the config above. ^_^;; No problems AFAIK.
<br />
<br /><span style="font-size: 59%; line-height: normal">(* I believe this topic should be moved to the Newbie Help Center)</span>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>