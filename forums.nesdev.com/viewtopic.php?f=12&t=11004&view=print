<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MSU1 Specs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MSU1 Specs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11004">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11004</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Feb 10, 2014 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are there any complete MSU1 specs? And what does MSU stand for? Mass Storage Unit? Movie Sound Upgrade? Media Something Unnamed?<br /><br />The best (inofficial) specs I could find are here <!-- m --><a class="postlink" href="http://helmet.kafuka.org/msu1.htm">http://helmet.kafuka.org/msu1.htm</a><!-- m --> - that page does also have a (broken) link to official specs: <!-- m --><a class="postlink" href="http://byuu.org/msu1/">http://byuu.org/msu1/</a><!-- m --> and it does have links to several forum threads (which I haven't check if they contain additional specs or scratch notes).<br /><br />And there are two implemention notes on <!-- m --><a class="postlink" href="http://sd2snes.de/blog/">http://sd2snes.de/blog/</a><!-- m --> and some notes about transfer rates here: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=124578#p124578">viewtopic.php?p=124578#p124578</a><!-- l --><br />EDIT: For transfer rate: byuu said <em>&quot;Needs to be fast enough to read 3.58Mbyte/s&quot;</em> - that isn't possible, or is it?<br />Fastest way I could think of would be DMA at 2.68Mbyte/s (assuming that the SNES doesn't contain any nasty feature that prevents using port 2000h-2007h for DMA).<br />Next fastest would be polling by software, which would be 0.51Mbyte/s (when using a 3-cycle load opcode and a 4-cycle store opcode at 3.58MHz).<br /><br />For the seek times: I understand thdm as so: The audio/data seek busy status flags need to be checked only on initial seeks (when setting a new data address, or when selecting a new track). And there after, programmers can simply expect that data and audio arrives fast enough (even if the hardware is organized in sectors, possibly stored on a fragment filesystem, and possibly sharing the same memory chip for data and audio).<br /><br />For hardware devrs that would mean that they must use hardware that is fast enough, and do suitable read-ahead caching on sequentially accessed memory chips. And when sharing the same media: give priority to data reads (and drop audio reads in case transfer is slowed down too much by slow SD cards, by read-retries, by filesystem fragmentation).<br /><br />For &quot;gamename-#.pcm&quot; audio track filenames, I've looked at the Super Road Blaster binary at <!-- m --><a class="postlink" href="http://www.dforce3000.de/">http://www.dforce3000.de/</a><!-- m --> it does 122 audio tracks, judging from their filenames, the &quot;#&quot; is supposed to be a unsigned decimal number in range 0..65535, without leading zeroes, ie. &quot;0..9&quot; for first 10 tracks, &quot;10..99&quot;  for next 90 tracks, &quot;100..999&quot; for next 900 tracks, and so on.<br /><br />The &quot;gamename.xml&quot; file - I hope that it's optional to interprete that file. I would prefer to detect MSU1 by presence of the &quot;gamename.msu&quot; data file, and expect the &quot;gamename.sfc&quot; file to contain a valid SNES header at FFxxh (with info about lorom/hirom/sram/etc). One fun caution: d4s does also has a &quot;gamename.sfc&quot; folder, which shouldn't be confused with the &quot;gamename.sfc&quot; file.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Mon Feb 10, 2014 11:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Archive.org to the rescue! <!-- m --><a class="postlink" href="https://web.archive.org/web/20101210124302/http://www.byuu.org/msu1/">https://web.archive.org/web/20101210124 ... .org/msu1/</a><!-- m --><br /><br />But I'm afraid it doesn't contain the info you are looking for though.<br /><br />If I remember correctly, the XML file is byuu's way of defining a cartridge in bsnes (instead of parsing often broken headers or relying on a third party database). So it might be non-optional if you want to make a msu enhanced homebrew that should be playable in bsnes, but nothing stops you from detecting it in some other way in your emulator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Feb 11, 2014 4:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't forget that the SMP audio mute flag has to be cleared, or the SMP won't mix the audio signal from the cartridge line. If this isn't emulated, people will produce MSU hacks that don't run on real hardware.<br /><br />&gt; And what does MSU stand for?<br /><br />Media Streaming Unit 1. MSU1 is a play on GSU1.<br /><br />&gt; EDIT: For transfer rate: byuu said &quot;Needs to be fast enough to read 3.58Mbyte/s&quot; - that isn't possible, or is it?<br /><br />I keep doing that because the registers are in a FastROM space, but DMA is locked tot 8 clocks/transfer. So yes, max is 2.68MB/s.<br /><br />&gt; The audio/data seek busy status flags need to be checked only on initial seeks (when setting a new data address, or when selecting a new track). And there after, programmers can simply expect that data and audio arrives fast enough (even if the hardware is organized in sectors, possibly stored on a fragment filesystem, and possibly sharing the same memory chip for data and audio).<br /><br />Yes. The initial seek should buffer enough audio samples to ensure it can handle any delay, before it allows playback to begin. The same goes for data read commands.<br /><br />&gt; And when sharing the same media: give priority to data reads (and drop audio reads in case transfer is slowed down too much by slow SD cards, by read-retries, by filesystem fragmentation).<br /><br />You should ensure the media is fast enough that this never happens. But if you were forced into a corner, it would certainly be preferable to drop audio samples as that can't possibly crash the game like bad data reads could.<br /><br />&gt; The &quot;gamename.xml&quot; file - I hope that it's optional to interprete that file. I would prefer to detect MSU1 by presence of the &quot;gamename.msu&quot; data file, and expect the &quot;gamename.sfc&quot; file to contain a valid SNES header at FFxxh (with info about lorom/hirom/sram/etc). One fun caution: d4s does also has a &quot;gamename.sfc&quot; folder, which shouldn't be confused with the &quot;gamename.sfc&quot; file.<br /><br />Yes, gamename.msu is how to detect the presence of the MSU1 with a file-based loader. And the audio filenames were gamename-%u.pcm. %u = 0 is possible, obviously. Modifying the FFxx header would have been too dangerous.<br /><br />The PCM file format is 44.1KHz 16-bit stereo PCM little endian format. It cuts off the WAV header and replaces it with &quot;MSU1&quot; signature, and then a 4-byte loop point, little endian. This is the sample# (8 + sample*4 = file offset) to loop to. Use zero for normal behavior. There's no loop-end, that's the end of the audio stream. If you have a single WAV file that's bigger than 16GB, then obviously you're going to have a problem if you want a loop point past that boundary. I don't ... expect anyone to ever do that.<br /><br />The custom header accomplished two goals: 1) no breaks if different MSU implementations supported different WAV formats (compression, sampling rate, etc), and 2) allowed looping audio without forced fade-in/fade-out (although with no tools, it'll take trial and error to cleanly loop a song this way.)<br /><br />However ... I should say that you can still bypass this, and support 96KHz 24-bit 5.1 surround tracks if you really want. Obviously the real thing couldn't do this, but an emulator could. The actual SNES/MSU1 code doesn't care what format audio is in. The important part is getting the games to work on all emulators and all real hardware, which is what PCM tries to do: set a baseline. If you deviate, people aren't going to be able to use the game anywhere else.<br /><br />&gt; If I remember correctly, the XML file is byuu's way of defining a cartridge in bsnes (instead of parsing often broken headers or relying on a third party database).<br /><br />d4s wrote Super Road Blaster right as I was developing game folders. There was a lot of experimentation at the time, so the format changed a bit as he was developing it. XML is not used at all in higan anymore. I use a much lighter weight BML format now, which is like YAML but more lightweight than that as well.<br /><br />This is where it gets tricky. Currently to play an MSU1 game in higan, it has to be in the game folder format. That will have a manifest.bml. That file names the ROM, RAM, MSU data and audio track filenames. It also tells you where the MSU registers map to. You could actually move them, and also eventually spawn as many MSU instances as you wanted.<br /><br />I don't expect anyone else to ever support game folders, BML, the ability to remap the entire bus and all special chip addresses based on a markup text file, or the ability to have multiple instances of any special chip in the same game.<br /><br />So from a base perspective, the format you should distribute an MSU1 game in is:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">game.sfc/<br />&nbsp; manifest.bml &#91;optional&#93;<br />&nbsp; game.sfc<br />&nbsp; game.msu<br />&nbsp; game-0.pcm<br />&nbsp; game-1.pcm</div><br /><br />Since the manifest.bml file names all of the filenames, it's possible to mimic the structure above in higan, thus allowing the same &quot;game.sfc/&quot; folder to load on the sd2snes and higan with no changes.<br /><br />I need to update my import tool to convert the above to load into higan without the manifest. Similarly, if you can accept importing the above, then you could organize MSU games however you liked. Merge it all into a ZIP archive, into a big flat file, whatever works for you.<br /><br />And really long-term, I want to make an enhanced importer tool where you can give it a list of AVI / MP3 files, and it'll do the re-encoding and conversion into the .msu data file for you. That would allow MSU downloads to be ten times smaller. You'd input this archive into an importer tool, choose where you want to play the MSU game (sd2snes, higan, or other) and it'd produce output that would work there for you.<br /><br />I just haven't had the time to get to this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 11, 2014 8:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">The custom header [...] allowed looping audio without forced fade-in/fade-out (although with no tools, it'll take trial and error to cleanly loop a song this way.)</div><br />What do you mean by &quot;no tools&quot;? Every decent wave editor, like Audacity and Audition, can play and loop the selected portion of a wave and report the start of the selection as an offset in samples from the start of the file.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The important part is getting the games to work on all emulators and all real hardware, which is what PCM tries to do: set a baseline. If you deviate, people aren't going to be able to use the game anywhere else.</div><br />And by now, gigabytes of memory are probably cheaper than a decoder ASIC to put on a cartridge. (Or are they?)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't expect anyone else to ever support [...] the ability to have multiple instances of any special chip in the same game.</div><br />Unless you're one of those multi-chip NSF composers who thinks &quot;four Namco 163s... 24 channels... fap fap fap&quot;. Or for someone who wants multiple music streams to make a rhythm game with vocal tracks (like Frequency, Amplitude, Rock Band Unplugged, or Rock Band Blitz). These would require the ability to start music streams paused in order to keep them synchronized.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And really long-term, I want to make an enhanced importer tool where you can give it a list of AVI / MP3 files, and it'll do the re-encoding and conversion into the .msu data file for you. That would allow MSU downloads to be ten times smaller. You'd input this archive into an importer tool, choose where you want to play the MSU game (sd2snes, higan, or other) and it'd produce output that would work there for you.</div><br />Excellent. So sort of like a tool that turns a .iso + a bunch of .ogg files into a .bin + .cue for burning, I guess. Otherwise, someone else would have started distributing games with a shell script/batch file to rebuild the msu/pcm files at install time. But I'd strongly recommend .ogg instead of .mp3 for three reasons:<br /><ul><li>The .mp3 spec is slightly unclear as to the actual encoder delay, unlike Vorbis where the delay is always defined as one MDCT block (and therefore always compensated exactly by the decoder). </li><li>Vorbis is more efficient with bits at a given subjective quality level. (Opus is even better but may take time to catch on.) </li><li>Vorbis is royalty-free so Fraunhofer and Technicolor can't sue you. (So is Opus.) This is why a lot of video games for disc-based consoles (and even Nintendo DS in the case of Guitar Hero On Tour) have started using .ogg background music. </li></ul>AVI files might be even harder. What codec do you plan to use? Do you plan to use FFmpeg to decode them?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Tue Feb 11, 2014 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">hyarion wrote:</div><div class="quotecontent">Archive.org to the rescue! <!-- m --><a class="postlink" href="https://web.archive.org/web/20101210124302/http://www.byuu.org/msu1/">https://web.archive.org/web/20101210124 ... .org/msu1/</a><!-- m --></div><br />Thanks, I didn't check there yet! Okay that's really brief. One small difference is &quot;d3-d0 = revision (always 1)&quot;. Meanwhile &quot;d3&quot; is used as track missing flag, and... I assume &quot;d2-d0&quot; are kept at &quot;always 1&quot;, or did that bits already change to another revision number?<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Don't forget that the SMP audio mute flag has to be cleared, or the SMP won't mix the audio signal from the cartridge line. If this isn't emulated, people will produce MSU hacks that don't run on real hardware.</div><br />Good that you mention that. I did think about it a few days ago, but then... I did forgot about it again : - )<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">This is the sample# (8 + sample*4 = file offset) to loop to.</div><br />Good to know. The kafuka.org page declared it as position in samples, too. But I wasn't 100% sure if it meant to do the +8 for skipping the header.<br /><br />The filenames are a bit unclear to me. So far, I've seen four naming schemes:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; Regular ROM&nbsp; &nbsp; &nbsp; Folder (old)&nbsp; &nbsp; &nbsp; &nbsp;Folder (new)&nbsp; &nbsp; &nbsp;d4s<br />&nbsp; game.sfc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;program.rom&nbsp; &nbsp; &nbsp; &nbsp; game.sfc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;game.sfc<br />&nbsp; game.msu&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;msu1.rom&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;game.msu&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;game.msu<br />&nbsp; game-#.pcm&nbsp; &nbsp; &nbsp; &nbsp;track-#.pcm&nbsp; &nbsp; &nbsp; &nbsp; game-#.pcm&nbsp; &nbsp; &nbsp; &nbsp;game-#.pcm<br />&nbsp; game.xml&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;manifest.xml&nbsp; &nbsp; &nbsp; &nbsp;manifest.bml&nbsp; &nbsp; &nbsp;game.xml+manifest.xml</div><br />The <strong>&quot;Regular&quot;</strong> variant looks best to me (emulators would usually allow users to select &quot;.sfc&quot; and &quot;.smc&quot; files and the like, and from point, the emulator would <em>know</em> which files it need to look for (ie. keeping the same name with changed extensions and/or track number appended)). That variant is also more clear on which files belong together.<br />For the <strong>&quot;Folder (new)&quot;</strong> variant I can't see why it needs &quot;manifest.xxx&quot; instead of &quot;game.xxx&quot;. That could go wrong if somebody moves the files around (like storing more than one game in a single folder). I guess the idea is something like looking for the &quot;manifest&quot; filename when opening a folder? But one could as well look for &quot;foldername.bml&quot;, or better just for &quot;*.bml&quot;. Or ideally use the &quot;Regular&quot; variant with &quot;game.xml&quot; (or &quot;game.bml&quot; if .xml is now dropped).<br />The <strong>&quot;Folder (old)&quot;</strong> variant is using all different filenames, and different extensions (.rom instead .sfc and .msu). It does also forcefully prevent using more than 100 tracks on a filesystem with 8.3 filename length limit. I hope that variant is dropped, and it's not any longer recommended to use that naming scheme! (?)<br />And finally, the <strong>&quot;d4s&quot;</strong> variant (as used in Super Road Blaster v1.2) is same as the &quot;Regular&quot; one (with two .xml files, so it would work either as game.xml or manifest.xml - though not as .bml).<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">And really long-term, I want to make an enhanced importer tool where you can give it a list of AVI / MP3 files</div><br />Don't hurry too much! The idea is making me a bit nervous anyways. Faster download would be nice. Downside is that it'd be more difficult to use that files. Either one would need using a de-conversion tool before use (which may not work on all OSes, or which may require installing compilers if it were released as plain source code...). Or it would need to be implemented directly in emulators (might be difficult even if the OS offers decompression codecs), that sd2snes hardware would probably also be unable to support AVI/MP3 decoding on-chip.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Feb 11, 2014 10:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; What do you mean by &quot;no tools&quot;? Every decent wave editor, like Audacity and Audition, can play and loop the selected portion of a wave and report the start of the selection as an offset in samples from the start of the file.<br /><br />I mean they don't work with the MSU1-PCM file format directly.<br /><br />If you can extract the sample# from your Audacity loop file, and insert it into a PCM file, then that's great.<br /><br />&gt; And by now, gigabytes of memory are probably cheaper than a decoder ASIC to put on a cartridge. (Or are they?)<br /><br />Probably. I wanted to keep the hardware design as simple as possible.<br /><br />&gt; These would require the ability to start music streams paused in order to keep them synchronized.<br /><br />Merge it all to one audio stream to play. If you need more than one channel, that's outside the scope of what MSU1 wanted to accomplish. (Two streams would have been really nice for voice acting + CD audio, but oh well.)<br /><br />I could have stuck an amd64 CPU at 2GHz into the MSU1, but then you'd never see a hardware implementation.<br /><br />&gt; AVI files might be even harder. What codec do you plan to use? Do you plan to use FFmpeg to decode them?<br /><br />Don't know yet.<br /><br />&gt; Thanks, I didn't check there yet! Okay that's really brief. One small difference is &quot;d3-d0 = revision (always 1)&quot;. Meanwhile &quot;d3&quot; is used as track missing flag, and... I assume &quot;d2-d0&quot; are kept at &quot;always 1&quot;, or did that bits already change to another revision number?<br /><br />He linked you to an older spec version. We added the track missing flag so that you could selectively replace songs instead of being required to replace all or none of them (think of a game ROM hack that let you drop in MP3s to replace the default audio. This'll let you optionally replace any track, but by default only replace some.)<br /><br />We used d3 for this since it would have always been zero previously.<br /><br />&gt; For the &quot;Folder (new)&quot; variant I can't see why it needs &quot;manifest.xxx&quot; instead of &quot;game.xxx&quot;. That could go wrong if somebody moves the files around (like storing more than one game in a single folder).<br /><br />The point of game folders is one game = one folder. It's against the design to have two games in the same folder.<br /><br />The files are supposed to be named: program.rom, save.ram, track-#.pcm (or actual track names, like &quot;01 - Opening.pcm&quot;, up to the author.) But the manifest allows you to change them if you want.<br /><br />&gt; But one could as well look for &quot;foldername.bml&quot;, or better just for &quot;*.bml&quot;.<br /><br />You could, I chose not to. game.sfc/game.bml is repetitive, especially for a long title. Renaming the game folder would require renaming the manifest file. Scanning for *.bml would require parsing all files in the folder instead of just doing an if(file::exists({pathname, &quot;manifest.bml&quot;})) call.<br /><br />&gt; It does also forcefully prevent using more than 100 tracks on a filesystem with 8.3 filename length limit.<br /><br />I am unable to force myself to care less about that. gamename.sfc doesn't even allow us to name games properly, and you get MAME-style &quot;actraisr.sfc&quot; + &quot;actrsrjp.sfc&quot; nonsense. It's the 21st century now.<br /><br />&gt; And finally, the &quot;d4s&quot; variant (as used in Super Road Blaster v1.2) is same as the &quot;Regular&quot; one (with two .xml files, so it would work either as game.xml or manifest.xml - though not as .bml).<br /><br />Go with regular or d4s in your examples, but ignore the XML files, and you'll be good.<br /><br />&gt; I hope that variant is dropped, and it's not any longer recommended to use that naming scheme!<br /><br />My rationale for folders and a consistent file naming scheme is here: <!-- m --><a class="postlink" href="http://byuu.org/higan/features/game-library/">http://byuu.org/higan/features/game-library/</a><!-- m --><br />You certainly don't have to agree with it, and I'm sure you can think of disadvantages to it.<br />But after a few years of thinking about this, this is what I came up with and decided to do from my end.<br /><br />I don't think it would be good for an MSU1 author to distribute in my format directly, specifically because nobody else will support it. A conversion tool that I make for my emulator will be needed to import from the base format described above.<br /><br />&gt; Don't hurry too much! The idea is making me a bit nervous anyways. Faster download would be nice. Downside is that it'd be more difficult to use that files. Either one would need using a de-conversion tool before use (which may not work on all OSes, or which may require installing compilers if it were released as plain source code...). Or it would need to be implemented directly in emulators (might be difficult even if the OS offers decompression codecs), that sd2snes hardware would probably also be unable to support AVI/MP3 decoding on-chip.<br /><br />Yes, those are all serious concerns. The sd2snes definitely won't be able to decode AVI/MP3 in real-time, so they'd have to be converted by a tool that may not run on esoteric platforms like Haiku.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 11, 2014 11:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">Either one would need using a de-conversion tool before use (which may not work on all OSes, or which may require installing compilers if it were released as plain source code...).</div><br />Is it really that hard to install build-essential on Debian/Ubuntu/Mint, MinGW+MSYS on Windows, DJGPP on MS-DOS/FreeDOS, or whatever the <a href="https://www.haiku-os.org/news/2009-01-31/haiku_finally_gets_a_native_gcc4_full_story_inside" class="postlink">port of GCC to Haiku</a> is called?<br /><br /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">that sd2snes hardware would probably also be unable to support AVI/MP3 decoding on-chip.</div><br />But it might be able to decode an ADPCM flavor, such as BRR (Super NES), VAG (PS1/PS2), or IMA (DS).<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><div class="quotetitle">nocash wrote:</div><div class="quotecontent">It does also forcefully prevent using more than 100 tracks on a filesystem with 8.3 filename length limit.</div><br />I am unable to force myself to care less about that.</div><br />Long file names on file systems compatible with Windows OS are still patented for a few more years.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Tue Feb 11, 2014 12:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">He linked you to an older spec version.</div><br />Well, then - is there a newer version? The link seems to be the newest existing version available via wayback machine.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">My rationale for folders and a consistent file naming scheme is here: <!-- m --><a class="postlink" href="http://byuu.org/higan/features/game-library/">http://byuu.org/higan/features/game-library/</a><!-- m --><br />I don't think it would be good for an MSU1 author to distribute in my format directly, specifically because nobody else will support it.</div><br />Okay, yes, I can think of some advantages and disadvantages. And I am puzzled what you are doing there : - )<br />First you made bsnes as first emulator that could load only .sfc files, but no .smc files.<br />And now you have higan that can only load .sfc folders, but no .sfc files.<br />You must really <em>like</em> doing things in unusual ways.<br />Which is fine. It could make life more difficult though (eg. when wanting to use a romimage on different emulators).<br /><br />In no$sns, I would really like to get around using .xml or .bml files. Or possibly .hml - just in case you might happen to do something unexpected again : - )<br />So I would just hope/expect that all files are sharing the same filename (aside from their extensions and &quot;-#&quot; track suffix; without leading zeroes, ie. in the format as used by d4s).<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Is it really that hard to install build-essential on Debian/Ubuntu/Mint, MinGW+MSYS on Windows, DJGPP on MS-DOS/FreeDOS, or whatever the <a href="https://www.haiku-os.org/news/2009-01-31/haiku_finally_gets_a_native_gcc4_full_story_inside" class="postlink">port of GCC to Haiku</a> is called?</div><br />To some people, yes. To me it's just that I don't want have a <em>compiler</em> on my computer. And many other people won't even know what the fuck they are supposed to do with something that comes as plain source code.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But it might be able to decode an ADPCM flavor, such as BRR (Super NES), VAG (PS1/PS2), or IMA (DS).</div><br />My concern was that the files should be distributed in a standarized format that is ready-for-use in emulators (or on that sd2snes hardware).<br />Some people might also dislike lossy compression like OGG/MP3/ADPCM.<br />Aside from that issue, yes, ADPCM would have the advantage that it could be implemented without too much efforts in emulators &amp; on hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Feb 11, 2014 12:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Maybe I missed something, what is this about AVIs? Does the SNES have some kind of video signal input like the Audio Input?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 11, 2014 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Probably for decoding AVIs to tile data that would be included in the main MSU image or something.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Feb 11, 2014 7:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; Well, then - is there a newer version? The link seems to be the newest existing version available via wayback machine.<br /><br />There is not.<br /><br />You are much better at documentation, whereas I usually just rely on source code to document how things work.<br /><br />&gt; You must really like doing things in unusual ways.<br /><br />I like doing things in an optimal fashion, without letting backward-compatibility limit me. I wanted to do .sfc files sans headers before any of the coprocessor firmware was ever dumped, and before MSU1 existed. The concept of needing multiple files to play a game hadn't been a problem to consider up to that point. Then I wanted to get perfect per-game mapping, and came up with XML to allow that. Then I actually went about doing that myself because no one else was interested, and realized what a nightmare it'd be to hand-type 2,000 board mappings in XML myself, so I simplified that to BML. I thought about how awkward it was to explain linear/shadow/direct mapping types, and reduced it to a single mask parameter that works much better. Mapping is now a combination of reduce/mask + mirror/size.<br /><br />It's a continual evolution. I never change things just for the sake of it, but I will break things if I feel it makes the format stronger. The more time passes, the more refined it gets, the less frequent the changes. My cooperative threading library and binary delta patching format have been stable for about three years now, <em>very</em> unlikely they will ever change again.<br /><br />I have like one small nagging concern on SNES manifest files still, but making a decision on it shouldn't affect existing mappings.<br /><br />&gt; Which is fine. It could make life more difficult though (eg. when wanting to use a romimage on different emulators).<br /><br />You can load a zipped SMC image with a copier header prepended, and firmware file stored in the same folder as the ZIP file merged into a single file, and it'll play it in higan.<br /><br />But yes, if you take the folders out of higan and try and run them elsewhere, you will have to rename things. It's not at all friendly to someone who wants to run multiple emulators at the same time for whatever reason (compatibility is no longer one of those reasons.)<br /><br />&gt; In no$sns, I would really like to get around using .xml or .bml files. Or possibly .hml - just in case you might happen to do something unexpected again :-)<br /><br />I think it would be really challenging to support the exact same semantics as higan/BML today. You can remap anything down to one-byte granularity. There's no super-fast way to do that: you need a giant 16MB table to tell you where each address space byte goes to. It's too slow to parse a tree / sub-divided nested granularity chain / etc* for each memory access. It's a big performance hit still. (* I've thought about countless ways to do this, please don't chime in with alternate theories on how to do this unless you test them in an actual emulator [tepples :P])<br /><br />My big worry is that by only partially supporting it, that the format would 'splinter.' You'd end up with game folders that only work in one emulator, but not the other.<br /><br />But I would certainly be thrilled if you could pull it off successfully. I'd love for the format to catch on more broadly. I spent a few years begging other SNES emulator authors to work with me on the format, and nobody ever did, so it has been entirely my own design, sadly.<br /><br />&gt; Probably for decoding AVIs to tile data that would be included in the main MSU image or something.<br /><br />Right. Chrono Trigger anime opening is a 2MB MPEG, and a 60MB lossless video. Which, guess where that lossless video came from? An MPEG. Even lossless, it's full of MPEG artifacts anyway, because nobody has the uncompressed master except Square.<br /><br />We can't make the MSU1 play videos like it plays audio, because the SNES doesn't work like that. You'd need a video passthru cable, and yeah ... fuck that. Nobody's making an SNES cart that has a MultiAV-in and MultiAV-out. So this would convert an AVI to the SNES format your game wants, so you can distribute your CT FMV+CD-audio pack as a 40MB download instead of as an 800MB download.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Wed Feb 12, 2014 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">You are much better at documentation, whereas I usually just rely on source code to document how things work.</div><br />Whew, thanks for the flowers : - ) okay, then I am trying to take your source code apart... and write some notes/questions.<br />One small warning: I've looked at some old bsnes source that I had laying around, so some details <em>might</em> be different in your current source. The msu file I had was dated 25 Jun 2012 (but the source package also included emulator.hpp with date 10 Aug 2012).<br /><br /><strong>Reset</strong> - most eye-catching is this: <div class="codetitle"><b>Code:</b></div><div class="codecontent">void MSU1::reset() {<br />&nbsp; create(MSU1::Enter, 44100);<br />&nbsp; boot = true;<br />&nbsp; mmio.data_offset&nbsp; = 0;<br />&nbsp; mmio.audio_offset = 0;<br />&nbsp; mmio.audio_track&nbsp; = 0;<br />&nbsp; mmio.audio_volume = 255;<br />&nbsp; mmio.data_busy&nbsp; &nbsp; = true;<br />&nbsp; mmio.audio_busy&nbsp; &nbsp;= true;<br />&nbsp; mmio.audio_repeat = false;<br />&nbsp; mmio.audio_play&nbsp; &nbsp;= false;<br />&nbsp; mmio.audio_error&nbsp; = false;</div><br />but there's also this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; if(boot == true) {<br />&nbsp; &nbsp; boot = false;<br />&nbsp; &nbsp; for(unsigned addr = 0x2000; addr &lt;= 0x2007; addr++) mmio_write(addr, 0x00);</div><br />I am not sure how that two part are executed in order, and how often (only on coldboot, or also on warmboot). But I guess they are executed shortly after each other as ordered above.<br />So for example, volume would become ZERO, and busy flags would become FALSE automatically after reset, right?<br /><br /><strong>Floating Point Unit</strong> <div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; signed lchannel = (double)left&nbsp; * (double)mmio.audio_volume / 255.0;<br />&nbsp; &nbsp; signed rchannel = (double)right * (double)mmio.audio_volume / 255.0;</div><br />Is that really a floating point division by 255? That's something cannot be reasonably implemented in hardware (nor in emulators). Integer multiply and shift right 8 steps should do the same thing, and it'd be common to skip the calculation for max volume (ie. let &quot;*255 shr 8&quot; act is if it were &quot;*256 shr 8&quot;)<br /><br /><strong>Data Address</strong> - the basic idea here is to write 4 bytes to set the 32bit address, with the seek occuring on 4th write. There are some corner cases on &quot;what happens when doing data reads after writing less than 4 address bytes&quot; (which, one shouldn't ever do that). When implementing it same way as in your source code, it should act as so:<br />The Address Register gets incremented on each data read (so, when initializing address.lsb to zero, one should not expect it to stay at that value) (just mentioning in case somebody has all data stored on 256-byte boundaries, and thinks that it would be faster to rewrite only the upper 3 address bytes).<br />The filepointer (in the OS) also gets incremented on each data read (so it does usually increment in sync with the incrementing Address Register). The corner case is when somebody changes only the Address Register LSBs: Then Address Register and filepointer will have different values, with reads being done in respect to filepointer... <em>unless</em> you are loading/saving a snapshot: that would reinitialize the filepointer (and make it same as the Address Register value).<br /><br /><strong>Play and Repeat Flags</strong> these flags exist in both Status and Control register. From the docs it wasn't quite clear to me if they have different meanings. But from the source code: Status.Play/Repeat values are identical to Control.Play/Repeat values. Aside from writing to control register, they are also manipulated automatically upon some events:<br />Reset: Play=0, Repeat=0<br />Selecting a new Track: Play=0, Repeat=0<br />Reaching end of Track: If Repeat=0 then Play=0<br />If &quot;file not open&quot;: Play=0 (that case... appears to be same or similar the track not found error)<br /><br /><strong>Busy Flags</strong> easiest case would be to have them set to 0=Ready all the time (assuming that either the hardware fast enough, or simply pausing the emulation when it isn't). If that works well, then I'll just do it that way. Looks as if you have implemented it as so, too (aside from busy bits being initiallly/temporarily set on reset).<br />Btw. worst case for audio seek that I could think of is this: Running the .sfc file from a compressed .zip or .7z file (which also contains compressed tracks). I'll probably not implement that case as it's slightly more difficult to decompress multiple files (and supporting that isn't needed for normal single-file SNES rom-images).<br />But if were supported, in a on-the-fly fashion (=decompressing a new track when needed) then it may cause huge 'seek' times.<br />For .7z files it may take several minutes (as it would need to decompress all preceeding files in the .7z archive).<br />For .zip files it may take a few seconds (as it would only need to <em>skip</em> the preceeding files in the .zip archive).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Feb 12, 2014 5:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the notes! Always fun to see what others can pick out that you just don't catch yourself.<br /><br />I should hire you to review all of my source =)<br /><br />&gt; Whew, thanks for the flowers<br /><br />Not sure what that means, but it was a compliment from me at any rate.<br /><br />&gt; but there's also this:<br /><br />Actually, I'm not sure why that is there, either. I probably used that for initialization before setting each variable by hand, and forgot to remove it. It does have a nasty instance of initializing the data/audio ready states. Pretend it's not there for your implementation, I'll remove it on my end.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; mmio.data_offset&nbsp; = 0;<br />&nbsp; mmio.audio_offset = 0;<br />&nbsp; mmio.audio_track&nbsp; = 0;<br />&nbsp; mmio.audio_volume = 255;<br />&nbsp; mmio.data_busy&nbsp; &nbsp; = true;<br />&nbsp; mmio.audio_busy&nbsp; &nbsp;= true;<br />&nbsp; mmio.audio_repeat = false;<br />&nbsp; mmio.audio_play&nbsp; &nbsp;= false;<br />&nbsp; mmio.audio_error&nbsp; = false;</div><br /><br />That's the correct initialization state as intended.<br /><br />&gt; Is that really a floating point division by 255?<br /><br />Yes, that's really what it is.<br /><br />&gt; That's something cannot be reasonably implemented in hardware (nor in emulators)<br /><br />Hardware, fine. And yet I did it in my emulator, quite reasonably with / 255.0<br /><br />Anyway, no reason to over-analyze here. 255 = 100% volume, 0 = muted. Use whichever micro-optimization you like. Nobody is going to notice a sample difference of +/-1 on a 16-bit sample.<br /><br />(sorry to be crabby about that :P I know, bit-perfect emulation and all that. For some reason, I always hate doing floating-point in fixed-point.)<br /><br />&gt; The corner case is when somebody changes only the Address Register LSBs: Then Address Register and filepointer will have different values, with reads being done in respect to filepointer... unless you are loading/saving a snapshot: that would reinitialize the filepointer (and make it same as the Address Register value).<br /><br />Good catch. Yes that would be one <em>hell</em> of an edge case, but possible. I should serialize the file offset separately from the MMIO register value. You need to keep two copies for this to work. One raw file offset, one MMIO register that is dumped into the file offset on 2003 write.<br /><br />&gt; Busy Flags easiest case would be to have them set to 0=Ready all the time (assuming that either the hardware fast enough, or simply pausing the emulation when it isn't). If that works well, then I'll just do it that way. Looks as if you have implemented it as so, too (aside from busy bits being initiallly/temporarily set on reset).<br /><br />It's better to emulate a slight &quot;seek delay&quot;, so that people don't write homebrew that expects the device to be immediately ready. That will force them to wait for the busy flags to clear. I need to test my sd2snes to get a good feel for its average delay time, and copy it. Haven't gotten around to it yet.<br /><br />&gt; But if were supported, in a on-the-fly fashion (=decompressing a new track when needed) then it may cause huge 'seek' times.<br /><br />Well, you're an emulator. You can cheat and pretend that any long operation occurs instantly. Like we all did for DSP coprocessor functions prior to firmware being dumped and emulated.<br /><br />But yeah, you probably want to keep it reasonable, and decompressing a 60MB PCM file from an archive will be a big performance hit for a real-time emulation.<br /><br />Given MSU1 is new, people aren't in the habit of expecting MSU1 games to run inside ZIP archives, so I don't think people will complain too bitterly about it.<br /><br />But if you really want to do that some day ... as you said, 7-zip is right out thanks to solid archives. But it should be possible to stream-decompress ZIP if you write your own deflate implementation that works in chunks. I think, anyway ... correct me if I'm wrong and you have to decode the entire file at once.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qwertymodo</b> [ Wed Feb 12, 2014 7:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">&gt; But if were supported, in a on-the-fly fashion (=decompressing a new track when needed) then it may cause huge 'seek' times.<br /><br />Well, you're an emulator. You can cheat and pretend that any long operation occurs instantly. Like we all did for DSP coprocessor functions prior to firmware being dumped and emulated.<br /><br />But yeah, you probably want to keep it reasonable, and decompressing a 60MB PCM file from an archive will be a big performance hit for a real-time emulation.<br /><br />Given MSU1 is new, people aren't in the habit of expecting MSU1 games to run inside ZIP archives, so I don't think people will complain too bitterly about it.<br /><br />But if you really want to do that some day ... as you said, 7-zip is right out thanks to solid archives. But it should be possible to stream-decompress ZIP if you write your own deflate implementation that works in chunks. I think, anyway ... correct me if I'm wrong and you have to decode the entire file at once.</div><br /><br />IIRC, solid compression is optional in 7-zip

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Feb 12, 2014 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But if you turn off solid compression, don't you lose so much ratio that you might as well use .zip for the sake of wider compatibility?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>