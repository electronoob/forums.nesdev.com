<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=9283" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-03-21T10:18:45-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=9283</id>
<entry>
<author><name><![CDATA[OneCrudeDude]]></name></author>
<updated>2014-03-21T10:18:45-07:00</updated>
<published>2014-03-21T10:18:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=127050#p127050</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=127050#p127050"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=127050#p127050"><![CDATA[
I'm so honored to have been mentioned in a post!  Anyway, regarding my parallax theory, I was thinking this could be used to add a much needed depth in NES games.  Granted the hardware wasn't natively capable of doing it, instead relying on bankswitching techniques or scanline split techniques.  The below image (from Panic Restaurant, which I believe has the best artistic direction of all NES games) will be used for my example.<br /><br /><img src="http://i8.photobucket.com/albums/a42/bdkmat/60.png" alt="Image" /><br /><br />You see the floor, buildings, the sign, and the distant skyscrapers, right?  My theoretical &quot;parallax&quot; mapper would make the skyscrapers move as the player does.  Of course, this is basic parallax for NES games, but I was thinking about doing a more thorough attempt.  The following example would be another example.<br /><br /><img src="http://www.consoleclassix.com/info_img/Ninja_Gaiden_2_NES_ScreenShot3.jpg" alt="Image" /><br /><br />Again, the distant blue buildings will &quot;scroll&quot; &quot;behind&quot; the game game scenery, which is in reality just rewriting the graphics at those particular locations.  Unfortunately, most of my theories have been already executed by commercial NES games, and what I'm suggesting seems like very intensive; all the &quot;background&quot; of the stage will be rewritten based on how far the player has moved, while the &quot;foreground&quot; stays the same.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6132">OneCrudeDude</a> — Fri Mar 21, 2014 10:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-03-21T00:59:50-07:00</updated>
<published>2014-03-21T00:59:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=127032#p127032</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=127032#p127032"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=127032#p127032"><![CDATA[
In <a href="http://forums.nesdev.com/viewtopic.php?p=127027#p127027" class="postlink">this thread</a>, OneCrudeDude asked whether it would be possible to get a hardware-based parallax assist.<br /><br />So what would theoretical hardware-assisted parallax look like, if it <em>weren't</em> fine-grained banking?<br /><br />Horizontal parallax, even though it's the kind we'd want, will be more complicated due to the way the NES draws its output. But vertical parallax ... we can probably do something clever here. After all, the MMC5 supports different vertical fine scroll values when in Left-and-Right split screen.<br /><br />I think the addition of an 8-bit latch and an 8-bit adder should get us most of the way there. To make only one section of CHR scroll, we would use something (maybe 1 or 2 OR gates) to select which section of CHR would scroll, and a tristateable latch with pull-down resistors would let us add 0 instead of the latch's contents for tiles where we didn't want a scroll offset.<br /><br />The adders would take the latched value, and add it to PPU A8..A4, A2..A0 (skipping A3, because that's color plane information). This means we could vertically rotate any number of sets of  32 contiguous tiles.<br /><br />Unlike MMC5, this doesn't let us change the size of attribute zones, and it also imposes strict requirements on the CHR's layout.<br /><br />This is just a little bit of a stretch for a discrete-logic solution, especially as it's more useful in the context of an ASIC mapper that already provides separate CHR banking:<br />4 ICs: 74'573 (three-state octal latch), 2x 74'283 (four bit full adder), 74'32 (quad OR gate). Hook the latch up in lieu of the MMC3's RAM, or something.<br />Doing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">74573./OE ← PPUA10 OR PPUA11 OR PPUA12</tt> would let us scroll only the 64 tiles from $0000 to $03ff.<br />The 74HC283 is fast enough (propagation times of 40ns at 5V) that modern 100ns ROMs or RAMs will have plenty of breathing room.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Mar 21, 2014 12:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-07-10T18:53:26-07:00</updated>
<published>2013-07-10T18:53:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=114960#p114960</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=114960#p114960"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=114960#p114960"><![CDATA[
<div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><br />I wonder what kind of things you could make with a seven-segment decoder? Each segment is effectively some logic on the inputs.<br /></div>Having sat down and thought about this on and off for the past several weeks, for the life of me I cannot figure what one would do with this.<br />The 74'4511 (the only still-manufactured BCD decoder) is basically a 16-by-7-bit ROM with an obtuse table, both a force-high and force-low pin, and a transparent latch.<br />Individual output pins could be used for complex decoding logic, but the part where values A-F force blank doesn't help matters, and I see very few useful relations between multiple outputs.<br />The combined function is something like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Qa = (Q1+Q2+nQ3)·(Q1+nQ2+nQ3)·nblank·(nQ1+Q2+Q3+Q4)<br />Qb = (nQ1+Q2+nQ3)·(Q1+nQ2+nQ3)·nblank<br />Qc = (Q1+nQ2+Q3)·nblank<br />Qd = (nQ1+Q2+Q3)·(Q1+Q2+nQ3)·(nQ1+nQ2+nQ3)·nblank<br />Qe = nQ1·(Q1+Q2+nQ3)·nblank<br />Qf = (nQ2+Q3)·(nQ1+nQ2+nQ3)·nblank·(nQ1+Q2+Q3+Q4)<br />Qg = (Q1+Q2+Q3+Q4)·(nQ1+nQ2+nQ3)·nblank·(nQ1+Q2+Q3+Q4)</div>Where nblank is all the reasons the output might be blanked (/BL input low, or Q0..Q3 denoting hexadecimal A-F)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Wed Jul 10, 2013 6:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2013-06-26T12:52:12-07:00</updated>
<published>2013-06-26T12:52:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=114060#p114060</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=114060#p114060"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=114060#p114060"><![CDATA[
I wonder what kind of things you could make with a seven-segment decoder? Each segment is effectively some logic on the inputs.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Wed Jun 26, 2013 12:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-25T17:58:28-07:00</updated>
<published>2013-06-25T17:58:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113998#p113998</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113998#p113998"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113998#p113998"><![CDATA[
There's definitely nothing resembling a cross-emulator mapper syntax. Such a thing would imply any kind of standardization across emulators.<br /><br />As far as MinGW/Cygwin, I don't know, I use linux.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Jun 25, 2013 5:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2013-06-25T17:34:56-07:00</updated>
<published>2013-06-25T17:34:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113995#p113995</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113995#p113995"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113995#p113995"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">I would rather not have to recompile the entire emulator if I can just add a DLL; however, if recompiling that is just to add a feature and that the mapper can be added using a DLL then that should be good enough. I will look at those things; thanks.<br /></div>Are you familiar with the concept of incremental builds? A well-written makefile (and equivalents) only compile the specific source files that changed (or depend on things that changed) and then links.</div>Yes, I am familiar, but I want to write a plugin code so that it can be used in another emulator too possibly. Also, that doesn't answer my question about MinGW.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Tue Jun 25, 2013 5:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-25T17:04:35-07:00</updated>
<published>2013-06-25T17:04:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113992#p113992</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113992#p113992"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113992#p113992"><![CDATA[
<div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><br />I would rather not have to recompile the entire emulator if I can just add a DLL; however, if recompiling that is just to add a feature and that the mapper can be added using a DLL then that should be good enough. I will look at those things; thanks.<br /></div>Are you familiar with the concept of incremental builds? A well-written makefile (and equivalents) only compile the specific source files that changed (or depend on things that changed) and then links.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Jun 25, 2013 5:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2013-06-25T16:23:14-07:00</updated>
<published>2013-06-25T16:23:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113990#p113990</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113990#p113990"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113990#p113990"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Useful if you want expansion audio on a minimal discrete-logic game...<br /></div>Yes this is precisely my point.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also, if you do use an '8910, keeping the GPIO pins hidden behind the PPU is unkind: it prevents midscreen banking.<br /></div>Of course you wouldn't do this if you need midscreen banking.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The voltages that come out of at least the YM2149 are inappropriate for driving logic.<br /></div>I thought this might be the case (although I was unsure).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Modifying nestopia's NstBoard.[ch]pp is pretty easy.<br /></div>I would rather not have to recompile the entire emulator if I can just add a DLL; however, if recompiling that is just to add a feature and that the mapper can be added using a DLL then that should be good enough. I will look at those things; thanks. However, it won't work if the emulator cannot be compiled using MinGW or Cygwin, since that is what I have.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Tue Jun 25, 2013 4:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-25T15:52:25-07:00</updated>
<published>2013-06-25T15:52:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113988#p113988</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113988#p113988"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113988#p113988"><![CDATA[
<div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><br />for extra audio you could use a AY-3-8910 (similar to how the Sunsoft 5B does), but connect it to the PPU address bus (you might be updating the music during vblank, and with no extra decoding logic you can map it to $3xxx (cartridge already provides A13 inverted, and A12 can be used uninverted) in the PPU address space)<br /></div> Useful if you want expansion audio on a minimal discrete-logic game, but I expect the cost of a 74'20 or whatever to map it to CPU space is more convenient. The biggest improvement would probably be not dividing M2 by 2 so that the envelope register can be used for two octaves of tones instead of one. (A frequency doubler, if connected to a YM part, would be even better)<br /><br />Also, if you do use an '8910, keeping the GPIO pins hidden behind the PPU is unkind: it prevents midscreen banking.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />to use one [audio channel] for IRQ.<br /></div> The voltages that come out of at least the YM2149 are inappropriate for driving logic.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You could connect the CHR RAM enable and CIRAM enable to CHR A12 instead of A13 (and CHR A13 to CHR RAM A12), which provides four screens but less graphics are available for sprites.<br />You could have a latch enabled by CHR A13 in order to make CHR ROM bankswitching according to which nametable is selected, and even individual 16x16 attribute areas if that is wanted.<br /></div> I already mentioned both of these.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />To make up mappers in a emulator, it would be useful to support a C API plugin interface that supports NES 2.0 (therefore, you can use 12-bit mappers numbers and have submapper numbers and other things available too) and some other features.<br /></div> Modifying nestopia's NstBoard.[ch]pp is pretty easy.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Jun 25, 2013 3:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2013-06-25T15:30:32-07:00</updated>
<published>2013-06-25T15:30:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113987#p113987</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113987#p113987"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113987#p113987"><![CDATA[
I have some other ideas of other kind of new mappers too:<br /><br />I don't know how common it is and it isn't a 74xx discrete logic, but you for extra audio you could use a AY-3-8910 (similar to how the Sunsoft 5B does), but connect it to the PPU address bus (you might be updating the music during vblank, and with no extra decoding logic you can map it to $3xxx (cartridge already provides A13 inverted, and A12 can be used uninverted) in the PPU address space), and use it in write-only mode (fix BDIR to high). Since only the address is used, it won't interfere with internal nametables or CHR ROM/RAM. The I/O ports can be used for bank switching or some other things, and since each audio channel is output on a separate pin, it means you can use different mixing levels for each one, and/or to use one for IRQ.<br /><br />You could connect the CHR RAM enable and CIRAM enable to CHR A12 instead of A13 (and CHR A13 to CHR RAM A12), which provides four screens but less graphics are available for sprites.<br /><br />You could have a latch enabled by CHR A13 in order to make CHR ROM bankswitching according to which nametable is selected, and even individual 16x16 attribute areas if that is wanted.<br /><br />To make up mappers in a emulator, it would be useful to support a C API plugin interface that supports NES 2.0 (therefore, you can use 12-bit mappers numbers and have submapper numbers and other things available too) and some other features.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Tue Jun 25, 2013 3:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2013-06-23T22:41:53-07:00</updated>
<published>2013-06-23T22:41:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113891#p113891</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113891#p113891"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113891#p113891"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">Here is another thing you could make with discrete logic mapper: If you need 8K PRG RAM but don't need 8K contiguous and can use just 4K (or if you need just 4K in total), then, with a single NAND gate input from ROMSEL and PRG A12 to activate the RAM chip in the cartridge, and then connect PRG A13 to the PRG RAM A12. Now the RAM is at $5xxx and $7xxx. Also, $1xxx mirrors $5xxx and $3xxx mirrors $7xxx, although you shouldn't read from $1xxx and $3xxx because it causes bus conflicts, but you can write there in order to write simultaneously to the internal RAM or PPU registers, and to the PRG RAM in the cartridge. Now the other three NAND gates can be used for another purpose.<br /></div> But it's not really useful to mirror internal RAM, and you have to remember to use different PPU mirrors to keep track of both writes to $2005 and $2006 to take advantage of the transparently shadowing. I'm uncertain whether the code complexity of dealing with noncontiguous memory outweighs the benefit of transparent shadowing of these registers.</div>Note that since it uses one NAND gate, it can be used with the other two things below, which together use three NAND gates so it is four in total, and only one IC. (I write things that can be clever even if not particularly practical; I am a kind of a hacker, too.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can make a latch out of two NAND gates, which will not change if both inputs are high. If you are using only one nametable (the one at $2C00), you might use this to increase the number of possible tiles from 256 to 320, by wiring the input of the latch to CHR A11 and CHR A10, and the output to the CHR ROM A12. (This won't work with sprites, though.)<br /></div> Several problems:<br />1- Ok, so tiles 64-127 select bank 0, including self, tiles 128-191 select bank 1, including self, and tiles 192-255 don't change bank. Tiles 0-63 will always be from bank 1, but will unpredictably select one bank or the other for subsequent fetches, so mustn't be followed by tiles 192-255. 320 tiles, yes, but very constrained layout, and wastes 3/8 of your ROM.<br />2- There are more than 32 fetches per scanline. (34, of which one is a duplicate), and it will proceed from (e.g.) $2C1F to $2800.<br />3- I see you chose a NAND-based SR latch because idle sprites fetch from tile $FF But this thing is fragile to any momentary changes of the address bus. For example, during the idle pixel (341, when it's not going through the normal ALE-/RD pattern), $1000 seems to be asserted to the address bus.</div>I am aware of these problems; however, I did think of that, and that due to overscan you might not want to put anything on the leftmost tile anyways, so you can use that to select the bank by the leftmost tile of each row. Therefore, that isn't the reason I chose a NAND-based SR latch. The reason is so that it can be combined with a circuit that uses only two NAND gates! (Thanks for telling me about the contents of the address bus during the idle pixel though; I am interested to know precisely the function of the CPU/APU/PPU, including any differences between NTSC and RGB that may have been missed.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is also the &quot;no IC bankswitching&quot; involving the CHR address or the IRQ (both of which will make the program have limitations, though).<br /></div> I like the IRQ one better.</div>I agree. It has less limitation (unless you need IRQ or keyboard); simply adding a wire into the Famicom expansion port can be done (and it is a DB15 female so it should be easily enough to add a wire, I hope). However it won't work if you want to make a game for NES (you will need a more complicated adapter, and depending on the version of the console it might not even have a expansion port).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">O, OK, what kind of programming languages are they written in?<br /></div>C or C++, to varying amounts of C++ goo.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Does it accept mapper plugin files written in C or in Verilog (and if so, does it accept many features like the API I proposed)?<br /></div> As far as I know, Nintendulator is the only emulator that uses dynamically loaded things to provide mapper functionality<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Even if it doesn't, can the modification of such program be written in C and then compiled on MinGW or Cygwin?<br /></div> Yes. Look at e.g. <a href="http://sourceforge.net/p/fceultra/code/HEAD/tree/fceu/trunk/src/boards/datalatch.cpp" class="postlink">FCEUX's implementation of mappers 0,2,3,7,8,11,13,38,66, &amp;c &amp;c &amp;c</a></div>Thank you for information. Does this mean it will work with MinGW? Do they support twelve-bit mapper numbers and submapper numbers?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Sun Jun 23, 2013 10:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-23T20:48:43-07:00</updated>
<published>2013-06-23T20:48:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113888#p113888</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113888#p113888"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113888#p113888"><![CDATA[
<div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><br />Here is another thing you could make with discrete logic mapper: If you need 8K PRG RAM but don't need 8K contiguous and can use just 4K (or if you need just 4K in total), then, with a single NAND gate input from ROMSEL and PRG A12 to activate the RAM chip in the cartridge, and then connect PRG A13 to the PRG RAM A12. Now the RAM is at $5xxx and $7xxx. Also, $1xxx mirrors $5xxx and $3xxx mirrors $7xxx, although you shouldn't read from $1xxx and $3xxx because it causes bus conflicts, but you can write there in order to write simultaneously to the internal RAM or PPU registers, and to the PRG RAM in the cartridge. Now the other three NAND gates can be used for another purpose.<br /></div> But it's not really useful to mirror internal RAM, and you have to remember to use different PPU mirrors to keep track of both writes to $2005 and $2006 to take advantage of the transparently shadowing. I'm uncertain whether the code complexity of dealing with noncontiguous memory outweighs the benefit of transparent shadowing of these registers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you have some (32K) data in the PRG ROM that you don't need to access during rendering, such as level data to load into RAM, you can use CHR_A13 NAND CHR_A12 to the A15 input of the PRG ROM.<br /></div> Clever, but a 74'161 is as cheap as a 74'00. Maybe justifiable with a 74'1G00.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You can make a latch out of two NAND gates, which will not change if both inputs are high. If you are using only one nametable (the one at $2C00), you might use this to increase the number of possible tiles from 256 to 320, by wiring the input of the latch to CHR A11 and CHR A10, and the output to the CHR ROM A12. (This won't work with sprites, though.)<br /></div> Several problems:<br />1- Ok, so tiles 64-127 select bank 0, including self, tiles 128-191 select bank 1, including self, and tiles 192-255 don't change bank. Tiles 0-63 will always be from bank 1, but will unpredictably select one bank or the other for subsequent fetches, so mustn't be followed by tiles 192-255. 320 tiles, yes, but very constrained layout, and wastes 3/8 of your ROM.<br />2- There are more than 32 fetches per scanline. (34, of which one is a duplicate), and it will proceed from (e.g.) $2C1F to $2800.<br />3- I see you chose a NAND-based SR latch because idle sprites fetch from tile $FF But this thing is fragile to any momentary changes of the address bus. For example, during the idle pixel (341, when it's not going through the normal ALE-/RD pattern), $1000 seems to be asserted to the address bus.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There is also the &quot;no IC bankswitching&quot; involving the CHR address or the IRQ (both of which will make the program have limitations, though).<br /></div> I like the IRQ one better.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you don't enable CIRAM and you use 16K CHR RAM in the cartridge, then you have four nametables, and some extra RAM which you cannot access during rendering (although this extra RAM still might be useful for something, especially if it is battery RAM (not to be confused with battering ram)).<br /></div>I vaguely remember this being mentioned in the wee early days of the forum? 16KiB RAMs are harder to come across than other sizes, though.<br /><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><br />O, OK, what kind of programming languages are they written in?<br /></div>C or C++, to varying amounts of C++ goo.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Does it accept mapper plugin files written in C or in Verilog (and if so, does it accept many features like the API I proposed)?<br /></div> As far as I know, Nintendulator is the only emulator that uses dynamically loaded things to provide mapper functionality<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Even if it doesn't, can the modification of such program be written in C and then compiled on MinGW or Cygwin?<br /></div> Yes. Look at e.g. <a href="http://sourceforge.net/p/fceultra/code/HEAD/tree/fceu/trunk/src/boards/datalatch.cpp" class="postlink">FCEUX's implementation of mappers 0,2,3,7,8,11,13,38,66, &amp;c &amp;c &amp;c</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Jun 23, 2013 8:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2013-06-23T18:28:01-07:00</updated>
<published>2013-06-23T18:28:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113882#p113882</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113882#p113882"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113882#p113882"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">My point was &quot;use good abstraction principles and initially target the MMC5. Later on, if you ever find yourself needing to make hardware, because you used abstraction, you shouldn't find it difficult to retarget it&quot;<br /></div>Yes, it would work, but I like to design a new mapper and use it in a emulator, if such a thing would be possible! </div> If you're using this as a means for just &quot;I want a VHDL-like abstraction for mappers&quot;, ok. But that is a very large undertaking and you'll have more luck getting anyone else to cooperate if you put some functioning code on the table.</div>I did make up a proposed C API for mapper plugins and input plugins (it is in the wiki); if anyone ever make up a new emulator (including if I ever do), then someone (including myself) might consider to add the support of this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Otherwise, you're putting the cart before the horse. Deployed games are the only reason we've ever had for making mappers (whether it's Magic Floor on m218, or the Streemerz Bundle on m28). So if you want a not-MMC5 mapper that provides at least 64KiB of PRG-RAM... make the game first. Hacking a local copy of FCEUX or Nestopia for what you've requested above would be straightforward enough.<br /></div>O, OK, what kind of programming languages are they written in? Does it accept mapper plugin files written in C or in Verilog (and if so, does it accept many features like the API I proposed)? Even if it doesn't, can the modification of such program be written in C and then compiled on MinGW or Cygwin?<br /><br />Did you read my other ideas of discrete logic mappers? (I have no need for those other ones at this time, although I post it because it seems possible to me, being another thing you can do with discrete logic mappers.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Sun Jun 23, 2013 6:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-23T17:17:18-07:00</updated>
<published>2013-06-23T17:17:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113880#p113880</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113880#p113880"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113880#p113880"><![CDATA[
<div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">My point was &quot;use good abstraction principles and initially target the MMC5. Later on, if you ever find yourself needing to make hardware, because you used abstraction, you shouldn't find it difficult to retarget it&quot;<br /></div>Yes, it would work, but I like to design a new mapper and use it in a emulator, if such a thing would be possible! </div> If you're using this as a means for just &quot;I want a VHDL-like abstraction for mappers&quot;, ok. But that is a very large undertaking and you'll have more luck getting anyone else to cooperate if you put some functioning code on the table.<br /><br />Otherwise, you're putting the cart before the horse. Deployed games are the only reason we've ever had for making mappers (whether it's Magic Floor on m218, or the Streemerz Bundle on m28). So if you want a not-MMC5 mapper that provides at least 64KiB of PRG-RAM... make the game first. Hacking a local copy of FCEUX or Nestopia for what you've requested above would be straightforward enough.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Jun 23, 2013 5:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2013-06-23T15:09:52-07:00</updated>
<published>2013-06-23T15:09:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113875#p113875</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113875#p113875"/>
<title type="html"><![CDATA[Re: Discrete Logic Mapper Toolbox]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9283&amp;p=113875#p113875"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />My point was &quot;use good abstraction principles and initially target the MMC5. Later on, if you ever find yourself needing to make hardware, because you used abstraction, you shouldn't find it difficult to retarget it&quot;<br /></div>Yes, it would work, but I like to design a new mapper and use it in a emulator, if such a thing would be possible! (I have made a document on the wiki which can propose a format for writing plugins in C for implementing mappers and input devices.)<br /><br />Here is another thing you could make with discrete logic mapper: If you need 8K PRG RAM but don't need 8K contiguous and can use just 4K (or if you need just 4K in total), then, with a single NAND gate input from ROMSEL and PRG A12 to activate the RAM chip in the cartridge, and then connect PRG A13 to the PRG RAM A12. Now the RAM is at $5xxx and $7xxx. Also, $1xxx mirrors $5xxx and $3xxx mirrors $7xxx, although you shouldn't read from $1xxx and $3xxx because it causes bus conflicts, but you can write there in order to write simultaneously to the internal RAM or PPU registers, and to the PRG RAM in the cartridge. Now the other three NAND gates can be used for another purpose.<br /><br />If you have some (32K) data in the PRG ROM that you don't need to access during rendering, such as level data to load into RAM, you can use CHR_A13 NAND CHR_A12 to the A15 input of the PRG ROM.<br /><br />You can make a latch out of two NAND gates, which will not change if both inputs are high. If you are using only one nametable (the one at $2C00), you might use this to increase the number of possible tiles from 256 to 320, by wiring the input of the latch to CHR A11 and CHR A10, and the output to the CHR ROM A12. (This won't work with sprites, though.)<br /><br />There is also the &quot;no IC bankswitching&quot; involving the CHR address or the IRQ (both of which will make the program have limitations, though).<br /><br />If you don't enable CIRAM and you use 16K CHR RAM in the cartridge, then you have four nametables, and some extra RAM which you cannot access during rendering (although this extra RAM still might be useful for something, especially if it is battery RAM (not to be confused with battering ram)).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Sun Jun 23, 2013 3:09 pm</p><hr />
]]></content>
</entry>
</feed>