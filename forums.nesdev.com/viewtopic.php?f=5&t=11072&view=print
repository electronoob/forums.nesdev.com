<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - YCPU: an imaginary 16-bit processor.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">YCPU: an imaginary 16-bit processor.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Tue Mar 04, 2014 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As a thought experiment, I've been dreaming up a 16-bit CPU. My goal is to create a relatively powerful processor with a comprehensive instruction set, but is limited to working on 16-bits of data at a time. The specification, which is hosted at Github, is released to the public domain under the <a href="http://creativecommons.org/publicdomain/zero/1.0/" class="postlink">CC0 waiver</a>, and anyone may use it for any purpose without permission or attribution. <a href="https://github.com/ZaneDubya/YCPU/blob/master/Documentation/ycpu.txt" class="postlink">Direct link to the YCPU Specification</a>.<br /><br />I've also implemented an emulator for this processor in C#, which is released under the MIT license. <a href="https://github.com/ZaneDubya/YCPU" class="postlink">The emulator is also hosted at Github</a>.<br /><br />In this thread, I've been asking questions as the specification has matured. Thanks to everyone who has offered comments and suggestions and answered my questions: this community is exceptionally helpful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Mar 04, 2014 2:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Recommend you look at the <a href="http://wiki.nesdev.com/w/images/7/76/Programmanual.pdf" class="postlink">WDC 65816</a>, which is a 16-bit CPU fully backwards-compatible with the 6502, to get an idea of what addressing modes are useful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Tue Mar 04, 2014 2:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If R is register and I is immediate:<div class="codetitle"><b>Code:</b></div><div class="codecontent">I<br />R<br />&#91;R&#93;<br />&#91;R+I&#93;<br />&#91;R+&#91;I&#93;&#93;<br />&#91;&#91;R&#93;+I&#93;<br />&#91;--R&#93;<br />&#91;R++&#93;<br /></div><br />This might be a usable set of addressing modes (assume the stack pointer is one of the eight general purpose registers, possibly so is the program counter (in which case an immediate value addressing mode isn't needed)).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 04, 2014 3:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You don't need to implement any addressing modes at all on most instructions. ALU operations such as addition can be register := register op register or register := register op constant. You only need addressing modes for the load and store instructions.<br /><br />And even then, the only modes you really need are register+register and register+constant. Instead of having a more complicated address generator on the CPU, you can have the program running on the CPU calculate addresses with standard ALU instructions, which might let you run the rest of the CPU faster.<br /><br />As for how offsets are interpreted: Is this 16-bit address space 65536 bytes (32768 words) or 65536 words? If 65536 bytes, what do you do with a 16-bit load from an odd address?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Mar 04, 2014 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Look at MIPS maybe: <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/MIPS_architecture">http://en.wikipedia.org/wiki/MIPS_architecture</a><!-- m --><br /><br />It does things quite a bit differently then you may be used to if you only have knowledge of 6502 and may give you some ideas.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Mar 04, 2014 5:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Having used both ARM and X86, ARM lets you do crazy stuff in address modes [r1 + r2 &lt;&lt; r3], while X86 lets you use arbitrary memory with almost any instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 04, 2014 7:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Speaking of MIPS, I designed a 16-bit MIPS-inspired CPU called KIPS with 14 instructions while I was in college. (The thing was supposed to have 15, but I never got shift working.)<br /><br />ALU ops: MOV, ADD, SUB, SLT (compare), AND, OR, XOR, two operands, second either a register or a 9-bit signed immediate value. These had two encodings: high nibble 8-F if the reg was<br />Other ops: LUI (load 16-bit immediate value shifted left 8; for use with OR to load a 16-bit value), LDR (load register with word at 6-bit offset from address in another register), STR (store), BNE/BEQ (add to PC if register is nonzero or zero), JSR (move PC to a register and add a 9-bit signed offset to PC), and RTS (move a register to PC). No flags; SLT puts the result in a register, and 32-bit quantities are added <a href="https://stackoverflow.com/questions/1281806/adding-two-64-bit-numbers-in-assembly" class="postlink">the same way 64-bit quantities are added on MIPS</a>.<br /><br />I seem to remember the instruction encoding looking something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">FEDCBA9876543210&nbsp; ALU opcodes, second operand constant<br />||||||||||||||||<br />|||||||||||||+++- ALU function code inspired by 74*381 ALU:<br />|||||||||||||&nbsp; &nbsp; &nbsp;0=shift, 1=compare, 2=subtract, 3=add,<br />|||||||||||||&nbsp; &nbsp; &nbsp;4=xor, 5=or, 6=and, 7=mov (use second operand<br />||||||||||+++---- Destination register<br />|||||||+++------- Second operand<br />||||+++---------- First operand<br />++++------------- 0<br /><br />FEDCBA9876543210&nbsp; ALU opcodes<br />||||||||||||||||<br />|||||||+++++++++- Second operand, 9-bit signed<br />||||+++---------- First operand and destination<br />|+++------------- ALU function code<br />+---------------- 1<br /><br />FEDCBA9876543210&nbsp; LDR/STR<br />||||||||||||||||<br />||||||||||++++++- Offset from address<br />|||||||+++------- Register containing address<br />||||+++---------- Data register<br />++++------------- Memory opcode<br /><br />FEDCBA9876543210&nbsp; Conditional branches (whether or not a reg is nonzero)<br />||||||||||||||||<br />|||||||+++++++++- Signed value to add to PC if check succeeds<br />||||+++---------- Register to check<br />++++------------- Branch opcode<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Tue Mar 04, 2014 11:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Recommend you look at the <a href="http://wiki.nesdev.com/w/images/7/76/Programmanual.pdf" class="postlink">WDC 65816</a>, which is a 16-bit CPU fully backwards-compatible with the 6502, to get an idea of what addressing modes are useful.</div>I'm thinking of a cpu with multiple general purpose registers, not an accumulator and two index registers. I realized while reading this document that despite months programming the 6502, I still have no idea what indexed indirect [ (value, x) ] addressing could be useful for, compared to indirect indexed [ (value),y ].<br /><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">If R is register and I is immediate:<div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />&#91;--R&#93;<br />&#91;R++&#93;<br /></div></div>The inclusion of [R++] in place of Immediate addressing is clever. Sold. Where would I use --R?<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">As for how offsets are interpreted: Is this 16-bit address space 65536 bytes (32768 words) or 65536 words? If 65536 bytes, what do you do with a 16-bit load from an odd address?</div>I hadn't thought of this problem... and after spending the afternoon musing about it, I still have no idea what the correct solution is. My initial thought is that a 16-bit load from an odd address shouldn't be a problem, just load the low byte from the odd address and the hi byte from the even address.<br /><br />Would the better solution be to ignore the bit0-address line when loading 16-bit? What about the PC? Loading [PC++] should evaluate to PC += 2, I guess. But that's completely counter-intuitive. How do other CPUs handle this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Mar 05, 2014 12:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent">I still have no idea what indexed indirect [ (value, x) ] addressing could be useful for, compared to indirect indexed [ (value),y ].</div><br /><br />It's generally pretty useless.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Mar 05, 2014 12:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent">I still have no idea what indexed indirect [ (value, x) ] addressing could be useful for<br /></div>Indexing into an array of pointers. e.g. C's argv[n][0].<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The inclusion of [R++] in place of Immediate addressing is clever. Sold. Where would I use --R?<br /></div> PIC assembly includes a set of special registers (and instructions) that provide preinc, postinc, predec, and no change.<br />In any case, postinc and predec are obvious pairs for a software stack.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Would the better solution be to ignore the bit0-address line when loading 16-bit? What about the PC? Loading [PC++] should evaluate to PC += 2, I guess. But that's completely counter-intuitive. How do other CPUs handle this?<br /></div>IMO, you should forsake bytes altogether and natively address 65536 words.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Mar 05, 2014 12:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Indexing into an array of pointers. e.g. C's argv[n][0].</div><br /><br />But it only works in zero page .. zero page is normally too precious to waste on setting up arrays of pointers. Relevant discussion: <!-- m --><a class="postlink" href="http://forum.6502.org/viewtopic.php?f=2&amp;t=2538">http://forum.6502.org/viewtopic.php?f=2&amp;t=2538</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 05, 2014 7:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think the only place I've used (d,x) on the NES is in my music engine, where I store a bunch of data pointers per channel on zero page, indexed by channel X (where X=0, 4, 8, 12). In fact, apart from cases like this where you have multiple streams of data accessed in parallel, it's so otherwise unused that the <em>Missile Command</em> PCB repurposes it as a &quot;screen access&quot; instruction, with a circuit to recognize the (d,x) opcodes and temporarily remap the VRAM for individual pixel access.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Mar 05, 2014 7:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think the only place I've used (d,x) on the NES is in my music engine, where I store a bunch of data pointers per channel on zero page, indexed by channel X (where X=0, 4, 8, 12).</div><br />Same here. Looks like this addressing mode is very specific to music ^^<br /><br />I think it happened to me once to need plain indirect without indexing on 6502, and that I've used ($xx,X) instead of ($xx),Y because scrapping X was better than scrapping Y in that particular situation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Wed Mar 05, 2014 10:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Would the better solution be to ignore the bit0-address line when loading 16-bit? What about the PC? Loading [PC++] should evaluate to PC += 2, I guess. But that's completely counter-intuitive. How do other CPUs handle this?<br /></div>IMO, you should forsake bytes altogether and natively address 65536 words.</div><br />That's an interesting idea - but that would completely preclude byte access. I suppose you could still <em>emulate</em> byte load and store with masking and shifting. But you would need an extra bit of address to select the hi or lo byte of a 16-bit word. What about chars and strings?<br /><br />Here's an alternative, although I don't necessarily think it's better: data access is byte-aligned, instruction access is word-aligned. There's 0x10000 bytes of data and 0x8000 words of instructions which share the same space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Mar 05, 2014 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Separate instruction and data memory GO!

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>