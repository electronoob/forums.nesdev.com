<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - N64 programming (libdragon)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">N64 programming (libdragon)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=15988">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=15988</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Thu May 25, 2017 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi, since i don't know a place for N64 scene im trying here, i was wondering if anyone have done some tests with libdragon.<br /><br />So far i did some.. well very basic tests, my target is always 60fps, so i use the RDP rasterizer, i have some question on the bottom of the message, sorry for my english and the long post.<br /><br />These tests works on real hardware, maybe on CEN64 or MESS, some downloads are attached others on mega.<br /><br /><strong>TEST 1: EXPLOSIONS</strong><br />Random explosions on screen using textures of 16bits (32x32) with RDP.<br /><img src="http://i.imgur.com/RYZd6Ri.gif" alt="Image" /><br /><br />Performance without optimizations:<br />410 at 60fps (NTSC)<br />507 at 50fps (PAL)<br /><br />Texture strategy, use the same texture for other sprites without reload TMEM:<br />480<br />579<br /><br />Flush texture disabled:<br />593<br />728<br /><br />Probably there must be other ways to optimize further.<br /><br />DOWNLOAD<br /><a href="https://mega.nz/#!Rkp2jRgJ!GpFxMwJ3g294r1CjwrmYR6mi-nIq4nhMuINdrsJRPwo" class="postlink">https://mega.nz/#!Rkp2jRgJ!GpFxMwJ3g294r1CjwrmYR6mi-nIq4nhMuINdrsJRPwo</a><br /><br /><strong>TEST 2: BIGGER EXPLOSIONS</strong><br />Instead of 2KB explosions these are around 122x96 (22KB), so they are split in several pieces to fit the 4KB cache (i dont use stride function on libdragon, is slower than manage single textures), i wonder if there is an easy way to use 4 or 8bit textures with libdragon (they are limited to 16bit-32bit).<br /><img src="http://i.imgur.com/uJBXRcj.gif" alt="Image" /><br /><br />Performance is lower than expected, around 50 explosions at 60fps.<br /><br />DOWNLOAD<br /><a href="https://mega.nz/#!loAQyQSb!NjiU9HUihztLdVz-ULFNcx8NhmLFnQBYuYk5FHTgFhw" class="postlink">https://mega.nz/#!loAQyQSb!NjiU9HUihztLdVz-ULFNcx8NhmLFnQBYuYk5FHTgFhw</a><br /><br /><strong>TEST 3: SNOW</strong><br />RDP rectangles (non textured) of 4x4 with a blue color.<br /><img src="http://i.imgur.com/XYee0nh.gif" alt="Image" /><br /><br />Performance:<br />5120 rectangles at 60fps<br />6430 rectangles at 50fps<br /><br />Use int16 instead of int32:<br />5600<br />7120<br /><br />DOWNLOAD<br /><a href="https://mega.nz/#!R9YEwBSD!_7jzjJd0UXLLDIgvKNxVt0pwtKhSdyJ46QhFRMG7EWA" class="postlink">https://mega.nz/#!R9YEwBSD!_7jzjJd0UXLLDIgvKNxVt0pwtKhSdyJ46QhFRMG7EWA</a><br /><br /><strong>CONTROLS</strong><br />A - Increase<br />B - Decrease<br />Start - Min<br />Z - Max<br />C up - clean buffer with RDP (test 1,2)<br />C left - clean buffer with CPU (test 1,2)<br />C down - do not clean (test 1,2)<br />R - Color rectangles (test 3)<br /><br /><strong>CASTLEVANIA: SOTN OST</strong><br />The whole soundtrack converted into ogg 44KHz/Stereo/128kbps using libogg, 34 songs, fits on a 64MB cartridge, plays from start to end, can skip songs with c button.<br /><img src="http://i.imgur.com/wMRIbZj.png" alt="Image" /><br /><br />It slowdowns 25fps to sync with the audio (i don't know how to use threads), but since its static background there is no problem at all.<br /><br />DOWNLOAD (wonder if can be shared?)<br /><a href="https://mega.nz/#!Y9pQjYgC!S3LojMylb3lQ-RWEpdtdVxzCJKy9Td1b9AHr7Sq370w" class="postlink">https://mega.nz/#!Y9pQjYgC!S3LojMylb3lQ-RWEpdtdVxzCJKy9Td1b9AHr7Sq370w</a><br /><br />=&gt; Added get_pixel function, this is already inside the libdragon but i didnt see the function for end users?<br /><br /><strong>GET_PIXEL</strong><br />Gets a pixel color from a buffer in x/y position.<br />- Returns a packed color (twice) in 16bits for RDP compatibility.<br /><br />graphics.c:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint32_t get_pixel( display_context_t disp, int x, int y )<br />{<br />&nbsp; &nbsp; if( disp == 0 ) { return 0; }<br /><br />&nbsp; &nbsp; if( __bitdepth == 2 )<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; uint16_t *buffer16 = (uint16_t *)__get_buffer( disp );<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;uint16_t packed_rdp = __get_pixel( buffer16, x, y );<br />&nbsp; &nbsp; &nbsp; &nbsp; return packed_rdp | (packed_rdp &lt;&lt; 16);<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; else<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; uint32_t *buffer32 = (uint32_t *)__get_buffer( disp );<br />&nbsp; &nbsp; &nbsp; &nbsp; return __get_pixel( buffer32, x, y );<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp;<br />}<br /></div><br /><br />graphics.h<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint32_t get_pixel( display_context_t disp, int x, int y);</div><br /><br />USES<br />- Can be used on a paint program (or those racing games with a menu to select a color for a car)<br />- Can be used as hidden collision map (since it reads the current buffer)<br />- Allows users to create new functions<br />- Can transform color into data to copy block areas or do special effects (VERY SLOW)<br /><br />TEST<br />A color table is written on the buffer, the mouse reads the color from the buffer and shows it on the rectangle.<br /><img src="http://i.imgur.com/wIGmdGr.jpg" alt="Image" /><br /><br />16bit value to RGB conversion (this conversion is not necessary, but just in case)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">color=get_pixel(disp,mouse_x,mouse_y);<br /><br />// Extract<br />uint8_t r1 = (color &amp; 0xF800) &gt;&gt; 11; // 63488<br />uint8_t g1 = (color &amp; 0x7C0) &gt;&gt; 6; // 1984<br />uint8_t b1 = (color &amp; 0x3E) &gt;&gt; 1; // 62<br /><br />// Expand to 8-bit<br />r = r1 &lt;&lt; 3;<br />g = g1 &lt;&lt; 3;<br />b = b1 &lt;&lt; 3;<br /></div><br /><br />Uses RGB555, i was expecting 565.<br /><br />CONTROLS<br />Joystick - Mouse<br />A - Set background color with the color selected<br />R - Alternate white or black letter fonts<br />Z - Reset background and letter colors<br /><br />DOWNLOAD<br /><a href="https://mega.nz/#!g5IRgYwA!Mk-vrgPmAi0HhN5aPKPLNDNVnbtdgxFkGXTkmGBmZcg" class="postlink">https://mega.nz/#!g5IRgYwA!Mk-vrgPmAi0HhN5aPKPLNDNVnbtdgxFkGXTkmGBmZcg</a><br /><br />Added math functions (fget_angle, fget_dist, get_distx, get_disty)<br /><br />Allows some game logic and this kind of effects..<br /><img src="https://i.imgur.com/MXDZigM.gif" alt="Image" /><br /><br />Since i don't have yet raster effects (buffer) i had to use giant horizontally textures (320x4), so i can move the blocks separately.<br /><br />- Libdragon won't allow textures beyond 256 wide, they are repeated at this point or mirrored depending on the settings.<br /><br />The effect is generated in real time (instead of tables) and can be edited:<br />C left / C right = wave<br />C up / C down = radius<br />A / B = Speed<br />R = hide text<br /><br />A better gif (graphics sample from Last Blade 2):<br /><img src="https://i.imgur.com/UreFOYJ.gif" alt="Image" /><br /><br />DOWNLOAD<br /><a href="https://mega.nz/#!UpIBkJBb!TqZc9F3V8lZSpkxQoYp_T_QbyrhSNQcu29zsYVEpews" class="postlink">https://mega.nz/#!UpIBkJBb!TqZc9F3V8lZSpkxQoYp_T_QbyrhSNQcu29zsYVEpews</a><br /><br />---<br />I could provide the source code of these examples, but probably the level skills on this board are better than me.<br /><br />Right now im trying to figure how to add hardware flip to the sprites, it is possible by changing the order of the loading or using mirror S or T coords when drawing, but this code brings me headaches, i simply don't know where to start:<br /><br />(the code is slightly modified from the source, i have removed texture slots)<br /><br />rdp.c<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static uint32_t __rdp_load_texture(int mirror_enabled, sprite_t *sprite, int sl, int tl, int sh, int th )<br />{<br />&nbsp; &nbsp; /* Invalidate data associated with sprite in cache */<br />&nbsp; &nbsp; if( flush_strategy == FLUSH_STRATEGY_AUTOMATIC )<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; data_cache_hit_writeback_invalidate( sprite-&gt;data, sprite-&gt;width * sprite-&gt;height * sprite-&gt;bitdepth );<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; /* Point the RDP at the actual sprite data */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xFD000000 | ((sprite-&gt;bitdepth == 2) ? 0x00100000 : 0x00180000) | (sprite-&gt;width - 1) );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (uint32_t)sprite-&gt;data );<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br /><br />&nbsp; &nbsp; /* Figure out the s,t coordinates of the sprite we are copying out of */<br />&nbsp; &nbsp; int twidth = sh - sl + 1;<br />&nbsp; &nbsp; int theight = th - tl + 1;<br /><br />&nbsp; &nbsp; /* Figure out the power of two this sprite fits into */<br />&nbsp; &nbsp; uint32_t real_width&nbsp; = __rdp_round_to_power( twidth );<br />&nbsp; &nbsp; uint32_t real_height = __rdp_round_to_power( theight );<br />&nbsp; &nbsp; uint32_t wbits = __rdp_log2( real_width );<br />&nbsp; &nbsp; uint32_t hbits = __rdp_log2( real_height );<br /><br />&nbsp; &nbsp; /* Because we are dividing by 8, we want to round up if we have a remainder */<br />&nbsp; &nbsp; int16_t round_amount = (real_width % 8) ? 1 : 0;<br /><br />&nbsp; &nbsp; /* Instruct the RDP to copy the sprite data out */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xF5000000 | ((sprite-&gt;bitdepth == 2) ? 0x00100000 : 0x00180000) | <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(((((real_width / 8) + round_amount) * sprite-&gt;bitdepth) &amp; 0x1FF) &lt;&lt; 9));<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (mirror_enabled == 1 ? 0x40100 : 0) | (hbits &lt;&lt; 14 ) | (wbits &lt;&lt; 4) );<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br /><br />&nbsp; &nbsp; /* Copying out only a chunk this time */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xF4000000 | (((sl &lt;&lt; 2) &amp; 0xFFF) &lt;&lt; 12) | ((tl &lt;&lt; 2) &amp; 0xFFF) );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (((sh &lt;&lt; 2) &amp; 0xFFF) &lt;&lt; 12) | ((th &lt;&lt; 2) &amp; 0xFFF) );<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br /><br />&nbsp; &nbsp; /* Save sprite width and height for managed sprite commands */<br />&nbsp; &nbsp; cache.width = twidth - 1;<br />&nbsp; &nbsp; cache.height = theight - 1;<br />&nbsp; &nbsp; cache.s = sl;<br />&nbsp; &nbsp; cache.t = tl;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; /* Return the amount of texture memory consumed by this texture */<br />&nbsp; &nbsp; return ((real_width / 8) + round_amount) * 8 * real_height * sprite-&gt;bitdepth;<br />}<br /></div><br /><br />This second one is used for drawing the texture once is loaded into tmem, so either when loading could be mirrored or now, i have added  if ( tx &lt; -cache.width ) { return; }, prevents system to hang when a sprite is out of screen from the left (it seems to be the only exception).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_draw_textured_rectangle_scaled( int tx, int ty, int bx, int by, double x_scale, double y_scale )<br />{<br />&nbsp; &nbsp; uint16_t s = cache.s &lt;&lt; 5;<br />&nbsp; &nbsp; uint16_t t = cache.t &lt;&lt; 5;<br /><br />&nbsp; &nbsp; /* Cant display &lt; 0, so must clip size and move S,T coord accordingly */<br />&nbsp; &nbsp; if( tx &lt; 0 )<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;if ( tx &lt; -cache.width ) { return; }<br />&nbsp; &nbsp; &nbsp; &nbsp; s += (int)(((double)((-tx) &lt;&lt; 5)) * (1.0 / x_scale));<br />&nbsp; &nbsp; &nbsp; &nbsp; tx = 0;<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; if( ty &lt; 0 )<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; t += (int)(((double)((-ty) &lt;&lt; 5)) * (1.0 / y_scale));<br />&nbsp; &nbsp; &nbsp; &nbsp; ty = 0;<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; /* Calculate the scaling constants based on a 6.10 fixed point system */<br />&nbsp; &nbsp; int xs = (int)((1.0 / x_scale) * 4096.0);<br />&nbsp; &nbsp; int ys = (int)((1.0 / y_scale) * 1024.0);<br /><br />&nbsp; &nbsp; /* Set up rectangle position in screen space */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xE4000000 | (bx &lt;&lt; 14) | (by &lt;&lt; 2) );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (tx &lt;&lt; 14) | (ty &lt;&lt; 2) );<br /><br />&nbsp; &nbsp; /* Set up texture position and scaling to 1:1 copy */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (s &lt;&lt; 16) | t );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (xs &amp; 0xFFFF) &lt;&lt; 16 | (ys &amp; 0xFFFF) );<br /><br />&nbsp; &nbsp; /* Send command */<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br />}<br /></div>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9035">get_pixel.rar</a> [62.14 KiB]
			</span><br />
			<span class="gensmall">Downloaded 93 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9034">test3.rar</a> [42.22 KiB]
			</span><br />
			<span class="gensmall">Downloaded 107 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9033">test2.rar</a> [87.83 KiB]
			</span><br />
			<span class="gensmall">Downloaded 118 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9032">test1.rar</a> [41.91 KiB]
			</span><br />
			<span class="gensmall">Downloaded 93 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>getafixx</b> [ Thu May 25, 2017 10:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awesome stuff!<br /><br />The SOTN demo worked really well, music played until it got to BGM 12, then it stalled the system. Had to reset.<br /><br />Tried again, skipping tracks to get the BGM 12 which now worked, but when I skipped to BGM 13 it stalled again.<br /><br />This is testing on an Everdrive64.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Thu May 25, 2017 10:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BMBx64 wrote:</div><div class="quotecontent">i don't know a place for N64 scene</div><br />Because there isn't one. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br />May I ask, what is libdragon?<br /><br />Also, I don't understand how the second explosion demo has such worse performance than the first. Are you drawing all the pieces of an explosion with the same graphic before swapping out the texture in the texture cache? This should improve GPU performance, put then you'd also have to use the hardware z-buffer when drawing the explosion pieces instead of just sorting the order they are drawn with the CPU, which may negate the performance increase from changing the texture cache less often.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu May 25, 2017 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A <a href="https://www.google.com/search?q=n64+libdragon" class="postlink">Google search for n64 libdragon</a> brings up a <a href="https://github.com/DragonMinded/libdragon" class="postlink">library for N64 homebrew development</a> by the developer of DSOrganize.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Thu May 25, 2017 11:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I actually did Google libdragon, but I didn't really know what I was looking at. Is it a full game engine, or routines that could be used to make one? Seems pretty limited if it apparently can't support 4bpp or 8bpp textures, which shouldn't have been any harder to implement than 16bpp or 24bpp or 32bpp textures other than a palette also needs to be uploaded. (Also to the texture cache?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Thu May 25, 2017 11:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">...but then you'd also have to use the hardware z-buffer when drawing the explosion pieces instead of just sorting the order they are drawn with the CPU, which may negate the performance increase from changing the texture cache less often.</div><br />I don't know the first thing about N64 development, but isn't the whole point of a hardware Z-buffer that it's faster than sorting polys on the CPU?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu May 25, 2017 11:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I imagine that libdragon is analogous to Shiru's neslib.<br /><br />Using a depth buffer incurs an extra memory read per pixel and write per drawn pixel, and it doesn't work for translucent objects. I don't know enough about the Nintendo 64's memory controller to know under what exact conditions the tradeoff is favorable. It was common on the PlayStation to use a bucket sort based on the Z coordinate of the centroid, which is fairly fast provided there are no pathological cases of large triangles close together.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Thu May 25, 2017 11:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">isn't the whole point of a hardware Z-buffer that it's faster than sorting polys on the CPU?</div><br />Yes. However, using the hardware Z-buffer is slower for the GPU. If you are not changing out the texture cache for identical pieces in this case, you have to use the hardware Z-buffer, because you won't be able to sort the pieces of the explosions on a per pixel level by the CPU like the hardware Z-buffer will. You can avoid using the hardware Z-buffer by writing entire explosions in order, but then you have to change out the texture cache for every piece being drawn.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Thu May 25, 2017 12:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I get it - I guess I'm just surprised using the Z-buffer is so much slower that it might be better to do CPU sorting &amp; constantly trash the texture cache when you're not even pushing the GPU that hard (5000 unshaded unlit triangles per second). And that's not an &quot;I'm surprised because that sounds unlikely and think you're wrong&quot; kind of surprised, but a genuine, &quot;woah, the N64's Z-buffer must be <em>terrible</em>&quot; kind of surprised.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Thu May 25, 2017 12:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">getafixx wrote:</div><div class="quotecontent">Awesome stuff!<br /><br />The SOTN demo worked really well, music played until it got to BGM 12, then it stalled the system. Had to reset.<br /><br />Tried again, skipping tracks to get the BGM 12 which now worked, but when I skipped to BGM 13 it stalled again.<br /><br />This is testing on an Everdrive64.</div><br /><br />Thanks  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> , not sure why it crashes, do you use expansion pak? I have PAL N64 with expansion and works fine forcing PAL or NTSC modes on Everdrive 2.5.<br /><br />However i know fopen/fclose have a memory leak, once the 100th file is open the next ones will fail (no handles), this can be &quot;fixed&quot; by using (dfs_open and dfs_close variant), i have to look at it, audio specially has been hard on N64 so far.<br /><br />Here a bit more info about this memory leak:<br /><a href="https://krikzz.com/forum/index.php?topic=5969.15" class="postlink">https://krikzz.com/forum/index.php?topic=5969.15</a><br /><br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Also, I don't understand how the second explosion demo has such worse performance than the first. Are you drawing all the pieces of an explosion with the same graphic before swapping out the texture in the texture cache? This should improve GPU performance, put then you'd also have to use the hardware z-buffer when drawing the explosion pieces instead of just sorting the order they are drawn with the CPU, which may negate the performance increase from changing the texture cache less often.</div><br /><br />I wanted to check how goes the performance when textures are loaded without strategy, just to imagine worst scenarios, the sorting is done by the order in the program, a loop from 0 to max number of explosions, i don't know if Z-buffer is available for 2D rectangles.<br /><br />--<br /><br />For 8bit palettes, the low 2KB of the TMEM are filled with data, but the higher 2KB needs the color table lookup, then there are different formats, the grayscale ones works different i think, you can take more TMEM and set the color on the vertex.<br /><br />I may be interested specially on 4bit palette support (MD,SNES,etc), but i hope to fix all the basic things, like flip a sprite if anyone can help a bit with the rdp.c code i can do all kind of tests.<br /><br />--<br /><br />I forgot this one..<br /><br /><strong>TEST: LAYERS</strong><br />Small tiled scroll that manages unlimited layers (they impact performance at some point), some features:<br />- Layers can have a custom number of rows and columns<br />- Different tile sizes in each layer separately (ex: main scroll layer 32x32, background layer 64x32)<br />- Layers can be set to repeat horizontally or vertically.<br /><br />This pic shows 8 full screen layers (320x240x16), each one with unique texture:<br /><img src="https://i.imgur.com/PwtY1zC.gif" alt="Image" /><br /><br />CONTROLS<br />Push joystick to move camera at different speed<br /><br />DOWNLOAD<br /><a href="https://mega.nz/#!IhgTwJwK!AK67vHgNl6LpGoasvQtTuD1wGbYBGynOKYNT0yek6PE" class="postlink">https://mega.nz/#!IhgTwJwK!AK67vHgNl6LpGoasvQtTuD1wGbYBGynOKYNT0yek6PE</a>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9031">test4.rar</a> [40.2 KiB]
			</span><br />
			<span class="gensmall">Downloaded 95 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu May 25, 2017 1:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />BMBx64, you should feel free to use the attachment interface here for anything that doesn't infringe copyright.<br /><br /><em>Especially</em> when they're only 40 KiB

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Fri May 26, 2017 4:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You know, I was going to post some thoughts I had on these demos and ideas on how to improve them, but I realized I really have no clue how exactly the N64 really works. I think the GPU is split into two parts, the RSP and the RDP, with the RSP being programmable and running the non-programmable RDP. Each one has 4KB of ram, with the RSP's ram holding instruction data and the RDP's ram holding texture data. What I really want to know, is how is the data changed? Is it by DMA initiated by the CPU, because if so, it seems the CPU would be doing nothing but waiting for the GPU to be done with its current task (like writing to the SPC700 on the SNES), unless the GPU can actually generate an interrupt.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri May 26, 2017 7:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As I understand it: Ideally, while the RSP is rendering a frame, the CPU is running game logic and generating the display list for the RSP to render in the next frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Sat May 27, 2017 5:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I finally added hardware flip feature, i will bring an example later.<br /><br />Instead of reverse texture on the load i though it was more wise when drawing, there could be plenty of uses without reload such as axial symmetry.<br /><br />I had to debug first how it works, the textures seems to be power of two sizes, for example mario texture is 16x31 and its rounded to 16x32, s and t coords have to be set accordingly to avoid garbage.<br /><img src="http://i.imgur.com/w1W0Mj8.jpg" alt="Image" /><br /><br />The performance seems to be about the same when setting MIRROR_ENABLED on the RDP (for hardware flip) so i removed some flags from rdp_load, this function previously used to be:<br />rdp_load_texture (uint32_t texslot, uint32_t texloc, mirror_t mirror_enabled, sprite_t *sprite)<br /><br />Now its just the texture call (which is faster):<br />rdp_load_texture ( sprite_t *sprite )<br /><br />Flags for the flip:<br />0 - Normal<br />1 - Horizontally<br />2 - Vertically<br />3 - Both<br /><br />rdp.c<br /><br />Changes on rdp_load:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static uint32_t __rdp_load_texture(sprite_t *sprite, int sl, int tl, int sh, int th )<br />{<br />&nbsp; &nbsp; /* Invalidate data associated with sprite in cache */<br />&nbsp; &nbsp; if( flush_strategy == FLUSH_STRATEGY_AUTOMATIC )<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; data_cache_hit_writeback_invalidate( sprite-&gt;data, sprite-&gt;width * sprite-&gt;height * sprite-&gt;bitdepth );<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; /* Point the RDP at the actual sprite data */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xFD000000 | ((sprite-&gt;bitdepth == 2) ? 0x00100000 : 0x00180000) | (sprite-&gt;width - 1) );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (uint32_t)sprite-&gt;data );<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br /><br />&nbsp; &nbsp; /* Figure out the s,t coordinates of the sprite we are copying out of */<br />&nbsp; &nbsp; int twidth = sh - sl + 1;<br />&nbsp; &nbsp; int theight = th - tl + 1;<br />&nbsp; &nbsp; uint8_t mirror_enabled = 0;<br /><br />&nbsp; &nbsp; /* Figure out the power of two this sprite fits into */<br />&nbsp; &nbsp; uint32_t real_width&nbsp; = __rdp_round_to_power( twidth );<br />&nbsp; &nbsp; uint32_t real_height = __rdp_round_to_power( theight );<br />&nbsp; &nbsp; uint32_t wbits = __rdp_log2( real_width );<br />&nbsp; &nbsp; uint32_t hbits = __rdp_log2( real_height );<br /><br />&nbsp; &nbsp; /* Because we are dividing by 8, we want to round up if we have a remainder */<br />&nbsp; &nbsp; int16_t round_amount = (real_width % 8) ? 1 : 0;<br /><br />&nbsp; &nbsp; /* Instruct the RDP to copy the sprite data out */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xF5000000 | ((sprite-&gt;bitdepth == 2) ? 0x00100000 : 0x00180000) | <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(((((real_width / 8) + round_amount) * sprite-&gt;bitdepth) &amp; 0x1FF) &lt;&lt; 9));<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (mirror_enabled == 0 ? 0x40100 : 0) | (hbits &lt;&lt; 14 ) | (wbits &lt;&lt; 4) );<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br /><br />&nbsp; &nbsp; /* Copying out only a chunk this time */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xF4000000 | (((sl &lt;&lt; 2) &amp; 0xFFF) &lt;&lt; 12) | ((tl &lt;&lt; 2) &amp; 0xFFF) );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (((sh &lt;&lt; 2) &amp; 0xFFF) &lt;&lt; 12) | ((th &lt;&lt; 2) &amp; 0xFFF) );<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br /><br />&nbsp; &nbsp; /* Save sprite width and height for managed sprite commands */<br />&nbsp; &nbsp; cache.width = twidth - 1;<br />&nbsp; &nbsp; cache.height = theight - 1;<br />&nbsp; &nbsp; cache.s = sl;<br />&nbsp; &nbsp; cache.t = tl;<br />&nbsp; &nbsp; cache.real_width = real_width;<br />&nbsp; &nbsp; cache.real_height = real_height;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; /* Return the amount of texture memory consumed by this texture */<br />&nbsp; &nbsp; return ((real_width / 8) + round_amount) * 8 * real_height * sprite-&gt;bitdepth;<br />}</div><br /><br />Changes on rdp_draw_textured_rectangle_scaled, still i have to test different texture sizes just to make sure its correct.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;if (flags &gt; 0)<br />&nbsp; &nbsp;{&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;if (flags != 2)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;s += ( (cache.width+1) + ((cache.real_width-(cache.width+1))&lt;&lt;1) ) &lt;&lt; 5;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;if (flags != 1)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;t += ( (cache.height+1) + ((cache.real_height-(cache.height+1))&lt;&lt;1) ) &lt;&lt; 5;&nbsp; &nbsp;<br />&nbsp; &nbsp;}<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void __rdp_draw_textured_rectangle_scaled( int tx, int ty, int bx, int by, double x_scale, double y_scale, int flags )<br />{<br />&nbsp; &nbsp; uint16_t s = cache.s &lt;&lt; 5;<br />&nbsp; &nbsp; uint16_t t = cache.t &lt;&lt; 5;<br /><br />&nbsp; &nbsp; /* Cant display &lt; 0, so must clip size and move S,T coord accordingly */<br />&nbsp; &nbsp; if( tx &lt; 0 )<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp;&nbsp; &nbsp;if ( tx &lt; -cache.width ) { return; }<br />&nbsp; &nbsp; &nbsp; &nbsp; s += (int)(((double)((-tx) &lt;&lt; 5)) * (1.0 / x_scale));<br />&nbsp; &nbsp; &nbsp; &nbsp; tx = 0;<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; if( ty &lt; 0 )<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; t += (int)(((double)((-ty) &lt;&lt; 5)) * (1.0 / y_scale));<br />&nbsp; &nbsp; &nbsp; &nbsp; ty = 0;<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; /* Calculate the scaling constants based on a 6.10 fixed point system */<br />&nbsp; &nbsp; int xs = (int)((1.0 / x_scale) * 4096.0);<br />&nbsp; &nbsp; int ys = (int)((1.0 / y_scale) * 1024.0);<br /><br />&nbsp; &nbsp; if (flags &gt; 0)<br />&nbsp; &nbsp; {&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp; if (flags != 2)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; s += ( (cache.width+1) + ((cache.real_width-(cache.width+1))&lt;&lt;1) ) &lt;&lt; 5;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp; if (flags != 1)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; t += ( (cache.height+1) + ((cache.real_height-(cache.height+1))&lt;&lt;1) ) &lt;&lt; 5;&nbsp; &nbsp;<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp;<br />&nbsp; &nbsp; /* Set up rectangle position in screen space */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xE4000000 | (bx &lt;&lt; 14) | (by &lt;&lt; 2) );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (tx &lt;&lt; 14) | (ty &lt;&lt; 2) );<br /><br />&nbsp; &nbsp; /* Set up texture position and scaling to 1:1 copy */<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (s &lt;&lt; 16) | t );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( (xs &amp; 0xFFFF) &lt;&lt; 16 | (ys &amp; 0xFFFF) );<br /><br />&nbsp; &nbsp; /* Send command */<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br />}</div><br /><br />I tried it combined with scale_x and scale_y, seems to be right with scale_y (also mid screen, with clipping):<br /><img src="http://i.imgur.com/SDdIHI5.jpg" alt="Image" /><br /><br />However i tested it with scale_x and pain arrived, i tried it without my code and still does the same, maybe a bug on the lib? I have to look at it.<br /><img src="http://i.imgur.com/wF6I2wa.jpg" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat May 27, 2017 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BMBx64 wrote:</div><div class="quotecontent">However i tested it with scale_x and pain arrived, i tried it without my code and still does the same, maybe a bug on the lib? I have to look at it.<br /><img src="http://i.imgur.com/wF6I2wa.jpg" alt="Image" /><br /></div>Looks like it's reading the source pixels four pixels as a time...

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>