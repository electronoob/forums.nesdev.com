<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=3590" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-09-18T03:11:55-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=3590</id>
<entry>
<author><name><![CDATA[Mednafen]]></name></author>
<updated>2007-09-18T03:11:55-07:00</updated>
<published>2007-09-18T03:11:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3590&amp;p=27057#p27057</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3590&amp;p=27057#p27057"/>
<title type="html"><![CDATA[Interpolation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3590&amp;p=27057#p27057"><![CDATA[
A quick-and-dirty example of linear interpolation that works for:<br />(output_width / input_width) &gt;= 0.5<br /><br />(There may be a few bugs, at it's untested, but the general concept is good <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" />).<br /><br />Also, your input pixel buffer should at least have a pitch of (input_width + 1) pixels, and on each line do:<br /><br />input_line[input_width] = input_line[input_width - 1];<br /><br />so that the color of the rightmost pixels in the output will be correct.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint32_t step = &#40;uint32_t&#41;&#40;&#40;uint64_t&#41;65536 * input_width / output_width&#41;;<br />uint32_t pos = 0;<br /><br />for&#40;unsigned int i = 0; i &lt; output_width; i++&#41;<br />&#123;<br /> uint32_t r,g,b;<br /><br /> r = pixel&#91;pos &gt;&gt; 16&#93;.r * &#40;0x10000 - &#40;pos &amp; 0xFFFF&#41;&#41;;<br /> r+= pixel&#91;&#40;pos &gt;&gt; 16&#41; + 1&#93;.r * &#40;pos &amp; 0xFFFF&#41;;<br /><br /> g = pixel&#91;pos &gt;&gt; 16&#93;.g * &#40;0x10000 - &#40;pos &amp; 0xFFFF&#41;&#41;;<br /> g+= pixel&#91;&#40;pos &gt;&gt; 16&#41; + 1&#93;.g * &#40;pos &amp; 0xFFFF&#41;;<br /><br /> b = pixel&#91;pos &gt;&gt; 16&#93;.b * &#40;0x10000 - &#40;pos &amp; 0xFFFF&#41;&#41;;<br /> b+= pixel&#91;&#40;pos &gt;&gt; 16&#41; + 1&#93;.b * &#40;pos &amp; 0xFFFF&#41;;<br /><br /> out_pixel&#91;i&#93;.r = r &gt;&gt; 16;<br /> out_pixel&#91;i&#93;.g = g &gt;&gt; 16;<br /> out_pixel&#91;i&#93;.b = b &gt;&gt; 16;<br /><br /> pos += step;<br />&#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1026">Mednafen</a> — Tue Sep 18, 2007 3:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2007-09-16T17:51:25-07:00</updated>
<published>2007-09-16T17:51:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3590&amp;p=27016#p27016</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3590&amp;p=27016#p27016"/>
<title type="html"><![CDATA[Interpolation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3590&amp;p=27016#p27016"><![CDATA[
I would like to add interpolation to my programs, but I don't have the background in math necessary to understand the Wikipedia entries on the various methods. Has anyone else like me here found a good website for reference?<br /><br />Most algorithms also interpolate in 2D when I only want to interpolate 1D scanlines to just approximately achieve the correct pixel aspect ratio. What would be the easiest method for me to implement in this respect?<br /><br />I know I don't want nearest neighbor, but I think I've come up with an algorithm for it. Could someone confirm this to be correct:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">outpixel&#91;i&#93; = inpixel&#91;round&#40;numofpixin/numofpixout*i&#41;&#93;</div><br /><br />In the meantime I've come up with a "common sense" algorithm which just weighs pixels against their subpixel "bias" which I split between the previous and next pixels:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">scalefactor = numofpixout / numofpixin<br /><br />pixelout&#91;i&#93; = <br />&#40;pixelin&#91;&#40;&#40;int&#41;&#40;i / scalefactor&#41; - 1&#41; &amp; numofpixin&#93; * &#40;&#40;i / scalefactor&#41; % 1&#41; / 2&#41;&#41; + <br />&#40;pixelin&#91;&#40;int&#41;&#40;i / scalefactor&#41;     &#93; * &#40;1 - &#40;&#40;i / scalefactor&#41; % 1&#41;&#41;&#41; +<br />&#40;pixelin&#91;&#40;&#40;int&#41;&#40;i / scalefactor&#41;+ 1&#41; &amp; numofpixin&#93; * &#40;&#40;i / scalefactor&#41; % 1&#41; / 2&#41;&#41;<br /><br /></div><br />Anything like conventional linear interpolation?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sun Sep 16, 2007 5:51 pm</p><hr />
]]></content>
</entry>
</feed>