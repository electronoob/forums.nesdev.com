<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-gb" xml:lang="en-gb">
<head>

<link rel="icon" href="/favicon.ico" type="image/x-icon" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<meta http-equiv="content-language" content="en-gb" />
<meta http-equiv="content-style-type" content="text/css" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="resource-type" content="document" />
<meta name="distribution" content="global" />
<meta name="keywords" content="" />
<meta name="description" content="" />

<title>nesdev.com &bull; View topic - Function params &amp; local vars using a stack in ASM6</title>

<link rel="alternate" type="application/atom+xml" title="Feed - nesdev.com" href="http://forums.nesdev.com/feed.php" /><link rel="alternate" type="application/atom+xml" title="Feed - News" href="http://forums.nesdev.com/feed.php?mode=news" /><link rel="alternate" type="application/atom+xml" title="Feed - All forums" href="http://forums.nesdev.com/feed.php?mode=forums" /><link rel="alternate" type="application/atom+xml" title="Feed - New Topics" href="http://forums.nesdev.com/feed.php?mode=topics" /><link rel="alternate" type="application/atom+xml" title="Feed - Active Topics" href="http://forums.nesdev.com/feed.php?mode=topics_active" /><link rel="alternate" type="application/atom+xml" title="Feed - Forum - NESdev" href="http://forums.nesdev.com/feed.php?f=2" /><link rel="alternate" type="application/atom+xml" title="Feed - Topic - Function params &amp; local vars using a stack in ASM6" href="http://forums.nesdev.com/feed.php?f=2&amp;t=5038" />

<link rel="stylesheet" href="./style.php?id=1&amp;lang=en" type="text/css" />

<script type="text/javascript">
// <![CDATA[


function popup(url, width, height, name)
{
	if (!name)
	{
		name = '_popup';
	}

	window.open(url.replace(/&amp;/g, '&'), name, 'height=' + height + ',resizable=yes,scrollbars=yes,width=' + width);
	return false;
}

function jumpto()
{
	var page = prompt('Enter the page number you wish to go to:', '2');
	var per_page = '15';
	var base_url = './viewtopic.php?f=2&amp;t=5038';

	if (page !== null && !isNaN(page) && page == Math.floor(page) && page > 0)
	{
		if (base_url.indexOf('?') == -1)
		{
			document.location.href = base_url + '?start=' + ((page - 1) * per_page);
		}
		else
		{
			document.location.href = base_url.replace(/&amp;/g, '&') + '&start=' + ((page - 1) * per_page);
		}
	}
}

/**
* Find a member
*/
function find_username(url)
{
	popup(url, 760, 570, '_usersearch');
	return false;
}

/**
* Mark/unmark checklist
* id = ID of parent container, name = name prefix, state = state [true/false]
*/
function marklist(id, name, state)
{
	var parent = document.getElementById(id);
	if (!parent)
	{
		eval('parent = document.' + id);
	}

	if (!parent)
	{
		return;
	}

	var rb = parent.getElementsByTagName('input');
	
	for (var r = 0; r < rb.length; r++)
	{
		if (rb[r].name.substr(0, name.length) == name)
		{
			rb[r].checked = state;
		}
	}
}



// ]]>
</script>
</head>
<body class="ltr">

<a name="top"></a>

<div id="wrapheader">

	<div id="logodesc">
	</div>

	<div id="menubar">

		<table width="100%" cellspacing="0">
		<tr>
			<td rowspan="2"><a href="./index.php"><img src="./styles/subsilver2/imageset/site_logo.gif" alt="" title="" /></a></td>
			<td width="100%" align="center"><h1>nesdev.com</h1><span class="gen">NES Development and Strangulation Records message boards</span></td>
		</tr>
		<tr>
			<td align="center">
				<!--<div style="float: right;">
					<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
					<input type="hidden" name="cmd" value="_s-xclick">
					<input type="hidden" name="hosted_button_id" value="X2HM4WNR5YT8S">
					<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
					<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
					</form>
				</div>-->
				<a href="./faq.php"><img src="./styles/prosilver/theme/images/icon_mini_faq.gif" width="12" height="13" alt="*" /> FAQ</a>
				&nbsp; &nbsp;<a href="./search.php"><img src="./styles/prosilver/theme/images/icon_mini_search.gif" width="12" height="13" alt="*" /> Search</a>
				<br />	
				 &nbsp;<a href="./ucp.php?mode=minion"><img src="./styles/prosilver/theme/images/icon_mini_register.gif" width="12" height="13" alt="*" /> Register</a>
					&nbsp; &nbsp;<a href="./ucp.php?mode=login"><img src="./styles/prosilver/theme/images/icon_mini_login.gif" width="12" height="13" alt="*" /> Login</a>&nbsp;
			</td>
		</tr>
		</table>
	</div>

	<div id="datebar">
		<table width="100%" cellspacing="0">
		<tr>
			<td class="gensmall"></td>
			<td class="gensmall" align="right">It is currently Fri Aug 17, 2018 12:23 am<br /></td>
		</tr>
		</table>
	</div>

</div>

<div id="wrapcentre">

	
	<p class="searchbar">
		<span style="float: left;"><a href="./search.php?search_id=unanswered">View unanswered posts</a> | <a href="./search.php?search_id=active_topics">View active topics</a></span>
		
	</p>
	

	<br style="clear: both;" />

	<table class="tablebg" width="100%" cellspacing="1" cellpadding="0" style="margin-top: 5px;">
	<tr>
		<td class="row1">
			<p class="breadcrumbs"><a href="./index.php">Board index</a> &#187; <a href="./viewforum.php?f=24">NES / Famicom</a> &#187; <a href="./viewforum.php?f=2">NESdev</a></p>
			<p class="datetime">All times are UTC - 7 hours </p>
		</td>
	</tr>
	</table>

	<br />
	

					<center>
					<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
					<!-- NesDev Forums -->
					<ins class="adsbygoogle"
						 style="display:block"
						 data-ad-client="ca-pub-7801010229099644"
						 data-ad-slot="7979066809"
						 data-ad-format="auto"></ins>
					<script>
					(adsbygoogle = window.adsbygoogle || []).push({});
					</script>
					</center>
	<br />


<div id="pageheader">
	<h2><a class="titles" href="./viewtopic.php?f=2&amp;t=5038&amp;start=15">Function params &amp; local vars using a stack in ASM6</a></h2>


	<p class="moderators">Moderator: <a href="./memberlist.php?mode=group&amp;g=320">Moderators</a></p>

</div>

<br clear="all" /><br />

<div id="pagecontent">

	<table width="100%" cellspacing="1">
	<tr>
		<td align="left" valign="middle" nowrap="nowrap">
		<a href="./posting.php?mode=post&amp;f=2"><img src="./styles/subsilver2/imageset/en/button_topic_new.gif" alt="Post new topic" title="Post new topic" /></a>&nbsp;<a href="./posting.php?mode=reply&amp;f=2&amp;t=5038"><img src="./styles/subsilver2/imageset/en/button_topic_reply.gif" alt="Reply to topic" title="Reply to topic" /></a>
		</td>
		
			<td class="nav" valign="middle" nowrap="nowrap">&nbsp;Page <strong>2</strong> of <strong>3</strong><br /></td>
			<td class="gensmall" nowrap="nowrap">&nbsp;[ 36 posts ]&nbsp;</td>
			<td class="gensmall" width="100%" align="right" nowrap="nowrap"><b><a href="#" onclick="jumpto(); return false;" title="Click to jump to pageâ€¦">Go to page</a> <a href="./viewtopic.php?f=2&amp;t=5038&amp;start=0">Previous</a>&nbsp;&nbsp;<a href="./viewtopic.php?f=2&amp;t=5038">1</a><span class="page-sep">, </span><strong>2</strong><span class="page-sep">, </span><a href="./viewtopic.php?f=2&amp;t=5038&amp;start=30">3</a> &nbsp;<a href="./viewtopic.php?f=2&amp;t=5038&amp;start=30">Next</a></b></td>
		
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr>
		<td class="cat">
			<table width="100%" cellspacing="0">
			<tr>
				<td class="nav" nowrap="nowrap">&nbsp;
				<a href="./viewtopic.php?f=2&amp;t=5038&amp;start=15&amp;view=print" title="Print view">Print view</a>
				</td>
				<td class="nav" align="right" nowrap="nowrap"><a href="./viewtopic.php?f=2&amp;t=5038&amp;view=previous">Previous topic</a> | <a href="./viewtopic.php?f=2&amp;t=5038&amp;view=next">Next topic</a>&nbsp;</td>
			</tr>
			</table>
		</td>
	</tr>

	</table>


	<table class="tablebg" width="100%" cellspacing="1">
	
		<tr>
			<th>Author</th>
			<th>Message</th>
		</tr>
	<tr class="row1">

			<td align="center" valign="middle">
				<a name="p45513"></a>
				<b class="postauthor">frantik</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p45513"></a></div><div style="float: right;"><a href="./viewtopic.php?p=45513#p45513"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Sun Apr 12, 2009 4:05 am&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Tue Mar 03, 2009 3:56 pm<br /><b>Posts:</b> 315
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">well i'm kind of hesitant to put a constant value into ZP but it might be useful especially if i were to put it after the frame pointer because then the frame pointer could be used as a true pointer and not an offset
<br />
<br />i think i'm going to swap the values in x and y and go through the other op codes to make adcLocal and whatnot</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=3841"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row2">

			<td align="center" valign="middle">
				<a name="p192657"></a>
				<b class="postauthor">frantik</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p192657">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=192657#p192657"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Thu Apr 06, 2017 1:51 am&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Tue Mar 03, 2009 3:56 pm<br /><b>Posts:</b> 315
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">someone recently asked me for the files behind the dead links.. here are the macro/function files<br /><br /><!-- m --><a class="postlink" href="http://swiftlytilting.com/files/asm6_functions.zip">http://swiftlytilting.com/files/asm6_functions.zip</a><!-- m --><br /><br />function.s<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;=========================================================<br />; Virtual Stack macros<br />;=========================================================<br /><br />; Set up stack at $0500<br />ifndef stack<br />&nbsp; &nbsp;stack = $0500<br />endif<br /><br />; Place stackPtr at $ff&nbsp; (in zero page for faster code)<br />ifndef stackPtr<br />&nbsp; &nbsp;stackPtr = $FF<br />endif<br /><br />macro ldStackPtr<br />&nbsp; &nbsp;ldy stackPtr<br />endm<br /><br />macro stStackPtr<br />&nbsp; &nbsp;sty stackPtr<br />endm<br /><br />macro ldStackFramePtr<br />&nbsp; &nbsp;ldx localVarPtr<br />endm<br /><br />macro stStackFramePtr<br />&nbsp; &nbsp;stx localVarPtr<br />endm<br /><br />;---------------------------------------------------------<br />; pushStack @value, @restoreX<br />;---------------------------------------------------------<br />; pushes a value onto the virtual stack<br />;<br />; Expects X to be pointer to end of virtual stack<br />;<br />; @value is optional, otherwise the value in A is used<br />; @restoreX is optional, when defined sets X to stackPtr<br /><br />macro pushStack @value<br /><br />&nbsp; &nbsp;ifdef @value<br />&nbsp; &nbsp; &nbsp; lda @value&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; load value into A if supplied<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; increase pointer location<br />&nbsp; &nbsp;sta stack,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; push A onto virtual stack<br />&nbsp; &nbsp;<br />endm<br /><br />;---------------------------------------------------------<br />; pullStack @restoreX<br />;---------------------------------------------------------<br />; pulls value from stack and places into A<br />;<br />; Expects X to be pointer to end of virtual stack<br />;<br />; @restoreX is optional, when defined sets X to stackPtr<br /><br />macro pullStack<br /><br />&nbsp; &nbsp;lda stack,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; pull A from the virtual stack<br />&nbsp; &nbsp;dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; decrease pointer location&nbsp; &nbsp;<br /><br />endm<br /><br />;---------------------------------------------------------<br />; resetStack<br />;---------------------------------------------------------<br />; moves the stack pointer to the start of the stack<br /><br />macro resetStack<br /><br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta stackPtr<br /><br />endm<br /><br />;=========================================================<br />; Function macros<br />;=========================================================<br /><br />; Set up pointer to local vars<br /><br />ifndef localVarPtr<br />&nbsp; &nbsp;localVarPtr = $FE<br />endif<br /><br />; Set up a few custom directives<br />defineLocalVars equ enum $01<br />endLocalVars&nbsp; &nbsp; equ ende<br />char &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; equ .byte 00<br />int&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; equ .word 0000<br /><br />;---------------------------------------------------------<br />; call @functionName, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8<br />;---------------------------------------------------------<br />; calls a subroutine after pushing data onto stack<br />;<br />; @functionName is an assembler address<br />; @p1 thru @p8 are optional parameters<br />;<br />; Notes:<br />; No registers are intact after the function returns.<br />;<br />; To return values:<br />; * Pass by reference<br />; * Use a global variable<br />; * Access old data left on stack using ldaReturn<br /><br />macro call @functionName, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8<br /><br />&nbsp; &nbsp;lda stackPtr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get stackPtr at start of function call and<br />&nbsp; &nbsp;tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; save before params are pushed onto stack<br />&nbsp; &nbsp;tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; also place into y to ensure stack operations work correctly<br /><br />&nbsp; &nbsp;ifdef @p1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; push parameters onto stack<br />&nbsp; &nbsp; &nbsp; pushStack @p1<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @p2<br />&nbsp; &nbsp; &nbsp; pushStack @p2<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @p3<br />&nbsp; &nbsp; &nbsp; pushStack @p3<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @p4<br />&nbsp; &nbsp; &nbsp; pushStack @p4<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @p5<br />&nbsp; &nbsp; &nbsp; pushStack @p5<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @p6<br />&nbsp; &nbsp; &nbsp; pushStack @p6<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @p7<br />&nbsp; &nbsp; &nbsp; pushStack @p7<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @p8<br />&nbsp; &nbsp; &nbsp; pushStack @p8<br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;pushStack&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; push old stackPtr onto stack<br />&nbsp; &nbsp;sty stackPtr&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; save new stackPtr<br />&nbsp; &nbsp;sta localVarPtr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; the old stack ptr location is also the new local ptr location<br />&nbsp; &nbsp;tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Set x to localVarPtr<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Register status when entering function proper:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Y = Ptr to end of stack (stackPtr)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = Ptr to begining of local vars (localVarPtr)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A = X<br /><br />&nbsp; &nbsp;jsr @functionName&nbsp; &nbsp; &nbsp; &nbsp;; call function<br /><br /><br />&nbsp; &nbsp;ldy stackPtr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; pull old stackPtr from stack<br />&nbsp; &nbsp;lda stack, y<br />&nbsp; &nbsp;sta stackPtr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; update stackPtr<br />&nbsp; &nbsp;tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; update X to contain stackPtr<br /><br />&nbsp; &nbsp;lda stack, y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; restore old localVarPtr<br />&nbsp; &nbsp;sta localVarPtr&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;tax&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; restore Y to old localVarPtr <br /><br />endm<br /><br />;---------------------------------------------------------<br />; ldaLocal @num, @restoreY<br />;---------------------------------------------------------<br />; loads a local variable into A<br />;<br />; Expects x to be pointer to start of local variables<br />;<br />; @num is the nth byte in the local variable scope<br />; @restoreX is optional, when defined sets X to localVarPtr<br /><br />macro ldaLocal @num, @restoreX<br /><br />&nbsp; &nbsp;ifdef @restoreX<br />&nbsp; &nbsp; &nbsp; ldy localVarPtr<br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;lda #(stack + @num), x<br />endm<br /><br /><br />macro LocalOp @op, @num<br />&nbsp; &nbsp;@op #(stack + @num), x<br />endm<br /><br />;---------------------------------------------------------<br />; staLocal @num, @restoreY<br />;---------------------------------------------------------<br />; stores A into a local variable<br />;<br />; Expects x to be pointer to start of local variables<br />;<br />; @num is the nth byte in the local variable scope<br />; @restoreY is optional, when defined sets X to localVarPtr<br /><br />macro staLocal @num, @restoreX<br /><br />&nbsp; &nbsp;ifdef @restoreX<br />&nbsp; &nbsp; &nbsp; ldx localVarPtr&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;LocalOp sta, @num<br /><br />endm<br /><br /><br /><br />macro aslLocal @num, @restoreX<br /><br />&nbsp; &nbsp;ifdef @restoreX<br />&nbsp; &nbsp; &nbsp; ldx localVarPtr&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;LocalOp asl, @num<br /><br />endm<br /><br /><br />macro rolLocal @num, @restoreX<br /><br />&nbsp; &nbsp;ifdef @restoreX<br />&nbsp; &nbsp; &nbsp; ldx localVarPtr&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;LocalOp rol, @num<br /><br />endm<br /><br /><br />macro lsrLocal @num, @restoreX<br /><br />&nbsp; &nbsp;ifdef @restoreX<br />&nbsp; &nbsp; &nbsp; ldx localVarPtr&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;LocalOp lsr, @num<br /><br />endm<br /><br /><br />macro adcLocal @num, @restoreX<br /><br />&nbsp; &nbsp;ifdef @restoreX<br />&nbsp; &nbsp; &nbsp; ldx localVarPtr&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;LocalOp adc, @num<br /><br />endm<br /><br /><br /><br />;---------------------------------------------------------<br />; alloca @size, @restoreX, @restoreY<br />;---------------------------------------------------------<br />; Allocates a block of memory in the local variable scope<br />;<br />; Expects y to be pointer to end of virtual stack<br />; Expects x to be pointer to start of local variables<br />;<br />; @size is the number of bytes to allocate<br />; @restoreX is optional, when defined sets y to stackPtr<br />; @restoreY is optional, when defined sets x to localVarPtr<br />;<br />; Notes:<br />; This memory is accessed like parameters using sta/ldaLocal<br />; Allocated memory is lost on function return<br /><br />macro alloca @size, @restorey, @restorex<br /><br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;ifdef @restorey<br />&nbsp; &nbsp; &nbsp; ldy stackPtr<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @restorex<br />&nbsp; &nbsp; &nbsp; ldx localVarPtr&nbsp; &nbsp; &nbsp; ; read pointer to start of the local vars<br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;adc @size&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; add size to stackptr<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;sta stackPtr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; update stack pointer<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;sta stack,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; store pointer to local vars at new location<br /><br />endm<br /><br />macro ldaReturn @num, @restorey<br /><br />&nbsp; &nbsp;ifdef @restorey <br />&nbsp; &nbsp; &nbsp; ldy stackPtr<br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;lda #(stack + @num), y<br /><br />endm<br /><br /><br />macro fastcall @functionName, @pA, @pX, @pY<br /><br />&nbsp; &nbsp;ifdef @pA<br />&nbsp; &nbsp;&nbsp; &nbsp;lda @pA<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @pX<br />&nbsp; &nbsp;&nbsp; &nbsp;ldx @pX<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifdef @pY<br />&nbsp; &nbsp;&nbsp; &nbsp;ldy @pY<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jsr @functionName<br /><br />endm</div><br /><br />macros.s<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">include functions.s<br /><br />enum $ee<br />&nbsp; &nbsp;temp1 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;temp2 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;temp3 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;temp4 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;Controller1 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;OldController1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;Controller2&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;OldController2&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;VBLANK_counter &nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;NameTableBufferPtr &nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;PPUCTRL_MIRROR &nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;PPUMASK_MIRROR &nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;PPUADDR_MIRROR &nbsp; &nbsp;&nbsp; &nbsp;word 0000<br />&nbsp; &nbsp;PPU_HSCROLL &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;PPU_VSCROLL &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;localVarPtr &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />&nbsp; &nbsp;stackPtr &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte 00<br />ende<br /><br /><br />; Memory Map<br />;<br />; 0000 - 00ED - ZP Globals available to user<br />; 00F0 - 00F3 - 4 Temporary ZP globals available to system (and user but use caution)<br />; 00F4 - 00FF - ZP globals for system use<br />;&nbsp; &nbsp; F4 -&nbsp; &nbsp;F5 - Controllers<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; F6 - vblank counter<br />;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; F7 - Nametable Buffer ptr<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; F8 - PPUCTRL_MIRROR<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; F9 - PPUMASK_MIRROR<br />;&nbsp; &nbsp; &nbsp;FA - FB - PPUADDR_MIRROR<br />;&nbsp; &nbsp; &nbsp; -&nbsp; &nbsp;FC - Horizontal Scroll<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FD - Vertical Scroll<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FE - Function Stack Frame Prointer<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FF - Function Stack End Pointer<br />; <br />; 0100 - 01FF - System Stack<br />; 0200 - 02FF - Sprite Data for DMA<br />; 0300 - 03FF - Nametable buffer<br />; 0400 - 04FF - Heap (?)<br />; 0500 - 05FF - Function Stack<br />; 0600 - 06FF -&nbsp; <br />; 0700 - 07FF -<br /><br /><br />ifndef PPUCTRL_MIRROR<br />&nbsp; &nbsp;PPUCTRL_MIRROR = $f8<br />endif<br />ifndef PPUMASK_MIRROR<br />&nbsp; &nbsp;PPUMASK_MIRROR = $fA<br />endif<br /><br /><br /><br /><br /><br />macro iNES_header @prg, @chr, @mapper1, @mapper2<br /><br />&nbsp; &nbsp;ifndef @prg<br />&nbsp; &nbsp;&nbsp; &nbsp;@prg = #$01<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifndef @chr<br />&nbsp; &nbsp;&nbsp; &nbsp;@chr = #$01<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifndef @mapper1<br />&nbsp; &nbsp;&nbsp; &nbsp;@mapper1 = #$00<br />&nbsp; &nbsp;endif<br />&nbsp; &nbsp;ifndef @mapper2<br />&nbsp; &nbsp;&nbsp; &nbsp;@mapper2 = #$00<br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;.byte &quot;NES&quot;,$1a<br />&nbsp; &nbsp;.byte @prg ; PRG-ROM block<br />&nbsp; &nbsp;.byte @chr ; CHR-ROM block<br />&nbsp; &nbsp;.byte @mapper1 ; mapper info<br />&nbsp; &nbsp;.byte @mapper2 ; mapper info<br />&nbsp; &nbsp;.byte 0,0,0,0,0,0,0,0&nbsp; ; pad header to 16 bytes<br />endm<br /><br />macro vectors @vblank, @reset, @irq<br />&nbsp; &nbsp;org $fffa<br />&nbsp; &nbsp;word @vblank, @reset, @irq<br />endm<br /><br />;---------------------------------------------------------<br />;---------------------------------------------------------<br />;&nbsp; &nbsp; &nbsp; &nbsp;16-bit increment (macro: inc16 address)<br />;---------------------------------------------------------<br />.macro&nbsp; inc16&nbsp; &nbsp;@addr<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;inc&nbsp; &nbsp; &nbsp;@addr<br />&nbsp; &nbsp;&nbsp; &nbsp;bne&nbsp; &nbsp; &nbsp;+<br />&nbsp; &nbsp;&nbsp; &nbsp;inc&nbsp; &nbsp; &nbsp;@addr+1<br />&nbsp; &nbsp;+<br />.endm<br /><br />macro waitVBlank<br />&nbsp; &nbsp;lda VBLANK_counter<br />-wait:<br />&nbsp; &nbsp;cmp VBLANK_counter<br />&nbsp; &nbsp;beq -wait:<br />endm<br /><br /><br />.macro screen_off<br />&nbsp; &nbsp;; Disable all graphics.<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta PPUCTRL<br />&nbsp; &nbsp;sta PPUMASK<br />&nbsp; &nbsp;sta PPUCTRL_MIRROR<br />&nbsp; &nbsp;sta PPUMASK_MIRROR<br />.endm<br /><br />.macro waitVBlank_pollPPU<br />-&nbsp; &nbsp;lda PPUSTATUS<br />&nbsp; &nbsp;bpl -<br />endm<br /><br />.macro waitSprite0Hit<br />-&nbsp; &nbsp;lda PPUSTATUS<br />&nbsp; &nbsp;cmp #%01000000<br />&nbsp; &nbsp;bne -<br />endm<br /><br />.macro clearRAM<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Clear out RAM.<br />&nbsp; &nbsp;ldx #$00<br />-&nbsp; sta $000,x<br />&nbsp; &nbsp;sta $100,x<br />&nbsp; &nbsp;sta $200,x<br />&nbsp; &nbsp;sta $300,x<br />&nbsp; &nbsp;sta $400,x<br />&nbsp; &nbsp;sta $500,x<br />&nbsp; &nbsp;sta $600,x<br />&nbsp; &nbsp;sta $700,x<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;bne -<br />endm<br /><br />.macro initSound<br />&nbsp; &nbsp;lda #$01&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; initialize sound hardware<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta $4001<br />&nbsp; &nbsp;lda #$40<br />&nbsp; &nbsp;sta $4017<br />&nbsp; &nbsp;sta $4011<br />endm<br /><br /><br />.macro initNES<br />&nbsp; &nbsp;ldx #$FF&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Reset the stack pointer.<br />&nbsp; &nbsp;txs<br /><br />&nbsp; &nbsp;sei<br />&nbsp; &nbsp;cld<br />&nbsp; &nbsp;screen_off&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Disable all graphics.<br />&nbsp; &nbsp;waitVBlank_pollPPU<br />&nbsp; &nbsp;waitVBlank_pollPPU<br />&nbsp; &nbsp;clearRAM<br /><br />&nbsp; &nbsp;initSound<br />.endm<br /><br />macro setPPUCTRL @value<br />&nbsp; &nbsp;lda #@value<br />&nbsp; &nbsp;sta PPUCTRL_MIRROR<br />&nbsp; &nbsp;sta PPUCTRL<br />endm<br /><br />macro restorePPUCTRL<br />&nbsp; &nbsp;lda PPUCTRL_MIRROR<br />&nbsp; &nbsp;sta PPUCTRL<br />endm<br /><br />macro setPPUMASK @value<br />&nbsp; &nbsp;lda #@value<br />&nbsp; &nbsp;sta PPUMASK_MIRROR<br />&nbsp; &nbsp;sta PPUMASK<br />endm<br /><br />macro updateNameTable @value<br />&nbsp; &nbsp;lda PPUCTRL_MIRROR<br />&nbsp; &nbsp;and #%11111100<br />&nbsp; &nbsp;and #@value<br />&nbsp; &nbsp;sta PPUCTRL_MIRROR<br />&nbsp; &nbsp;sta PPUCTRL<br />endm<br /><br />macro flipNameTable<br />&nbsp; &nbsp;lda PPUCTRL_MIRROR<br />&nbsp; &nbsp;eor #%00000010<br />&nbsp; &nbsp;sta PPUCTRL_MIRROR<br />&nbsp; &nbsp;sta PPUCTRL<br />endm<br /><br />macro ldaList @listPtr, @index<br />&nbsp; &nbsp;ldx @index<br />&nbsp; &nbsp;lda @listPtr, x<br />endm<br /><br />macro staList @listPtr, @index<br />&nbsp; &nbsp;ldx @index<br />&nbsp; &nbsp;sta @listPtr, x<br />endm<br /><br /><br /><br />; multiply two bytes in memory using russian peasant algorithm<br />; uses $00, $01, $02 for temporary variables<br />; returns 16 bit value in $00 and $01<br />macro mult @value1ptr, @value2ptr, @ret, @temp<br /><br />&nbsp; &nbsp;ifndef @ret<br />&nbsp; &nbsp;&nbsp; &nbsp;@ret&nbsp; = $00<br />&nbsp; &nbsp;endif<br /><br />&nbsp; &nbsp;ifndef @temp<br />&nbsp; &nbsp;&nbsp; &nbsp;@temp&nbsp; = $02<br />&nbsp; &nbsp;endif<br /><br /><br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta @ret<br />&nbsp; &nbsp;sta @ret+1<br />&nbsp; &nbsp;sta @temp<br />&nbsp; &nbsp;jmp start:<br /><br />-loop:<br />&nbsp; &nbsp;asl @value1ptr&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; double first value<br />&nbsp; &nbsp;rol @temp&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; using 16bit precision<br />&nbsp; &nbsp;lsr @value2ptr&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; halve second vale<br />start:<br />&nbsp; &nbsp;lda @value2ptr&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;and #01&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; is new 2nd value an odd number?<br />&nbsp; &nbsp;beq -loop:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; if so, add new 1st value to running total<br />&nbsp; &nbsp;lda @ret&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;adc @value1ptr&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;sta @ret&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;lda @ret+1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;adc @temp&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;sta @ret+1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;lda @value2ptr&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;cmp #01&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; is 2nd value 1?&nbsp; if so, we're done<br />&nbsp; &nbsp;bne -loop:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; otherwise, loop<br />endm<br /></div><br /><br />nes.h<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Constants for NES<br /><br /><br />PPUCTRL &nbsp; &nbsp;&nbsp; &nbsp;= $2000<br />PPUMASK &nbsp; &nbsp;&nbsp; &nbsp;= $2001<br />PPUSTATUS &nbsp; &nbsp;= $2002<br />OAMADDR &nbsp; &nbsp;&nbsp; &nbsp;= $2003<br />PPUSCROLL &nbsp; &nbsp;= $2005<br />PPUADDR &nbsp; &nbsp;&nbsp; &nbsp;= $2006<br />PPUDATA &nbsp; &nbsp;&nbsp; &nbsp;= $2007<br /><br />; PPUCTRL settings<br /><br />PPUCTRL_NTABLE_0&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; = %00000000 ; Select name table 0<br />PPUCTRL_NTABLE_1&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; = %00000001 ; Select name table 1<br />PPUCTRL_NTABLE_2&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; = %00000010 ; Select name table 2<br />PPUCTRL_NTABLE_3&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; = %00000011 ; Select name table 3<br />PPUCTRL_VERTICAL&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;= %00000100 ; Increment PPU address by 32 bytes, going down<br />PPUCTRL_HORIZONTAL&nbsp; &nbsp; &nbsp;= %00000000 ; Increment PPU address by 1 byte, going across<br />PPUCTRL_SPR_PTABLE_0&nbsp; &nbsp;&nbsp; = %00000000 ; Sprite pattern table 0<br />PPUCTRL_SPR_PTABLE_1&nbsp; &nbsp;&nbsp; = %00001000 ; Sprite pattern table 1<br />PPUCTRL_BG_PTABLE_0&nbsp; &nbsp;&nbsp; = %00000000 ; Background pattern table 0<br />PPUCTRL_BG_PTABLE_1&nbsp; &nbsp;&nbsp; = %00010000 ; Background pattern table 1<br />PPUCTRL_SPR_8X8&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; = %00000000 ; Sprites are 8x8<br />PPUCTRL_SPR_8X16&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; = %00100000 ; Sprites are 8x16<br />PPUCTRL_VBLANK_NMI_ON&nbsp; = %10000000 ; write this value to PPUCTRL to enable NMI <br />PPUCTRL_VBLANK_NMI_OFF = %00000000 ; write this value to PPUCTRL to disable NMI <br /><br /><br />; PPUMASK settings<br /><br />PPUMASK_GRAYSCALE &nbsp; &nbsp;&nbsp; &nbsp;= %00000001<br />PPUMASK_COLOR&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;= %00000000<br />PPUMASK_BG_NOCLIP &nbsp; &nbsp;&nbsp; &nbsp;= %00000010<br />PPUMASK_BG_CLIP &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= %00000000<br />PPUMASK_SPR_NOCLIP &nbsp; &nbsp;&nbsp; &nbsp;= %00000100<br />PPUMASK_SPR_CLIP &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= %00000000<br />PPUMASK_BG_ON &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= %00001000<br />PPUMASK_BG_OFF &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= %00000000<br />PPUMASK_SPR_ON &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= %00010000<br />PPUMASK_SPR_OFF &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= %00000000<br />PPUMASK_INTENSE_RED&nbsp; &nbsp;&nbsp; &nbsp;= %00100000<br />PPUMASK_INTENSE_GREEN&nbsp; &nbsp;= %01000000<br />PPUMASK_INTENSE_BLUE &nbsp; &nbsp;= %10000000<br /><br /><br />OAM_DMA &nbsp; &nbsp;&nbsp; &nbsp;= $4014<br />SNDCHN &nbsp; &nbsp;&nbsp; &nbsp;= $4015<br />CONTROLLER1&nbsp; &nbsp;= $4016<br />CONTROLLER2 = $4017<br /><br />KEY_A&nbsp; &nbsp; &nbsp; = %10000000<br />KEY_B&nbsp; &nbsp; &nbsp; = %01000000<br />KEY_SELECT = %00100000<br />KEY_START&nbsp; = %00010000<br />KEY_UP&nbsp; &nbsp; &nbsp;= %00001000<br />KEY_DOWN&nbsp; &nbsp;= %00000100<br />KEY_LEFT&nbsp; &nbsp;= %00000010<br />KEY_RIGHT&nbsp; = %00000001 <br /><br /><br /><br />; setup RAM constants<br /><br />RAM_PAT_TABLE_0&nbsp; &nbsp;&nbsp; &nbsp;= $0000<br />RAM_PAT_TABLE_1&nbsp; &nbsp;&nbsp; &nbsp;= $1000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br /><br />RAM_NAME_TABLE_0 &nbsp; &nbsp;&nbsp; &nbsp;= $2000<br />RAM_ATTRIB_TABLE_0 &nbsp; &nbsp;= $23C0<br />RAM_NAME_TABLE_1 &nbsp; &nbsp;&nbsp; &nbsp;= $2400<br />RAM_ATTRIB_TABLE_1 &nbsp; &nbsp;= $27C0<br />RAM_NAME_TABLE_2 &nbsp; &nbsp;&nbsp; &nbsp;= $2800<br />RAM_ATTRIB_TABLE_2 &nbsp; &nbsp;= $2BC0<br />RAM_NAME_TABLE_3 &nbsp; &nbsp;&nbsp; &nbsp;= $2C00<br />RAM_ATTRIB_TABLE_3 &nbsp; &nbsp;= $2FC0<br /><br />RAM_BG_PALETTE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $3F00<br />RAM_SPR_PALETTE&nbsp; &nbsp;&nbsp; &nbsp;= $3F10<br /><br />RAM_SAVE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $6000<br />RAM_PRG&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $8000<br /><br />; INES header constants<br /><br />INES_HORIZONTAL &nbsp; &nbsp;= %00000000<br />INES_VERTICAL &nbsp; &nbsp; &nbsp; &nbsp;= %00000001<br />INES_SRAM&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;= %00000010<br />INES_TRAINER&nbsp; &nbsp;&nbsp; &nbsp;= %00000100<br />INES_4SCREEN&nbsp; &nbsp;&nbsp; &nbsp;= %00001000<br /><br />INES_NROM&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $00<br />INES_MMC1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $10<br />INES_UNROM&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $20<br />INES_CNROM&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $30<br />INES_MMC3&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $40<br />INES_MMC5&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $50<br />INES_FFEF4&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $60<br />INES_AXROM&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $70<br />INES_FFEF4&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $80<br />INES_MMC2&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $90<br />INES_MMC4&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $A0<br />INES_COLORDREAMS&nbsp; &nbsp;= $B0<br />INES_FFEF4&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $C0<br />INES_CPROM&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $D0<br />;unused&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $E0<br />INES_100IN1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $F0<br /></div></div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=3841"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row1">

			<td align="center" valign="middle">
				<a name="p193840"></a>
				<b class="postauthor">Garth</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p193840">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=193840#p193840"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Thu Apr 20, 2017 2:36 am&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Wed Nov 30, 2016 4:45 pm<br /><b>Posts:</b> 110<br /><b>Location:</b> Southern California
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">I'm not familiar with ASM6, but I'll be watching this topic with interest.  My 6502 stacks treatise addresses local variables in section 14, at <!-- m --><a class="postlink" href="http://wilsonminesco.com/stacks/loc_vars.html">http://wilsonminesco.com/stacks/loc_vars.html</a><!-- m -->, and in the middle of the page I express a wish for being able to do something in macros to create and destroy variables in the page-1 stack space, something where I've run into roadblocks with the assemblers I'm familiar with.  The stack addressing builds on what's in the top third of the page in section 6, at <!-- m --><a class="postlink" href="http://wilsonminesco.com/stacks/parampassing.html">http://wilsonminesco.com/stacks/parampassing.html</a><!-- m -->, as well as the previous two sections.  Since you mention multiplication, by coincidence, I do have a multiplication routine there in section 6, using only data on the page-1 stack, about 1/3 of the way down the page.  Recursion takes the local-variable idea a step further, and is discussed in section 15, at <!-- m --><a class="postlink" href="http://wilsonminesco.com/stacks/recurse.html">http://wilsonminesco.com/stacks/recurse.html</a><!-- m --> .<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, it seems much better to leave Y free and have X be reserved for something, because the (zp),y addressing mode is the most important to have available to user code all the time, rather than (zp,x).</div><br />FWIW, I use (ZP,X) a lot, and rarely (ZP),Y.  I use the (ZP,X) in a ZP data stack.  This is in Forth, but you don't have to use Forth to take advantage of the method, described in sections 4, 5, and 6.  The multiplication routine comes up again 2/3 of the way down the page in section 6, this time using a ZP data stack.</div>

					
						<div class="postbody"><br />_________________<br /><!-- m --><a class="postlink" href="http://WilsonMinesCo.com/">http://WilsonMinesCo.com/</a><!-- m -->  lots of 6502 resources</div>
					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=8130"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row2">

			<td align="center" valign="middle">
				<a name="p199388"></a>
				<b class="postauthor">keldon</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p199388">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=199388#p199388"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Fri Jun 30, 2017 10:54 am&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Wed Jun 07, 2017 7:55 am<br /><b>Posts:</b> 8
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ifdef @restoreX<br />&nbsp; &nbsp; &nbsp; ldy localVarPtr<br />&nbsp; &nbsp;endif</div><br />I know this is old (Garth already necro'd <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> ), but shouldn't that be ldx?</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=8520"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row1">

			<td align="center" valign="middle">
				<a name="p199394"></a>
				<b class="postauthor">dougeff</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p199394">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=199394#p199394"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Fri Jun 30, 2017 12:48 pm&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				<tr>
					<td><img src="./download/file.php?avatar=7008_1483937093.png" width="86" height="90" alt="User avatar" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Fri May 08, 2015 7:17 pm<br /><b>Posts:</b> 2200<br /><b>Location:</b> DIGDUG
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">If this comment is accurate...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">@restoreX is optional, when defined sets X to localVarPtr</div><br /><br />then, I would agree with you. should be LDX</div>

					
						<div class="postbody"><br />_________________<br /><a href="http://nesdoug.com" class="postlink">nesdoug.com</a> -- blog/tutorial on programming for the NES</div>
					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=7008"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row2">

			<td align="center" valign="middle">
				<a name="p199427"></a>
				<b class="postauthor">keldon</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p199427">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=199427#p199427"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Sat Jul 01, 2017 5:12 am&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Wed Jun 07, 2017 7:55 am<br /><b>Posts:</b> 8
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">I've been playing around with some high level macros as well and I've found a way for a macro to accept either a local parameter or an actual register with the following code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MovLocal @index, regA </div><br /><br />I'll also explain how you can achieve the following flexibility with the same macro:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MovLocal @index, IMMEDIATE $10</div><br /><br />This code assumes locals on the stack.<br /><br />How it works is that local variables range from $0-ff, so we can use $100-105 to represent the registers.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.enum $100<br />&nbsp; &nbsp; regA .dsb 1<br />&nbsp; &nbsp; regX .dsb 1<br />&nbsp; &nbsp; regY .dsb 1<br />&nbsp; &nbsp; regS .dsb 1<br />&nbsp; &nbsp; regP .dsb 1<br />.ende<br /><br />MIN_REG = regA<br />MAX_REG = regP<br /><br />IMMEDIATE equ $800 +<br />AS_ZERO equ $1000 +<br />ZERO_TO_ABSOLUTE equ $1800 +<br /><br />macro MovLocal @to, @from<br />&nbsp; &nbsp; if @from = regX<br />&nbsp; &nbsp; &nbsp; &nbsp; txa<br />&nbsp; &nbsp; endif<br /><br />&nbsp; &nbsp; tsx<br /><br />&nbsp; &nbsp; if @from &lt; MIN_REG<br />&nbsp; &nbsp; &nbsp; &nbsp; tsx<br />&nbsp; &nbsp; &nbsp; &nbsp; lda $103 + @from, x<br />&nbsp; &nbsp; elseif @from &lt;= MAX_REG<br />&nbsp; &nbsp; &nbsp; &nbsp; if @from = regA<br />&nbsp; &nbsp; &nbsp; &nbsp; endif<br />&nbsp; &nbsp; &nbsp; &nbsp; if @from = regY<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tya<br />&nbsp; &nbsp; &nbsp; &nbsp; endif<br />&nbsp; &nbsp; &nbsp; &nbsp; if @from = regS<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; txa<br />&nbsp; &nbsp; &nbsp; &nbsp; endif<br />&nbsp; &nbsp; &nbsp; &nbsp; if @from = regP<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; php<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pla<br />&nbsp; &nbsp; &nbsp; &nbsp; endif<br /><br />&nbsp; &nbsp; endif<br />&nbsp; &nbsp; sta $103 + @to, x<br />endm</div><br /><br />If you wanted you could go even further and exploit mirroring to pass addresses from zero page (pass zero page address + $1000 then subtract in the macro), allow absolute addressing (even of zero page) and immediate values (pass value + $800, then subtract in the macro).</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=8520"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row1">

			<td align="center" valign="middle">
				<a name="p200535"></a>
				<b class="postauthor">dustmop</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200535">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200535#p200535"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Thu Jul 20, 2017 2:05 pm&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				<tr>
					<td><img src="./download/file.php?avatar=6219_1411580523.png" width="100" height="100" alt="User avatar" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Wed Oct 16, 2013 7:55 am<br /><b>Posts:</b> 133
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">From my experience, using the stack to store function parameters and local / temp variables leads to a poor experience. The 6502 just wasn't designed for it. It leads to a lot of boilerplate, wastes valuable ROM space, runs slow, and isn't even that convenient due to clobbering the X register. Too many downsides to be worth it.<br /><br />The solution that Bregalad posted about, of using a chunk of RAM space to pass around globals, certainly solves a lot of these problems, but unfortunately is pretty error-prone. I used it for a few previous projects and it's very easy to introduce subtle bugs without constant vigilance.<br /><br />In cc65 there's a compiler option --static-locals to allocate each local variable to a static address, such that every memory location used is unique. This leads to code that is pretty fast, but unfortunately wastes a ton of RAM. It also breaks recursion, but I've only ever need recursion once in an NES project and it was a complete edge case.<br /><br />I've been exploring an idea that improves upon these approaches. Have a tool analyze each function and track all the other functions that it calls. After compilation is done, build a call-graph of the entire program. Starting from the leaves, count how much RAM space each function needs for locals and parameters, and propagate that value upwards to callers. Using this, allocate memory addresses to the function based upon the needs of its locals plus the maximum of its callees. For example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void A() {<br />&nbsp; int s;<br />&nbsp; // ...<br />&nbsp; B();<br />&nbsp; C();<br />&nbsp; D();<br />}<br /><br />void B() {<br />&nbsp; int t;<br />&nbsp; int u;<br />&nbsp; // ...<br />}<br /><br />void C() {<br />&nbsp; int v;<br />&nbsp; // ...<br />}<br /><br />void D() {<br />&nbsp; int w;<br />&nbsp; // ...<br />&nbsp; B();<br />}<br /></div><br /><br />A calls B,C,D (top-level, entry point)<br />B and C are leaf calls (don't call anything else).<br />D calls B.<br /><br />Starting from the leaves, start allocating memory at $10 (an arbitrary location for this example).<br /><br />B needs 2 bytes for t and u, so it gets memory address $10 through $11.<br />C needs 1 byte for v, so it also gets memory address $10. Sharing memory for locals between C and B is okay because neither calls the other.<br />D needs 1 byte for w, plus 2 bytes for B, so w is assigned $12.<br />A needs 1 byte for s, then the maximum needed for all of B, C, D, which is 3 bytes. So s gets assigned $13.<br /><br />The amount of RAM used is going to be equal to the most RAM used by the longest call stack from entry point to leaf.<br /><br />I have implemented this technique in <a href="https://github.com/dustmop/co2" class="postlink">co2</a>, a scheme-based compiler that I took over for use in an upcoming project. See the file <a href="https://github.com/dustmop/co2/blob/master/casla.scm" class="postlink">casla.scm</a> for the code. I can imagine an assembler doing something similar, allocating memory locations at link time, though it would need to be aware of jump tables and similar stack manipulating control structures. Possibly even cc65 could get support, assuming someone wanted to add it.</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=6219"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row2">

			<td align="center" valign="middle">
				<a name="p200541"></a>
				<b class="postauthor" style="color: #FF3300">tepples</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200541">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200541#p200541"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Thu Jul 20, 2017 4:06 pm&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Sun Sep 19, 2004 11:12 pm<br /><b>Posts:</b> 20409<br /><b>Location:</b> NE Indiana, USA (NTSC)
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">That sort of static yet overlapping allocation of a nonrecursive thread's local variables sounds like what <a href="https://forums.nesdev.com/viewtopic.php?f=2&amp;t=7976&amp;p=81657#p81657" class="postlink">kevtris described to me before</a>.</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=9"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row1">

			<td align="center" valign="middle">
				<a name="p200543"></a>
				<b class="postauthor">dustmop</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200543">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200543#p200543"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Thu Jul 20, 2017 4:48 pm&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				<tr>
					<td><img src="./download/file.php?avatar=6219_1411580523.png" width="100" height="100" alt="User avatar" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Wed Oct 16, 2013 7:55 am<br /><b>Posts:</b> 133
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">Yup, sounds like the same concept. It can even be extended to recursive calls by detecting cycles, tagging functions in or below those cycles, then pushing their locals to the stack upon entry. Haven't implemented that yet, but it's on the TODO list.<br /><br />Even without recursion, having a tool do this automatically is fantastic. Having an assembler with support would be absolutely killer (also on the TODO list but a bit further down).</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=6219"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row2">

			<td align="center" valign="middle">
				<a name="p200545"></a>
				<b class="postauthor">rainwarrior</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200545">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200545#p200545"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Thu Jul 20, 2017 5:19 pm&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				<tr>
					<td><img src="./download/file.php?avatar=5165_1471663472.jpg" width="100" height="100" alt="User avatar" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Sun Jan 22, 2012 12:03 pm<br /><b>Posts:</b> 6592<br /><b>Location:</b> Canada
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">I normally just document functions that have global side effects, and otherwise sort it out manually:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">extern void foo(); // clobbers c,d,e</div><br />I'm truthfully a little surprised that managing these things would be enough of a problem that you'd want to write a call-stack analysis tool to automatically solve it.<br /><br />Remembering the whole point of this is only an optimization to avoid the overhead of stack variables, too... I don't think the stack really needs to be <em>globally</em> avoided?<br /><br />For that reason I always thought --static-locals was too heavy-handed (unless RAM is plentiful for your project), though as a pragma that you turn on for specific functions that need more speed it seems nice enough.<br /><br />Doing it manually also lets you mix use of stack and static variables as needed. CC65 is going to use the stack for a lot of temporary stuff even if the explicit variables are (e.g. in a lot of cases the static variable will end up being pushed to the stack to be the operand of an internal function call like multiply)...<br /><br />I guess ideally the analysis could be done at link time, even, but it seems like a big ordeal for an optimization that to me is only situationally important... but maybe the goal here is to write code that transparently looks like stack-locals like you'd write for modern C platforms? A portability concern?</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=5165"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row1">

			<td align="center" valign="middle">
				<a name="p200548"></a>
				<b class="postauthor" style="color: #FF3300">tepples</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200548">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200548#p200548"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Thu Jul 20, 2017 9:25 pm&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Sun Sep 19, 2004 11:12 pm<br /><b>Posts:</b> 20409<br /><b>Location:</b> NE Indiana, USA (NTSC)
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I normally just document functions that have global side effects, and otherwise sort it out manually:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">extern void foo(); // clobbers c,d,e</div></div><br />And then run into strange bugs in the caller when the callee is changed to clobber more things. Eventually you get to comments <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">//clobbers a,b,c,f,g,h,i,j,l,m,p</tt> which becomes hard to maintain.<br /><br />In addition, anything where you &quot;sort it out manually&quot; increases the likelihood of inadvertent inconsistent incorrect behavior, that is, lurking bugs. During the development of <em>Thwaite</em>, adding sound effects when an explosion spawned clobbered some of the variables that the collision detection routine was using. This caused other explosions to be triggered prematurely as if in a chain reaction, but it took me quite a while to narrow down exactly what was going wrong.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I'm truthfully a little surprised that managing these things would be enough of a problem that you'd want to write a call-stack analysis tool to automatically solve it.</div><br />&quot;I'm truthfully surprised that bounds checking or type checking would be enough of a problem that you'd want a compiler to save your behind by pointing out obvious bugs to you.&quot;<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">CC65 is going to use the stack for a lot of temporary stuff</div><br />A compiler built around non-recursive, non-reentrant functions being the default situation wouldn't.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I guess ideally the analysis could be done at link time</div><br />That's exactly when the bulk of allocation would happen. Fortunately, ld65 can evaluate some fairly complex* expressions at link time. Should I try making a set of ca65 macros to do this as a proof of concept?<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">but maybe the goal here is to write code that transparently looks like stack-locals like you'd write for modern C platforms?</div><br />Yes, in the interest of maintainability.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">A portability concern?</div><br />Portability concerns become noticeable when I have to spend time explaining to four different people why I haven't already made a full-scale game or a music engine for Super NES.<br /><br /><br /><span style="font-size: 85%; line-height: normal">* Not in the &quot;square root of -1&quot; sense</span></div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=9"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row2">

			<td align="center" valign="middle">
				<a name="p200549"></a>
				<b class="postauthor">rainwarrior</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200549">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200549#p200549"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Thu Jul 20, 2017 10:03 pm&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				<tr>
					<td><img src="./download/file.php?avatar=5165_1471663472.jpg" width="100" height="100" alt="User avatar" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Sun Jan 22, 2012 12:03 pm<br /><b>Posts:</b> 6592<br /><b>Location:</b> Canada
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">And then run into strange bugs in the caller when the callee is changed to clobber more things.</div><br />No, I haven't had such a bug yet. I agree that it &quot;could&quot;, but it literally hasn't in my past few years of NES development.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Eventually you get to comments <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">//clobbers a,b,c,f,g,h,i,j,l,m,p</tt> which becomes hard to maintain.</div><br />I don't &quot;eventually&quot; reach that point. If I did find something hard to maintain I'd simplify it.<br /><br />Sometimes that simplification is just <em>using the stack</em>, which has some pretty useful benefits at times. Like I was saying, this is an attempt at optimization, and I think it's far from ideal to use a solution that forces <em>everything</em> one way or the other.<br /><br />My statement was my honest opinion/experience: I've been using global temporaries like this habitually for a long time and find a clobberlist really easy to maintain/read/use, so much so that I <em>am</em> surprised by the desire to augment a compiler to automate it.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">In addition, anything where you &quot;sort it out manually&quot; increases the likelihood of inadvertent inconsistent incorrect behavior...</div><br />This is a truism, but 500% of 0 is still 0. There are tons of things one has to do manually in programming that could possibly be automated, the question I have, and what I'm expressing surprise at is that this particular problem carries enough weight that it warrants the (in my estimation fairly large) upfront effort involved in automation.<br /><br />...and I'd be interested in hearing stories about how that weight has come up for you or others in development. (I am, on the other hand, very <em>uninterested</em> in being told that my methods will &quot;eventually&quot; or hypothetically lead to problems for me that I'm not actually having.)<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">&quot;I'm truthfully surprised that bounds checking or type checking would be enough of a problem that you'd want a compiler to save your behind by pointing out obvious bugs to you.&quot;</div><br />Don't be rude. I made an honest statement about my own experience and I don't think this is a fair analogue at all.</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=5165"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row1">

			<td align="center" valign="middle">
				<a name="p200555"></a>
				<b class="postauthor">Oziphantom</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200555">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200555#p200555"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Fri Jul 21, 2017 12:53 am&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Tue Feb 07, 2017 2:03 am<br /><b>Posts:</b> 511
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody">Just though I would offer the path I have taken... <br />I mostly have things like <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ZPTemp1,2,3,4,5 <br />Pointer1,2,3,4</div><br />etc in my code, and what happens is 3 months later I go to add feature Y and end up trashing this or that. Or it magically works on PAL, but then doing an NTSC port where the code overlaps other things and boom..<br />So I made a python script ( warning I'm not a Python scriptor so its probably verbose for python and does things the 'C' way ) that parses a verbose code listing.<br />It adds 3 concepts , the first 2 are<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">updateTickdowns<br />;&amp;&amp;trashes a,x<br />;&amp;&amp;modfies TickDowns</div><br />So trashes means it just writes and they have no meaning<br />Modifies means its allowed to change the contents and the caller expects it to. <br />There is a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">;&amp;&amp;trashes _DONT_CARE_</tt> form which says this is a high level function that calls everything and I don't<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;&amp;&amp;preserve x,ZPTemp3</div><br />This is basically a static assert, in that it will check the function that is called and make sure that neither x,ZPTemp3 is in its modify, or trashes list.  So you use it as follows<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ldx numEnts<br />-&nbsp; &nbsp;lda entActive,x<br />&nbsp; &nbsp; beq +<br />&nbsp; &nbsp; jsr doEnt ;&amp;&amp;preserve x<br />+&nbsp; &nbsp;dex<br />&nbsp; &nbsp; bpl -</div> The python code has a parser in it and it will detect if things not listed are changed by the 6502 and tell you, you need to add it to one. I've been trying to come up with ways to make it less &quot;work&quot;, but as my more modern and indepth coding style has broken it, I need to upgrade its systems as well as add the &quot;This is missing from X, Press M for Modify, and T for Trash&quot; code.<br /><br />code is here <a href="https://github.com/oziphantom/Misc" class="postlink">https://github.com/oziphantom/Misc</a></div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=8250"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row2">

			<td align="center" valign="middle">
				<a name="p200587"></a>
				<b class="postauthor" style="color: #FF3300">tepples</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200587">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200587#p200587"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Fri Jul 21, 2017 8:22 am&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Sun Sep 19, 2004 11:12 pm<br /><b>Posts:</b> 20409<br /><b>Location:</b> NE Indiana, USA (NTSC)
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Eventually you get to comments <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">//clobbers a,b,c,f,g,h,i,j,l,m,p</tt> which becomes hard to maintain.</div><br />I don't &quot;eventually&quot; reach that point. If I did find something hard to maintain I'd simplify it.</div><br />Parts of my recent projects that use close to a dozen bytes' worth of temporaries include these:<br /><br /><ul><li>The main metasprite drawing code </li><li>The movement subroutine for walking actors, including all terrain collision detection and response </li><li>The movement subroutine for the player, including player-to-enemy, enemy-to-player, and bullet-to-player collision </li><li>A subroutine that draws a rectangle of background tile numbers to the transfer buffer </li></ul><br />I concede that player movement and metasprite drawing can usefully &quot;clobber all temporaries&quot; except the one reserved for iterating through the actor list. But player movement still has to avoid what the walker subroutine returns, and several enemies call the rectangle drawing code.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Sometimes that simplification is just <em>using the stack</em>, which has some pretty useful benefits at times.</div><br />I will push a temporary value to the stack in some cases. But I have found that stack use becomes less practical as code becomes more branchy, as I have to ensure that a pushed value is pulled in all branches. Or did you mean &quot;using the stack&quot; in a generic sense, such as unconditionally pushing several global temporaries at the start of a subroutine and pulling them at its end? I started doing that toward the end of <em>Thwaite</em> after the clobber problem, treating $0008-$000F as callee-saved temporary variables. (See the prolog and epilog of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">updateAllExplosions</tt> in <a href="https://github.com/pinobatch/thwaite-nes/blob/master/src/explosion.s" class="postlink">explosion.s</a>.)<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I've been using global temporaries like this habitually for a long time and find a clobberlist really easy to maintain/read/use</div><br />I'm looking for text editors on Windows and GNU/Linux that can be set up to display the clobberlist of the subroutine whose name is under the insertion point. Any recommendations and setup instructions? In addition, keeping the call stack's clobber list in my head becomes doubly hard when the roommate blares the TV or radio at a volume that distracts me from concentrating on what everything clobbers.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">so much so that I <em>am</em> surprised by the desire to augment a compiler to automate it.</div><br />A system that can unify allocation of temporary variables with allocation of non-temporary variables could actually reduce the load that a programmer has to keep in his head. Variables used by the only by the in-game engine and variables used only by the menu engine would thus be considered &quot;temporary&quot; and reusable by the other.<br /><br />Likewise with variables used only in different phases of gameplay, such as in the cannon placement, battle, and rebuilding phases of <em>Rampart</em>. Only the rebuilding phase needs temporary flood-filling space to calculate which parts of the player's territory have completely been surrounded by walls, and only the battle phase needs the coordinates of cannonballs in flight. But all in-game phases share some information, such as where the walls are, where the cannons are, the players' scores, and possibly owned but undeployed cannons and how much money each player has earned to buy more cannons. One might have to allocate scratchpad areas used by rebuild phase flood fill and then manually allocate cannonball coordinate variables for battle phase and artillery shop for placement phase on top of that scratchpad.<br /><br />This single abstraction would cover temporary variables per subroutine and RAM overlay segments per phase.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">what I'm expressing surprise at is that this particular problem carries enough weight that it warrants the (in my estimation fairly large) upfront effort involved in automation.</div><br />I'm willing to do the up-front effort and license it suitably, as I did for Pently, Popslide, and my VWF library. Once it's done, it's done for every ca65 user.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">&quot;I'm truthfully surprised that bounds checking or type checking would be enough of a problem that you'd want a compiler to save your behind by pointing out obvious bugs to you.&quot;</div><br />Don't be rude. I made an honest statement about my own experience and I don't think this is a fair analogue at all.</div><br />Object lifetime is one of the big problems that C++ fans claim that C++ solves better than some other languages. Just as templates and polymorphism fix C's &quot;everything is a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">void *</tt>&quot;, destructors and STL containers can be used to prevent leaks, double frees, and use after free statically through the language's semantics. And I consider clobber list management analogous to object lifetime.</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row2">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=9"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table class="tablebg" width="100%" cellspacing="1">
	<tr class="row1">

			<td align="center" valign="middle">
				<a name="p200597"></a>
				<b class="postauthor">rainwarrior</b>
			</td>
			<td width="100%" height="25">
				<table width="100%" cellspacing="0">
				<tr>
				
					<td class="gensmall" width="100%"><div style="float: left;">&nbsp;<b>Post subject:</b> <a href="#p200597">Re: Function params &amp; local vars using a stack in ASM6</a></div><div style="float: right;"><a href="./viewtopic.php?p=200597#p200597"><img src="./styles/subsilver2/imageset/icon_post_target.gif" width="12" height="9" alt="Post" title="Post" /></a><b>Posted:</b> Fri Jul 21, 2017 11:35 am&nbsp;</div></td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td valign="top" class="profile">
				<table cellspacing="4" align="center" width="150">
			
				<tr>
					<td><img src="./styles/subsilver2/imageset/en/icon_user_offline.gif" alt="Offline" title="Offline" /></td>
				</tr>
			
				<tr>
					<td><img src="./download/file.php?avatar=5165_1471663472.jpg" width="100" height="100" alt="User avatar" /></td>
				</tr>
			
				</table>

				<span class="postdetails">
					<br /><b>Joined:</b> Sun Jan 22, 2012 12:03 pm<br /><b>Posts:</b> 6592<br /><b>Location:</b> Canada
				</span>

			</td>
			<td valign="top">
				<table width="100%" cellspacing="5">
				<tr>
					<td>
					

						<div class="postbody"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Parts of my recent projects that use close to a dozen bytes' worth of temporaries include these:<br /><ul><li>The main metasprite drawing code </li><li>The movement subroutine for walking actors, including all terrain collision detection and response </li><li>The movement subroutine for the player, including player-to-enemy, enemy-to-player, and bullet-to-player collision </li><li>A subroutine that draws a rectangle of background tile numbers to the transfer buffer </li></ul></div><br />That's interesting. Well, hoping it's not too much of a digression to indulge, i'll compare my current project:<br /><br />My metasprite code has only 4 global temporaries. 1 each for the base X/Y position, 1 for the tile count, and a pointer to the sprite data.<br /><br />For collision, there are 4 global temporaries that I use for a bounding box, and anything in the code to do with a bounding box will use those same 4 temporaries, generally. Most of the collision checks use 3 additional temporaries on top of the bounding box (for X/Y and one for arithmetic). The player bounding box isn't in global temporaries, and moving blocking rectangles in the world are also dedicated (and handled transparently by the collision routines)... so I have a player-box collide, but there isn't actually a generic box-box one; the need surprisingly hasn't come up yet.<br /><br />The one thing that uses the most temporaries is a generic &quot;move character&quot; function that moves a rectangle colliding it with the world. It inherits the 7 used by collision, and adds 7 more.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I concede that player movement and metasprite drawing can usefully &quot;clobber all temporaries&quot;...</div><br />Well, in my code every character has a separate &quot;tick&quot; and &quot;draw&quot; routine, and each of them is allowed to clobber <em>any</em> of the shared global temporaries (named i-w, plus 2 pointers). It's kind of a little sandbox, and the concerns are separated: the tick code won't draw sprites, the draw code will never move the character. Maybe that's a big part of why I don't find organizing the temporaries much of a problem.<br /><br />That generic move <em>is</em> kind of a temporary hog, but I find it pretty easy to accommodate.<br /><br />I actually <em>wouldn't</em> want my metasprite routine to clobber too much-- several of my characters are drawn from multiple pieces, and do use temporaries around that.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">...except the one reserved for iterating through the actor list.</div><br />!? I'm very surprised that you would want to use a global temporary for that and not a dedicated variable.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I have found that stack use becomes less practical as code becomes more branchy</div><br />Sure, that's a valid concern, though I haven't found it that troubling myself. In my current project not needing IRQs and using BRK as a crash-handler has actually made it quick/easy to diagnose most unbalanced-stack errors, which has been pretty cool but I realize not everyone has that luxury.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">...unconditionally pushing several global temporaries at the start of a subroutine and pulling them at its end?</div><br />Sure, sometimes you need temporary space but it's not appropriate to allocate more, and the stack is usually a <em>good</em> place for this, whether you want to use it directly or to temporarily make room on your ZP, or whatever.<br /><br />Using the stack is the best way to make things truly &quot;local&quot;, and that's a very good property to have. Storing locals statically is an performance optimization, and <em>most</em> code is not performance critical.<br /><br />So yeah, you <em>could</em> write a static local manager to figure that optimization out for you, I get that... but it's not something I've ever found myself desiring in my NES work.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I'm looking for text editors on Windows and GNU/Linux that can be set up to display the clobberlist of the subroutine whose name is under the insertion point.</div><br />I know there are editors that can parse various documentation comment formats and show them to you, but I'm not familiar with them. I personally just used Notepad++ or Visual Studio most of the time. Often I use a split view to see &quot;header&quot;/documentation for quick reference in one column and the code i'm editing in another.<br /><br />Most of the time I don't actually even <em>need</em> to look up the clobber list, though. If the character tick routine I'm writing isn't currently holding values in temporaries, it doesn't actually matter what a called function uses. I don't need to rely on my (fallible) memory if I know the clobbers aren't relevant anyway.<br /><br />Could also be a factor that I prototype most things in C++, so I don't end up having to do a lot of iteration in actual NES code. This probably lowers the frequency that I need to actually think about temporary management too.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">A system that can unify allocation of temporary variables with allocation of non-temporary variables...<br />Likewise with variables used only in different phases of gameplay, such as in the cannon placement, battle, and rebuilding phases of <em>Rampart</em>...<br />This single abstraction would cover temporary variables per subroutine and RAM overlay segments per phase.</div><br />I understand the problem of reusing memory for different game phases, but I view that as a separate issue from managing static local temporaries. Any stuff that would persist longer than a frame I don't imagine encapsulating as a function local, and that kind of RAM management should be pretty explicit and directly tied to the particulars of the game... so I'm unable to envision what kind of &quot;system&quot; you're thinking about that handles all of this at once. (I'm not asking/challenging you to outlay a design, though; as I've been saying all along I've found existing tools adequate for it. Though, I suppose designing that kind of thing is the point of this thread...)<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Don't be rude.</div><br />I consider clobber list management analogous to object lifetime.</div><br />Sorry, the analogy seemed so strained to me as to be mocking. I shouldn't have interpreted it that way, as I'm sure it was not intended.<br /><br /><br /><div class="quotetitle">dustmop wrote:</div><div class="quotecontent">I have implemented this technique in <a href="https://github.com/dustmop/co2" class="postlink">co2</a>, a scheme-based compiler that I took over for use in an upcoming project. See the file <a href="https://github.com/dustmop/co2/blob/master/casla.scm" class="postlink">casla.scm</a> for the code. I can imagine an assembler doing something similar, allocating memory locations at link time, though it would need to be aware of jump tables and similar stack manipulating control structures. Possibly even cc65 could get support, assuming someone wanted to add it.</div><br />Have had some time to look at this example, and it's interesting to see.<br /><br />With the very functional style scheme code you're writing, I can see how the call stack quickly builds and local temporaries are a rapidly mounting problem. It really does demonstrate why you had a need to write a system to manage them as statics.</div>

					<br clear="all" /><br />

						<table width="100%" cellspacing="0">
						<tr valign="middle">
							<td class="gensmall" align="right">
							
							</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td>
		</tr>

		<tr class="row1">

			<td class="profile"><strong><a href="#wrapheader">Top</a></strong></td>
			<td><div class="gensmall" style="float: left;">&nbsp;<a href="./memberlist.php?mode=viewprofile&amp;u=5165"><img src="./styles/subsilver2/imageset/en/icon_user_profile.gif" alt="Profile" title="Profile" /></a> &nbsp;</div> <div class="gensmall" style="float: right;">&nbsp;</div></td>
	
		</tr>

	<tr>
		<td class="spacer" colspan="2" height="1"><img src="images/spacer.gif" alt="" width="1" height="1" /></td>
	</tr>
	</table>

	<table width="100%" cellspacing="1" class="tablebg">
	<tr align="center">
		<td class="cat"><form name="viewtopic" method="post" action="./viewtopic.php?f=2&amp;t=5038&amp;start=15"><span class="gensmall">Display posts from previous:</span> <select name="st" id="st"><option value="0" selected="selected">All posts</option><option value="1">1 day</option><option value="7">7 days</option><option value="14">2 weeks</option><option value="30">1 month</option><option value="90">3 months</option><option value="180">6 months</option><option value="365">1 year</option></select>&nbsp;<span class="gensmall">Sort by</span> <select name="sk" id="sk"><option value="a">Author</option><option value="t" selected="selected">Post time</option><option value="s">Subject</option></select> <select name="sd" id="sd"><option value="a" selected="selected">Ascending</option><option value="d">Descending</option></select>&nbsp;<input class="btnlite" type="submit" value="Go" name="sort" /></form></td>
	</tr>
	</table>
	

	<table width="100%" cellspacing="1">
	<tr>
		<td align="left" valign="middle" nowrap="nowrap">
		<a href="./posting.php?mode=post&amp;f=2"><img src="./styles/subsilver2/imageset/en/button_topic_new.gif" alt="Post new topic" title="Post new topic" /></a>&nbsp;<a href="./posting.php?mode=reply&amp;f=2&amp;t=5038"><img src="./styles/subsilver2/imageset/en/button_topic_reply.gif" alt="Reply to topic" title="Reply to topic" /></a>
		</td>
		
			<td class="nav" valign="middle" nowrap="nowrap">&nbsp;Page <strong>2</strong> of <strong>3</strong><br /></td>
			<td class="gensmall" nowrap="nowrap">&nbsp;[ 36 posts ]&nbsp;</td>
			<td class="gensmall" width="100%" align="right" nowrap="nowrap"><b><a href="#" onclick="jumpto(); return false;" title="Click to jump to pageâ€¦">Go to page</a> <a href="./viewtopic.php?f=2&amp;t=5038&amp;start=0">Previous</a>&nbsp;&nbsp;<a href="./viewtopic.php?f=2&amp;t=5038">1</a><span class="page-sep">, </span><strong>2</strong><span class="page-sep">, </span><a href="./viewtopic.php?f=2&amp;t=5038&amp;start=30">3</a> &nbsp;<a href="./viewtopic.php?f=2&amp;t=5038&amp;start=30">Next</a></b></td>
		
	</tr>
	</table>

</div>

<div id="pagefooter"></div>

<br clear="all" />
<table class="tablebg" width="100%" cellspacing="1" cellpadding="0" style="margin-top: 5px;">
	<tr>
		<td class="row1">
			<p class="breadcrumbs"><a href="./index.php">Board index</a> &#187; <a href="./viewforum.php?f=24">NES / Famicom</a> &#187; <a href="./viewforum.php?f=2">NESdev</a></p>
			<p class="datetime">All times are UTC - 7 hours </p>
		</td>
	</tr>
	</table>
	<br clear="all" />

	<table class="tablebg" width="100%" cellspacing="1">
	<tr>
		<td class="cat"><h4>Who is online</h4></td>
	</tr>
	<tr>
		<td class="row1"><p class="gensmall">Users browsing this forum: <a href="./memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> and 3 guests</p></td>
	</tr>
	</table>


<br clear="all" />

<table width="100%" cellspacing="1">
<tr>
	<td width="40%" valign="top" nowrap="nowrap" align="left"></td>
	<td align="right" valign="top" nowrap="nowrap"><span class="gensmall">You <strong>cannot</strong> post new topics in this forum<br />You <strong>cannot</strong> reply to topics in this forum<br />You <strong>cannot</strong> edit your posts in this forum<br />You <strong>cannot</strong> delete your posts in this forum<br />You <strong>cannot</strong> post attachments in this forum<br /></span></td>
</tr>
</table>

<br clear="all" />

<table width="100%" cellspacing="0">
<tr>
	<td><form method="get" name="search" action="./search.php"><span class="gensmall">Search for:</span> <input class="post" type="text" name="keywords" size="20" /> <input class="btnlite" type="submit" value="Go" /><input type="hidden" name="t" value="5038" />
<input type="hidden" name="sf" value="msgonly" />
</form></td>
	<td align="right">
	<form method="post" name="jumpbox" action="./viewforum.php" onsubmit="if(document.jumpbox.f.value == -1){return false;}">

	<table cellspacing="0" cellpadding="0" border="0">
	<tr>
		<td nowrap="nowrap"><span class="gensmall">Jump to:</span>&nbsp;<select name="f" onchange="if(this.options[this.selectedIndex].value != -1){ document.forms['jumpbox'].submit() }">

		
			<option value="-1">Select a forum</option>
		<option value="-1">------------------</option>
			<option value="24">NES / Famicom</option>
		
			<option value="2" selected="selected">&nbsp; &nbsp;NESdev</option>
		
			<option value="3">&nbsp; &nbsp;NESemdev</option>
		
			<option value="21">&nbsp; &nbsp;NES Graphics</option>
		
			<option value="6">&nbsp; &nbsp;NES Music</option>
		
			<option value="22">&nbsp; &nbsp;Homebrew Projects</option>
		
			<option value="34">&nbsp; &nbsp;&nbsp; &nbsp;2018 NESdev Competition</option>
		
			<option value="33">&nbsp; &nbsp;&nbsp; &nbsp;2017 NESdev Competition</option>
		
			<option value="32">&nbsp; &nbsp;&nbsp; &nbsp;2016 NESdev Competition</option>
		
			<option value="31">&nbsp; &nbsp;&nbsp; &nbsp;2014 NESdev Competition</option>
		
			<option value="30">&nbsp; &nbsp;&nbsp; &nbsp;2011 NESdev Competition</option>
		
			<option value="10">&nbsp; &nbsp;Newbie Help Center</option>
		
			<option value="9">&nbsp; &nbsp;NES Hardware and Flash Equipment</option>
		
			<option value="28">&nbsp; &nbsp;&nbsp; &nbsp;Reproduction</option>
		
			<option value="19">&nbsp; &nbsp;NESdev International</option>
		
			<option value="11">&nbsp; &nbsp;&nbsp; &nbsp;FCdev</option>
		
			<option value="18">&nbsp; &nbsp;&nbsp; &nbsp;NESdev China</option>
		
			<option value="27">&nbsp; &nbsp;&nbsp; &nbsp;NESdev Middle East</option>
		
			<option value="25">Other</option>
		
			<option value="5">&nbsp; &nbsp;General Stuff</option>
		
			<option value="4">&nbsp; &nbsp;Membler Industries</option>
		
			<option value="23">&nbsp; &nbsp;Other Retro Dev</option>
		
			<option value="12">&nbsp; &nbsp;&nbsp; &nbsp;SNESdev</option>
		
			<option value="20">&nbsp; &nbsp;&nbsp; &nbsp;GBDev</option>
		
			<option value="15">&nbsp; &nbsp;Test Forum</option>
		
			<option value="26">Site Issues</option>
		
			<option value="13">&nbsp; &nbsp;phpBB Issues</option>
		
			<option value="14">&nbsp; &nbsp;Web Issues</option>
		
			<option value="16">&nbsp; &nbsp;nesdevWiki</option>
		

		</select>&nbsp;<input class="btnlite" type="submit" value="Go" /></td>
	</tr>
	</table>

	</form>
</td>
</tr>
</table>


</div>


<div id="wrapfooter">
	
	<span class="copyright">Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group
	</span>
</div>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-61452025-2', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>