<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - upernes</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">upernes</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=13229">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=13229</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Tue Jun 20, 2017 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have found why it blinks, the SMB NonMaskableInterrupt code sets the name table address to be $2800 at the beginning.<br />And then it does his sprite zero detection. But it does not restore it when setting the scrolling values, it is later when rendering with the PPU_CTRL_REG1 bit0 to 1 that the next nametable bank will be used. And therefore it will render ok on the nes, but in my current super nes emulation, the bit in use at the moment of the sprite zero position will be used. And therefore I must also update the scrolling registers when the bit changes in PPU_CTRL_REG1.<br /><br />Edit: I have much less glitches on this, but still going to horizontal position 0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Fri Jun 23, 2017 3:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems that I have a speed problem with what is before sprite 0 hit flag. But maybe not, the top still glitches somehow if I make it collide at 96. It means that PPUCTRL1 does not always point to the first name bank at the end of vblank. But it is much better if the HScroll value is below 256 (no glitch at all).<br />Is it a way to profile snes code? To know how many cycles and scanlines were used between 2 points?<br /><br />My way would be to read the V counter before when PPUCTRL1 is accessed.<br />Anyway it seems (from the scroll after 256) that the number of available cycles are not enough to complete the NMI routine before the end of vblank.<br /><br />What this &quot;reset flipflop&quot; from the end of SMB's NMI means?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr OperModeExecutionTree ;otherwise do one of many, many possible subroutines<br />SkipMainOper:&nbsp; lda PPU_STATUS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;reset flip-flop<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pla<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ora #%10000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;reactivate NMIs<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_CTRL_REG1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rti&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;we are done until the next frame!</div><br />The PPU_CTRL_REG1's bit 1 state seems to be the cause of the glitches because the scroll offset changes from 0 to 256 while his value is 00, hence changing banks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sat Jun 24, 2017 5:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had many bugs in the Vblank bits, and I had a wait Vblank in my sprite DMA IO emulation.<br />Finally, instead of a profiler, I used the V line counter in bsnes+ debugger view, to look at how much time was used in the nes NMI routine.<br />I tried to enable the fast mode by writing in the register and setting the rom type on the header ($30). I do not know if it worked. Do anyone know how to test if a rom is recognised as fast rom?<br /><br />The glitch seems to come from  <div class="codetitle"><b>Code:</b></div><div class="codecontent">UpdateScreen -&gt; WriteBufferToScreen -&gt; WritePPUReg1 (code from the Smb disassmbly project n github)<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda Mirror_PPU_CTRL_REG1&nbsp; ;load mirror of $2000,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ora #%00000100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;set ppu to increment by 32 by default<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcs SetupWrites&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if d7 of third byte was clear, ppu will<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and #%11111011&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;only increment by 1<br />SetupWrites:&nbsp; &nbsp;jsr WritePPUReg1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;write to register<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;pull from stack and shift to left again<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcc GetLength&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if d6 of thir<br /></div><br />It writes $11 in the PPUCTRLREG1 during the Vblank and this &quot;pushes&quot; the Score bar to the left. Because the bit zero is the higher bit of HScroll. It is weird, maybe the screen is disabled on the nes when calling this Updatescreen routine?<br /><br />However, it seems to be just enough in the SNES in terms of CPU power to run the emulation. I hope to remove this scrolling glitch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sun Jun 25, 2017 4:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi<br />I looked at the effect on the PPUCTRLREG1 in Fceux and it behaves the same way (I did not notice the scanline number until today).<br />Glitch case:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Write to PPUCTRL1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Nes Line&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Snes Line<br />$10 @ Begining of NMI interrupt routine at line&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 239&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;246 (because of prior dma copy for sprites and BG)<br />$11 @ UpdateScreen glitch&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 239&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;290<br />$11 @ Sprite0 Hit&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;31&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31<br />$91 @ End of NMI routine&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 95&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 88 (slightly ahead)<br /></div><br />Normal case:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Write to PPUCTRL1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Nes Line&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Snes Line<br />$10 @ Begining of NMI interrupt routine at line&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 239&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;246 (because of prior dma copy for sprites and BG)<br />$11 @ Sprite0 Hit&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;31&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31<br />$91 @ End of NMI routine&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 95&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 88 (slightly ahead)<br /></div><br />The Update screen sets the bank to $2400 at line 290 and therefore the score bar does not show up. The score bar is in bank zero, PPUCTRLREG1 should be $10 like configured at line 239 at the begining of NMI.<br />However the problem does not show up on the NES. It does not disapear.<br /><br />Can anyone explain why the score bar does not blink on the nes?<br />It is like the PPUCTRL1 reg write is ignored when the rendering is disabled in PPUCTRL2.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 25, 2017 6:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are there writes to $2006 after the write to $2000? It'd overwrite the value set in $2000.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sun Jun 25, 2017 9:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It deos both writing in PPU_ADDRESS and WritePPUReg1. It enters in the routine at the UpdateScreen label.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">WriteBufferToScreen:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;store high byte of vram address<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iny<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda ($00),y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;load next byte (second)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;store low byte of vram address<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iny<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda ($00),y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;load next byte (third)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;shift to left and save in stack<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pha<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda Mirror_PPU_CTRL_REG1&nbsp; ;load mirror of $2000,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ora #%00000100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;set ppu to increment by 32 by default<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcs SetupWrites&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if d7 of third byte was clear, ppu will<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and #%11111011&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;only increment by 1<br />SetupWrites:&nbsp; &nbsp;jsr WritePPUReg1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;write to register&nbsp; &nbsp;&lt;----------------- It writes $11 or $15 here<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;pull from stack and shift to left again<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcc GetLength&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if d6 of third byte was clear, do not repeat byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ora #%00000010&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;otherwise set d1 and increment Y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iny<br />GetLength:&nbsp; &nbsp; &nbsp;lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;shift back to the right to get proper length<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;note that d1 will now be in carry<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tax<br />OutputToVRAM:&nbsp; bcs RepeatByte&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;if carry set, repeat loading the same byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;otherwise increment Y to load next byte<br />RepeatByte:&nbsp; &nbsp; lda ($00),y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;load more data from buffer and write to vram<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_DATA<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dex&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;done writing?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bne OutputToVRAM<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sec&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tya<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;adc $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;add end length plus one to the indirect at $00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to allow this routine to read another set of updates<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;adc $01<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $01<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$3f&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;sets vram address to $3f00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;then reinitializes it for some reason<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br />UpdateScreen:&nbsp; ldx PPU_STATUS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;reset flip-flop<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ldy #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;load first byte from indirect as a pointer<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda ($00),y&nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bne WriteBufferToScreen&nbsp; &nbsp;;if byte is zero we have no further updates to make here<br />InitScroll:&nbsp; &nbsp; sta PPU_SCROLL_REG&nbsp; &nbsp; &nbsp; &nbsp; ;store contents of A into scroll registers<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_SCROLL_REG&nbsp; &nbsp; &nbsp; &nbsp; ;and end whatever subroutine led us here<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rts</div><br /><br />We have the &quot;reinitializes it for some reason&quot; which looks dubious.<br />Usually the Mirror value of PPUCTRL1 (the copy in ram)  is anded with $FE to remove the lower bit at the begining of the Vblank NMI routine. But here it simply writes it without masking.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sun Jun 25, 2017 9:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have found this code in the fceux source code (ppu.cpp).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static DECLFW(B2006) {<br />&nbsp; &nbsp;FCEUPPU_LineUpdate();<br />&nbsp; &nbsp;PPUGenLatch = V;<br />&nbsp; &nbsp;if (!vtoggle) {<br />&nbsp; &nbsp;&nbsp; &nbsp;TempAddr &amp;= 0x00FF;<br />&nbsp; &nbsp;&nbsp; &nbsp;TempAddr |= (V &amp; 0x3f) &lt;&lt; 8;<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur._vt &amp;= 0x07;<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur._vt |= (V &amp; 0x3) &lt;&lt; 3;<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur._h = (V &gt;&gt; 2) &amp; 1;<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur._v = (V &gt;&gt; 3) &amp; 1;<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur._fv = (V &gt;&gt; 4) &amp; 3;<br />&nbsp; &nbsp;} else {<br />&nbsp; &nbsp;&nbsp; &nbsp;TempAddr &amp;= 0xFF00;<br />&nbsp; &nbsp;&nbsp; &nbsp;TempAddr |= V;<br />&nbsp; &nbsp;&nbsp; &nbsp;RefreshAddr = TempAddr;<br />&nbsp; &nbsp;&nbsp; &nbsp;DummyRead = 1;<br />&nbsp; &nbsp;&nbsp; &nbsp;if (PPU_hook)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PPU_hook(RefreshAddr);<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur._vt &amp;= 0x18;<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur._vt |= (V &gt;&gt; 5);<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur._ht = V &amp; 31;<br />&nbsp; &nbsp;&nbsp; &nbsp;ppur.install_latches();<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;vtoggle ^= 1;<br />}</div><br /><br />Where _h is the value of PPUCTRLREG1 bit 0 and V the byte written in $2006. It seems to tell that the bit 2 of this write will go to the bank select bit of PPUCTRL1.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 25, 2017 9:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Patrick FR wrote:</div><div class="quotecontent">It deos both writing in PPU_ADDRESS and WritePPUReg1. It enters in the routine at the UpdateScreen label.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda Mirror_PPU_CTRL_REG1&nbsp; ;load mirror of $2000,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ora #%00000100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;set ppu to increment by 32 by default<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcs SetupWrites&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if d7 of third byte was clear, ppu will<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and #%11111011&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;only increment by 1<br />SetupWrites:&nbsp; &nbsp;jsr WritePPUReg1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;write to register&nbsp; &nbsp;&lt;----------------- It writes $11 or $15 here<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; &#91;snipped several lines&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$3f&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;sets vram address to $3f00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;then reinitializes it for some reason<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br /></div><br /><br />We have the &quot;reinitializes it for some reason&quot; which looks dubious.</div><br />The going theory is that a programmer saw that leaving rendering off with the VRAM address pointed at $3F01-$3F1F caused that color to be sent to the composite output block instead of the color at $3F00. The programmer internalized a (wrong but close enough) model of the hardware in which the CGRAM had a separate address pointer, and writing $3F00 then $0000 initialized both the CGRAM address and the VRAM address, just as it (actually) has separate OAM and VRAM pointers.<br /><br />In 1999, loopy discovered <a href="https://wiki.nesdev.com/w/index.php/PPU_scrolling#PPU_internal_registers" class="postlink">the skinny</a> on why the last two writes on $2006 keep the status bar from flickering. Let me summarize:<br /><br />Bits 1-0 of the value written to $2000 get copied into bits 11-10 of <em>t</em>, the top-left corner address. This address is used to reset vertical parts of <em>v</em>, the VRAM address, during the pre-render line's hsync pulse and the horizontal parts of <em>v</em> at the start of hblank. But a pair of writes to $2006 overwrites both <em>t</em> and <em>v</em>. Here, writing $0000 clears both <em>t</em> and <em>v</em> to 0, causing the PPU to read from the first nametable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sun Jun 25, 2017 10:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks tepples, this one was rough  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> . The wiki page is detailed, it will help me fix this.<br />I am actually reworking the transition from patched prg to emulation, I will post as soon as it works.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sat Jul 08, 2017 1:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The score bar glitch problem is solved. I have found a speed problem causing a scrolling glitch, the code does not finish prior to Vblank End and it skips a frame wile the scrolling is at (0, 0). It recovers on the sprite 0 hit flag assertion on line 30 of the next frame.<br />It seems to happen during scrolling when colums are updated in the nametables, but I have seen that behaviour at the end of the map near the flag pole while not moving. An IO emulation routine may take a lot of time, it takes 35 lines to complete, maybe I should make an array of counters per IO call and reset it on vblank start. It would indicate what is called.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sat Jul 08, 2017 8:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I checked the calls to IO emulation and sometimes I find 26 writes to PPUMEMDATA or 42 writes to PPUMEMADDR. The calls caused a missed vblank end.<br />My code was not in bank $80! Therefore the fast mode was not used. Now it is faster, and the 26 writes to PPUDATA do not cause a glitch. But the 42 PPUMEMADDR writes still cause a frame miss.<br />This function changes the address of the routine called when writing. Maybe I could put it in RAM and only call the code in the other bank when the toggle is 0 after writing. This will cut in half the number of calls to the bank 0, it will surely work here.<br />But I doubt that it is enough cycles to add sound to it, and also have the scrolling working but I will try it. The ratio between available cycles and IO call cost is low.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sat Jul 08, 2017 12:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I moved part of &quot;sta $2006&quot; in ram, reducing from 42 calls to 21. The missing frame is still here, even if it is faster with the latest optimisation. It does not glitch when returning directly for all the 26 writes to PPU RAM, and therefore it is close to working on super mario bros. Maybe by using a 2KB jump table in the WRAM bank depending on the PPUADDR, it will spare a ton of cycles both in $2006 and $2007 emulation. But it looks like the snes has not enough power to emulate scrolling nes Games at 100%. I have cut a lot of cycles and optimisation makes the code less clear. I could get more cycles during Vblank by changing the background update to a fifo instead of a rolling DMA transfer. But all in all, if everything must be optimised, the development will be very slow. + On the console, it shows little rendering mistakes.<br />Anyway, it works with non scrolling games and Super Mario Bros can be played directly from the conversion.<br /><br />I will take a look at what Memblers did with the APU emulation, in order to see how it could fit in, and I end here. It was interesting, it went further than what I expected but it is not an aesthetic conversion where everything fits (that was my goal if possible). However it is fast, despite the few missing frames it really feels like the NES. I am not going to squeeze the cycle count for each IO access. There is no room for a correct PPU emulation and therefore no room for improvement.<br />Thanks for your help and for the amazing emulators and their integrated debugger. It is impressive that even on such code, bsnes behaves like the real hardware.<br /><br />edit:<br />I can't stop thinking... the super FX or a custom FPGA program sould be able to do PPU emulation. ...someday maybe.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sun Jul 09, 2017 12:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I could not stop thinking about this cycle problem, and I found something really effective about PPUADDRESS. I use a table of routines in WRAM (4KB) to be able to jump to the routine of the current PPU address quickly. It removes the address increment routine cost. And I moved the PPUADDRESS IO write acces to the ram code. This removed a shitload of cycles, I gained 20 rendering lines, but it still glitches. 2 more lines needed..  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />  I could solve it by moving the sprite0 hit routine to the ram code area (using the timers or the DMA to update the flags). This last change will remove the cost of 10 calls and spare 10 rendering lines. It will remove the glitch on SMB1.<br />However I doubt that I can add sound to it. Any opinion on that topic? The sound takes 5 or 6 calls per frame, the cost of bank-switching is already included in the current code. It goes to the sound routine but the routine does nothing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Sun Jul 09, 2017 12:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sound emulation could be fine if we can update the registers in the SPC700 when we want.<br />On Smb1 we have from line 80 to line 239 to do it. The timer will call the update routine on a given line from the romname.txt file, like SoundLine: 120.<br />LOLZ

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Mon Jul 17, 2017 3:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: upernes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I managed to gain enough cycles to eradicate the glitches. And it was not easy but I used the IRQ to emulate the PPUSTATUS flag. It was not easy because it turns out the IRQ must not occur close to the NMI interrupt or the program bank will be lost. Unless the first instruction of the NMI interrupt is an sei but in that case you never have an IRQ and therefore it needs to add an variable telling that it is an IRQ during the NMI and then enabling interrupts...<br />I just insterted the PPUSTATUS update in the NMI  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /> .<br />The trace recording was very useful.<br /><br />I need a way to update a column of tiles from RAM to VRAM? A line update is easy with the DMA, but I do not see how to do it with an increment of 32 to transfer a column. With HDMA?<br />Any idea?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>