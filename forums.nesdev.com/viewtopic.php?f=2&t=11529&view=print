<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Metroid ported to use the MMC3.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Metroid ported to use the MMC3.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11529">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11529</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Wed Aug 13, 2014 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As a fun experiment, I ported the disassembly of Metroid from the MMC1 to the MMC3. Hope this comes in handy for someone, someday. The source code will recompile using Ophis: <a href="https://hkn.eecs.berkeley.edu/~mcmartin/ophis/" class="postlink">https://hkn.eecs.berkeley.edu/~mcmartin/ophis/</a><br /><br />The source code is separated by bank, so I set up a rudimentary make system that will put the rom together after all the various banks are assembled by the Ophis Assembler.<br /><br />The source code is currently ~85% documented. I'd like to see the remainder of the source code documented. Would anyone be interested in taking it on as a group project?  You could take on a single undocumented routine, figure out what it does, and then name it and document it. This wouldn't be a difficult endeavor: the undocumented portions of the disassembly have been separated out by routine, and thus each remaining routine would be a nice bite-sized chunk of code to take on - not an unmanageable project for a person who has a rudimentary understanding of the 6502 and a couple of hours to burn. As an example, it took me 2 hours of work to switch the game from MMC1 to MMC3.<br /><br />I've <a href="https://github.com/ZaneDubya/MetroidMMC3" class="postlink">uploaded the current disassembly to GitHub</a>. If you would like to take on a routine, you should fork the source, make your fixes, and then submit a pull request. I should be able to respond to all pull requests within 24 hours.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>snarfblam</b> [ Wed Aug 13, 2014 3:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's funny. I was pondering the idea of converting Metroid to MMC3 just yesterday. It would make it easier to expand ROMs by providing a larger capacity and doing away with the awkward serial interface that causes problems if you want to bank swap on both the NMI and main thread.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Aug 13, 2014 5:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">snarfblam wrote:</div><div class="quotecontent">doing away with the awkward serial interface that causes problems if you want to bank swap on both the NMI and main thread.</div><br />Even MMC3's banking writes aren't atomic though (need to write the bank select reg first, then the actual data), so you'd need some safeguards.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Wed Aug 13, 2014 9:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can you even read the current bank? (disclaimer: no idea how MMC3 works) Because if you can't the problem stays anyway, remember that if you bank switch within NMI you'll need to undo the switch when returning.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Aug 13, 2014 9:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a really neat disassembly.<br /><br /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">Can you even read the current bank? (disclaimer: no idea how MMC3 works) Because if you can't the problem stays anyway, remember that if you bank switch within NMI you'll need to undo the switch when returning.</div><br /><br />You can't read the register, but the solution I'd think is to put a marker byte with the bank number in the same position of every bank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Aug 14, 2014 2:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">You can't read the register, but the solution I'd think is to put a marker byte with the bank number in the same position of every bank.</div><br />Or write the bank info to a known RAM location together with the bank switch.<br /><br />(In STREEMERZ, I put the marker byte into ROM. However one thing I don't like about that is that if you put the marker as the very first byte of a bank, the beginning of the bank is no longer aligned to a page (can make it slightly more difficult to align code/data that needs to be aligned for whatever reason). And if you put it at the end, you can't put the marker in the last, usually fixed bank because the vectors are there. Now of course the fixed bank doesn't ever (?) need to be banked into a switchable location, but I'd like to provide this option so that the bankswitching routine is consistent.) (EDIT: I realized just now that if the game doesn't use IRQ, the IRQ vector in the last bank can be repurposed for the marker byte. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Thu Aug 14, 2014 8:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">That's a really neat disassembly.</div>I agree. I want to point out that 99.99% of this disassembly is not my work: the program was first disassembled by Kent Hansen (aka SnowBro) and was later organized and commented by Nick Mikstas (aka Dirty McDingus). I've only changed the code to use the MMC3, written a build system so it can be easily reassembled, and added a little documentation for the 'area' banks. <a href="http://www.metroid-database.com/m1/sourcecode.php" class="postlink">Additional history on the base disassembly</a> is available online at the metroid database website.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Thu Aug 14, 2014 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The source code is currently ~85% documented, which is an amazing accomplishment on the part of Hansen/Mikstas. I'd like to see the remainder of the source code documented. Would anyone be interested in taking it on as a group project?<br /><br />Anyone who is interested could take one undocumented routine, figure out what it does, and then name it and document it. This wouldn't be a difficult endeavor: the undocumented portions of the disassembly have been separated out by routine, and thus each remaining routine would be a nice bite-sized chunk of code to take on - not an unmanageable project to take on for a person who has a rudimentary understanding of the 6502 and a couple of hours to burn.<br /><br />I've <a href="https://github.com/ZaneDubya/MetroidMMC3" class="postlink">uploaded the current disassembly to GitHub</a>. If you would like to take on a routine, you should fork the source, make your fixes, and then submit a pull request. I have the next two weeks available and will be back in school after that, so I should be able to respond to all pull requests within 24 hours.<br /><br />I think the easiest place to start would be naming and documenting the shared routines that are common to each of the five 'Area' ROM banks. There are 33 of these undocumented common routines at the following addresses:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">There are a number of routines in this section. I do not know what the purpose<br />of any of them are.<br /><br />Unknown routine&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8058<br />...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;80B0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 80B8<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 80FB<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8134<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 816E<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81B1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81B8<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81C0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81C7<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81DA<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81F6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81FC<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 820F<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 822B<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8244<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 82A5<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 82B3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 833F<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8395<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 83F5<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8441<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8441<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 844B<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 84A7<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 84FE<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 855A<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8563<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 856B<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br /><br />Unknown routine&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8B79<br />...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8B8C<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8B9D<br />Unknown data&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8BD1 (four byts of data)<br />Unknown routine&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8BD5<br />Unknown data&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8D3A (38 bytes of data)</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Thu Aug 14, 2014 1:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">You can't read the register, but the solution I'd think is to put a marker byte with the bank number in the same position of every bank.</div><br />Or write the bank info to a known RAM location together with the bank switch.</div><br />That one would not work because you could get NMI after the bank switch but before the RAM write (or vice versa if you do the operations the other way, but point stands).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Thu Aug 14, 2014 2:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could save to RAM the last writes in the main program to both $8000 and $8001.<br /><br />So first you write $8000's RAM shadow, then $8000 itself. Then write $8001's RAM shadow and then the register itself. When your interrupt is done with any bankswitching it has done it can just write the shadowed values back to the real registers and that should avoid any interruptions causing a crash. <br /><br />Atleast that's one idea that came to my mind. MMC1 seems more problematic since you really don't want anything interrupting the serial write process.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Aug 14, 2014 3:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I remember seeing SnowBro's disassemblies, I didn't know it was worked on further.  Reminds me too of another interesting game disassembly I'd only seen recently, SMB3 <a href="http://www.sonicepoch.com/sm3mix/" class="postlink">http://www.sonicepoch.com/sm3mix/</a><br /><br /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">You can't read the register, but the solution I'd think is to put a marker byte with the bank number in the same position of every bank.</div><br />Or write the bank info to a known RAM location together with the bank switch.</div><br />That one would not work because you could get NMI after the bank switch but before the RAM write (or vice versa if you do the operations the other way, but point stands).</div><br /><br />That's what I thought at first, but if you're running the bankswitch routine itself within a fixed bank (or RAM), and you write the RAM shadow first, then it should be interrupt-safe.  Safe for MMC3 at least, if it's just one write to swap banks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Thu Aug 14, 2014 3:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually, coming to think on it, if you always do write RAM write bank like that (no operations in between) it probably doesn't matter because NMI will bank switch and then the main code will bank switch to that bank, effectively making it a no-op (and getting the same result in the end). Requires you to ensure you always do it that way though.<br /><br />There's also the Master System method where the bank switching registers are mapped in the same addresses as RAM, so whenever you write to a bank register it also writes to RAM simultaneously (and then when you read you just get the value from RAM). This would mean implementing that in the mapper itself though, so unless you can configure MMC3 to do that (is that what you mean with shadow RAM?) it's not an option here =P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 14, 2014 4:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The NINA board that shares mapper #34 with BNROM has RAM at $6000-$7FFF &quot;under&quot; the bank registers at $7FFD-$7FFF in this manner.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Aug 14, 2014 5:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Safe for MMC3 at least, if it's just one write to swap banks.</div><br />A single write won't swap banks in MMC3. You first need to write the bank select register ($8000-$9FFE, even), then the bank data ($8001-$9FFF, odd).<br /><br />When I said the current bank could be stored in RAM, I assumed some method of synchronization would be used to avoid to usual concurrency issues. This could mean, for example, that the NMI could signal to the bankswitching routine in the main thread that it has interrupted the bank switch, and that the bankswitch needs to be reapplied. Note that in this case it doesn't matter whether NMI would restore the correct bank, because it'd get rewritten anyways right after the NMI leaves and main thread resumes. This method can work with MMC1 as well.<br /><br />Back when STREEMERZ used MMC1, I did it like this: 1) the bankswitching routine clears a variable &quot;nmiInterrupted&quot; 2) NMI routine saves current bank, resets MMC1, does whatever bankswitches it needs, then restores the saved bank and sets the flag &quot;nmiInterrupted&quot; 3) when the main thread's bankswitching routine notices that &quot;nmiInterrupted&quot; flag has been set, it resets MMC1 and starts the write over.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>snarfblam</b> [ Thu Aug 14, 2014 7:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metroid ported to use the MMC3.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Back when STREEMERZ used MMC1, I did it like this: 1) the bankswitching routine clears a variable &quot;nmiInterrupted&quot; 2) NMI routine saves current bank, resets MMC1, does whatever bankswitches it needs, then restores the saved bank and sets the flag &quot;nmiInterrupted&quot; 3) when the main thread's bankswitching routine notices that &quot;nmiInterrupted&quot; flag has been set, it resets MMC1 and starts the write over.</div><br />That actually sounds simpler than the technique I ended up using. I followed someone else's suggestion to set a variable to indicate a bank swap is in progress. If the NMI interrupts the swap, it sets a flag to indicate so and immediately returns. When the bank swap routine finishes, it checks the flag set by the NMI and if set, <em>then</em> runs the NMI routine.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>