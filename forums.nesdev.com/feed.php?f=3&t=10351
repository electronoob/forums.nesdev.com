<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=10351" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-08-31T05:29:20-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=10351</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-08-31T05:29:20-07:00</updated>
<published>2013-08-31T05:29:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117303#p117303</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117303#p117303"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117303#p117303"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Also a coding practise tip in passing: I would strongly suggest you use inttypes.h typedefs for integers, i.e. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">uint16_t</tt><br />[...]<br />P.S. -- What compiler are you using that's letting you shove new variable declarations right in the smack dab centre of your code without making an new code block (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">{ ... }</tt>)?<br /></div><br />This has been allowed in C++ forever and in C since 1999. In fact, the same revision of C that added stdint.h (the standardized version of inttypes.h) added declaring variables anywhere. I don't think it's as awful as you appear to think it is because it allows variables to be initialized with a value when they come into existence. This is especially important in C++ where declaring a variable of a non-POD type and initializing it later causes a default constructor to run at the point of declaration followed by the class's <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">operator =</tt> handler at initialization. Even in C, declaring late allows giving a defined value once you know a value, which makes your program less likely to encounter undefined behavior from using a variable before it is initialized.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />it should really look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const unsigned short cpu::indirectY(memory* memory, ppu* ppu)<br />{<br />   unsigned short zeroPageAddress, low, high, address;<br />   zeropageAddress = memory-&gt;readRAM(PC, ppu);<br /></div><br /></div><br />At this point, if low, high, or address were accessed right now, that would be undefined.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Aug 31, 2013 5:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2013-08-31T03:03:09-07:00</updated>
<published>2013-08-31T03:03:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117299#p117299</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117299#p117299"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117299#p117299"><![CDATA[
Edit: I took a longer stare at your indirectX() and zeroPageX() routines, and yeah, now I get it.  They were confusing me because of your mention of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">PC</tt>, which to me (at that point in the CPU) would still be pointing to the opcode.  However somewhere else in your code you're obviously doing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">PC++</tt> before handling the actual functionality of the addressing mode.  In other words I really expected to see PC+1 and PC+2 being used all over.<br /><br />You need to be aware of 3 things relating to addressing modes: zero page wrapping, page boundary crossing, and the JMP indirect CPU bug:<br /><br />a) &quot;Zero page wrapping&quot;, which is any time a ZP read/write operation happens, the effective addresses used for reading/writing need to stay within the $00xx range (hence the name zero page).  This is what <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&amp;= 0xff</tt> is about, but it needs to be applied only where applicable.  &quot;Zero page wrapping&quot; does not incur a cycle penalty (keep reading).<br /><br />b) Actual &quot;page boundary crossing&quot;, which is any time an effective address rolls over into the next page successfully (i.e. $12ff -&gt; $1300).  You might think &quot;why do I care about this, it's just simple 16-bit addition&quot; -- you need to care about it because crossing a page actually costs an extra CPU cycle.  Right now the first-generation NES games you're testing with tend to not be very &quot;timing-dependent&quot; but this will matter quite a lot later, trust me.  And don't forget about something like $ffff -&gt; $0000 too (that's also considered page crossing).  Your current abstraction methodology loses this ability.<br /><br />c) There's an actual CPU-level bug in the 6502 which affects <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jmp &#40;$xxxx&#41;</tt> (opcode $6c) only, where (b) above does not happen correctly.  In other words, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jmp &#40;$80ff&#41;</tt> would read the effective 16-bit address low byte from $80ff and the high byte from $8000 -- not $8100 like you would expect.  (And no, there is no additional CPU cycle penalty in that situation since the page never gets crossed)<br /><br />Remaining part of my previous (non-edited) post, which I'll keep just for folks reading this thread (whose Subject is no longer accurate):<br /><br />Here's some actual 6502 code with comments (I assume you speak 6502):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$fe     ; A=$fe<br />sta $0622    ; Store value $fe at memory location $0622 (in RAM)<br />lda #$22     ; A=$22<br />sta $4c      ; Memory location $4c ($004c) now contains value $22 (low byte of 16-bit address)<br />lda #$06     ; A=$06<br />sta $4d      ; Memory location $4d ($004d) now contains value $06 (high byte of 16-bit address)<br />ldx #$3a     ; X=$3a<br />lda ($12,x)  ; Effective address is $12+X (thus $4c)<br />             ; Memory location $4c ($004c) contains value $22 (low byte of 16-bit address)<br />             ; Memory location $4d ($004d) contains value $06 (high byte of 16-bit address)<br />             ; Effective 16-bit address to read from is $0622<br />;<br />; A now contains value $fe<br />;<br /></div><br />The difference between this and indirect indexed Y (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda &#40;$12&#41;,y</tt>, opcode $b1) is where/when the indexing is applied.  This is why some people call indexed indirect X &quot;pre-indexed mode&quot;, and indirect indexed Y &quot;post-indexed&quot; mode.<br /><br />If you want me to do a little write-up like the above but for indirect indexed Y, let me know and I can.<br /><br />Also a coding practise tip in passing: I would strongly suggest you use inttypes.h typedefs for integers, i.e. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">uint16_t</tt> for an unsigned 16-bit integer (what you call <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned short</tt>.  They're fewer characters to type and allow for better cross-architecture support since not all architectures (or compilers/environments for that matter) are identical.  <a href="http://stackoverflow.com/a/384672" class="postlink">In case you think I'm kidding...</a><br /><br />P.S. -- What compiler are you using that's letting you shove new variable declarations right in the smack dab centre of your code without making an new code block (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">{ ... }</tt>)?  Awful that this is allowed.  In other words, it should really look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const unsigned short cpu::indirectY(memory* memory, ppu* ppu)<br />{<br />   unsigned short zeroPageAddress, low, high, address;<br /><br />   zeropageAddress = memory-&gt;readRAM(PC, ppu);<br />   low = memory-&gt;readRAM(zeropageAddress, ppu);<br />   zeropageAddress++;<br />   zeropageAddress &amp;= 0xFF;<br />   high = memory-&gt;readRAM(zeropageAddress, ppu) &lt;&lt; 8;<br />   address = high | low;<br />   address += Y;<br />   return address;<br />}</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Sat Aug 31, 2013 3:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dartht33bagger]]></name></author>
<updated>2013-08-31T01:45:49-07:00</updated>
<published>2013-08-31T01:45:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117296#p117296</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117296#p117296"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117296#p117296"><![CDATA[
Ok.  I sat down tonight and wrote functions to get addresses in the CPU instead of having each instruction get the address.  Could you guys check my functions out to make sure everything is right (it should be)?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//Get address functions<br />const unsigned short cpu::zeroPageX(memory* memory, ppu* ppu)<br />{<br />   unsigned short temp = memory-&gt;readRAM(PC, ppu);<br />   temp += X;<br />   temp &amp;= 0xFF;      //Wraps around<br />   return temp;<br />}<br /><br />const unsigned short cpu::zeroPageY(memory* memory, ppu* ppu)<br />{<br />   unsigned short address = memory-&gt;readRAM(PC, ppu);<br />   address += Y;<br />   address &amp;= 0xFF;<br />   return address;<br />}<br /><br />const unsigned short cpu::absolute(memory* memory, ppu* ppu)<br />{<br />   unsigned short high = memory-&gt;readRAM(PC + 1, ppu) &lt;&lt; 8;<br />   unsigned short low = memory-&gt;readRAM(PC, ppu);<br />   unsigned short address = high | low;<br />   return address;<br />}<br />   <br />const unsigned short cpu::absoluteX(memory* memory, ppu* ppu)<br />{<br />   unsigned short high = memory-&gt;readRAM(PC + 1, ppu) &lt;&lt; 8;<br />   unsigned short low = memory-&gt;readRAM(PC, ppu);<br />   unsigned short address = high | low;<br />   address += X;<br />   return address;<br />}<br /><br />const unsigned short cpu::absoluteY(memory* memory, ppu* ppu)<br />{<br />   unsigned short high = memory-&gt;readRAM(PC + 1, ppu) &lt;&lt; 8;<br />   unsigned short low = memory-&gt;readRAM(PC, ppu);<br />   unsigned short address = high | low;<br />   address += Y;<br />   return address;<br />}<br /><br />const unsigned short cpu::indirectX(memory* memory, ppu* ppu)<br />{<br />   unsigned short zeropageAddress = zeroPageX(memory, ppu);<br />   unsigned short low = memory-&gt;readRAM(zeropageAddress, ppu);<br />   zeropageAddress++;<br />   zeropageAddress &amp;= 0xFF;<br />   unsigned short high = memory-&gt;readRAM(zeropageAddress, ppu) &lt;&lt; 8;<br />   unsigned short address = high | low;<br />   return address;<br />}<br /><br />const unsigned short cpu::indirectY(memory* memory, ppu* ppu)<br />{<br />   unsigned short zeropageAddress = memory-&gt;readRAM(PC, ppu);<br />   unsigned short low = memory-&gt;readRAM(zeropageAddress, ppu);<br />   zeropageAddress++;<br />   zeropageAddress &amp;= 0xFF;<br />   unsigned short high = memory-&gt;readRAM(zeropageAddress, ppu) &lt;&lt; 8;<br />   unsigned short address = high | low;<br />   address += Y;<br />   return address;<br />}</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3779">Dartht33bagger</a> — Sat Aug 31, 2013 1:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-08-30T14:36:29-07:00</updated>
<published>2013-08-30T14:36:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117278#p117278</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117278#p117278"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117278#p117278"><![CDATA[
You've got a precedence error in your 0x91 handler; + has higher precedence than |. It's a good idea to avoid mixing bitwise and arithmetic operators without parentheses, even if you've memorized the precedence levels perfectly. Below, yours is like addr1, and addr2 shows what's being done first, whereas you want addr3, with the displacement added afterwards.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   int addr1 =  (0x01 &lt;&lt; 8) |  0xFF  + 0x01 ; // 0x0100<br />   int addr2 =  (0x01 &lt;&lt; 8) | (0xFF  + 0x01); // 0x0100<br />   int addr3 = ((0x01 &lt;&lt; 8) |  0xFF) + 0x01 ; // 0x0200</div><br />In this case, it seems simpler to just use all arithmetic operators:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">temp2 = memory-&gt;readRAM((temp1 + 1) &amp; 0xFF, ppu)*0x100 + memory-&gt;readRAM(temp1, ppu) + Y; //Gets real address</div><br />though I have to say, that expression is too verbose to read easily, especially how Y is pushed to the end almost out of sight. This makes the regularity clear and the calculation uncluttered:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int low  = memory-&gt;readRAM( (temp1 + 0) &amp; 0xFF, ppu);<br />int high = memory-&gt;readRAM( (temp1 + 1) &amp; 0xFF, ppu);<br />int addr = high*0x100 + low + Y;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Aug 30, 2013 2:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dartht33bagger]]></name></author>
<updated>2013-08-30T13:50:34-07:00</updated>
<published>2013-08-30T13:50:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117271#p117271</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117271#p117271"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117271#p117271"><![CDATA[
I've looked over another core a few weeks ago and it looked to be doing the same thing that mine does.  I'll try your dumping method though and see if I can't figure this out.<br /><br />Here are $81 and $91:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">case 0x81:   //Indirect,X store A to memory<br />         temp1 = (memory-&gt;readRAM(PC, ppu) + X) &amp; 0xFF; //Wraps around if &gt;255<br />         temp2 = (memory-&gt;readRAM((temp1 + 1) &amp; 0xFF, ppu) &lt;&lt; 8) | memory-&gt;readRAM(temp1, ppu); //Gets address<br />         memory-&gt;writeRAM(temp2, A, ppu);<br />         cycles =  6;<br />         PC++;<br />         break;<br />      case 0x91:   //Indirect,Y store A to memory<br />         temp1 = memory-&gt;readRAM(PC, ppu);         //Gets Zeropage address<br />         temp2 = ((memory-&gt;readRAM((temp1 + 1) &amp; 0xFF, ppu) &lt;&lt; 8) | memory-&gt;readRAM(temp1, ppu)) + Y; //Gets real address<br />         memory-&gt;writeRAM(temp2, A, ppu);<br />         cycles =  6;<br />         PC++;<br />         break;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3779">Dartht33bagger</a> — Fri Aug 30, 2013 1:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2013-08-30T03:36:06-07:00</updated>
<published>2013-08-30T03:36:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117255#p117255</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117255#p117255"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117255#p117255"><![CDATA[
<div class="quotetitle">Dartht33bagger wrote:</div><div class="quotecontent"><br />So I grabbed a copy of my old memory function and ran the tests again.  Now the old memory function is complaining about interrupts happening as well.  I've been able to figure out that at some point during the test, opcode $91  (indirect, Y STA) is executed.  A = $00 at this point and so $91 writes $00 to address $3A6.  Then, later on in the test, the program counter ends up at $3A6 and reads $00, which throws the break instruction.<br /><br />From what I just found it, it looks like my accumulator isn't set to the right value when opcode $91 is executed. 05-zp_xy and 06-absolute have the same results: opcode $91 sets address $3A6 to $00 which later causes a BRK instruction.<br /></div><br />The description you just gave of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sta &#40;$zp&#41;,y</tt> is wrong/makes no sense.  The contents of the accumulator have no bearing on the indirect, nor indexing, operations.<br /><br />Please provide the code you use for opcodes $81 and $91.  It's fairly easy to tell when someone has this wrong (and many people do).<br /><br />I would recommend you make your emulator halt/stop/throw some indication when BRK is executed; it's usually (99% of the time) a sign that someone has something somewhere that's broken in their 6502 core, or their mapper implementation.  Same goes for making your emulator halt/stop/etc. when an invalid opcode is executed.  Do this for now -- do not go about implementing unofficial opcodes at this point (sorry I'm repeating myself, I know I said this before), just stop the emu and dump the code around the area that induced the error (i.e. show -10 and +10 bytes disassembled around the area which broke, and all contents of registers (PC, S, A, X, Y, P, etc.)).<br /><br />Also, not to get pedantic or off track, but FYI the addressing modes are generally referred to as the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sta $12     = zero page (ex. opcode $85)<br />sta $12,x   = zero page indexed X (ex. opcode $95)<br />stx $12,y   = zero page indexed Y (ex. opcode $96)<br />sta $1234   = absolute (ex. opcode $8d)<br />sta $1234,x = absolute indexed X (ex. opcode $9d)<br />sta $1234,y = absolute indexed Y (ex. opcode $99)<br />jmp ($1234) = indirect (ex. opcode $6c)<br />sta ($12,x) = indexed indirect X (sometimes called &quot;pre-indexed X&quot;) (ex. opcode $81)<br />sta ($12),y = indirect indexed Y (sometimes called &quot;post-indexed Y&quot;) (ex. opcode $91)</div><br />IMO, I believe it's time you <a href="https://github.com/Efseykho/6502-emulator/blob/master/6502-cpu-emulator/6502/em_6502.c" class="postlink">start looking at other peoples' 6502 emulation cores</a> and comparing the code to yours.  CPU opcode testers are not able to get everything correct because they rightfully have to assume addressing modes and opcodes are implemented correctly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Aug 30, 2013 3:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dartht33bagger]]></name></author>
<updated>2013-08-30T01:21:48-07:00</updated>
<published>2013-08-30T01:21:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117252#p117252</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117252#p117252"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117252#p117252"><![CDATA[
Hmm, I never even thought of the unofficial opcodes.  They are all implemented, but I'm not sure how well they work.  They all move the program counter the right number, but that's about all I can guarantee.  Three of them fail on test 03 but that's the only test that outputs any opcodes.  The other tests that fail just complain about the BRK instruction.<br /><br />So I grabbed a copy of my old memory function and ran the tests again.  Now the old memory function is complaining about interrupts happening as well.  I've been able to figure out that at some point during the test, opcode $91  (indirect, Y STA) is executed.  A = $00 at this point and so $91 writes $00 to address $3A6.  Then, later on in the test, the program counter ends up at $3A6 and reads $00, which throws the break instruction.<br /><br />From what I just found it, it looks like my accumulator isn't set to the right value when opcode $91 is executed. 05-zp_xy and 06-absolute have the same results: opcode $91 sets address $3A6 to $00 which later causes a BRK instruction.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3779">Dartht33bagger</a> — Fri Aug 30, 2013 1:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-08-29T16:32:31-07:00</updated>
<published>2013-08-29T16:32:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117246#p117246</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117246#p117246"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117246#p117246"><![CDATA[
Treating unofficial opcodes as one-byte NOPs runs the risk of BRKing the program if a 2- or 3-byte unofficial opcode's operand is $00.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Aug 29, 2013 4:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[fred]]></name></author>
<updated>2013-08-29T16:29:00-07:00</updated>
<published>2013-08-29T16:29:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117245#p117245</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117245#p117245"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117245#p117245"><![CDATA[
Are you handling unofficial opcodes? Depending on what you do with them, I suspect they might be the culprit.<br />I tried running these tests in my emulator recently and pass some, others fail with the 'interrupts should not occur' message. My emulator fails spectacularly at unofficial opcodes, as i pretty much do nothing with them yet. Can't recall if I looked into the fail closely, but I took it as a &quot;passed officials, crashed at unofficials&quot;.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5139">fred</a> — Thu Aug 29, 2013 4:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-08-29T01:28:14-07:00</updated>
<published>2013-08-29T01:28:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117230#p117230</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117230#p117230"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117230#p117230"><![CDATA[
Binary search between the working version and this version until you find the set of code changes that broke it. Then break those changes roughly in half, if there is any independence. Repeat until you find the cause.<br /><br />It'd be slightly interesting to add a check for BRK causing the vectoring rather than unwanted IRQ, and report this differently.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Aug 29, 2013 1:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dartht33bagger]]></name></author>
<updated>2013-08-29T01:20:01-07:00</updated>
<published>2013-08-29T01:20:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117229#p117229</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117229#p117229"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117229#p117229"><![CDATA[
Thanks for all the helps guys!  I should have been using pointers from the start for mirroring - it makes it so much simpler.  I rewrote all of my memory functions that have to do with RAM so that almost everything is done through pointers now.  <br /><br />However, a new problem has arisen.  I decided to run back through Blarg's CPU tests just to make sure that my new code worked correctly, and now tests past 03 give me a message that interrupts should not happen during the tests.  For some reason, one BRK instruction is being executed per test.  In 04 - zero_page, at one point during the test the program writes $00 to $3A6.  Later on in the test, the program counter ends up at $3A6 and reads the opcode from that address.  This of course makes a BRK instruction occur.<br /><br />I'm not really sure if this from me rewriting my memory functions or from the CPU.  When I ran the tests before, tests 04-09 spit out garbage output,  so I was told that I had passed them since no opcodes showed up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3779">Dartht33bagger</a> — Thu Aug 29, 2013 1:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-08-28T23:50:48-07:00</updated>
<published>2013-08-28T23:50:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117227#p117227</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117227#p117227"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117227#p117227"><![CDATA[
Yep, and the cool thing is that the compiler will do all the optimizations tokumaru mentioned: masking the address, checking that it's in the $2000-$2007 range, then using either a binary search or jump table, depending on which is most efficient. Further, this kind of masking them compare is actually closest to how the hardware does it; the upper 3 address lines are decoded ('138?) then the lower 3 are used to select the register.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">switch ( Address &amp; 0xE007 ) {<br />case 0x2000: ... // handles all mirrors, e.g. 0x2008, 0x2010... 0x3F80<br />case 0x2001: ...<br />...<br />case 0x2007: ...<br />}</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Aug 28, 2013 11:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[HardWareMan]]></name></author>
<updated>2013-08-28T22:28:48-07:00</updated>
<published>2013-08-28T22:28:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117225#p117225</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117225#p117225"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117225#p117225"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />The PPU registers are mirrored all the way from $2000 to $3FFF. This means that writing to $2008 (for example) is the same as writing to $2000, so you shouldn't check for the exact addresses in your switch. Instead, check whether the address being accessed is in the $2000-$3FFF range, then discard all bits of the address except the first 3, which you can use to select a register (0 to 7).<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">case (Address &amp; 0xE007)</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=2016">HardWareMan</a> — Wed Aug 28, 2013 10:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-08-28T15:44:48-07:00</updated>
<published>2013-08-28T15:44:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117209#p117209</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117209#p117209"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117209#p117209"><![CDATA[
The PPU registers are mirrored all the way from $2000 to $3FFF. This means that writing to $2008 (for example) is the same as writing to $2000, so you shouldn't check for the exact addresses in your switch. Instead, check whether the address being accessed is in the $2000-$3FFF range, then discard all bits of the address except the first 3, which you can use to select a register (0 to 7).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Aug 28, 2013 3:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2013-08-28T14:01:49-07:00</updated>
<published>2013-08-28T14:01:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117202#p117202</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117202#p117202"/>
<title type="html"><![CDATA[Re: Need some help with the PPU]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10351&amp;p=117202#p117202"><![CDATA[
Comment in passing (have much to do today, sorry) -- thumbs up to using pointers for the mirroring.  That's absolutely the proper way to do it, ditto with a large amount of mapper implementation (PRG/CHR page selection).  If I see <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">memcpy&#40;&#41;</tt> I will stab.  ;-)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Wed Aug 28, 2013 2:01 pm</p><hr />
]]></content>
</entry>
</feed>