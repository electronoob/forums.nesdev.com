<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=678" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2005-10-24T07:57:50-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=678</id>
<entry>
<author><name><![CDATA[Roth]]></name></author>
<updated>2005-10-24T07:57:50-07:00</updated>
<published>2005-10-24T07:57:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5808#p5808</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5808#p5808"/>
<title type="html"><![CDATA[Subroutines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5808#p5808"><![CDATA[
Thanks for the responses guys.  It's given me some stuff to think about and work with.  After Disch posted the tip about looping, I started actually realizing how many loops are in various game sources.  It made me wonder how I should break out of a loop, so I just started working with branching.  My first test on it when really well, and came out exactly like I thought it would when entering the code in.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   .ORG $8000<br />   <br />   LDX #$02<br /><br />   STX $01<br />   <br />testit:<br />   DEX<br />   BEQ testmore<br />   JMP testit<br />   <br />skipthis:            <br />   LDA #$50 <br />   STA $30<br />   <br />testmore:<br />   LDY #$30<br />   STY $10<br />   BRK</div><br /><br />Just a Branch On Zero... a simple test, but it worked like I wanted it too <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  I'm going to start learning more of these branching techniques and figure out how to manipulate all these commands... should be frustratingly fun <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />Thanks for the insight on the BRK command with the simulator Tokumaru!  That really helps alot being able to halt the program in various places so I can check out what's going on with the flags and the like.  You guys have been really helpful just with those two posts.  I still have ALOT to experiment with (the entire language <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> ), but now I don't feel as frustrated... funny how the most simple things can make something pop in your mind and you look differently at something.  Thanks tons guys!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=174">Roth</a> — Mon Oct 24, 2005 7:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2005-10-21T22:56:25-07:00</updated>
<published>2005-10-21T22:56:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5744#p5744</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5744#p5744"/>
<title type="html"><![CDATA[Subroutines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5744#p5744"><![CDATA[
Well, in the simulator you have two options:<br />1. Use the BRK opcode to tell the simulator the program should end;<br />2. Make an infinite loop as Disch said;<br /><br />The first option is cleaner for testing purposes, but option 2 is more realistic when it comes to game programming. A game is usually divided in parts, wich are usually loops, that jump to each other and will never leak to the subroutines. There is for example, the title screen loop, the character selection loop, the main engine loop, etc. Since they are all loops, the program will never get out of these loops unless you explicitally tell it to (by calling the subroutines, for example).<br /><br />As for the stack, it is used to store the returning address of the subroutine. From your code, I can see you understand the concept of subroutines: you jump to the routine; when it's finished you jump BACK. But where exactly is "back"? The processor knows where to return to because it stored the return address when you called the subroutine. Then, when later you used RTS the CPU took that address from the stack and jumped to it, effectivelly returning to where it left off.<br /><br />The stack MAY also be used for passing parameters to the routines, but that is by no means mandatory. In your code, you stored the numbers in a specific location. Then the subroutine read those numbers and added them, that works just fine. But sometimes you may have recursive subroutines, where you call a subroutine from inside itself. Then you can't use absolute variable locations anymore, since that will destroy previously calculated values as you go deeper and deeper in the function. Thus, you use the stack to pass the parameters and they will never be overwritten (actually not "never", they will if you go over the stack limit). This is how functions work in high level languages. If you have never heard about that before don't worry, you aren't likely to need it anyway. =) But if you're interested, just ask more!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Oct 21, 2005 10:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-10-21T09:29:54-07:00</updated>
<published>2005-10-21T09:29:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5724#p5724</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5724#p5724"/>
<title type="html"><![CDATA[Re: Subroutines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5724#p5724"><![CDATA[
<div class="quotetitle">Roth wrote:</div><div class="quotecontent"><br />When I look at the Command Log, it shows that after jumping back from the subroutine, that it loads the #$50 into X, then it runs through the subroutine again.<br /></div><br /><br />This is because the instruction after LDX #$50 is the start of the subroutine.  Code does NOT stop when it reaches a label... labels are non-existant when the code is executing, they're just there for your reference.<br /><br />If you want the code to stop without crashing and burning, you could drive it into an infinite loop:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  .ORG $8000<br /><br />  LDX #$40<br />  JSR testit<br />  LDX #$50   ;after this line is executed, the code will go right into<br />             ; the next line.  Regardless of whether or not a label is there<br /><br />InfiniteLoop:<br />  JMP InfiniteLoop   ;  This is the next line of code, so this will be done<br />                     ;after that above LDX.  This will perform an infinite loop by<br />                     ;repeatedly jumping to the same point<br /><br />testit:<br />  CLC<br />  CLD<br />  ADC #$10<br />  RTS<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Fri Oct 21, 2005 9:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Roth]]></name></author>
<updated>2005-10-21T09:13:36-07:00</updated>
<published>2005-10-21T09:13:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5722#p5722</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5722#p5722"/>
<title type="html"><![CDATA[Subroutines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=678&amp;p=5722#p5722"><![CDATA[
Since tokumaru posted that link to the 6502 Simulator, I've been able to actually try some of this basic stuff that I've been reading.... and I mean VERY basic.  I'm pretty much just trying to learn my way around the 6502 right now.  Something that bugs me is the concept of subroutines.  I've been thinking of them in terms of functions, but I'm not sure if that's the correct way to think of them.  I thought maybe it was something you could call on when needed.  Anyway, I've been fiddling with the simulator, and did this (this isn't supposed to make sense):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   .ORG $8000<br />   <br />   LDX #$40<br />   STX $01<br />   LDA #$30<br />   STA $02<br />   LDY #$20<br />   STY $03<br />   JSR testit<br />   LDX #$50<br /><br />testit:<br />   CLC<br />   CLD<br />   LDA $02<br />   ADC $03<br />   STA $04<br />   RTS</div><br /><br />When I look at the Command Log, it shows that after jumping back from the subroutine, that it loads the #$50 into X, then it runs through the subroutine again.  I'm not sure how I would get it to skip over the subroutine, or if I should be housing it somewhere else in the code so it won't read unless called upon...<br /><br />Also, in my book it says something about the stack is used by subroutines... but I can't understand what it means.  When I look at the Register window in the simulator, the stack is filled with 00 all across the board.  Any tips would be appreciated.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=174">Roth</a> — Fri Oct 21, 2005 9:13 am</p><hr />
]]></content>
</entry>
</feed>