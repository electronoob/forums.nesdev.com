<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=8210" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-10-14T08:33:09-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=8210</id>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-10-14T08:33:09-07:00</updated>
<published>2011-10-14T08:33:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85051#p85051</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85051#p85051"/>
<title type="html"><![CDATA[Using the stack to avoid using a register]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85051#p85051"><![CDATA[
I get what you're saying. That's only the case if the buffer is very near overflowing into something useful, right?<br /><br />For instance I'm using $0100-$017F of the stack for attribute byte mirrors and I allocate 0180-01C0 to some buffer? I'm glad you said something because, you're right, if the interrupt happened when I was writing there it would have messed up some attributes and would have taken me a while to catch why. <br /><br />I now plan to do like $0184-$01C4 and of course set and restore the stack pointer very carefully. I should have enough space for what I'm doing with wiggle room between them for the return bytes left on the stack. Is there anything else I should know?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Fri Oct 14, 2011 8:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-10-14T06:03:20-07:00</updated>
<published>2011-10-14T06:03:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85038#p85038</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85038#p85038"/>
<title type="html"><![CDATA[Using the stack to avoid using a register]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85038#p85038"><![CDATA[
I guess that the interesting thing about using part of page 1 for update buffers is that you can access them using stack operations. That helps a lot, because decoding map data for example requires significant use of the index registers, so having both of them available is certainly helpful.<br /><br />You have to be careful though, in case an interrupt happens while you're writing to these buffers... For example, if you are about to write the last byte of a row of tiles and an NMI happens, that will write 3 bytes to the buffer, possibly corrupting 2 bytes of whatever comes after (or before, depending on how you look at it) it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Oct 14, 2011 6:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-10-14T04:40:22-07:00</updated>
<published>2011-10-14T04:40:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85037#p85037</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85037#p85037"/>
<title type="html"><![CDATA[Using the stack to avoid using a register]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8210&amp;p=85037#p85037"><![CDATA[
Maybe I'm late to the party, but I only just thought of this. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda &#91;dress4&#93;,y;Get 16x16's number<br />   <br />   sta attribpalette,x<br />   inx<br />   <br />   dec reserved1;If this is the last 16x16 tile to update<br />   beq scrollxpalettes.end;branch<br /></div><br /><br />can become<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda &#91;dress4&#93;,y;Get 16x16's number<br />   <br />   pha<br />   <br />   dex reserved1;If this is the last 16x16 tile to update<br />   beq scrollxpalettes.end;branch<br /></div><br />It saves 7 cycles if attribpalette is not zero page. dec becomes dex because that register is freed for 3 cycles, 2 cycles for no inx, and 2 cycles because pha is faster than absolute,x.<br /><br />Naturally you have to save and restore the position of the stack pointer before you start, and go through the data backwards if you also want to read it from the stack, but... just. Ugh. Don't know why I hadn't thought of it sooner. <br /><br />I guess I'm posting in case anyone else never thought of it. I am thoroughly upset, because I'd need to rewrite everything to take advantage of this and there are so many places in my code where it's useful.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Fri Oct 14, 2011 4:40 am</p><hr />
]]></content>
</entry>
</feed>