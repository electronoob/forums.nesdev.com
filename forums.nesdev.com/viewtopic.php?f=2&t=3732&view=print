<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Simple switch trick</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Simple switch trick</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3732">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3732</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Nov 24, 2007 11:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Simple switch trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wonder something about the simple switch trick on the 6502. As simple switches can be slightly annoying to code in assembly, a trick is to use the CMP instruction to skip what would be the "else" statement in C :
<br />For example, let's do a piece of code  which eturns 01 if the thing to test is positive, and $02 else. The "clean" way to do it is :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;lda something_to_test<br />&nbsp;bmi _else<br />&nbsp;lda #$01<br />&nbsp;jmp _endif<br />_else<br />&nbsp;lda #$02<br />_endif<br />&nbsp;rts</div><br />However, doing it in a trickier way in order to save 2 bytes and one label (labels are annoying to define), the trick way is to do that.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;lda something_to_test<br />&nbsp;bmi _else<br />&nbsp;lda #$01<br />&nbsp;.db $cd &#40;cmp $xxxx opcode&#41;<br />_else<br />&nbsp;lda #$02<br />&nbsp;rts</div>
<br />
<br />Now what I have been wondering if that the cmp instruction does a dummy read to somewhere. There is nothign bad about it, exept if the read accidentally $2002 or $2007, or one of their numerous mirrors (for example reading $38a7 would also read $2007). In that case the results could be catastrophic, as the screen would be gabraged.
<br />
<br />Since the next instruction (to skip) is always a two byte instruction, the one performing this trick has to be very carefull about the argument of the two byte instruction in question. If the argument is included between $20 and $3f, he has to become carefull. Something as innocent as sta $20 for example would in fact read $2085 (mirror $2005) which normally have no effect, but I'd still avoid reading it. Luckily, no two byte instruction has $7 or $e as their last nyble of their opcode, making reading accidentally $2007 technically impossible (maybe I missed one tough). But something like ldx $20 would read $20a2 (so $2002) and this could possibly affect the PPU during rendering.
<br />Am I correct to worry about such things or am I imaginating things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Nov 24, 2007 11:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Reading 2002 would clear the vblank flag, that's about it.  I bet reading joystick input would have a much greater effect, but usually joystick reading is done all at once.
<br />That's pretty cool, I hadn't thought of that trick.  It works much better on the Z80, since you can just use a conditional jump with an opposite condition.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Nov 24, 2007 12:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Simple switch trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">(labels are annoying to define)</div>
<br />
<br />Which is exactly why I can't live without nameless (or at least local) labels anymore.  Having to give unique names to every single label regardless of how minor it is just isn't practical.
<br />
<br />Anyway your trick is pretty clever.  This kind of thing can lead to really hard to read code, though, as well as problems like undesirable reads (like you mention)
<br />
<br />
<br />Either/or checks like this can usually be done pretty simply by returning the C flag state rather than setting A.  From there you can use C in some calculations to get the desired value of A -- or perhaps use a LUT if calculations would be impractical.
<br />
<br />How I would probably approach that same situation:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA something_to_test<br />&nbsp; CLC<br />&nbsp; BPL :+<br />&nbsp; &nbsp; SEC<br />: LDA #$00<br />&nbsp; ADC #$01<br />&nbsp; RTS<br /></div><br /><br />Of course since you're checking a single bit position this could be optimized further without needing any branches:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA something_to_test<br />&nbsp; ASL A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; move N to C<br />&nbsp; LDA #$02<br />&nbsp; SBC #$00<br />&nbsp; RTS<br /></div><br /><br />But these methods probably aren't practical in most real world situations.  In which case I would probably lean towards the use of a LUT:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">mylut:<br />&nbsp; .db $01, $02<br /><br />myroutine:<br />&nbsp; LDX #$00<br />&nbsp; LDA something_to_test<br />&nbsp; BPL :+<br />&nbsp; &nbsp; INX<br />: LDA mylut,X<br />&nbsp; RTS<br /></div>
<br />
<br />Granted... this isn't quite as compact as your trick.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Nov 24, 2007 2:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Unnames labels rock, exept for switches as shown as above because they have to be nested and that becomes a headache. Finding label's name can be a headache as well. However, unnamed labels really REALLY rock for loops, where they are never nested (they are hierarchised instead).
<br />
<br />Yes, in the case of the $01/$02 switch there is plenty of way to do this, but you may want to read two different variables instead of just switching between two constants (I actually do this in my current project's game engine). In that case you don't do it just with the carry. And that may not be a routine that returns a value, as shown in the example, but a piece of code directly using the constant (or variables) for actual computing.
<br />
<br />Reading the controller could have some effect, but I don't think it would be so bad, anyways.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Nov 30, 2007 7:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was just viewing SMB's disassembly, and it actually does this trick!
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Bridge_High:<br />&nbsp; &nbsp; &nbsp; lda #$06&nbsp; ;start on the seventh row from top of screen<br />&nbsp; &nbsp; &nbsp; .db $2c&nbsp; &nbsp;;BIT instruction opcode<br /><br />Bridge_Middle:<br />&nbsp; &nbsp; &nbsp; lda #$07&nbsp; ;start on the eighth row<br />&nbsp; &nbsp; &nbsp; .db $2c&nbsp; &nbsp;;BIT instruction opcode<br /><br />Bridge_Low:<br />&nbsp; &nbsp; &nbsp; lda #$09&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;start on the tenth row<br /></div>
<br />
<br />waddaya know!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Nov 30, 2007 10:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's a pretty common technique on other processors too. You basically want a one-byte branch instruction, so you use a multi-byte instruction which has a benign effect. There are all those two-byte and three-byte unofficial NOPs on the NES that I know Lolo 3 uses one of, though they probably do some kind of memory access. If the 6502 didn't pointlessly set the flags for lda #, you could do this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; cmp ...<br />&nbsp; &nbsp; lda #value1<br />&nbsp; &nbsp; b... skip<br />&nbsp; &nbsp; lda #value2<br />skip:</div><br />This works if your branch is based on the C or V flags, since lda # doesn't affect them. You could also use X or Y as a workaround:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ldx #value1<br />&nbsp; &nbsp; cmp ...<br />&nbsp; &nbsp; b... skip<br />&nbsp; &nbsp; ldx #value2<br />skip:<br />&nbsp; &nbsp; txa ; if even necessary</div>
<br />It would be interesting to check all the unofficial NOPs in case there's one that doesn't do any extra memory accesses.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>