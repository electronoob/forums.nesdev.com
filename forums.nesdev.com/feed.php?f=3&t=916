<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=916" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-01-08T07:38:38-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=916</id>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2006-01-08T07:38:38-07:00</updated>
<published>2006-01-08T07:38:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8042#p8042</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8042#p8042"/>
<title type="html"><![CDATA[question about sprite dma]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8042#p8042"><![CDATA[
owadays (in today's computers) DMA allows direct access to memory without needing to interrupt what the CPU is doing.  This requires the CPU to be able to execute without having to go to memory - as soon as the CPU needs to access memory, it must halt until any pending DMA action is completed.  Since today's CPUs have caches, it does not need to access physical memory all the time, thus causing the data bus to be free for periods of time.  It is during these free periods that a DMA can be accomplished without halting the CPU.<br /><br />The NES's CPU performs a physical memory access on EVERY clock cycle.  Therefore, DMA will always halt the CPU.  However, the benefit of DMA still exists in the sense that time is saved - performing 256 LDA/STA instruction pairs takes much longer than performing sprite DMA.<p>Statistics: Posted by Guest — Sun Jan 08, 2006 7:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-01-08T02:13:24-07:00</updated>
<published>2006-01-08T02:13:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8040#p8040</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8040#p8040"/>
<title type="html"><![CDATA[question about sprite dma]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8040#p8040"><![CDATA[
So it's really just a memcpy(). It takes 1 cycle to let the CPU bus clear out and then 256 read-write pairs. Well at least Nintendo's being consistent, as what is called "DMA" on the Game Boy Advance is just a memcpy() as well.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jan 08, 2006 2:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anes]]></name></author>
<updated>2006-01-07T21:33:32-07:00</updated>
<published>2006-01-07T21:33:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8037#p8037</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8037#p8037"/>
<title type="html"><![CDATA[question about sprite dma]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8037#p8037"><![CDATA[
thanks!! now Battletoads runs. It seems the ppu needed those DMA Cycles.<br />I freeze everything else when DMA is "ON", but i steel have doubts about this.<br />I dont know to much of computer's DMA but i heard that is done to let the cpu work while another device is accessing memory. Maybe this dont apply to NES, but if the docs says that takes an amount of cpu cycles it should be that freezes CPU.<br /><br />ANES: Battletoads READY  <img src="http://forums.nesdev.com/images/smilies/icon_cool.gif" alt="8)" title="Cool" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=72">Anes</a> — Sat Jan 07, 2006 9:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-01-07T20:08:35-07:00</updated>
<published>2006-01-07T20:08:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8035#p8035</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8035#p8035"/>
<title type="html"><![CDATA[question about sprite dma]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8035#p8035"><![CDATA[
That was me -- keep getting logged out<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sat Jan 07, 2006 8:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2006-01-07T20:04:45-07:00</updated>
<published>2006-01-07T20:04:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8034#p8034</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8034#p8034"/>
<title type="html"><![CDATA[Re: question about sprite dma]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8034#p8034"><![CDATA[
<div class="quotetitle">Anes wrote:</div><div class="quotecontent"><br />Im still have doubts of how spirte dma is acomplished, i mean i know that writting to 4014 is the "hi" byte and that $2003 is the "low" byte wich forms a 16 value and transefers from that location in cpu ram to the 256 bytes sprite ram.<br /></div><br /><br />I'm not sure this is right -- as there are some games which write 0 to $2003, write to $2004 (making $2003=01) then do DMA from there.  If you offset by that 1 when DMA'ing the sprites get all jarbled.<br /><br />I'm currently just doing DMA from HH00 (where HH is the value written to $4014) -- although I'm not sure that's entirely correct.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />But i have been reading that this whole process takes 512 cpu cc<br /></div><br /><br />513.  There seems to be a dummy cycle in there somewhere.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />does dma stop the cpu fetch-decode-execute?<br /></div><br /><br />Yes.  CPU is effectively frozen for the 513 CPU cycles it takes to DMA.  PPU, APU and everything else continue normally.<br /><br />If you're doing the typical method of emulation where you have a timestamp for each system (CPU/APU/PPU etc) to sync them up -- this can   easily be simulated by just adding 513 to the CPU timestamp on DMA.<p>Statistics: Posted by Guest — Sat Jan 07, 2006 8:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anes]]></name></author>
<updated>2006-01-07T19:52:58-07:00</updated>
<published>2006-01-07T19:52:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8033#p8033</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8033#p8033"/>
<title type="html"><![CDATA[question about sprite dma]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=916&amp;p=8033#p8033"><![CDATA[
Im still have doubts of how spirte dma is acomplished, i mean i know that writting to 4014 is the "hi" byte and that $2003 is the "low" byte wich forms a 16 value and transefers from that location in cpu ram to the 256 bytes sprite ram.<br /><br />But i have been reading that this whole process takes 512 cpu cc, so what is convinient, to copy directly all 256 bytes to sprram from the location "HHLL" or if it takes 512 cpu cc, use them to copy BYTE per BYTE to spr-ram, increse sprram addr and continue copying until byte 256th is copied.<br /><br />Some questions: does dma stop the cpu fetch-decode-execute?, if dma is currently "copying" bytes to spr-ram.. does those cycles are taken part of ppu emulation, i mean 512cpu cc * 3 ppu cc must be executed? of course not 512 * 3 what it takes every process of reading and writing that i think thats why are 512 cc.<br /><br />Thanks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=72">Anes</a> — Sat Jan 07, 2006 7:52 pm</p><hr />
]]></content>
</entry>
</feed>