<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=5192" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-05-22T12:38:41-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=5192</id>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-05-22T12:38:41-07:00</updated>
<published>2009-05-22T12:38:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47179#p47179</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47179#p47179"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47179#p47179"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Now you're thinking with balloons on your back. Good job.<br /></div><br /><br />It's funny you say that, because all this talk of velocity was totally making me think of Balloon Fight!<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />With this code, you hit a hard ceiling when you let go. I'd just increase gravity if the player is jumping and moving upward and the jump button is not held. But then I'm biased toward physics like those of Super Mario Bros. because it was the second video game I ever played on an NES (after Duck Hunt)<br /></div><br /><br />I'm also kind of biased to SMB1's jump mechanic. I think most other people would be too, so I think I'll try and make my mechanic similar.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />We just disagree on what comes next.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I initialize the VelocityY with a value of -2.5, and the gravity adds .14 to that value every frame. Since VelocityY gets added to PlayerY every frame, that means -2.5 gets added one frame, -2.36 gets added the next, -2.22 the next, -2.08, etc.<br /></div><br /><br />OK, but then the instant you release the button the player stops rising. Sounds weird to me, because I can't remember of any games working like this (no matter the current speed, releasing the button just acts like hitting an invisible ceiling or something? Seems weird!). I'm more familiar with inertia, i.e. after applying the force, you have to wait for it to "wear off", you can't suddenly cut it. </div><br /><br />I agree, and I'm going to take care of this. But it's actually not as bad as it would seem as is. Though by fixing the issue, I'm making the jump mechanic better, and that's really important to do.<br /><br />Your suggestion about the counter is interesting... But I think what I'm going to do is upon the jump button being released, if the current Y velocity is less than something like -.6, force it to equal -.6. If it's greater than -.6, just do nothing. This will make the player still rise up a little after releasing the button.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />You were perfectly clear, I hope I have too this time.<br /></div><br /><br />Yes, I understood everything you said.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Take a look at the "Sonic 3 and Knuckles Glitches and Oversights" series on YouTube.<br /></div><br /><br />Those are actually really bad glitches! It just goes to show that you really have to think of all possibilities when programming a game. I really hate glitches that happen because something's not on screen. But when the player no longer has control of Sonic, that's unacceptable.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I'm pretty sure that has something to do with lack of memory to keep track of which items have been destroyed. SMB3 doesn't have this problem, but then it has 8 KB PRG RAM.<br /></div><br /><br />Even if you go back to an area and the enemies are alive, it's better than an enemy infinitely respawning and walking on screen. That sort of glitch is avoidable. I say enemies can spawn as soon as they come half a screen beyond the edge of the screen. Then they should remain "inactive" until they are at the edge of the screen. That way, the player will have to walk almost 128 pixels in that direction in order for it to start doing anything, so that by the time you kill it, you are probably past the point at which it would respawn. Though that's just a quick improvement (not a fix).<br /><br />I will probably take the time to make sure this problem does not occur in my game. All it takes is one bit for each object. Though this could take up a lot of RAM if you have a ton of objects.<br /><br /><div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent"><br />Just a question: would it be wise to have two hitboxes per object: one for floors, ceils, wall etc. that never resize and another one for collision with object that can resize and another one, normally smaller than the first one, that can resize depending of the velocity and such?<br /></div><br /><br />Hmm, I'm not sure about that. I can't really see the advantage of having one that you can't change the size of, but maybe I'm not thinking clearly. If you could find a way to have a hit polygon that isn't square then you could eliminate a ton of problems.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri May 22, 2009 12:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2009-05-22T06:34:25-07:00</updated>
<published>2009-05-22T06:34:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47154#p47154</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47154#p47154"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47154#p47154"><![CDATA[
Just a question: would it be wise to have two hitboxes per object: one for floors, ceils, wall etc. that never resize and another one for collision with object that can resize and another one, normally smaller than the first one, that can resize depending of the velocity and such?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Fri May 22, 2009 6:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-05-22T05:27:08-07:00</updated>
<published>2009-05-22T05:14:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47151#p47151</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47151#p47151"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47151#p47151"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />I'm sorry, I don't quite get what you mean by this... Why would you be decreasing the velocity?<br /></div><br />Because negative velocities move the player up, and we want the possibility to have the player go higher.<br /><br />We have similar ideas, but while I'm thinking of extending the jump, you are thinking of cutting it short. I'll try to explain as I go along.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Player.YCoord = Player.YCoord + Player.VelocityY<br /><br />And also every frame, gravity does this:<br /><br />#DEFINE Gravity 0.14<br /><br />Player.VelocityY = Player.VelocityY + Gravity<br /></div><br />That's perfect.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />However, when the player jumps, assuming the player is allowed to jump, here's what I do:<br /><br />Player.VelocityY = -2.5<br /></div><br />Great, we're on the same page. We just disagree on what comes next.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I initialize the VelocityY with a value of -2.5, and the gravity adds .14 to that value every frame. Since VelocityY gets added to PlayerY every frame, that means -2.5 gets added one frame, -2.36 gets added the next, -2.22 the next, -2.08, etc.<br /></div><br />OK, but then the instant you release the button the player stops rising. Sounds weird to me, because I can't remember of any games working like this (no matter the current speed, releasing the button just acts like hitting an invisible ceiling or something? Seems weird!). I'm more familiar with inertia, i.e. after applying the force, you have to wait for it to "wear off", you can't suddenly cut it.<br /><br />My suggestion is basically this: once the jump officially starts, as well as setting Player.VelocityY to -2.5, you initialize a counter to, say, 16 (notice that I just got this number out of my ass, you'd have to test in order to find a good value). Then every frame, as well as adding the gravity to the velocity you will decrement this counter, and as long as it's &gt; 0 and the jump button is still pressed, you add, say, -.10 (out of my ass, find a good value) to prevent gravity from working too quickly too soon.<br /><br />Pseudo code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//Counter was already initialized and the player is in &quot;jumping&quot; state<br /><br />Player.VelocityY = Player.VelocityY + Gravity<br /><br />Counter = Counter - 1<br /><br />if JumpButtonPressed and &#40;Counter &gt; 0&#41; and Player.Jumping then<br />   Player.VelocityY = Player.VelocityY - 0.10<br />end if<br /><br />Player.YCoord = Player.YCoord + Player.VelocityY</div><br /><br />That way, after the initial velocity of -2.5 has been set, it will change into -2.36 the next frame, but if you do the above, it will move back to -2.46, and so on. The player will be able to "hold gravity back" for up to 16 (the value put into the counter) frames, thus making the jump higher. What he does with the button (keep it pressed or release it) after those 16 frames doesn't matter, the character will still rise until gravity has the velocity go over 0 and it starts falling. This should look and feel more natural than suddenly cutting off all vertical velocity.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Sorry if this isn't making any sense, or if I just explained the obvious, or if the above is just a bunch of crap text for any reason at all =).<br /></div><br />You were perfectly clear, I hope I have too this time.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Just hope for the best, like you said. But it's important to still recognize these problems/glitches, as one day you could realize that they are the reason your program isn't working the way you expected.<br /></div><br />Take a look at the <strong>"Sonic 3 and Knuckles Glitches and Oversights"</strong> series on YouTube. The videos are very interesting from a programming point of view, as we programmers can in many cases tell what went wrong, and be prepared to avoid similar glitches in our own programs.<br /><br /><a href="http://www.youtube.com/watch?v=XEOsmMOc_BA&amp;fmt=18" class="postlink">http://www.youtube.com/watch?v=XEOsmMOc_BA&amp;fmt=18</a><br /><a href="http://www.youtube.com/watch?v=zJ5LsMeL0g8&amp;fmt=18" class="postlink">http://www.youtube.com/watch?v=zJ5LsMeL0g8&amp;fmt=18</a><br /><a href="http://www.youtube.com/watch?v=us93F4qvSVQ&amp;fmt=18" class="postlink">http://www.youtube.com/watch?v=us93F4qvSVQ&amp;fmt=18</a><br /><a href="http://www.youtube.com/watch?v=TxxmbcxNorA&amp;fmt=18" class="postlink">http://www.youtube.com/watch?v=TxxmbcxNorA&amp;fmt=18</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri May 22, 2009 5:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-05-22T04:47:25-07:00</updated>
<published>2009-05-22T04:47:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47150#p47150</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47150#p47150"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47150#p47150"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />I didn't think a linear increase of velocity would suffice for gravity<br /></div><br />That's how it works in real life, at least at the classical scale we're familiar with.<br />g = dv/dt<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I was thinking at first of multiplying velocity by like 1.1 or something every frame<br /></div><br />Multiplying velocity by a value just below 1 is good to simulate wind resistance, and it can be done with a few shifts and two adds.<br />dy -= dy &gt;&gt; 4; dx -= dx &gt;&gt; 4<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So I've taken some advice from what I've read and there each object will be "displaced" based on it's velocity. Of course, velocity is signed and has more precision than just integer values (for example, velocity can be 1.235 instead of just 1 or 2). So if an object has no velocity, it won't move. If it has velocity, it does move. Simple as that.<br /></div><br />Now you're thinking with balloons on your back. Good job.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Then I don't want the player to not have control on how high they jump, so I think I can do the following to implement some control on how high they jump:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">If Player.Jumping = True Then<br />   If Player.VelocityY &lt; 0 Then<br />      If Controller.JumpButton = NotPressed Then<br />         Player.VelocityY = 0<br />         Player.Jumping = False<br />      End If<br />   End If<br />End If<br /></div><br /></div><br />With this code, you hit a hard ceiling when you let go. I'd just increase gravity if the player is jumping and moving upward and the jump button is not held. But then I'm biased toward physics like those of Super Mario Bros. because it was the second video game I ever played on an NES (after Duck Hunt).<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />For collisions I guess I just avoid making collision boxes too small. If they are never smaller than the maximum displacement for objects, you're not likely to miss a hit unless both objects are moving at the maximum speed, but how often does that happen?<br /></div><br />Imagine a head-on collision between a hedgehog running in one direction and an echidna running in the other. The "correct" solution is to extend hitboxes by the velocity of the associated object, and then use some post-processing step to reject false corner strikes.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />I'm sorry, I don't quite get what you mean by this... Why would you be decreasing the velocity?<br /></div><br />Possibly speaking relative to another quadrant. Some games operate in quadrant I (increasing Y is higher); others operate in quadrant IV (increasing Y is lower).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Nothing gets on my nerves more than enemies CONSTANTLY respawning (It makes me want to kill someone when some dumbass enemy keeps walking on screen even though I've killed it 1000 times =).)<br /></div><br />I'm pretty sure that has something to do with lack of memory to keep track of which items have been destroyed. SMB3 doesn't have this problem, but then it has 8 KB PRG RAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri May 22, 2009 4:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-05-22T01:44:03-07:00</updated>
<published>2009-05-22T01:44:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47144#p47144</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47144#p47144"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47144#p47144"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I suggested stopping decreasing the velocity when the button is released (so that the player stays in the air for a while after the button is released, until gravity manages to invert the sign of the velocity).<br /></div><br /><br />I'm sorry, I don't quite get what you mean by this... Why would you be decreasing the velocity? Perhaps I'm executing the idea of velocity differently, or I'm just not seeing something. But I do agree that I should probably not immediately let the character drop, but let the character stay in air for a little while. Basically here's what happens. Every frame, this happens:<br /><br />Player.YCoord = Player.YCoord + Player.VelocityY<br /><br />And also every frame, gravity does this:<br /><br />#DEFINE Gravity 0.14<br /><br />Player.VelocityY = Player.VelocityY + Gravity<br /><br />That happens every single frame. It's okay to do this even when standing on the ground, because when any of the player's bounding box borders collide with a solid tile, the velocity for the corresponding axis is set to 0. So if the top or bottom border of the player's bounding box collides with a solid tile, Player.VelocityY is set to equal 0. If the left or right border collides with something solid, Player.VelocityX is set to equal 0. So if the player is just standing still on a solid tile, the gravity routine will just add .14 (or something similar) to the Y Velocity, that will get added to the Y coordinate, and the player will be pulled down into the solid tile the player is standing on, which then they will get pushed out of and the Velocity Y will be set again to 0. Well, that whole bit is rather unimportant, I guess.<br /><br />However, when the player jumps, assuming the player is allowed to jump, here's what I do:<br /><br />Player.VelocityY = -2.5<br /><br />I initialize the VelocityY with a value of -2.5, and the gravity adds .14 to that value every frame. Since VelocityY gets added to PlayerY every frame, that means -2.5 gets added one frame, -2.36 gets added the next, -2.22 the next, -2.08, etc. So the velocity is constantly increasing from gravity's pull, which means it's decreasing the Y coordinate by less and less each frame, thus slowing to the peak of the jump. However, if the player lets go of the jump button, I'll just zero out Player.VelocityY to make the player start falling again (though like I said, I'm reconsidering now that you mention it). And actually, the player does remain suspended in the air for a little while even as is, as it takes a moment for the gravity to accelerate. I didn't really notice anything too bad with this mechanic, but it could be improved if I didn't make the player immediately start falling. I could instead of making the value 0 when the button is released just make it something like -.7 so that there's still a little more rising time after the button is released.<br /><br />Sorry if this isn't making any sense, or if I just explained the obvious, or if the above is just a bunch of crap text for any reason at all =).<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />But you are right, it's not such a big deal. I still update X first and hope for the best.<br /></div><br /><br />I guess there does come a point where it's just not going to be good/accurate enough, and you have to give in and say "well then that's too damn bad". And it's not a big deal. the most annoying thing about old school games definitely isn't bad collision detection (that's more of an early PS1 3D problem). Nothing gets on my nerves more than enemies CONSTANTLY respawning (It makes me want to kill someone when some dumbass enemy keeps walking on screen even though I've killed it 1000 times =).)<br /><br />And I suppose it goes the same way for sprite-on-sprite. Just hope for the best, like you said. But it's important to still recognize these problems/glitches, as one day you could realize that they are the reason your program isn't working the way you expected.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri May 22, 2009 1:44 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-05-21T23:24:34-07:00</updated>
<published>2009-05-21T23:24:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47137#p47137</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47137#p47137"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47137#p47137"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />Sorry, I kind of meant what you said.<br /></div><br />I don't think so... =) You suggested zeroing the velocity when the button is released (so that the player falls immediately), I suggested stopping decreasing the velocity when the button is released (so that the player stays in the air for a while after the button is released, until gravity manages to invert the sign of the velocity). I haven't tried that yet, so you have to see what works best. I don't think I've seen many games that have the player fall immediately though.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And about the collision stuff; I never thought about that kind of case! I think it's probably better to do X first, like you said, otherwise the player will get pissed from not making a jump and colliding horizontally with the edge or something like that.<br /></div><br />Yeah, it makes sense to handle X first because of that exemple, but look at this one:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">\<br />  P----*<br />       |<br />-----+ |<br />     | *<br />     |</div><br />Add X first and the player will apear to have gone right through that corner, while it would be more desirable to have it look like it hit the ground and then moved to the right, ending up at a slightly higher position, as if it ran off the floor, not went through it:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">\<br />  P<br />  |<br />--*--+-*<br />     |<br />     |</div><br />But you are right, it's not such a big deal. I still update X first and hope for the best.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Have you found a solution to this sort of problem? Or is it like the corner issue with sprite on BG?<br /></div><br />For collisions I guess I just avoid making collision boxes too small. If they are never smaller than the maximum displacement for objects, you're not likely to miss a hit unless both objects are moving at the maximum speed, but how often does that happen? I think that even if your bullets are very small, their collision boxes should be slightly larger than the sprite itself.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu May 21, 2009 11:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-05-21T22:54:20-07:00</updated>
<published>2009-05-21T22:54:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47134#p47134</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47134#p47134"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47134#p47134"><![CDATA[
Yeah, I'm still experimenting with different values. It's important to find the right one because a jump mechanic is REALLY important to be dead on in a platformer.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Basically if the player is jumping, still moving up, and the jump button is released, the velocity will be set to 0, and the rest of the code will be told that the player is not jumping as they are now just falling. Does that sound good enough?<br /></div><br /><br />Hum... that is not how jump control usually works. The height is usually defined by how long you keep the button pressed at the start of the jump. So I guess that a better alternative would be to allow the player to keep increasing (or decreasing, since negative values move objects up) the velocity some frames after the jump started if the button remains pressed. that way, a quick tap will result in the just basic boost being applied, but holding the button longer will prevent gravity from working so soon, causing the character to go higher.</div><br /><br />Sorry, I kind of meant what you said. My jump mechanic allows the player to go higher the longer the jump button is held from the start of the jump. I meant that while the player is jumping (moving up), if the jump button goes <em>from</em> a held state <em>to</em> a released state, then the velocity will be set to 0 so that the player immediately starts falling (gravity will add to the velocity every frame, so if you set it to 0, the player will stop moving up, and gravity will start taking its toll).<br /><br />And about the collision stuff; I never thought about that kind of case! I think it's probably better to do X first, like you said, otherwise the player will get pissed from not making a jump and colliding horizontally with the edge or something like that. Though it's really not a big deal. And besides, the player probably won't be able to understand how the mechanics work just by looking at the game, as they can't see the player move horizontally, then vertically (unless the game is programmed REALLY bad), so they most likely won't complain about that.<br /><br />This kind of thing actually is really more important in sprite-on-sprite collision. What you were talking about with checking each pixel on the line of movement would have to be done too in order to actually know that two objects collide. Say two 4x4 pixel spheres are moving at each other 8 pixels per frame. They have the same Y coords, and are moving at each other horizontally. So one on the right is moving left, and the one on the left is moving right. At one point, Sphere 1's X coordinate is 140, and Sphere 2's X coordinate is 146. Their bounding boxes do not overlap. But then, Sphere 2 moves 8 pixels left, and Sphere 1 moves 8 pixels right, so now Sphere1.X = 148, and Sphere2.X = 138. They clearly would have collided, but if you check for bounding box overlap, the two objects would read to not have collided. They instead passed through each other!<br /><br />I still have to find a good way to prevent this. For now I don't have to worry about it so much, as I don't have things moving very fast, and things aren't really smaller in width or height than their speed per frame. Plus I might have a 2x2 pixel bullet going pretty fast, but a 16x32 pixel object checks for collision against it, so the two objects won't pass through each other. Have you found a solution to this sort of problem? Or is it like the corner issue with sprite on BG?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Thu May 21, 2009 10:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-05-21T22:19:20-07:00</updated>
<published>2009-05-21T22:19:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47132#p47132</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47132#p47132"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47132#p47132"><![CDATA[
About the actual values you are going to use for acceleration and such, you'll just have to test and pick what feels best for you. It's kinda hard to predict what will actually happen just by looking at the numbers. anyway, the math doesn't change, just the parameters, so it's easy to experiment.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />Basically if the player is jumping, still moving up, and the jump button is released, the velocity will be set to 0, and the rest of the code will be told that the player is not jumping as they are now just falling. Does that sound good enough?<br /></div><br />Hum... that is not how jump control usually works. The height is usually defined by how long you keep the button pressed at the start of the jump. So I guess that a better alternative would be to allow the player to keep increasing (or decreasing, since negative values move objects up) the velocity some frames after the jump started if the button remains pressed. that way, a quick tap will result in the just basic boost being applied, but holding the button longer will prevent gravity from working so soon, causing the character to go higher.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Oh, and tokumaru, I do my collision detection the same way you were talking about. Because an object might move in two directions at once, you can never be sure in which direction there was a collision, because you only know that a point "exists" inside of a tile; you don't know that it moved in horizontally or vertically.<br /></div><br />Yeah, but even this way is just a crude approximation, as the correct thing would be to actually trace a line between the 2 points and check the position after every pixel moved. Look at the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">           /<br />         P<br /><br />------+<br />      |<br />      |</div><br />Say that "P" is the player, falling diagonally as indicated by the slash. Depending on which direction you move it and check for collisions first (X or Y), it may or may not land on that ledge.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">         P<br />         |<br />------+  |<br />      |  *<br />      |</div><br />If you move it vertically first, it'll end where the "*" is, and when you move it horizontally it'll hit the wall.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    *----P<br /><br />------+<br />      |<br />      |</div><br />But if you move it horizontally first, the player will be positioned over the floor, and when it's moved vertically it will land on the floor. Which one is the correct behavior? I'll only know if you trace a straight line, which would be too slow to do on the NES.<br /><br />Anyway, we have to pick one to do first (I think I handle X first) and hope it will all turn out OK. I believe most games work like this and nobody complains, so it's probably OK.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu May 21, 2009 10:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-05-21T20:55:32-07:00</updated>
<published>2009-05-21T20:55:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47131#p47131</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47131#p47131"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47131#p47131"><![CDATA[
Hey, thanks for the replies guys.<br /><br />I didn't think a linear increase of velocity would suffice for gravity, but it actually works quite nicely. I was thinking at first of multiplying velocity by like 1.1 or something every frame, but just adding around 24/256 to the velocity every frame gives me more freedom and takes less CPU time.<br /><br />So I've taken some advice from what I've read and there each object will be "displaced" based on it's velocity. Of course, velocity is signed and has more precision than just integer values (for example, velocity can be 1.235 instead of just 1 or 2). So if an object has no velocity, it won't move. If it has velocity, it does move. Simple as that.<br /><br />So tell me if this sounds adequate, I'm pretty sure this will work out nicely. When an object is airborne (not in water or anything), 24/256 will be added to the velocity every frame. When the jump button is pressed (only if the player is on solid ground or has permission to jump) the velocity will be set to -3 or something like that. Then gravity will take its toll and add 24/256 to that every frame, thus meaning the player is being moved vertically at a decreasing rate. Then eventually that value will cross 0, and the player will come back down.<br /><br />Then I don't want the player to not have control on how high they jump, so I think I can do the following to implement some control on how high they jump:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">If Player.Jumping = True Then<br />   If Player.VelocityY &lt; 0 Then<br />      If Controller.JumpButton = NotPressed Then<br />         Player.VelocityY = 0<br />         Player.Jumping = False<br />      End If<br />   End If<br />End If<br /></div><br /><br />Basically if the player is jumping, still moving up, and the jump button is released, the velocity will be set to 0, and the rest of the code will be told that the player is not jumping as they are now just falling. Does that sound good enough?<br /><br />Oh, and tokumaru, I do my collision detection the same way you were talking about. Because an object might move in two directions at once, you can never be sure in which direction there was a collision, because you only know that a point "exists" inside of a tile; you don't know that it moved in horizontally or vertically.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Thu May 21, 2009 8:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-05-21T16:35:05-07:00</updated>
<published>2009-05-21T16:35:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47125#p47125</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47125#p47125"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47125#p47125"><![CDATA[
<div class="quotetitle">ProgrammingAce wrote:</div><div class="quotecontent"><br />Again, my game doesn't have moving platforms either (it's not a platformer)<br /></div><br />Ah, I assumed it was. Is it a beat-em-up then? Well, then I guess a basic look up table for jumps is OK. Beat-em-ups are not known for their physics anyway. A good platformer is too dynamic for LUTs though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu May 21, 2009 4:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ProgrammingAce]]></name></author>
<updated>2009-05-21T16:24:50-07:00</updated>
<published>2009-05-21T16:24:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47124#p47124</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47124#p47124"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47124#p47124"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Then what happens when the player jumps down so far that he hits the end of the LUT?<br /><br />And what happens with a jump from a moving platform? Ordinarily, when a body jumps from a moving platform, the launch velocity is the vector sum of the platform's velocity and the body's velocity relative to the platform.<br /></div><br /><br />At the end of the lookup table, you hit terminal velocity and stop accelerating. In reality with 16 values in the LUT, i'm not sure you have enough screen to really fall that far. I'd have to do the calculations. I know in my game you can't fall far enough to max it out.<br /><br />Again, my game doesn't have moving platforms either (it's not a platformer), but if i were to implement it i would probably cheat. I would set the character's sprite high enough to clear the moving platform, then complete the jump as usual. The acceleration wouldn't be affected by the platform's movement.<br /><br />For different characters jumping, it's simple. Before i jump, i set a flag telling the jump routine which lookup table to use.<br /><br />Lookup tables aren't the best solution for many situations, but it fits my game perfectly. I'm not sure i'd go that route with a platformer, i guess it would depend on how i setup the physics. In my game, there are so few instances where the player would want to jump, it's not worth writing a better physics routine.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3869">ProgrammingAce</a> — Thu May 21, 2009 4:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-05-21T16:17:55-07:00</updated>
<published>2009-05-21T16:17:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47123#p47123</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47123#p47123"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47123#p47123"><![CDATA[
<div class="quotetitle">ProgrammingAce wrote:</div><div class="quotecontent"><br />For something simple like jumping, i'm more a fan of lookup tables. For my <a href="http://programmingace.com/downloads/BioForceApeDemo.nes" class="postlink">demo here</a>, i'm using a lookup table.<br /></div><br />You have the right to like using LUTs for physics, but your currently values still need a little tweaking. The jump is looking a bit weird (mostly near the top).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The first 16 bytes are subtracted from the sprite's Y coord (to make the character "fall up"). The next 16 are added back into the Y coord to make him come back down.<br /></div><br />OK, so the CPU cost is an addition.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />1.) Takes math off the CPU.<br /></div><br />Hardly. When working with a velocity variable all you have to do is add it to the object's coordinate, the same as you do with the table. There is also the cost of updating the velocity, but with a table there is also the cost of maintaining a pointer to the current table element and so on, so there hardly is a big difference in CPU usage between both methods.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />2.) Much faster to implement.<br /></div><br />I disagree. With real time calculations you have only two values that affect the feel of the jump: the initial impulse and gravity. A few tests should be enough to get the exact values, but I bet you'd have to test forever to make a good 32-byte table. And you are also stuck to that same height, and can't use different impulses for variable-height jumps, unless you have a bunch of tables. And the logic itself is not hard at all.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />3.) Much easier to go back and make quick changes. I found at one point i wanted to increase the jump height by 40%. Took me 30 seconds to make the change.<br /></div><br />Not true again. You have to change 32 values, I have to change 1 or 2. If by any chance you decide that the animation needs more than 32 frames you even have to change the size of the table, and thus the code that reads it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />4.) It's easier to set the jump height down to the pixel. At the start of the jump, i can predict where the sprite will be at any point along the jump without any further math.<br /></div><br />Gotta give you that one, but with real time calculations it should still be pretty quick to get the ideal height by messing a bit with the previously mentioned 2 values. But still, even if you can quickly pick the highest point of the jump, finding decent values for all the other elements of the table might take a while.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I guess the downside is that it's not as realistic<br /></div><br />It can look pretty realistic, as long as you pick (or calculate) the values for the table. For me, the downside is how difficult it can be to make the right table, and the how hardcoded the whole thing is, meaning you can't have tons of different jumps in the game (for different characters, or depending on how long the jump button is pressed).<br /><br />Plus, you can't make a table for gravity because you can fall from all sorts of heights, and since falling is half of the jumping sequence, why not make the first half dynamic as well? I just feel that real time calculations result in a much better experience, and is actually not harder to implement than tables.<br /><br />EDIT: Heh, I was a bit late, tepples answered first. But I see that him and I agree in many points.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu May 21, 2009 4:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-05-21T15:38:46-07:00</updated>
<published>2009-05-21T15:38:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47121#p47121</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47121#p47121"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47121#p47121"><![CDATA[
<div class="quotetitle">ProgrammingAce wrote:</div><div class="quotecontent"><br />The first 16 bytes are subtracted from the sprite's Y coord (to make the character "fall up"). The next 16 are added back into the Y coord to make him come back down.<br /></div><br />In physics terms, you have a lookup table of the Y component of the velocity at any given time t, which I'll call jump_vy.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This gives me a few benefits,<br /><br />1.) Takes math off the CPU.<br /></div><br />Updating velocity and displacement needs three additions: vy += g; x += vx; y += vy. Assuming 16-bit adds like in Balloon Fight, that's three rounds of clc-lda-adc-sta-lda-adc-sta, or about 84 cycles in all. You need the x += vx anyway to track the momentum of your character when running on the ground.<br /><br />The other way is also three additions:<br />t += 1; x += vx; y += jump_vy[t]<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />2.) Much faster to implement.<br /></div><br />You have to keep track of a pointer in the jump lookup table, and that isn't much easier than keeping track of a y velocity. Plus you need a separate table if different creatures can jump different heights.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />3.) Much easier to go back and make quick changes. I found at one point i wanted to increase the jump height by 40%. Took me 30 seconds to make the change.<br /></div><br />To increase jump height by 40 percent, increase launch velocity by 18 percent.<br /><br />(Proof follows)<br />h = -g*t^2/2; therefore t = sqrt(-2*h/g)<br />v = g*t = sqrt(-2*h/g)<br />Now if hnew is 40 percent higher than h, or 1.40 * h, solve for vnew:<br />vnew = sqrt(-2*hnew/g) = sqrt(-2*(1.40*h)/g)<br />vnew^2 = -2*1.40*h/g = 1.40*(-2*h*g) = 1.40*sqrt(-2*h*g)^2 = 1.40*v^2<br />vnew = sqrt(1.40)*v ~= 1.183*v<br /><br />In general, to change by X percent, you need to change the launch velocity by just under X/2 percent. But with a lookup table like jump_vy, you have to modify each element and possibly even the length.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />4.) It's easier to set the jump height down to the pixel. At the start of the jump, i can predict where the sprite will be at any point along the jump without any further math.<br /></div><br />Then what happens when the player jumps down so far that he hits the end of the LUT?<br /><br />And what happens with a jump from a moving platform? Ordinarily, when a body jumps from a moving platform, the launch velocity is the vector sum of the platform's velocity and the body's velocity relative to the platform.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I guess the downside is that it's not as realistic, but realism isn't exactly what i'm going for in a game about a bio-genetically engineered ape.<br /></div><br />Point of terminology: <a href="http://en.wikipedia.org/wiki/Selective_breeding" class="postlink">Selective breeding</a> is a (crude) form of genetic engineering that has been practiced for millennia. If you have a pet dog (<em>Canis lupus familiaris</em>), it's been bred from wolves (<em>C. lupus</em>). You're talking about a transgenic ape, right?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu May 21, 2009 3:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ProgrammingAce]]></name></author>
<updated>2009-05-21T14:29:44-07:00</updated>
<published>2009-05-21T14:29:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47119#p47119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47119#p47119"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47119#p47119"><![CDATA[
For something simple like jumping, i'm more a fan of lookup tables. For my <a href="http://programmingace.com/downloads/BioForceApeDemo.nes" class="postlink">demo here</a>, i'm using a lookup table.<br /><br />The first 16 bytes are subtracted from the sprite's Y coord (to make the character "fall up"). The next 16 are added back into the Y coord to make him come back down.<br /><br />This gives me a few benefits,<br /><br />1.) Takes math off the CPU.<br />2.) Much faster to implement.<br />3.) Much easier to go back and make quick changes. I found at one point i wanted to increase the jump height by 40%. Took me 30 seconds to make the change.<br />4.) It's easier to set the jump height down to the pixel. At the start of the jump, i can predict where the sprite will be at any point along the jump without any further math.<br /><br />I guess the downside is that it's not as realistic, but realism isn't exactly what i'm going for in a game about a bio-genetically engineered ape.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3869">ProgrammingAce</a> — Thu May 21, 2009 2:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[devmas]]></name></author>
<updated>2009-05-20T10:07:40-07:00</updated>
<published>2009-05-20T10:07:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47056#p47056</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47056#p47056"/>
<title type="html"><![CDATA[Physics Newbie needing direction]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5192&amp;p=47056#p47056"><![CDATA[
The above are correct.<br /><br />While first programming a platforming game, this page helped me with jumping physics:<br /><br /><!-- m --><a class="postlink" href="http://tasvideos.org/RockmanData.html">http://tasvideos.org/RockmanData.html</a><!-- m --><br /><br />Basically, upon jumping, the vertical speed is set to something, and every frame, it goes down by some amount.<br /><br />Before reading that, I was trying to implement jumping with crazy things like sine waves and stuff <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":-P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3912">devmas</a> — Wed May 20, 2009 10:07 am</p><hr />
]]></content>
</entry>
</feed>