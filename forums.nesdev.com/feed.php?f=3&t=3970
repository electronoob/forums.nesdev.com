<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=3970" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-03-16T13:01:00-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=3970</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-03-16T13:01:00-07:00</updated>
<published>2008-03-16T13:01:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31710#p31710</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31710#p31710"/>
<title type="html"><![CDATA[CHR prerendering tricks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31710#p31710"><![CDATA[
I posted a <a href="http://nesdev.com/bbs/viewtopic.php?t=511" class="postlink">pretty complete description of how I do rendering</a> a while back. In short, four pixels are processed at a time by using 32-bit integers (or 64-bit if the processor supports it natively), and there is <em>no</em> branching (if statements), so it pipelines really well. The CHR cache just reorders data rather than expanding it, so it doesn't take lots of space either.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Mar 16, 2008 1:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2008-03-16T10:24:23-07:00</updated>
<published>2008-03-16T10:24:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31703#p31703</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31703#p31703"/>
<title type="html"><![CDATA[CHR prerendering tricks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31703#p31703"><![CDATA[
- OK, I got your idea working here, but a benchmark might be required...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />- you can get around that by conditionally ORing attribute bits (ie: only OR them if the original pixel is nonzero), but this requires an additional conditional for every onscreen sprite and BG pixel!<br /></div><br /><br />Extras:<br />1. You need a table with 00, FD, FE, FF to index every decoded CHR pixel.<br />2. Another table with 03, 07, 0B, 0F is required for every onscreen pixel.<br />3. The final AND is performed, but a few table[ table[ table[i] ] ] is added.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define TILEBANK   ppu-&gt;bg_tile | &#40;*bg-&gt;tile &gt;&gt; 6&#41;<br />#define TILELINE   &#40;&#40;*bg-&gt;tile &amp; 0x3F&#41; &lt;&lt; 3&#41; | bg-&gt;line<br /><br />   /* pattern pixel<br />    */<br />   ppupattern = chr_cache&#91;TILEBANK&#93;&#91;TILELINE&#93; &amp; attrmask&#91; &#40;bg-&gt;name&#91;ppu_bgattr&#91;attrnum&#93;&#93; &gt;&gt; ppu_bgshft&#91;attrnum&#93;&#41; &amp; 3 &#93;;</div><br /><strong>EDIT:</strong> well, in particular, the emulation is around 15FPS slower using the AND trick.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Sun Mar 16, 2008 10:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hap]]></name></author>
<updated>2008-03-16T08:32:07-07:00</updated>
<published>2008-03-16T08:32:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31701#p31701</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31701#p31701"/>
<title type="html"><![CDATA[CHR prerendering tricks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31701#p31701"><![CDATA[
cool <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />If you've got an earlier source of Schpune, the one before you added this, could you measure the speed improvement?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=115">hap</a> — Sun Mar 16, 2008 8:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2008-03-16T08:11:41-07:00</updated>
<published>2008-03-16T08:11:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31700#p31700</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31700#p31700"/>
<title type="html"><![CDATA[CHR prerendering tricks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3970&amp;p=31700#p31700"><![CDATA[
I decided to fork this thread from this one:<br /><br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=3964&amp;start=30">http://nesdev.com/bbs/viewtopi ... 4&amp;start=30</a><!-- m --><br /><br /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   unsigned char layerA = &#40;src&#91;8&#93; &amp; 0xAA&#41; | &#40;&#40;*src &gt;&gt; 1&#41; &amp; 0x55&#41;;<br />   unsigned char layerB = &#40;&#40;src&#91;8&#93; &amp; 0x55&#41; &lt;&lt; 1&#41; | &#40;*src &amp; 0x55&#41;; <br /></div><br /></div><br /><br />That's a very neat way to do it!  I use the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   static const u8 lut&#91;4&#93; = &#123;0x00,0xFD,0xFE,0xFF&#125;;<br /><br />   u8 a = src&#91;0&#93;;<br />   u8 b = src&#91;8&#93;;<br /><br />   dst&#91;0&#93; = lut&#91; &#40;&#40;a &gt;&gt; 7&#41; &amp; 1&#41; | &#40;&#40;b &gt;&gt; 6&#41; &amp; 2&#41; &#93;;<br />   dst&#91;1&#93; = lut&#91; &#40;&#40;a &gt;&gt; 6&#41; &amp; 1&#41; | &#40;&#40;b &gt;&gt; 5&#41; &amp; 2&#41; &#93;;<br />   dst&#91;2&#93; = lut&#91; &#40;&#40;a &gt;&gt; 5&#41; &amp; 1&#41; | &#40;&#40;b &gt;&gt; 4&#41; &amp; 2&#41; &#93;;<br />   dst&#91;3&#93; = lut&#91; &#40;&#40;a &gt;&gt; 4&#41; &amp; 1&#41; | &#40;&#40;b &gt;&gt; 3&#41; &amp; 2&#41; &#93;;<br />   dst&#91;4&#93; = lut&#91; &#40;&#40;a &gt;&gt; 3&#41; &amp; 1&#41; | &#40;&#40;b &gt;&gt; 2&#41; &amp; 2&#41; &#93;;<br />   dst&#91;5&#93; = lut&#91; &#40;&#40;a &gt;&gt; 2&#41; &amp; 1&#41; | &#40;&#40;b &gt;&gt; 1&#41; &amp; 2&#41; &#93;;<br />   dst&#91;6&#93; = lut&#91; &#40;&#40;a &gt;&gt; 1&#41; &amp; 1&#41; | &#40;&#40;b     &#41; &amp; 2&#41; &#93;;<br />   dst&#91;7&#93; = lut&#91; &#40;&#40;a     &#41; &amp; 1&#41; | &#40;&#40;b &lt;&lt; 1&#41; &amp; 2&#41; &#93;;<br /></div><br /><br />you can ignore the 'lut' thing for now, that's just doing the converting to 00,Fx thing I was talking about before.  Your way seems to involve much less shifting.  I think I like your way better  =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So, values are not 00, Fx as you mentioned.<br /></div><br /><br />The reason I convert 0,1,2,3 to 00,Fx is for the shorter attribute combination.  The idea is the following:<br /><br />- the easiest way to determine whether or not a pixel is transparent is to see if it's zero.<br /><br />- if you OR attribute bits... transparent pixels will not be zero (since they will have their attribute bits set)<br /><br />- you can get around that by conditionally ORing attribute bits (ie:  only OR them if the original pixel is nonzero), but this requires an additional conditional for every onscreen sprite and BG pixel!<br /><br />- by using 00,FD,FE,FF and combining attribute bits with AND, this ensures that pixel 0 will <em>stay</em> zero even after you combine attribute bits, but pixels 1-3 will retain their attribute bits.<br /><br /><br />A lot of this depends how you're rendering, too.  But I think for the most part we all do it the same way, since at the end of the day you have to use the pixel in a palette lookup<br /><br /><br />Given BG pixel 'a' and sprite pixel 'b', you need to produce a value between 0x00-0x1F for the output (which goes to palette lookup).  This value will be either the BG or sprite pixel depending on which has priority -- or it will be 0x00 if both are transparent.  The simplest way to approach this that I have found is:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">a = BG_Pixel;<br />b = Sprite_Pixel;  // will be ORd with 0x80 if it has foreground priority<br /><br />// apply clipping here -- you can set 'a' or 'b' to 0 if sprites/bg is disabled<br />//  or if this is being clipped from the left-8 pixels or whatever<br />if&#40;dot &lt; ppu.nBGClip&#41;  a = 0;<br />if&#40;dot &lt; ppu.nSpClip&#41;  b = 0;<br /><br />// determine whether to output BG or sprite pixel<br />//  you output 'a'  &#40;the BG pixel&#41; unless:<br />//  a is zero &#40;transparent&#41;<br />//  or sprite pixel 'b' has foreground priority<br /><br />if&#40;!a || &#40;b &amp; 0x80&#41; &#41;<br />  a = b &amp; 0x1F;<br /><br />// if both a and b were zero &#40;both pixels transparent&#41;<br />//  result with be 0x00 here, which will output $3F00<br /><br />// 'a' is now 0x00-0x1F -- our output pixel<br />OutputPixel&#40;a&#41;;<br /></div><br /><br />this is the shortest and simplest I've been able to make this code.  Since it's run the most (256x240 times every frame) I figure this needs to be the quickest.<br /><br />This only works if transparent pixels are always 0.. regardless of their attribute bits or other information (like the 0x80 sprite priority bit -- that must also be 0 if the pixel is transparent).<br /><br />So then the next part of this trick is making transparent pixels always be 0 (rather than 0x04, 0x08, or 0x0C -- which are also transparent pixel values).  This is where the AND trick comes in:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static const u8 at_lookup&#91;4&#93; = &#123; 0x03,0x07,0x0B,0x0F &#125;;<br /><br />u8 at = attribute_bits;  // I'll spare you my calculations here, but basically<br />// the 'at' gets a value 0-3 for the attribute bits<br /><br />at = at_lookup&#91; at &#93;; // left shift by 2, OR with 3<br /><br />BG_Pixel = CHR_Pixel &amp; at;  // combine attribute bits with CHR bits<br /></div><br /><br />by combining attribute bits this way, BG_Pixel stays 0 for transparent pixels without any conditionals... since CHR_Pixel for pixel 0 is 0... anything you AND with it will also be 0.<br /><br /><br />Anyway that's my approach.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Mar 16, 2008 8:11 am</p><hr />
]]></content>
</entry>
</feed>