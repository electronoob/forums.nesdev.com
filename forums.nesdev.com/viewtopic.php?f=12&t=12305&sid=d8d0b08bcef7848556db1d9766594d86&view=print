<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Dynamic Sprite Vram Routine Ideas</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Dynamic Sprite Vram Routine Ideas</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12305">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12305</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Tue Jan 27, 2015 9:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, yes I know the title is terrible. <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> (couldn't think of what to call it) What I mean by this is, what kind of ways can you make it to where vram for sprites is as crammed as possible? On the metasprite code I made (which I got to be 16 bits! <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /> )(oh, and yes, this means I'm still using WLA... I found it had the best starterkit, even if it is a buggy POS.) I wanted to have it to where each metasprite had an offset in vram, that would get added to the character bit number of each individual sprite to where you would get the final number that you would store into vram, much like what I did when I had a &quot;controller&quot; for x and y that everything was based off of, except for vram. The problem is, sprites on the SNES (as you already know) don't use all the different tiles in a strait line (like the GBA and the Genesis?) Instead, they have it in a box like shape, making what I suggested earlier impossible unless you only used one sprite size. The way I would think that would give you maximum vram density (but <strong>definatelly</strong> not efficiency) would be if you had every tile or tiles (in the case of 16x16, 32x32, and 64x64 sized sprites) have its own register. Every time you add a new sprite, you would look for a register that is 0, meaning that there are no tiles there. If you are uploading a sprite that is 4x larger than the smaller one, you would look every four registers. If you had a large sprite that is 16x larger than the small sprite, then you would look every 16 registers.<br /><br />Here's a picture to show what I mean:<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=2562" alt="SpriteVram.png" /><br />
			<span class="gensmall">SpriteVram.png [ 1.33 KiB | Viewed 657 times ]</span>
		

		<br />
	</div><br />Oh, (here's a given) this approach is obviously going to be better the larger the small sized sprite is. I personally think 16x16 and 32x32 is the best overall. (Seriously, why did they even consider making 64x64 sized sprites a possibility? Especially when you can only pick two different sprite sizes...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jan 27, 2015 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was under the impression that if you had a lot of small projectiles, 8x8 and 16x16 might be the best so as not to exceed the 34-sliver limit on too many lines. It also lets you use 128x16 (1024 bytes) as the unit of sprite tile updates, uploading five different units plus OAM in each vblank if you aren't making any background changes.<br /><br />The GBA can do both Super NES-style &quot;box&quot; mode and Genesis-style &quot;line&quot; mode.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Tue Jan 27, 2015 10:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The problem is, if you want a bunch of explosions (like I love) then you are going to want to use a 32x32 tiles. I really wish there was something like a 8x16 and 16x32 tilemode, as all 128 32x32 sprites can't even all fit on screen, but all 128 16x16 sprites only fill it about halfway. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br />Oh, can't the GBA actually do both &quot;box&quot; and &quot;line&quot; modes? (Wait you just said that. I'm an idiot...) (The Genesis would have a <strong>really</strong> hard time with box mode using 24x24 sized sprites...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Tue Jan 27, 2015 10:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Oh, can't the GBA actually do both &quot;box&quot; and &quot;line&quot; modes? (Wait you just said that. I'm an idiot...) (The Genesis would have a really hard time with box mode using 24x24 sized sprites...)<br /></div><br /><br />Let's use proper terminology (because I had a hard time figuring out what either you or tepples were talking about). I dunno about the SNES or Genesis, but in GBAland, we call these modes 1 dimensional (sprite tiles are in a &quot;line&quot; in memory) or 2 dimensional (sprite tiles are in a &quot;box&quot; in memory). The GBA could do both, however, you could not mix and match (well you <strong>could</strong> with HBlanks and some nifty programming, but generally no).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Tue Jan 27, 2015 10:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really didn't know there was a &quot;proper&quot; name for them, I was just saying how they looked. Also, why in the world would you even want to use mode 2 (better? <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> ) If you have mode 1? mode 2 may be easier to look at in a vram viewer, but not much else. (It's even harder to dma tile data using it.) I wonder, is mode 2 easier for the hardware to use, or does the SNES just use it because it was simply built that way? (Mode 2 just really seems more complicated in about every aspect.) Just thinking, having non-square sized sprites on the GBA just seems like it would make mode 2 a complete mess.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Wed Jan 28, 2015 12:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Also, why in the world would you even want to use mode 2<br /></div><br /><br />2D mode is probably meant to be used with graphics tools and a VRAM viewer. For the graphic artists who didn't care about the programming aspects of the game, having a simple grid they could throw up on the screen and know that's how the hardware would see it exactly was probably a decent benefit for them. With 2D mode, you can reserve only some of the sprite tiles (the ones that need to be animated), to occupy something like the first 4 rows or VRAM or something like that, and update them all via DMA while leaving the rest that don't need updates untouched. I've seen that done in a couple of GBA games that use 2D mapping (Super Mario Advance's intro in some parts) so DMAing wouldn't be terrible. You just need careful planning.<br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Just thinking, having non-square sized sprites on the GBA just seems like it would make mode 2 a complete mess.<br /></div><br /><br />Nah, not really. You get enough VRAM so that there's plenty of space to mix and match sprite shapes. I believe Mega Man Zero does this quite well in many places (there is even often VRAM to spare/not update). 2D mode, however, seems more common in games Nintendo developed themselves rather than 3rd party developers, from what I've seen. I think Nintendo's internal tools were geared towards this (also, the GBA defaults to 2D mode, so...)<br /><br />But enough about the GBA. This is SNESdev after all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed Jan 28, 2015 6:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I was under the impression that if you had a lot of small projectiles, 8x8 and 16x16 might be the best so as not to exceed the 34-sliver limit on too many lines. It also lets you use 128x16 (1024 bytes) as the unit of sprite tile updates, uploading five different units plus OAM in each vblank if you aren't making any background changes.</div><br /><br />...and then you'll pull your hair out in frustration having to rearrange every animation frame to fit into a 128x16 block.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jan 28, 2015 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">...and then you'll pull your hair out in frustration having to rearrange every animation frame to fit into a 128x16 block.</div><br />Which is something software can easily do for you. Say your character is 32x32; you can have your tile sheet converter turn each cel into four 16x16 sprites and have two frames per unit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Wed Jan 28, 2015 11:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">...and then you'll pull your hair out in frustration having to rearrange every animation frame to fit into a 128x16 block.</div><br />Which is something software can easily do for you. Say your character is 32x32; you can have your tile sheet converter turn each cel into four 16x16 sprites and have two frames per unit.</div><br />Wait a minute, wouldn't you need to arrange the tiles in real time? Otherwise, you would waste DMA time on a metasprite that has less than 64x32 pixels.<br /><br />Edit: You know, one thing I always wondered was how the DKC games managed with this sort of stuff. Has anyone taken DKC apart enough to know?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Thu Jan 29, 2015 9:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think that's one of the things that is lacking on the sPPU side of the snes; sprite flexibility. Yeah, having to choose between only two sprites is annoying, but layout for sprites (IIRC, it's been awhile for snes dev stuffs) is limiting too. This is where the PCE and Genesis have more flexibility; sprites (and tiles) and exist anywhere in the whole vram range (even inside tilemap areas). Though for your typical average game, I'm sure it's not a huge deal breaker. <br /><br /> I kinda understand your idea. How memory efficient is it, though? <br /><br /><br /> On a related note, the original sharp 68k only had one sprite size: 16x16. And 128 SAT entries. And, IIRC, had 32k of vram for sprites. And 16 sprites per scanline (one site says 32, but a lot say 16. Might be res/mode dependent). Of course, later models up the video specs (supposedly).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Thu Jan 29, 2015 11:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">This is where the PCE and Genesis have more flexibility; sprites (and tiles) and exist anywhere in the whole vram range (even inside tilemap areas). Though for your typical average game, I'm sure it's not a huge deal breaker</div><br />But they only have about half (5/8 for the Genesis) the amount of sprites, so you with the Genesis, you can have a 32x16 sprite, but with the SNES, you can have two 16x16 sprites for the exact same effect, only loosing slightly more sprites than the Genesis and the exact same amount of the TG16, but it's unlikely you wont have a single sprite that's perfectly square. In fact, explosions and bullets are usually one sprite and are usually take the most sprites, so... (I do wish the SNES had an extra sprite bit for sprite size so you could have all the different sized sprites, but I don't care way too bad. Explosions and bullets, which are usually the largest and the smallest, are usually together so that's a bit of a pain...)<br /><br /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">I kinda understand your idea. How memory efficient is it, though? </div><br />If you mean wram, not at all. If you mean vram, yes. There are 512 tiles available for sprites, so you'd have to use 512 different registers with 8x8 tile sprites, and 128 registers with 16x16 tile sprites. You could always have a register represent 8 different tiles because there are 8 different bits, but you'd have to do an AND operation 8 times, but this would waste time, which I'm not sure this could be done because of that, so it would probably be better to use more wram instead of processing time, as the SNES has plenty of ram. The one problem with this, how would you know where to write for animation updates? Maybe every time you successfully find an open place for a new sprite in vram, you store the result and look at what it was for where you are supposed to dma new tiles? This would use even more ram, because you need to store the answer in a register... (The register would actually just be a general offset for where a sprite is in vram. It would be for finding character data, and for seeing what part of vram needs to be updated.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Thu Jan 29, 2015 4:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry to double post, but I think this is pretty significant. I think I kind of have a code that would work with 8x8 and 16x16 sprites. (I don't know how it would work using 16x16 and 32x32 sprites because 128 registers doesn't translate well with 512 tiles.) If there's anything that needs to be fixed, please tell me.<br /><br />The code assumes 8 bit accumulator with 16 bit indexes<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">look_for_8x8_vram:<br />&nbsp; &nbsp;cpy #$0100&nbsp; &nbsp;&nbsp; &nbsp;;512, because there are 512 slots for sprites (this number can be anything, just not over 512)<br />&nbsp; &nbsp;beq no_slot_found&nbsp; &nbsp;;no space left for sprite<br />&nbsp; &nbsp;lda Vram,y&nbsp; &nbsp;<br />&nbsp; &nbsp;beq slot_found&nbsp; &nbsp;&nbsp; &nbsp;;there is space for another sprite<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;bra look_for_8x8_vram&nbsp; &nbsp;;look again if the space is already occupied<br /><br />look_for_16x16_vram:<br />&nbsp; &nbsp;cpy #$0100&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;512, because there are 512 slots for sprites (this number can be anything, just not over 512)<br />&nbsp; &nbsp;beq no_slot_found&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;no space left for sprite<br />&nbsp; &nbsp;lda Vram,y&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;upper lefthand corner of square<br />&nbsp; &nbsp;bne prepare_for_look_for_16x16_vram&nbsp; &nbsp;;look again if the space is already occupied<br />&nbsp; &nbsp;lda Vram+1,y&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;upper righthand corner of square&nbsp; &nbsp;<br />&nbsp; &nbsp;bne prepare_for_look_for_16x16_vram&nbsp; &nbsp;;look again if the space is already occupied<br />&nbsp; &nbsp;lda Vram+16,y&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;lower lefthand corner of square<br />&nbsp; &nbsp;bne prepare_for_look_for_16x16_vram&nbsp; &nbsp;;look again if the space is already occupied<br />&nbsp; &nbsp;lda Vram+17,y&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;lower righthand corner of square<br />&nbsp; &nbsp;bne prepare_for_look_for_16x16_vram&nbsp; &nbsp;;look again if the space is already occupied<br />&nbsp; &nbsp;bra 16x16_slot_found&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;there is space for another sprite&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />prepare_for_look_for_16x16_vram:<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cmx&nbsp; &nbsp;#$08<br />&nbsp; &nbsp;beq&nbsp; &nbsp;next_row<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;bra look_for_16x16_vram<br /><br />next_row:<br />&nbsp; &nbsp;tya&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;If this is done right, this should skip every other row of tiles<br />&nbsp; &nbsp;adc&nbsp; &nbsp;#$08<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;bra look_for_16x16_vram<br /><br />8x8_slot_found:<br />&nbsp; &nbsp;inc&nbsp; &nbsp;Vram,y&nbsp; &nbsp;&nbsp; &nbsp;;say that one of the slots is now taken<br />&nbsp; &nbsp;sty&nbsp; &nbsp;TempY&nbsp; &nbsp;&nbsp; &nbsp;;TempY holds the vram offset<br />&nbsp; &nbsp;rts<br /><br />16x16_slot_found:<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#$01<br />&nbsp; &nbsp;sta&nbsp; &nbsp;Vram,y&nbsp; &nbsp;&nbsp; &nbsp;;say that four of the slots are now taken<br />&nbsp; &nbsp;sta&nbsp; &nbsp;Vram+1,y<br />&nbsp; &nbsp;sta&nbsp; &nbsp;Vram+16,y<br />&nbsp; &nbsp;sta&nbsp; &nbsp;Vram+17,y<br />&nbsp; &nbsp;sty&nbsp; &nbsp;TempY&nbsp; &nbsp;&nbsp; &nbsp;;TempY holds the vram offset<br />&nbsp; &nbsp;rts<br /><br />no_slot_found:<br />&nbsp; &nbsp;rts&nbsp; &nbsp;;nothing else you can really do...</div><br />Note: This has not been tested because I cannot currently fit it in with the rest of my code.<br /><br />Edit: I forgot to make it to where 16x16 sized sprites skipped every row of tiles vertically, so I, if it is correct, I did. I also fixed prepare_for_look_for_16x16_vram, because I accidentally incremented by 4 tiles instead of 2.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Jan 29, 2015 7:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Edit: You know, one thing I always wondered was how the DKC games managed with this sort of stuff. Has anyone taken DKC apart enough to know?</div><br /><br />DKC has every metasprite crammed into a 128x16 box, like the method Tepples mentioned.  It's a pretty VRAM efficient method, but be prepared to make a lot of metasprite tables if you don't have a computer program to automatically generate metasprite tables for you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Thu Jan 29, 2015 7:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">This is where the PCE and Genesis have more flexibility; sprites (and tiles) and exist anywhere in the whole vram range (even inside tilemap areas). Though for your typical average game, I'm sure it's not a huge deal breaker</div><br />But they only have about half (5/8 for the Genesis) the amount of sprites, so you with the Genesis, you can have a 32x16 sprite, but with the SNES, you can have two 16x16 sprites for the exact same effect, only loosing slightly more sprites than the Genesis and the exact same amount of the TG16, but it's unlikely you wont have a single sprite that's perfectly square. In fact, explosions and bullets are usually one sprite and are usually take the most sprites, so... (I do wish the SNES had an extra sprite bit for sprite size so you could have all the different sized sprites, but I don't care way too bad. Explosions and bullets, which are usually the largest and the smallest, are usually together so that's a bit of a pain...)</div><br /><br />By half? You mean the size of the SAT (sprite attribute table, or OAM as Nintendo calls it)? Yeah, but I look at it the other way around; you need such a large SAT because of the limited sprite sizes on the SNES. I.e. You need a large SAT especially when using anything 8x8 sprites (meta or otherwise). <br /> <br />Just an observation/off topic:<br /> Even if you limited the PCE and MD to 256 res mode, the 64 entry SAT will easily cover the entire screen because they have access to <em>all </em>their sprite sizes in a single frame and aren't limited to square sizes. For MD, that's up to 32x32 which at 64 entries, covers 65k pixels. A 256x224 screen is only 57k pixels. For PCE, with its max size of 32x64, can cover up to 128k pixels; way more coverage than it can show pixel wise. SAT size isn't a problem, even with the PCE's small sprite size of 16x16. Just watch a <a href="https://www.youtube.com/watch?v=fqL0ebFmOpg" class="postlink">Lords of Thunder longplay</a> on the hardest setting; revenge bullets on every enemy kill. 64 sprites is a <em>LOT </em>of sprites onscreen (objects, not metasprites). Same for the MD. And you have direct access to the full 64k range; no banking or name table limitations or wrapping issues, etc.  <br /><br /> Of course, MD has its own problems: to get around the limit number of subpalettes, I'd use more metasprite cells to access more than one palette in a sprite (that or limit sprites to 8 colors each). Stef mentioned that there's a part in Contra Hardcores that maxes out the SAT (80 entries for high res mode), and I thought it was for this reason - but I'm not entirely sure. PCE has a huge number of subpalettes for sprites, but all sizes being increments of 16 pixels (16x16,16x32,16x64,32x16,32x32,32x64) - it can waste space if the object is tiny or waste sprite-line-pixel bandwidth on transparent pixels. They all have their drawbacks, but I wouldn't say SAT entry size is one of them.<br /><br /><br />On topic:<br /><br /> Isn't the sprite wrap on the SNES sprite page/bank/whatever, at 16k?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Thu Jan 29, 2015 8:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see we have different opinions... Well, I respect yours anyway! <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> The one thing I do have to say though is that having the whole 64KB range for sprites is cool, but maybe not all that practical because of BG tiles.<br /><br />About vram though, I think it would have been cool if Nintendo (and Sega, for the Sega Genesis) had offered some sort of vram expansion for the SNES, like they did the N64. (Sprites having access to 64KB of vram would be very useful here.) I heard people have done this on the Genesis, but has it ever been done on the SNES? Is it even easily possible?<br /><br />Oh, and does anyone have any good ideas on how to make my code use 16x16 and 32x32 sprite sizes? I don't really know how to get 128 slots for sprites to easily match up with 512 tiles...

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>