<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=6068" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-02-26T19:54:38-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=6068</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-02-26T19:54:38-07:00</updated>
<published>2010-02-26T19:54:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=57235#p57235</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=57235#p57235"/>
<title type="html"><![CDATA[Compressing 1-bit tiles]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=57235#p57235"><![CDATA[
As you can see from the file sizes in the zipfile, it even beats PNG.<br /><br /><!-- m --><a class="postlink" href="http://pics.pineight.com/nes/chrpress.zip">http://pics.pineight.com/nes/chrpress.zip</a><!-- m --><br /><br />It encodes 2-bit tiles similarly to 1-bit tiles, except instead of using a lookup table for each color as in CMM, it uses only one table that gets EOR'd against the current color.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 26, 2010 7:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-02-25T18:09:40-07:00</updated>
<published>2010-02-25T18:09:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=57144#p57144</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=57144#p57144"/>
<title type="html"><![CDATA[Compressing 1-bit tiles]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=57144#p57144"><![CDATA[
Today, I managed to round-trip SMB1's CHR through the Python encoder and 6502 asm decoder. So I feel ready to release exact ratios that I've managed to achieve, which approach within a couple percent of CMM on pretty much everything but SMB1:<br /><br />Concentration Room<br />titlegfx.chr (plenty of 1-bit tiles)<br />compressed 22528 bits to 11909 saving 47%<br />gamegfx.chr<br />compressed 32768 bits to 20712 saving 36%<br /><br />LJ65<br />lj65.chr<br />compressed 32768 bits to 18475 saving 43%<br /><br />Super Mario Bros.<br />smb1bg.chr (minus tiles containing title screen data)<br />compressed 30720 bits to 18660 saving 39%<br /><br />Perhaps after I release the encoder, hopefully tomorrow night, someone could help figure out why CMM kicks the behind of the (admittedly less sophisticated) format that I'm using for 2-bit tiles on compression ratio for SMB1.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 25, 2010 6:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2010-02-21T13:05:13-07:00</updated>
<published>2010-02-21T13:05:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56905#p56905</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56905#p56905"/>
<title type="html"><![CDATA[Compressing 1-bit tiles]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56905#p56905"><![CDATA[
I always did "repeat last row" encoding for 1bit graphics. Though that's almost always for fonts and not other detail. Compression results vary, obviously, but I was able to compress a whole 96 character font set to 55-60% of the original.<br /><br /> There's also other techniques, like the changing the format of the graphics themselves. Changing horizontal bitmap to vertical rows instead or even re-ordering to zig-zag format. Before compressing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Sun Feb 21, 2010 1:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[UncleSporky]]></name></author>
<updated>2010-02-20T19:39:25-07:00</updated>
<published>2010-02-20T19:39:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56863#p56863</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56863#p56863"/>
<title type="html"><![CDATA[Compressing 1-bit tiles]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56863#p56863"><![CDATA[
I'd never seen gamma coding either, that's ingenious.  I'm very interested in the results here, since there's recently been a resurgence in popularity for simpler graphics that could use this compression.<br /><br /><a href="http://www.adamatomic.com/canabalt/" class="postlink"><img src="http://img691.imageshack.us/img691/5778/62393630.png" alt="Image" /></a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3438">UncleSporky</a> — Sat Feb 20, 2010 7:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-02-20T14:11:44-07:00</updated>
<published>2010-02-20T14:11:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56856#p56856</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56856#p56856"/>
<title type="html"><![CDATA[Re: Compressing 1-bit tiles]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56856#p56856"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Gamma coding<br /></div><br />Hum, I had never seen that. The number of bits (minus one, because no number uses 0 bits) necessary to represent the value are encoded in unary, and then comes the value itself. Interesting. How can you represent 0, without it being interpreted as one extra bit in the next code? EDIT: I just read it can't encode the number 0, so you'd have encode the value + 1 and subtract 1 after decoding.<br /><br />Anyway, I wonder if an auto-triggering RLE scheme (a run length is only encoded when a pixel repeats, even if this length is 0, in case the pixel doesn't repeat again) would work well in this case. I guess this is the only way to make RLE efficient when working with codes as small as 1 or 2 bits in small images.<br /><br />If a very good compression for 1-bit tiles is devised, it would be cool if it performed well on normal NES tiles too, since they are basically composed of 2 1-bit tiles. I don't think RLE alone will do much though, we must do something about larger repeating patterns, not only single pixels.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Feb 20, 2010 2:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-02-20T13:14:21-07:00</updated>
<published>2010-02-20T13:14:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56855#p56855</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56855#p56855"/>
<title type="html"><![CDATA[Compressing 1-bit tiles]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6068&amp;p=56855#p56855"><![CDATA[
I looked at <a href="http://nesdev.com/bbs/viewtopic.php?p=54230#54230" class="postlink">tokumaru's rewrite of the Codemasters Markov CHR codec</a>. I noticed that it essentially transforms runs of identical pixels into a unary code: 0 represents one pixel, 10 represents two, 110 represents three, etc. <br /><br /><a href="http://nesdev.com/bbs/viewtopic.php?p=54754#54754" class="postlink">Dwedit has noticed</a> that this scheme doesn't perform so well on tiles with 1 bit per pixel. These tiles are seen in text fonts and in decorative tiles representing things that are in the far background. Encoding run lengths in unary doesn't save any bits over not compressing the 1-bit tile at all: each pixel has one bit for whether it's the same color as the pixel to its left or the other color. In fact, there are two additional bits of overhead per line: one to state that the row isn't repeated, and one because the first pixel is always literal (not compressed), even in a tile with two colors mode 1 and the others mode 0. <br /><br />I'm playing with the following techniques and seeing 15 to 20 percent off a font:<br /><ol style="list-style-type: decimal"><li>Encoding 32x8 pixel areas instead of 8x8, to be rearranged by the unrolled code that copies the result to VRAM. This allows for capturing longer run lengths, such as the 1-pixel-tall gap at the bottom of glyphs with no descender or the 2-pixel-tall gap at the top of lowercase glyphs with no ascender. </li><li><a href="http://www.google.com/url?sa=t&amp;source=web&amp;ct=res&amp;cd=1&amp;ved=0CAcQFjAA&amp;url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElias_gamma_coding&amp;ei=8jyAS-C9EYWGNI6dsdEE&amp;usg=AFQjCNHu1_wseQ5GZvUqxICM8I2gflfXOg" class="postlink">Gamma coding</a> the run lengths. It slightly outperforms <a href="http://www.google.com/url?sa=t&amp;source=web&amp;ct=res&amp;cd=1&amp;ved=0CAcQFjAA&amp;url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FGolomb_coding&amp;ei=jECAS462BI6CNt6LpLEE&amp;usg=AFQjCNENp6JUOW6qGtgjRlJtxyx6AXu9Pg" class="postlink">Golomb(M=2)</a>, which significantly outperforms unary. </li><li>Swapping the code for the most common run length with the code for run length 1 pixel. This saves on (for example) fonts with lots of vertical strokes 2 pixels thick. </li></ol><br />I'll release a demo once I have an encoder and decoder finalized.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Feb 20, 2010 1:14 pm</p><hr />
]]></content>
</entry>
</feed>