<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7148" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-11-12T15:11:35-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7148</id>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2010-11-12T15:11:35-07:00</updated>
<published>2010-11-12T15:11:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69925#p69925</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69925#p69925"/>
<title type="html"><![CDATA[LSFR, Random, RC4]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69925#p69925"><![CDATA[
I disabled my RC4 stream generator and used the following (modified from Kevtris's 2001 Atari post mentioned above).  The results are sufficient and the code is much faster.  I've omitted the code that seeds to lfsr and other syntactic pleasantries.<br /><br />Thoughts?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />.segment &quot;ZEROPAGE&quot;<br />lfsr: .byte 0,0,0,0<br /><br />.segment &quot;DATA&quot;<br />.align 256<br />buffer:   .res 192<br /><br />.segment &quot;CODE&quot;<br />                ldy     #$c0                    ; Index into buffer, and count of tiles to make.<br />L0:             lda     lfsr + 3<br />                rol<br />                rol<br />                eor     lfsr + 3<br />                rol<br />                rol<br />                rol     lfsr + 0<br />                rol     lfsr + 1<br />                rol     lfsr + 2<br />                rol     lfsr + 3<br /><br />                lda     lfsr + 3<br />                asl<br />                asl<br />                eor     lfsr + 1<br /><br />                and     #$07      ; 8 tiles to choose from = 3 bits<br />                ora     #$10      ; tiles are $10 to $17 in char-rom.<br />                dey<br />                sta     buffer, y<br />                bne     L0<br />                rts<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Fri Nov 12, 2010 3:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-11-11T17:06:01-07:00</updated>
<published>2010-11-11T17:06:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69873#p69873</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69873#p69873"/>
<title type="html"><![CDATA[Re: LSFR, Random, RC4]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69873#p69873"><![CDATA[
<div class="quotetitle">clueless wrote:</div><div class="quotecontent"><br />Has anyone else had success with large-period (2^16-1 or greater) LFSRs and would be willing to share their wisdom?<br /></div><br />I wrote a period 2^32-1 LFSR for <a href="http://lj65.org/" class="postlink">LJ65</a> and reused it in <a href="http://pineight.com/croom/" class="postlink">Concentration Room</a> and the game I'm working on for Jeroen's competition. It's based on the <a href="http://en.wikipedia.org/wiki/Cyclic_redundancy_check" class="postlink">CRC-32-IEEE 802.3 polynomial</a>.<br /><br />Alleged RC4 is a memory hog compared to RNGs commonly used in NES games; its state occupies one-eighth of the NES's internal RAM. After its use in WEP and early WPA, researchers discovered numerous flaws, and Alleged RC4 has since been deprecated.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Nov 11, 2010 5:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2010-11-11T16:11:09-07:00</updated>
<published>2010-11-11T16:11:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69871#p69871</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69871#p69871"/>
<title type="html"><![CDATA[LSFR, Random, RC4]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7148&amp;p=69871#p69871"><![CDATA[
I need a source of random values between $00 and $0f.  Initially, I found some simple LFSRs and tried them.  However, the byte stream output masked down to 4 bits repeated too frequently to be useful.  I tried tweaking the LFSR, but did not have much luck.  I use the data to populate parts of the name-table with background tiles, so patterns emerge visually really quick.<br /><br />I got frustrated and implemented the full RC4 byte-stream generator as my pseudo-random number generator.  The result works BEAUTIFULLY.  But it is probably overkill.  It is probably the most hard-core random number generator ever implemented on a NES (well, it could be?)<br /><br />If anyone wants the rc4 code, I'll post it when I have time.  It is tweaked for my specific use and not for doing real encryption (although changing it to do crypto would not be difficult).  I always thought that it would be neat to encrypt level data and in-game text in such a way that one can't just "skip ahead".  That the key to decrypt this text is large and the result of the game's state machine at the successful completion of some game objective.  So that level 2 map won't be available until level-1 is won, and level-3 requires level-2 and so on.  I like rc4 for this because it is easy to implement in C and not too bad in hand-coded 6502 asm.  However, it does require 258 bytes of state (2 bytes in ZP and an entire page at $0700).<br /><br />I was doing some further research (ok, googling and blindly changing the xor polynomials) and found a post from 2001 on an Atari 2600 forum by kevtris:<br /><br /><!-- m --><a class="postlink" href="http://www.biglist.com/lists/stella/archives/200110/msg00121.html">http://www.biglist.com/lists/stella/arc ... 00121.html</a><!-- m --><br /><br />Has anyone else had success with large-period (2^16-1 or greater) LFSRs and would be willing to share their wisdom?<br /><br />My main concern is that while a 16-bit LSFR might have a period of 2^16-1, but the period of that LSFR mod $0010 would be smaller.  I have not written any test code for this yet (beyond my one failed experiment).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Thu Nov 11, 2010 4:11 pm</p><hr />
]]></content>
</entry>
</feed>