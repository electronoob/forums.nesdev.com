<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - I created an emulator...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">I created an emulator...</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8385">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8385</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Wed Dec 07, 2011 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>I created an emulator...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I created a NES emulator.
<br />
<br />Target: YouTube.
<br />
<br />Umm, what?
<br />
<br />My goal was to produce an emulator that has as compact source code as possible, so that it -- <em>the source code</em> -- can be showcased within a 15 minutes of a YouTube video that is not too much sped up that it cannot be read without pausing.
<br />
<br />Regular readers of this forum have already seen bits and pieces of it in my posts.
<br />
<br />The finished* emulator is 940 lines long, and has the following features:
<br />- Cycle accurate and memory access accurate CPU emulation with unofficial opcodes
<br />- Cycle accurate PPU which passes a satisfying number of tests by Blargg (though not all)
<br />- Accuracy-oriented emulation of the five-channel APU (actual accuracy not verified, but it sounds good)
<br />- Additional FCEUX compatibility by preinitializing RAM in a certain manner
<br />- iNES mappers 0, 1, 2, 3 and 7
<br />- RGB colors synthesized through NTSC modem (modulation + demodulation), with subpixel-precision NTSC artifacts (color/luma leak, marching ants) (window resizing / scaling not implemented)
<br />- Input is read from a Famtasia movie file (joypad/keyboard is ignored completely)
<br />- Sound is produced through an external program / combination of external programs (synchronization may be an issue)
<br />
<br />*) Finished, as in the version that I felt is good enough to publish on YouTube given the goals stated earier.
<br />
<br />You can see the emulator here. In order to acquire a copy, you will have to type the source code as seen in the video, or look at the movie description and spot the URL.
<br />
<br />- <!-- m --><a class="postlink" href="http://youtu.be/y71lli8MS8s">http://youtu.be/y71lli8MS8s</a><!-- m --> -- Part 1/2: Programming
<br />- <!-- m --><a class="postlink" href="http://youtu.be/XZWw745wPXY">http://youtu.be/XZWw745wPXY</a><!-- m --> -- Part 2/2: Compiling &amp; demonstration (replays a few TASes)
<br />Part 2/2 is still uploading as I type this post, but it should be watchable in about 6 hours (at the turn of December 8th in UTC).
<br />
<br />Screenshot (YouTube caps at 30 fps, so I used motion blur for fps reduction):
<br />
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_showcase_part2.png" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Wed Dec 07, 2011 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Interesting. I will have to see Part 2 when it's uploaded.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamburgler</b> [ Wed Dec 07, 2011 11:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a very entertaining video! Much better than the source code credit scroll I was expecting. The on-screen explanations are a very nice touch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Wed Dec 07, 2011 3:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is VERY impressive.  I would have never imagined it could be done in under 1000 lines of code.  It's pretty memorizing to watch makes it LOOK easy and fun.
<br />
<br />Nice work!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miker00lz</b> [ Wed Dec 07, 2011 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />bad ass, Bisqwit! this is pro.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Dec 08, 2011 12:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very cool, sir. BTW what TAS movies/games depend on the RAM initialization state?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Thu Dec 08, 2011 12:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Very cool, sir. BTW what TAS movies/games depend on the RAM initialization state?</div>
<br />I seem to remember that I could not get the Wizards &amp; Warriors TAS to sync before I added the RAM initialization. It could have been caused by something else, but that's what I did that made the difference.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Dec 08, 2011 1:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Metroid refuses to boot if the CHR-RAM is really dirty.  For a while, FCEUX was not initializing CHR-RAM to anything, so Metroid would often refuse to boot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Dec 08, 2011 1:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><!-- m --><a class="postlink" href="http://bisqwit.iki.fi/jutut/kuvat/programming_examples/nesemu1/nesemu1.cc">http://bisqwit.iki.fi/jutut/kuvat/progr ... nesemu1.cc</a><!-- m -->
<br />
<br />All I have to say is this, as I believe it speaks for itself (I hope you get my sarcasm -- and yes, I am well aware that you stated your goal was "to produce an emulator that has as compact source code as possible" -- I'm hearing you on FM):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void Ins&#40;&#41;&nbsp; &nbsp; &nbsp; &nbsp;// With template magic, the compiler will literally synthesize &gt;256 different functions.<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; // Note: op 0x100 means &quot;NMI&quot;, 0x101 means &quot;Reset&quot;, 0x102 means &quot;IRQ&quot;. They are implemented in terms of &quot;BRK&quot;.<br />&nbsp; &nbsp; &nbsp; &nbsp; // User is responsible for ensuring that WB&#40;&#41; will not store into memory while Reset is being processed.<br />&nbsp; &nbsp; &nbsp; &nbsp; unsigned addr=0, d=0, t=0xFF, c=0, sb=0, pbits = op&lt;0x100 ? 0x30 : 0x20;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; // Define the opcode decoding matrix, which decides which micro-operations constitute<br />&nbsp; &nbsp; &nbsp; &nbsp; // any particular opcode. &#40;Note: The PLA of 6502 works on a slightly different principle.&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; enum &#123; o8 = op/8, o8m = 1 &lt;&lt; &#40;op%8&#41; &#125;;<br />&nbsp; &nbsp; &nbsp; &nbsp; // Fetch op'th item from a bitstring encoded in a data-specific variant of base64,<br />&nbsp; &nbsp; &nbsp; &nbsp; // where each character transmits 8 bits of information rather than 6.<br />&nbsp; &nbsp; &nbsp; &nbsp; // This peculiar encoding was chosen to reduce the source code size.<br />&nbsp; &nbsp; &nbsp; &nbsp; // Enum temporaries are used in order to ensure compile-time evaluation.<br />&nbsp; &nbsp; &nbsp; &nbsp; #define t&#40;s,code&#41; &#123; enum &#123; \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i=o8m &amp; &#40;s&#91;o8&#93;&gt;90 ? &#40;130+&quot; &#40;&#41;,-089&lt;&gt;?BCFGHJLSVWZ&#91;^hlmnxy|&#125;&quot;&#91;s&#91;o8&#93;-94&#93;&#41; \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : &#40;s&#91;o8&#93;-&quot; &#40;&#40;&quot;&#91;s&#91;o8&#93;/39&#93;&#41;&#41; &#125;; if&#40;i&#41; &#123; code; &#125; &#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; /* Decode address operand */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !&quot;, addr = 0xFFFA&#41; // NMI vector location<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&quot;, addr = 0xFFFC&#41; // Reset vector location<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;,&quot;, addr = 0xFFFE&#41; // Interrupt vector location<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;zy&#125;z&#123;y&#125;zzy&#125;zzy&#125;zzy&#125;zzy&#125;zzy&#125;zzy&#125;z &quot;, addr = RB&#40;PC++&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;2 yy2 yy2 yy2 yy2 XX2 XX2 yy2 yy &quot;, d = X&#41; // register index<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; 62&nbsp; 62&nbsp; 62&nbsp; 62&nbsp; om&nbsp; om&nbsp; 62&nbsp; 62 &quot;, d = Y&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;2 y 2 y 2 y 2 y 2 y 2 y 2 y 2 y&nbsp; &quot;, addr=u8&#40;addr+d&#41;; d=0; tick&#40;&#41;&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // add zeropage-index<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot; y z!y z y z y z y z y z y z y z &quot;, addr=u8&#40;addr&#41;;&nbsp; &nbsp;addr+=256*RB&#40;PC++&#41;&#41;&nbsp; &nbsp; &nbsp; &nbsp;// absolute address<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;3 6 2 6 2 6 286 2 6 2 6 2 6 2 6 /&quot;, addr=RB&#40;c=addr&#41;; addr+=256*RB&#40;wrap&#40;c,c+1&#41;&#41;&#41;// indirect w/ page wrap<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; *Z&nbsp; *Z&nbsp; *Z&nbsp; *Z&nbsp; &nbsp; &nbsp; 6z&nbsp; *Z&nbsp; *Z &quot;, Misfire&#40;addr, addr+d&#41;&#41; // abs. load: extra misread when cross-page<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; 4k&nbsp; 4k&nbsp; 4k&nbsp; 4k&nbsp; 6z&nbsp; &nbsp; &nbsp; 4k&nbsp; 4k &quot;, RB&#40;wrap&#40;addr, addr+d&#41;&#41;&#41;// abs. store: always issue a misread<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Load source operand */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;aa__ff__ab__,4&nbsp; ____ -&nbsp; ____&nbsp; &nbsp; &nbsp;&quot;, t &amp;= A&#41; // Many operations take A or X as operand. Some try in<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; knnn&nbsp; &nbsp; &nbsp;4&nbsp; 99&nbsp; &nbsp;&quot;, t &amp;= X&#41; // error to take both; the outcome is an AND operation.<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 9989&nbsp; &nbsp; 99&nbsp; &nbsp; &nbsp; &nbsp;&quot;, t &amp;= Y&#41; // sty,dey,iny,tya,cpy<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, t &amp;= S&#41; // tsx, las<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;!!!!&nbsp; !!&nbsp; !!&nbsp; !!&nbsp; !&nbsp; &nbsp;!!&nbsp; !!&nbsp; !!/&quot;, t &amp;= P.raw|pbits; c = t&#41;// php, flag test/set/clear, interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;_^__dc___^__&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ed__98&nbsp; &nbsp;&quot;, c = t; t = 0xFF&#41;&nbsp; &nbsp; &nbsp; &nbsp; // save as second operand<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;vuwvzywvvuwvvuwv&nbsp; &nbsp; zy|zzywvzywv &quot;, t &amp;= RB&#40;addr+d&#41;&#41; // memory operand<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;,2&nbsp; ,2&nbsp; ,2&nbsp; ,2&nbsp; -2&nbsp; -2&nbsp; -2&nbsp; -2&nbsp; &nbsp;&quot;, t &amp;= RB&#40;PC++&#41;&#41;&nbsp; &nbsp;// immediate operand<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Operations that mogrify memory operands directly */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; 88&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, P.V = t &amp; 0x40; P.N = t &amp; 0x80&#41; // bit<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; nink&nbsp; &nbsp; nnnk&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, sb = P.C&#41;&nbsp; &nbsp; &nbsp; &nbsp;// rol,rla, ror,rra,arr<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;nnnknnnk&nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, P.C = t &amp; 0x80&#41; // rol,rla, asl,slo,&#91;arr,anc&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; nnnknink&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, P.C = t &amp; 0x01&#41; // lsr,sre, ror,rra,asr<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;ninknink&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, t = &#40;t &lt;&lt; 1&#41; | &#40;sb * 0x01&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; nnnknnnk&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, t = &#40;t &gt;&gt; 1&#41; | &#40;sb * 0x80&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; kink&nbsp; &nbsp; &nbsp;&quot;, t = u8&#40;t - 1&#41;&#41;&nbsp; // dec,dex,dey,dcp<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; khnk &quot;, t = u8&#40;t + 1&#41;&#41;&nbsp; // inc,inx,iny,isb<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Store modified value &#40;memory&#41; */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;kgnkkgnkkgnkkgnkzy|J&nbsp; &nbsp; kgnkkgnk &quot;, WB&#40;addr+d, t&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;q&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, WB&#40;wrap&#40;addr, addr+d&#41;, t &amp;= &#40;&#40;addr+d&#41; &gt;&gt; 8&#41;&#41;&#41; // &#91;shx,shy,shs,sha?&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Some operations used up one clock cycle that we did not account for yet */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;rpstljstqjstrjst - - - -kjstkjst/&quot;, tick&#40;&#41;&#41; // nop,flag ops,inc,dec,shifts,stack,transregister,interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Stack operations and unconditional jumps */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp;!&nbsp; !&nbsp; &nbsp; !&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, tick&#40;&#41;; t = Pop&#40;&#41;&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // pla,plp,rti<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; !&nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;, RB&#40;PC++&#41;; PC = Pop&#40;&#41;; PC |= &#40;Pop&#40;&#41; &lt;&lt; 8&#41;&#41; // rti,rts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;, RB&#40;PC++&#41;&#41;&nbsp; // rts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;!&nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/&quot;, d=PC+&#40;op?-1:1&#41;; Push&#40;d&gt;&gt;8&#41;; Push&#40;d&#41;&#41;&nbsp; &nbsp; &nbsp; // jsr, interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;!&nbsp; &nbsp;!&nbsp; &nbsp; 8&nbsp; &nbsp;8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&quot;, PC = addr&#41; // jmp, jsr, interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;!!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&quot;, Push&#40;t&#41;&#41;&nbsp; &nbsp;// pha, php, interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Bitmasks */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;! !!&nbsp; !!&nbsp; !!&nbsp; !!&nbsp; !&nbsp; &nbsp;!!&nbsp; !!&nbsp; !!/&quot;, t = 1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; !&nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;!!&nbsp; !! &quot;, t &lt;&lt;= 1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;! !&nbsp; &nbsp;!&nbsp; &nbsp;!!&nbsp; !!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp;!&nbsp; &nbsp;!/&quot;, t &lt;&lt;= 2&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; !&nbsp; &nbsp;!&nbsp; &nbsp;!&nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp; !&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, t &lt;&lt;= 4&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp;!____ &quot;, t = u8&#40;~t&#41;&#41; // sbc, isb,&nbsp; &nbsp; &nbsp; clear flag<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;`^__&nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;!/&quot;, t = c | t&#41;&nbsp; // ora, slo,&nbsp; &nbsp; &nbsp; set flag<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; !!dc`_&nbsp; !!&nbsp; !&nbsp; &nbsp;!&nbsp; &nbsp;!!&nbsp; !!&nbsp; !&nbsp; &quot;, t = c &amp; t&#41;&nbsp; // and, bit, rla, clear/test flag<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; _^__&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, t = c ^ t&#41;&nbsp; // eor, sre<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Conditional branches */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; !&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &quot;, if&#40;t&#41;&nbsp; &#123; tick&#40;&#41;; Misfire&#40;PC, addr = s8&#40;addr&#41; + PC&#41;; PC=addr; &#125;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; !&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &quot;, if&#40;!t&#41; &#123; tick&#40;&#41;; Misfire&#40;PC, addr = s8&#40;addr&#41; + PC&#41;; PC=addr; &#125;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Addition and subtraction */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _^__&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ____ &quot;, c = t; t += A + P.C; P.V = &#40;c^t&#41; &amp; &#40;A^t&#41; &amp; 0x80; P.C = t &amp; 0x100&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ed__98&nbsp; &nbsp;&quot;, t = c - t; P.C = ~t &amp; 0x100&#41; // cmp,cpx,cpy, dcp, sbx<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Store modified value &#40;register&#41; */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;aa__aa__aa__ab__ 4 !____&nbsp; &nbsp; ____ &quot;, A = t&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nnnn 4&nbsp; &nbsp;!&nbsp; &nbsp;&quot;, X = t&#41; // ldx, dex, tax, inx, tsx,lax,las,sbx<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; 9988 !&nbsp; &nbsp; &nbsp; &nbsp;&quot;, Y = t&#41; // ldy, dey, tay, iny<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, S = t&#41; // txs, las, shs<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;!&nbsp; ! ! !!&nbsp; !&nbsp; &nbsp;!&nbsp; &nbsp; &nbsp; &nbsp;!&nbsp; &nbsp;!&nbsp; &nbsp;!/&quot;, P.raw = t &amp; ~0x30&#41; // plp, rti, flag set/clear<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Generic status flag updates */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;wwwvwwwvwwwvwxwv 5 !&#125;&#125;||&#123;&#125;wv&#123;&#123;wv &quot;, P.N = t &amp; 0x80&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;wwwv||wvwwwvwxwv 5 !&#125;&#125;||&#123;&#125;wv&#123;&#123;wv &quot;, P.Z = u8&#40;t&#41; == 0&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;, P.V = &#40;&#40;&#40;t &gt;&gt; 5&#41;+1&#41;&amp;2&#41;&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// &#91;arr&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; /* All implemented opcodes are cycle-accurate and memory-access-accurate.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* &#91;&#93; means that this particular separate rule exists only to provide the indicated unofficial opcode&#40;s&#41;.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br />&nbsp; &nbsp; &#125;<br /></div><br /><br />EDIT: Oh, I guess I'll include another bit.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; void Op&#40;&#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Check the state of NMI flag */<br />&nbsp; &nbsp; &nbsp; &nbsp; bool nmi_now = nmi;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; unsigned op = RB&#40;PC++&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; if&#40;reset&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123; op=0x101; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; else if&#40;nmi_now &amp;&amp; !nmi_edge_detected&#41; &#123; op=0x100; nmi_edge_detected = true; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; else if&#40;intr &amp;&amp; !P.I&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123; op=0x102; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; if&#40;!nmi_now&#41; nmi_edge_detected=false;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; // Define function pointers for each opcode &#40;00..FF&#41; and each interrupt &#40;100,101,102&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; #define c&#40;n&#41; Ins&lt;0x##n&gt;,Ins&lt;0x##n+1&gt;,<br />&nbsp; &nbsp; &nbsp; &nbsp; #define o&#40;n&#41; c&#40;n&#41;c&#40;n+2&#41;c&#40;n+4&#41;c&#40;n+6&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; static void&#40;*const i&#91;0x108&#93;&#41;&#40;&#41; =<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o&#40;00&#41;o&#40;08&#41;o&#40;10&#41;o&#40;18&#41;o&#40;20&#41;o&#40;28&#41;o&#40;30&#41;o&#40;38&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o&#40;40&#41;o&#40;48&#41;o&#40;50&#41;o&#40;58&#41;o&#40;60&#41;o&#40;68&#41;o&#40;70&#41;o&#40;78&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o&#40;80&#41;o&#40;88&#41;o&#40;90&#41;o&#40;98&#41;o&#40;A0&#41;o&#40;A8&#41;o&#40;B0&#41;o&#40;B8&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o&#40;C0&#41;o&#40;C8&#41;o&#40;D0&#41;o&#40;D8&#41;o&#40;E0&#41;o&#40;E8&#41;o&#40;F0&#41;o&#40;F8&#41; o&#40;100&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;;<br />&nbsp; &nbsp; &nbsp; &nbsp; #undef o<br />&nbsp; &nbsp; &nbsp; &nbsp; #undef c<br />&nbsp; &nbsp; &nbsp; &nbsp; i&#91;op&#93;&#40;&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; reset = false;<br />&nbsp; &nbsp; &#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Dec 08, 2011 3:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><img src="http://images.cheezburger.com/completestore/2009/10/9/128995851346238364.jpg" alt="Image" />
<br /><em><span style="font-size: 75%; line-height: normal">I know some of you don't like such images, but it's just a bit of humor, needless to say, eh?</span></em>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Dec 08, 2011 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><!-- m --><a class="postlink" href="http://www.ioccc.org/">http://www.ioccc.org/</a><!-- m --> :P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Thu Dec 08, 2011 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">http://www.ioccc.org/ :P</div>
<br />2006 winner entries are finally available? Oh goodie! Thanks for telling.
<br />
<br />EDIT: Oh, and in all honesty, I was partially inspired by the 2005 winner that does a 6502 emulator (Commodore PET). But both algorithmically and structurally my emulator is very different. Mr. Sykes's emulator used addressing mode &amp; operation tables and switch-cases, albeit constructed from ?: operators. I studied his submission in great detail some time in 2009, deobfuscating it entirely. I doubt his approach would have worked well with my goals of accuracy and feature-completeness.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sleepy9090</b> [ Fri Dec 09, 2011 12:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />cry

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Fri Dec 09, 2011 4:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">sleepy9090 wrote:</div><div class="quotecontent">cry</div>
<br />
<br />I AM ERROR.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Tue Dec 13, 2011 9:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is incredibly cool - and very impressive.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>