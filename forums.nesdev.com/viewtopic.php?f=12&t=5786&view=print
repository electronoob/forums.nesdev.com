<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - BSNES debugger</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">BSNES debugger</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=5786">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=5786</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Wed Dec 02, 2009 1:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>BSNES debugger</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really appreciate being able to debug with an emulator that's much more accurate than snes9x, and the VRAM viewer is nice to have. But there are a few things I wondered about..
<br />
<br />If I press "step", the console isn't updated automatically. I have to click in the main emulator window for the console to be updated. That makes stepping extremely tedious. I hope that's not the intended behaviour (this is on Vista 32-bit).
<br />
<br />It would be nice to see not just the latest executed instruction, but also a disassembly of the code around it. Something like <a href="http://dualis.1emu.net/screens/desktop2.png" class="postlink">this</a> (you don't have to make your disassembler look as ugly as mine).
<br />
<br />A palette viewer is a really simple addition, but can also be helpful sometimes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Dec 02, 2009 3:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BSNES debugger</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mic_ wrote:</div><div class="quotecontent">If I press "step", the console isn't updated automatically. I have to click in the main emulator window for the console to be updated. That makes stepping extremely tedious. I hope that's not the intended behaviour (this is on Vista 32-bit).</div><br /><br />Go to Settings -&gt; Configuration -&gt; Advanced and under "When main window does not have focus:", set it to "Ignore Input".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It would be nice to see not just the latest executed instruction, but also a disassembly of the code around it. Something like <a href="http://dualis.1emu.net/screens/desktop2.png" class="postlink">this</a> (you don't have to make your disassembler look as ugly as mine).</div><br /><br />SNES code cannot be disassembled ahead of or behind the current position without some sort of emulation happening, this is because the processor has variable-length opcodes.<br />I am aware there are plenty of workarounds, and there are pitfalls and shortcomings to all of them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A palette viewer is a really simple addition, but can also be helpful sometimes.</div>
<br />
<br />May make it in eventually.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Dec 02, 2009 9:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BSNES debugger</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">SNES code cannot be disassembled ahead of or behind the current position without some sort of emulation happening, this is because the processor has variable-length opcodes.<br />I am aware there are plenty of workarounds, and there are pitfalls and shortcomings to all of them.</div>
<br />Whatever workaround Nintendulator and FCEU series use to disassemble ROM while emulating the mapper is probably worth it. Or are you referring specifically to sep and rep?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Dec 02, 2009 11:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To the opcodes rep and sep can affect the size of, at least.
<br />
<br />Okay, example:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">routine1:<br />&nbsp; lda $2180<br />&nbsp; jsl routine2<br />&nbsp; nop<br />&nbsp; ...<br /><br />routine2:<br />&nbsp; pha<br />&nbsp; plp<br />&nbsp; db $a9,$00,$1a<br />&nbsp; rts</div>
<br />
<br />Does routine 2's db code represent "lda #$1a00" or "lda #$00; inc"?
<br />It depends on the value of $2180, how would a pure disassembler know about that? Further fun is that just by having a fake CPU read that value, it would alter the state of the machine (the WRAM address index) via auto-increment-on-read.
<br />
<br />So to do this, we'd some sort of opcode history for the last several hundred opcodes to disassemble backwards (which may not even be enough if routine1 was too far back), a fake CPU emulator clone of the entire system (or a save state + reload, which is not a 100% non-volatile action in bsnes) to run several opcodes ahead to generate future opcode disassemblies, and a re-implementation of every memory-mapped register (and another for all special chips). Not happening.
<br />
<br />So we need a totally different approach. I would say to keep a large block of memory to keep history information about opcodes that will allow your debugger to show an intelligent forward and backward disassembly as something separate to the main console. Eg log MX states at each specific opcode address, as well as an "is this byte an opcode?" flag so you can backwards seek for opcode disassembly. Should be about 8MB packed.
<br />
<br />It would fall apart on dynamic code executing out of RAM, as well as on polymorphic code that changes its meaning based on M/X states, but for the most part the code would be valid after it was hit by the emulator a single time. Make the history file non-volatile so it works across runs so long as the SHA-1 hash hasn't changed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Dec 03, 2009 8:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">we'd some sort of opcode history for the last several hundred opcodes to disassemble backwards (which may not even be enough if routine1 was too far back)</div><br />I seem to remember reading WDC's data sheet for the 65C816 (from <em>Apple IIGS Hardware Reference</em>) and finding a pin that outputs whether a fetch is the first byte of an instruction. I don't know if the Super NES version of the CPU preserves this signal, but the logic for computing it could be reused to build your "has an opcode been fetched from this physical address?" flag. (Several FCE Ultra derivatives already dunnit.) A second list in RAM could even work for internal RAM ($7E0000/7) as long as the flag is cleared when the corresponding byte is written.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(or a save state + reload, which is not a 100% non-volatile action in bsnes)</div><br />"Non-volatile"? That's a long disambiguation page:<br /><ul><li><a href="http://en.wiktionary.org/wiki/volatile#English" class="postlink">volatile at Wiktionary</a> </li><li><a href="http://en.wikipedia.org/wiki/Volatile" class="postlink">volatile at Wikipedia</a> </li></ul>What exactly do you mean by this? That saving and loading a state is lossy?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and a re-implementation of every memory-mapped register (and another for all special chips).</div>
<br />When tracing into an area that isn't mapped to cart ROM or internal RAM, put the blinders back on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Dec 03, 2009 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is why I hate discussing technical things. I don't always get the jargon right and people don't make an attempt to understand what I'm saying. I don't mean that in a bad way directed at you, it's much more my fault for getting the terms wrong.
<br />
<br />&gt; "Non-volatile"?
<br />
<br />When you close the emulator / game, it writes the file to disk. When you load the game, it reads it back from disk and continues. Like save RAM.
<br />
<br />&gt; What exactly do you mean by this? That saving and loading a state is lossy?
<br />
<br />If you save a state and reload it, you won't have the exact same state that you started with. This is because in order to save a state in my multi-threaded (as opposed to state machine based) application, each thread has to be aligned to its entry point. That requires running the system ahead by up to one opcode.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Dec 03, 2009 10:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">To the opcodes rep and sep can affect the size of, at least.<br /><br />Okay, example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">routine1:<br />&nbsp; lda $2180<br />&nbsp; jsl routine2<br />&nbsp; nop<br />&nbsp; ...<br /><br />routine2:<br />&nbsp; pha<br />&nbsp; plp<br />&nbsp; db $a9,$00,$1a<br />&nbsp; rts</div><br /><br />Does routine 2's db code represent "lda #$1a00" or "lda #$00; inc"?<br /></div>
<br />
<br />There is no correct answer to your example, because you're explicitly not telling us whether or not bit #5 of P is 1 (8-bit accum) or 0 (16-bit accum) -- it's all based on whatever $2180 returned at the time.  Come on, you know this.  :-)
<br />
<br />Furthermore, tracing changes to bit #5 of P (accum size) and bit #4 of P (index size) is not that hard.  TRaCER did it by following the bits of SEP/REP operations.  Was it flawless?  Heck no -- because TRaCER is not a SNES/SFC emulator.  I didn't bother to deal with PLP, XCE, etc..  TRaCER didn't follow branches/jumps, or emulate any aspect of the 65816; it simply read bytes linearly from a file.
<br />
<br />An emulator can most definitely accomplish this task since it always knows what the bits of P are, and change disassembled output on the fly based on that.  Please don't think of it as "I want to use your emulator to disassemble a game", think of it as "I want to see a disassembly listing of the code around the area of PC".  Or, think of it as a 65816-specific version of IDA Pro.
<br />
<br />Could this take up a lot of memory?  Sure -- depends on how much detail you track as the emulator runs.  Given that most x86 PCs today have 2GB RAM or more, I really can't imagine this being a problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Dec 03, 2009 10:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">There is no correct answer to your example</div><br />This lack of a correct answer is byuu's entire point: the length of an instruction depends on the MX bits (WDC used "ENVMXDIZC" to label the nine bits of P), which in turn can depend on things that are harder to determine in advance than on an NES. The compromise solution would have only parts of the debugger, not the emulation core, glitch in such a case.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">An emulator can most definitely accomplish this task since it always knows what the bits of P are, and change disassembled output on the fly based on that.</div><br />In theory, you don't even know the opcode bytes around the PC until you fetch them, and fetching has side effects. Imagine trying to execute from PPU registers, for instance. That's why I recommended limiting the scope of disassembly-around-PC to the common cases of WRAM and ROM, which more easily admit a side path to fetching without side effects.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Given that most x86 PCs today have 2GB RAM or more, I really can't imagine [caching instruction lengths] being a problem.</div>
<br />I agree, even on older or portable machines with only 256 MB of RAM, because all such a list will do is double the size of the loaded ROM, and even then only when the debugger is turned on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>magno</b> [ Thu Dec 03, 2009 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BSNES debugger</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mic_ wrote:</div><div class="quotecontent">It would be nice to see not just the latest executed instruction, but also a disassembly of the code around it. Something like <a href="http://dualis.1emu.net/screens/desktop2.png" class="postlink">this</a>.</div>
<br />
<br />What debugger is that one? I've never seen it...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Thu Dec 03, 2009 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What debugger is that one? I've never seen it...</div>
<br />That's from Dualis - my Nintendo DS emulator (which I haven't worked on for the past 2 years).
<br />
<br />Anyway, back on topic. Why I made this suggestion to byuu was because it's nice to be able scroll around in the code (or Ctrl-G to a specific address) and see the instruction in the context of its neighboring instructions, instead of just each one individually as you step forward. Plus it makes it a hell of a lot easier to determine where to place breakpoints.
<br />
<br />And no, I don't care at all if it would fail for the I/O register areas. ROM is prio 1, 65816 WorkRAM is prio 2, anything else is just a bonus.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Dec 03, 2009 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">This lack of a correct answer is byuu's entire point</div><br /><br />Exactly right :D<br /><br />I really don't want to seem rude, but if you double-check my post, I even explained why it's not simple to track P and a potential workaround that eats lots of memory, as you were suggesting.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">That's why I recommended limiting the scope of disassembly-around-PC to the common cases of WRAM and ROM, which more easily admit a side path to fetching without side effects.</div>
<br />
<br />Indeed, that's great advice. I do exactly that, block any potentially state-changing reads or writes, including from my indirect -&gt; direct address translation. Worst case is your debugger gives you a weird result. If the user applies a tiny bit of thought, they'll understand why.
<br />
<br />I do need to extend it a little better though, it doesn't currently block on DSP-n memory-mapped commands. I should specialize the function based on the active special chips.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Dec 03, 2009 11:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This lack of a correct answer is byuu's entire point: the length of an instruction depends on the MX bits (WDC used "ENVMXDIZC" to label the nine bits of P), which in turn can depend on things that are harder to determine in advance than on an NES. The compromise solution would have only parts of the debugger, not the emulation core, glitch in such a case.</div><br /><br />You'll have to show me proof that tracking M/X of P is simply not sufficient enough.  I'm having a very hard time believing otherwise.<br /><br />With regards to the last sentence: you'll have to explain what you mean by "glitch".  There's really nothing glitchy about it -- you'd have to modify the output (disassembly) every time M/X of P is changed, which is why I recommended only disassembling certain areas around PC.<br /><br />This is exactly how GSBug back in the Apple IIGS days did it, and it worked wonderfully.  None of us had any complaints.  There were always conditions where you'd scroll around to examine areas of RAM which hadn't executed yet and get inaccurate results -- but that's just the nature of the beast.  Anyone working on this processor should know that ahead of time, else send their complaints to /dev/null.<br /><br />There's no easy way to describe what I'm trying to say with text, I suppose.  Basically the section of code which was disassembled (visually on the screen) was based on what M/X of P was at the time.  If the executing code changed either bit, the disassembly shown on-screen would change.<br /><br />I'd have to set up my IIGS and get GSBug on there to show you exactly what I'm talking about.  Once you show GSBug someone who's familiar with 65816 (but hasn't ever used said debugger), they go totally berserk with joy.  It's a wonderful tool.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's why I recommended limiting the scope of disassembly-around-PC to the common cases of WRAM and ROM, which more easily admit a side path to fetching without side effects.</div>
<br />
<br />Yep, I'd agree with this as well.  Chances are majority of debugging will be done with regards to code executing in those areas.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Dec 04, 2009 12:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You'll have to show me proof that tracking M/X of P is simply not sufficient enough. I'm having a very hard time believing otherwise.</div>
<br />
<br />If you're meaning TRaCER style prediction based purely on disassembly, I'm definitely not going to go there. It is much too error prone, and I say that as a ROM hacker who used to use TRaCER (and Louis Bontes' ISDA) quite a it back in the day.
<br />
<br />But you're right that if we track MX during execution, we can do a great job of forward disassembly. Add in "is this offset a known opcode" tracking and we can include backward disassembly.
<br />
<br />I'm probably just going to merge two of my goals in one with this. I'll keep track of read/write/execute/coprocessor execute/M/X in a 16MB table to represent the full 24-bit address bus.
<br />
<br />This will be a useful tool for analysis of existing game code, eg to find unused sections of RAM for your inserted routines. It can also be used directly by intelligent disassemblers to aid those who make things like those SMB1 complete disassembly listings.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Dec 04, 2009 12:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">You'll have to show me proof that tracking M/X of P is simply not sufficient enough.</div><br />Load I/O register, pha, plp, as in byuu's example. That makes MX sufficiently unpredictable. But I agree that most non-pathological code shouldn't need it; tracking rep and sep should cover the common case of reading ahead to code that hasn't executed yet. It's again the tradeoff between compatibility (handling the common cases well) and accuracy (handling unknown cases well).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's no easy way to describe what I'm trying to say with text, I suppose.  Basically the section of code which was disassembled (visually on the screen) was based on what M/X of P was at the time.</div>
<br />And by "glitch", I was just referring to the kind of full-screen change one sees in GSBug when MX changes. Even a disassembler that tracks rep and sep might "glitch" after executing a plp. But how did GSBug know where to <em>start</em> disassembling to provide a list of instructions before PC?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun Dec 06, 2009 5:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Added read/write/execute/M/X tracking to the latest WIP, which allows disassembly in both directions, with the caveat that code has to be executed at least one time. Screenshot:
<br /><!-- m --><a class="postlink" href="http://byuu.org/images/bsnes_20091206.png">http://byuu.org/images/bsnes_20091206.png</a><!-- m -->
<br />
<br />I'm going to add this same support for the S-SMP, SuperFX and SA-1 eventually. I don't really intend to add a scrollbar as that's obviously not going to work well since we always have to start from the current offset. I may add a manual offset seek function though. For now it updates when you step the CPU.
<br />
<br />I'll link to a WIP that has it in the 21fx thread.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>