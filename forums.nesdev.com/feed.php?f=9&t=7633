<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=7633" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-06-04T23:59:55-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=7633</id>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-06-04T23:59:55-07:00</updated>
<published>2012-06-04T23:59:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95037#p95037</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95037#p95037"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95037#p95037"><![CDATA[
<div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />Is it just that people are relating the PPU and CPU cycles using the NTSC codification because it's convenient?<br /></div><br /><br />I think the main reason is it's not well understood what drives the filtering other than time, so depending what you're considering one would discuss time relative to either the PPU or CPU.  I've been relating PPU and CPU cycles because I consider the time measured by the CPU.  However most documentation I've seen measures this time by PPU cycles so I've converted that to NTSC PPU cycles in most of my discussions because that's the 'norm'.  I think it's more to do with the knowledge of what's actually going on vice just convenience.  But I admit I've been ingorant to PAL in my conversions during discussion.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Is there a reason why CPU cycles need to be discussed at all that I'm missing?<br /></div><br />If the time filtering is done by CPU cycles then there IS a reason to discuss CPU cycles.  I have good reason to suspect this is what the actual MMC3 hardware is actually doing, and I've gotten it to work in my implementation as well.  However if my presumptions are wrong then yes my discussions of CPU cycles is moot in regards to the actual MMC3, yet it's still valid for all of the MMC3 reimplementations I'm aware of.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />M2 would cycle differently relative to CHR A12 in a PAL MMC3 game would it not?<br /></div><br />Yes it would.  Keep in mind though that M2 cycle timing is different relative to CHR A12 on any NES though due to PPU/CPU alignment unknowns.  So there is some uncertainty in ANY system, but like Drag said I don't think that uncertainty is much more in PAL systems.  Whatever the slight difference is it must be manageable since how PAL games use the MMC3 no problem.<br /><br /><br />EDIT: oh and I did find some further checking in my notes.  With the capacitor installed I found that &lt;4 CPU cycles of filtering was good enough for SMB3 but a little glitchy on Klax (J).  So my guess is the minimum required filtering would be 4-5 CPU cycles, mine works great with 5 currently.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Jun 04, 2012 11:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-06-04T20:33:02-07:00</updated>
<published>2012-06-04T20:33:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95033#p95033</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95033#p95033"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95033#p95033"><![CDATA[
<div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />With all this talk about PPU and CPU cycles there seems to be the implicit conclusion that 1 CPU cycle is 3 PPU cycles.  This would imply NTSC.  Now I wonder...are there any PAL games that use MMC3?<br /><br />Is it just that people are relating the PPU and CPU cycles using the NTSC codification because it's convenient?  Is there a reason why CPU cycles need to be discussed at all that I'm missing?  M2 would cycle differently relative to CHR A12 in a PAL MMC3 game would it not?<br /></div><br />I was only using pixels because 1 pixel = 1 ppu cycle, 1 memory fetch = 2 ppu cycles, and that's basically what drives A12. However, if it turns out that M2 is what drives the filtering, then the MMC3's scanline counter would behave different on NTSC vs PAL. The difference would only be by a small amount of PPU cycles (maybe not even 1), but it still should be accounted for.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Mon Jun 04, 2012 8:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-06-04T19:10:26-07:00</updated>
<published>2012-06-04T19:10:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95026#p95026</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95026#p95026"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95026#p95026"><![CDATA[
With all this talk about PPU and CPU cycles there seems to be the implicit conclusion that 1 CPU cycle is 3 PPU cycles.  This would imply NTSC.  Now I wonder...are there any PAL games that use MMC3?<br /><br />Is it just that people are relating the PPU and CPU cycles using the NTSC codification because it's convenient?  Is there a reason why CPU cycles need to be discussed at all that I'm missing?  M2 would cycle differently relative to CHR A12 in a PAL MMC3 game would it not?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Mon Jun 04, 2012 7:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-06-04T19:00:10-07:00</updated>
<published>2012-06-04T19:00:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95024#p95024</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95024#p95024"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95024#p95024"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br />Either way, that's not a terrible estimate, but it'd likely require direct pin manipulation to get something more precise.<br /></div><br /><br />Yeah that's what I did with the MMC1.  I'll do it with the MMC3 as well.  It's just monotonous and time consuming, so I've been delaying sitting down and working on it.  I should do it in the next month or two and I'll post the results here.<br /><br />Your test would still be good verification though.  So don't keep yourself from performing your test just because of what I've said.<br /><br />For what it's worth when I was replicating the MMC3 I tried a few values for how many CPU cycles to filter out posedges of CHR A12.  I looked back through my notes and looks like I tried 3-10 CPU cycles before adding my CHR A12 filter cap.  I also changed when the counter was reset.<br /><br />My conclusions:<br />*The counter should reset on the negative edge of CHR A12.  Effectively it looks like the counter has a asynchronous active high reset driven by CHR A12.  I tried making it a sychronous reset where the counter was reset if CHR A12 was high on each rising edge of M2 but it always messed up on SMB3, bucky ohare, and klax.<br /><br />*I tried varying values of the counter output to allow a nearby CHR A12 posedge to clock the counter.  I went from 3-10 the extremes were definetly broken with the sweet spot being around 4-6 cycles.  5 was the best choice but still goofed up from time to time on SMB3 and Klax (J) about a half dozen times for one level worth of play.  Basically the bottom portion of the screen would jump up a scanline or two.<br /><br />*Adding the CHR A12 capacitor was key to clearing up all glitches with the counter reset asynchronously with CHR A12 and filtering out nearby CHR A12 rises until my counter clocked in 5 CPU cycles.  Which equates to 14-16 pixels.<br /><br />After adding the capacitor I'm not sure if I went back and played around with how many cycles to filter out (there's nothing in my notes).  It's possible that more or less would have worked just fine meaning that my major problem was noise when I found 5 to be the sweet spot.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Jun 04, 2012 7:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-06-04T17:08:19-07:00</updated>
<published>2012-06-04T17:08:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95017#p95017</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95017#p95017"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95017#p95017"><![CDATA[
Ah, interesting. That would rule out all but the first of my predicted outcomes, so that saves a lot of headache. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />I'd just like there to be a method we can use that allows a granularity better than 8 pixels, but playing with the sprites is the best I can come up with for now; the CPU won't be much help because each register write takes 12 pixels. :\<br /><br />Either way, that's not a terrible estimate, but it'd likely require direct pin manipulation to get something more precise.<br /><br />It was mentioned earlier in this thread, but using a counter to temporarily disable edge detection might be what the MMC3 is actually doing, and if that counter is clocked by M2, then it'd decrement every 3 pixels, so taking the result from the test and rounding the pixel amount to the nearest 3rd pixel might be a way to add some precision.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Mon Jun 04, 2012 5:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-06-04T13:33:52-07:00</updated>
<published>2012-06-04T13:33:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95012#p95012</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95012#p95012"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95012#p95012"><![CDATA[
I'm interested to find out the results of your test.  My guess is it's only filtering a few pixels.  I've been meaning to fully test this as well but been too lazy.<br /><br /><div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br />This is <em>all</em> assuming that the filtering is done with a capacitor, meaning that <em>in addition</em> for A12 to need to be low for a sufficient amount of time before a rising edge of A12 can be detected, A12 would <em>also</em> need to <em>stay high</em> for a sufficient amount of time, for the rising edge to be detected.<br /></div><br /><br />I can tell you that the filtering is most definitely not all done by the capacitor on the PCB and most likely no internal capacitor in the MMC3.  <br /><br />First off ithe on board capacitor is too small to filter the frequency of CHR A12 which was already pointed out in this thread.  I've actually kind of realized why that capacitor is there.  Turns out the CHR A12 signal is a bit noisy which isn't surprising.  Using a noisy signal for clocking functions causes unpredictable problems.  I noticed this when running SMB3 on the NESDEV1.  Usually it was good, but if you did something that produced a fair amount of sound in the game the menu bar would jitter a bit.  This was most noticeable at the end of the first level where you can use the turtle shell to bust up a bunch of bricks.  I added a small capacitor to the PCB and it was clean as a whistle, I suspect you could see the same result on a few actual games if you removed the capacitor .<br /><br />Secondly there is NO delay between the FIRST posedge of CHR A12 and the generation of the IRQ signal.  If a capacitor was performing the fitering you'd expect the edge from CHR A12 to be delayed by the capacitor by atleast a few pixels.  But it comes IMMEDIATELY, which implies that the first edge is sensed and the subsequent edges are the ones getting filtered.  Not very easy to get that sort of filtering with a mere capacitor.  That's why I agree with Kevtris' take that it's probably filtered based on M2 cycles.  <br /><br />One thing that would be interesting to see is if you just removed M2 from the MMC3.  If that signal is only used for sensing $6000-$7FFF then the MMC3 scanline counter would work like normal and there is some kind of strange time filtering being done by some other means.  If M2 is used for BOTH WRAM addressing and CHR A12 filtering and NOTHING else, then the MMC3 would most likely be stuck in 'allow chr A12 clockings' mode and EVERY positive edge of CHR A12 would clock the counter.  The MMC1 behaves similarly by filtering consecutive writes from RMW operations.  If you remove the M2 signal from the MMC1 it will work aside from WRAM and EVERY write gets written to the shift register so RMW operations result in TWO writes.  The shift register basically is stuck in 'allow writes' state.  Point being the MMC1 filters writes based on PRG R/W durring the PREVIOUS CPU cycle sensed by M2, makes sense they'd do things in a similar manner for MMC3 to me atleast.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Jun 04, 2012 1:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-06-04T17:08:49-07:00</updated>
<published>2012-06-04T13:02:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95011#p95011</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95011#p95011"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=95011#p95011"><![CDATA[
Bump!<br /><br />Anyway, if it hasn't been done yet, I have a way we can test to see <em>approximately</em> what the latency of the scanline counter's A12 monitoring is.<br /><br /><ul><li>Enable 8x16 sprite mode</li><li>Put 8 sprites (OAM0-OAM7) on the same y-coordinate on the screen, disable the rest (move to Y=$FF)</li><li>Set sprites 0 and 7 to tile $00, set the rest to tile $FF</li><li>Repeat, but with 1 and 7 = $00</li><li>Repeat, but with 2 and 7 = $00</li><li>Keep repeating until 6 and 7 = $00</li></ul><br />Check how this affects the scanline counter, I've predicted a couple of possibilities:<br /><ul><li>The scanline counter will clock twice when the tile $00 sprites are too far apart. (This would mean that the MMC3 only filters out a small amount of pixels, enough to ignore the two dummy nametable reads that occur before each sprite tile fetch, but not enough to cause the MMC3 to ignore a single read to $1xxx)</li><li>The scanline counter won't clock at all, unless sprites 6 and 7 are the $00 sprites. (This would mean the MMC3 is filtering more than a couple of pixels, enough that a single $1xxx read isn't enough to clock the counter, but two $1xxx reads (with a $2xxx read between them) is)</li><li>The scanline counter just won't clock at all, period. (This would mean that two $1xxx reads (with a $2xxx read between them) isn't enough to clock the counter)</li></ul><br />If the first option (scanline counter clocks twice) happens, then we can figure out how close the sprites need to be in order for the scanline counter to clock correctly. There are 4 pixels of A12=0 between two sprites, and for each tile=$FF sprite between the two tile=$00 sprites, add 8 pixels of A12=0. This will help us figure it out within a granularity of 8 pixels (or 8/3=2.667 CPU cycles).<br /><br />If the third option happens (scanline counter just doesn't clock at all), then repeat the test, but this time, set all 8 sprites to tile $FF, and then one-by-one, set sprite 7 to tile $00, 6 to tile $00, and so on until the scanline counter starts clocking normally.<br /><br />This is <em>all</em> assuming that the filtering is done with a capacitor, meaning that <em>in addition</em> for A12 to need to be low for a sufficient amount of time before a rising edge of A12 can be detected, A12 would <em>also</em> need to <em>stay high</em> for a sufficient amount of time, for the rising edge to be detected. It's possible that the filtering is somehow being done a different way, eliminating the need for A12 to stay high, but requiring A12 to stay low between rising edges.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Mon Jun 04, 2012 1:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-04-14T14:57:25-07:00</updated>
<published>2011-04-14T14:57:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76735#p76735</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76735#p76735"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76735#p76735"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />If it's SMB3, with plenty of RAM, then ORG at $6000 would work as well, wouldn't it?<br /></div><br />Yeah but like I said, having the entry point at $200 (and maximum code size $600 bytes) would make things a lot easier for me.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">It has to have some so that the code entry screen which is run at boot time can pass the codes to the GG hardware. I couldn't find any technical information about that however.<br /></div><br />As I understand it, the last write to the register turns off the registers' write enable.</div><br />Is there any info about this somewhere? What is its power on state? It has to somehow have the registers and the GG firmware ROM enabled on init. If I was unclear, I thought about first putting PowerPak in without GG, then SMB3 with GG. But this is just speculation as I don't have a GG to test with.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Thu Apr 14, 2011 2:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-04-14T14:54:25-07:00</updated>
<published>2011-04-14T14:54:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76734#p76734</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76734#p76734"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76734#p76734"><![CDATA[
I thought the procedure was going to be 1. load bootloader, 2. swap, 3. load test code into SMB3 cart, 4. run. Or would that not work?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Apr 14, 2011 2:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-04-14T14:53:14-07:00</updated>
<published>2011-04-14T14:53:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76732#p76732</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76732#p76732"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76732#p76732"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">It has to have some so that the code entry screen which is run at boot time can pass the codes to the GG hardware. I couldn't find any technical information about that however.<br /></div><br />As I understand it, the last write to the register turns off the registers' write enable.<br /><br />If it's SMB3, with plenty of RAM, then ORG at $6000 would work as well, wouldn't it? I wonder to what extent its NMI and IRQ handlers can be hijacked. Does anyone have a list of games whose NMI and IRQ entry points are in RAM?</div><br />That's right.<br /><br />Also, be careful, $6000 is on the cart, not the NES, so it won't be preserved when you remove the cart and stick a new one in.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu Apr 14, 2011 2:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-04-14T14:16:44-07:00</updated>
<published>2011-04-14T14:16:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76727#p76727</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76727#p76727"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76727#p76727"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />It has to have some so that the code entry screen which is run at boot time can pass the codes to the GG hardware. I couldn't find any technical information about that however.<br /></div><br />As I understand it, the last write to the register turns off the registers' write enable.<br /><br />If it's SMB3, with plenty of RAM, then ORG at $6000 would work as well, wouldn't it? I wonder to what extent its NMI and IRQ handlers can be hijacked. Does anyone have a list of games whose NMI and IRQ entry points are in RAM?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Apr 14, 2011 2:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-04-14T10:40:57-07:00</updated>
<published>2011-04-14T10:40:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76716#p76716</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76716#p76716"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76716#p76716"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">I guess it should be possible to reprogram the Game Genie from the code in RAM by writing to some magic registers?<br /></div><br />I don't think the genie has any magic registers; it has to retain 100% compatibility with all games. As such, every single write has to pass through to the cartridge. Only the genie itself would be able to modify its internal state.</div><br />It has to have some so that the code entry screen which is run at boot time can pass the codes to the GG hardware. I couldn't find any technical information about that however.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Thu Apr 14, 2011 10:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-04-14T10:08:35-07:00</updated>
<published>2011-04-14T10:08:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76715#p76715</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76715#p76715"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76715#p76715"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />I guess it should be possible to reprogram the Game Genie from the code in RAM by writing to some magic registers?<br /></div><br />I don't think the genie has any magic registers; it has to retain 100% compatibility with all games. As such, every single write has to pass through to the cartridge. Only the genie itself would be able to modify its internal state.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu Apr 14, 2011 10:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-04-14T09:36:59-07:00</updated>
<published>2011-04-14T09:36:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76712#p76712</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76712#p76712"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76712#p76712"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br />That's risky though, but I guess if you can perform a SEI before the DMC IRQ occurs, then it wouldn't matter. Also, you'd need to be able to yank the cartridge out of the genie without removing the genie from the connector. Otherwise, I think whatever codes you put in will be erased.<br /></div><br />True. EDIT: I guess it should be possible to reprogram the Game Genie from the code in RAM by writing to some magic registers?<br /><br />If somebody is willing to write some tests and wants me to run them, please .org the code at $200. You can use $0-$2F and $1F0-$7FF for RAM (of course be careful not to overwrite any of your code <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> ). The stack pointer is $FD at entry. Preferably there should be an RTS at the end of the code (this goes back to the bootloader). This would be helpful so that I can run the code using NRPC, which makes it easy for me to run several tests and read back the RAM in between them.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Thu Apr 14, 2011 9:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-04-14T09:17:58-07:00</updated>
<published>2011-04-14T09:17:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76710#p76710</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76710#p76710"/>
<title type="html"><![CDATA[What's going on with the MMC3 counter?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7633&amp;p=76710#p76710"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">There's no way to change this without modifying the rom.<br /></div><br />Unless you have Game Genie (which I don't). =)</div><br />That's risky though, but I guess if you can perform a SEI before the DMC IRQ occurs, then it wouldn't matter. Also, you'd need to be able to yank the cartridge out of the genie without removing the genie from the connector. Otherwise, I think whatever codes you put in will be erased.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu Apr 14, 2011 9:17 am</p><hr />
]]></content>
</entry>
</feed>