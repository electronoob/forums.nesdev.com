<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=11419" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-07-12T09:05:45-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=11419</id>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2014-07-12T09:05:45-07:00</updated>
<published>2014-07-12T09:05:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131035#p131035</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131035#p131035"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131035#p131035"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />There are two solutions to the RAM size mess. One is <a href="http://wiki.nesdev.com/w/index.php/NES_2.0" class="postlink">NES 2.0</a>, an extension to the iNES header that specifies the size of all memories. The other is to assume that carts without a battery are 8K (e.g. Castlevania III) and those with a battery are 16K (e.g. all those Koei games) and use a database of PRG ROM hashes to detect those few games using 32K.<br /></div>The documentation says no known games rely on mirroring, so if the NES 2.0 is not present then you should assume 64K (this also means it may work with new homebrew games requiring 64K but that don't have a NES 2.0 header or the emulator doesn't support NES 2.0 headers). If you want to use a PRG hash database, you can use that to make the RAM smaller than 64K if it is recognized game.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Sat Jul 12, 2014 9:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[fracturedsoul]]></name></author>
<updated>2014-07-12T06:01:00-07:00</updated>
<published>2014-07-12T06:01:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131033#p131033</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131033#p131033"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131033#p131033"><![CDATA[
Metal Slader Glory working! <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />I writted a NES emulator from scratch in vb.net, i writted CPU, PPU, added support to a lot of mappers, everything, but was never able to emulate any mmc5 game other than castlevania 3, for years.... But now, thanks to all your guys and excellent docs at nesdev wiki, i could run Metal Slader Glory, could sound stupid, but this bring tears to my eyes.... (will port this code to my original emulator later)<br /><br />This WRAM had nothing to do with the game not working, it was using ExRAM in mode 2 for storing and reading data, as 1kb of extra ram, but i didn't implemented the reads. Now the game is working, just some garbled graphics, but hell, is working!<br /><br />Here is the code to emulate MMC5:<br />[spoiler]<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* Mirroring especial */<br />extern int mirror&#91;3&#93;; //O MMC5 tem um Mirroring especial<br />extern unsigned char nt&#91;3&#93;&#91;0x3FF&#93;; //O MMC5 pode usar ExRam como NameTable<br /><br />/* RAM Extra */<br />unsigned char ex_ram&#91;1023&#93;; //RAM Extra dentro do MAPPER de 1KB<br />unsigned char mmc5_wram&#91;65535&#93;; //64kb de RAM extra em alguns cartuchos<br /><br />unsigned char mmc5_wram_page;<br />unsigned char mmc5_wram_chip;<br /><br />/* PRG/CHR */<br />unsigned char mmc5_prgsize;<br />unsigned char mmc5_chrsize;<br />unsigned char mmc5_gfx_mode;<br /><br />unsigned char mmc5_chr_page_sprite&#91;7&#93;;<br />unsigned char mmc5_chr_page_background&#91;3&#93;;<br /><br />/* IRQ */<br />unsigned char mmc5_irq_clear;<br />unsigned int mmc5_irq_scanline;<br />unsigned int mmc5_irq_line;<br />unsigned char mmc5_irq_status;<br />unsigned char mmc5_irq_enable;<br /><br />int maskaddr(unsigned char bank) {<br />    if (bank &gt;= PRG * 2) {<br />        unsigned char i = 0xFF;<br />        while ((bank &amp; i) &gt;= PRG * 2) {<br />            i /= 2;<br />        }<br />        return bank &amp; i;<br />    } else {<br />        return bank;<br />    }<br />}<br /><br />void copynt(int nt_num) {<br />    int i;<br />    for (i = 0; i &lt; 1024; i++) {<br />        nt&#91;nt_num&#93;&#91;i&#93; = ex_ram&#91;i&#93;;<br />    }<br />}<br /><br />void mmc5_switch_prg(int address, int bank, int prg_size) {<br />   memcpy(memory + address, romcache + 16 + (maskaddr(bank)  * 0x2000), prg_size);<br />}<br /><br />void mmc5_switch_chr(int bank, int page, int chr_size) {<br />   int prg_size;<br /><br />   int chr_start;<br /><br />   unsigned int address;<br /><br />   address = page * 0x400;<br /><br />   prg_size = 16384;<br />   chr_start = prg_size * PRG;<br /><br />   memcpy(ppu_memory + address, romcache + 16 + chr_start + (bank * 0x400), chr_size);<br />}<br /><br />void mmc5_access(unsigned int address,unsigned char data) {<br />    switch (address) {<br />        case 0x5100: mmc5_prgsize = data &amp; 3; break;<br />        case 0x5101: mmc5_chrsize = data &amp; 3; break;<br />        case 0x5104: mmc5_gfx_mode = data &amp; 3; printf(&quot;gfx mode -&gt; &quot;, mmc5_gfx_mode); break; //OBS: Apenas um modo suportado<br />        case 0x5105: //Mirroring do MMC5<br />            mirror&#91;0&#93; = data &amp; 1;<br />            mirror&#91;1&#93; = (data &amp; 4) &gt;&gt; 2;<br />            mirror&#91;2&#93; = (data &amp; 0x10) &gt;&gt; 4;<br />            mirror&#91;3&#93; = (data &amp; 0x40) &gt;&gt; 6;<br /><br />            if (mmc5_gfx_mode == 1) { //Modo de usar ExRam como NameTable<br />                if (data &amp; 2) {copynt(0);}<br />                if (data &amp; 8) {copynt(1);}<br />                if (data &amp; 0x20) {copynt(2);}<br />                if (data &amp; 0x80) {copynt(3);}<br />            }<br />        break;<br />        case 0x5113:<br />            mmc5_wram_page = data &amp; 3;<br />            mmc5_wram_chip = (data &amp; 4) &gt;&gt; 2;<br />        break;<br />        case 0x5114:<br />        case 0x5115:<br />        case 0x5116:<br />        case 0x5117:<br />            if (data &amp; 0x80) {<br />                switch(address &amp; 7) {<br />                    case 4: if (mmc5_prgsize == 3) mmc5_switch_prg(0x8000, data &amp; 0x7F, 8192); break;<br />                    case 5:<br />                        if ((mmc5_prgsize == 1) || (mmc5_prgsize == 2)) { //16k 8<br />                            mmc5_switch_prg(0x8000, data &amp; 0x7F, 16384);<br />                        } else { //8k A<br />                            mmc5_switch_prg(0xA000, data &amp; 0x7F, 8192);<br />                        }<br />                    break;<br />                    case 6: if ((mmc5_prgsize == 2) || (mmc5_prgsize == 3)) mmc5_switch_prg(0xC000, data &amp; 0x7F, 8192); break;<br />                    case 7:<br />                        switch (mmc5_prgsize) {<br />                            case 0: mmc5_switch_prg(0x8000, data &amp; 0x7F, 32768); break;<br />                            case 1: mmc5_switch_prg(0xC000, data &amp; 0x7F, 16384); break;<br />                            case 2: mmc5_switch_prg(0xE000, data &amp; 0x7F, 8192); break;<br />                        }<br />                    break;<br />                }<br />            } else { //Usa SRAM como... PRG-RAM?<br />                switch(address &amp; 7) {<br />                    case 4: break;<br />                    case 5:<br />                        if ((mmc5_prgsize == 1) || (mmc5_prgsize == 2)) {<br />                            //???<br />                        } else { //METAL SLADER GLORY ESCREVE AQUI !!!!!!!!!!!!<br />                            //???<br />                            //printf(&quot;mmc5 wram\n&quot;);<br />                            memcpy(mmc5_wram + (mmc5_wram_page * 8192) + (mmc5_wram_chip * 8192), romcache + 16 + (maskaddr(data &amp; 0x7F)  * 0x2000), 8192);<br />                            //mmc5_switch_prg(0x8000, data &amp; 0x7F, 16384); break;<br />                        }<br />                    break;<br />                    case 6: break;<br />                }<br />            }<br />        break;<br />        case 0x5120: //CHR Sprite<br />        case 0x5121:<br />        case 0x5122:<br />        case 0x5123:<br />        case 0x5124:<br />        case 0x5125:<br />        case 0x5126:<br />        case 0x5127:<br />            mmc5_chr_page_sprite&#91;address &amp; 7&#93; = data;<br /><br />            switch(mmc5_chrsize) {<br />                case 0: mmc5_switch_chr(mmc5_chr_page_sprite&#91;7&#93;, 0, 8192); break;<br />                case 1:<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;3&#93;, 0, 4096);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;7&#93;, 4, 4096);<br />                break;<br />                case 2:<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;1&#93;, 0, 2048);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;3&#93;, 2, 2048);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;5&#93;, 4, 2048);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;7&#93;, 6, 2048);<br />                break;<br />                case 3:<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;0&#93;, 0, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;1&#93;, 1, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;2&#93;, 2, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;3&#93;, 3, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;4&#93;, 4, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;5&#93;, 5, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;6&#93;, 6, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_sprite&#91;7&#93;, 7, 1024);<br />                break;<br />            }<br />        break;<br />        case 0x5128: //CHR Background<br />        case 0x5129:<br />        case 0x512A:<br />        case 0x512B:<br />            mmc5_chr_page_background&#91;address &amp; 3&#93; = data;<br /><br />            switch(mmc5_chrsize) {<br />                case 1: mmc5_switch_chr(mmc5_chr_page_background&#91;3&#93;, 0, 8192); break;<br />                case 3:<br />                    mmc5_switch_chr(mmc5_chr_page_background&#91;0&#93;, 4, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_background&#91;1&#93;, 5, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_background&#91;2&#93;, 6, 1024);<br />                    mmc5_switch_chr(mmc5_chr_page_background&#91;3&#93;, 7, 1024);<br />                break;<br />            }<br />        break;<br />        case 0x5203: mmc5_irq_line = data; break;<br />        case 0x5204: mmc5_irq_enable = data; break;<br />    }<br /><br />    if (address &gt;= 0x5C00 &amp;&amp; address &lt;= 0x5FFF) {ex_ram&#91;address - 0x5C00&#93; = data;}<br />}<br /><br />unsigned char mmc5_read(unsigned int address) {<br />    unsigned char tmp = 0;<br />    switch (address) {<br />        case 0x5204:<br />            tmp = mmc5_irq_status;<br />            mmc5_irq_status = 0;<br />            mmc5_irq_status &amp;= 0x80;<br />            return tmp;<br />        break;<br />    }<br /><br />    if (address &gt;= 0x5C00 &amp;&amp; address &lt;= 0x5FFF) {return ex_ram&#91;address - 0x5C00&#93;;}<br />}<br /><br />void mmc5_hblank(int scanline) {<br />    if (scanline &lt; 240) {<br />        mmc5_irq_scanline++;<br />        mmc5_irq_status |= 0x40;<br />        mmc5_irq_clear = 0;<br />    }<br /><br />    if (mmc5_irq_scanline == mmc5_irq_line) {<br />        mmc5_irq_status |= 0x80;<br />    }<br />    if (++mmc5_irq_clear &gt; 2) {<br />        mmc5_irq_scanline = 0;<br />        mmc5_irq_status &amp;= ~0x80;<br />        mmc5_irq_status &amp;= ~0x40;<br />    }<br /><br />    if ((mmc5_irq_enable &amp; 0x80) &amp;&amp; (mmc5_irq_status &amp; 0x80) &amp;&amp; (mmc5_irq_status &amp; 0x40)) IRQ();<br />}<br /></div><br />[/spoiler]<br /><br />Next step - fix graphical glitches, but this should be easy.... I hope....<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6601">fracturedsoul</a> — Sat Jul 12, 2014 6:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-07-11T19:09:53-07:00</updated>
<published>2014-07-11T19:09:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131020#p131020</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131020#p131020"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131020#p131020"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />(I still don't understand the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$8000-dfff</tt> claim)<br /></div>Warning: tangent.<br /><br />The original NROM games took the lazy way out, and just tell the PRG ROM to emit data whenever the CPU is accessing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$8000-$FFFF</tt>.<br />This is because the signals coming from the NES already combined the two positive logic signals—M2 NAND A15—to make the signal needed by the ROM in the cartridge.<br />This shortcut is what causes bus conflicts for the slightly-more-advanced discrete logic mappers: the ROM needs the opposite of the signal the 6502 provides for whether to read or write.<br />More advanced mappers, even ones as simple as the MMC1and VRC1, add the extra logic necessary to combine the signal from the NES (/ROMSEL) with R/W so that the ROM only emits data when the CPU is reading from that memory space.<br />The convention for RAM across NES games assumed it would be easier to just map ROM over the entire upper 32 KiB of address space, but that's a convention, not an intrinsic limitation. (As an example, every other 6502-using machine)<br />So it'd be easy for a mapper, such as the MMC5, to include the same bits used to switch between banks to decide whether to bank RAM or ROM in any given address space.<br /><br />It'd be trivial to extend <em>any</em> mapper in this way by adding a 74'139, very similar to how TQROM extends the MMC3 to allow CHR RAM and ROM at the same time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Jul 11, 2014 7:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-07-11T19:04:29-07:00</updated>
<published>2014-07-11T19:04:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131019#p131019</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131019#p131019"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131019#p131019"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Whether or not the game itself actually has that much memory on the cart is irrelevant in this case -- the game code isn't going to magically change on you, i.e. if the game came with 2x8KB (16KB) chips, then the game code is only going to be using up to that much.<br /></div><br />Unless a game relies on mirroring behavior, where writes to banks 1-3 appear in bank 0 and writes to banks 5-7 appear in bank 4.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I have absolutely no idea how much WRAM/PRG-RAM Metal Slader Glory included in the cart<br /></div><br />Apparently Metal Slader Glory isn't in NesCartDB, unlike most other Famicom games.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />, but like I said it doesn't matter from an emulator's perspective -- just preallocate 64KB and don't worry about the &quot;actual size used by the cart&quot;.  Just implement the MMC5 register emulation and you're good to go.<br /></div><br />I don't know; did any NES games do this if the RAM is too big? A lot of Super NES games did.<br /><br /><a href="http://tcrf.net/Tetris_Attack_%28SNES%29#Anti-Piracy_Features" class="postlink"><img src="http://tcrf.net/images/a/a3/Tetrisattackantipiracy.png" alt="Image" /><br />Wrong WRAM size error from Tetris Attack</a><br /><br />There are two solutions to the RAM size mess. One is <a href="http://wiki.nesdev.com/w/index.php/NES_2.0" class="postlink">NES 2.0</a>, an extension to the iNES header that specifies the size of all memories. The other is to assume that carts without a battery are 8K (e.g. Castlevania III) and those with a battery are 16K (e.g. all those Koei games) and use a database of PRG ROM hashes to detect those few games using 32K.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Jul 11, 2014 7:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2014-07-11T18:13:11-07:00</updated>
<published>2014-07-11T18:13:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131017#p131017</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131017#p131017"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131017#p131017"><![CDATA[
<div class="quotetitle">fracturedsoul wrote:</div><div class="quotecontent"><br />Thanks for the quick reply, i managed to fix castlevania 3 graphics with some tweaks on MMC5 IRQ, the IRQ was incorret i guess... Stilla a few garbled graphics, probably related to ExRAM like you said.... But i still don't understand one thing. The doc says:<br /><br />&quot;Note that no commercial games rely on this mirroring -- therefore you can take the easy way out and simply give<br /> all MMC5 games 64k PRG-RAM.&quot;<br /><br />How can i give 64k of ram to the game? How the game would access this 64kb of ram?<br /></div><br />You wouldn't &quot;give 64KBytes of RAM to the game&quot;.  Instead, inside of the emulator you'd just preallocate 64KB of memory somewhere, and that would be used for ExRAM.  The game itself (physically on the cart) might only have 8KB (one 8KB chip), or 16KB (2x8KB chips), or 32KB (1x32KB chip), but could also potentially have 64KB (2x32KB chips).  So an emulator can simply take the easy way out by preallocating 64KB of memory for ExRAM and not actually have to emulate different sizes (8KB vs. 16KB vs. 32KB vs. 64KB).<br /><br />The answer of how a game could address (access) all this memory is describe in register <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5113</tt>.<br /><br />Since the memory we're talking about is accessible via address range <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$6000-7fff</tt> (I still don't understand the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$8000-dfff</tt> claim), and that range is only 8KBytes in size, for chips which are larger than 8KBytes (or multiple chips) there has to be a way to select what &quot;page&quot; (or region) of that chip's memory you want mapped to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$6000-7fff</tt>.<br /><br />The way the game does that is through bits 1-0 of MMC5's <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5113</tt> register.  With only 2 bits to select which &quot;page&quot; you want, that means you're limited to 4 pages (page 0, page 1, page 2, or page 3).  Thus the total amount of addressable RAM that could be accessed is 4*8192 = 32768 (32KB).<br /><br />But don't forget bit 3 of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5113</tt>, which lets you pick &quot;which PRG RAM chip&quot;.  Imagine the game has two (2) 32KB chips on it; now you have pages 0,1,2,3 for chip 0, and pages 0,1,2,3 for chip 1, giving you  2*4*8192 = 65536 (64KB) of possible addressable RAM.<br /><br />Whether or not the game itself actually has that much memory on the cart is irrelevant in this case -- the game code isn't going to magically change on you, i.e. if the game came with 2x8KB (16KB) chips, then the game code is only going to be using up to that much.  But you can safely preallocate 64KBytes in the emulator without any repercussions -- just that the last 48KBytes would never be used.<br /><br />Make more sense?<br /><br />If you want me to give you an actual 6502 code example of how you'd go about accessing the different pages/area and chips, I can write it up for you, just as a demonstration.<br /><br />I have absolutely no idea how much WRAM/PRG-RAM Metal Slader Glory included in the cart, but like I said it doesn't matter from an emulator's perspective -- just preallocate 64KB and don't worry about the &quot;actual size used by the cart&quot;.  Just implement the MMC5 register emulation and you're good to go.<br /><br />One thing I will mention: Metal Slader Glory (the ROM) is apparently 1MByte in size, so it's possible that the MMC5 emulation code in whatever emulator you're improving doesn't actually support that properly; possibly it only works with up to 512KBytes thus it has the wrong ROM page mapped into memory space when the game starts and thus crashes.  I really don't know -- without you actually giving some details (e.g. where the game crashes (show actual 6502 code), what leads up to the crash, or how we can reproduce it) I don't think we can help too much, all we can do is speculate.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Jul 11, 2014 6:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-07-11T18:00:03-07:00</updated>
<published>2014-07-11T18:00:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131016#p131016</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131016#p131016"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131016#p131016"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />PRG RAM to me has always been a strange term because it seems to imply something identical to PRG ROM (i.e. ROM data in the mask ROM that can get swapped in/out by a mapper), yet the memory contents aren't ROM so writes to that memory region would actually change the contents (e.g. self-modifying code within that memory region would be completely valid).<br /></div><br />Plenty of games copy code from PRG ROM to WRAM. <em>The Legend of Zelda</em> is among them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Is PRG RAM somehow &quot;swappable&quot; with a mapper?<br /></div><br />Very few games have bank switched PRG RAM. The only Nintendo boards I know of that include this functionality are SOROM and SXROM (MMC1) and ETROM and EWROM (MMC5). Sunsoft's FME-7/5A/5B IC almost certainly supports this, but no Sunsoft board actually uses it. You can find them by <a href="http://bootgod.dyndns.org:7777/advanced.php" class="postlink">searching NesCartDB</a> for WRAM more than or equal to 16. All but two of <a href="http://bootgod.dyndns.org:7777/search.php?wram_op=%3E%3D%60%40%60&amp;wram=16&amp;group=groupid&amp;field=2&amp;order=asc&amp;rfa=1+2+11+3+9+20+41+53" class="postlink">the results</a> are by Koei.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Jul 11, 2014 6:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2014-07-11T17:51:58-07:00</updated>
<published>2014-07-11T17:51:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131015#p131015</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131015#p131015"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131015#p131015"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />SRAM denotes the memory technology (as opposed to DRAM), and WRAM or PRG RAM denotes which bus it's connected to (as opposed to CHR RAM).<br /></div><br />SRAM vs. DRAM -- sure, fine, that's totally valid.  But the term SRAM is a common abbreviation for &quot;Save RAM&quot;, as in &quot;memory that can be written to and is retained even after the system is powered off**&quot;.<br /><br />I still don't understand the delineation between WRAM and PRG RAM.<br /><br />WRAM to me means Work RAM, as in some memory you can read/write to or execute code from.  Is that not the case?<br /><br />PRG RAM to me has always been a strange term because it seems to imply something identical to PRG ROM (i.e. ROM data in the mask ROM that can get swapped in/out by a mapper), yet the memory contents aren't ROM so writes to that memory region would actually change the contents (e.g. self-modifying code within that memory region would be completely valid).  So what makes PRG RAM any different than normal RAM?  Is PRG RAM somehow &quot;swappable&quot; with a mapper?  (Everything I've found in mapper docs don't seem to imply that it's swappable, just that it's RAM that's physically mapped to some particularly memory range within the NES, ex. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$6000-7ffff</tt> or something).<br /><br />** - Yes I'm aware there can be RAM there that isn't battery-backed, hence RAM that loses its contents after the system is shut off.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Jul 11, 2014 5:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[fracturedsoul]]></name></author>
<updated>2014-07-11T17:44:05-07:00</updated>
<published>2014-07-11T17:44:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131012#p131012</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131012#p131012"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131012#p131012"><![CDATA[
Thanks for the quick reply, i managed to fix castlevania 3 graphics with some tweaks on MMC5 IRQ, the IRQ was incorret i guess... Stilla a few garbled graphics, probably related to ExRAM like you said.... But i still don't understand one thing. The doc says:<br /><br />&quot;Note that no commercial games rely on this mirroring -- therefore you can take the easy way out and simply give<br /> all MMC5 games 64k PRG-RAM.&quot;<br /><br />How can i give 64k of ram to the game? How the game would access this 64kb of ram? I really only want to run metal slader glory, and the game seems to use this thing, it write to 0x5117 and the value says it should use PRG-RAM.<br /><br />The doc also says:<br /><br />&quot;$5114-5117:  [RPPP PPPP]<br />   R = ROM select (0=select RAM, 1=select ROM)  **unused in $5117**<br />   P = PRG page&quot;<br /><br />So i can do value AND 0x80 to get the R to know if the game use PRG-RAM, and value AND 0x7F to get the page. The page would indicate the cart ram? And would start on offset 0? Or is the NES Ram starting at offset 0x6000? But then it would only have 32kb (0x6000 ~ 0xDFFF).<br /><br />The game just show a black screen when i run it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6601">fracturedsoul</a> — Fri Jul 11, 2014 5:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-07-11T17:37:30-07:00</updated>
<published>2014-07-11T17:37:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131010#p131010</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131010#p131010"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131010#p131010"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Yeah, I don't particularly like the inconsistencies in naming conventions used throughout documentation and individuals who can't seem to make up their mind (WRAM vs. SRAM vs. PRG RAM).<br /></div><br />SRAM denotes the memory technology (as opposed to DRAM), and WRAM or PRG RAM denotes which bus it's connected to (as opposed to CHR RAM).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Basically as I understand it what you're asking about is the MMC5's WRAM support where an 8KByte region of WRAM (i.e. PRG RAM) can be mapped to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$6000-7fff</tt> (the docs say also to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$8000-dfff</tt> but I don't see how).<br /></div><br />Let me guess how: the MMC5 decodes the WRAM's enable if the corresponding PRG bank register is set to use SRAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Jul 11, 2014 5:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2014-07-11T17:18:38-07:00</updated>
<published>2014-07-11T17:18:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131009#p131009</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131009#p131009"/>
<title type="html"><![CDATA[Re: Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=131009#p131009"><![CDATA[
Yeah, I don't particularly like the inconsistencies in naming conventions used throughout documentation and individuals who can't seem to make up their mind (WRAM vs. SRAM vs. PRG RAM).<br /><br />Basically as I understand it what you're asking about is the MMC5's WRAM support where an 8KByte region of WRAM (i.e. PRG RAM) can be mapped to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$6000-7fff</tt> (the docs say also to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$8000-dfff</tt> but I don't see how).  The physical WRAM chip on the board can be up to 64KBytes in size.  The register that controls all this is <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5113</tt>.  Basically I treat this as SRAM, as in &quot;up to 64KBytes of RAM that is a physical chip on the cart (and possibly battery-backed?)&quot;.<br /><br />The ExRAM stuff is separate from this.  ExRAM is a 1KByte region of memory that's within the MMC5 itself (the actual mapper chip itself contains the RAM), and it can be used for a multitude of things (see &quot;Overview&quot; or &quot;Disch's Notes&quot; sections in the MMC5 page below -- actually reading the entire &quot;Disch's Notes&quot; section would be worthwhile).<br /><br />As for your glitching graphics in Castlevania 3 -- I've seen this happen on numerous emulators (either when the actual game starts, or especially when panning).  I didn't know if the game actually used ExRAM though, so I ran FCEUX and looking for any writes to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5104</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5105</tt>.  When powering on:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> 0F:E0DF:A9 00     LDA #$00<br /> 0F:E0E1:8D 10 50  STA $5010 = #$E0<br /> 0F:E0E4:8D 04 51  STA $5104 = #$E0<br /> 0F:E0E7:A9 44     LDA #$44<br /> 0F:E0E9:85 25     STA $0025 = #$E4<br /> 0F:E0EB:8D 05 51  STA $5105 = #$E0<br /></div><br />To me, this means use ExRAM as an extra nametable (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">%00</tt> written to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5104</tt>) and vertical mirroring is selected (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$44</tt> to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5105</tt>).<br /><br />However, I noticed that while the actual game is running, it's constantly running these two pieces of code (since I have a breakpoint on <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$5105</tt>):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> 0F:E05B:A5 25     LDA $0025 = #$E4<br /> 0F:E05D:8D 05 51  STA $5105 = #$E4<br />...<br /> 01:9FCB:A9 44     LDA #$44<br /> 01:9FCD:8D 05 51  STA $5105 = #$44<br /></div><br />Note the value <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$e4</tt> (binary <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">%11100100</tt>) in zero page <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$25</tt>.  I had to read the &quot;Disch's Notes&quot; stuff to understand what the actual values here controlled.  The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">%11</tt> written to bits 7,6 would indicate use of ExRAM for the bottom-right nametable.  So that may help you in your quest, or maybe it won't.  Best I could do my first time around looking at CV3 / dealing with MMC5.  :-)<br /><br />Reference: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/MMC5">http://wiki.nesdev.com/w/index.php/MMC5</a><!-- m --><br />Reference: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/MMC5#PRG_RAM_bank_.28.245113.29">http://wiki.nesdev.com/w/index.php/MMC5 ... .245113.29</a><!-- m --><br /><br />P.S. -- Which emulator are you adding MMC5 support for?  I'm curious if it's listed in the never-ending <a href="http://wiki.nesdev.com/w/index.php/Emulators#Under_development" class="postlink">Emulators - Under Development</a> page.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Jul 11, 2014 5:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[fracturedsoul]]></name></author>
<updated>2014-07-10T16:06:17-07:00</updated>
<published>2014-07-10T16:06:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=130975#p130975</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=130975#p130975"/>
<title type="html"><![CDATA[Need help with MMC5 and WRAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11419&amp;p=130975#p130975"><![CDATA[
I started to implement MMC5 on a emulator, castlevania work with graphical glitches (the background show garbled graphics), now i'm trying to add support to other games like metal slader glory, but i don't know exactly what this WRAM is, some places say is cartridge RAM, but other say it's supposed to be written to 0x6000, I tried writting the values suplied to the mapper to 0x6000 but the game still not working....<br /><br />Thanks!  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  And sorry for my bad english.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6601">fracturedsoul</a> — Thu Jul 10, 2014 4:06 pm</p><hr />
]]></content>
</entry>
</feed>