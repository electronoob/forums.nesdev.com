<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - hacking Battletoads to read input from the Famicom Exp port</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">hacking Battletoads to read input from the Famicom Exp port</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16727">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16727</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReverendSA</b> [ Wed Nov 22, 2017 6:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>hacking Battletoads to read input from the Famicom Exp port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi,<br /><br />How can we make Battletoads read input from the Famicom expansion port, for player 1 and player 2? Neither P1 or P2 work, only the hard-wired controllers.<br /><br />Surprisingly battletoads Japan doesn't work with the exp port either.<br /><br />I can test hacks on my Everdrive using my Famicom Hori arcade stick that can switch between Player 1/Player 2.<br /><br />Player 2 mode works on Mario Bros 1 and Mario Bros 3, but did not work on Battletoads or Mario Bros 2 (player 1 does not work for either of these as well).<br /><br />Here is all I could pull from the USA game. This is the routine that handles reading the controls I think? I got this when setting a breakpoint for #$40 (B Button) on $0029. When I was monitoring the RAM, with each button press I was seeing $0029 get changed.<br /><br />I didn't really understand much. Before this routine there is an AND #$40 which seems to impact the controls if changed to #$80 or #$10, etc.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">00:8D78:A2 01&nbsp; &nbsp; &nbsp; &nbsp; LDX #$01<br />&nbsp;00:8D7A:8E 16 40&nbsp; STX $4016 = #$FF<br />&nbsp;00:8D7D:CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DEX<br />&nbsp;00:8D7E:8E 16 40&nbsp; STX $4016 = #$FF<br />&nbsp;00:8D81:A2 08&nbsp; &nbsp; &nbsp; &nbsp;LDX #$08<br />&nbsp;00:8D83:AD 16 40&nbsp; LDA $4016 = #$FF<br />&nbsp;00:8D86:6A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ROR<br />&nbsp;00:8D87:26 15&nbsp; &nbsp; &nbsp;ROL $0015 = #$00<br />&nbsp;00:8D89:AD 17 40&nbsp; LDA $4017 = #$FF<br />&nbsp;00:8D8C:6A&nbsp; &nbsp; &nbsp; &nbsp; ROR<br />&nbsp;00:8D8D:26 16&nbsp; &nbsp; &nbsp;ROL $0016 = #$00<br />&nbsp;00:8D8F:CA&nbsp; &nbsp; &nbsp; &nbsp; DEX<br />&nbsp;00:8D90:D0 F1&nbsp; &nbsp; &nbsp;BNE $8D83<br />&nbsp;00:8D92:A5 15&nbsp; &nbsp; &nbsp;LDA $0015 = #$00<br />&nbsp;00:8D94:AA&nbsp; &nbsp; &nbsp; &nbsp; TAX<br />&nbsp;00:8D95:45 29&nbsp; &nbsp; &nbsp;EOR $0029 = #$40<br />&gt;00:8D97:86 29&nbsp; &nbsp; &nbsp;STX $0029 = #$40<br />&nbsp;00:8D99:25 15&nbsp; &nbsp; &nbsp;AND $0015 = #$00<br />&nbsp;00:8D9B:85 2B&nbsp; &nbsp; &nbsp;STA $002B = #$40<br />&nbsp;00:8D9D:A5 16&nbsp; &nbsp; &nbsp;LDA $0016 = #$00<br />&nbsp;00:8D9F:AA&nbsp; &nbsp; &nbsp; &nbsp; TAX<br />&nbsp;00:8DA0:45 2A&nbsp; &nbsp; &nbsp;EOR $002A = #$00<br />&nbsp;00:8DA2:86 2A&nbsp; &nbsp; &nbsp;STX $002A = #$00<br />&nbsp;00:8DA4:25 16&nbsp; &nbsp; &nbsp;AND $0016 = #$00<br />&nbsp;00:8DA6:85 2C&nbsp; &nbsp; &nbsp;STA $002C = #$00<br />&nbsp;00:8DA8:60&nbsp; &nbsp; &nbsp; &nbsp; RTS -----------------------------------------</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 22, 2017 7:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Each <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ROR</tt> instruction at $8D86 and $8D8C needs to be replaced with these two instructions<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AND #$03&nbsp; ; A = 1 for hardwired, 2 for expansion, 0 for neither<br />CMP #$01&nbsp; ; C = 1 iff this button on either controller is pressed<br /></div><br /><br />Unfortunately, each of these adds 3 bytes to the routine for a total of 6 bytes. My first recommendation would be to eliminate X using a ring counter, but that'd only save one byte. But I can reclaim a few more bytes by turning the next part, a calculation of which buttons on each controller are newly pressed this frame, into a loop:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">P1 = $4016<br />P2 = $4017<br />cur_keys&nbsp; = $15<br />last_keys = $29<br />new_keys&nbsp; = $2B<br /><br />.proc read_pads<br />&nbsp; ldx #$01<br />&nbsp; stx P1<br />&nbsp; lda #$00&nbsp; &nbsp; &nbsp; &nbsp; ; Use A for this because X=1 is needed later<br />&nbsp; sta P1<br />&nbsp; stx cur_keys+1&nbsp; ; Once the 1 gets shifted into carry we're done<br />padbitloop:<br />&nbsp; lda P1<br />&nbsp; and #$03&nbsp; &nbsp; &nbsp; &nbsp; ; A = 1 for hardwired, 2 for expansion, 0 for neither<br />&nbsp; cmp #$01&nbsp; &nbsp; &nbsp; &nbsp; ; C = 1 for some press, 0 for none<br />&nbsp; rol cur_keys+0<br />&nbsp; lda P2<br />&nbsp; and #$03<br />&nbsp; cmp #$01<br />&nbsp; rol cur_keys+1&nbsp; ; On eighth ROL, carry becomes set<br />&nbsp; ; no DEX needed because cur_keys is our loop counter<br />&nbsp; bcc padbitloop<br /><br />&nbsp; ; Because the above expanded by 6 bytes, compensate by eliminating<br />&nbsp; ; the unrolling of last_keys and new_keys calculation<br />&nbsp; ; (from 22 bytes to 15)<br />&nbsp; ; X is still 1 from the above<br />fill_new_keys:<br />&nbsp; lda last_keys,x&nbsp; ; A = keys held last frame<br />&nbsp; eor #$FF&nbsp; &nbsp; &nbsp; &nbsp;; A = keys NOT held last frame<br />&nbsp; and cur_keys,x&nbsp; &nbsp;; A = keys held this frame but not last frame<br />&nbsp; sta new_keys,x<br />&nbsp; lda cur_keys,x<br />&nbsp; sta last_keys,x<br />&nbsp; dex<br />&nbsp; bpl fill_new_keys<br /><br />&nbsp; ; Gained enough for it to fit<br />&nbsp; rts<br />.endproc</div><br />I hope this isn't called in any cycle-timed portions of the game, as it probably won't take the same number of cycles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReverendSA</b> [ Wed Nov 22, 2017 7:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Each <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ROR</tt> instruction at $8D86 and $8D8C needs to be replaced with these two instructions<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AND #$03&nbsp; ; A = 1 for hardwired, 2 for expansion, 0 for neither<br />CMP #$01&nbsp; ; C = 1 iff this button on either controller is pressed<br /></div><br /><br />Unfortunately, each of these adds 3 bytes to the routine for a total of 6 bytes. My first recommendation would be to eliminate X using a ring counter, but that'd only save one byte. But I can reclaim a few more bytes by turning the next part, a calculation of which buttons on each controller are newly pressed this frame, into a loop:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">P1 = $4016<br />P2 = $4017<br />cur_keys&nbsp; = $15<br />last_keys = $29<br />new_keys&nbsp; = $2B<br /><br />.proc read_pads<br />&nbsp; ldx #$01<br />&nbsp; stx P1<br />&nbsp; lda #$00&nbsp; &nbsp; &nbsp; &nbsp; ; Use A for this because X=1 is needed later<br />&nbsp; sta P1<br />&nbsp; stx cur_keys+1&nbsp; ; Once the 1 gets shifted into carry we're done<br />padbitloop:<br />&nbsp; lda P1<br />&nbsp; and #$03&nbsp; &nbsp; &nbsp; &nbsp; ; A = 1 for hardwired, 2 for expansion, 0 for neither<br />&nbsp; cmp #$01&nbsp; &nbsp; &nbsp; &nbsp; ; C = 1 for some press, 0 for none<br />&nbsp; rol cur_keys+0<br />&nbsp; lda P2<br />&nbsp; and #$03<br />&nbsp; cmp #$01<br />&nbsp; rol cur_keys+1&nbsp; ; On eighth ROL, carry becomes set<br />&nbsp; ; no DEX needed because cur_keys is our loop counter<br />&nbsp; bcc padbitloop<br /><br />&nbsp; ; Because the above expanded by 6 bytes, compensate by eliminating<br />&nbsp; ; the unrolling of last_keys and new_keys calculation<br />&nbsp; ; (from 22 bytes to 15)<br />&nbsp; ; X is still 1 from the above<br />fill_new_keys:<br />&nbsp; lda last_keys,x<br />&nbsp; eor #$FF<br />&nbsp; and cur_keys,x<br />&nbsp; sta new_keys,x<br />&nbsp; lda cur_keys,x<br />&nbsp; sta last_keys,x<br />&nbsp; dex<br />&nbsp; bpl fill_new_keys<br /><br />&nbsp; ; Gained enough for it to fit<br />&nbsp; rts<br />.endproc</div></div><br /><br />Can we JSR to unused space (stream of FFs maybe?) and replace some of the code so that we can fit those 3 extra bytes?<br /><br />$9470 has a lot of FF entries it looks like.<br /><br />Maybe JSR $9470 where ROR occurs which would also replace the ROL $0015 (26, 15).<br /><br />Then when we jump, we do <br /><br />AND #$03<br />CMP #$01<br />ROL $0015<br />RTS

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 22, 2017 7:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Long strings of $00 or $FF aren't always unused space, they may very well be the high byte portion of look-up tables containing lots of values between -256 and -1, or 0 and 255. Always use a code/data logger to be sure of what's actually unused.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 22, 2017 7:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />JSR/RTS would add even more cycles than the size optimization that I did find (turning $2B/$2C computation into a loop). Try it; it should fit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReverendSA</b> [ Wed Nov 22, 2017 7:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReverendSA wrote:</div><div class="quotecontent"><br />Can we JSR to unused space (stream of FFs maybe?) and replace some of the code so that we can fit those 3 extra bytes?<br /><br />$9470 has a lot of FF entries it looks like.<br /><br />Maybe JSR $9470 where ROR occurs which would also replace the ROL $0015 (26, 15).<br /><br />Then when we jump, we do <br /><br />AND #$03<br />CMP #$01<br />ROL $0015<br />RTS</div><br /><br />Here is my proposed modified routine (Psuedo):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;<br />LDX #$01<br />STX $4016<br />DEX<br />STX $4016<br />LDX #$08<br />LDA $4016<br />JSR $9470 &lt;--- Changed<br />LDA $4017<br />JSR $9480 &lt;--- Changed<br />DEX<br />BNE $8D83<br />LDA $0015<br />TAX<br />EOR $0029<br />STX $0029<br />AND $0015<br />STA $002B <br />LDA $0016<br />TAX<br />EOR $002A<br />STX $002A<br />AND $0016<br />STA $002C<br />RTS<br /></div><br /><br />At $9470<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AND #$03<br />CMP #$01<br />ROL $0015<br />RTS<br /></div><br /><br />At $9480<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AND #$03<br />CMP #$01<br />ROL $0016<br />RTS<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 22, 2017 7:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Let me restate what I wrote one more time:<br /><br />You probably will not need to move things out to $9470 and $9480. Though I made the first part of the routine longer, I made the second part shorter to compensate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReverendSA</b> [ Wed Nov 22, 2017 7:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Let me restate what I wrote one more time:<br /><br />You probably will not need to move things out to $9470 and $9480. Though I made the first part of the routine longer, I made the second part shorter to compensate.</div><br /><br />Here is what I have based on your post, to replace the entire routine.<br /><br />But for BCC and BPL, I do not understand. Your code said BCC padbitloop, but for BCC all I could see was $90. I don't know if it takes arguments, or works automatically.<br /><br />A2 01<br />8E 16 40<br />A9 00<br />8D 16 40<br />86 16<br />AD 16 40<br />29 03<br />C9 01<br />26 15<br />AD 17 40<br />29 03<br />C9 01<br />26 16<br />90<br />B5 29<br />49 FF<br />35 15<br />95 15<br />B5 15<br />95 29<br />CA<br />10<br />60<br /><br /><br /><strong><span style="font-size: 150%; line-height: normal">Edit:</span></strong><br /><br />Okay, I think the byte next to Branches is FF - X, X being whichever byte you put in there. I revised the above:<br /><br />A2 01<br />8E 16 40<br />A9 00<br />8D 16 40<br />86 16<br />AD 16 40<br />29 03<br />C9 01<br />26 15<br />AD 17 40<br />29 03<br />C9 01<br />26 16<br />90 <strong>EC</strong><br />B5 29<br />49 FF<br />35 15<br />95 15<br />B5 15<br />95 29<br />CA<br />10 <strong>F1</strong><br />60<br /><br />90 E7 should take us back to AD 16 40 (lda P1; padbitloop).<br /><br />10 EC should take us back 13 bytes, to B5 29 (lda last_keys,x; fillnewkeys).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReverendSA</b> [ Wed Nov 22, 2017 9:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Let me restate what I wrote one more time:<br /><br />You probably will not need to move things out to $9470 and $9480. Though I made the first part of the routine longer, I made the second part shorter to compensate.</div><br /><br />For some reason though, pushing the keys does nothing at all. The game is still running though.<br /><br />I've implemented it as you wrote it (I hope). Here is what FCEUX shows:<br /><br /> 00:8D78:A2 01     LDX #$01<br /> 00:8D7A:8E 16 40  STX $4016 = #$FF<br /> 00:8D7D:A9 00     LDA #$00<br /> 00:8D7F:8D 16 40  STA $4016 = #$FF<br /> 00:8D82:86 16     STX $0016 = #$FF<br /> 00:8D84:AD 16 40  LDA $4016 = #$FF<br /> 00:8D87:29 03     AND #$03<br /> 00:8D89:C9 01     CMP #$01<br /> 00:8D8B:26 15     ROL $0015 = #$00<br /> 00:8D8D:AD 17 40  LDA $4017 = #$FF<br /> 00:8D90:29 03     AND #$03<br /> 00:8D92:C9 01     CMP #$01<br /> 00:8D94:26 16     ROL $0016 = #$FF<br /> 00:8D96:90 EC     BCC $8D84<br /> 00:8D98:B5 29     LDA $29,X @ $002B = #$00<br /> 00:8D9A:49 FF     EOR #$FF<br /> 00:8D9C:35 15     AND $15,X @ $0017 = #$55<br /> 00:8D9E:95 15     STA $15,X @ $0017 = #$55<br /> 00:8DA0:B5 15     LDA $15,X @ $0017 = #$55<br /> 00:8DA2:95 29     STA $29,X @ $002B = #$00<br /> 00:8DA4:CA        DEX<br /> 00:8DA5:10 F1     BPL $8D98<br /> 00:8DA7:60        RTS ---------------------------------------

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReverendSA</b> [ Wed Nov 22, 2017 9:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReverendSA wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Let me restate what I wrote one more time:<br /><br />You probably will not need to move things out to $9470 and $9480. Though I made the first part of the routine longer, I made the second part shorter to compensate.</div><br /><br />For some reason though, pushing the keys does nothing at all. The game is still running though.<br /><br />I've implemented it as you wrote it (I hope). Here is what FCEUX shows:<br /><br /> 00:8D78:A2 01     LDX #$01<br /> 00:8D7A:8E 16 40  STX $4016 = #$FF<br /> 00:8D7D:A9 00     LDA #$00<br /> 00:8D7F:8D 16 40  STA $4016 = #$FF<br /> 00:8D82:86 16     STX $0016 = #$FF<br /> 00:8D84:AD 16 40  LDA $4016 = #$FF<br /> 00:8D87:29 03     AND #$03<br /> 00:8D89:C9 01     CMP #$01<br /> 00:8D8B:26 15     ROL $0015 = #$00<br /> 00:8D8D:AD 17 40  LDA $4017 = #$FF<br /> 00:8D90:29 03     AND #$03<br /> 00:8D92:C9 01     CMP #$01<br /> 00:8D94:26 16     ROL $0016 = #$FF<br /> 00:8D96:90 EC     BCC $8D84<br /> 00:8D98:B5 29     LDA $29,X @ $002B = #$00<br /> 00:8D9A:49 FF     EOR #$FF<br /> 00:8D9C:35 15     AND $15,X @ $0017 = #$55<br /> 00:8D9E:95 15     STA $15,X @ $0017 = #$55<br /> 00:8DA0:B5 15     LDA $15,X @ $0017 = #$55<br /> 00:8DA2:95 29     STA $29,X @ $002B = #$00<br /> 00:8DA4:CA        DEX<br /> 00:8DA5:10 F1     BPL $8D98<br /> 00:8DA7:60        RTS ---------------------------------------</div><br /><br /><br />Oh, my bad!  <br /><br />I was storing storing #$15 at 8D9E when I should have stored #$2B according to your code.<br /><br />I changed it to #$2B and now my character can jump and punch!! I'm going to test this on my ED and report back.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Nov 22, 2017 9:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just in case it helps, in FCEUX's debugger if you left click in the grey column just to the left of the disassembly, you can use its built-in assembler to type a patch in assembly instead of trying to convert everything to hex.<br /><br />There are no labels in this assembler, but you type the target address for branches, e.g. &quot;BCC $8D96&quot; will create a branch instruction with the correct relative value to get to $8D96.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReverendSA</b> [ Wed Nov 22, 2017 9:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay.<br /><br />It works, holy crap.<br /><br />Even more surprising, the hack allows player 2 to join via pushing start. I thought start was not applicable for player 2 on Famicom.<br /><br />That's insane.<br /><br />Thanks a lot tepples.<br /><br />My friend and I have been meaning to play Battletoads USA on my famicom since forever and now we can do it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReverendSA</b> [ Wed Nov 22, 2017 10:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Just in case it helps, in FCEUX's debugger if you left click in the grey column just to the left of the disassembly, you can use its built-in assembler to type a patch in assembly instead of trying to convert everything to hex.<br /><br />There are no labels in this assembler, but you type the target address for branches, e.g. &quot;BCC $8D96&quot; will create a branch instruction with the correct relative value to get to $8D96.</div><br /><br />Thanks for that info. Would have saved me an extra hour when I was trying to learn branches. The labels were confusing me for a bit.<br /><br />I'm going to publish this hack as it may very well help others such as myself. I will credit you for your help Tepples.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Gilbert</b> [ Wed Nov 22, 2017 10:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReverendSA wrote:</div><div class="quotecontent">Okay.<br />Even more surprising, the hack allows player 2 to join via pushing start. I thought start was not applicable for player 2 on Famicom.<br /></div><br />I think it's possible that all the codes for P2 joining in with START are intact, just that the hardwired P2 pad does not have a <em>physical</em> START button so that you can never use this feature, so if you hack the game to recognise inputs from expansion port the START button on the extra P2 controller will work as intended. It may even be possible that if you modify the console by changing the hardwired P2 pad to some other controllers the START button may work too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Thu Nov 23, 2017 8:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: hacking Battletoads to read input from the Famicom Exp p</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Gilbert wrote:</div><div class="quotecontent"><div class="quotetitle">ReverendSA wrote:</div><div class="quotecontent">Okay.<br />Even more surprising, the hack allows player 2 to join via pushing start. I thought start was not applicable for player 2 on Famicom.<br /></div><br />I think it's possible that all the codes for P2 joining in with START are intact, just that the hardwired P2 pad does not have a <em>physical</em> START button so that you can never use this feature, so if you hack the game to recognise inputs from expansion port the START button on the extra P2 controller will work as intended. It may even be possible that if you modify the console by changing the hardwired P2 pad to some other controllers the START button may work too.</div><br />It would also work properly on an AV Famicom, which uses standard 7-pin NES controllers (which <em>both</em> have Select/Start buttons) instead of the hardwired ones.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>