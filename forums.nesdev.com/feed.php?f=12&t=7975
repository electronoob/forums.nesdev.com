<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=7975" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-07-14T03:47:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=7975</id>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2011-07-14T03:47:15-07:00</updated>
<published>2011-07-14T03:47:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7975&amp;p=81530#p81530</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7975&amp;p=81530#p81530"/>
<title type="html"><![CDATA[snes-sdk, tcc816, and large arrays]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7975&amp;p=81530#p81530"><![CDATA[
For big data files, like graphics, music, level data, etc. the best thing is probably to incbin them in assembly files rather than converting the data files to C arrays. You don't need to split the files yourself, since the assembler can do that for you:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.bank 1<br />.incbin &quot;big_file.bin&quot; read $8000<br /><br />.bank 2<br />.incbin &quot;big_file.bin&quot; skip $8000 read $8000<br /><br />; and so on...<br /></div><br /><br /><br />Some other tips:<br /><br />* The C compiler generates "superfree" sections for the compiled code. This means that the linker is free to put these sections anywhere it sees fit (i.e. where there's room for it). So if you use HiROM you might want to fill up the even banks (0, 2, 4, ...) with garbage to avoid having the linker placing any code or data in those banks, as they won't be directly addressable (you'd have to access them through one of the mirrors, e.g. $4xyyyy).<br /><br />* There's no way to tell the compiler to place code in the .data section. The assembler/linker won't even let you do it manually IIRC. So what I did was to write all code I wanted to execute from RAM in assembly and putting them in the ROM bank at $018000 (making sure to use word addressing instead of long addressing when these functions call eachother). At startup I would copy all that code from $018000 to $7E8000 and create function pointers to call the copies in RAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Thu Jul 14, 2011 3:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2011-07-13T22:22:56-07:00</updated>
<published>2011-07-13T22:22:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7975&amp;p=81529#p81529</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7975&amp;p=81529#p81529"/>
<title type="html"><![CDATA[snes-sdk, tcc816, and large arrays]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7975&amp;p=81529#p81529"><![CDATA[
Just thought this information could be useful to someone who want to use <a href="http://code.google.com/p/snes-sdk/" class="postlink">snes-sdk</a> and will have the same problem I had, and solved with help of mic and Chilly Willy.<br /><br />The tcc816 from the snes-sdk is a nice C compiler, but currently it has few problems that could be a real showstopper for any large project (say, just a full screen picture and music).<br /><br />First problem, rather obvious, is that one piece of data can't be larger than 32K. So if you have a data array that is larger than 32K, you need to split it to few smaller arrays.<br /><br />Second problem. Compiler puts data into .data section regardless of const. When this section overflows, linker tell you there is no room in .data. You can fix this with a custom tool that will move all the const data to .rodata section. mic made <a href="http://code.google.com/p/neo-myth-menu/source/browse/trunk/SNES/NeoMythMenu/tools/constify.cpp" class="postlink">such a tool</a> (source code only), but you may need to change it a bit if you have different data organization in your program.<br /><br />Third problem. Even with the tool, when you have total amount of const data &gt;32K, you'll get a linker error that there is no room in .rodata now. The problem is neither the compiler nor linker are allocate data into ROM banks automatically. You have do to it by yourself, creating .rodata1, .rodata2 etc sections and putting no more than 32K of data in every .rodata section. You can do it either by creating a custom tool, or by declaring additional .rodata sections in a separate assembly file, including the data with incbin and referencing to the data from C code through extern.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Wed Jul 13, 2011 10:22 pm</p><hr />
]]></content>
</entry>
</feed>