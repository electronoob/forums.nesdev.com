<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Title screen name table compression</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Title screen name table compression</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4495">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4495</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Fri Oct 24, 2008 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Title screen name table compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Right now the name table for my game's title screen is uncompressed (960 bytes), and I'm looking for a good algorithm to reduce its size.
<br />
<br />The title is drawn at a perspective, kind of like the Mega Man games. I mention this to give you guys a sense of how much tile repetition occurs (not a whole lot).
<br />
<br />The title screen differs from the main game in that it isn't really suitable for partitioning into metatiles; however, it does have some characteristics that I hope to exploit:
<br />
<br />1) Many of the tiles consist of nothing but the background color (tile #0 in my pattern tables). If I start my name table initialization by filling it with zeroes, then my title screen data would only need to specify the tiles with a nonzero tile index.
<br />
<br />2) For the remaining tiles, there are long stretches where successive tile indices increase by one. I could use RLE compression for each of those stretches.
<br />
<br />What do you guys think? Any ideas?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Oct 24, 2008 6:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Encode it such that you just read alternating bytes, one byte holds the number of zeroes, then the next byte stores the number of increasing tiles, keep going back and forth between the two modes.  Maybe also an escape to specify N literals.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Fri Oct 24, 2008 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cool, that's exactly what I'll do. I'll let you guys know how it goes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Sat Oct 25, 2008 4:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, here's what I've got so far:
<br />
<br />There are 4 encoding modes, which are determined by bits 7-6. They are described below.
<br />
<br />
<br /><strong>Immediate Mode: %00xxxxxx; x = tile index</strong>
<br />This mode is used for sequences of tiles whose indices are random but lie in the range [0, 63]. This allows storage of multiple literal values while eliminating the extra byte used by N Literal Mode.
<br />
<br /><strong>N Literal Mode: %01nnnnnn; n = loop count - 1</strong>
<br />This mode is similar to Immediate Mode, except an additional byte is used to specify how many tile indices follow. Also, the tile indices can be anywhere in the range [0, 255].
<br />
<br /><strong>RLE Mode: %10nnnnnn xxxxxxxx; n = loop count - 1, x = tile index</strong>
<br />This mode is used for sequences of tiles whose indices are identical.
<br />
<br /><strong>Ascend Mode: %11nnnnnn xxxxxxxx; n = loop count - 1, x = 1st tile index</strong>
<br />This mode is similar to RLE Mode, but is used for sequences of tiles whose indices increase by 1.
<br />
<br />
<br />Using this method, I've reduced the title screen name table data from 960 bytes to 160 bytes, which comes out to 83.33% compression! It might be possible to reduce the data size even further, but probably not without increasing code size, so it would appear I've reached the point of diminishing returns.
<br />
<br />Should I call it good?
<br />
<br />
<br />@Dwedit: Thanks for your suggestions. They helped quite a bit.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Oct 25, 2008 4:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good job. You might eventually want to explore the more complicated things if you're planning to add more static screens, such as menu screens or instruction screens, because you can amortize the code size across them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Sat Oct 25, 2008 6:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Man, that is some hella compression for a nametable! Awesome work! I don't quite understand all of the details of what you posted, but I'm sure in time I will get it. How many static screens do you plan to use this on, and how many bytes does the total decoding routine take?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Oct 25, 2008 11:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very good job! This is a great compression scheme. 160 bytes is really great compared to 960, especially for a title screen. The only thing that I wouldn't like is only being able to use 64 immediate tiles.
<br />
<br />You know what you might benefit from? Compressing the title screen into blocks, or objects. Say you have a rectangular box that holds the title. Use your compression scheme, but specify the dimensions of the box that holds the title, and have your engine store that onto the screen by itself. That way, you could layer things all over the screen to save bytes. Like how your title screen is mostly tile #0. You could define a 32x30 block of tile #0, and store that in one chunk, which would be 8 bytes by itself (Though 10, 2 bytes for defining that it's 32x30 tiles). On top of that you could store the box with the title and other things, and I'm pretty sure save yourself some bytage. Things compress better  if they're in separate chunks sometimes.
<br />
<br />EDIT: Okay, it'd actually be 4 bytes for each object definition. 2 define the dimensions, and 2 define the placement on screen. So this would really only help if you had lots of layering going on. But it would help save bytes for rows of tile #0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Oct 25, 2008 11:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I decided to code the title screen for my game using a bit-based format.
<br />A '1' bit means that the tile index is incremented by one, a '0' bit means that a blank tile should be drawn instead.
<br />I did that over 3 year ago, so I didn't know as much as I do today. But yeah, your format seems kind of supperior to mine. For long runs, I'd still have a lot of $ff or $00 in my data, while yours just can be handled in one byte. And your format allows to re-use tile or place them in any order, mine doesn't it's either increment or blank (I don't use that format for the text present arround the title of course).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Oct 25, 2008 2:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Very good job! This is a great compression scheme. 160 bytes is really great compared to 960, especially for a title screen. The only thing that I wouldn't like is only being able to use 64 immediate tiles.</div><br />You can use as many immediate tiles as you want. It's just that a literal string including only the first 64 has a slightly more compact representation than a literal string including other tiles. If a layout has a lot of short literal strings between runs, that could add up.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You know what you might benefit from? Compressing the title screen into blocks, or objects. Say you have a rectangular box that holds the title. Use your compression scheme, but specify the dimensions of the box that holds the title, and have your engine store that onto the screen by itself.</div>
<br />But how much would such a "window" system save over encoding the span of tile #0 from the end of each row of the box to the start of the next row, unless perhaps you want to add windows to an existing title screen?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Sat Oct 25, 2008 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for all the helpful insights, everyone! I've now got the name table data down to 124 bytes, a whopping 87.08% compression!
<br />
<br />@Roth: We should trademark that. It's all about Hella Compression™.
<br />
<br />@Celius: Your idea of decomposing the title screen into rectangular regions worked beautifully!
<br />
<br />@tepples: Thanks for the reminder about amortizing the code size across multiple static screens. You gave me the courage to revise my compression scheme even if it increases code complexity somewhat.
<br />
<br />
<br />So, here's the scheme as it currently stands:
<br />
<br />First, the title screen is decomposed into rectangular regions. Each region is chosen such that it yields the smallest possible representation. Also, the regions are allowed to overlap. If overlap occurs, the new region will overwrite the old one.
<br />
<br />Each region contains a 4-byte header followed by region data. The header specifies position, width, height and fill mode. The header format is as follows:
<br />
<br />
<br /><strong>Region Header: %ff-xxxxx ---yyyyy ---wwwww ---hhhhh</strong>
<br />
<br />f = fill mode (described below)
<br />x = x-position of the upper left corner in tiles; range = [0, 31]
<br />y = y-position of the upper left corner in tiles; range = [0, 29]
<br />w = width in tiles - 1; range = [0, 31]
<br />h = height in tiles - 1; range = [0, 29]
<br />- = unused
<br />
<br />
<br /><strong>String Fill Mode: f = %01; data size = varies</strong>
<br />The region is filled with a string of (random) tile indices. The region data consists of a variable-length string of literals. Additionally, the string is compressed according to the scheme outlined in my previous post.
<br />
<br /><strong>Solid Fill Mode: f = %10; data size = 1</strong>
<br />The region is filled with a single tile index. The region data consists of a single byte (the tile index).
<br />
<br /><strong>Ascending Fill Mode: f = %11; data size = 1</strong>
<br />The region is filled with tile indices that increase by one. The region data consists of a single byte (the starting tile index).
<br />
<br />
<br />In order to get maximum benefit from the Ascending Fill Mode, I actually duplicated a few tiles in the CHR-ROM, which allowed me to construct a sequence of strictly increasing tile indices across a large rectangular region (30 tiles x 6 tiles). Representing those 180 tiles with 5 bytes really floats my boat.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Oct 25, 2008 8:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Waste 16 bytes for each repeated tile?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Sat Oct 25, 2008 8:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Waste 16 bytes for each repeated tile?</div>
<br />
<br />Come again?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Oct 25, 2008 8:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just meant, Is it worth wasting 16 bytes to repeat a tile instead of encoding the nametable differently?
<br />Unless of course your tiles are decompressed to CHR-RAM and are LZ compressed first.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Sat Oct 25, 2008 9:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, I see what you mean. Thanks for clarifying.
<br />
<br />At present, I'm using a fixed size CHR-ROM for background tiles (4KB). I had some unused tiles in there, so the duplicates aren't costing me anything.
<br />
<br />Truth is, I'm still fairly new to NES programming, so I went with the most expedient setup that allowed me to get started. I haven't begun to mess with mappers, CHR-RAM, bank switching, etc.
<br />
<br />I'll have to cross those bridges when I get to them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Oct 25, 2008 9:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey, glad the idea worked! I plan to do something involving the chunking method for my title screen (though I might actually load a lot of it with plain code and little data). Looks like you've got quite the compression scheme.
<br />
<br />I see in your first byte that you could actually have 7 different fill modes if you used bit 5. Do you plan on using this for anything?
<br />
<br />Also, you know, to save time, since you're already using 2 bytes to define X and Y, you could just put the PPU address in there instead of X/Y coords. Well, only 12 bits of it are unique, as the high 4 bits are always 0010 for the NT address. So instead of:
<br />
<br />%ff-xxxxx ---yyyyy
<br />
<br />you could have:
<br />
<br />%ff--hhhh llllllll
<br />
<br />where h represents the 4 real MSB of the name table ID and l is the LSB. So for example, you want a tile on name table #0 to start at tile 2,4, you'd normally define it like so:
<br />
<br />%ff-00010 ---00100
<br />
<br />Where you could define it as:
<br />
<br />%ff--0000 10000010
<br />
<br />where 000010000010 is $082, which is the low 12 bits of the NT address $2082. And if you do it this way, you could actually store stuff on any name table, if you wanted to do some scrolling.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>