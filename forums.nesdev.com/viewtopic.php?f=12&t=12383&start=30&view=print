<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SNES audio hardware info</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SNES audio hardware info</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12383">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12383</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Mon Feb 16, 2015 12:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><div class="quotetitle">bazz wrote:</div><div class="quotecontent"><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Wow, that's actually pretty awesome! So if I really wanted to (even though I'm not going to) I could probably nearly recreate all the instruments that play in the song while using a fraction of the space. The only thing is, It seems a bit more difficult to do this sort of thing when it comes to sound effects. Could you would use HDMA to constantly stream the sound effects, allowing more room for the actual song? I plan on using 6 channels for the actual song and 2 for sound effects, so could you have it to where an HDMA port works with one sound effect and the second for the other?</div><br /><br />I wouldn't stream the sound effects, I would just load them into the SPC, and send a command to the SPC telling it to play that sound effect.</div><br />Well, I mean this wouldn't be the ideal thing to do, but if you have just about no space left for sound effects in ram, then you might have to.</div><br /><br /><br />I just think it's funny that you're learning about the non-traditional mechanics of SPC when you came here asking for an introduction, and for some reason the main topic has been streaming high quality audio or streaming BRR with HDMA and all this crap and it's like.. Is that seriously how you introduce someone to SPC audio hardware??? <br /><br />No!! It isn't!! We should be talking about the tradition of classic SPC music, which is not streaming, but tracking!! <br /><br />Tracking is at the heart of SPC because it is sample-based.<br />1) Tracking -- you really ought to download a tracking application like Renoise, MilkyTracker, Schism Tracker ... these are the kind of sequencing tools people use to make sample-based music. If you actually learn how to do some basic tracking (Renoise has EXCELLENT tutorials -- google &quot;renoise tutorial&quot;, here is a great example, the first tutorial to Renoise! : <!-- m --><a class="postlink" href="http://files.renoise.com/videos/Renoise%202.8%20-%20Beginner's%20Tutorial%20-%20Part%201.mp4">http://files.renoise.com/videos/Renoise ... rt%201.mp4</a><!-- m --> -- you might feel like you're learning Renoise but you actually learning also the fundamentals of every Tracker software <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />Understanding tracking is going to help you understand the fundamentals of how most games use the SPC -- and you will be able to<strong> visually</strong> see how most events will be parsed by an SPC driver. for basic level, we can say by rhythmically playing samples back at certain pitches and certain volumes. <br /><br />Not only does SPC play the samples, it can shape them too. The most fundamental way to do this is by the ADSR envelope. Go, learn about it!  There is also echo, pitch modulation, and noise, but these should be considered bonus topics until you understand the basics of tracking. <br />The SPC DSP has hardware ADSR envelope implementation, unlike most tracking software which define a software implementation. There is also a gain mode which has other ADSR qualities, or can be used in defining your own custom ADSR envelopes, I want you to know that but it's not something you should focus on.<br /><br />Tracking then gets deep in-depth with &quot;effects commands&quot;.. But I'm not going into that, I'm trying to lay a map for you. With the notion of SPC, we can consider effects commands as a way of modifying the DSP registers in interesting ways while the song is playing, for instance vibrato, which would alter the sample's pitch at specified rates, rates which may be associated mathematically with the BPM of the song.<br />-------<br />2) SPC and Tracking <br />How does the SPC rhythmically play music??? The answer is timers! The SPC has 3 of them!! You can do whatever with them --You set SPC to go off at a certain rate in time and you can base quarter notes 8th notes etc. from the timer.<br /><br />But yeah!! once you have a timer firing, you can then play certain samples rhythmicaly!! That's it basically! <br /><br />The rest is just special limitations of SPC700, and other Super Nintendo specifics.. but that's the nature of tracking and roughly how SPC correlates. <br /><br /><br />3) Choosing what song to play, or what SFX to play -- How does that work? <br />To do this, a protocol must be established, and the SPC must parse the SNES IO registers in the SPC loop, it  checks for certain commands and command parameters on the SPC IO ports that you define.. when the SNES writes the trigger values and parameters, the SPC can react accordingly, ie &quot;ie command:play SFX, parameter:#2&quot; .. <br /><br />4) Getting data to SPC from SNES<br />There is a communications protocol .. bla bla [I'm getting tired]<br /><br /><br />4) Putting it all together!!! <br />Not many people have put all of this together .. I am working on SNES Tracker which will do all of the above eventually.. Also there is pre-existing solutions like SNESMod and SNESGSS. But to actually put it all together, you will need ALOT.. and this is why for the most part people have relied on non-native solutions like SNESMOD -- which translates something originally not purposed for SNES into something that may work on SNES -- the downside of these solutions is that you can't hear immediately how they will sound on the SNES, for instance, especially if they use the SNES DSP-only effects like Pmod or echo.. -- SNESGSS is the closest it's gotten as far as &quot;native&quot; level released software goes... SNESGSS, along with SNES Tracker, uses an SPC emulator inside it so that the user can actually hear and interface with the &quot;real&quot; thing as he develops the music.<br /><br />If you want to experiment doing things manually.. here's what you would do : <br />1) Use Bregalads BRR Tools and convert some small WAV file to BRR <br />2) Write an SPC program<br />  . a barebones SPC program to play a sample. To do this, you need to decide a start address for the SPC program in SPC memory. let's say $200, then write a SPC program in something like TASM or wla-spc700 that inits the SPC and plays a sample.. primarily you must set FLG register, main / voice volume registers, voice ADSR/gain (use direct gain it's easiest), and set the DIR address, and create DIR entries.. I'll write a tutorial on this.. maybe.. maybe not.. <br />You must have wondered what is DIR?? hehe <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br />  . include the SPC program and BRR sample in a SNES program that uploads to the SPC -- you need to learn how to communicate and send the data to SPC, but it is essentially just &quot;send this many bytes from some place in SNES memory to some place in SPC memory, and maybe do that again from/to other places, and then start executing SPC from some SPC Address&quot; .. that's it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed Feb 18, 2015 11:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">Is there a way to read the playback pointer of a given channel into the sample? I'm just trying to think of a way to do a real wave-table synth setup with a series of small waveforms (kinda like the PPG synth), without breaking the output stream of the channel and change the timbre on an internal level instead of a note-by-note basis. Can the DSP generate interrupt for when a channel sample block encounters a 'loop' point?</div><br /><br />Maybe interrupt the spc700 every, say, 256 cycles to calculate if the next timbre change is about to happen or not, and change the sample directory when needed to.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 19, 2015 9:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The SPC700 has no interrupt sources wired to it. It has only the interval timers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Thu Feb 19, 2015 9:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The SPC700 has no interrupt sources wired to it. It has only the interval timers.</div><br /><br />Hence &quot;timers as interrupts..&quot;  == find an appropriate timer (3, one of which is high resolution), and evaluate an appriopriate interval to &quot;interrupt on&quot; -- but if you're doing &quot;heavy&quot; processing outside of your timer poll routine, you might sometimes arrive out of rhythm. I dunno what you guys are doing in-depth, and therefore cannot judge the effect of this possible circumstance and how it relates to your goal (real-time synthesis?)....<br /><br /> And if you actually build this thing, and you start incurring overhead and it's a problem, you can talk about curing this later, potentially with a less frequent timer interval... or please I invite you to summarize your effective repair of this situation, I know I am certainly interested in hearing the full development story of a synth on SNES. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Thu Feb 19, 2015 9:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">Can the DSP generate interrupt for when a channel sample block encounters a 'loop' point?</div><br /><br />Yes and no, -- although an interrupt cannot be generated, you can use timers and check the ENDX register. ENDX signifies each voice's arrival to the BRR end block. This will be the last BRR block before the loop is started, of course only if the loop is enabled, however I am not sure exactly when in relation to the decoding of the BRR blocks, that this register is updated.<br /><br />from me to you:<br /><br />ENDX:<br />[Byte] nnnnnnnn  -- each bit = voice #76543210<br />n=0: BRR END not yet reached [from KON, or from last write to this register]<br />n=1: BRR END reached [roughly, not sure exactly where in pipeline this is updated, check FullSNES or ask NoCash]<br /><br />A Voice's bit in this register is cleared each time it is KON [or all voices' bits are cleared if you write to this register],<br />and if desired, you can reset &quot;only all&quot; of the bits by writing to ENDX register &lt;--- this last feature could of maybe been helpful if you wanted to repeatedly know when the BRR end block was reached during looping, rather than just only from KON, however its limitation is that you could only do it for one voice, since the whole register is clobbered on write.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Feb 19, 2015 3:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">keeping the pitch the same while the timbre dulls [is] a job for either a long sample or an adventure in pitch modulation (you can sharpen the beginning of a sound with pitchmod, then fade out the modulating waveform, but doing this so as to match an existing sample might be quite difficult).  [...]  I suppose you could use a dynamic sample rate, but that would require you to continually change the playback rate so as to maintain the pitch...</div><br />Okay, no, there are at least three other ways to do something like that without streaming.<br /><br />1) Wavetable synthesis, as tomaitheous suggested.  (It's at least kinda possible; see the DKC2 credits.)  If necessary, using two channels would allow chorus-type effects, mitigating the disadvantages of using short waveforms on a synthesizer that doesn't have a built-in chorus effect.<br />2) Use two channels, with one short low-rate sample for the bulk of the note and one short high-rate sample for the treble component, and just vary the relative volume of the high-rate sample.  Not sure how good this would sound, but probably better than nothing, and it's the easiest option of the three.  For certain sounds you might even be able to reuse the same sample...<br />3) Use the FIR filter on the echo, if nothing else is using echo.  Could also possibly modify the filter on the fly to do a sort of phaser/flanger effect without using an extra channel, though I'm not sure how well that would work in practice 'cause I haven't tried it.  Sadly there seems to be no way to hear the echo without the direct signal...  What does EDL=0 do?  Is it one sample or nine, or something else?<br /><br />Other schemes may present themselves to intelligent cogitation.  I'm not sure what all KFF is doing <a href="http://battleofthebits.org/arena/Entry/Ghost+of+Winters+Past_/16436/" class="postlink">here</a> - the saw filter seems to be similar to the DKC2 trick; the variable-pulse-width thing is something else, and there may be yet another trick in there - but whatever he's doing it works great (on synth waveforms, admittedly, not a distorted guitar)...<br /><br />...you know, you can do a variable-width pulse wave by combining two phase-inverted saw waves and tweaking the pitch of one of them slightly to change the phase; I wonder if that's what he did?  That also allows you to morph from pulse to saw by fading one of them out, and from any combination of pulse and saw towards sine using a lowpass filter or a wavetable (in this case moving to lower sample rates).  Is there a name for this technique?  I made a synth that did that for Emulator X, and had thought of doing the same on the SNES, but it looks like I might have been pre-empted...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KungFuFurby</b> [ Thu Feb 19, 2015 7:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a combination of pitch modulation and playing different samples...<br /><br />I intend to enhance this effect with real time loop point modifications one day. I'm creating my own sound driver to do this job.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Thu Feb 19, 2015 9:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">keeping the pitch the same while the timbre dulls [is] a job for either a long sample or an adventure in pitch modulation (you can sharpen the beginning of a sound with pitchmod, then fade out the modulating waveform, but doing this so as to match an existing sample might be quite difficult).</div><br /><br /> I remember reading about that trick from somewhere. It kind of reminded me of LA synthesis, where the attack phase supposedly the most hardest part in replicating an instrument sound. I mean, not exactly the same thing - but the concept was similar. Making a more complex sound by having a more complex attack. I had the idea that you could stream really low bit-rate samples overlaying that part of the attack in the sample. I was counting on the higher resolution waveform to hide the noise of the low bit-rate attack phase sample. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">...you know, you can do a variable-width pulse wave by combining two phase-inverted saw waves and tweaking the pitch of one of them slightly to change the phase; I wonder if that's what he did?  That also allows you to morph from pulse to saw by fading one of them out, and from any combination of pulse and saw towards sine using a lowpass filter or a wavetable (in this case moving to lower sample rates).  Is there a name for this technique?  I made a synth that did that for Emulator X, and had thought of doing the same on the SNES, but it looks like I might have been pre-empted...</div><br /><br /> Not sure if this is the same thing, but I had this idea: <!-- m --><a class="postlink" href="http://pcedev.net/audio/sub_waveform6.xm">http://pcedev.net/audio/sub_waveform6.xm</a><!-- m --> (second pattern). The primary wavefrom has all sample data on the positive range of the waveform, and a second channel has all waveform data in the negative range (I forget the terms for this) - so when they 'accumulate', the effect is stronger. The volume controls the brightness of the sound, but it's obviously not enough. Instead, you think of the two waveforms as single waveform, and you 'walk' the phase of the second waveform in small increments. By advancing the frequency by a large amount and quickly putting it back - you're 'walking' the phase difference of the waveforms (you can do the opposite too; slow down the second warm and then put it back to the same frequency to retard the phase). Of course, you'll probably need translation tables. If the effect is strong enough, then you don't need to replicate on other channels (if you're doing chords), because the timbre sounding effect is strong enough to stand out. Though, I didn't really experiment with it much so I have no idea what type of waveforms are applicable to this approach. <br /><br />  <br /><br /><div class="quotetitle">bazz wrote:</div><div class="quotecontent">how it relates to your goal (real-time synthesis?)....<br /></div><br /><br /> Yeah, or some sort of approximation. It seems all the hardware was there to do so such a thing (basic wave-table synthesis, it's just missing a few small but key features).<br /><br /> Probably not doable on the SNES, but I also had the idea of non linear playback of a waveform pointer (like with 80's Casio keyboards). But that would require an interrupt. The idea is that you deform a waveform that has two parts, by stretching or compression the first and second halfs. The timbre changes are you change the mid point between these two points in the waveform. If you have an interrupt, you could do 'hard sync' as well. I did it on the PCE with a 7khz timer, but it was kinda noise-y/gritty.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Feb 19, 2015 9:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there an easy way of getting an .spc file into a ROM?  KungFuFurby's song is pretty epic.  I also promised to use one of Augustus's songs a while ago.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Augustus Blackheart</b> [ Thu Feb 19, 2015 9:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Is there an easy way of getting an .spc file into a ROM?  KungFuFurby's song is pretty epic.  I also promised to use one of Augustus's songs a while ago.</div><br /><br /><a href="http://jiggawatt.org/badc0de/spcplayer.htm" class="postlink">http://jiggawatt.org/badc0de/spcplayer.htm</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Feb 19, 2015 9:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />An .spc file is 65kB, so it must be the contents of the RAM plus some kind of header.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Fri Feb 20, 2015 4:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"> I did it on the PCE with a 7khz timer, but it was kinda noise-y/gritty.</div><br /><br />The SPC has faster timers if it helps, one is 32,000 Hz.. the other 2 are 8000 Hz..<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">An .spc file is 65kB, so it must be the contents of the RAM plus some kind of header.</div><br /><br />Besides the header(s) and RAM are also the DSP registers, and CPU registers.<br /><!-- m --><a class="postlink" href="http://snesmusic.org/files/spc_file_format.txt">http://snesmusic.org/files/spc_file_format.txt</a><!-- m --><br /><br /><br />^ is there a newer SPC file format I should know about for SNES Tracker?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 20, 2015 9:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">I remember reading about [storing the attack at a higher sample rate] from somewhere. It kind of reminded me of LA synthesis, where the attack phase supposedly the most hardest part in replicating an instrument sound.</div><br />This bit of inspiration from Roland LA synthesis is also why my NES music engine uses FamiTracker-style envelopes (at 2 bytes per frame, encoding arpeggio, duty, and volume) only for the attack and NerdTracker II-style fades (2 bytes encoding duty, initial volume, and decrease rate) for the decay or sustain.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I had the idea that you could stream really low bit-rate samples overlaying that part of the attack in the sample. I was counting on the higher resolution waveform to hide the noise of the low bit-rate attack phase sample.</div><br />I guess that means I need to get working on my proof of concept of half-bit-depth BRR using [-5, -1, 1, 5] and [-7, -2, 2, 7] quantization tables, expanded by either the S-CPU or S-SMP before being written to sample memory and played through the S-DSP. I've got so many things I <em>could</em> be doing that I need to put a list of projects I could be working on somewhere so that people can rank them.<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Is there an easy way of getting an .spc file into a ROM?</div><br />Perhaps we need a spec for a simplified .spc for inclusion in a ROM that disallows things like overwriting $0000-$01FF and $FFC0-$FFFF, leaves initial DSP and timer contents unspecified, and includes a standard way for the S-CPU to tell the S-SMP to jump back to the IPL at $FFC0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Feb 20, 2015 10:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do you guys write your music in ASM?  If so, the ASM source file would be more useful when it comes to using music in homebrews.<br /><br />I'm surprised how acceptable it is to use 2 channels for one instrument.  I didn't notice any lack of polyphony.  It could be that 4 simultaneous instruments is good enough for most melodies, or it's good enough to not use 2 channels for every instrument.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Augustus Blackheart</b> [ Fri Feb 20, 2015 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES audio hardware info</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Do you guys write your music in ASM?  If so, the ASM source file would be more useful when it comes to using music in homebrews.</div><br /><br />Ever since I got Noise Tracker for the Amiga, back in the day, I've usually avoided writing songs in ASM.  I like to be able to see the relation bewteen notes and to be able to play back anything immediately.  If I have a song that is already completed for the Amiga or the SNES, sometimes I will go back and make a version in ASM or MML depending on what machine it's for.<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I'm surprised how acceptable it is to use 2 channels for one instrument.  I didn't notice any lack of polyphony.  It could be that 4 simultaneous instruments is good enough for most melodies, or it's good enough to not use 2 channels for every instrument.</div><br /><br />Depending on how many channels I have available on a given pattern I'll use anywhere from 1-5 channels for a single instrument with somewhat alternating volume envelopes or different octaves.<br /><br /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">Not sure if this is the same thing, but I had this idea: <!-- m --><a class="postlink" href="http://pcedev.net/audio/sub_waveform6.xm">http://pcedev.net/audio/sub_waveform6.xm</a><!-- m --> (second pattern)...</div><br /><br />This is one of the techniques I like to use when I have the bytes and channels to spare.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>