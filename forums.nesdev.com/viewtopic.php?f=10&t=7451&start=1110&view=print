<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>75</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Nov 22, 2013 3:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you Kasumi for helping me so much!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />   I did what you said <div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"> If everything moved up as I'm understanding, the data is 100% wrong (because there is no value that is in the right place.). Run trace logger, break on writes to find out how the first thing ends up wrong. Fix it.<br /></div> I ran trace logger and figured out that if I added this code <div class="codetitle"><b>Code:</b></div><div class="codecontent">0C662 A5 2F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda visible_left<br />0C664 38&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sec<br />0C665 E9 10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sbc #$10<br />0C667 85 2F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta visible_left<br /></div> right after the sixteen bit division of visible_left into CameraX+0 inside of my method scroll_screen... it draws the entire nametable columns 32-47 at the correct regular height.!!!  Now I have <s>three</s> <span style="color: #FF8080">four</span> new goals:<br /><br />1.) Decrease grafiti... something is kind of wrong... there's a little bit more grafiti now after my subtraction of #$10 from visible_left.  It is run every vblank... it's not the best fix right?... there must be some other way... it is the fix that my brain chose cause visible_left was sixteen higher and that's why it started one row below where it should.<br />2.) Fix the colors of my columns so they are correct... that shouldn't be too hard. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />3.) Draw columns 48-63 at the appropriate time... also shouldn't be too hard. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><span style="color: #FF8080">4.) Make our <s>my</s> girl travel on the level... she needs to stop moving beyond the right edge of the screen. ...Maybe that would decrease the grafiti. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> </span><br /><br />As the game gets bigger it blooms... this blooming is awesome!  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /> <br /><br /><span style="color: #40FFBF"><strong><span style="font-size: 200%; line-height: normal">Thank you Kasumi for teaching me about new ways of debugging and trace logger is really cool!!</span></strong></span>  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><span style="color: #FF8080">eedit.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Nov 22, 2013 4:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Edit: Eh, got rid of that other stuff. The fix makes sense to me after reading scroll_screen. More theory, though. <br /><br />scroll_screen (mostly) has zero need to be in your NMI.<br /><br />The only thing that needs to be there is <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda CameraX+0&nbsp; ; time to MOVE THE CAMERA OBJECT!<br />&nbsp; &nbsp;sta PPUSCROLL5&nbsp; &nbsp; &nbsp;; write the horizontal scroll count register<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp; &nbsp; &nbsp; ; (no vertical srolling)<br />&nbsp; &nbsp; sta PPUSCROLL5&nbsp; &nbsp; &nbsp;; set the vertical scrol</div><br /><br />Edit2: Ah, right. You also need a similar thing to get the lowest bit of CameraX+1 into $2000.<br /><br />A good way to have your frame order is like this:<br />1. Start of main loop.<br />2. Update main character's position.<br />3. Update scroll position based on main character's position.<br />4. Use scroll position to find is new tiles need to be drawn. If so, put tiles in RAM buffer.<br />5. Set flag that tells the NMI it's safe to update the screen.<br />NMI:<br />1. Check flag to see if we should update the screen.<br />2. If yes, read from buffer and draw tiles to screen. (buffer was updated in step 4 of the main loop)<br />3. Write low byte of camera to $2005. (it was updated in step 3 of the main loop)<br /><br />Right now, it seems like you're writing tiles in the NMI, THEN moving the camera in the NMI. This might scroll to new stuff, making the update you just did not necessarily cover the visible screen. <br /><br />Simple question: What's the expected value of visible_left when camerax = $0000? If visible_left should be $00 (the first tile of camerax) in that case, your fix is not good and something else is wrong. If visible_left should be $F0, your fix is perfect. Same for if camerax = $0010 etc. Should visible_left be $10, or $00? (Note: The value it should be and what works might be different! If the subtract you added takes it to what you think it SHOULD be, you're golden. If you think it should be the value before the subtract, but just have the subtract because it works keep thinking.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1.)Decrease grafiti... something is kind of wrong... there's a little bit more grafiti now after my subtraction of #$10 from visible_left</div><br />This might be a time to benchmark your NMI code using Nintendulator DX or VirtuaNES. If all the input is now good (i.e. You verified the RAM now has the correct 60 values, and you can't find issues with the code that reads from it) and you're getting bad output, it's possible you're trying to write to $2007 when rendering has begun. ~2270 cycles before rendering begins after the NMI. ~513 of those are eaten by sprite DMA. Anything from the start of the NMI to the last write to $2006/$2007 should happen in less. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vblank: sta $401E<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tya<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; txa<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />*********SNIP*************<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SkipUpdates: sta $401F<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sat Nov 23, 2013 5:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow! Once my game becomes alive... the Max part in Nintendulator debug says 2872... which is no good cause you said <div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">If all the input is now good (i.e. You verified the RAM now has the correct 60 values, and you can't find issues with the code that reads from it) and you're getting bad output, it's possible you're trying to write to $2007 when rendering has begun. ~2270 cycles before rendering begins after the NMI. ~513 of those are eaten by sprite DMA. Anything from the start of the NMI to the last write to $2006/$2007 should happen in less. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vblank: sta $401E<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tya<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; txa<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />*********SNIP*************<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SkipUpdates: sta $401F<br /></div></div> so 2270-513 is quite less than 2000.  Thank you for your example code... it helped me realize that my vblank is overused.  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />  Need to spend some  time on using it less.  <img src="./images/smilies/icon_question.gif" alt=":?:" title="Question" />  I am going to reread your reply. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  edit: Ok I'm going to think more about your simple question.  It seems like a hard question right now.  Ok it's supper time! Goodnight and thank you for all of this theory! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sun Nov 24, 2013 12:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> edit: Ok I'm going to think more about your simple question. It seems like a hard question right now.</div><br />It is up to you to define every bit about how this should work. It works as defined or it works by breaking the definition. <br /><br />1. Is it defined such that upon striking zero, the zeroth column is drawn? (Zero should draw zero, negative is impossible)<br />2. Is it defined such that upon striking one, the zeroth column is drawn? (One should draw zero, zero would be negative so that update is skipped)<br />Something else? If you don't know how it <em>should</em> work, think about what makes the most sense, and commit to it. Then if something works by doing something that doesn't seem to agree with the definition, you can find out why and fix it. (Or fix your definition, if the working way makes sense and is actually better.) Just... don't guess. Find out why it works if it's better or if something else is wrong.<br /><br />A bit more theory! Requires... well, somewhat large rewrites to put into place.<br /><br />Think about the fastest way your updates could possibly happen.<br /><br />Something like this? <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />lda buffer,y;4<br />sta $2007;5<br />dey;2<br />bpl loop;3 on all but last<br /></div><br />(Well... unrolled or partially unrolled or stack magic would be faster. But follow me on this.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> )<br />Obviously you need to load the value and store it. That's unavoidable. Then the end of your loop with just one dey. Why not set your buffer up beforehand so you can do exactly that? Or exactly whatever the fastest thing you can think of is? <br /><br />Currently, you have the left and right columns interleaved. (left column tile) (right column tile) (left column tile) (right column tile) This means you have to loop through the list twice, and also use dey twice for each loop!<br /><br />If you did this: (left column tile) (next left column tile) (etc.) ... (right column tile) (next right column table) (etc.)<br />One dey would take you to the next tile. Do you have to decide whether a column is even or odd? In your case, both are updated when they need updating, so you can just draw them in the same order.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda evencolumnaddrhi;3<br />sta $2006;4<br />lda evencolumnaddrlo;3<br />sta $2006;4<br /><br />ldy #29;2<br />loop:<br />lda buffereven,y;4<br />sta $2007;5<br />dey;2<br />bpl loop;3 on all but last<br /><br />lda oddcolumnaddrhi;3<br />sta $2006;4<br />lda oddcolumnaddrlo;3<br />sta $2006;4<br /><br />ldy #29;2<br />loop2:<br />lda bufferodd,y;4<br />sta $2007;5<br />dey;2<br />bpl loop2;3 on all but last<br /></div><br />The above is pretty bare minimum, and still takes ~870 cycles assuming no page crosses. Those 870 cycles do not include the ~513 for sprites. They do not include attribute updates. This is why your NMI needs to make as few decisions as possible. Your goal outside of the NMI should be to make all the decisions and set the data up so that the NMI can use it in the fastest possible way. <br /><br />In your case, you do even, you do odd. If the routine that updates the buffers just used the same place in RAM every time, you wouldn't need a pointer for your NMI updates. You need pointers to the metatiles in case you have different sets, but the buffer for the NMI can be static. Heck using a pointer takes an extra cycle per load, plus you have to set it up. Static all the way!<br /><br />Now, I didn't mention it before because it would not have helped your issue. But you can also make draw_RAMbuffers both simpler and faster. (Using a non interleaved buffer format or not!)<br /><br />In the current code, you work really hard to preserve y (it contains where you are in the pointer.). But think about this! It takes just six cycles to store and restore it, and you could REALLY use it for other stuff.<br /><br />I may not fully understand draw_RAMbuffers, but I think you can do something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Metatile index is Y. Location in RAM buffer is in X.<br />&nbsp;lda MetatileTile0, y;Assuming this top left tile<br />&nbsp;sta RAMbuffereven, x;Even buffer<br />&nbsp;lda MetatileTile1,y;Assuming this is top right tile<br />&nbsp;sta RAMbufferodd, x;Odd buffer<br />&nbsp;dex;Takes us to the next tile for BOTH buffers<br /><br />&nbsp;lda MetatileTile2, y;Assuming this bottom left tile<br />&nbsp;sta RAMbuffereven, x;Even buffer<br />&nbsp;lda MetatileTile3,y;Assuming this is bottom right tile<br />&nbsp;sta RAMbufferodd, x;Odd buffer<br /><br />lda pointerposition;used to be tya. You lose just one cycle doing this instead<br />&nbsp; clc<br />&nbsp;adc #$10 ;increment y by 16!!!!<br />tay<br /><br />&nbsp;dex<br />bpl<br /></div><br />This avoids storing the tiles to temp RAM only to load them again. You only need to loop 30 times, and it covers two separate columns. You only lose one cycle from where the 16 is added to y, plus 3 for storing it someplace (not above, but of course needs to be done). But, because you no longer need to store/restore x in goodlocation you actually come out ahead. (Since you needed to move y anyway which was replaced with a load, but you didn't ever need to move x.) The added benefit is you can use y for something that really needs it. <br />I'm not sure if you're updating two 8x8 tiles, or two 16x16 tiles columns. It looks like your draw_RAMbuffers is doing two 16x16 columns, but I don't see much need for that. It's be tough to update that much in the NMI anyway.<br /><br />You can also only update one 8x8 column at a time in your NMI. Even if you set up an even and odd buffer outside of the NMI, you can have the NMI draw the relevant column (just even or just odd) when scrolled to. It's not a problem if the data you setup isn't used exactly on the frame.<br /><br />Anyway, enough from me, I start these posts and never stop writing...  <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Nov 26, 2013 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I'm not sure if you're updating two 8x8 tiles, or two 16x16 tiles columns. It looks like your draw_RAMbuffers is doing two 16x16 columns, but I don't see much need for that. It's be tough to update that much in the NMI anyway.<br /><br />You can also only update one 8x8 column at a time in your NMI. Even if you set up an even and odd buffer outside of the NMI, you can have the NMI draw the relevant column (just even or just odd) when scrolled to. It's not a problem if the data you setup isn't used exactly on the frame.</div>My draw_RAMbuffers is doing two 16x16 columns at once because then it would be easier to update the attribute table colors.  I think tepples has commented that Mario draws 4 columns each frame.<br /><br />edit: I'm going to update my code so it's faster... your help you gave me is highly appreciated Kasumi! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 26, 2013 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Super Mario Bros. only draws half of a 16-pixel-wide metatile column per frame, but I seem to remember it draws four half columns in successive frames followed by the updated attributes. Frame-stepping with a nametable viewer open will show you what a particular game does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Wed Nov 27, 2013 9:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yea, byte-wide attribute updates are much easier to deal with, but there's just not enough time to push that much data in one frame. You need to split it between multiple frames with an FSM. Basically have a variable that keeps track of what kind of update you're going to do on the next frame, be it Tile Column 1, Tile Column 2, Attribute Stripe or Nothing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 27, 2013 11:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">but there's just not enough time to push that much data in one frame.</div><br />There actually is, if you optimize the hell out of the code (unrolling loops and such)... I've managed to update 1 column of metatiles (60 name table bytes + 8 attribute bytes) + 1 row of metatiles (68 name table bytes + 16 attribute bytes), along with sprite DMA, all in regular VBlank time.<br /><br />I'm not sure what my suggestion is for a beginner who's having trouble with this... I mean, code optimization isn't trivial, but splitting updates across different frames isn't exactly piece of cake either.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 27, 2013 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">splitting updates across different frames isn't exactly piece of cake either.</div><br />You should see what I have to juggle for RHDE. At last count I have eight different kinds of updates that can happen in vblank during gameplay: no operation, 6x24 area of playfield, put up a blank pop-up window, clear a row of tiles to a constant color, fill a nametable, copy a 16-tile line (or two 8-tile lines) of text, copy 8 graphical tiles, and erase the part of a pop-up window that covers the playfield border. <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/WorthIt" class="postlink">Worth it</a>? Yes.<br /><br />But in a side-scroller, you can easily fit the left and right halves of a column of metatiles plus attribute updates in one vblank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Nov 28, 2013 1:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a <s>quick</s> <span style="color: #00BFBF">slow</span> question:  see, now I have four 30 byte RAMbuffers...  RAMbufferw0even, RAMbufferw0odd, RAMbufferw1even, and RAMbufferw1odd.   Currently I have decided  that creating a copy of my draw_us_a_column method drawing RAMbufferw1even and RAMbufferw1odd might be too much waste of code... but it isn't very much code at all.  What would you recommend I do instead?  Is there some type of static pointer?  Something to help me specify the address of either RAMbufferw0even or RAMbufferw1even and only requre 4* cycles?  I feel a little bit more positive on my creating a copy idea.  What would you do?<br /><br /><span style="color: #00BFBF">addition.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Thu Nov 28, 2013 1:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you can stack them on top of each other, 4x 32 byte buffers all next to each other, you can do something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA ColumnNeeded<br />&nbsp; ASL A;Multiply 2<br />&nbsp; ASL A;4<br />&nbsp; ASL A;8<br />&nbsp; ASL A;16<br />&nbsp; ASL A;32<br />&nbsp; TAX ;X indexing varibale is A*32, making A our &quot;select the buffer&quot; value.<br />&nbsp; LDY #$1F ;32 bytes<br />.Loop:<br />&nbsp; LDA FourBufferBegin,X<br />&nbsp; STA $2007<br />&nbsp; INX ;(DEX depending on how they are arranged and such.)<br />&nbsp; DEY ;Are we 32 tiles in yet?<br />&nbsp; BPL .Loop ;Nope<br />&nbsp; ;32 bytes have been written from one of the selected column buffers by here.<br /></div><br /><br />ETA: You say 4x 30 buffers. You can just shove 2 bytes in between then to make them even with each other, just some random engine variable. And then adjust the loop number and you should be able to see how this idea works by then. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Nov 28, 2013 2:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ETA: You say 4x 30 buffers. You can just shove 2 bytes in between then to make them even with each other,</div><br /><br />Or you can use a table which will allow you to have buffers that are 30 bytes long and will be smaller/faster anyhow. (5 asl instructions vs. 4 bytes that specify the offsets.)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ldx ColumnNeeded<br />&nbsp; lda bufferoffsettable,x<br />&nbsp; tax<br /></div><br />A table can't be in the middle of this routine or it will be run as code, but elsewhere where it's safe put this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bufferoffsettable:<br />.db 0, 30, 60, 90<br /></div><br />or maybe this: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bufferoffsettable:<br />.db 29, 59, 89, 119<br /></div><br />depending on if you're going forwards or backwards.<br /><br />If you can't have 120 contiguous bytes, you have to use a pointer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 28, 2013 7:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd be tempted to allocate five 32-byte buffers $0100, $0120, $0140, $0160, and $0180.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sun Dec 01, 2013 6:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Now, I didn't mention it before because it would not have helped your issue. But you can also make draw_RAMbuffers both simpler and faster. (Using a non interleaved buffer format or not!)<br /><br />In the current code, you work really hard to preserve y (it contains where you are in the pointer.). But think about this! It takes just six cycles to store and restore it, and you could REALLY use it for other stuff.<br /><br />I may not fully understand draw_RAMbuffers, but I think you can do something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Metatile index is Y. Location in RAM buffer is in X.<br />&nbsp;lda MetatileTile0, y;Assuming this top left tile<br />&nbsp;sta RAMbuffereven, x;Even buffer<br />&nbsp;lda MetatileTile1,y;Assuming this is top right tile<br />&nbsp;sta RAMbufferodd, x;Odd buffer<br />&nbsp;dex;Takes us to the next tile for BOTH buffers<br /><br />&nbsp;lda MetatileTile2, y;Assuming this bottom left tile<br />&nbsp;sta RAMbuffereven, x;Even buffer<br />&nbsp;lda MetatileTile3,y;Assuming this is bottom right tile<br />&nbsp;sta RAMbufferodd, x;Odd buffer<br /><br />lda pointerposition;used to be tya. You lose just one cycle doing this instead<br />&nbsp; clc<br />&nbsp;adc #$10 ;increment y by 16!!!!<br />tay<br /><br />&nbsp;dex<br />bpl<br /></div><br />This avoids storing the tiles to temp RAM only to load them again. You only need to loop 30 times, and it covers two separate columns. You only lose one cycle from where the 16 is added to y, plus 3 for storing it someplace (not above, but of course needs to be done). <span style="color: #FFFF00">But, because you no longer need to store/restore x in goodlocation you actually come out ahead.</span> (Since you needed to move y anyway which was replaced with a load, but you didn't ever need to move x.) The added benefit is you can use y for something that really needs it. </div><br />I <span style="color: #FFFF00">highlighted</span> part of your post.  Let's start there.  Ok, now your awesome code and ideas are working! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <strong><span style="color: #40BFFF"><span style="font-size: 150%; line-height: normal">Kasumi, thank you so much!</span></span></strong>  ...I dont understand what you mean by &quot;...you actually come out ahead.&quot;  Well, I do understand what you mean, but I don't agree with you now. I'm lost please help me.  I don't agree because I just decided to store my y value in goodLocation.  So that's just the same... I really don't understand what you are talking about after the highlighted part.  I needed to move y anyway, but i didn't need to move x?  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <br /><br />Ok, now it's suppertime!!  Must go eat! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sun Dec 01, 2013 7:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The two pieces of code accomplish the same goal. (Though mine sets up the buffers differently. The different way would be faster for your NMI to read as well, though.) You don't need to store/restore X in goodlocation because it just stays in X. (I mean... you may still have to load it before the loop, but you no longer have to do it IN the loop.)  You come out ahead because the code I added takes fewer cycles than the unneeded code I removed. (storing/restoring goodlocation)<br /><br />I omitted some stuff, but the full thing would be like: <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #29;Before everything. So not during the loop. This is like goodlocation<br />;But we load it with #29 instead of #59 for other reasons.<br />loop:<br />lda ($10), y;Originally omitted. Have to do that still to get the index, of course<br />sty pointerposition;This wasn't needed before, so we're 3 cycles behind<br />tay;This was needed before. We overwrote what was in y, which is why we stored it above<br /><br /><br />;Metatile index is Y. Location in RAM buffer is in X.<br />&nbsp;lda MetatileTile0, y;Assuming this top left tile<br />&nbsp;sta RAMbuffereven, x;Even buffer<br />&nbsp;lda MetatileTile1,y;Assuming this is top right tile<br />&nbsp;sta RAMbufferodd, x;Odd buffer<br />&nbsp;dex;Takes us to the next tile for BOTH buffers<br /><br />&nbsp;lda MetatileTile2, y;Assuming this bottom left tile<br />&nbsp;sta RAMbuffereven, x;Even buffer<br />&nbsp;lda MetatileTile3,y;Assuming this is bottom right tile<br />&nbsp;sta RAMbufferodd, x;Odd buffer<br /><br />lda pointerposition;used to be tya. You lose just one cycle doing this instead<br />;But you gain that back by not having&nbsp; <br />;ldx goodLocation and stx goodLocation (which would take 6 cycles)<br />;because X doesn't jobs in mine. It's always where you are in the buffer.<br /><br />&nbsp; clc<br />&nbsp;adc #$10 ;increment y by 16!!!!<br />tay<br /><br />&nbsp;dex<br />bpl loop<br /></div><br /><br />After loading the metatile index, you did tax. Mine does this too (well... tay instead), in addition to storing the position to temp ram. That takes 3 extra cycles.<br /><br />Later, you did tya because you can only add to A. Mine does lda tempRAM instead which takes 1 extra cycle than tya. (if zero page)<br /><br />All together, I've made your metatile index transfer work another way. It takes 4 cycles extra.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I needed to move y anyway, but i didn't need to move x? <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> </div><br />Right. You need X/Y for three tasks. 1. Loading from the pointer. (can only be done with Y) 2. Loading tiles from the metatile. 3. Storing the tiles to the buffer. This means either X or Y must change jobs, because two things can't do three jobs without changing. This is true for mine, and it was true for yours. <br /><br />Because of how I preserved X instead of Y (which needed to be change jobs in both because it's needed to access the pointer), I've eliminated stx goodLocation and ldx goodLocation (DURING the loop anyway) which would have taken 6 cycles. So it ends up 2 cycles faster.<br /><br />But mine is also faster for other reasons related to why I did the transfers that way. I dex once for every two times you do, because I do both even and odd at once using separate buffers. I avoid storing each tile of the metatile in the very beginning of the buffer RAM, because there's no need. I have where I am in the buffer in X already when I load the metatile index in y (you load where you are in the buffer later), so they're just stored exactly where they need to be. No need for the temp stores.<br /><br />It saves a lot of cycles per loop. I think 42. 4 for doing dex twice instead of four times, 9*4=36 for not doing the indexed temp stores, 6 for not storing/restoring goodlocation. -4 for things I added. <br /><br />This loops 15 times, so that's 630 cycles. 630 more if you do it twice for two 16x16 columns like it seems you're planning.<br /><br />All that said, I make no guarantees this will work verbatim. There may be some extra stuff you need to do before/after the loop I'm forgetting, but I can't imagine any of it not making the savings worth it.<br /><br />Edit: Heck, I was being safe, but you can move the clc before the add from the loop to before the loop if the pointer is set up such that y = 0 to access the first element. Nothing in the loop changes the carry except the add, and the adds during the loop will NEVER set the carry. (You add 16 to Y 15 times, which would only make it 240. Not greater than 255, so carry would be clear throughout.).  This saves another 28 cycles per loop. 2*15 for not doing it in the loop -2 because you still need to do it before the loop.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>75</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>