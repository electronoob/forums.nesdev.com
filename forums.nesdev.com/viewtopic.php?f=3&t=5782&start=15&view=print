<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Multiple switch for CPU emulation</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Multiple switch for CPU emulation</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=5782">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=5782</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Dec 04, 2009 12:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">essial wrote:</div><div class="quotecontent">I also help my friend with developing an x86 operating system (for fun of course), and I sort of gotten used to the compiler doing bad things when optimizations were turned on</div><br />Perhaps you just forgot to express the correct semantics of your code to the compiler. For example, consider carefully which variables need to be marked "volatile" or "const" or both. Turning optimizations off worked because compilers just go make all variables volatile.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But secondly, it's a matter of style. I like my style and you like yours</div>
<br />The style of doing as much as possible in C makes your code more portable to other platforms with a different instruction set.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>essial</b> [ Fri Dec 04, 2009 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Perhaps you just forgot to express the correct semantics of your code to the compiler. For example, consider carefully which variables need to be marked "volatile" or "const" or both. Turning optimizations off worked because compilers just go make all variables volatile.</div>
<br />
<br />That's completely right. I never went to college for programming, nor did I learn from anyone -- just manuals, specifications, and occasionally (VERY occasionally) tutorials. I didn't know that volatile keyword even existed until I started googling the problem. Even then I still didn't fully understand what was going on until later on (age, experience, whatever).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Dec 04, 2009 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if &#40;!opFunc&#91;opcode&#93;&#40;this, opcode, opFuncParam&#91;opcode&#93;&#41;&#41;</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">parent-&gt;regs.PC = addr;</div><br /><br />C++ has member function pointers, which will make your code a lot more terse (and readable) and also avoid crushing the global namespace.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct CNES2A03 &#123;<br />&nbsp; void &#40;CNES2A03::*opFunc&#91;256&#93;&#41;&#40;&#41;;<br /><br />&nbsp; void processOpcode&#40;&#41; &#123;<br />&nbsp; &nbsp; //...<br />&nbsp; &nbsp; &#40;this-&gt;*opFunc&#91;opcode&#93;&#41;&#40;&#41;;<br />&nbsp; &#125;<br /><br />&nbsp; void op_nop&#40;&#41; &#123;<br />&nbsp; &nbsp; regs.PC++;<br />&nbsp; &#125;<br /><br />&nbsp; CNES2A03&#40;&#41; &#123;<br />&nbsp; &nbsp; opFunc&#91;0xea&#93; = &amp;CNES2A03::op_nop;<br />&nbsp; &#125;<br />&#125;;</div><br /><br />Also, void func(void) is redundant, you only need void func().<br /><br />Lastly, the debate over whether switch() or a jump table is faster is really pedantic. I have used a generator that switched between the two and I noticed virtually no speed difference. The switch statement compiles faster and produces a smaller binary (as it doesn't need as many prolog/epilogs for functions), while the jump table produces code that is much easier on the eyes and that can be templatized, eg:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">opFunc&#91;0xa9&#93; = &amp;CNES2A03::read_const&lt;&amp;CNES2A03::flag_lda&gt;;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Dec 04, 2009 3:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Also, void func(void) is redundant, you only need void func().</div>
<br />Within a C++ class, this is true. But within C code or within code intended to be compiled under both C compilers and C++ compilers, you need to use void func(void) because C compilers interpret void func() as void func(...), with implicit variable arguments.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Dec 04, 2009 4:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Within a C++ class, this is true.</div>
<br />
<br />Yes, I'm aware of C89's restrictions (that almost every modern compiler avoids via C99 backporting.) I didn't want to elaborate and make the post too long. Do you think he's worried about C89 compatibility when he's writing functions with class qualifiers on them? :P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Dec 04, 2009 4:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess my perspective is just distorted by trying to make C++-style interfaces (with RAII and the like) to a C library.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Mon Jan 25, 2010 7:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Multiple switch for CPU emulation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nessie wrote:</div><div class="quotecontent">If you're thinking of performance, I would <em>guess</em> that if the total size of two switches is smaller than one switch, they could possibly run faster. The few cycles wasted on table lookup are probably insignificant as long as your code fits in the cache.</div>
<br />
<br />The only reason for a smaller code switch running faster is whether it fits in the cache or not?
<br />Is there another reason?
<br />Apart from caching, which I'm not very aware of, I understand that if the switch gets translated into a jump table, it doesn't matter if the code is longer or shorter, the jumps speed shouldn't be affected, or am I wrong?
<br />I prefer speed and source readability rather than smaller executable code, for my emulator.
<br />
<br />And about the cache, I guess it's very platform-dependent, right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Fri Jan 29, 2010 8:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The <strong>S</strong>NES is a 16 bit console made by Sony.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Fri Jan 29, 2010 8:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Fri Jan 29, 2010 9:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />LOL! I knew that if I posted a wrong statement as obvious as this, someone would reply <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />Ok, now that I have your attention, don't you feel like reading my previous post and answering it?  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 29, 2010 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Petruza wrote:</div><div class="quotecontent">The <strong>S</strong>NES is a 16 bit console made by Sony.</div>
<br />There, fixed that for you. The SPC700 CPU and DSP are Sony parts.
<br />
<br />Now to your original question, which pertains to emulation of both the NES and Super NES: Modern x86 compilers and CPUs are so complex that the only real answer is to code it both ways, time both approaches, and optionally look at the generated assembly language code to understand the reasons behind the measured times. But yes, level 1 cache performance is one of the big reasons for a timestamp and catch-up approach compared to strict alternation of 3 PPU cycles and 1 CPU cycle like Nintendulator does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Fri Jan 29, 2010 9:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haha thanks for the post fix, I fixed it in the original post.
<br />
<br />About the switch cache question, ok thanks. Anyway, as I've absolutely zero experience in emulator programming I'll go with the most straightforward approach comes to my mind, and once I get a working emulator, I'll test and see if it badly needs rewrites. (which will surely do)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Mednafen</b> [ Fri Jan 29, 2010 11:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you only care if your code is compilable on ICC and GCC, you can use goto tables:
<br />
<br />static void *const op_goto_table[256] =
<br />{
<br /> &amp;&amp;Op00, &amp;&amp;Op01, [etc]
<br />};
<br />
<br />goto *op_goto_table[opcode];
<br />
<br />Op00: blahblahblah; goto Finish;
<br />
<br />Op01: vlahvlahvlah; goto Finish;
<br />
<br />Finish: ;
<br />
<br />
<br />Long live goto! ;p

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Fri Jan 29, 2010 11:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, I like goto in this kind of low level programming too.
<br />Unfortunately I plan to do a compiler and OS independent plain standard C++ code, at some speed expense maybe, but fully portable.
<br />The main idea will be to make a 100% portable and reusable emulator core without the need of touching a single line of it. I.e. include, instantiate and run.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Tom</b> [ Fri Jan 29, 2010 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Multiple switch for CPU emulation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">So I thought about it... and what if you made two separate switches... one for the addressing mode lookup, and another for the opcode execution?<br /></div>
<br />
<br />A very long time ago I tried having two switches as you described in my emulator.  It was slower than one giant switch, which didn't use any fall through or goto tricks, just repeated code.  But I only ever ran it on a 300Mhz Powerbook G3.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>