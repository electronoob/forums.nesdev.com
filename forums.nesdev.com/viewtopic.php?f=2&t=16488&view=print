<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES games and differences in input reaction</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES games and differences in input reaction</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16488">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16488</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesrocks</b> [ Tue Sep 12, 2017 8:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />An edit to make things clear: there are two subjects on this post. Subject 1 is resolved. Subject 2 is a curiosity.<br /><br />Subject 1:<br />So, I'm developing a demo using ca65. My goal is to add as many standard common features and then see what game I could make with that.<br /><br />But one thing struck me that I thought maybe I was doing wrong, so I went on to test it. At the start of the nmi I do the OAM DMA transfer, meaning it would update sprites with their state on the previous frame. I thought maybe this was weird, but I think this is advised because of some timing issue (do DMA first). Well, for TESTING I tried this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI begin:<br />1 - read controllers<br />2 - game logic<br />3 - OAM DMA<br />4 - scroll<br />5 - game clock (just 16-bit increment to a reserved ram location)<br />6 - famitone update<br />7 - RTI</div><br /><br />The problem is, this works in fceux, virtuanes and punes, but<strong> it fails on real hardware with everdrive n8, on nestopia and on mesen</strong> (no sprites appear on screen). So it is a bad idea (points up to nestopia and mesen). I then went on to test some games and see if any did this (I tested them before I tested my rom on the everdrive or other emulators). Of course, none did. I think this is related to how OAM decays quickly. So that test went nowhere, but I decided to share the following research.<br /><br />Subject 2:<br />So, I made a list of screen reaction to controller input. I only tested in-game, as in, when actual gameplay was happening, not title screens or such. Also, I tried several different moves to see the one that was more responsive. Sometimes a character deliberately takes a frame or two before jumping. Sometimes it is inconsistent and seems to be related to how much is going on in the screen at the time.<br /><br />The count is I pause fceux, hold a button and hit frame advance. When I see the reaction I count how many times I pressed frame advance. So 2 is the minimum.<br /><br />Here are the results:<br />2: Super Mario bros 3, Adventure Island, Battle of Olympus, Zelda 2, Kick Master, Batman, Amazon Diet, Yo! Noid, TMNT 2, Contra, Castlevania, Chip and Dale, Battletoads, Donkey Kong, Ghosts'n Goblins (very inconsistent though), Ghostbusters (tested on the car scene), Adventure Island 3, Pac Man (tengen), Lode Runner, Street Fighter 2010, Super Mario Bros, Simpsons Bart vs Space Mutants, Captain Comic, Rockman (inconsistent), Rockman 2, Rockman 3, Rockman 4, Rockman 5, Rockman6, Metroid, M.C kids, Ninja Gaiden, Ninja Gaiden 2, Ninja Gaiden 3, Mario Bros, Balloon Fight (inconsistent)<br />3: Arkanoid, Yie Ar Kung-Fu, Castlevania 3, Double Dragon (very inconsistent, sometimes takes as many as 11 frames to punch), Dr. Mario, Super Pitfall (original and my hack), Kid Icarus, Gradius, Punch-Out, Elevator Action, Gauntlet, Holy Diver<br />4: Pinball<br />5: Tiger-Heli, TMNT<br />6: Double Dragon 2, Double Dragon 3<br /><br />Now, out of the games that reacted in 2 frames, some of those I didn't test a lot, and many of them did start playing the sfx immediately. Out of the other games (3+ frames) I tested several different moves and situations to see if it would lower the response time, and I wrote the lowest I got.<br /><br />I was really surprised to see the Double Dragon games perform the way they did.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Sep 12, 2017 11:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NMI begin:<br />1 - read controllers<br />2 - game logic<br />3 - OAM DMA<br />4 - scroll<br />5 - game clock (just 16-bit increment to a reserved ram location)<br />6 - famitone update<br />7 - RTI</div><br />This is an awful idea. VRAM updates and OAM DMA must happen during the short VBlank time, which happens directly after NMI.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Tue Sep 12, 2017 11:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That you're getting 2 minimum suggests to me that their order is different than yours.<br />I in my current case I did <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">NMI: DMA, VRAM [+scroll], controller,  [sound], game logic, RTI.</tt><br /><br />Where is the PC stopped when you frame-advance? If it's at NMI entry (or thereabouts) like I expect, then in the case like mine, you can never get a &quot;one frame&quot; reaction, despite it technically reacting to your inputs on the very next frame it sees them: NMI, you update emu's input register, game updates video, game reads input and reacts, NMI, you have to press frame advance again, the game's reaction is now displayed.<br /><br />(incidentally, I checked, and at least Zelda II does NMI: DMA, VRAM updates before doing anything with its controller variables, soâ€¦)<br /><br />And yes, what Bregalad said.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Sep 13, 2017 1:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A little bird told me about an official document mentioning that DMA must begin within 286uS of beginning of NMI (which is about 512 CPU cycles, I think), or &quot;there may be a problem with the DMA transfer&quot;.  I always thought it was sensible to do the DMA early as possible, but it seems that it's actually required.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 13, 2017 3:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NMI begin:<br />1 - read controllers<br />2 - game logic<br />3 - OAM DMA<br />4 - scroll<br />5 - game clock (just 16-bit increment to a reserved ram location)<br />6 - famitone update<br />7 - RTI</div><br />This is an awful idea. VRAM updates and OAM DMA must happen during the short VBlank time, which happens directly after NMI.</div><br />This is indeed a terrible program structure (which unfortunately appears to be disseminated by the Nerdy Nights tutorials), mainly because it puts the game logic, the slowest part of any game, above VRAM/OAM updates, meaning you basically have to do everything in just 20 or so scanlines, which's ridiculous. This is particularly evil because it appears to work at first, when there's little to no game logic, but as soon as anything more complex than a single moving sprite is implemented, things start to glitch, and less experienced programmers become understandably confused.<br /><br />But even when done right (PPU updates first, everything else later), the &quot;all in NMI&quot; approach has its pitfalls, the main one being the handling of lag frames, which's possible but not very intuitive. Game states (different game loops) can also be slightly more annoying to implement without a main thread.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Wed Sep 13, 2017 4:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When I first started, I greatly underestimated how sensible Shiru's neslib was.<br /><br />Nmi:<br />Oam update<br />Palette update (if needed) (from a buffer)<br />VRAM update (if needed) (from a buffer)<br />Set scroll<br />(Increase frame counter)<br />Music<br /><br />Main loop:<br />(wait for frame counter to tick up)<br />Controller read<br />Game logic<br />Clear oam buffer<br />Fill oam buffer<br />Fill vram buffer, or just change a pointer to a new array

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 13, 2017 5:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is not just Shiru's neslib, but the standard way of doing thigngs. My game engine does it precisely like that (it also ticks the random number generator in NMI).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 13, 2017 6:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">This is not just Shiru's neslib, but the standard way of doing thigngs. My game engine does it precisely like that (it also ticks the random number generator in NMI).</div><br />I personally like the idea of ticking the RNG repeatedly in the main thread while waiting for vblank. Since each frame takes a variable amount of time to compute depending on a number of factors, the RNG is clocked a different number of times each frame, improving randomness. And it's not like you'd be using that time for anything else, so why not?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesrocks</b> [ Wed Sep 13, 2017 6:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I posted the whole thing because I only realized it was fceux's fault later on, but still there's the interesting research on input lag from other games. I'd like to know why there is so much input lag on well programmed games. Is it some input buffer of sorts? For example the game Pinball, I can't imagine they decided &quot;humm... this paddle is reacting too quickly, let's make it wait a few frames before it moves&quot;. How can double dragon 1 sometimes take 11 frames to react? This seems like a waste of memory to keep the input for so long?<br /><br />Anyway, I knew this would happen, such a big post starting with a bad idea. I know it is a bad idea!  I even said so in the post <div class="quotetitle">nesrocks wrote:</div><div class="quotecontent">So it is a bad idea</div><br />The thing is, fceux doesn't seem to emulate OAM decay? So it doesn't tell me it is a bad idea. I had to test it on other stuff.<br /><br />It shouldn't matter because the docs are pretty specific to do oamdma first. But I wanted to see what happened when I did otherwise anyway.<br /><br />About my game loop, it has always been an all NMI approach with oam dma on the right place. I switched for this test only. But I do have a main loop, it just doesn't do anything. <s>When I try to do as dougef said &#40;which I had tried before&#41;, the game either runs too fast &#40;if I put my game logic on the forever loop&#41;, or it doesn&#39;t show anything on screen &#40;if I put it on the vblank wait loop&#41;. I haven&#39;t debugged this yet, I will, don&#39;t worry. I was just satisfied with the all nmi approach, but if it is not ideal I&#39;ll change it.</s> edit: fixed it, now the game is on the main loop. I just need to create the palette buffer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 13, 2017 7:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I personally like the idea of ticking the RNG repeatedly in the main thread while waiting for vblank. Since each frame takes a variable amount of time to compute depending on a number of factors, the RNG is clocked a different number of times each frame, improving randomness. And it's not like you'd be using that time for anything else, so why not?</div><br />Sounds like a very Konami-ish way to go <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">About my game loop, it has always been an all NMI approach with oam dma on the right place.</div><br />There's nothing inherently wrong with an all-in-NMI approach, I just find it not very intuitive to program myself. For example if you want to fade the palete out, typically you want to darken the palette, wait a couple of frames, darken it again, etc... in a loop. You need to wait for the next NMI every time. Doing it with an all-in-NMI approach is hard, you need to detect that you are in a &quot;fading palette&quot; state, and then detect if you're in a waiting state or if the wait is over and you should darken the palette, or if everything is over and you continue. If done in the main code, the program counter does all that work automatically, but you have to do it manually. But if this is more intuitive or easier for you, by all means go for it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesrocks</b> [ Wed Sep 13, 2017 7:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well... I already did program a fade system (fade in and fade out), and it happens every 2 frames (adjustable). I even use bit emphasis to add in between tones. This works right of the bat when I switched the logic to the main loop just now. edit: I guess this is working only because I am doing the code once and then waiting for vblank again, so it still is like NMI approach. I'll study this further.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda fadestate<br />beq loop ; when fadestate is zero that means there is no fading going on, branch to the logic loop<br />bne fadepal ; the fadepal manager will decide which fade it is, based on fadestate's value, and then set a new fadestate value if that fade is done. This also means that while fading is going on, no game loop is run</div><br /><br />And I don't clear the whole OAM buffer before writing to it like dougeff said, I only clear the trailing bytes. So I don't write twice. I take the oam position and fill the rest with #$FF after I'm done filling it with actual sprites. And I am filling the buffer in a different order every frame so I already have sprite flicker covered (for 8 sprites on the scanline). I even have the main character use a reserved section of the buffer so he never flickers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 13, 2017 7:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh by the way I forgot to address that:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How can double dragon 1 sometimes take 11 frames to react? </div><br />Double Dragon games uses the button combination A+B to jump. It is almost impossible to require for the player to press those buttons at the same time, so when the game detect that A or B is pressed, very likely it waits a few frames to see if the player press the other button, if yes then the main character jumps, if no then it punches or kicks. 11 frames still sounds like quite a lot, are sure sure it's not less ? I'd say it's probably about 5 frames, although this must be verified. Also, one frame delay is compulsory because there's one frame delay between when the game decides to run the logic and when it's actually shown on screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesrocks</b> [ Wed Sep 13, 2017 8:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Double Dragon games uses the button combination A+B to jump. It is almost impossible to require for the player to press those buttons at the same time, so when the game detect that A or B is pressed, very likely it waits a few frames to see if the player press the other button</div><br />Very interesting, hadn't thought of that. The thing is, it doesn't just wait that long for A or B, it waits that long for any d-pad button too. That would have been unnecessary, imo.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">11 frames still sounds like quite a lot, are sure sure it's not less ?</div><br />As I said in the original post, it is at a minimum 3, and sometimes more, up to 11.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Also, one frame delay is compulsory because there's one frame delay between when the game decides to run the logic and when it's actually shown on screen.</div><br />Yes, I already had understood this on the original post. See the list of games that take 2 frame advances to react.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Wed Sep 13, 2017 8:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Re:input lag<br /><br />Consider that some games might be doing acceleration at the sub-pixel level. So, it might only be moving the main character 0.3 pixels for the first few frames...making it appear like no movement has taken place.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 13, 2017 8:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES games and differences in input reaction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I once came to the conclusion that the game logic could be simplified a bit if video rendering lagged behind by one frame. There are certain inconsistencies involving object interactions and the camera (e.g. the camera follows the player, that can have its position modified by obstacles, that need the final position of the camera to be drawn) that can be avoided if you rendering everything one frame late, when all objects are guaranteed to have their final positions and states. There are of course solutions that don't require any lag, but they often require more CPU time (e.g. visiting objects more than once per frame).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>