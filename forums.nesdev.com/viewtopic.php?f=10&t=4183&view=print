<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - General code architecture and design related question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">General code architecture and design related question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4183">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4183</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Tue Jun 24, 2008 9:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>General code architecture and design related question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi everyone,
<br />
<br />I have been reading for a while this message board so I think it's about time that I post something.  My question may have been asked many time, for this I'm sorry, but maybe not from my perspective.  
<br />
<br />First I need to mention that my background is programming but not working for the gaming industry.  Like many of you, I would love to develop a game for the nes, but I lack the knowledge in low level assembly for the 6502.
<br />
<br />I want to approach the issue from a programmer's perspective.  The best way to learn what you don't know is to work on a project with a goal. I'm trying to visualize how to design my application and learn 6502 at the same time from it but I'm not sure how.  
<br />
<br />I could just make a huge blob, experiment here and there and there is good chance that it would work.  That would make me learn 6502 at the same time but my issue with this approach is that is great for testing and R&amp;D but hell to maintain and to scale later.  
<br />
<br />Maybe with 6502 coding it may be hard to separate in re-usable code module?  I saw one example with the Neo-toxin code, which seems to separate in specialized module (I just did a quick glance, didn't look at all of it) but the architecture used with the VM and everything seems over complicated to use for someone that is just starting to code on the nes.
<br />
<br />How do you approach the architecture of your game?  What drove you to chose this approach over another?  Do you put much thought into it or you just try and see what happens?
<br />
<br />Thank you in advance for your comments.
<br />
<br />P.S&gt; If something I said is not clear don't be afraid to point it out. I wrote this message during a lunch break and maybe my question is very vague because of that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 25, 2008 10:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I didn't follow you all the way along. I'm not sure what you are calling "architecture", but this is probably the hardware stuff. You should then learn a little how the PPU work before even begining any coding, I guess. You should know about tiles and pattern table, nametables and attribute tables, and palettes before even starting any coding, so at least you'll have something to put on the screen.
<br />
<br />When it comes to learning 6502 this isn't very long to do anyway, as soon as you know how to write loops and such things confortably I don't see much to worry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Wed Jun 25, 2008 9:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi Bregalad,
<br />
<br />thank you for your answer.  After reading back my message, I agree that it was not really clear what was the meaning of architecture.  I guess what I really meant was about the game engine design, how to approach it.
<br />
<br />I will try to give a concrete example since I may not be good as explaining what I'm looking for.  It may still not be clear but I will give it a try. Let's take for example a dynamic website. A dynamic website could be separated in 3 tier: the display, the business logic and the data layer.  In the data layer I may decide to abstract it more by creating a DAO layer so the BO won't know were the data comes from, just extract the data.  I could go on but I don't think it necessary, you may start to see where I'm going to.
<br />
<br />I saw on your website that you are already working on a game, Dragon Skill.  When you started to make that game, you may have thought about the design of your engine.  You may have made an engine for the map, some module for the enemies AI, etc (btw, can wait to see a playable demo of your game, seems promising).
<br />
<br />Recently I did a little bit of homebrew on the DS. They may be 2 different beast but they have some affinity,  especially regarding tile based rendering.  Once I was able to have a map engine that worked, the first thing that came to my mind was to re-factor the code to something that would be reusable.
<br />
<br />Now to get to my point, the nes and 6502 programming. hmmm..  Since the nes is programmed in assembler and my only experience as been at school on the x86 under dos a long time ago , I don't have much design experience in assembler.  If you would arrive with a high level OOP concept, I could apply it right away on a project. Now, I need to think more atomically, on a smaller scale, more to a hardware level first and grow something from that.  
<br />
<br />So, basically, when you design your game, how do you organize your code and the concepts?  Do you make module in separated files for specific concept? Procedure? 1 file with all the code and jump instruction every where? How much the code is reusable after?
<br />
<br />I know my question is quite vague but this is the kind of questions that come to my mind.  Maybe I should just have fun, stop being too serious about it, try to code bits and pieces here and there and forget about design for a while since I see those kind of things all day long at work.
<br />
<br />Sorry for my long message, everyone must be sleeping by now  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />Bregalad: Je ne savais pas que tu avais une version francaise de ton site, je l'ai decouvert par hasard aujourd'hui.  Je crois que l'information est identique sur les 2?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jun 25, 2008 11:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Reusability is difficult on the NES because of various hardware limitations. For example:
<br />
<br />- Local variables are difficult to do efficiently, so routines often use globals.
<br />
<br />- Parameters are messy to pass on the stack, so any more than three are often passed in globals.
<br />
<br />- Since having every routine preserve all registers is usually unnecessary and inefficient, the interface is more complicated. Routine B might preserve only A, while C might preserve A, X, and Y.
<br />
<br />This is not to say it's impossible or useless. Even though globals are used fairly heavily, each routine can have its own globals and allow the assembler to ensure none occupy the same memory. Recursive/multi-threaded calls are rare, so globals aren't a major program as they would be in more general-purpose programming. In my research code, I break things into modules, each covering a specific area and having a well-defined set of routines and behavior.
<br />
<br />I'd like to discuss specific techniques and problems relating to program architecture on the NES, as I'm sure we can come up with some good techniques.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 26, 2008 1:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- Local variables are difficult to do efficiently, so routines often use globals. </div><br />Are there any assembler out there that supports locals at all ? I tried undefine variables in WLA-DX but it didn't work.<br />What I do is use "Temp" vars as local, but this is kinda annoying as this isn't a meaningfull name.<br /><br />As for parameters, I don't see why mess with the stack thing. I pass them with A, X, Y and Temp variables (ocasionally C flag).<br />In fact I think assembly is just so much different than hi-level language that it's hard to use the same terms for both. "Parameters, global, locals" just have no real meaning in assembly, as you just have 2kb of RAM you can use as you wish, the only limitation being that stack grows in the $100-$1ff range, and that another $100 bytes should be reserved for OAM. Some assemblers have very different way of managing RAM.<br /><br />WLA-DX does it automatically for me, but with some limitations. All assembler will allow you to allocate RAM manually, which has advantages (you can use two local variables in the same slot if you know they won't conflict and you immadiately know which variable is what when debugging in FCEU) but can be a little annoying to do especially if you want to change everything. You can of course mix both techniques, having part of the RAM available for automatic allocated variables, and part of RAM for your manual definitions. I just chose to do everything automatically for now.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I will try to give a concrete example since I may not be good as explaining what I'm looking for. It may still not be clear but I will give it a try. Let's take for example a dynamic website. A dynamic website could be separated in 3 tier: the display, the business logic and the data layer. In the data layer I may decide to abstract it more by creating a DAO layer so the BO won't know were the data comes from, just extract the data. I could go on but I don't think it necessary, you may start to see where I'm going to.</div>
<br />I don't know much about dynamic website (I just know plain old HTML) but I'm pretty sure this is quite different from NES programming. First it's PHP and stuff is high-level language. Second, there is no real-time stuff involved (unless I'm mistaking). Third, there is no hardware directly involved. The browser and OS do all that may mess with the hardware.
<br />
<br />When writing a game engine it all depend of the game genre of course. If you're going for the classical action-oriented game, you'll want a map engine that allow to scroll a map on the screen, and the map should be stored in an efficient format to avoid wasting ROM. That's pretty much the first thing I did when I started Dragon Skill 3 years ago.
<br />
<br />After that you'll want to create the player's sprite and make a programm to controll it, with collision detection. And then you'd want to add "objects", which includes enemies, projectiles, explosions, etc... Personally I didn't do everything right on the first try. I originally came with an overly complicated solution for enemies, which I have now completely changed into a better more general-purpose solution for Dragon Skill. And now that you mention that I should update content of my website a bit. The french and english pages should be the same, if they are not I messed up with my updates.
<br />
<br />So yeah the "game loop" of an action-based game should look pretty much like that :
<br />- Read the joypad, move the player accordinaly
<br />- Run the programm of all active "objects" on the currently loaded map
<br />- Draw sprites of all active "objects" and player in OAM
<br />- Check if the status bar or various graphics should be refreshed
<br />- Wait a frame and repeat until the level is beaten or the player is dead
<br />
<br />I load only one map at a time in my game, but if you do scrolling, you'd have to get more complicated solutions. Also if you're coding a stategy game it would probably have few in common with this.
<br />
<br />Of course, before daling with all of that, you'd want to find an assembler you're confortable with, and write the most usual general purpose routine, to do things like write stuff to name/attribute tables, modify the palette, and the NMI routine that update the stuff to the PPU and things like that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jun 26, 2008 1:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are there any assembler out there that supports locals at all?</div><br />I meant <a href="http://en.wikipedia.org/wiki/Automatic_variable" class="postlink">automatic variables</a> allocated on the stack for a particular invocation of a routine. One can do this manually by decrementing the stack pointer appropriately, then transferring it to X and using indexed addressing to access the locals. Even pushing a value on the stack and pulling it later is a form of local variable.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As for parameters, I don't see why mess with the stack thing. I pass them with A, X, Y and Temp variables (ocasionally C flag).</div><br />As I said, if you have more than three parameters, you either use the stack or global variables. By <a href="http://en.wikipedia.org/wiki/Global_variable" class="postlink">global variable</a> I mean accessible to more than one routine, and only one instance in the program (as contrasted with local automatic variables). The advantage of the stack is a guarantee that the variable on the stack won't clash with another routine (assuming you don't overflow the stack).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">"Parameters, global, locals" just have no real meaning in assembly</div>
<br />They have the same meaning as in a high-level language. In both you invoke routines and pass parameters to them, and get return values back. In both you have memory for global variables, and a stack that can be used for local variables. And in both you often put names in limited scopes.
<br />
<br />The main limiting factor in using high-level design concepts with assembly is the typical lack of assembler mechanisms for building them in a way that's convenient to use and doesn't require dealing with lots of details. You can often simplify interfaces, but at a cost of reduced speed and increased code size.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Jun 26, 2008 2:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A lot of good information, thanks everyone.
<br />
<br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Reusability is difficult on the NES because of various hardware limitations. </div><br /><br />Technically, I have to forget about applying high level design pattern for the nes and see how to think in the nes way.  That will bring some fresh air to my mind.  I may find some concept that I can apply to high level programming too, who knows?<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I'd like to discuss specific techniques and problems relating to program architecture on the NES, as I'm sure we can come up with some good techniques.</div><br /><br />I would love to see a list of good practices for the nes. That could help finding the common pitfall when you start programming for that platform. And a list of common problems with a solution would be great.  I don't think there is such a list?<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">When writing a game engine it all depend of the game genre of course. If you're going for the classical action-oriented game, you'll want a map engine that allow to scroll a map on the screen, and the map should be stored in an efficient format to avoid wasting ROM. That's pretty much the first thing I did when I started Dragon Skill 3 years ago. </div><br /><br />Good point. So I should first decide my game genre and from that point, start to develop the code that will help achieve that goal. I will keep that in mind. Thanks.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Of course, before daling with all of that, you'd want to find an assembler you're confortable</div><br /><br />It may be hard for a beginner in 6502 to be able to chose the appropriate assembler since he doesn't not yet his own needs.  I'm not sure which one I will start evaluating first yet.  Any suggestion would be appreciated.  I was able to compile WLA, I may try this one first.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">And now that you mention that I should update content of my website a bit. The french and english pages should be the same, if they are not I messed up with my updates. </div><br /><br />I guess the content seems the same at first glance.  I just wanted to make sure that I didn't miss anything interesting since I can read both.  From your comment I don't have to worry about that <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The main limiting factor in using high-level design concepts with assembly is the typical lack of assembler mechanisms for building them in a way that's convenient to use and doesn't require dealing with lots of details. You can often simplify interfaces, but at a cost of reduced speed and increased code size.</div>
<br />
<br />Since the hardware is quite limited too, this mean specialized code for a specific game cannot be avoided.  Good comment.
<br />
<br />Those message answered some of my question and I'm grateful about it.  Now I should try to focus on making some code instead to worry about patterns and such things.  
<br />
<br />Thanks everyone!
<br />
<br />Now some new questions come to my mind but they're not related to this topic. I will start a new tread instead.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 26, 2008 3:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It may be hard for a beginner in 6502 to be able to chose the appropriate assembler since he doesn't not yet his own needs. I'm not sure which one I will start evaluating first yet. Any suggestion would be appreciated. I was able to compile WLA, I may try this one first.<br /></div>
<br />It's hard for everyone.
<br />Well, I think WLA has really good features. The whole section thing is a good feature most assemblers lacks : They will just compile the code in the order you give it to them, which is is most cases not necessary. If you write each set of routines in a section, you're sure the section is compiled in the order you wrote it, but the sections themselves can be rearranged in any order, which is good. If you need a section to be aligned so that the high byte of the adress of stuff within it is known you can do this, and this is somtimes usefull when doing optimisations with code if you don't want to deal with the high byte of some stuff or simply if you're doing timed code and don't want branch instructions to take 4 cycles.
<br />The main drawback of WLA is occasional bugs (6502 hasn't too much, but SPC700 is horrible) and that you'll need to write .w after most instruction with absolute adressing, which is annoying.
<br />
<br />Most people here prefer CA65 which I don't know very well. Also, nesasm is good enough for newbies as it directly compiles a NES file automatically, but it's math features are very limited, and it's bank arrangement sheme is horrible. You can usually convert code from one assembler to another but you'll need a lot of synthax changes and this is very annoying to do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jun 26, 2008 5:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">- Local variables are difficult to do efficiently, so routines often use globals.<br /><br />- Parameters are messy to pass on the stack, so any more than three are often passed in globals.</div>
<br />But if you reserve a block of sixteen or so locations of zero page for passing arguments and local variables, it might not be as messy. You can see this coding style in my own programs, which most often use addresses $0000-$000F for arguments and scratch space. (The ARM procedure call standard does it similarly, but with actual CPU registers because it has more of them.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Jun 26, 2008 8:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a complete paradigm shift compared to what I'm used to do in my every day coding.  It will be a little bit hard to get used at the beginning.
<br />
<br />The advantage of the zero page, which if I remember well is a memory address range which is faster to access.  Is this concept still used in some new CPU like the ARM used on the DS?  I guess not?  There must have been some technological reason in the past like the speed of the hardware or something like that (I'm just guessing here).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jun 26, 2008 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Game Boy, GBC, GBA, and DS also have "fast pages" of RAM that are on the CPU die as opposed to a separate RAM chip. These aren't exactly the same as the 6502 family's direct page, but they are similar in effect.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>