<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NMI and Main Loop</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NMI and Main Loop</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3971">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3971</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Mar 20, 2008 9:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This is a perfectly good subject to discuss, because setting up the way game logic and screen updates are performed is not as straightforward as it may seem at first, and it's easy to make a decision that will give you headaches later on. I have changed the way my main loop is organized a few times already, and even a change of mapper hardware has made an impact on that.</div>
<br />This is, sadly, right. The first time I've started to do NES programming I decided to do everything in NMI and only do a jmp * instruction outside of it (like SMB), mostly because many demos available back then worked like this.
<br />But this later happened to be a very bad chose and I eventually stopped to do it that way.
<br />
<br />Being a more experienced programmer doesn't solve this kind of "bad choises" problem at all. I recently completely changed the way objects works on my main game project, and even if the new method is a lot better than the old one, that is quite a big thing to fix, and need quite some work (it's still not finished). I also made major change to the routine that handle sprites, and made it much more optimised and user friendly.
<br />Overall, I don't know if that's the case of many people here, but I personally pass more time to improve/fix/optimize code I wrote before than code new things.
<br />
<br />That's probably why, when someone have a problem in nesdev, nobody can come and say "I have the solution to your problem". Instead, one will maybe have a part of a possible solution, and worse you'll most likely get completely different solutions, and it's hard to determine which is the best.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nineTENdo</b> [ Sun Mar 23, 2008 9:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />im kinda in the same boat right now.  deciding where which part of my code is better to be run in NMI or a Main Loop.  So far i found that a least delays work best in the Main loop and not in the NMI. basically almost everything  in my code is being run in NMI's  but there some slight problems in NMI that run better in the Main.  Like loading a new nametable with little or no gliches and or moving a sprite while one is moving in its own algorithm. Glitchy Glitchy Glitchy.   thats the problem.  if figure flags flags flags but i just havnt envisioned it yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Mar 23, 2008 10:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wait a minute... "delays"? What do you mean by "delays"? I hope you don't mean a loop that just wastes time in order for something to remain on the screen for a while... because that's just terrible.
<br />
<br />It's terrible because you end up delaying EVERYTHING. A proper delay system should be defined in terms of frames, and variables in RAM would act as counters. If you decrement these variables once everyframe, ideally in your NMI routine, when they reach zero you know the delay is over. This allows you to delay diferent parts of your program independently if you want to.
<br />
<br />For example, if you have an enemy walking left, but then he stops moving for a while, before turning around and moving right. You'll sure not want the whole game to stop (possibly even the music) just because the enemy needed to remain stopped for a while.
<br />
<br />About the PPU updates, you can only do it when the scren is not rendering, regardless of whether you're doing it inside the NMI routine or not.
<br />
<br />The most common cases have already been explored:
<br />
<br />1. Whole game inside the NMI routine;
<br />2. Whole game in the main program;
<br />3. Game logic in the main program, PPU updates inside NMI routine;
<br />
<br />All of them work fine, but one might be better then the other for a particular project, and only the programmer can decide that.
<br />
<br />Number 1 can be a bit confusing, because every VBlank you update the PPU with data calculated during the last frame, and then calculate the data for the next one. Number 2 works works fine too, when you use the NMI to set a flag to indicate that VBlank started. Neither 1 or 2 handle slowdowns very well, because you either can't tell you missed a frame, or you can only tell a while after it happened. So you better make sure your frame calculations fit whithin a frame's time at least 99% of the time.
<br />
<br />With number 3 you can split the work, in a way that a piece of it can take as long as necessary, while the other will run once every frame for sure. This makes it easy to take care of things that need critical timing, such as music.
<br />
<br />Frankly, if you game logic is pretty fast, it doesn't matter at all what method you choose. The problem is mostly how to handle slowdowns.
<br />
<br />There are a few rare cases when a game could seriously benefit from the 3rd method. when I was first thinking about making a raycaster, I knew I'd have a lot of things to calculate. So, once there was enough data to update the PPU, instead of waiting fo VBlank doing nothing (methods 1 and 2) the data for the next frame could already be calculated, so chances were frames would be ready faster. In some cases it is necessary to keep the main code always busy, while the NMI simply updates the PPU with whatever data is ready at the time it fires.
<br />
<br />Again, this is the case of more complex programs, where a software frame is not necessarily aligned to a single hardware frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nineTENdo</b> [ Sun Mar 23, 2008 11:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If you decrement these variables once everyframe, ideally in your NMI routine, when they reach zero you know the delay is over. <br /><br /></div><br /><br />but then again you will have to nest to other counters.  beacsue the maximum possible value would FF to 00<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">This allows you to delay diferent parts of your program independently if you want to.<br /></div>
<br />
<br />this is pretty genius though i never though of it like that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Mar 23, 2008 11:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nineTENdo wrote:</div><div class="quotecontent">but then again you will have to nest to other counters.  beacsue the maximum possible value would FF to 00</div><br />You don't have to nest, simply using multi-byte variables will do. With 2 bytes, you can count up to $FFFF. That's 65535 frames, or about 1092 seconds. That's 18 minutes! Why would you want to delay anything more than that? If by any chance you do need to, use one more byte and you can wait about 77 hours. I doubt anyone even keeps their NES on for that long! =)<br /><br /><div class="quotetitle">nineTENdo wrote:</div><div class="quotecontent">this is pretty genius though i never though of it like that.</div>
<br />This is the most important thing that makes games possible. Most people just study linear logic when learning how to program, and because of that they fail to understand how an interactive program works. In a game, everything works in little pieces over time. If you hog the CPU for a single purpose, how will the other things in the program function?
<br />
<br />I guess that it's like each entity (enemies, player, animations, delays, whatever) only "thinks" once per frame, and what they think is: "Based on my current state and on the current circunstances, what action should I take during this frame?". In the case of the title screen delay, the current state is "waiting for the counter to reach 0", the circunstance is the value of the counter, and the action it takes is either "decrement the counter" (in case it hasn't reached 0) or "fade out the screen and move along" (in case it did reach 0). Most events in a game can be described like this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Mar 20, 2009 7:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really hate digging up this old thread, especially considering that this has been talking about a bunch of times. But I'm still confused about something.
<br />
<br />Do most games force a software frame to take an integer number of hardware frames? So a game frame will either take 1 or 2 hardware frames, not like 1.5? It seems like this would be the only way to go, because you never want the game loop to be executed unless all of the necessary PPU and audio data has been copied, which can only really happen at the start of a frame. If that were the case, then how do (if any do) games manage to slow the frame rate down to anything other than 30, 20, 15, 12, etc. FPS?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Mar 20, 2009 7:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A game might use a pattern of 2, 1, 2, 1, etc. I believe it's called <a href="http://en.wikipedia.org/wiki/Triple_buffering" class="postlink">triple buffering</a>. Even with plain-old double buffering,
<br />
<br />Field 1: Video
<br />Field 2: Audio and physics, then half of video
<br />Field 3: Half of video, then audio and physics
<br />
<br />On the NES, "half of video" might refer to backgrounds vs. sprites, or backgrounds at the scroll seam vs. backgrounds within the visible area, or backgrounds and sprites vs. CHR RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Mar 20, 2009 8:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, I can't believe I wasn't thinking about double-buffering or triple-buffering. This opens up a whole new world of ideas for me.
<br />
<br />I was thinking of something pretty interesting. What if you had like a "stack" of updates, and every frame you pulled off as many as you could, leaving the rest for next frame? Though after a certain amount of time, you would end up with mixes of multiple frames, which would be bad.
<br />
<br />I'll have to think about this some more...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Mar 21, 2009 2:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was thinking of something pretty interesting. What if you had like a "stack" of updates, and every frame you pulled off as many as you could, leaving the rest for next frame? Though after a certain amount of time, you would end up with mixes of multiple frames, which would be bad.<br /></div>
<br />If the CPU is too slow, the stack will simply be pushed more than pulled each frame and will finally overflow, so I belive it's a bad idea, I could be wrong tough.
<br />
<br />Also what tepples says applies if the game can predict that it slows down, and in most cases you can't really predict it. Normally, you'd do it so that most of the time it runs at 60FPS, but if too many objects are active, it may slow down to 30FPS or even lower (20, 15, etc...)
<br />
<br />Also it depends on the kind of the game. A RPG is much less likely to slow down than a space shooter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Mar 21, 2009 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I have a multi-directional scrolling platformer with RPG aspects, so slow-down is really possible. I guess it wouldn't be so bad if it slowed down to 30 FPS, but I wouldn't want this to happen often...
<br />
<br />I agree about the stack idea. It would eventually overflow, which would be really bad. It was just an idea though.
<br />
<br />The bottom line is <em>every</em> requested PPU/APU update has to happen one way or another. You <em>cannot</em> skip any updates, otherwise really really bad things could happen. So in order to be certain that all of these updates have happened, it seems the game loop cannot be executed again until all of the necessary information has been copied over, thus meaning at the end of a game loop, one must wait for the next NMI to copy the PPU/APU data, which forces the game loop to take an integer number of frames.
<br />
<br />Now that I think about it, how would double-buffering be implemented for a game loop? Wouldn't that only apply if the game loop was shorter than a frame, and not longer?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>