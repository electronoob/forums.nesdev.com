<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>56</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Mon Dec 10, 2012 9:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The 6502 deals with numbers low byte first. This means something like jmp $8D9A is assembled to $4C(opcode for the jmp instruction) $9A (low byte) $8D (high byte).<br /><br />It may appear to be stored &quot;backwards&quot; to you, but it represents the exact same value. That's just how the CPU does things. <br /><br />The PPU appears to like the high byte first. You write $8D to $2006, and then $9A to $2006. $2007 would be geared to write to $8D9A, not $9A8D. On one console, you get to deal with with both types of <a href="http://en.wikipedia.org/wiki/Endianness" class="postlink">endianness!</a><br /><br />If the 6502 is going to read a 16 bit value as an address or pointer, it has to be two contiguous bytes, low byte first. <br /><br />But... any other time (like adding to an objects position), it doesn't matter. <br /><br />consider this code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">highbyte = $04<br />lowbyte = $EF<br /><br />lda lowbyte<br />clc <br />adc #$08<br />sta lowbyte<br /><br />lda highbyte<br />adc #$00<br />sta highbyte<br /></div><br />You'd get the expected high byte in the RAM location named highbyte, and the expected low byte in the RAM location named lowbyte. They don't even have to be contiguous.<br /><br />I tend to store things high byte first because it's much easier to read when I'm peeking at the RAM in a debugger. It doesn't matter one way or the other except with pointers and addresses, which the 6502 will always read in its own way.<br /><br />Just be consistent in your own code, and do what makes sense for you. I hope this post didn't serve to confuse you more.<br /><br />edit: Wait. Is this the heart of the matter that you expect ox, ox+1, ox+2, and ox+3 to have the same values in the same order as position_hi etc? <br /><br />Reversing those .ds statements for position_hi etc. wouldn't change the represented value at all. Even if they appeared in the &quot;right&quot; order after reversal, they represent the same thing either way. You could even do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">position_hi .DS 1<br />oX .ds 4<br />position_medium .DS 1<br />position_lo .ds 1<br />position_medihi .ds 1<br /></div><br />The bytes that correspond with each other would still be equal, and together they would represent the same number, just in a different location in RAM. (which again, only matters for addresses and pointers.)<br /><br />edit2: nevermind for what was once here. Not reading closely <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Dec 11, 2012 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">The PPU appears to like the high byte first. You write $8D to $2006, and then $9A to $2006. $2007 would be geared to write to $8D9A, not $9A8D. On one console, you get to deal with with both types of <a href="http://en.wikipedia.org/wiki/Endianness" class="postlink">endianness!</a><br /><br />If the 6502 is going to read a 16 bit value as an address or pointer, it has to be two contiguous bytes, low byte first. <br /><br />But... any other time (like adding to an objects position), it doesn't matter. <br /><br />consider this code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">highbyte = $04<br />lowbyte = $EF<br /><br />lda lowbyte<br />clc <br />adc #$08<br />sta lowbyte<br /><br />lda highbyte<br />adc #$00<br />sta highbyte<br /></div><br />You'd get the expected high byte in the RAM location named highbyte, and the expected low byte in the RAM location named lowbyte. They don't even have to be contiguous.</div><br /><br /> <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> I'm dumb I dont understand what you are saying to me. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> Won't they be contiguous (near each other) since highbyte is right above lowbyte at the top of your code there?  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> : )<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">edit: Wait. Is this the heart of the matter that you expect ox, ox+1, ox+2, and ox+3 to have the same values in the same order as position_hi etc? <br /><br />Reversing those .ds statements for position_hi etc. wouldn't change the represented value at all. Even if they appeared in the &quot;right&quot; order after reversal, they represent the same thing either way. You could even do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">position_hi .DS 1<br />oX .ds 4<br />position_medium .DS 1<br />position_lo .ds 1<br />position_medihi .ds 1<br /></div><br />The bytes that correspond with each other would still be equal, and together they would represent the same number, just in a different location in RAM. (which again, only matters for addresses and pointers.)</div>  Yes the different location in RAM <s>was</s> is important to me.  I was trying to understand how the code would work using the oX+0 oX+1 oX+2 and oX+3.  More on that in a bit. <br /><br /> <br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">I'm under some trouble with this code...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;6502 Simulator<br />&nbsp;.START $1000<br />&nbsp;.ORG $0000<br />&nbsp;<br />&nbsp; .DB &quot;ABC&quot;<br /><br />position_lo .DS 1<br />position_medium .ds 1<br />position_medihi .DS 1<br />position_hi .ds 1<br />oX .ds 4<br /><br />&nbsp;<br />&nbsp;.ORG $1000<br />&nbsp;<br />&nbsp; &nbsp; <br /><br />&nbsp; ; set the position to $01FC<br />&nbsp; lda #$01<br />&nbsp; sta position_hi<br />&nbsp; LDA #$01<br />&nbsp; sta position_medihi<br />&nbsp; LDA #$00<br />&nbsp; sta position_medium<br />&nbsp; LDA #$02<br />&nbsp; STA position_lo<br />&nbsp; <br />&nbsp; LDa #$01<br />&nbsp; STa oX+3<br />&nbsp; LDa #$01<br />&nbsp; STa oX+2<br />&nbsp; lda #$00<br />&nbsp; sta oX+1<br />&nbsp; lda #$02<br />&nbsp; STA oX+0<br />&nbsp; &nbsp; <br /><br />&nbsp; ; now subtract eight (#$0008) from this position<br />&nbsp; sec <br />&nbsp; lda position_lo&nbsp; ; subtract from the low byte first<br />&nbsp; sbc #$08<br />&nbsp; sta position_lo<br />&nbsp; LDA position_medium<br />&nbsp; SBC #$00<br />&nbsp; STA position_medium<br />&nbsp; LDA position_medihi<br />&nbsp; SBC #$00<br />&nbsp; sta position_medihi<br />&nbsp; LDA position_hi<br />&nbsp; sbc #$00<br />&nbsp; STA position_hi<br />&nbsp; <br />&nbsp; ; now subtract eight (#$0008) from this position<br />&nbsp; sec <br />&nbsp; lda oX+0&nbsp; ; subtract from the low byte first<br />&nbsp; sbc #$08<br />&nbsp; sta oX+0<br />&nbsp; LDA oX+1<br />&nbsp; SBC #$00<br />&nbsp; STA oX+1<br />&nbsp; LDA oX+2<br />&nbsp; SBC #$00<br />&nbsp; sta oX+2<br />&nbsp; LDA oX+3<br />&nbsp; sbc #$00<br />&nbsp; STA oX+3</div></div><br /><br /><span style="color: #FF40BF">See what I was saying...? I reversed the order of the section of memory declarations and the RAM inverted... it was the same answer but the order of the values in RAM was upside down... and that had been confusing me... though now I understand.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></span>  <br /><br /><br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Ok well that is my code I've explored in the 6502 Simulator from tokumaru.  The only thing is that at the top of it I had to reverse this code. <br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">position_hi .DS 1<br />position_medihi .ds 1<br />position_medium .DS 1<br />position_lo .ds 1</tt><br /><br />I started with that because tepples made his code up there very tricky...  I think...  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />  because  he started with <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">position_hi = $0701<br />position_lo = $0700</div><br />and that has been confusing me. Should <span style="color: #FF8040">position_lo</span> be above <span style="color: #FF8040">position_hi</span>? <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>See reversing the order of the declarations reversed my view of the memory.  It was the same answer though, you are right, thank you for pointing that out! I really appreciate that! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> I've learned a lot thinking about all of this.  The coolest thing I've learned is that little-endianness makes sense when using one variable name for multiple bytes.  You start with the lowest value... (i'm going to use oX for my variable name)  oX+0.  Ok, then as the <span style="color: #FFBF80">number</span> increases the importantance increases!!! oX+<span style="color: #FFBF80">1</span> oX+<span style="color: #FFBF80">2</span> oX+<span style="color: #FFBF80">3</span>.... that is AWESOME!  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" />  I'm happy Nintendo chose to use little-endianness!  &quot;Little-endian&quot; won't confuse me as much anymore!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />And thank you Kasumi for your endianness link! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  I'm not extreemly excited about wikipedia though.   <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />  <br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">edit2: nevermind for what was once here. Not reading closely <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /></div>Kasumi, it's ok <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I don't remember reading it; I found this second edit when I got up this morning.<br /><br /><span style="color: #FF40BF">edit.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Tue Dec 11, 2012 1:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />With the order of the RAM things (Your first reply) it doesn't matter where the bytes of RAM are, you just have to add them and store them to the right places. I keep all mine next to each other, but they don't have to be. The processor just look at where to load and store, which you decide. It doesn't care if it's right next to each other or not. Now when you use an addressing mode like [ZeropageLocation],Y, then you DO have to have them next to each other (Low byte first since it's little endian) because then it does &quot;care&quot; about where they're at because the processor is hardwired to take the zero page location, then the zeropage location+1 the next time! When you're working with single bytes as 16-bit values, you don't have to keep them together because you probably aren't using the data with an addressing mode or anything like that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Dec 11, 2012 1:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks 3gengames for explaining my confusion away! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  I understand <span style="color: #00FF00">Kasumi</span> more now.  <br /><br />I want to say that I edited my post up there twice because I came back to my computer and wrote that <span style="color: #FF40BF">colored</span> part in the middle.  Then I submitted it without making it colored for adding/editing it. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br /><span style="color: #00FF00">edit.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Dec 11, 2012 4:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm dumb I dont understand what you are saying to me. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> Won't they be contiguous (near each other) since highbyte is right above lowbyte at the top of your code there? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> : )</div><br />To expand on this point a little, there are things in your code that don't end up in your actual rom. For instance, labels. Labels actually take up zero space by themselves.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.org $8D9A<br />label1:<br />label2:<br />label3:<br />label4:<br />label5:<br />;etc, etc<br /></div><br />You could put a million random labels in your code, and your program would (or at least should) be assembled exactly the same. They only take up space when they're used in an instruction. What a label does is names an address for you automatically.<br /><br />I explained how jmp $8D9A was assembled in the last post. In the above code, jmp label1, jmp label2, jmp label3 etc would all assemble the same as jmp $8D9A. Because even though label2 is after label1, label1 doesn't take up any space. There are no instructions that do take up space between them, so they refer to the same location.<br /><br />When you add code, it makes every label after the change need a new address. But all the code you previously made (in most cases) will work the same, despite the address move.  Similarly, you can switch where the RAM your program is using is, and (in most cases) it will also work the same. That's what I was trying to demonstrate. It doesn't matter what order your DS statements are in.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">highbyte = $04<br />lowbyte = $EF<br /></div><br />Above, highbyte and lowbyte don't refer to contiguous RAM. (Like $04 and $05, or $EF and $F0). The fact they they're next to each other in your code doesn't matter.<br /><br />You could add a million text = $whatever in your code and it shouldn't affect how your rom is assembled. My assembler (and I assume others as well), doesn't care where they are in the slightest. I could even do something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #mario<br />mario = $04;Right in the middle of the code!<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #$08<br /></div><br /><br />And it would assemble the same as if mario = $04 was anywhere else in the code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Dec 12, 2012 4:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>What does &lt;&gt; mean?  Google search says nothing exists for &lt;&gt;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">(<a href="http://www.6502.org/tutorials/compare_beyond.html" class="postlink"><span style="color: #00BF00">this page</span></a>) wrote:</div><div class="quotecontent">If the Z flag is 0, then A &lt;&gt; NUM and BNE will branch</div>  Please help me understand what &lt;&gt; means?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Dec 12, 2012 5:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does &lt;&gt; mean?  Google search says nothing exists fo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">what &lt;&gt; means</div><br />Different.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Dec 12, 2012 5:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does &lt;&gt; mean?  Google search says nothing exists fo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">what &lt;&gt; means</div><br />Different.</div><br />THANK YOU TOKUMARU!!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Dec 12, 2012 6:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm dumb I dont understand what you are saying to me. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> Won't they be contiguous (near each other) since highbyte is right above lowbyte at the top of your code there? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> : )</div><br />To expand on this point a little, there are things in your code that don't end up in your actual rom. For instance, labels. Labels actually take up zero space by themselves.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.org $8D9A<br />label1:<br />label2:<br />label3:<br />label4:<br />label5:<br />;etc, etc<br /></div><br />You could put a million random labels in your code, and your program would (or at least should) be assembled exactly the same. They only take up space when they're used in an instruction. What a label does is names an address for you automatically.<br /><br />I explained how jmp $8D9A was assembled in the last post. In the above code, jmp label1, jmp label2, jmp label3 etc would all assemble the same as jmp $8D9A. Because even though label2 is after label1, label1 doesn't take up any space. There are no instructions that do take up space between them, so they refer to the same location.<br /><br />When you add code, it makes every label after the change need a new address. But all the code you previously made (in most cases) will work the same, despite the address move.  Similarly, you can switch where the RAM your program is using is, and (in most cases) it will also work the same. That's what I was trying to demonstrate. It doesn't matter what order your DS statements are in.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">highbyte = $04<br />lowbyte = $EF<br /></div> <br />Above, highbyte and lowbyte don't refer to contiguous RAM. (Like $04 and $05, or $EF and $F0). The fact they they're next to each other in your code doesn't matter.<br /><br />You could add a million text = $whatever in your code and it shouldn't affect how your rom is assembled. My assembler (and I assume others as well), doesn't care where they are in the slightest. I could even do something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #mario<br />mario = $04;Right in the middle of the code!<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #$08<br /></div><br /><br />And it would assemble the same as if mario = $04 was anywhere else in the code.</div><br />Thank you Kasumi.  I kindof guessed that was true <span style="color: #BF80FF">(&quot;that&quot; is a responce to your first sencence.  After debugging with FCEUX for a whlile I noticed that my labels in the code were absent.  It made me guess what you are talking about - I remember learning that labels dissappeared after assembly in one of my CS assembly @ut college courses.)</span>... <span style="color: #999999">XFactor is coming on... I must go see and listen! </span>... but didn't know for sure <span style="color: #BF80FF">(&quot;didn't know for sure&quot; is a response to your statement about how labels take up no space.  All of your explaination made sense to me; it kind of solidified it all in my head-thanku! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />)</span>.  <span style="color: #BF80FF">Kasumi, <s>T</s>t</span>hanks for your detailed explanations!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><span style="color: #BF80FF">edit.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Dec 14, 2012 6:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">7&nbsp; bit&nbsp; 0<br />---- ----<br />Rxxx xxxD<br />|&nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp; &nbsp;+- Data bit to be shifted into shift register, LSB first<br />+--------- 1: Reset shift register and write Control with (Control OR $0C),<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; locking PRG ROM at $C000-$FFFF to the last bank.<br /></div><br /><br />When I come across something like this when looking through nes mappers on the nesdev wiki I always become confused.  It looks like there is something there to write in a byte.  But the bin is 8kb or something like that... and so I wonder if every byte in those 8kb should be setup in that form... but then I think that doesn't make sense... why would they require every byte to be like that?   <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Fri Dec 14, 2012 7:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's MMC1. Mapper 1. It uses four 5-bit registers. You write the registers 1 bit at a time. Bit 7 is the reset bit and automatically assigns a few registers the default way. But you write the 5 bits of each register with data bit 0. You basically LDA with a number less then $80 (Because 80 will have bit 7 set, and will reset it, you don't want that when programming it) and you basically just STA (Memory region of the register you want to write: $8xxx,$Axxx,$Cxxx,$Exxx) and LSR.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />LDA #$&#91;ValueToWriteMMC1&#93;<br />STA $8000 ;1st write<br />LSR A<br />STA $8000 ;2nd write<br />LSR A<br />STA $8000 ;3rd write<br />LSR A<br />STA $8000 ;4th write<br />LSR A<br />STA $8000 ;Register NOW is programmed and updated.<br />...<br /></div><br /><br />For MMC1, the last write also finally selects which register to update, so you can write any places you want above $8000 as long as the last write goes where you want it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Dec 14, 2012 7:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">the bin is 8kb or something like that</div><br />What bin are you talking about?<br /><br />Anyway, those schematics show you how the mapper interprets writes to its registers, they have nothing to do with how data is set up. You know when you write to $2000 (one of the NES registers) and some bits select the active name table, another bit selects whether NMIs will happen, and so on? Mapper registers are just like that too. In the case of the MMC1, you have to write to the registers like 3gengames said.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Dec 14, 2012 8:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">the bin is 8kb or something like that</div><br />What bin are you talking about?</div>Sorry... bank... an 8kb or a 16kb bank.<br /><br />Lets say we are trying to use an 8kb register that is listed as $C000-$DFFF.  How do you use it... write to it... it starts at $C000 so I could set that register with something like<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #00001011<br />sta $C000</div><br />and then how could I write 8kb of data to $C000-$DFFF?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Dec 14, 2012 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Lets say we are trying to use an 8kb register</div><br />There's no such thing as an &quot;8kb register&quot;.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">that is listed as $C000-$DFFF.</div><br />This just means that the register can be accessed in any address between $C000 and $DFFF: writing to $CF8B is the same thing as writing to $DD0F, it doesn't matter. The register is mirrored across that range of memory, but it's still 1 register.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How do you use it... write to it... it starts at $C000 so I could set that register with something like<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #00001011<br />sta $C000</div></div><br />That's exactly it, but you could have used any address between $C000 and $DFFF.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and then how could I write 8kb of data to $C000-$DFFF?</div><br />There's no need to do this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Fri Dec 14, 2012 9:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's not right, you have to shift and store it 5 times, remember that! And only the last right matters, but don't worry about that, just write the register you need 5 times.<br /><br />But yeah, what does copying 8KB of data to ROM? You can't over write ROM. It won't do anything. To switch more ROM data in, it basically looks at the address lines when read, and switches them! So if the ROM is in 8000-BFFF, it will &quot;spit out&quot; the new data that goes in that area. When it's C000-FFFF, it will spit out whatever it is assigned to put out there. that's how mappers work. All their locations they change is different, though. This example is for an MMC1, which seperates it into a 16KB &quot;data&quot; bank and then a 16KB &quot;fixed&quot; bank that can't be moved.<br /><br />Also, worth noting: when mappers are present, they &quot;consume&quot; the WRITES to the ROM. When read, the mapper doesn't do anything except let the CPU look at the ROM.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>56</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>