<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=8557" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-03-11T11:55:33-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=8557</id>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2012-03-11T11:55:33-07:00</updated>
<published>2012-03-11T11:55:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91220#p91220</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91220#p91220"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91220#p91220"><![CDATA[
Cool, got it. Thanks!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Sun Mar 11, 2012 11:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-03-11T05:55:44-07:00</updated>
<published>2012-03-11T05:55:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91207#p91207</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91207#p91207"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91207#p91207"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />I don't plan to use DMC at all. Does this mean I can get away with not reading the controllers multiple times?<br /></div><br />Yes. If you're not using DMC for audio or abusing it for raster timing (e.g. Time Lord), you can skip the rereading steps.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I honestly don't like the idea of possibly having to use "old" input for a frame just for an audio thing.<br /></div><br />LJ65 gets away with it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Forgetting about actual four player support entirely for the moment, what I want to know is what in the above code causes player 3 and player 4's input to go to controllers 1 and 2 with a famicom four player adapter attached.<br /></div><br />What a game would do in 1- or 2-player mode is LDA player3input ORA player1input STA player1input<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That's what I am trying to avoid, at least for now.<br /></div><br />Except players on a Famicom actually expect this to happen so that they can use brand new expansion controllers instead of the old beat-up hardwired controllers on a 2-player game.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The Four Score option doesn't interfere at all. I'm only reading from each register ($4016, $4017) 8 times right now, and am not even trying to get input from player 3 or 4.<br /></div><br />Player 3 is on D1 where player 1 is on D0. Player 4 is on D1 where player 2 is on D0.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't see a setting in FCEUX for whether the famicom 4 player adapter that I'm having trouble with is in 2 or 4 player mode<br /></div><br />It doesn't have modes, to my knowledge.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Am I correct in assuming when I read $4016, what's returned is something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">%000000XY<br />Where Y is joypad 1's bit for the current button, and X is joypad 3's?<br /></div><br /></div><br />True.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And if these things are true, player three's input is going to player one's controller because something beyond player 1's input is stored in the first 8 reads of $4016. This only happens with the new code that checks more bits than the rightmost one.<br /></div><br />Yes, and games that check more bits do so precisely so that they can let player 1 use player 3's possibly newer controller. "Expansion controllers" and "four-player adapter", as far as I can tell, mean the same thing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Mar 11, 2012 5:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2012-03-10T14:46:37-07:00</updated>
<published>2012-03-10T14:46:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91172#p91172</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91172#p91172"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91172#p91172"><![CDATA[
I don't plan to use DMC at all. Does this mean I can get away with not reading the controllers multiple times? I honestly don't like the idea of possibly having to use "old" input for a frame just for an audio thing.<br /><br />Forgetting about actual four player support entirely for the moment, what I want to know is what in the above code causes player 3 and player 4's input to go to controllers 1 and 2 with a famicom four player adapter attached. That's what I am trying to avoid, at least for now. The Four Score option doesn't interfere at all. I'm only reading from each register ($4016, $4017) 8 times right now, and am not even trying to get input from player 3 or 4. Four Score behaves for two players. Famicom does not. How are they different?<br /><br />I don't see a setting in FCEUX for whether the famicom 4 player adapter that I'm having trouble with is in 2 or 4 player mode, nor have an actual famicom to test on. Is it an FCEUX quirk, or is there a wiki article about the famicom 4 player adapter I have missed that explains how its read from?<br /><br />Am I correct in assuming when I read $4016, what's returned is something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">%000000XY<br />Where Y is joypad 1's bit for the current button, and X is joypad 3's?<br /></div><br /><br />Because my assumption would be that if an adapter that supports multiple players were connected, and if my emulator supported this attachment correctly, and if there is no two or four player setting in the emulator it must be supporting the four player mode. And if these things are true, player three's input is going to player one's controller because something beyond player 1's input is stored in the first 8 reads of $4016. This only happens with the new code that checks more bits than the rightmost one.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Sat Mar 10, 2012 2:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-03-10T09:15:06-07:00</updated>
<published>2012-03-10T09:15:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91146#p91146</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91146#p91146"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91146#p91146"><![CDATA[
Complicating factors: <ul><li>When one or two players are playing, Famicom controllers 3 and 4 should control players 1 and 2. But when more than two players are playing, Famicom controllers 3 and 4 should control players 3 and 4. </li><li>The Four Score can be switched on or off while the power is on, so detection in the init code might not be enough. </li><li>The Four Score is slower to read, but it provides fairly reliable detection of DMC DMA bit deletions. </li></ul>For the sake of the player, it's best to continuously poll for a Four Score on the title screen. If the NES Four Score is present, display a message "FOUR SCORE CONNECTED"; otherwise, erase it. Write in the manual that on an NES, players shouldn't start a 4-player game until the message appears.<br /><br />I recommend two different reading loops, one for ordinary operation:<br /><ol style="list-style-type: decimal"><li>Toggle strobe to 1 then 0. </li><li>Read D0 and D1 from $4016 and $4017 eight times. </li><li>Repeat steps 1 and 2, compare, and use the previous frame's keypresses if they differ. </li><li>If a 3- or 4-player game has not been started, OR player 3 on top of player 1 and player 4 on top of player 2.</li></ol>And one for NES Four Score:<br /><ol style="list-style-type: decimal"><li>Toggle strobe to 1 then 0. </li><li>Read D0 from $4016 and $4017 24 times. </li><li>Check the signature for each of the two ports; if it differs, use the previous frame's keypresses. </li></ol><br />Selecting which loop to use when depends on whether and how much you plan to use the DMC in your game.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Mar 10, 2012 9:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2012-03-10T07:40:17-07:00</updated>
<published>2012-03-10T07:40:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91142#p91142</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91142#p91142"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=91142#p91142"><![CDATA[
I guess I should post this here rather than create a new topic. The input code from the back and forth above doesn't seem to like the famicom 4 player adapter in FCEUX. When it's set as attached in the drop down, up on player 2's controller also triggers right. Is there some reason for this I'm not getting?<br /><br />Edit: It seems it was using my player 4 keybinding which happened to be on the same key. <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> Either way as someone who would like to support both the 4 score and the famicom 4 player adapter without button interference from multiple players at once is there some other way to do this since my old input code apparently wouldn't have liked the famicom either?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Sat Mar 10, 2012 7:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bigjt_2]]></name></author>
<updated>2012-03-05T19:50:22-07:00</updated>
<published>2012-03-05T19:50:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=90990#p90990</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=90990#p90990"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=90990#p90990"><![CDATA[
<div class="quotetitle">Camronas wrote:</div><div class="quotecontent"><br />My god this is confusing lol as I'm sure it was for everyone else when they started <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /></div><br /><br />YEP!<br /><br />Also Camronas, here's some assembly tuts that I found very useful when I started learning.  Just sent these to some friends the other night who are starting to learn.<br /><br /><!-- m --><a class="postlink" href="http://bbitmaster.com/neshackingtutorial1.txt">http://bbitmaster.com/neshackingtutorial1.txt</a><!-- m --><br /><!-- m --><a class="postlink" href="http://bbitmaster.com/neshackingtutorial2.txt">http://bbitmaster.com/neshackingtutorial2.txt</a><!-- m --><br /><br />These do a good job of teaching the bare, bare basics of 6502 and gearing it toward the NES in general.  Also, have yo downloaded the 6502 simulator yet?<br /><br /><!-- m --><a class="postlink" href="http://exifpro.com/utils.html">http://exifpro.com/utils.html</a><!-- m --><br /><br />This is an awesome little program and I encourage you to learn how to use it to write little test programs, also how to debug those programs and see what's happening in memory as your program counter rolls through your opcodes.  I still find it useful now to write little tests for pseudocode that I'm pondering.  It gives me a chance to test it without plugging it strait into my large program and potentially doink something up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4230">bigjt_2</a> — Mon Mar 05, 2012 7:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-02-10T10:42:49-07:00</updated>
<published>2012-02-10T10:42:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89825#p89825</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89825#p89825"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89825#p89825"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />Tepples' trick would not have come to me.<br /></div><br />I have used it before, and also the opposite trick, which you use to detect when a byte is empty, rather than full: when you shift the first bit out, insert a one at the other end. That bit will prevent the number from becoming 0 before all the bits have been shifted out. When the bit buffer finally becomes 0 you'll know that the flag has been shifted out, and all meaningful bits have been used up.<br /><br />I never thought about using the trick for reading the controller though, and that's the perfect kind of situation for it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Maybe we need a topic like <a href="http://www.atariage.com/forums/topic/71120-6502-killer-hacks/" class="postlink">this thread</a> around here.<br /></div><br />I love that topic. A lot of the tricks shown there are useful on the NES too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Feb 10, 2012 10:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2012-02-10T08:03:56-07:00</updated>
<published>2012-02-10T08:03:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89815#p89815</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89815#p89815"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89815#p89815"><![CDATA[
And keeps X free. Everyone wins!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Fri Feb 10, 2012 8:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-02-10T08:01:56-07:00</updated>
<published>2012-02-10T08:01:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89814#p89814</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89814#p89814"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89814#p89814"><![CDATA[
Or LDA #$00 could become LSR A. This gives you the byte back.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 10, 2012 8:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2012-02-10T07:32:00-07:00</updated>
<published>2012-02-10T07:32:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89813#p89813</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89813#p89813"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89813#p89813"><![CDATA[
Heh. But the code becomes a byte smaller if you DO use X, but only for the setup.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">readcontroller:<br />   ldx #$01<br />   stx buttons ;initialize the buffer with a flag<br />   stx $4016<br />   dex<br />   stx $4016<br />buttonreadloop: <br /></div><br />dex vs. lda #$00. You all know you need that byte! <img src="http://forums.nesdev.com/images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /><br /><br />And considering this probably wouldn't run when something else uses X, you might as well.<br /><br />Optimization is fun. <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> It's also amazing how much I still have to learn, because Tepples' trick would not have come to me. I would have had to read specifically about it.<br /><br />Maybe we need a topic like <a href="http://www.atariage.com/forums/topic/71120-6502-killer-hacks/" class="postlink">this thread</a> around here.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Fri Feb 10, 2012 7:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-02-10T06:05:33-07:00</updated>
<published>2012-02-10T06:05:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89808#p89808</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89808#p89808"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89808#p89808"><![CDATA[
That's a very good idea tepples... It's faster (we get rid of the DEX inside the loop) and frees one register. With this, the subroutine could look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">readcontroller:<br />   lda #$01<br />   sta buttons ;initialize the buffer with a flag<br />   sta $4016<br />   lda #$00<br />   sta $4016<br />buttonreadloop:<br />   lda $4016<br />   and #%00000011<br />   cmp #$01<br />   rol buttons<br />   bcc buttonreadloop ;loop if the flag wasn't shifted out yet<br />   rts</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Feb 10, 2012 6:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-02-10T05:46:58-07:00</updated>
<published>2012-02-10T05:46:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89805#p89805</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89805#p89805"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89805#p89805"><![CDATA[
Another clever trick is the use of a ring counter: preload the buttons variable with 1, and once you've ROL'd it eight times, the 1 has moved to the carry flag and you can exit the loop without even touching X.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 10, 2012 5:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2012-02-09T22:58:08-07:00</updated>
<published>2012-02-09T22:58:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89798#p89798</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89798#p89798"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89798#p89798"><![CDATA[
Ah, neat! I've actually never read anything about famicom, so that's all news to me. I also wasn't aware about only the one bit mattering for that register, so the loading of 9 first is also a clever trick.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Thu Feb 09, 2012 10:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-02-09T22:01:26-07:00</updated>
<published>2012-02-09T22:01:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89796#p89796</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89796#p89796"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89796#p89796"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LatchController:<br />  LDA #$01<br />  STA $4016<br />  LDA #$00<br />  STA $4016       ; tell both the controllers to latch buttons <br /><br />sta buttons;A variable in RAM. All buttons are now unpressed.<br /><br />ldx #$08;Why not read 8 button states?<br />buttonreadloop:<br />asl buttons;We can ASL bytes other than A. It works the same just using RAM instead of A.<br />lda $4016<br />and #%00000001;We only care about this one bit.<br />ora buttons<br />sta buttons<br />dex<br />bne buttonreadloop<br /></div><br /></div><br />First I'd like to point out that this routine is pretty inefficient... the following one is shorter, faster, and even reads Famicom controllers that go on the expansion port, which the code above doesn't:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   ldx #$09 ;strobe the controllers and initialize the counter<br />   stx $4016 <br />   dex<br />   stx $4016<br /><br />buttonreadloop:<br />   lda $4016 ;get the state of the button<br />   and #%00000011 ;keep only the 2 lowest bits<br />   cmp #$01 ;if any of those 2 bits are set, the carry gets set<br />   rol buttons ;put the state of the button with the others<br />   dex ;move on to the next button<br />   bne buttonreadloop</div><br />You can strobe the controllers and initialize the counter in one go because 9 in binary is %00001001, and since the lower bit is 1 writing this to $4016 is the same as writing $01, because the upper bits are ignored by the register. After the DEX, 9 becomes 8, which in binary is %00001000, and since the lower bit is 0, so it's like $00 is written to $4016. This is the kind of trick that beginners shouldn't worry about, but I decided to show it anyway so that you know what kind of things are possible.<br /><br />Next, there's no need to clear the button states, because we will insert 8 new bits into it, effectively kicking all the old bits out.<br /><br />Then we proceed to the loop. There  we read the state of a button, and since there are Famicom controllers that return the button states in the second bit of $4016, you want to keep the 2 lowest bits, not only the first. Then we use another "trick": by comparing the value to 1, we can make the carry flag reflect the state of the button no matter if it came in bit 0 (regular controller) or bit 1 (expansion port Famicom controller). Think about it: if a a button is pressed and a regular controller is used, our value will be 1 (%00000001), if an expansion port controller is used, the value will be 2 (%00000010). Both values are larger than 0, so when we compare it to 1 we are making sure that it's at least equal to or larger than 1, in which case the carry gets set. If the value was smaller than 1 (which would happen only if no button was pressed), the carry would be clear.<br /><br />With the state of the button in the carry flag, we are ready to put it in a variable, along with the other button states. There's no need to load it from memory or anything, you can directly put the new bit in the variable with a rotate instruction.<br /><br /><div class="quotetitle">Dr. Floppy wrote:</div><div class="quotecontent"><br />Is there an expanded version of this to control for redundant reads over several frames (as Tokumaru mentioned)?<br /></div><br />You can handle that by saving the previous state of the controller and doing some bit operations between it and the new state. Here's an example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda buttons ;make a copy of the old state<br />   sta oldbuttons<br /><br />   jsr readcontroller ;read the new state<br /><br />   lda oldbuttons ;get the old state<br />   eor #$ff ;turn buttons that were down into 0 and the others into 1<br />   and buttons ;erase from the current state the buttons that were down last time<br />   sta newbuttons ;save the result in another variable</div><br />Now you can use <strong>buttons</strong> when you need to know the current state of the buttons (such as when moving your game character sideways) or <strong>newbuttons</strong> when you need to know when a button wasn't down before but is now (useful when shooting and navigating menus, for example).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Or that infernal DPCM glitch that causes phony reads from the Right button?<br /></div><br />We usually handle this by reading the controller multiple times, until 2 consecutive reads return the same result. Something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   jsr readcontroller ;read the controller<br />validatebuttons:<br />   ldy buttons ;make a copy of what was read &#40;use Y because A and X are used in the subroutine&#41;<br />   jsr readcontroller ;read again<br />   cpy buttons ;compare the previous read with the new one<br />   bne validatebuttons ;if they differ, go back and try again</div><br /><br />I'll let you put all of the above solutions together as an exercise! =)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Feb 09, 2012 10:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dr. Floppy]]></name></author>
<updated>2012-02-09T20:51:21-07:00</updated>
<published>2012-02-09T20:51:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89795#p89795</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89795#p89795"/>
<title type="html"><![CDATA[First time Homebrewer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8557&amp;p=89795#p89795"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LatchController:<br />  LDA #$01<br />  STA $4016<br />  LDA #$00<br />  STA $4016       ; tell both the controllers to latch buttons <br /><br />sta buttons;A variable in RAM. All buttons are now unpressed.<br /><br />ldx #$08;Why not read 8 button states?<br />buttonreadloop:<br />asl buttons;We can ASL bytes other than A. It works the same just using RAM instead of A.<br />lda $4016<br />and #%00000001;We only care about this one bit.<br />ora buttons<br />sta buttons<br />dex<br />bne buttonreadloop<br /></div><br /></div><br /><br />This is awesome! <br /><br />Is there an expanded version of this to control for redundant reads over several frames (as Tokumaru mentioned)? Or that infernal DPCM glitch that causes phony reads from the Right button?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4866">Dr. Floppy</a> — Thu Feb 09, 2012 8:51 pm</p><hr />
]]></content>
</entry>
</feed>