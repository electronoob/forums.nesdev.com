<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Oh no! Not another stupid custom mapper!</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Oh no! Not another stupid custom mapper!</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=11474">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=11474</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Aug 03, 2014 11:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />PPU A0-A7 passes through a 74LS373, maybe that's why Oeka Kids went with A8 and A9.  I was hoping the PPU /RD signal would provide the timing.  The NAND I mentioned would be for checking if it's an attribute table access (mentioned 74HC30 since my CPLD plan is nearly out of I/Os).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Aug 04, 2014 7:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">Making it so each byte refers to a 16x16 area instead of a 32x32 area seems to be the best way to go</div><br />This would be an advantage over the MMC5 if you don't need more than 256 tiles for the background. MMC5's ExGraphics is cool and all, but it doubles the number of bytes you have to write when updating the PPU for scrolling. Your approach has a much more reasonable impact on the data bandwidth.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Aug 04, 2014 11:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">PPU A0-A7 passes through a 74LS373, maybe that's why Oeka Kids went with A8 and A9.  I was hoping the PPU /RD signal would provide the timing.<br /></div>Oeka Kids used A8 and A9 because they were trying to just make the display into an all-points-addressable bitmap. I bet an RC on the 161's â†‘LATCH input would be good enough to compensate for the propagation delay through the '373, or if we weren't concerned about famiclones which don't multiplex the data bus, just using AD0 and AD5.<br /><br />Mapper 96 is a beautiful hack, albeit more dependent on the exact PPU fetch order than explicitly masking out the attribute table.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Wed Aug 06, 2014 5:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My first implementation idea for the scanline counter is as follows:<br /><br />1 latch and 1 flipflop<br />Continuously perform a bitwise XOR between the PPU address and the contents of the latch, with the outputs feeding a NOR.<br /><br />When PPU /RE falls:<br />- If the NOR is 0  //no match<br />--- Reset the flipflop<br />- If the NOR is 1 and the flipflop is set  //third fetch<br />--- Send a clock pulse<br /><br />When PPU /RE rises:<br />- If the NOR is 0  //no match<br />--- Set the latch to the fetched address<br />- If the NOR is 1 and the flipflop is reset  //second fetch<br />--- Set the flipflop<br /><br /><br />However, I don't know if this'd work because I don't know if the address will stay stable long enough for the /RE rising logic to work.<br /><br />I wanted the latch to always hold the previously fetched address so that I could reuse the latch to create my own 8x8 attribute table logic:<br /><br />bits 1-4 and 6-9 of the latch create the attribute byte address, and bits 0 and 5 determine which quarter of the fetched attribute byte to use. The selected 2 bits are repeated to form a byte and this is what the PPU is given for the attribute fetch; the address the PPU gives for the attribute byte is just ignored while the mapper cooks one up itself, using the previously fetched nametable address which is conveniently stored in the scanline detector's latch. This gives you a linear attribute table that's bitpacked like the normal 16x16 attribute table, except that it describes 8x8 regions instead.<br /><br />I couldn't figure out a nice way to tie the extended attribute to the nametable page, so I was just going to have the nametable page and extended attribute page be two seperate registers, with the attribute banks using 256-byte pages instead of 1k. Of course, turning off the extended attribute mode will turn all this logic off and the regular 16x16 attribute table in the nametable will be used.<br /><br />And since the nametable banks have a special exception in place where pages 0 and 1 come from CIRAM instead of the cart's VRAM, and the cart can only control A15 of CIRAM, selecting pages 0 and 1 for the extended attribute banks will give you the normal 16x16 attribute tables from the internal nametables. That's not because I'm explicitly designing it to do that, it's a side effect from the existing mapper logic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Wed Aug 06, 2014 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To detect attribute reads, I need to AND A6-A9 together. To simplify the scanline detector, what I can do is clock a chain of 3 SR-type flipflops wired like a Johnson counter, and feed the attribute detector OR'd with /A13 to the counter's reset line. That'll free up the latch to just be for attribute address generation, which is nice because I can latch the latch when the attribute detector is false, which means the latch will always hold the preceeding nametable fetch's address when the attribute fetch occurs, so I won't have to rely on the rising edge of /RE, since I can't really count on the address lines being stable at the moment I can act on /RE rising.<br /><br />However, with this simplified detector, reading the nametable via $2007 will start clocking the scanline counter after the second read, so you'd need to disable scanline interrupts before you do it. However, since you should only be reading $2007 during vblank, you'll probably have already acknowledged/disabled the scanline counter anyway, and you're likely going to reload/enable the scanline counter after you're done to prepare for the frame, so this shouldn't be a problem.<br /><br />I'm insistent on counting 3 A13s instead of 4 A13s because the third A13 is always the first fetch of a new scanline, which might be useful in case I ever wanted to pull a MMC5 and detect BG fetches vs. sprite fetches.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Aug 14, 2014 12:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">For the initial &quot;write the same value to all four tiles of a metatile&quot; idea, you could easily do something like the Oeka Kids boards, assuming that PPU A0 and A5 arrive at the same time as PPU A12: latching A0 and A5 on a rising edge of A12 and use that to select banks...<br /><br />It would be nicer to only have to write 1 or 2 bytes, though. I don't see a way to handle that without a good deal more glue logic.</div><br /><br />I was thinking about this the other week, and noticed a way to do it in 2 writes, is simply running PPU A0 and A5 through the mapper.   On nametable access, those pins would output a fixed value.  To do it in one write, the mapper would need to pass PPU A0-A9 through.  It would use the previous logic, but on PPU writes to nametable it would also do a left shift on A0-A9 out.  Which should make the VRAM increment into an inc by 2, or 64.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Aug 14, 2014 10:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">On nametable access, [PPU A0 and A5] would output a fixed value.<br /></div>... causing bus conflicts? Using external nametable RAM and an AND gate? Or am I confused?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Aug 14, 2014 2:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, using external nametables only.  To clarify, by &quot;through the mapper&quot;, I mean the mapper (CPLD the way I'm imagining it) would be driving the address bus of the external CHR memory.  So yeah, the AND logic would be like:<br /><br />CHR-RAM A0 = PPU-A0 &amp;&amp; !NT_ACCESS<br />CHR-RAM A5 = PPU-A5 &amp;&amp; !NT_ACCESS<br /><br />(NT_ACCESS excludes attribute table access)<br /><br />edit: This made me think too, staying within 64 metatiles (as we normally have to with 256 tiles), a mapper could use the upper 2 bits of the nametable data as the attribute (so metatile $40 would be the same as metatile $00, but the next color).  Eliminate the attribute table entirely. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Aug 14, 2014 4:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">This made me think too, staying within 64 metatiles (as we normally have to with 256 tiles), a mapper could use the upper 2 bits of the nametable data as the attribute (so metatile $40 would be the same as metatile $00, but the next color).  Eliminate the attribute table entirely. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /></div>I like this idea a lot, even though it's fairly restrictive ... but why not allow the top two bits to both specify megatile and color? Means the game could address 16 KiB of tiles instead of 4 KiB.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Aug 14, 2014 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Oh no! Not another stupid custom mapper!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh yeah, that is even better, no need for the restriction.  If the user wants to display the same tile with a different palette, they would just duplicate it in the pattern tables.  Nice.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>