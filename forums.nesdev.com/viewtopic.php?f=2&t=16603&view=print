<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Any way to print non-constant values in ca65?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Any way to print non-constant values in ca65?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16603">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16603</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Oct 20, 2017 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Any way to print non-constant values in ca65?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wanted to print some debug messages using .assert, but the values being debugged aren't necessarily known at assembly time, and I really want to display exactly how off the numbers are, rather than just stating that they're off. Since .sprintf won't take non-constant numbers, I came up with this hack:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.repeat 20, i<br />&nbsp; &nbsp;.assert number &lt;&gt; i, ldwarning, .sprintf(&quot;number is %d&quot;, i)<br />.endrepeat</div><br />It looks kludgy as hell, but it works for small ranges. I'm still wondering though, is there a better way to do this? Especially if the range of values is way bigger than in the example above. Am I just being stupid?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Oct 21, 2017 4:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Any way to print non-constant values in ca65?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not aware of a <em>good</em> way, but personally I've used a macro that outputs the value in a special &quot;build log&quot; segment, which is then directed to a separate file in the linker configuration. Note that since we don't know the value of the variable, we always have to output a constant number of characters and pad it from the left with spaces or zeros. You can of course also output explanatory strings with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.byte</tt> in the build log segment.<br /><br />Here's the macro: (<!-- m --><a class="postlink" href="https://github.com/fo-fo/ngin/blob/master/include/ngin/core.inc#L409">https://github.com/fo-fo/ngin/blob/mast ... e.inc#L409</a><!-- m -->)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro __ngin_decimalInteger integer<br />&nbsp; &nbsp; .local divider<br />&nbsp; &nbsp; divider .set 100000000<br />&nbsp; &nbsp; .local value<br />&nbsp; &nbsp; value = integer<br /><br />&nbsp; &nbsp; ; \note .charmap isn't a problem here, because string/character literals<br />&nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp;are not used.<br />&nbsp; &nbsp; ; \todo This doesn't seem to work properly for signed numbers (try<br />&nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp;e.g. $FFFFFFFF).<br /><br />&nbsp; &nbsp; .repeat 9, i<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Output the corresponding digit, or a space if the digit and all the<br />&nbsp; &nbsp; &nbsp; &nbsp; ; more significant digits are zeroes. Unless we're outputting the least<br />&nbsp; &nbsp; &nbsp; &nbsp; ; significant digit, which is always displayed (so that 0 is displayed).<br />&nbsp; &nbsp; &nbsp; &nbsp; .byte .lobyte( __ngin_choice \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (value/divider) &lt;&gt; 0 .or divider = 1, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (value/divider) .mod 10 + ngin_Ascii::kZero, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ngin_Ascii::kSpace )<br />&nbsp; &nbsp; &nbsp; &nbsp; divider .set divider/10<br />&nbsp; &nbsp; .endrepeat<br />.endmacro<br /></div><br />I'm not sure why I chose to output only 9 characters (this may have been what caused it not to work with $FFFFFFFF as seen in the TODO comment). Seems like it should be 10 characters to cover the full range of a 32 bit variable. It's easy to modify this to output hexadecimal, if desired (see the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">__ngin_hexInteger</tt> macro in the above link).<br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">__ngin_choice</tt> is a ternary macro defined as:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.define __ngin_choice( condition, if, else ) \<br />&nbsp; &nbsp; ((!!(condition)) * (if) + (!(condition)) * (else))</div><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ngin_Ascii</tt> is defined as:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.enum ngin_Ascii<br />&nbsp; &nbsp; kLf&nbsp; &nbsp; &nbsp;= 10<br />&nbsp; &nbsp; kCr&nbsp; &nbsp; &nbsp;= 13<br />&nbsp; &nbsp; kSpace&nbsp; = 32<br />&nbsp; &nbsp; kQuote&nbsp; = 34<br />&nbsp; &nbsp; kZero&nbsp; &nbsp;= 48<br />&nbsp; &nbsp; kNine&nbsp; &nbsp;= kZero+9<br />&nbsp; &nbsp; kPlus&nbsp; &nbsp;= 43<br />&nbsp; &nbsp; kMinus&nbsp; = 45<br />&nbsp; &nbsp; kDot&nbsp; &nbsp; = 46<br />&nbsp; &nbsp; kA&nbsp; &nbsp; &nbsp; = 65<br />.endenum<br /></div><br /><br />EDIT: Added <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">__ngin_hexInteger</tt> reference.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Oct 21, 2017 11:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Any way to print non-constant values in ca65?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a pretty good idea, thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 11, 2017 4:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Any way to print non-constant values in ca65?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I ended up going with this (it writes non-constant numbers to a text file):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.macro Assembler_WRITE_NUMBER _Number, _Base, _Places, _Divisor<br />&nbsp; &nbsp;&nbsp; &nbsp;.ifblank _Divisor<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Assembler_WRITE_NUMBER _Number, _Base, _Places, 1<br />&nbsp; &nbsp;&nbsp; &nbsp;.else<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.if _Places &gt; 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Assembler_WRITE_NUMBER _Number, _Base, (_Places) - 1, (_Divisor) * _Base<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.local _Digit<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;_Digit = ((_Number) / (_Divisor)) .mod _Base<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.lobytes _Digit + $30 + (_Digit &gt; 9) * $07<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.endmacro</div><br />Then I can write numbers in any base with any number of places (I don't do anything about leading zeroes). This is how I would check the value of a label in PRG-ROM (base 16, 4 places):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Assembler_WRITE_NUMBER SomeLabel, 16, 4</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>