<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - VERY easy way to make code for objects</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">VERY easy way to make code for objects</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3939">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3939</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Feb 26, 2008 10:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>VERY easy way to make code for objects</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've just had a new idea (while it's not totally new, it's still rather unexperienced) way to handle object's programm, and it's really great, because it's much more comfortable, stable and optimised than the old way.
<br />
<br />When coding objects "normally", the programm should call a routine that does the frame of the object. Since that routine is actually called every frame (and supposed to return), the code is palced in a sequential structure, it's just done every frame and have no control over itself. The only way to handle complicated object is to have variables that tells "what the object is doing", and possibly a jump table from this. Since you'll have to repeatly change this variable, and create a jump table, code is very inneficient. Even worse, it's hard and confusing to write code in this fashion.
<br />
<br />However, there is a way to highhack it and write object code "as if it were main code". The object have it's own programm, with its own "reset" vector (the code that will be executed when the object is first created), etc...
<br />Then the object just calls a subroutine when its frame is done, and this can be done from many places, so that code is much easier and optimal. This subroutine actually pull stack adress and store it in variables, and returns to main code. On the next frame, the main code will restore those variables to the stack and "return", effectively executing next frame of objet just where it left. This leads to a very effective, and more confortable, pseudo-linear object code.
<br />
<br />Since it's also possible for object code to return (rts) instead of calling the subroutine mentionned above, if it does this the return adress won't be modified, and on next frame the same piece of code can be done in the original sequential fashion, so that both sequential and linear code types are possible (I don't know if that's the correct way to call them by the way).
<br />
<br />The only limitation of this is that no additional data should be on stack when the frame is done, so the object code can only call it's pseudo "frame wait" routine on the first level of code, and cannot save any data on the stack at this point. A way to fix it would be to assign different stack pointers to each objects, but overall it's not needed, exept if you have VERY complicated objects. Since an interrupt could trigger during object code, it's stack have to be big enough to hold everything for it, so one doing this have to be carefull.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Feb 27, 2008 12:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nifty, a simplified form of <a href="http://nesdev.com/bbs/viewtopic.php?t=1292" class="postlink">multithreading</a> where you just save the PC of each thread. So instead of having your code keep track of what "step" it's at in a complex enemy movement, your scheme does so by saving the PC. That would definitely simplify coding, with very little complexity. Here's a little demo I made, which moves 64 objects in rectangles: <a href="http://h1.ripway.com/blargg/temp/minithreads.zip" class="postlink">minithreads.zip</a>
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">obj_thread:<br />&nbsp; &nbsp; ; first frame action<br />&nbsp; &nbsp; jsr yield<br />&nbsp; &nbsp; ; second frame action<br />&nbsp; &nbsp; jsr yield<br />&nbsp; &nbsp; ; etc.<br />&nbsp; &nbsp; jmp obj_thread<br /><br />run_object:<br />&nbsp; &nbsp; ; Push last return address back on stack then return<br />&nbsp; &nbsp; ; to where object left off<br />&nbsp; &nbsp; lda obj_pc+1,x<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; lda obj_pc,x<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; Save return address for object<br />yield:<br />&nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp;; Object JSRs here when done<br />&nbsp; &nbsp; sta obj_pc,x<br />&nbsp; &nbsp; pla<br />&nbsp; &nbsp; sta obj_pc+1,x<br />&nbsp; &nbsp; rts</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Feb 27, 2008 2:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It also means your game crashes when the object table gets corrupted?  So instead of getting a harmless glitchy object that goes away when you leave the area, you get a crash?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Feb 27, 2008 9:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, you both get the idea exacly.
<br />The main good point of it is that it allows LOOPS to be performed in your object code, instead of an anoying high amount of checks to only perform a tiny action and return.
<br />
<br />However, I don't really like the "multithread" word, because you'd want to think a game engine would end up something like what Linux or Windows is, which definitely isn't. Objects are supposed to interact with the player and still have basic function independant on their very own, they're not an entiere programm in themselves. Also, it's still on the main programm to decide whenever each object is perfored, and up to the object to decide when it's done, there is no automatic switching, RAM alocating or anything, this makes it perfect and simple for NES games.
<br />Also, I like the idea to have the object also able to just rts if it doesn't want to do anything complicated, so that the adress is constant.
<br />
<br />As long as you put the object initial code adress-1 to it's own variable set when creating it, there is no reason to get any crashes.
<br />
<br />This demo really is a perfect exemple of this principle, I knewn I haven't completely invented it, but for some reason I just haven't figured how this would simplify my life when coding objects for my current game until yesterday.
<br />
<br />Your demo remembers me Gradius, when the second boss where a huge amount of boxes are moving at once without lagging. And when the game lags, it's status bar doesn't move a single bit even tough the game uses only sprite zero-hit to get its timing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Feb 27, 2008 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know if this is such an advantage over the jump table method.
<br />
<br />I have a set of pointers for all the actions an object can perform. When the object is called, it's "state" is used as an index into that jump table. So there is the "walking" state, the "attacking" state and so on, and setting a new state from the current one is not trouble at all.
<br />
<br />As for maintaining their variables and such, I have a big chunk of RAM dedicated to the currently loaded objects, and they use their index (among the currently loaded object, that is, the index of the slot they occupy) to access it. This means that each object has a few bytes of RAM to use freely while they are loaded (although some of the locations have specific meanings, such as the coordinates used by the sprite drawing routine, that then becomes able to draw an object by knowing only it's slot index).
<br />
<br />I think objects are rarely animated as in blargg's example, with different frames every time... It's more common that the same block of code repeats over and over, such as the "walking" code, and I feel that the jump table works better for this. Although you could simply jump back after a call to "yield" in your example, achieving a similar effect.
<br />
<br />However, I still feel that the jump table method is more organized, and the tables don't waste much more space either, because most objects have very few different actions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Feb 27, 2008 3:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">It also means your game crashes when the object table gets corrupted? So instead of getting a harmless glitchy object that goes away when you leave the area, you get a crash?</div><br />No different than if you corrupt something else critical, like the return stack, other addresses in memory, critical player information like position or stage number. Even with a jump table, the index could be made invalid so that it reads a junk address (unless you check the range on every lookup, slowing things down). Besides, getting a crash would make you more likely to find the bug.<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">However, I don't really like the "multithread" word, because you'd want to think a game engine would end up something like what Linux or Windows is, which definitely isn't.</div><br />Multithreading doesn't imply bloat. It's used in tiny real-time operating systems that run on virtually everything these days. Or the demo I posted, which is multithreaded. The reason to use the term is that it helps others more quickly understand what you're doing.<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I don't know if this is such an advantage over the jump table method.  I have a set of pointers for all the actions an object can perform. When the object is called, it's "state" is used as an index into that jump table. So there is the "walking" state, the "attacking" state and so on, and setting a new state from the current one is not trouble at all.</div><br />The advantage is more natural coding, and the lack of a need for setting up a jump table. But I am not sure how this multithreaded method handles external actions on an object. If the player hits an enemy and he gets knocked back and flashes, how is this handled? It seems there would still need to be some kind of jump table to know how to cause this state change. Bregalad, any ideas?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think objects are rarely animated as in blargg's example, with different frames every time...</div><br />The code I pasted above was just to show the essentials of the threading implementation. Download the demo for a realistic example, where each object goes into a loop for a while. Each is written as if it's the only thing running on the NES, which is the central advantage of this approach.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As for maintaining their variables and such, I have a big chunk of RAM dedicated to the currently loaded objects, and they use their index (among the currently loaded object, that is, the index of the slot they occupy) to access it. This means that each object has a few bytes of RAM to use freely while they are loaded</div>
<br />Exactly how things are done in the demo code. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Feb 27, 2008 5:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I must say that I do find this idea very interesting. I'm just trying to find the real advantage here.
<br />
<br />I looked at the demo, and what I said about sequential actions still apply. This works fine for the little boxes that always move right, then down, left and up and start all over again. Since there are a chain of actions performed one after the other, remembering where execution stopped is a useful thing.
<br />
<br />Now, imagine if in this demo the next movement was random. After you finish moving right, instead of moving down you picked a random direction. With the "yield" way (BTW, I don't even know the exact meaning of this word... I must remember to look it up in the dictionary), you'd have to JMP to the location that performs the selected movement (defeating the purpose of saving the space used by a jump table, because the address will be there, just in the instruction itself instead of in a table) and then yield.
<br />
<br />So, you not only didn't save the space that a jump table would use (because you must have different JMP or BRANCH instructions for each possible case), but you also made some spagetti code (by jumping and branching here and there), instead of having clean, separate routines for each action.
<br />
<br />Instead of jumping to the next action and calling "yield", which uses quite a few more cycles to save the PC, wouldn't it be much simpler and faster to just set the new value for the jump table pointer, so that the appropriate action is executed the next time? Does that make any sense?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Wed Feb 27, 2008 10:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I don't know if this is such an advantage over the jump table method.  I have a set of pointers for all the actions an object can perform. When the object is called, it's "state" is used as an index into that jump table. So there is the "walking" state, the "attacking" state and so on, and setting a new state from the current one is not trouble at all.</div><br />The advantage is more natural coding, and the lack of a need for setting up a jump table. But I am not sure how this multithreaded method handles external actions on an object. If the player hits an enemy and he gets knocked back and flashes, how is this handled? It seems there would still need to be some kind of jump table to know how to cause this state change. Bregalad, any ideas?</div>
<br />
<br />You could solve this by sending messages to the objects. Basically, you'd have two addresses associated with each object. One is the initial entry point of the AI (which ends up getting saved in the object's memory), and the other is a pointer to a routine to handle messages (doesn't need to be saved).
<br />
<br />The theory is that somehow, collisions would be detected, and the colliding objects would be sent a message like "Mario, you collided with a goomba", and then a "goomba, you collided with a Mario". The idea here is that they're going to exchange a message with each other, and this handler just wants to know which message to give to them. Mario looks at his local variables and determines whether he should send a "die" or send nothing. He determines that he's falling, so he sends "die". Goomba sends "bump", which theoretically would cause other enemies to turn around, and would hurt Mario. The messages are exchanged, goomba dies, and Mario discards the "bump" message, because he's hurting the enemy. You could do this by having Mario check his local variables again, or have Mario set some kind of "ignore the incoming bump message" flag.
<br />
<br />I'm not sure if this is the most optimal way, but the theory seems like it'd work.
<br />
<br />Yes, I know my name's not Bregalad. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Feb 27, 2008 11:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, this seems to be a problem. An object's response to external events must sometimes depend on its state. If some of the relevant state is encoded into the saved program counter, it won't be easy to decode and act on. If this were solved by having each yield call return any event that occurred during the call, the object would have to check this after each yield call, which would litter code with lots of similar branches. The basic problem seems to be that you really have <em>two</em> axes of execution: the behavior of the object in absence of external events, and the response to external events. The response to the same external event might be different at different points in the first axis. Execution only goes along one axis, so you need a state machine to handle two.
<br />
<br />As a concrete example, consider an object which is shielded on one side and vulnerable on the other. If it were moving left and right, an attack from the left side would have a different effect depending on its direction. If movement were coded something like
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />&nbsp; &nbsp; lda #20<br />&nbsp; &nbsp; sta counter<br />left:<br />&nbsp; &nbsp; jsr yield<br />&nbsp; &nbsp; dec sprite_x<br />&nbsp; &nbsp; dec counter<br />&nbsp; &nbsp; bne left<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #20<br />&nbsp; &nbsp; sta counter<br />right:<br />&nbsp; &nbsp; jsr yield<br />&nbsp; &nbsp; inc sprite_x<br />&nbsp; &nbsp; dec counter<br />&nbsp; &nbsp; bne right<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jmp loop</div>
<br />how would you determine the result of an attack? The encoding of the direction it's facing would be tied up in the program counter value.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Thu Feb 28, 2008 12:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In that case, the only way I can think of to do it is to provide some kind of indication as to what behavior is necessary. I mean, this code still is a state machine, it just uses a different method of determining which state it's in (entry points, instead of a single variable).
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />&nbsp; &nbsp; lda #20<br />&nbsp; &nbsp; sta counter<br />&nbsp; &nbsp; lda #00<br />&nbsp; &nbsp; sta state<br />left:<br />&nbsp; &nbsp; jsr yield<br />&nbsp; &nbsp; dec sprite_x<br />&nbsp; &nbsp; dec counter<br />&nbsp; &nbsp; bne left<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #20<br />&nbsp; &nbsp; sta counter<br />&nbsp; &nbsp; lda #01<br />&nbsp; &nbsp; sta state<br />right:<br />&nbsp; &nbsp; jsr yield<br />&nbsp; &nbsp; inc sprite_x<br />&nbsp; &nbsp; dec counter<br />&nbsp; &nbsp; bne right<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jmp loop</div>
<br />You only have access to what you provide, and even if you're not using a state variable to determine which state to use, you can still use one to indicate which state is active, for the benefit of other code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Feb 28, 2008 3:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Right, so you have to explcitly mark states, losing some of the advantage of the threading. Next, how do you transition between states like this? The normal routine handles these transitions directly, for example the change from left to right. If this object gets hit, say it gets knocked back a bit and flashes for a while. Does this mean the main routine is interrupted while this action occurs? It seems that would require two program counter values: one for the main, and one for this external action. Then you need a way to transition back to the main routine.
<br />
<br />It'd be great if we had a game with fairly sophisticated enemy objects to try rewriting in this style, to see what issues really come up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Feb 28, 2008 10:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really thing there is almost only advantage in this multithread point of view as opposed to the jump table.
<br />
<br />1 - This save the space needed from the jump table which is big for complex objects like bosses
<br />2 - This saves the bytes and time to do a million of checks to know in which state the object is before actually acting
<br />3 - This save the bytes needed to write new states and sometimes new values of counters that goes with them
<br />4 - You'll end up with more natural code, easy to write instead of messy headache code
<br />
<br />The only true adventage of the jump table approach is that if you want an object to always do something regardless of its state, but want only one object to do it, you can just place it before the variable jump. If you do the linear multithreading approach you'll have to call a routine doing it possibly a couple of time just before or after the "yeild" call, which can waste bytes.
<br />
<br />To handle collision I have not this much problem, each object is free to do anything, so it will just call the "standard" collision code, which check for collision with player and that differently if he's attacking or not, etc...
<br />Each object is free to call it's own variant of collision code, which can make it invinsible but still able to hurt the player (not calling it would result in a totally transparent enemy), or to have a shielded side as said above.
<br />When an enemy is hurt, it sets a counter which freezes the enemy for a little while (making it's AI code not run at all for a couple of times), which effecively made it look "stunned". Then the enemy periodically check if it's damage is more than a certain ammount, and deletes its own if so.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Aug 21, 2008 1:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As the "no pushed data on stack limitation" was still too limitating for bosses (enormous waste of memory doing the same thing again and again because thread stupping inside a subroutine call were forbidden) I took some measures to improve the multithreading programm :
<br />- A individual stack is simuled from each objects, allowing more flexible subroutine calling and data pushing in their object code
<br />- The stack is restored from object memory to the real stack before running object's thread, and pulled from the real stack to object memory after the object's frame is done
<br />- When an object is created, it's always createed with a stack of 2 bytes containing the object's "reset" entry point adress (minus one)
<br />- By default, objects can stop their thread only if 8 bytes or less are pushed on the stack. Howver, during their thread, they have standard 256-byte stack limit, and so can do heavy subroutine call and be interupted ad nauseum.
<br />
<br />Object thread jump subroutine :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp;lda ObjectActive.w,X<br />&nbsp; &nbsp; &nbsp;beq ++<br />&nbsp; &nbsp;tsx<br />&nbsp; &nbsp;sta ObjectStackPointer<br />&nbsp; &nbsp;lda ObjectStackLenght.w,X&nbsp; &nbsp;&nbsp; &nbsp;;Add stack size &#40;2-8&#41; to pointer<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ObjectStackIndexTbl.w,X<br />&nbsp; &nbsp;tax<br />-&nbsp; &nbsp;lda ObjectStack.w,X<br />&nbsp; &nbsp;pha&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Push bytes from object's stack<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;bpl -<br />&nbsp; &nbsp;ldx DataCtr<br />++&nbsp; &nbsp;rts&nbsp; &nbsp;;Go to object thread OR return to main code</div><br />When the object thread is done it can either "rts" to do the same frame again, or call the ObjectWait routine shown below :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ObjectPrgmWait&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;An object should either jsr to here<br />&nbsp; &nbsp;tsx<br />&nbsp; &nbsp;txa&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Computes difference between initial stack pointer<br />&nbsp; &nbsp;eor #$ff&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;And actual stack pointer<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ObjectStackPointer<br />&nbsp; &nbsp;ldx DataCtr<br />&nbsp; &nbsp;sta ObjectStackLenght.w,X&nbsp; &nbsp;;Save lenght of Object's stack &#40;minus one&#41;<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda ObjectStackIndexTbl.w,X&nbsp; &nbsp;;Get stack index of our object<br />&nbsp; &nbsp;tax<br />-&nbsp; &nbsp;pla&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Pull all bytes from the CPU stack<br />&nbsp; &nbsp;sta ObjectStack.w,X&nbsp; &nbsp;&nbsp; &nbsp;;To the object's virtual stack<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;bpl -<br />&nbsp; &nbsp;rts<br />ObjectStackIndexTbl<br />&nbsp; &nbsp;.db $00, $08, $10, $18<br />&nbsp; &nbsp;.db $20, $28, $30, $38&nbsp; &nbsp;&nbsp; &nbsp;;Allow 8 bytes per stack per task &#40;by default&#41;<br /><br /></div>
<br />
<br />Another alternative would be to assign different stack pointer to each objects. This would decrease execution time as only SP have to be modified, but it would be limitating to a small amount of stack on each thread, and would dissalow the thread to just "rts" in order to do the frame again.
<br />
<br />Next step would be to put the "ObjectStackIndexTbl" to RAM and modify the values in function of how many stack bytes the thread actually needs, so that a small thread could share it's stack with a big thread if needed. Also, a message buffer from thread to thread could be implemented.
<br />However I don't have any idea how to implement those. Any ideas ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thoduv</b> [ Sun Sep 14, 2008 4:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just wanted to share my experience with this concept of what I call "virtual threads", but is generally called (in higher level languages) "coroutines".
<br />When programming on the GBA, I was bored to use "structs" to store parameters and functions to be called each frame when managing my objects.
<br />So, I wrote a simple context switcher in ARM, and allocated a stack for all my objects. I could then create routines, which were yielding to the main "thread" via "wait_frame()". This main thread had to resume these routines at each frame.
<br />It worked quite well, and I had re-written a lot of parts of my engine with this design (namely fadings, transitions, objects collisions, script system, a lot of complex animations, etc). But some problems arose:
<br />
<br /> 1) Memory usage: allocating multiple stacks IS a real memory issue (at least, on GBA, where a lot of data is pushed to memory). Indeed, you have to allocate an arbitrary amount of memory, even if the routine is not going to use half of it. You can also easilly run into stack overflows. This may or may not be a problem on NES, depending on functions calls, and ... on NMI, which could push a lot of things on the stack by itself (PC and status register), then usually A,X and Y in the implementation (so, expect a minimum stack of 6 bytes when NMI is enabled).
<br /> 2) Halting these couroutines in a clean way is not that easy. Even worse: knowing WHEN they had been killed/halted or have finished is no easy task, and need a lot of pointer work. Perhaps it can be simplified on NES to work around these problems.
<br /> 3) Context switching added a little overhead for object processing.
<br />
<br />Finally, tired of slowdowns, data aborts, infintes loops, and other funny things,  I decided to get rid of this system in many places. I'm still using it only when it makes the code a LOT more simpler.
<br />
<br />EDIT: Sorry, I hadn't read the entire thread when I wrote that, so I didn't see the solutions you used to solve some of the problems I reported, and I must say they look very interesting !

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Sep 14, 2008 7:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for sharing.
<br />
<br />Yes, you have to allocate an arbitrary number of stack for an object, even if it's not going to allocate half of it. There should be a way to dynamicly change stack size, but this sounds complicated.
<br />
<br />Stopping a process isn't hard when it's an enemy, it's just stopping whenever it goes off-screen (automatically) or when the enemy is defeated and has finished exploding.
<br />For non-enemy process (script, shading, ?) this would seems harder to know when they start and when they finishes.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Finally, tired of slowdowns, data aborts, infintes loops, and other funny things, I decided to get rid of this system in many places. I'm still using it only when it makes the code a LOT more simpler. </div>
<br />Could you please explain how you got rid of it and still get the features/ease of code it allows ?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>