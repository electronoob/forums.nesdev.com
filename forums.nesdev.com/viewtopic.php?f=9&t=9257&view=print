<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - INL-ROM custom MMC3 hybrid mapper design</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">INL-ROM custom MMC3 hybrid mapper design</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9257">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9257</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Aug 26, 2012 1:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I finished the mess of wires that is my current prototype of <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8808&amp;start=60" class="postlink">INL-ROM</a>:<br /><img src="https://dl.dropbox.com/u/18341918/INL_ROM_proto.bmp" alt="Image" /><br /><br />I had high hopes of ordering the boards Monday, but as luck would have it my Xilinx JTAG programmer crapped out.  I wasted all night yesterday trying to get it running and took a stab at making my own but no luck...  To make my life easier for when a new programmer shows up in a couple days I created testbenches and fully verified my code running on the CPLD's.  No issues there, so I'm pretty confident with the whole design now.  Assuming all is well with this new programmer, I'll be sending off the files this week after checking a couple things I can only do with hardware.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Could you consider a 512/32 version for people who don't need CHR ROM support and think they can make the next Mega Man 4/6?</div><br />I think I can do a little better, what about using the last 4KB to facilitate 4 screen mirroring as well?  <br /><br />Dropping CHR down to 32KB (presumably VRAM) gives a LOT of breathing room for the available logic.  I know the idea of making new mappers raises a lot of brows around here, but I can't help but spill the beans on what is coming down the pipe.  Getting the thing released as STOCK FULL MMC3 and others is the priority here supporting repros/hacks and the likes.  All of this nonsense to follow won't be ready until I've had time to play around with it, write a test ROM etc.  Basically I'm not looking to change the MMC3 much for this 'homebrew/hybrid' version, just attempt to make full use of what hardware is already on the board.  To keep things simple I don't think I'll allow much configurability to the user for this alternative mapper choice.  Some things will be limited to make room for improved functionality in other areas.<br /><br />Firstly I was reminded the other day of how something like this would be great with chykn's <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9006" class="postlink">ENIO</a> that I'll have in my hands shortly.  The simple thing is to support the &quot;direct addressing&quot; mode of his device by porting PRG R/W and /CE through the EXP pins.  Beyond that, I'm looking to make some slight modifications to the MMC3 allowing for Flash PRG-ROM programming via his IO.  Not sure how I'll do the boot-ROM yet, I've thought about reserving a ~64KB sector of the 512KB flash for the bootrom.  Somewhat dangerous, but I can build some safeguards into the mapper blocking unintentional writes to the bootrom sector.<br /><br />Aside from compiling up the idea of using the 32KB for name, attribute, and pattern tables; I also compiled a way to utilize the 32KB of WRAM.  Previously I was thinking of adding some register below the WRAM.  I found an even better solution though, since it's only 2 bits, it'd actually fit in the first 'control' register's unused bits.  Just directly mapping 2 of those bits (D5-D3) to WRAM A14 &amp; 13.  The other idea would be to use the $A000/A001 registers could be used instead.  I've still got around 20 macro cells to work with at this point.<br /><br />I've got a few other ideas kicking around, but not enough data at this point to be sure that I can provide them yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sun Aug 26, 2012 9:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards. INL-ROM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Impressive prototype. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> Sorry to here about the dead programmer. I hope you get it all sorted out and we see new MMC3 boards soon.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Aug 26, 2012 9:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Aside from compiling up the idea of using the 32KB for name, attribute, and pattern tables</div> Anything specific fleshed out here yet? (I kinda like the <a href="http://wiki.nesdev.com/w/index.php/MMC5#Nametable_mapping_.28.245105.29" class="postlink">MMC5's mechanism</a> for specifying extended banking)<br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">Previously I was thinking of adding some register below the WRAM.  I found an even better solution though, since it's only 2 bits, it'd actually fit in the first 'control' register's unused bits.  Just directly mapping 2 of those bits (D5-D3) to WRAM A14 &amp; 13.</div>A yearish ago, Tepples was asking about the possibility of banking WRAM with MMC3 (<a href="http://wiki.nesdev.com/w/index.php/Talk:MMC3" class="postlink">discussion on the wiki</a>); one thought that would be trivial but perhaps awkward would be enabling a 4kB RAM window in the $5000-$5FFF page. This would then track the bank setting for the $C000-$DFFF bank in the MMC3. Although not directly supported by the MMC3, it's a hardware modification that's just a simple variant on the standard &quot;<a href="http://wiki.nesdev.com/w/index.php/PRG_RAM_circuit#Using_7420" class="postlink">add prg ram</a>&quot; circuit— half of a 74'20 (/(M2·/ROMSEL·A14·A12)) to get a 4+4F RAM banking.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The other idea would be to use the $A000/A001 registers could be used instead.</div>See also the MMC6: It's not unprecedented to reinterpret the bits of the PRG-RAM protect register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Aug 26, 2012 10:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Aside from compiling up the idea of using the 32KB for name, attribute, and pattern tables</div> Anything specific fleshed out here yet? (I kinda like the <a href="http://wiki.nesdev.com/w/index.php/MMC5#Nametable_mapping_.28.245105.29" class="postlink">MMC5's mechanism</a> for specifying extended banking)</div><br /><br />So the MMC5's setup of mirroring is still limited to 2 NT's plus EXRAM for a 3rd choice, and fill mode for a forth.  In contrast my idea was just straight up 4screen mirroring.  I would completely disable the 2KB VRAM on board, and make a simple change to the CHR bank select circuitry that would enable the last 4KB of CHR RAM when CHR A13 is high.  So from a programmer's perspective you'd just have 4 sets of NT and AT from PPU $2000-3FFF.  So really there wouldn't be any mechanism to control from the programmer's view.  The only thing you'd want to keep in mind though is that you wouldn't want to set any of the CHR bank select registers to point to the last 4 banks (4KB).  You actually could if you really wanted to, but you'd end up rendering the NT/AT as pattern tables (trash/static basically).  My setup is really just double using 32KB of SRAM for name, attribute, and pattern tables to give you true four screen mirroring without any additional cost.  The logic required to do so is about the same to implement normal MMC3 mirroring so it effectively comes at no logic cost either.  <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A yearish ago, Tepples was asking about the possibility of banking WRAM with MMC3 (<a href="http://wiki.nesdev.com/w/index.php/Talk:MMC3" class="postlink">discussion on the wiki</a>); one thought that would be trivial but perhaps awkward would be enabling a 4kB RAM window in the $5000-$5FFF page. This would then track the bank setting for the $C000-$DFFF bank in the MMC3. Although not directly supported by the MMC3, it's a hardware modification that's just a simple variant on the standard &quot;<a href="http://wiki.nesdev.com/w/index.php/PRG_RAM_circuit#Using_7420" class="postlink">add prg ram</a>&quot; circuit— half of a 74'20 (/(M2·/ROMSEL·A14·A12)) to get a 4+4F RAM banking.</div><br /><br />So if I were to answer Tepples' question from that discussion, with my MMC3 would output high on all upper address bits when enabling WRAM.  That's because I only base the A13 and above upon the current status of PRG A13 &amp; 14 on the NES.  Them being high for $5000-5FFF would be the same as enabling the last bank of PRG ROM.  I'm pretty sure what's what you and Drag were saying.<br /><br />I could base the WRAM bank off of the bank selected for $C000-DFFF, but I don't see much benefit.  It'd actually make the logic more complex than just using something like the lower bits of the $A001 register and always mapping those bits to WRAM A13/14.  This also seems simpler to program because you don't have to keep track of what reg6 is mapping to.<br /><br />Aside from this stuff I'm hoping to tidy up the Scanline counter.  I did some checking with my <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7653&amp;p=94997#p94997" class="postlink">logic analyzer</a> previously that confirmed that Tepples' idea of sensing scanlines based on CHR A13 should be pretty simple.  It would end up firing IRQ later than the actual MMC3 (a little after sprite fetching instead of immediately)  This should remove sprite/background restrictions and no longer require careful use  of $2006/7.  Additionally it would require significantly less logic to sense scan lines in this manner so it should free up some logic space.  One thought I had was to try and implement a RAMBO-1 style counter that could be used to count scanlines or CPU cycles and be able to change on the fly.  None of this has been tested yet though, just ideas and brainstorming for the most part.<br /><br />Beyond that I didn't really have anything on the plate for minor improvements/additions to my MMC3.  If you have ideas/requests though feel free to share, there won't be room for logic but there is a sizable amount, simple stuff like more PRG-ROM is possible.  Hmm now that I think of it, with some luck there should be enough for some MMC2/4 latch style bankswitching though. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Aug 26, 2012 11:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A yearish ago, Tepples was asking about the possibility of banking WRAM with MMC3 (<a href="http://wiki.nesdev.com/w/index.php/Talk:MMC3" class="postlink">discussion on the wiki</a>); one thought that would be trivial but perhaps awkward would be enabling a 4kB RAM window in the $5000-$5FFF page. This would then track the bank setting for the $C000-$DFFF bank in the MMC3. Although not directly supported by the MMC3, it's a hardware modification that's just a simple variant on the standard &quot;<a href="http://wiki.nesdev.com/w/index.php/PRG_RAM_circuit#Using_7420" class="postlink">add prg ram</a>&quot; circuit— half of a 74'20 (/(M2·/ROMSEL·A14·A12)) to get a 4+4F RAM banking.</div>I could base the WRAM bank off of the bank selected for $C000-DFFF, but I don't see much benefit.  It'd actually make the logic more complex than just using something like the lower bits of the $A001 register and always mapping those bits to WRAM A13/14.  This also seems simpler to program because you don't have to keep track of what reg6 is mapping to.</div>Sorry, I must have stated myself poorly. What I meant was &quot;because the original MMC3 ignores /ROMSEL for banking, if you map RAM into $5000-$5fff, it'll follow the bank in $d000-$dfff&quot;. Shouldn't be any more complicated in hardware, although it is definitely weird enough to be of dubious utility.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Beyond that I didn't really have anything on the plate for minor improvements/additions to my MMC3.  If you have ideas/requests though feel free to share, there won't be room for logic but there is a sizable amount, simple stuff like more PRG-ROM is possible.  Hmm now that I think of it, with some luck there should be enough for some MMC2/4 latch style bankswitching though. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /></div>The ideas that come to mind in the bucket of &quot;probably sufficiently simple&quot; are 1- FME-7's ability to bank PRG ROM into $6000-$7fff, 2- automatic IRQ redirection so that the vector for the MMC3 IRQ is pre-separated so that the software doesn't need to check/only use one of the different IRQ sources, and 3- automatic controller DPCM-deglitcher by watching for reads and writes to $4xxx, clocking on reads and stopping the shift register after 8 bits have been read.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 27, 2012 6:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">In contrast my idea was just straight up 4screen mirroring.  I would completely disable the 2KB VRAM on board, and make a simple change to the CHR bank select circuitry that would enable the last 4KB of CHR RAM when CHR A13 is high.  So from a programmer's perspective you'd just have 4 sets of NT and AT from PPU $2000-3FFF.  So really there wouldn't be any mechanism to control from the programmer's view.</div><br />Which would make it harder to have a status bar. When revising <a href="http://pineight.com/mw/index.php?title=Nova%27s_Mapper" class="postlink">one of NovaYoshi's mapper ideas</a> over the past couple days, I came up with a different plan: allow switching between standard mirroring modes in CIRAM and a four screen mode in CHR RAM $7000-$7FFF.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Aug 27, 2012 12:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Sorry, I must have stated myself poorly. What I meant was &quot;because the original MMC3 ignores /ROMSEL for banking, if you map RAM into $5000-$5fff, it'll follow the bank in $d000-$dfff&quot;. Shouldn't be any more complicated in hardware, although it is definitely weird enough to be of dubious utility.<br /></div><br /><br />Ahh I get it now I didn't pick up on the fact it would be different at $5000.  Yeah it wouldn't take much more logic to allow something like that assuming my direct mapping of $A001 bits wasnt implemented.  The combination of yours and my solution wouldn't be a good use of the limited logic though.  One thought would be to use my idea but only control A14 with the mapper, and just connect A13 to the NES.  It'd be even simpler logic, but you'd loose 8KB of WRAM because you'd just have two 12KB banks.  If one had a hard time even utilizing 4 8KB pages of WRAM that loss of 12KB might not be an issue.  More Linear WRAM seems like a better benefit than the full 32KB, I'm just speculating though...<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The ideas that come to mind in the bucket of &quot;probably sufficiently simple&quot; are 1- FME-7's ability to bank PRG ROM into $6000-$7fff, 2- automatic IRQ redirection so that the vector for the MMC3 IRQ is pre-separated so that the software doesn't need to check/only use one of the different IRQ sources, and 3- automatic controller DPCM-deglitcher by watching for reads and writes to $4xxx, clocking on reads and stopping the shift register after 8 bits have been read.</div><br /><br />1- what is it exactly that makes having a prg rom bank at $6000 appealing?  This probably wouldnt cost too much logic, but it'd probably be low priority unless I'm missing some benefit that'd make it worth the logic cost.<br /><br />2- how would you imagine preseparating the IRQ?  I'm not familiar enough with other IRQs to realize a way to do this more easily than how they are normally distinguished.  Oh wait...  What if the mapper always switched to something besides the last bank upon the issue of a mapper IRQ.   How much time/trouble would this really save though?<br /><br />3- DPCM-deglitcher: How would you stop the shift register exactly?  <br /><br />Tepples:  I like some of your ideas there with the Nova.  One comment though, I think you might be under estimating the CHR window logic.  That arithmetic is going to suck up some considerable logic I would guess.  <br /><br />But I see what you mean about the status bar difficulty.  I'd have to check some things, but I think it'd be simpler logic to implement H/V mirroring from the same on cart VRAM by just fixing A10/11.  <br /><br />Also, would you mind branching off these last few days of discussion about a hybrid mapper to another thread?  I don't want to confuse people interested in only the stock mapper styles.  Thx.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 27, 2012 12:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">The ideas that come to mind in the bucket of &quot;probably sufficiently simple&quot; are 1- FME-7's ability to bank PRG ROM into $6000-$7fff, 2- automatic IRQ redirection so that the vector for the MMC3 IRQ is pre-separated so that the software doesn't need to check/only use one of the different IRQ sources, and 3- automatic controller DPCM-deglitcher by watching for reads and writes to $4xxx, clocking on reads and stopping the shift register after 8 bits have been read.</div><br />None of these ideas are really worth wasting hardware resources on, IMO.<br /><br />1) When you already have two switchable 8K banks and two fixed 8K banks, having a third switchable bank doesn't really help much (two switchable banks + a fixed bank really is the sweet spot IMO, it's so much better than for example UxROM's one switchable bank + one fixed bank because you can map code in the other bank and data in the other, whereas with 16K banking you have to either fit all of your code in the fixed bank or always worry about not being able to easily switch data in when running code from the switched bank).<br /><br />EDIT: OK, there's one case where a third switchable bank could be useful: DPCM. Even in that case it would be just as useful to have 3 switchable banks at $8000-DFFF and one fixed bank at $E000-FFFF.<br /><br />2) If you have a scanline IRQ, I can't really think of much reason to have any other IRQ sources (e.g. the DPCM IRQ and frame IRQs are mostly useless).<br /><br />3) Not worth it to save ~500 or so cycles extra that it would take to do this on software.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 27, 2012 12:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">Also, would you mind branching off these last few days of discussion about a hybrid mapper to another thread?</div><br />PM me exactly which post IDs need split and I'll do it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Aug 27, 2012 1:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It was just brainstorming :p<br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">1- what is it exactly that makes having a prg rom bank at $6000 appealing?  This probably wouldnt cost too much logic, but it'd probably be low priority unless I'm missing some benefit that'd make it worth the logic cost.</div><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">1) When you already have two switchable 8K banks and two fixed 8K banks, having a third switchable bank doesn't really help much (two switchable banks + a fixed bank really is the sweet spot IMO, it's so much better than for example UxROM's one switchable bank + one fixed bank because you can map code in the other bank and data in the other, whereas with 16K banking you have to either fit all of your code in the fixed bank or always worry about not being able to easily switch data in when running code from the switched bank).<br /><br />EDIT: OK, there's one case where a third switchable bank could be useful: DPCM. Even in that case it would be just as useful to have 3 switchable banks at $8000-DFFF and one fixed bank at $E000-FFFF.</div><br />I was specifically referring to FME-7's having 4 switchable banks plus the fixed bank at $e000. Is it obviously useful? I dunno, it keeps you from having to save context. The four banks could be something like &quot;DPCM stream&quot;, &quot;music data&quot;, &quot;level data&quot;, &quot;game code&quot;.<br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">2- how would you imagine preseparating the IRQ?  I'm not familiar enough with other IRQs to realize a way to do this more easily than how they are normally distinguished.  Oh wait...  What if the mapper always switched to something besides the last bank upon the issue of a mapper IRQ.   How much time/trouble would this really save though?</div><br />A fair amount, depending on how frequently interrupts come; interrupt ringdowns are present in almost all computing designs.<br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">2) If you have a scanline IRQ, I can't really think of much reason to have any other IRQ sources (e.g. the DPCM IRQ and frame IRQs are mostly useless).</div><br />But that's a fine point.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3- DPCM-deglitcher: How would you stop the shift register exactly?</div><br />a 9 bit shift register; when 0b???????1 is written to $4xxx the register is preloaded with 0b000000001, reads clock it, and when the 256s bit is 1 is blocks itself.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3) Not worth it to save ~500 or so cycles extra that it would take to do this on software.</div><br />I disagree; 500cy is actually pretty huge, reliably always the same amount of time is better, and DPCM no longer conflicts with certain not-rereadable things (e.g. Arkanoid, SNES mouse).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Aug 27, 2012 1:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards. INL-ROM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What is DPCM deglitching? Is there a thread somewhere or a wiki page I could read about this? (Trying not to derail topic further.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 27, 2012 2:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC3 (or similar) reproduction circuit boards. INL-ROM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">What is DPCM deglitching? Is there a thread somewhere or a wiki page I could read about this? (Trying not to derail topic further.)</div><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4116">viewtopic.php?f=2&amp;t=4116</a><!-- l -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Aug 27, 2012 3:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know about the read conflict, but how would a mapper &quot;deglitch&quot; it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Aug 27, 2012 4:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The seeming read still happens; the 6502 inside the NES just isn't listening. By mapping a shift register that will pay attention to the same bits that the software would, you can make sure <strong>something</strong> listens, and then save the results for the NES. (Is that clear enough?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 27, 2012 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In other words, something like this would work:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda #$01<br />&nbsp; sta $4016&nbsp; ; the mapper snoops on writes to $4016<br />&nbsp; lsr a<br />&nbsp; sta $4016<br /><br />&nbsp; bit $4016<br />&nbsp; bit $4016<br />&nbsp; bit $4016<br />&nbsp; bit $4016<br /><br />&nbsp; bit $4016<br />&nbsp; bit $4016<br />&nbsp; bit $4016<br />&nbsp; bit $4016<br /><br />&nbsp; lda $4036&nbsp; ; the mapper has been watching the data bus during $4016 reads too<br /></div><br />But given the existence of devices that return 16-bit (Super NES controller), 24-bit (Four Score), or 32-bit (mouse) records on D0, or records on D3 and D4 (Power Pad and Arkanoid paddle), that could take a big CPLD with a lot of memory.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>