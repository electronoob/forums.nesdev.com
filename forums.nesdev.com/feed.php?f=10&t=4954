<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=4954" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-06-06T13:05:40-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=4954</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-06-06T13:05:40-07:00</updated>
<published>2009-06-06T13:05:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=47717#p47717</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=47717#p47717"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=47717#p47717"><![CDATA[
So a note-on in an NES game might be delayed by 10 milliseconds. Big whoop. If your song's tempo doesn't divide easily into 901.5 BPM (NTSC) or 750 BPM (PAL), the note-ons will be jittered anyway. Or apart from the NES, if you have a live musician, how long might his notes get delayed? Music is <em>supposed</em> to sound slightly out of sync. Drum-machine precision is mostly an affectation of the past three decades.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jun 06, 2009 1:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CartCollector]]></name></author>
<updated>2009-06-06T12:38:36-07:00</updated>
<published>2009-06-06T12:38:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=47714#p47714</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=47714#p47714"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=47714#p47714"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You're supposed to handle music after you handle the graphics. This is because the PSG allows writes at any time, not just during blanking.<br /></div><br /><br />But if you don't update the music when the VBlank triggers, then that means the music could get updated at different times during the frame, which means that the music could end up sounding out of sync. I guess it's not really noticeable though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1345">CartCollector</a> — Sat Jun 06, 2009 12:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Compton]]></name></author>
<updated>2009-03-15T21:48:48-07:00</updated>
<published>2009-03-15T21:48:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44361#p44361</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44361#p44361"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44361#p44361"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />BTW, anything with A as its destination (LDA, TXA, PLA, ADC, ORA, etc.) sets the status flags, so you don't need to compare A with zero just after. Also, if you store flags in the high bit of a byte, you don't have to modify A to test it; you can use BIT. This is useful in interrupt handlers so you don't have to save as many registers:<br /></div><br /><br />Thanks, that will help clean up some of my code. I didn't know that about the 'A' register.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3524">Compton</a> — Sun Mar 15, 2009 9:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2009-03-16T08:49:54-07:00</updated>
<published>2009-03-15T20:33:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44360#p44360</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44360#p44360"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44360#p44360"><![CDATA[
BTW, anything with A as its destination (LDA, TXA, PLA, ADC, ORA, etc.) sets the status flags, so you don't need to compare A with zero just after. Also, if you store flags in the high bit of a byte, you don't have to modify A to test it; you can use BIT. This is useful in interrupt handlers so you don't have to save as many registers:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$00<br />    sta skipping_note ; or just inc skipping_note if you know that it was previously $FF<br />nmi:<br />    inc nmi_count<br />    bit skipping_note ; set sign flag based on high bit<br />    bmi @skipped ; branch if sign flag set<br />    ...<br />    lda #$FF<br />    sta skipping_note ; or just dec skipping_note if you know it was $00 before<br />@skipped:<br />    rti</div><br /><br />EDIT: Fixed values put into skipping_note. Before its meaning was confused with "not_skipping_note".<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Mar 15, 2009 8:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Compton]]></name></author>
<updated>2009-03-15T18:13:23-07:00</updated>
<published>2009-03-15T18:13:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44355#p44355</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44355#p44355"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44355#p44355"><![CDATA[
My solution was quite simple actually. I just added another flag called 'SkipNote' then incremented it before the VBlank check. Then added this to my nmi...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Start of Interupt Functions<br />NMI:<br /><br />  ;Alter the VBlank flag<br />  inc VBlank   <br />  <br /><br />  ;Push accumulator onto stack<br />  pha<br /><br />  ;check music priority<br />  lda SkipNote<br />  cmp #0<br />  bne +  <br />  <br />  txa<br />  pha<br />  tya<br />  pha<br /><br /><br />        ;Play the next Music note<br />        jsr PLAY_ADDR <br />       <br />  pla<br />  tay<br />  pla<br />  tax        <br /><br />  jmp ++<br />  <br />  +<br />  <br />  lda #0<br />  sta SkipNote<br />++  <br />  ;Pull registers from stack<br /><br />  pla<br />   <br />rti   ;Return from interrupt<br /></div><br /><br />I'll admit it doesn't fix the flaw in my programs design, but it works well enough for what i had in mind.<br /><br />EDIT: This would probably be a bigger problem if i had to update the screen a lot, but for what i needed, a few missed notes aren't even noticable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3524">Compton</a> — Sun Mar 15, 2009 6:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2009-03-15T17:05:47-07:00</updated>
<published>2009-03-15T17:05:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44349#p44349</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44349#p44349"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44349#p44349"><![CDATA[
Heh, Celius did a much better job of showing how much more complex it is to run the code from inside NMI. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Contrast with this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">title_screen:<br />    jsr wait_nmi<br />    jsr update_graphics<br />    jsr handle_controller<br />    beq title_screen<br /><br />    jsr do_time_consuming_setup<br />    <br />select_screen:<br />    jsr wait_nmi<br />    jsr update_graphics<br />    jsr handle_controller<br />    beq select_screen<br /><br />    jsr do_time_consuming_setup<br /><br />game_loop:<br />    jsr wait_nmi<br />    jsr update_graphics<br />    jsr move_objects<br />    jsr handle_controller<br />    beq game_loop<br /><br />...<br /><br />wait_nmi:<br />    lda nmi_count<br />@wait:<br />    cmp nmi_count<br />    beq @wait<br />    rts</div><br />Nothing to bite you in the ass, since "locking" is handled implicitly, and the current game phase is "encoded" into the program counter. And even once you start doing split-screen effects which require some code in the NMI handler, it can be limited to doing the mid-screen changes, and leave the rest to the non-interrupt code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Mar 15, 2009 5:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-03-15T16:43:42-07:00</updated>
<published>2009-03-15T16:43:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44345#p44345</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44345#p44345"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44345#p44345"><![CDATA[
<div class="quotetitle">Compton wrote:</div><div class="quotecontent"><br />This is my NMI interrupt code...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI:<br /><br />  ;Alter the VBlank flag<br />  inc VBlank   <br />  <br /><br />  ;Push registers onto stack<br />  pha<br />  txa<br />  pha<br />  tya<br />  pha<br />     <br />  ;Play the next Music note<br />  jsr PLAY_ADDR <br /><br />  ;Pull registers from stack<br />  pla<br />  tay<br />  pla<br />  tax<br />  pla<br />   <br />rti   ;Return from interrupt<br /><br /></div><br /><br />I try to keep it simple as possible and handle most timing by tracking the VBlank flag.<br /></div><br /><br />Like Tepples said, you should not play the music <em>before</em> the PPU writes. I bet your code is spilling outside of Vblank. The primary purpose of the NMI is for PPU updates in natural Vblank. I know that it gets rid of complexity to have it the way it's set up now like Blargg explained, but you'll probably want to reorganize this, simply because the NMI tells you when you are inside of Vblank. My suggestion is to have PPU writing code in the NMI and have a one-write-lock system of some kind. For example, my PPU updating code has an instruction in RAM that does:<br /><br />JSR $A432<br /><br />And if everything isn't quite ready in terms of PPU updates, all I have to do is change the low byte of the address to point to an RTS. It's important that locking and unlocking the routine can be done with one instruction, because that way it can't be like half updated and interrupted which would cause catastrophe.<br /><br />And with a system like mine, there aren't really any "flags" that you have to check, since it's changing an address. So maybe you want to set aside like 4 bytes of RAM and put:<br /><br />JSR $xxxx<br />RTS<br /><br />in those 4 bytes, and just JSR to that place in RAM in the beginning of the NMI. And that JSR $xxxx would jump to the PPU updating code. Then say it was at $A432, if you wanted to "lock" it, you could make it point to $A431 where an RTS instruction would be placed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Sun Mar 15, 2009 4:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Compton]]></name></author>
<updated>2009-03-15T16:32:16-07:00</updated>
<published>2009-03-15T16:32:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44344#p44344</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44344#p44344"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44344#p44344"><![CDATA[
ok, yeah. If i comment out the 'jsr PLAY_ADDR,'  it works fine.<br /><br />I will apparently have to reorganize some of my code to get this working the way i want, which sucks, but oh well. I guess i know what is wrong and what to do to fix it.<br /><br />Thanks for the input, everyone.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3524">Compton</a> — Sun Mar 15, 2009 4:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[frantik]]></name></author>
<updated>2009-03-15T15:05:19-07:00</updated>
<published>2009-03-15T15:05:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44342#p44342</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44342#p44342"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44342#p44342"><![CDATA[
thanks, makes a lot of sense <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3841">frantik</a> — Sun Mar 15, 2009 3:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2009-03-15T14:51:08-07:00</updated>
<published>2009-03-15T14:51:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44339#p44339</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44339#p44339"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44339#p44339"><![CDATA[
Polling the VBL count is simpler to code for, because you don't have to deal with re-entrancy and concurrency issues. If the code is executed from NMI, you need a flag to tell it when it can run, and where it's called from the mainline code is less-clear. Unless you're doing split-screen effects, you don't need code guaranteed to run every NMI, so the polling approach is better.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Mar 15, 2009 2:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-03-15T14:25:56-07:00</updated>
<published>2009-03-15T14:25:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44336#p44336</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44336#p44336"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44336#p44336"><![CDATA[
<div class="quotetitle">frantik wrote:</div><div class="quotecontent"><br />is there a reason it's better to increment a variable inside of vblanks iterrupt routine and then handle the variable change, vs just putting the  handling code between the interrupt vector and the RTI?<br /></div><br />No, except that the pattern of an ISR that just sets a flag might be more familiar to developers on platforms where you don't get to write your own ISRs, such as any multitasking OS. You could put the entire game in the NMI; Super Mario Bros. does just this. Just make sure you do the PPU updates as soon as possible after the start of vblank, which means before you run the sound engine.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Mar 15, 2009 2:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[frantik]]></name></author>
<updated>2009-03-15T13:59:56-07:00</updated>
<published>2009-03-15T13:59:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44333#p44333</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44333#p44333"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44333#p44333"><![CDATA[
is there a reason it's better to increment a variable inside of vblanks iterrupt routine and then handle the variable change, vs just putting the  handling code between the interrupt vector and the RTI?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3841">frantik</a> — Sun Mar 15, 2009 1:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-03-15T13:48:54-07:00</updated>
<published>2009-03-15T13:48:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44332#p44332</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44332#p44332"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44332#p44332"><![CDATA[
You're supposed to handle music <em>after</em> you handle the graphics. This is because the PSG allows writes at any time, not just during blanking.<br /><br />If you don't use a register in your NMI handler, you don't need to spend cycles saving and loading it. My NES programs' NMI code typically looks like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:<br />  inc retraces<br />  rti<br /></div><br />And then your main loop will look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">forever:<br />  jsr read_pads  ; read each controller twice and keep readings that agree<br />  jsr game_logic  ; apply all game rules<br />  jsr prepare_ppu  ; prepare data to be copied to OAM and VRAM<br />  lda retraces<br />:<br />  cmp retraces  ; wait for NMI handler to signal the start of vblank<br />  beq :-<br />  jsr update_ppu  ; partly-unrolled copies from CPU RAM to tiles, nametables, palette<br />  jsr PLAY_ADDR<br />  jmp forever<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Mar 15, 2009 1:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Compton]]></name></author>
<updated>2009-03-15T13:05:17-07:00</updated>
<published>2009-03-15T13:05:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44327#p44327</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44327#p44327"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44327#p44327"><![CDATA[
This is my NMI interrupt code...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI:<br /><br />  ;Alter the VBlank flag<br />  inc VBlank   <br />  <br /><br />  ;Push registers onto stack<br />  pha<br />  txa<br />  pha<br />  tya<br />  pha<br />     <br />  ;Play the next Music note<br />  jsr PLAY_ADDR <br /><br />  ;Pull registers from stack<br />  pla<br />  tay<br />  pla<br />  tax<br />  pla<br />   <br />rti   ;Return from interrupt<br /><br /></div><br /><br />I try to keep it simple as possible and handle most timing by tracking the VBlank flag.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3524">Compton</a> — Sun Mar 15, 2009 1:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-03-15T11:06:18-07:00</updated>
<published>2009-03-15T11:06:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44322#p44322</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44322#p44322"/>
<title type="html"><![CDATA[background skips when altered...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4954&amp;p=44322#p44322"><![CDATA[
So Vblank is a variable incremented in the NMI? Exactly what is happening when the NMI is fired?<br /><br />Oh, and really make sure in your NMI routine you save A, X, and Y. If the A register is destroyed, the desired value won't be loaded into A upon returning.<br /><br />Here's my suggestion: put "STA $5555" at the very end of the posted code. Then open the ROM in FCEUXD. Go to Tools... Debug... Then under the "break points" box click "add". Then in the first text box next to "address" write $5555 and under it, click "write", then "OK". Then press 'A'. <br /><br />It will break after that code is done. You can see what scanline it ends at and other information.<br /><br />And writing less probably isn't the answer. I was able to fit 182 PPU writes into 1 Vblank, so you just have to keep track of how many cycles everything is taking. Make sure it doesn't spill out of Vblank. That's probably what's causing the problem here, actually.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Sun Mar 15, 2009 11:06 am</p><hr />
]]></content>
</entry>
</feed>