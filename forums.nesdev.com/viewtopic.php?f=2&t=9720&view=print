<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Split-screen vertical scrolling and precise delays</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Split-screen vertical scrolling and precise delays</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9720">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9720</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Jan 19, 2013 6:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Split-screen vertical scrolling and precise delays</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Split-screen horizontal scrolling is easy: Just poke to $2005 two values, with one being the X scrolling offset, any time during the scanline.<br />But turns out vertical scrolling is not that easy, especially if you are going to do that without any mapper support.<br /><br />In a recent <a href="http://bisqwit.iki.fi/cv2fin/" class="postlink">project of mine</a> I did that anyway. It is tested on MMC1, VRC6 and MMC3. (Emulation only.)<br />You can see a screenshot of that here:<br /><img src="http://bisqwit.iki.fi/cv2fin/dev/cv2u-sram-scroll.png" alt="Image" /><br /><br />Here is the source code. It is in form of two macros.<br /><br />The first one prepares a PPU write which sets the scrolling offset to a particular value.<br />The second one commits the write. It must be performed at a specific time window during the h-blank, or you will get artifacts.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro PPU_WriteOffset<br />&nbsp; &nbsp; &nbsp; &nbsp; ; A = NTA<br />&nbsp; &nbsp; &nbsp; &nbsp; ; X = X-Offset<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Y = Y-offset<br />&nbsp; &nbsp; &nbsp; &nbsp; asl<br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp;; For first write to $2006: NTA*4<br />&nbsp; &nbsp; &nbsp; &nbsp; sty $01<br />&nbsp; &nbsp; &nbsp; &nbsp; tay<br />&nbsp; &nbsp; &nbsp; &nbsp; ;sta $2006 ; t: yyy NN YYYYY XXXXX xxx<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; *54 32 10--- ----- --- &lt;- These are affected. * = set zero.<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; NN&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;- UNIQUE DATA<br />&nbsp; &nbsp; &nbsp; &nbsp; txa<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $00<br />&nbsp; &nbsp; &nbsp; &nbsp; lda $01<br />&nbsp; &nbsp; &nbsp; &nbsp; asl<br />&nbsp; &nbsp; &nbsp; &nbsp; asl<br />&nbsp; &nbsp; &nbsp; &nbsp; and #$E0<br />&nbsp; &nbsp; &nbsp; &nbsp; ora $00&nbsp; &nbsp;; Second write to $2006:&nbsp; &nbsp;X/8 + 32*Y/8<br />&nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Cycle cost: 2+2+3+2+ 2*4 + 3+3+2+2+2+3 = 32<br />.endmacro<br />.macro PPU_WriteOffset_Finish<br />&nbsp; &nbsp; &nbsp; &nbsp; sty $2006<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy $01 <br />&nbsp; &nbsp; &nbsp; &nbsp; sty $2005 ; t: yyy NN YYYYY XXXXX xxx<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 210 -- 76543 ----- ---&nbsp; &lt;- These are affected.<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; yyy&nbsp; &nbsp; YY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;- UNIQUE DATA<br />&nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; ; At THIS point, we must be in h-blank<br />&nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; stx $2005 ; t: yyy NN YYYYY XXXXX xxx<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --- -- ----- 76543 210&nbsp; &lt;- These are affected.<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;xxx&nbsp; &lt;- UNIQUE DATA<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2006 ; t: yyy NN YYYYY XXXXX xxx<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --- -- --765 43210 ---&nbsp; &lt;- These are affected.<br />&nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; This last write is the only one that updates v = t!<br />&nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Cycle cost: 4*4+3 = 19<br />.endmacro</div><br /><br />Related, here is a macro which sleeps (delays) the execution for the given number of scanlines, plus/minus a configurable number of cycles. All numbers must be compile time constants. The macro depends on a compile-time constant called &quot;PAL&quot; which must be 0 if you are compiling for a NTSC system, 1 if you are compiling for a PAL system.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro ScanlineDelay already_done, do_scanlines, delta<br />&nbsp; &nbsp; .if PAL=0<br />&nbsp; &nbsp; &nbsp; &nbsp; compensate_dmc_delay (already_done), ((do_scanlines)*341&nbsp; &nbsp;/3 + (delta))<br />&nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; compensate_dmc_delay (already_done), ((do_scanlines)*341*5/16 + (delta))<br />&nbsp; &nbsp; .endif <br />.endmacro</div><br /><br />Here is a version that does not need the number of scanlines to be a compile-time constant. (It still requires the PAL/NTSC variable.)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.pushseg<br />.segment &quot;FUNC_SCANLINEDELAY&quot;<br />; A = number of scanlines to delay. Must be &gt;= 1.<br />; Uses $00,$01,$F8 as temp.<br />VariableScanlineDelay:<br />&nbsp; &nbsp; &nbsp; &nbsp; @nearby_rts_14cyc = $C450 ; lda #1 + rts<br />&nbsp; &nbsp; &nbsp; &nbsp; @nearby_rts&nbsp; &nbsp; &nbsp; &nbsp;= rts12<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Some zeropage variable.<br />&nbsp; &nbsp; &nbsp; &nbsp; @remain = $F8<br />&nbsp; &nbsp; &nbsp; &nbsp; sta @remain&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />.if PAL=0<br />&nbsp; &nbsp; &nbsp; &nbsp; @n_cases = 3<br />.else<br />&nbsp; &nbsp; &nbsp; &nbsp; @n_cases = 16<br />.endif<br />@loop:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #@n_cases&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp @remain&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />&nbsp; &nbsp; &nbsp; &nbsp; Jcc @thatmuch&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />&nbsp; &nbsp; &nbsp; &nbsp; ; n_cases &gt;= remain<br />&nbsp; &nbsp; &nbsp; &nbsp; ; remain &lt;= n_cases<br />&nbsp; &nbsp; &nbsp; &nbsp; lda @remain&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;-1+3<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta @remain&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; ; X = remain, remain = 0&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp @jump&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3 -- 20 so far<br />@thatmuch:<br />&nbsp; &nbsp; &nbsp; &nbsp; ; n_cases &lt; remain<br />&nbsp; &nbsp; &nbsp; &nbsp; ; remain &gt; n_cases<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda @remain&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />&nbsp; &nbsp; &nbsp; &nbsp; sec&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc #@n_cases&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; &nbsp; &nbsp; &nbsp; sta @remain&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3 -- 20 so far<br />&nbsp; &nbsp; &nbsp; &nbsp; ; X = n_cases, remain -= ncases<br />@jump:<br />&nbsp; &nbsp; &nbsp; &nbsp; TableWrapCheck (@lo_ptr_table-1), @n_cases, &quot;@lo_ptr_table causes page wrap&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; TableWrapCheck (@hi_ptr_table-1), @n_cases, &quot;@hi_ptr_table causes page wrap&quot;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; lda @lo_ptr_table-1,x&nbsp; &nbsp;;4 assuming no wrap<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />&nbsp; &nbsp; &nbsp; &nbsp; lda @hi_ptr_table-1,x&nbsp; &nbsp;;4 assuming no wrap<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp ($00)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;5 -- 39 so far<br />@continue:<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; -- 42 so far (JMP)<br />&nbsp; &nbsp; &nbsp; &nbsp; lda @remain&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />&nbsp; &nbsp; &nbsp; &nbsp; Jne @loop&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;-1<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Overhead so far: 6+3-1 = 8 cycles (including JSR).<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Add 6 for RTS = 14 cycles.<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />.segment &quot;DATA_SCANLINEDELAY_POINTERS&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; .byte 0 ; We don't need a delay0 pointer.<br />@lo_ptr_table:<br />&nbsp; &nbsp; .repeat @n_cases, I<br />&nbsp; &nbsp; &nbsp; &nbsp; .byte &lt;.ident (.sprintf(&quot;@delay%d&quot;, I+1))<br />&nbsp; &nbsp; .endrepeat<br />@hi_ptr_table:<br />&nbsp; &nbsp; .repeat @n_cases, I<br />&nbsp; &nbsp; &nbsp; &nbsp; .byte &gt;.ident (.sprintf(&quot;@delay%d&quot;, I+1))<br />&nbsp; &nbsp; .endrepeat<br /><br />&nbsp; &nbsp; .repeat @n_cases, I<br />&nbsp; &nbsp; &nbsp; .segment .sprintf(&quot;DELAY%d&quot;, I+1)<br />&nbsp; &nbsp; &nbsp; .ident (.sprintf(&quot;@delay%d&quot;, I+1)):<br />&nbsp; &nbsp; &nbsp; &nbsp; ScanlineDelay 48, (I+1), 0<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp @continue<br />&nbsp; &nbsp; .endrepeat<br />.popseg</div><br /><br />It will produce a number of segments, which you will have to include in your linker script.<br /><br />These both depend on this macro, which produces code that sleeps the given number of cycles regardless of whether a DMC sample is playing or not. The detection of the DMC sample must be customized for your given program.<br /><a href="http://bisqwit.iki.fi/src/6502-inline_dmc_delay_compensation.inc" class="postlink">http://bisqwit.iki.fi/src/6502-inline_dmc_delay_compensation.inc</a><br /><br />Which, in turn, depends on a delay_n macro, which sleeps for an exact number of cycles, which you can find implemented in... Well. There are a number of files.<br />-- <a href="http://bisqwit.iki.fi/src/6502-inline_delay-keepy.inc" class="postlink">http://bisqwit.iki.fi/src/6502-inline_delay-keepy.inc</a> This preserves Y, but clobbers A, X, C, Z+N and D+V.<br />-- <a href="http://bisqwit.iki.fi/src/6502-inline_delay-keepaxyc.inc" class="postlink">http://bisqwit.iki.fi/src/6502-inline_delay-keepaxyc.inc</a> This preserves A, X, Y and C, but clobbers Z+N and D+V.<br />-- <a href="http://bisqwit.iki.fi/src/6502-inline_delay-keepaxyczndv.inc" class="postlink">http://bisqwit.iki.fi/src/6502-inline_delay-keepaxyczndv.inc</a> This preserves A, X, Y, C, Z+N and D+V.<br />-- <a href="http://bisqwit.iki.fi/src/6502-inline_delay-keepy-a25.inc" class="postlink">http://bisqwit.iki.fi/src/6502-inline_delay-keepy-a25.inc</a> This preserves just Y, and requires the presence of a function called delay_a_25_clocks. You can find the implementation below.<br />-- <a href="http://bisqwit.iki.fi/src/6502-inline_delay-keep-ax33-xa30.inc" class="postlink">http://bisqwit.iki.fi/src/6502-inline_delay-keep-ax33-xa30.inc</a> This clobbers all registers besides S and I, and requires the presence of functions called delay_256a_x_33_clocks and delay_256x_a_30_clocks.<br />The delay code is optimized for size, and is surprisingly good. Most values produce 5-7 bytes of code. The versions which preserve more registers produce larger code.<br />The delay is customized and optimized for size for up to 5000 cycles, and up from it is done recursively by halving the delay.<br />None of the macros change contents of memory locations. Many of them do read RAM locations. Some of them do sequences of two successive RAM writes, where the first one changes a value and the second one changes it back.<br />You can find a version for your own set of preserved registers by editing the filename URL by following the established pattern. In the future, the macro might receive the set of registers as a parameter.<br /><br />You can find the implementation of the aforementioned three runtime delay functions below. Portions were written by Blargg and dclxvi.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;;;;;;;;;;;;;;;;;;;;;;;<br />; Delays A:X clocks+overhead<br />; Time: 256*A+X+34 clocks (including JSR)<br />; Written by Joel Yliluoma. Clobbers A. Preserves X,Y. Has relocations.<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />:&nbsp; &nbsp; &nbsp; &nbsp;; do 256 cycles.&nbsp; &nbsp; &nbsp; &nbsp; ; 5 cycles done so far. Loop is 2+1+ 2+3+ 1 = 9 bytes.<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 cycles - Carry was set from cmp<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 3 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #(256-25-10-2-4)&nbsp; &nbsp;; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr delay_a_25_clocks<br />&nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 4 cycles<br />delay_256a_x_33_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2; 2 cycles overhead<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2; 4 cycles overhead<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 0-255 cycles remain, overhead = 4<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +2; 6; +27 = 33<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 15 + JSR + RTS overhead for the code below. JSR=6, RTS=6. 15+12=27<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; Cycles&nbsp; &nbsp; &nbsp; &nbsp; Accumulator&nbsp; &nbsp; &nbsp;Carry flag<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 0&nbsp; 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; &nbsp; &nbsp; &nbsp;(hex)&nbsp; &nbsp; &nbsp; &nbsp; 0 1 2 3 4<br />&nbsp; &nbsp; &nbsp; &nbsp; sec&nbsp; &nbsp; &nbsp; &nbsp; ; 0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; &nbsp;00 01 02 03 04&nbsp; &nbsp;1 1 1 1 1<br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #5&nbsp; &nbsp; &nbsp;; 2&nbsp; 2&nbsp; 2&nbsp; 2&nbsp; 2&nbsp; &nbsp;FB FC FD FE FF&nbsp; &nbsp;0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; Jcs :-&nbsp; &nbsp; &nbsp;; 4&nbsp; 4&nbsp; 4&nbsp; 4&nbsp; 4&nbsp; &nbsp;FB FC FD FE FF&nbsp; &nbsp;0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; ; 6&nbsp; 6&nbsp; 6&nbsp; 6&nbsp; 6&nbsp; &nbsp;7D 7E 7E 7F 7F&nbsp; &nbsp;1 0 1 0 1<br />&nbsp; &nbsp; &nbsp; &nbsp; Jcc :+&nbsp; &nbsp; &nbsp;; 8&nbsp; 8&nbsp; 8&nbsp; 8&nbsp; 8&nbsp; &nbsp;7D 7E 7E 7F 7F&nbsp; &nbsp;1 0 1 0 1<br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #$7E&nbsp; &nbsp;;10 11 10 11 10&nbsp; &nbsp;FF FF 00 00 01&nbsp; &nbsp;0 0 1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; Jcc :+&nbsp; &nbsp; &nbsp;;12 13 12 13 12&nbsp; &nbsp;FF FF 00 00 01&nbsp; &nbsp;0 0 1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; Jeq :+&nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; 14 15 14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 00 01&nbsp; &nbsp; &nbsp; &nbsp;1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; Jne :+&nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1<br />:&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; ;15 16 17 18 19&nbsp; &nbsp;(thanks to dclxvi for the algorithm) <br />;;;;;;;;;;;;;;;;;;;;;;;;&nbsp; <br />; Delays X:A clocks+overhead<br />; Time: 256*X+A+30 clocks (including JSR)<br />; Written by Joel Yliluoma. Clobbers A,X. Preserves Y. Has relocations.<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />delay_256x_a_30_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; Jeq delay_a_25_clocks&nbsp; &nbsp;; +3&nbsp; (25+5 = 30 cycles overhead)<br />&nbsp; &nbsp; &nbsp; &nbsp; ; do 256 cycles.&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; 4 cycles so far. Loop is 1+1+ 2+3+ 1+3 = 11 bytes.<br />&nbsp; &nbsp; &nbsp; &nbsp; dex&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; 2 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; 3 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #(256-25-9-2-7)&nbsp; &nbsp; ; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr delay_a_25_clocks<br />&nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 4<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp delay_256x_a_30_clocks ; 3.<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />; Delays A clocks + overhead<br />; Preserved: X, Y<br />; Time: A+25 clocks (including JSR)&nbsp; (13+6+6)<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; carry set by CMP<br />delay_a_25_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2<br />&nbsp; &nbsp; &nbsp; &nbsp; Jcs :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; &nbsp; do multiples of 7<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Cycles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Accumulator&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Carry&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Zero<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 0 0 0 0 0 0 0&nbsp; &nbsp;00 01 02 03 04 05 06&nbsp; &nbsp;0 0 0 0 0 0 0&nbsp; &nbsp;? ? ? ? ? ? ?<br />&nbsp; &nbsp; &nbsp; &nbsp; Jcs :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 2 2 2 2 2 2&nbsp; &nbsp;00 00 01 01 02 02 03&nbsp; &nbsp;0 1 0 1 0 1 0&nbsp; &nbsp;1 1 0 0 0 0 0<br />:&nbsp; &nbsp; &nbsp; &nbsp;Jeq @zero&nbsp; &nbsp; &nbsp; &nbsp;; 4 5 4 5 4 5 4&nbsp; &nbsp;00 00 01 01 02 02 03&nbsp; &nbsp;0 1 0 1 0 1 0&nbsp; &nbsp;1 1 0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; : : 6 7 6 7 6&nbsp; &nbsp;:: :: 01 01 02 02 03&nbsp; &nbsp;: : 0 1 0 1 0&nbsp; &nbsp;: : 0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; Jeq :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; : : 8 9 8 9 8&nbsp; &nbsp;:: :: 00 00 01 01 01&nbsp; &nbsp;: : 1 1 0 0 1&nbsp; &nbsp;: : 1 1 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; Jcc :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; : : : : A B A&nbsp; &nbsp;:: :: :: :: 01 01 01&nbsp; &nbsp;: : : : 0 0 1&nbsp; &nbsp;: : : : 0 0 0<br />@zero:&nbsp; Jne :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 7 8 : : : : C&nbsp; &nbsp;00 01 :: :: :: :: 01&nbsp; &nbsp;0 1 : : : : 1&nbsp; &nbsp;1 1 : : : : 0<br />:&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 9 A B C D E F&nbsp; &nbsp;00 01 00 00 01 01 01&nbsp; &nbsp;0 1 1 1 0 0 1&nbsp; &nbsp;1 1 1 1 0 0 0<br />; ^ (thanks to dclxvi for the algorithm)</div><br /><br />These functions require macros called Jeq,Jcc,Jne etc. (with a capital J). These are branch macros that do page-wrapping checking. You can find the implementation of those macros below. They were written by Blargg.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro branch_check opc, dest<br />&nbsp; &nbsp; opc dest<br />&nbsp; &nbsp; .assert &gt;* = &gt;dest, warning, &quot;branch_check: failed, crosses page&quot;<br />.endmacro<br /><br />.macro Jcc dest<br />&nbsp; &nbsp; &nbsp; &nbsp; branch_check bcc, dest<br />.endmacro<br />.macro Jcs dest<br />&nbsp; &nbsp; &nbsp; &nbsp; branch_check bcs, dest<br />.endmacro&nbsp; <br />.macro Jeq dest<br />&nbsp; &nbsp; &nbsp; &nbsp; branch_check beq, dest<br />.endmacro<br />.macro Jne dest<br />&nbsp; &nbsp; &nbsp; &nbsp; branch_check bne, dest<br />.endmacro<br />.macro Jmi dest<br />&nbsp; &nbsp; &nbsp; &nbsp; branch_check bmi, dest<br />.endmacro<br />.macro Jpl dest<br />&nbsp; &nbsp; &nbsp; &nbsp; branch_check bpl, dest<br />.endmacro<br />.macro Jvc dest<br />&nbsp; &nbsp; &nbsp; &nbsp; branch_check bvc, dest<br />.endmacro&nbsp; <br />.macro Jvs dest&nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; branch_check bvs, dest<br />.endmacro</div><br /><br />Related, there is also this macro which checks whether a table spans across two pages, and produces a link-time warning if access to the table will produce page crossing.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro TableWrapCheck table, last_index, message<br />&nbsp; &nbsp; &nbsp; &nbsp; .assert &gt;(table) = &gt;(table+(last_index)), warning, message<br />.endmacro</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jan 19, 2013 8:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Split-screen vertical scrolling and precise delays</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Since you only scroll vertically, you should do this (or something equivalent) instead :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #wathever...<br />sta $2000<br />ldx #$00<br />stx $2005<br />lda VScroll<br />sta $2005<br />stx $2005<br />asl A<br />asl A<br />asl A<br />asl A<br />asl A<br />sta $2006<br /></div><br /><br />Aside of this, great work for the delay routines, and for this hack in general ! I really find it amazing. The &quot;save anywhere&quot; function does crash the game for me, but this may be due to the fact I use it in conjunction with my own lifebar hack.<br /><br />EDIT :<br />Oh and what I said is for the 1st split. The 2nd split only needs two $2006 writes, period. Anything else is superfluous.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Jan 19, 2013 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Split-screen vertical scrolling and precise delays</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Oh and what I said is for the 1st split. The 2nd split only needs two $2006 writes, period. Anything else is superfluous.</div><br />From the so called &quot;skinny&quot; documentation it would seem though that just writing twice to $2006 clears the top bit of the smooth Y scrolling position. This is unacceptable.<br />Also, I am using horizontal scrolling as well. The entire screen is scrolled 8 pixels to the right. This happens because of attribute table granularity issues. Admittedly, this part does not require writes to $2005.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The &quot;save anywhere&quot; function does crash the game for me, but this may be due to the fact I use it in conjunction with my own lifebar hack.</div><br />If you send me a copy of your hack, I can try and see what causes the crash.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jan 19, 2013 2:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Split-screen vertical scrolling and precise delays</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">From the so called &quot;skinny&quot; documentation it would seem though that just writing twice to $2006 clears the top bit of the smooth Y scrolling position. This is unacceptable.</div><br />No, it is perfectly acceptable for the second split.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, I am using horizontal scrolling as well. The entire screen is scrolled 8 pixels to the right</div><br />Then just OR the last $2006 write with 1 (while keeping the value in $2005.1 appropriate - not required but better for the sake of consistancy) :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #wathever...<br />sta $2000<br />ldx #$08<br />stx $2005<br />lda VScroll<br />sta $2005<br />stx $2005<br />asl A<br />asl A<br />asl A<br />asl A<br />sec<br />rol A<br />sta $2006</div><br /><br />Oh, and my hack is <a href="http://www.romhacking.net/hacks/1074/" class="postlink">available at RHDN</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Jan 19, 2013 2:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Split-screen vertical scrolling and precise delays</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">From the so called &quot;skinny&quot; documentation it would seem though that just writing twice to $2006 clears the top bit of the smooth Y scrolling position. This is unacceptable.</div><br />No, it is perfectly acceptable for the second split.</div><br />I am actually doing three splits there. There is one &quot;blank&quot; scanline that you may not notice.<br />But you're right <em>only</em> assuming that for the second split I am scrolling to a Y scrolling offset that doesn't include a &amp;4. <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> Which happens to hold for now.<br />However, I am using the same macro for all the splits, and there's no sense making a different macro for different cases, since all of this is cycle-counted anyway (unless for size issues).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>