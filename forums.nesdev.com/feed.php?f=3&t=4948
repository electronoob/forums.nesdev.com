<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=4948" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-04-03T04:59:27-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=4948</id>
<entry>
<author><name><![CDATA[hap]]></name></author>
<updated>2009-04-03T04:59:27-07:00</updated>
<published>2009-04-03T04:59:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45114#p45114</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45114#p45114"/>
<title type="html"><![CDATA[Nes_Snd_Emu-0.1.7 noise, test_apu_timers attn: blargg]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45114#p45114"><![CDATA[
Thanks, this is a pretty smart optimization for when noise is not in use. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />In the thousands: I don't think that's needed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=115">hap</a> — Fri Apr 03, 2009 4:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2009-04-02T19:44:56-07:00</updated>
<published>2009-04-02T19:44:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45101#p45101</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45101#p45101"/>
<title type="html"><![CDATA[Nes_Snd_Emu-0.1.7 noise, test_apu_timers attn: blargg]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45101#p45101"><![CDATA[
Here's the program (very simple C affair): <a href="http://h1.ripway.com/blargg/temp/iterated_lfsr.zip" class="postlink">iterated_lfsr.zip</a><br /><br />Here are a couple of equivalent expressions for that AY sound chip LFSR. Do you need really high iteration counts, like in the thousands?<br />n = ((n &lt;&lt; 13) ^ (n &lt;&lt; 16)) &amp; 0x10000 | (n &gt;&gt; 1); // 1 iter<br />n = n ^ (n &gt;&gt; 3) ^ ((n &amp; 0x38) &lt;&lt; 11) ^ ((n &amp; 0x7) &lt;&lt; 14); // 17 iter<br />n = n ^ (n &gt;&gt; 11) ^ (n &gt;&gt; 8) ^ ((n &amp; 0x3FF8) &lt;&lt; 3) ^ ((n &amp; 0x7) &lt;&lt; 6) ^ ((n &amp; 0xFF) &lt;&lt; 9); // 266 iter<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Apr 02, 2009 7:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hap]]></name></author>
<updated>2009-04-01T14:03:24-07:00</updated>
<published>2009-04-01T14:03:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45023#p45023</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45023#p45023"/>
<title type="html"><![CDATA[Nes_Snd_Emu-0.1.7 noise, test_apu_timers attn: blargg]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45023#p45023"><![CDATA[
not-completely-off-topic: any candidates for n = ((n &lt;&lt; 13) ^ (n &lt;&lt; 16)) &amp; 0x10000 | (n &gt;&gt; 1) ? (AY8910 noise LFSR)<br />Which program did you use?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=115">hap</a> — Wed Apr 01, 2009 2:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2009-04-01T05:21:33-07:00</updated>
<published>2009-04-01T05:21:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45008#p45008</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45008#p45008"/>
<title type="html"><![CDATA[Nes_Snd_Emu-0.1.7 noise, test_apu_timers attn: blargg]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=45008#p45008"><![CDATA[
By the way, I just wrote a function which quickly clocks the noise LFSR any number of times. At its heart, it uses algorithms which calculate the equivalent of shifting the LFSR many times in a row, found using an automated LFSR-analyzing program. For example, n ^= (n &gt;&gt; 3) ^ ((n &amp; 0xE) &lt;&lt; 11) ^ ((n &amp; 0x7) &lt;&lt; 12) is equivalent to executing n = ((n &lt;&lt; 13) ^ (n &lt;&lt; 14)) &amp; 0x4000 | (n &gt;&gt; 1) repeatedly 255 times in a row.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* Clocks NES noise LFSR 'n' count times and returns new LFSR contents. */<br />int clock_lfsr&#40; int n, int mode, int count &#41;<br />&#123;<br />    if &#40; mode &#41;<br />    &#123;<br />        count %= 93;<br />        <br />        for &#40; ; count &gt;= 9; count -= 9 &#41;<br />            n = &#40;n &gt;&gt; 9&#41; ^<br />                &#40;n &amp; 0x7FC0&#41; ^<br />                &#40;&#40;n &amp; 0x1FF&#41; &lt;&lt; 6&#41;;<br />        <br />        while &#40; --count &gt;= 0 &#41;<br />            n = &#40;&#40;n &lt;&lt; 8&#41; ^ &#40;n &lt;&lt; 14&#41;&#41; &amp; 0x4000 | &#40;n &gt;&gt; 1&#41;;<br />    &#125;<br />    else<br />    &#123;<br />        count %= 32767;<br />        <br />        for &#40; ; count &gt;= 255; count -= 255 &#41;<br />            n ^= &#40;n &gt;&gt; 3&#41; ^<br />                 &#40;&#40;n &amp; 0xE&#41; &lt;&lt; 11&#41; ^<br />                 &#40;&#40;n &amp; 0x7&#41; &lt;&lt; 12&#41;;<br />        <br />        for &#40; ; count &gt;= 15; count -= 15 &#41;<br />            n ^= &#40;n &gt;&gt; 1&#41; ^<br />                 &#40;&#40;n &amp; 0x2&#41; &lt;&lt; 13&#41; ^<br />                 &#40;&#40;n &amp; 0x1&#41; &lt;&lt; 14&#41;;<br />        <br />        while &#40; --count &gt;= 0 &#41;<br />            n = &#40;&#40;n &lt;&lt; 13&#41; ^ &#40;n &lt;&lt; 14&#41;&#41; &amp; 0x4000 | &#40;n &gt;&gt; 1&#41;;<br />    &#125;<br />    <br />    return n;<br />&#125;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Apr 01, 2009 5:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2009-03-13T14:00:29-07:00</updated>
<published>2009-03-13T14:00:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=44235#p44235</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=44235#p44235"/>
<title type="html"><![CDATA[Nes_Snd_Emu-0.1.7 noise, test_apu_timers attn: blargg]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=44235#p44235"><![CDATA[
That code doesn't precisely emulate the noise shift register when it's not making any sound. When it's running at maximum rate, it can take quite a bit of processing time. If you want full accuracy, ignore that optimization and do whatever the main loop does.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Mar 13, 2009 2:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mattmatteh]]></name></author>
<updated>2009-03-13T13:32:03-07:00</updated>
<published>2009-03-13T13:32:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=44234#p44234</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=44234#p44234"/>
<title type="html"><![CDATA[Nes_Snd_Emu-0.1.7 noise, test_apu_timers attn: blargg]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4948&amp;p=44234#p44234"><![CDATA[
i was testing out the noise channel on my emulator using blarggs test_apu_timers/noise_pitch.nes test.  the timer is right, all changes are at multiples of 0.00228 sec ( freq 15, look up table is 4068).  the first few pulses are the same as test_apu_timers/noise_pitch.nes, but then its different like my shifter is not right.<br /><br />then i looked at Nes_Snd_Emu-0.1.7/nes_apu/Nes_Oscs.cpp to see if i missed something with the shifter.   blargg, if i read the code right ..<br /><br />silenced:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// approximate noise cycling while muted, by shuffling up noise register<br />// to do: precise muted noise cycling?<br />if &#40; !&#40;regs &#91;2&#93; &amp; mode_flag&#41; &#41;<br />&#123;<br />     int feedback = &#40;noise &lt;&lt; 13&#41; ^ &#40;noise &lt;&lt; 14&#41;;<br />     noise = &#40;feedback &amp; 0x4000&#41; | &#40;noise &gt;&gt; 1&#41;;<br />&#125;</div>not silenced<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const int tap = &#40;regs &#91;2&#93; &amp; mode_flag ? 8 : 13&#41;;<br /><br />do<br />&#123;<br />     int feedback = &#40;noise &lt;&lt; tap&#41; ^ &#40;noise &lt;&lt; 14&#41;;<br />     time += period;<br /><br />     if &#40; &#40;noise + 1&#41; &amp; 2 &#41; &#123;<br />          // bits 0 and 1 of noise differ<br />          delta = -delta;<br />          synth.offset_resampled&#40; rtime, delta, output &#41;;<br />     &#125;<br /><br />     rtime += rperiod;<br />     noise = &#40;feedback &amp; 0x4000&#41; | &#40;noise &gt;&gt; 1&#41;;<br />     &#125;<br />while &#40; time &lt; end_time &#41;;<br /></div><br />if i am reading this right, you dont use the loop flag to determine the bit used, variable tap, when noise is silenced.   i thought the timer would always clock the shift register, and the loop flag would always determine which bit is used.<br /><br />above is the comment that says approximate.   seems that it would be just as easy to do the same noise shifting for silenced or not silenced.<br /><br />blargg, could you explain what you mean with "to do: precise muted noise cycling?"<br /><br />if the noise pattern is 32767 bits long, then i should see that pattern in the wave, i tried to see if i could line up my output with the timer test, but found no match when shifted in time.<br /><br />matt<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=170">mattmatteh</a> — Fri Mar 13, 2009 1:32 pm</p><hr />
]]></content>
</entry>
</feed>