<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Mesen-S - SNES Emulator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/">https://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Mesen-S - SNES Emulator</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/viewtopic.php?f=12&amp;t=18658">https://forums.nesdev.com/viewtopic.php?f=12&amp;t=18658</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>15</strong> of <strong>15</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sour</b> [ Tue Jul 16, 2019 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shifting in 1s is definitely on the weird side - really wonder why the data sheet makes no mention of it, too.  It sounds like something that people programming for that chip would need to know, heh.  But then, data sheets are also always vague about when flags are set and all that, too.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Tangent: there's a Japanese supermarket near me that plays the same song you hear on the Shougi game title screens over their loudspeaker on a loop.</div>Listening to it again, it is a very typically &quot;traditional&quot; Japanese-sounding soundtrack - I don't think I recall ever hearing it in Japan myself, though. (Mind you I've only entered a supermarket there a couple of dozen times at best :p)<br /><br />RE: putting the bios at the end of the rom files - I'd agree with tepples here, using the bytes in the SNES &quot;header&quot; that determine which chip is needed should be enough to assume that the bios might be present at the end of the file and check for it before falling back on standalone bios files (and HLE after that if it's supported).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, thank you for that. And in that case, please accept my apologies that I now do.</div>No need to apologize at all, and feel free to keep HLE support in if you want, too!  I agree having the no-intro hashes include the bios in the file would probably be the simplest way for everybody.<br /><br />Good to know the chip for X2/X3 is relatively simple, too. The Super FX, SA-1 and X2/X3 chips are essentially the ones I want to get done next, since they're also the ones that are used in the more popular games. I might try to tie up some loose ends and release a 0.2.0 version before I try to get started on those, though, since they'll probably take a while to get working.<br /><br />The ARM6 chip is probably out of scope for me - at that point it's almost like putting a raspberry pi in a NES cart and then asking emulator authors to emulate the chip + its OS. :p<br />Like you said, I doubt anybody actually wants to play that particular game (and if they do, they can just use higan).  Someone in the future will inevitably say &quot;Mesen-S sucks, it doesn't work with X game that works on Y emulator&quot;, but after 290+ NES mappers, I've gotten used to it!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FitzRoy</b> [ Tue Jul 16, 2019 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Millions of people have downloaded ps1 and ps2 firmwares and placed them in the emulator's firmware dir. It ain't hard and it keeps the data distinct. Blobbing stuff together just makes it harder to isolate checksum and size info, it also lowers awareness that it's even there.<br /><br />I mean, just take this simple scenario. I dump my SMK cart. Its checksum is xxxxxxx. I compare it to the existing dump in no intro. Turns out the csum is different. Do I have a new dump? Bad dump? Did I forget to remove the copier header? Suddenly something that should be simple even for the layperson becomes a chore involving research and file splitting. Just to verify the part of a file thats actually dumpable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>creaothceann</b> [ Tue Jul 16, 2019 4:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, heuristics can get commercial games working, and adding/detecting firmware is possible. But internal headers don't have to contain valid data (e.g. prototypes) except for the vectors, and firmware can't be stacked indefinitely. These solutions needlessly (imo) put a lid on future extensibility.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Jul 16, 2019 4:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FitzRoy wrote:</div><div class="quotecontent">Millions of people have downloaded ps1 and ps2 firmwares and placed them in the emulator's firmware dir. It ain't hard and it keeps the data distinct. Blobbing stuff together just makes it harder to isolate checksum and size info, it also lowers awareness that it's even there.<br /><br />I mean, just take this simple scenario. I dump my SMK cart. Its checksum is xxxxxxx. I compare it to the existing dump in no intro. Turns out the csum is different. Do I have a new dump? Bad dump? Did I forget to remove the copier header? Suddenly something that should be simple even for the layperson becomes a chore involving research and file splitting. Just to verify the part of a file thats actually dumpable.</div><br />This, a thousand times over.  What is it with certain people and file &quot;formats&quot;/screwing with files?  Stop it already.<br /><br />Other emulators -- <a href="https://github.com/SourMesen/Mesen/blob/master/GUI.NET/Dependencies/MesenDB.txt" class="postlink">example: Mesen</a> (not Mesen-S, but could certainly be added to Mesen-S) -- already have the equivalent of databases of MD5/SHA1 hashes of ROMs for identification.  There's your identification model, re: heuristics.  For these titles, require an external BIOS/FW/whatever file, selectable somewhere else in the UI, or even just a compile-time hard-coded filename that must exist in the same directory as the ROM (I don't care how it's done) that correlates with said game.  Famicom Disk System/FDS BIOS is a good example: when loading an FDS file, Mesen prompts you to the path of the FDS BIOS filename.<br /><br />The number of games requiring this on the SNES has got to be astoundingly small -- I am guessing in the extremely low 2-digit range.  These games are thus the exception to the rule, not the rule itself.  There were 1758 official SNES/SFC games released during its lifetime; so 20 games requiring this is literally 1.1% of all the games released for the system.  It's not worth it.  Just think about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sour</b> [ Tue Jul 16, 2019 4:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As usual, the mere mention of file formats ends up with everybody giving their (incompatible) personal opinions on the matter. No surprise here :p<br />I've never overly cared too much about file formats (and am not interested in the endless arguments about them), I'll support things if they exist and are helpful for the end user, and won't if they're not, and that's about it.<br /><br />That being said, let's not end up with another page of file format discussion like what already happened at the beginning of the thread - this is not what this thread is for. Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jul 16, 2019 6:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The Super FX, SA-1 and X2/X3 chips are essentially the ones I want to get done next</div><br /><br />I'll just warn you that you're going to become very cynical and jaded when people here complain about the difficulty of the MMC5 once you implement those two. Especially the SA-1. Nintendo threw the kitchen sink at the SA-1, and then games barely used it. There's a good half-dozen major features I try to emulate, but not a single commercial game uses them, so my implementations are likely wrong (eg HVIRQs ... how does it keep track of the H/V counters without H/Vblank pins?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sour</b> [ Thu Jul 18, 2019 6:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just released version <a href="https://github.com/SourMesen/Mesen-S/releases/tag/0.2.0" class="postlink">0.2.0</a><br />This version is mostly accuracy/timing fixes and a lot of debugger tool improvements (+ DSP support).<br />Many thanks to everybody in this thread for helping out!  I think I've had more help fixing emulation bugs on Mesen-S in 3 months than I have on Mesen in 3 years :p<br /><br />Next version will probably be focused on adding support for the missing chips and peripherals (e.g multitap, super scope).  Might also try to get around to adding options like removing the sprite limit and maybe try to implement the same kind of CPU overclocking that NES emulators use and see how that works out.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Especially the SA-1. Nintendo threw the kitchen sink at the SA-1, and then games barely used it. There's a good half-dozen major features I try to emulate, but not a single commercial game uses them,</div>That's actually good to know - thanks! This makes it sound like the most painful part of the SA-1 is integrating it with the rest of the system in terms of bus accesses, etc.?  Since the CPU core is essentially identical, I might try to do the SA-1 first (rather than the Super FX) - that way I can focus on figuring out how to properly integrate it with the rest of the code &amp; managing bus accesses, without having to worry about whether or not my problem is caused by a CPU bug or something else.<br /><br />But for now, I'm taking a step back from this for a few days - I need a break!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Jul 18, 2019 8:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Just released version 0.2.0<br />This version is mostly accuracy/timing fixes and a lot of debugger tool improvements (+ DSP support).</div><br /><br />Congratulations! Looks great :D<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Many thanks to everybody in this thread for helping out! I think I've had more help fixing emulation bugs on Mesen-S in 3 months than I have on Mesen in 3 years :p</div><br /><br />It's seriously long overdue that we had a fresh face in SNES emulation. I hope you'll stick around long-term and that we'll find lots of new hardware discoveries out together ^-^<br /><br />The more we figure out about the hardware, and the more quality open-source implementations we have, the easier it'll get for more new emudevs to enter SNES emulation and quickly get up to speed, as is the case with the NES scene currently.<br /><br />I dream of the day we have a drop-in PPU core similar to blargg's DSP that has the accuracy we have in NES emulators. I'll seriously consider the SNES well-preserved and be able to retire feeling content once we reach that point.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and maybe try to implement the same kind of CPU overclocking that NES emulators use and see how that works out.</div><br /><br />I'm interested in this as well. The obvious trick of adding more Vblank scanlines would bias the timing (frame rate) and thus require us to clock the CPU faster to compensate, which may interfere with timed raster effects as with Air Strike Patrol and lots of buggy games that overshoot blanking periods. Only making the CPU faster during Vblank lines is likely the best strategy, right?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This makes it sound like the most painful part of the SA-1 is integrating it with the rest of the system in terms of bus accesses, etc.?</div><br /><br />The most painful for performance, yeah. Snes9X came up with an approximation that's not too bad if you want to focus on performance. But if you're going for all-out accuracy (^_^) then a different approach will be needed.<br /><br />This is the gold standard test ROM for it: <!-- m --><a class="postlink" href="https://github.com/VitorVilela7/SnesSpeedTest">https://github.com/VitorVilela7/SnesSpeedTest</a><!-- m --><br /><br />The design of the SA1 is ingenius and evil: the CPU cannot be stalled because the SNES CPU has no concept of external wait states (/DTACK on the Genesis, for instance.) So instead, the SA1 detects when the SA1 CPU tries to access ROM, BWRAM, or IRAM while the SNES CPU is accessing it, and will insert wait states into the SA1 CPU. The obvious million dollar question is, what happens if the SA1 is in the middle of reading from one of those when the CPU comes in to try? As far as I can tell, the answer is it just lets it finish doing the read and somehow there's enough headroom to let everything still work.<br /><br />The way I do it is for every CPU read/write to set a &quot;MAR&quot; (memory address register) variable to hold the current state of the address bus pins. This also has to be done for DMA/HDMA accesses. It took a whole lot of trial and error to get the best results in Vitor's test ROM, but I still don't have it perfect.<br /><br />Key findings:<br /><br /><!-- m --><a class="postlink" href="https://github.com/byuu/higan/blob/master/higan/sfc/cpu/memory.cpp#L11">https://github.com/byuu/higan/blob/mast ... ry.cpp#L11</a><!-- m --><br />It doesn't seem? to invalidate the address bus pins on idle cycles (but much more likely, the reason is that idle cycles tend to set the address bus to the current program counter, which is still going to stall out the SA1 because it doesn't seem to recognize it's an idle cycle.)<br /><br /><!-- m --><a class="postlink" href="https://github.com/byuu/higan/blob/master/higan/sfc/cpu/timing.cpp#L30">https://github.com/byuu/higan/blob/mast ... ng.cpp#L30</a><!-- m --><br />This one's going to suck to emulate. Past logic analyzer traces done on SNES refresh show it actually looks like 5-cycle read + 3-cycle idle, repeated five times for 40 cycles total. Just having that pulse run for 40 clocks gave me less precise timing matches than breaking it into five sections. I rounded to 6-2 x5 because everything else steps by 2, and even forcing 5-3 at a good speed hit (have tp step the IRQ counter at 21.4MHz instead of 10.7MHz) didn't improve the results any. It turns out that the SA1 carts connect the DRAM refresh pin to the SA1 CPU, and it really does affect the timing.<br /><br /><!-- m --><a class="postlink" href="https://github.com/byuu/bsnes/blob/master/bsnes/sfc/coprocessor/sa1/rom.cpp#L2">https://github.com/byuu/bsnes/blob/mast ... rom.cpp#L2</a><!-- m --><br />To avoid destroying performance completely, I added a setting to bypass the memory address stall and synchronizations on ROM, BWRAM, IRAM accesses. This of course is not accurate and fails Vitor's test, but it also kind of acts like an SA1 overclock so ... call it a feature! ^-^;;<br /><br />Once you've implemented this let me know, and then I'll dive into the nitty gritty stuff I haven't fully been able to figure out yet :3<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I might try to do the SA-1 first (rather than the Super FX)</div><br /><br />I went the same route. It's a good strategy even if the SA1 ends up being more complex as a whole.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But for now, I'm taking a step back from this for a few days - I need a break!</div><br /><br />It's well earned. No rush, see you when you're back.<br /><br />...<br /><br />Side note, I just fixed my own bug in Donkey Kong Country 2, it appears the game is messing with sprite registers mid-scanline? Didn't dig too deeply, but I had to revert my tile/item caching so that one line renders from the previous line's cache. Might be worth taking a look with Mesen-S just to make sure the sprite timing changes didn't affect it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sour</b> [ Fri Jul 19, 2019 11:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks!<br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Only making the CPU faster during Vblank lines is likely the best strategy, right?</div>On the NES, the overclocking used is to add scanline after the end of the picture but BEFORE vblank/nmi.<br />This means that games have as much time as normal during NMI/vblank, meaning timed coded at the top of the screen, for example, will still occur at the correct timing. During those scanlines, the APU is suspended so from the APU's point of view, nothing changes.<br />This gives the game more time to finish up calculations before NMI occurs, and the majority of games appear to be compatible with this on the NES. Some people have done a lot of testing with as many as 1000 extra scanlines before NMI with no adverse effect on a lot of games - 1000 extra lines is usually enough to remove all traces of slowdown in all games.<br />I imagine doing the same on the SNES (e.g adding scanlines between scanlines 224 &amp; 225 and pausing the SPC during them) would probably work out relatively well in most scenarios - but games with really tight SPC timings might potentially end up locking up?<br />You know, the more I think about it, the more I think it's actually pretty easy to implement - I'll give it a try soon and see how that works out :p<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is the gold standard test ROM for it: <!-- m --><a class="postlink" href="https://github.com/VitorVilela7/SnesSpeedTest">https://github.com/VitorVilela7/SnesSpeedTest</a><!-- m --></div>Thanks for the SA1 info and the link! Hopefully it'll be useful to test basic SA1 behavior at the start when all the games refuse to boot. I think I have a pretty decent idea where to start, just need to figure out how I want to handle having 2 different CPUs with 2 different memory mappings (in terms code design).<br />One question though, does bsnes run the SA1 1 cycle at a time like it does for the SPC? I'm guessing it does? But in that case, my next question is, does anything break if you don't? e.g if I just run a full SA1 instruction and then wait X master cycles before running the next, should I expect games to break?<br /><br />RE: DKC2, it seems to be working properly on my end, as far as I can tell - any specific part of the game that had issues? I took a look in the event viewer, and it doesn't seem like it's writing to the OAM registers outside of vblank, as far as I can tell.<div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=15798&amp;mode=view"><img src="./download/file.php?id=15798&amp;t=1" alt="dkc2.png" /></a><br />
			<span class="gensmall">dkc2.png [ 57.99 KiB | Viewed 520 times ]</span>
		

		<br />
	</div>The HDMA seems to be mostly to adjust BG2's scroll offsets and the only OAM writes I could find at part of the PPU writes at the bottom.  I might just be looking at the wrong part of the game, though?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sour</b> [ Fri Jul 19, 2019 4:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sour wrote:</div><div class="quotecontent">I'll give it a try soon and see how that works out </div>So, did a quick implementation of overclocking as I was describing it.  So far it seems to be working pretty well - depending on the game, it looks like some games prefer having the extra scanlines before NMI and others at the end of regular vblank (i.e after NMI).<br /><br />I've mostly tested with 1000 extra scanlines (to be a little extreme in the timing changes) and it seems to fix the slowdowns in Gradius 3, Super Ghouls &amp; Ghosts and Super R-Type.  The emulator only runs at around 100fps (with some frame skipping) with that much overclocking, though.<br /><br />Some games will lock up if putting the lines before NMI, others will lock up if putting the lines after NMI, but it seems like the majority of games actually run fine in at least one of the 2 modes.  Obviously, CPU &quot;timed&quot; code like the triforce animation in Zelda: LTTP is affected by it. Putting 1000 scanlines after NMI in that case makes it go super fast and kinda screws up the last bit of the animation, too.  1000 lines before NMI speeds it up a little bit, but beyond that no difference. A.S.P and even games that have been picky on my SPC timings so far (e.g Tales of Phantasia, Rendering Ranger R2, Illusion of Gaia) seem to work with 1000 extra scanlines, too.  Some do break, though - Super Metroid stops booting at ~440 lines after NMI (and less than that when before NMI).<br /><br />Overall, though, this was pretty easy to implement and doesn't really add any overhead to regular emulation.  The SNES itself can already change when the NMI occurs due to overscan mode, so having a couple more settings on top of this and recalculating the values once per frame doesn't change much.<br /><br />If anybody wants to play with it, it's in Options-&gt;Emulation-&gt;Overclocking.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Jul 19, 2019 6:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mesen-S - SNES Emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I imagine doing the same on the SNES (e.g adding scanlines between scanlines 224 &amp; 225 and pausing the SPC during them) would probably work out relatively well in most scenarios - but games with really tight SPC timings might potentially end up locking up?</div><br /><br />It would break streaming audio games like Tales of Phantasia, Breath of Fire II (d4s), etc. Not a large portion of the library but still unfortunate. Well in any case, all we can do is implement things, have people try it out, and add refinements.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">One question though, does bsnes run the SA1 1 cycle at a time like it does for the SPC? I'm guessing it does? But in that case, my next question is, does anything break if you don't? e.g if I just run a full SA1 instruction and then wait X master cycles before running the next, should I expect games to break?</div><br /><br />With libco (my cooperative threading library), I can switch from one CPU to another at any point within any function at any call stack level. So if you turn on that &quot;fast sync&quot; hack I mentioned, the SA1 can execute many instructions before the SNES CPU starts running again, and vice versa.<br /><br />The thing that hurts libco with the SA1 is that both the SNES CPU and SA1 can simultaneously access BWRAM and IRAM, which are of course volatile, and ROM can be dynamically remapped. So in effect, for perfect synchronization you would have to synchronize to the other component every time ROM, BWRAM, IRAM, and I/O registers were accessed, which is almost every cycle.<br /><br />So essentially, yes, bsnes' SA1 core is cycle accurate. But Snes9X's SNES CPU and SA1 cores are both opcode-based, and to my knowledge it does not break any games. You won't be able to perfectly pass Vitor's speed tests, but you may consider it a sacrifice worth making for performance and sanity. If not, you will need to have a cycle-granularity state machine, at least for your SA1 CPU core. And truth be hold, I'm not entirely certain you can completely pass his test with just cycle-based granularity, I guess we'd find out though ^-^; (you -should- be able to ...)<br /><br />What you're going to find out and hate about the SA1 is, in spite of all this power and all of these cool functions, games barely use the chip. It feels more like they put it in there for anti-piracy than any other reason, and it's rather disappointing to emulate.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">any specific part of the game that had issues?</div><br /><br />Every level had flickering sprites, hahah. It looks good, so then there's no issue with your sprite implementation, perfect! :D<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">it doesn't seem like it's writing to the OAM registers outside of vblank, as far as I can tell.</div><br /><br />... now that is very weird to hear. I guess I should have researched more instead of reverting my one-line item/tile cache design.<br /><br />I'll look into it more when I have time and then talk about it again later. Thanks for verifying!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Putting 1000 scanlines after NMI in that case makes it go super fast and kinda screws up the last bit of the animation, too.</div><br /><br />Call that one ZSNES mode? ^__^<br /><br />Anyway, sounds good! I'll give it some time to see how it goes for your users before implementing it :3

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>15</strong> of <strong>15</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>