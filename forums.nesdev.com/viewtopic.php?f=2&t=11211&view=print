<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - lazy65 - a ca65 pre-parser</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">lazy65 - a ca65 pre-parser</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11211">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11211</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Fri May 02, 2014 6:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey folks,<br /><br />I got fed up with having to write header files and with ca65's limitations when working with scopes so I created this little tool.<br />This is what it allows you to do:<br /><br />File: Module.z<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;CODE&quot;<br />func1:<br /><br />.proc func2<br />&nbsp; &nbsp;var1: .reszp 1<br />.endproc<br /><br />.macro someMacro arg1, arg2<br />.endmacro<br /></div><br />File: main.z<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.use Module<br /><br />main:<br />&nbsp; &nbsp;jsr Module.func1<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta Module.func2.var<br />&nbsp; &nbsp;jsr Module.func2<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;Module.someMacro 1, 2<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&gt; lazy65 Module<br />&gt; lazy65 main<br /></div><br />This will generate ca65-compatible header and source files that you can integrate into your build process. However, a generic build script is also included which can take care of everything for you.<br /><a href="https://www.python.org" class="postlink">Python 2</a> is required.<br /><br />==============<br /><strong>DOWNLOAD</strong><br /><strong><a href="http://morphcat.de/files/lazy65-0.1.3.zip" class="postlink">lazy65 V0.1.3 (latest)</a></strong><br /><a href="http://morphcat.de/files/lazy65-0.1.2.zip" class="postlink">lazy65 V0.1.2</a><br /><a href="http://morphcat.de/files/lazy65-0.1.1.zip" class="postlink">lazy65 V0.1.1</a><br /><a href="http://morphcat.de/files/lazy65-0.1.0.zip" class="postlink">lazy65 V0.1.0</a><br />==============<br /><br /><strong>Planned features</strong><br /><ul>- python macros (.pymacro)</ul><ul>- automatic generation of linker config files for common mappers</ul><ul>- maybe a couple of extra commands that make life easier</ul><br />The tool is still in a somewhat early stage and currently identifies and replaces symbols in a rather <em>lazy</em> way which may result in cryptic error messages, I'm hoping to fix that in a later version. If you decide to give it a try, please let me know if you encounter any problems. There may be unresolved bugs with certain ca65 commands (.struct?) that need fixing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Fri May 02, 2014 7:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I did a kind of hacky thing with macros to scope macros that are a part of a header interface:<br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=112437#p112437">viewtopic.php?p=112437#p112437</a><!-- l --><br /><br />Not sure if I will keep it, but the idea isn't too messy and it does work, with the only downside being you can't access a variable constant, as in:<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">myscope::foo .set 1</tt><br />Since it will be interpreted as a macro call. Also, if there is an error in a macro call you'll get a couple of extra error messages as the errors trace through the macro calls. (You may need higher verbosity setting to see this.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat May 03, 2014 4:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Seems cool.<br /><br />I don't know if I'm in the minority here, but when I installed Python on Windows, it didn't by default associate .py files to run with Python. So just typing &quot;lazymake.py&quot; doesn't work here (I have .py associated with a text editor).<br /><br />One way to fix that could be to provide lazy65.cmd and lazymake.cmd (for Windows) and lazy65 and lazymake shell scripts (for *nix) in the base directory. Then a simple &quot;lazy65&quot; or &quot;lazymake&quot; could be used to invoke the scripts.<br /><br />lazy65.cmd and lazymake.cmd could look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">@echo off<br />python %~dpn0.py %*<br /></div><br />Not sure what the *nix counterparts would be. Also need to change LAZY65 in lazymake.py from lazy65.py to lazy65. I think I may have missed some other place where it tries to run lazy65.py, because when I run lazymake, lazy65.py opens in my text editor. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Aaaand, not sure if I just messed something up with my changes, but when I run lazymake, it occasionally picks a different compilation order and fails to compile the &quot;basic&quot; example.<br /><br />Here's a run that failed (didn't compile Graphics before main):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C:\Users\f\Downloads\lazy65-0.1.0\examples\basic&gt;lazymake<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Global<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Module<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Graphics.Sprite<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Graphics.Tile<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; main<br />Traceback (most recent call last):<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-0.1.0\lazy65.py&quot;, line 92, in &lt;module&gt;<br />&nbsp; &nbsp; main()<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-0.1.0\lazy65.py&quot;, line 80, in main<br />&nbsp; &nbsp; lines = parser.parse() #2nd pass<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-0.1.0\src\tempy.py&quot;, line 46, in parse<br />&nbsp; &nbsp; self.lineCallback()<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-0.1.0\lazy65.py&quot;, line 20, in lineCallback<br />&nbsp; &nbsp; asm.parse()<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-0.1.0\src\Assembler.py&quot;, line 185, in parse<br />&nbsp; &nbsp; self.command(tok.text)<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-0.1.0\src\Assembler.py&quot;, line 385, in command<br />&nbsp; &nbsp; self.importModule(moduleName, scopeName, True, True)<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-0.1.0\src\Assembler.py&quot;, line 115, in importModule<br />&nbsp; &nbsp; self.importSingleModule(moduleName, scopeName, generateIncludes)<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-0.1.0\src\Assembler.py&quot;, line 85, in importS<br />ingleModule<br />&nbsp; &nbsp; with open(symfile,'rb') as f:<br />IOError: &#91;Errno 2&#93; No such file or directory: 'obj/Graphics.sym'<br />lazymake.py: Error 1<br /></div><br />And here's a one that succeeded (I did lazymake clean inbetween):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C:\Users\f\Downloads\lazy65-0.1.0\examples\basic&gt;lazymake<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Global<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Module<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Graphics.Sprite<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Graphics.Tile<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; Graphics<br />lazy65 -s &quot;src&quot; -o &quot;obj&quot; main<br />ca65 &quot;obj/Global.s&quot; -o &quot;obj/Global.o&quot;<br />ca65 &quot;obj/main.s&quot; -o &quot;obj/main.o&quot;<br />ca65 &quot;obj/Module.s&quot; -o &quot;obj/Module.o&quot;<br />ca65 &quot;obj/Graphics/Sprite.s&quot; -o &quot;obj/Graphics/Sprite.o&quot;<br />ca65 &quot;obj/Graphics/Tile.s&quot; -o &quot;obj/Graphics/Tile.o&quot;<br />ca65 &quot;obj/Graphics.s&quot; -o &quot;obj/Graphics.o&quot;<br />ld65 -o &quot;basic.nes&quot; -C linker.cfg &quot;obj/Global.o&quot; &quot;obj/main.o&quot; &quot;obj/Module.o&quot; &quot;ob<br />j/Graphics/Sprite.o&quot; &quot;obj/Graphics/Tile.o&quot; &quot;obj/Graphics.o&quot;<br />basic.nes: Build complete<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Sat May 03, 2014 1:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">I did a kind of hacky thing with macros to scope macros that are a part of a header interface:<br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=112437#p112437">viewtopic.php?p=112437#p112437</a><!-- l --></div><br />Oh, I never checked that topic again. Interesting. A bit of nasty boilerplate code, but still, it goes to show how powerful ca65 really is.<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">lazy65.cmd and lazymake.cmd could look like this...</div><br />Thanks, added them!<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Aaaand, not sure if I just messed something up with my changes, but when I run lazymake, it occasionally picks a different compilation order and fails to compile the &quot;basic&quot; example.</div><br />It was most likely a race condition with the multi-threaded compilation going on. Anyway, thanks for your feedback, I added dependency file generation and based the build system around it which will hopefully eliminate these errors.<br /><br />Updated download link in first post.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat May 03, 2014 2:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Trivial error on line 85 in Assembler.py:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C:\Users\f\Downloads\lazy65-011\examples\basic&gt;lazymake<br />lazy65 --sym-only -s &quot;src&quot; -o &quot;obj&quot; Module<br />Traceback (most recent call last):<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-011\lazy65.py&quot;, line 8, in &lt;module&gt;<br />&nbsp; &nbsp; from src.Assembler import Assembler<br />&nbsp; File &quot;C:\Users\f\Downloads\lazy65-011\src\Assembler.py&quot;, line 85<br />&nbsp; &nbsp; raise tempy.Error('Could not create symbol file for module '+moduleName+')<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;^<br />SyntaxError: EOL while scanning string literal<br />lazymake.py: Error 1<br /></div><br /><br />And if you want to add *nix support, this &quot;npm&quot; shell script from node.js may be a good template to base &quot;lazy65&quot; and &quot;lazymake&quot; on:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#!/bin/sh<br /><br />basedir=`dirname &quot;$0&quot;`<br /><br />case `uname` in<br />&nbsp; &nbsp; *CYGWIN*) basedir=`cygpath -w &quot;$basedir&quot;`;;<br />esac<br /><br />if &#91; -x &quot;$basedir/node.exe&quot; &#93;; then<br />&nbsp; &quot;$basedir/node.exe&quot; &quot;$basedir/node_modules/npm/bin/npm-cli.js&quot; &quot;$@&quot;<br />else<br />&nbsp; node &quot;$basedir/node_modules/npm/bin/npm-cli.js&quot; &quot;$@&quot;<br />fi<br /></div><br />EDIT: In hindsight, I'm not sure if this script is the same one that ships with the *nix installations of node.js.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Sat May 03, 2014 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Woops, fixed.<br />Cool. I am going to look into that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat May 03, 2014 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />*nix support <em>should</em> just involve having the right #! line in the original python script... and preferably not having &quot;.py&quot; in the command name, which is probably best solved with symlinks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat May 03, 2014 4:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">*nix support <em>should</em> just involve having the right #! line in the original python script... and preferably not having &quot;.py&quot; in the command name, which is probably best solved with symlinks.</div><br />How do you plan to put a symlink in a zip file?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat May 03, 2014 4:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Zip doesn't preserve the executable bit either, so it already requires finessing: zip is poorly suited to unixy things. The options are &quot;accept having .py at your command line&quot;, &quot;use a different compressor&quot; (tgz, 7z, rar), or &quot;rename the files to not end with .py&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat May 03, 2014 5:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Zip doesn't preserve the executable bit either</div><br />True.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Sun May 11, 2014 9:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Updated. Fixed a couple of bugs and added the custom commands .reszp and .resbss.<br /><br />This:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc func<br />&nbsp; &nbsp; .segment &quot;ZEROPAGE&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; localvar: .res 1<br />&nbsp; &nbsp; .segment &quot;CODE&quot;<br />&nbsp; &nbsp; rts<br />.endproc<br /></div><br />can now be written like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc func<br />&nbsp; &nbsp; localvar: .reszp 1<br />&nbsp; &nbsp; rts<br />.endproc<br /></div><br />.reszp and .resbss use the ca65 commands .pushseg and .popseg when translated so the segment you are in will be automatically restored.<br /><br />I also got rid of the .py extensions so now the tools can be called the same way in both Windows and Linux (by just typing &quot;lazy65&quot; or &quot;lazymake&quot;).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sun May 11, 2014 12:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: lazy65 - a ca65 pre-parser</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I like the res command. I did that too (macros):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;; Example of declaring variables using .struct syntax.<br />&nbsp; &nbsp; &nbsp; &nbsp; resZP { \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foo&nbsp; &nbsp; &nbsp;.byte ,&nbsp; &nbsp; &nbsp;\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bar&nbsp; &nbsp; &nbsp;.word ,&nbsp; &nbsp; &nbsp;\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; test&nbsp; &nbsp; .addr 6&nbsp; &nbsp; &nbsp;\<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; resBSS { myVar&nbsp; .byte, yourVar&nbsp; .addr 4 }<br />&nbsp; &nbsp; &nbsp; &nbsp; resBSS&nbsp; baz&nbsp; &nbsp; &nbsp;.byte<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>