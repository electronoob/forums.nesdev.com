<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How to compare to a value larger than $ff?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How to compare to a value larger than $ff?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7922">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7922</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 6:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How to compare to a value larger than $ff?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This question is a lot different than my other questions, so I figured a new topic would be better, but it's basically just the title, how do I compare to a value larger than $ff?  I'm loading my background in, and it's saved in a label, backgrounds: and has all the backgrounds stored in .db's.  The only problem, is that for the full screen, there is 32x32, 8x8 tiles, which is 1024 bytes of data..  Here's how I'm loading the backgrounds:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadBackgrounds:<br />&nbsp; LDA $2002<br />&nbsp; LDA #$20<br />&nbsp; STA $2006<br />&nbsp; LDA #$00<br />&nbsp; STA $2006<br />&nbsp; LDX $00<br />LoadBackgroundsLoop:<br />&nbsp; LDA backgrounds, x<br />&nbsp; STA $2007<br />&nbsp; INX<br />&nbsp; CPX #$FF ; Here's where I need to compare to 1024, or $0400, but it only allows 1 byte to be compared to<br />&nbsp; BNE LoadBackgroundsLoop</div>
<br />So, is there a better to do this, or is there any to compare to a 2 byte value?
<br />How do you guys normally load the background?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 29, 2011 6:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want to access an array bigger than 256 bytes, you first need to store the starting address on zero page (lda #&lt;label sta src_addr lda #&gt;label sta src_addr+1). You may want to load the number of 256-byte "pages" into X, which in the case of an uncompressed nametable is four (ldx #4). Then use the (d),Y addressing mode and step through each page with Y. When Y wraps around to zero (hint: your loop will use a BNE instruction), increase the high byte of the address (inc src_addr+1) and decrease X until you've gone through all four pages.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 7:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ahhh I think I understand that, like a double for loop? But I may have trouble translating that to code..  Here's my attempt
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadBackgroundsLoopX:<br />&nbsp; LDA backgrounds, x ; how do I add 1 to the high byte here?<br />&nbsp; STA $2007<br />&nbsp; INX<br />&nbsp; CPX #$FF<br />&nbsp; BNE LoadBackgroundsLoopX<br />LoadBackgroundsLoopY:<br />&nbsp; DEY<br />&nbsp; LDX #$00<br />&nbsp; CPY #$00<br />&nbsp; BNE LoadBackGroundsLoopX</div>
<br />But that's just going to load the first 256 bytes 4 times..  Any more tips? I'd still like to figure this out without someone handing me the code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 29, 2011 7:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You need to store the address of 'backgrounds' in a pointer on zero page, and then you need to look at what the (d),y indirect addressing mode does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jun 29, 2011 7:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Since the 6502 is an 8-bit CPU, it can only manipulate 8 bits (which can hold values from 0 to 255) at a time. If you need numbers larger than that, you have to work with the individual bytes that form that larger number. For example, if you want to compare 2 16-bit numbers, you have to first compare the high byte and then the low byte.
<br />
<br />But in this particular case, it's not a 16-bit compare you are looking for. Like tepples said, the 6502 has a very useful addressing mode that is meant to allow access data larger than 256 bytes. For this you need a pointer and an index. The pointer is stored in zero page RAM ($0000-$00FF), and the index is the Y register.
<br />
<br />A pointer is a 16-bit value that indicates an address. Even though the 6502 can't manipulate 16-bit values internally, it can access 16-bit pointers in RAM. To read data using a pointer you need the instruction "<strong>LDA (Pointer), Y</strong>". When the CPU sees this instruction, it will go to the ZP location where the variable "Pointer" is, it will see what address is stored there and will then look for your data in that address. Y is used as an offset into that data, so you can access up to 256 bytes starting from the address indicated by the pointer.
<br />
<br />If you need to access more than 256, just modify the pointer. By incrementing the high byte of the pointer you effectively add 256 to it, which will allow you to read 256 more bytes. If you keep doing this you can access as many bytes as you want.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 8:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So like..
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.rsset $0000<br />pointer .rs 2 ; it needs 2 bytes right?<br /><br />LDA #&lt;backgrounds ; low byte<br />STA pointer<br />LDA #&gt;backgrounds ; high byte<br />STA pointer + 1 ; now pointer is background's full address<br />LDX #$04<br />LDY #$00<br /><br />BackgroundLoop:<br />&nbsp; LDA &#40;pointer&#41;, y ; y is the low byte<br />&nbsp; STA $2007<br />&nbsp; INY<br />&nbsp; CPY #$FF ; increase until it hits $FF<br />&nbsp; BNE BackgroundLoop<br />DecX:<br />&nbsp; INC pointer +1 ; increase the high byte<br />&nbsp; LDY #$00 ; reset the low byte<br />&nbsp; DEX ; and decrese x by one<br />&nbsp; CPX #$00 ; check if X is down to 0 yet &#40;after 4 loops&#41;<br />&nbsp; BNE BackgroundLoop<br /></div>
<br />Ignore the comments, I was just figuring it out one piece at a time.
<br />Man my brain hurts after that.. haha.  I think that would work though, right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jun 29, 2011 8:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Canite wrote:</div><div class="quotecontent">I think that would work though, right?</div>
<br />Almost! You got the right idea, there are just a couple of logic issues:
<br />
<br />1. The "CPY #$FF" is not necessary. If you use it, you will actually copy 255 bytes instead of 256. Just let Y wrap back to $00 with the INY, and because the Z flag will be set the branch will not happen, so there's no need to compare anything. As a bonus you also don't need to reset Y later, as it will already be 0.
<br />
<br />2. Similar to the above, you don't need the "CPX #$00". This isn't an error though, it's just redundant. If the result of any operation is zero, the Z flag will be set, so there's no need to compare against #$00.
<br />
<br />The status flags are kinda mystical for people who have never programmed in assembly before (for me at least that was one of the weirdest things). Just keep in mind that a lot of instructions modify the flags (specially the ones that manipulate values in any way), and after these modifications you can use the branch instructions to make decisions about what to do next. You don't have to "compare" all the time, as most of the time the operations themselves will set the flags for you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 8:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">2. Similar to the above, you don't need the "CPX #$00". This isn't an error though, it's just redundant. If the result of any operation is zero, the Z flag will be set, so there's no need to compare against #$00.</div>
<br />
<br />Ah, I didn't even know you could do that, thanks.  But when I try to compile it, NESASM throws some errors at me :/  It says that the LDA #&lt;backgrounds part is an unknown instruction.  Is my syntax wrong?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jun 29, 2011 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NESASM uses weird syntax. All other assemblers use <strong>LDA (Pointer), Y</strong>, while NESASM uses <strong>LDA [Pointer], Y</strong>. For accessing the low and high bytes of a value you have to use <strong>LDA #LOW(Value)</strong> and <strong>LDA #HIGH(Value)</strong>, I think. NEASM is realy weird.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 8:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">NESASM uses weird syntax. All other assemblers use <strong>LDA (Pointer), Y</strong>, while NESASM uses <strong>LDA [Pointer], Y</strong>. For accessing the low and high bytes of a value you have to use <strong>LDA #LOW(Value)</strong> and <strong>LDA #HIGH(Value)</strong>, I think. NEASM is realy weird.</div>
<br />
<br />Gah, I've tried everything, always gives an error..
<br />I have this now:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #LOW&#40;backgrounds&#41; ; low byte <br />STA pointer <br />LDA #HIGH&#40;backgrounds&#41; ; high byte <br />STA pointer + 1 ; now pointer is background's full address <br /></div>
<br />but it still gives an error?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jun 29, 2011 8:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Did you also change LDA (pointer), Y to LDA [pointer], Y? It should be working...
<br />
<br />EDIT: Maybe NESASM doesn't support the "pointer + 1" part? Have you tried declaring your pointer as two individual HI and LO bytes? Or putting "pointer + 1" between parenthesis? I really can't see what's wrong now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 9:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Did you also change LDA (pointer), Y to LDA [pointer], Y? It should be working...</div><br />Yeah, I did, here's there error<br /><img src="http://i.imgur.com/uCG3H.png" alt="Image" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">EDIT: Maybe NESASM doesn't support the "pointer + 1" part? Have you tried declaring your pointer as two individual HI and LO bytes? Or putting "pointer + 1" between parenthesis? I really can't see what's wrong now.</div>
<br />If I do it this way, what will I put in in the LDA (pointer), y part?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Jun 29, 2011 9:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Time to switch to ASM6?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Time to switch to ASM6?</div>
<br />
<br />I guess? Haha.
<br />I just started learning assembly yesterday, so I didn't really want to be switching around like that.. How different are assemblers from each other?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Jun 29, 2011 10:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Canite wrote:</div><div class="quotecontent"><img src="http://i.imgur.com/uCG3H.png" alt="Image" /><br /></div><br /><br />My guess? You didn't indent those instructions.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sta pointer+1<br /></div><br />is different than<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;sta pointer+1;Note the space before the instruction<br /></div><br /><br />nesasm gives unknown instruction when you don't indent with whitespace characters. There's no other reason I can think of why STA pointer wouldn't work.<br />Edit: <br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Did you also change LDA (pointer), Y to LDA [pointer], Y? It should be working...</div>
<br />As of the latest nesasm, either of those works fine.
<br />Edit again several months later: Both ASSEMBLE fine, but it with paranthesis it gives the wrong addressing mode. Sorry, I can be so confident when I'm wrong.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>