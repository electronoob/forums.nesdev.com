<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Some advice of DSP here...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/">https://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Some advice of DSP here...</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/viewtopic.php?f=3&amp;t=12925">https://forums.nesdev.com/viewtopic.php?f=3&amp;t=12925</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jul 04, 2015 8:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Depends on exactly how the balance of math works. Lowpass filter design usually has parameters like &quot;highest frequency that must be passed&quot;, &quot;lowest frequency that must be blocked&quot;, &quot;maximum passband ripple&quot;, &quot;minimum stopband rejection&quot;, and placing your stopband more precisely may (or may not) help with that.<br /><br />This is probably more relevant when you don't need fractional (or irrational) sample rate interpolation to get from the generated frequency to the PC standard one.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jul 04, 2015 9:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />At some point, an FIR filter becomes at least as attractive as an IIR filter. For one thing, a symmetric kernel not only guarantees stability and linear phase but also lets you cut computation in half. And you get decimation for free, as you can calculate the convolution only for those output samples you're going to actually use. Furthermore, if you know that your input is going to be a piecewise constant function, as the output of most 8-bit-era PSGs is, you can differentiate the signal and integrate the FIR filter. This is the theory behind BLEP (band limited step) synthesis used in blip_buf. The big disadvantage of FIR is a somewhat wider transition band unless you do filtering and decimation in stages.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Sun Jul 05, 2015 7:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">http://ptolemy.eecs.berkeley.edu/eecs20/week12/implementation.html<br /><br />Edit: sorry, this is just an example of a FIR filter without resampling, but the basic technique is the same. Multiply an array of input samples with the array of weights (FIR filter) and sum them up to produce an output sample.</div><br /><br />Pretend you are with a person that knows almost nothing about DSP (me in this case), so you say: <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Multiply an array of input samples with the array of weights (FIR filter) and sum them up to produce an output sample.<br /></div><br /><br />So i ask you: <br />- input samples are the samples that i take every 30.7~ CPU cc given 48Khz?<br />- array of weights (FIR filter): what is that?<br />- sum them up to produce an output sample: i think i understand that, but it would be welcomed to clarify that.<br /><br />So you are with a totally noob now <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> <br />Code is praciated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Sun Jul 05, 2015 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">So i ask you: <br />- input samples are the samples that i take every 30.7~ CPU cc given 48Khz?<br />- array of weights (FIR filter): what is that?<br />- sum them up to produce an output sample: i think i understand that, but it would be welcomed to clarify that.<br /><br />So you are with a totally noob now  <br />Code is praciated.</div><br /><br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=r7ypfE5TQK0">https://www.youtube.com/watch?v=r7ypfE5TQK0</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Mon Jul 06, 2015 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">James wrote:</div><div class="quotecontent">Here's some code for designing a filter and converting it to second order sections. Use the coefficients (Bs and As) to implement each section as a transposed direct form II filter.</div><br /><br />Why form II instead of form I ?<br /><br />Edit: Maybe because you can normalize a0 and b0 to 1, saving 2 multiplications?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Mon Jul 06, 2015 2:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zeroone wrote:</div><div class="quotecontent"><div class="quotetitle">James wrote:</div><div class="quotecontent">Here's some code for designing a filter and converting it to second order sections. Use the coefficients (Bs and As) to implement each section as a transposed direct form II filter.</div><br /><br />Why form II instead of form I ?</div><br /><!-- m --><a class="postlink" href="http://www.earlevel.com/main/2003/02/28/biquads/">http://www.earlevel.com/main/2003/02/28/biquads/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Mon Jul 06, 2015 7:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@ James, lidnariq, tepples: Thanks for all your help.  I think I finally got it.<br /><br />Using GNU Octave, I generated <a href="http://i.imgur.com/YNmSEgk.png" class="postlink">this</a> 13th-order Elliptic filter consisting of 7 biquad segments, with the following code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">clear<br />fc = 20000; % Cut-off frequency (Hz)<br />fs = 19687500.0 / 11.0; % NTSC Sampling rate (Hz)<br />%fs = 53203425.0 / 32.0; % PAL Sampling rate (Hz)<br />order = 13; % Filter order<br /><br />&#91;z, p, k&#93; = ellip(order, 0.1, 100, 2*fc/fs);<br /><br />&#91;sos, g&#93; = zp2sos(z, p, k);<br /><br />Bs = sos(:,1:3)<br />num2hex(Bs)<br />As = sos(:,4:6)<br />num2hex(As)<br />&#91;nsec,temp&#93;=size(sos);<br />nsamps = 100000;<br />x = g*&#91;1,zeros(1,nsamps-1)&#93;;<br />for i=1:nsec<br />&nbsp;x = filter(Bs(i,:),As(i,:),x);<br />end<br />X = fft(x);<br />f=&#91;0:nsamps-1&#93;*fs/nsamps;<br />figure(1);<br />grid('on');<br />axis(&#91;0 fc*2 -100 5&#93;);<br />legend('off');<br />pscale = 48<br />plot(f(1:nsamps/pscale),20*log10(X(1:nsamps/pscale)));<br /></div><br /><br />The cutoff frequency is set to 20000 Hz and it attenuates down to -100 dB by 22000 Hz, satisfying the Nyquist criterion for the traditional audio sampling rates of 44100+ Hz. <br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">James was using a sample rate of 1786830 intentionally instead of the NTSC 1789772⁸/₁₁: the NTSC NES produces video at 60.1 Hz, not 60 Hz as the end-user's monitor does. If one wants to avoid visible tearing, you need to slow down the emulated NES by 1646ppm:<br /><br />39375000÷11 Hz × 1½ ÷ (341×262-0.5) = 60.0988…<br />39375000÷11 Hz ÷ 2 × 60 ÷ 60.0988… = 1786830 Hz exactly</div><br /><br />In my emulator, the CPU, PPU and APU use an independent timer to run at the correct rates.  The monitor is updated at its refresh rate on a separate thread and they coordinate using the thread disruptor pattern.  This is a topic that can be discussed in a separate thread if anyone is interesting in further details.<br /><br />Below is a version in Java that uses 64-bit doubles.  I tested out 32-bit floats and it remains stable and mostly accurate.  But, I found that the 64-bit version does not consume a lot of CPU on my box; so, I'll stick with the extra accuracy for now.<br /><br />Like the Butterworth version that I posted earlier, this one provides an addInputSample() method that is invoked once per CPU cycle and the listener will be called back at the output sampling frequency supplied to the constructor. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">public class Decimator {<br />&nbsp; <br />&nbsp; private static final double I2 = 1.0 / 2.0;<br />&nbsp; private static final double I3 = 1.0 / 3.0;<br />&nbsp; private static final double I6 = 1.0 / 6.0;<br />&nbsp; <br />&nbsp; private static final double NTSC_SAMPLING_FREQUENCY = 19687500.0 / 11.0;<br />&nbsp; private static final double PAL_SAMPLING_FREQUENCY = 53203425.0 / 32.0;<br />&nbsp; <br />&nbsp; private static final long&#91;&#93; LONG_NTSC_A1 = {<br />&nbsp; &nbsp; 0xbfff67701c84a3deL,<br />&nbsp; &nbsp; 0xbfff8b62242e56e4L,<br />&nbsp; &nbsp; 0xbfffaf25694786a4L,<br />&nbsp; &nbsp; 0xbfffc959eca889e2L,<br />&nbsp; &nbsp; 0xbfffda7652351a06L,<br />&nbsp; &nbsp; 0xbfffe6495d699ef1L,<br />&nbsp; &nbsp; 0xbfef576a39439bdaL,<br />&nbsp; };<br />&nbsp; <br />&nbsp; private static final long&#91;&#93; LONG_NTSC_A2 = {<br />&nbsp; &nbsp; 0x3feed6d89d961d3bL,<br />&nbsp; &nbsp; 0x3fef28cd096bf76aL,<br />&nbsp; &nbsp; 0x3fef7a3a53cd4f67L,<br />&nbsp; &nbsp; 0x3fefb5a2213e3abbL,<br />&nbsp; &nbsp; 0x3fefdbe39ed2f06eL,<br />&nbsp; &nbsp; 0x3feff554ab2f0006L,&nbsp; &nbsp; <br />&nbsp; };<br />&nbsp; <br />&nbsp; private static final long&#91;&#93; LONG_NTSC_B1 = {<br />&nbsp; &nbsp; 0xbfff2a2df4fd2ad2L,<br />&nbsp; &nbsp; 0xbfffbe3738d86ac8L,<br />&nbsp; &nbsp; 0xbfffd94c2258d55cL,<br />&nbsp; &nbsp; 0xbfffe22ba0cf6805L,<br />&nbsp; &nbsp; 0xbfffe5b14c11db72L,<br />&nbsp; &nbsp; 0xbfffe6ffa75a14ebL,<br />&nbsp; };<br />&nbsp; <br />&nbsp; private static final long LONG_NTSC_G = 0x3ecc208a2d079678L;<br />&nbsp; <br />&nbsp; private static final double&#91;&#93; NTSC_A1;<br />&nbsp; private static final double&#91;&#93; NTSC_A2;<br />&nbsp; private static final double&#91;&#93; NTSC_B1;<br />&nbsp; private static final double NTSC_G;<br />&nbsp; <br />&nbsp; static {<br />&nbsp; &nbsp; NTSC_A1 = toDoubleArray(LONG_NTSC_A1);<br />&nbsp; &nbsp; NTSC_A2 = toDoubleArray(LONG_NTSC_A2);<br />&nbsp; &nbsp; NTSC_B1 = toDoubleArray(LONG_NTSC_B1);<br />&nbsp; &nbsp; NTSC_G = Double.longBitsToDouble(LONG_NTSC_G);<br />&nbsp; }<br />&nbsp; <br />&nbsp; private static final long&#91;&#93; LONG_PAL_A1 = {<br />&nbsp; &nbsp; 0xbfff5baa1b81a309L,<br />&nbsp; &nbsp; 0xbfff81d9b2eb15feL,<br />&nbsp; &nbsp; 0xbfffa7df44761c9dL,<br />&nbsp; &nbsp; 0xbfffc3c2600f5556L,<br />&nbsp; &nbsp; 0xbfffd5ff6fbab417L,<br />&nbsp; &nbsp; 0xbfffe2a551b417d0L,<br />&nbsp; &nbsp; 0xbfef4aa6ceb6c246L,<br />&nbsp; };<br />&nbsp; <br />&nbsp; private static final long&#91;&#93; LONG_PAL_A2 = {<br />&nbsp; &nbsp; 0x3feec08d9ac7eb51L,<br />&nbsp; &nbsp; 0x3fef18943f900329L,<br />&nbsp; &nbsp; 0x3fef7018a2a55ed4L,<br />&nbsp; &nbsp; 0x3fefaffb4199e44aL,<br />&nbsp; &nbsp; 0x3fefd9237788b71bL,<br />&nbsp; &nbsp; 0x3feff4844bf56456L,&nbsp; <br />&nbsp; };<br />&nbsp; <br />&nbsp; private static final long&#91;&#93; LONG_PAL_B1 = {<br />&nbsp; &nbsp; 0xbfff08b370e2ff76L,<br />&nbsp; &nbsp; 0xbfffb3ce724731b7L,<br />&nbsp; &nbsp; 0xbfffd3295d0112b5L,<br />&nbsp; &nbsp; 0xbfffdd7036a20286L,<br />&nbsp; &nbsp; 0xbfffe184a77ef413L,<br />&nbsp; &nbsp; 0xbfffe307f8bb95fdL,<br />&nbsp; };<br />&nbsp; <br />&nbsp; private static final long LONG_PAL_G = 0x3ece3d98b822795aL;<br />&nbsp; <br />&nbsp; private static final double&#91;&#93; PAL_A1;<br />&nbsp; private static final double&#91;&#93; PAL_A2;<br />&nbsp; private static final double&#91;&#93; PAL_B1;<br />&nbsp; private static final double PAL_G;<br />&nbsp; <br />&nbsp; static {<br />&nbsp; &nbsp; PAL_A1 = toDoubleArray(LONG_PAL_A1);<br />&nbsp; &nbsp; PAL_A2 = toDoubleArray(LONG_PAL_A2);<br />&nbsp; &nbsp; PAL_B1 = toDoubleArray(LONG_PAL_B1);<br />&nbsp; &nbsp; PAL_G = Double.longBitsToDouble(LONG_PAL_G);<br />&nbsp; }&nbsp; <br />&nbsp; <br />&nbsp; private final double g;<br />&nbsp; private final double&#91;&#93; a1;<br />&nbsp; private final double&#91;&#93; a2;<br />&nbsp; private final double&#91;&#93; b1;<br />&nbsp; private final double&#91;&#93; d1 = new double&#91;7&#93;;<br />&nbsp; private final double&#91;&#93; d2 = new double&#91;6&#93;;<br />&nbsp; private final double&#91;&#93; ys = new double&#91;4&#93;;<br />&nbsp; private final double inputSamplingFrequency;<br />&nbsp; private final double inputSamplingPeriod;<br />&nbsp; private final double outputSamplingPeriod;<br />&nbsp; private final DecimatorListener listener;<br />&nbsp; <br />&nbsp; private double time;<br />&nbsp; private int index;<br />&nbsp; <br />&nbsp; public Decimator(boolean ntsc, double outputSamplingFrequency, <br />&nbsp; &nbsp; &nbsp; DecimatorListener listener) {<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; if (ntsc) {<br />&nbsp; &nbsp; &nbsp; a1 = NTSC_A1;<br />&nbsp; &nbsp; &nbsp; a2 = NTSC_A2;<br />&nbsp; &nbsp; &nbsp; b1 = NTSC_B1;<br />&nbsp; &nbsp; &nbsp; g = NTSC_G;<br />&nbsp; &nbsp; &nbsp; inputSamplingFrequency = NTSC_SAMPLING_FREQUENCY;&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; } else {<br />&nbsp; &nbsp; &nbsp; a1 = PAL_A1;<br />&nbsp; &nbsp; &nbsp; a2 = PAL_A2;<br />&nbsp; &nbsp; &nbsp; b1 = PAL_B1;<br />&nbsp; &nbsp; &nbsp; g = PAL_G;<br />&nbsp; &nbsp; &nbsp; inputSamplingFrequency = PAL_SAMPLING_FREQUENCY;<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; this.listener = listener;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; inputSamplingPeriod = 1.0 / inputSamplingFrequency;<br />&nbsp; &nbsp; outputSamplingPeriod = 1.0 / outputSamplingFrequency;<br />&nbsp; } <br />&nbsp; <br />&nbsp; private static double&#91;&#93; toDoubleArray(long&#91;&#93; values) {<br />&nbsp; &nbsp; double&#91;&#93; ds = new double&#91;values.length&#93;;<br />&nbsp; &nbsp; for(int i = values.length - 1; i &gt;= 0; i--) {<br />&nbsp; &nbsp; &nbsp; ds&#91;i&#93; = Double.longBitsToDouble(values&#91;i&#93;);<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; return ds;<br />&nbsp; }<br />&nbsp; <br />&nbsp; public void addInputSample(double x) {<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; double y;<br />&nbsp; &nbsp; for(int i = 0; i &lt; 6; i++) {<br />&nbsp; &nbsp; &nbsp; y = x + d1&#91;i&#93;;&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; d1&#91;i&#93; = b1&#91;i&#93; * x - a1&#91;i&#93; * y + d2&#91;i&#93;;<br />&nbsp; &nbsp; &nbsp; d2&#91;i&#93; = x - a2&#91;i&#93; * y;<br />&nbsp; &nbsp; &nbsp; x = y;<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; y = x + d1&#91;6&#93;;<br />&nbsp; &nbsp; d1&#91;6&#93; = x - a1&#91;6&#93; * y;&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; ys&#91;index&#93; = g * y;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; time += inputSamplingPeriod;<br />&nbsp; &nbsp; if (time &gt;= outputSamplingPeriod) {<br />&nbsp; &nbsp; &nbsp; listener.processOutputSample(computeSpline(<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.0 - (time - outputSamplingPeriod) * inputSamplingFrequency, <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ys&#91;(index - 3) &amp; 3&#93;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ys&#91;(index - 2) &amp; 3&#93;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ys&#91;(index - 1) &amp; 3&#93;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ys&#91;index&#93;));<br />&nbsp; &nbsp; &nbsp; time -= outputSamplingPeriod;<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; index = (index + 1) &amp; 3;<br />&nbsp; }<br />&nbsp; &nbsp; <br />&nbsp; private double computeSpline(double t, double y0, double y1, double y2, <br />&nbsp; &nbsp; &nbsp; double y3) {<br />&nbsp; &nbsp; double c0 = y1;<br />&nbsp; &nbsp; double c1 = y2 - I3 * y0 - I2 * y1 - I6 * y3;<br />&nbsp; &nbsp; double c2 = I2 * (y0 + y2) - y1;<br />&nbsp; &nbsp; double c3 = I6 * (y3 - y0) + I2 * (y1 - y2);<br />&nbsp; &nbsp; return ((c3 * t + c2) * t + c1) * t + c0;<br />&nbsp; }&nbsp; &nbsp; <br />}<br /><br />public interface DecimatorListener {<br />&nbsp; void processOutputSample(double sample);<br />}<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>x0000</b> [ Tue Jul 07, 2015 7:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, all this looks too overcomplicated for me. In my emulator I used a very simple <a href="https://code.google.com/p/vpnes/source/browse/trunk/nes/frontend.h#36" class="postlink">code</a>. Doesn't look like it has any major problems, so why bother yourself with all this 16-order stuff if 2 could be enough for approximation? You can keep inventing more and more overnice filters all day but I doubt anyone expects a perfect audio from an emulator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Tue Jul 07, 2015 8:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">x0000 wrote:</div><div class="quotecontent">Wow, all this looks too overcomplicated for me. In my emulator I used a very simple <a href="https://code.google.com/p/vpnes/source/browse/trunk/nes/frontend.h#36" class="postlink">code</a>. Doesn't look like it has any major problems, so why bother yourself with all this 16-order stuff if 2 could be enough for approximation? You can keep inventing more and more overnice filters all day but I doubt anyone expects a perfect audio from an emulator.</div><br /><br />Audibly, I am unable to hear a different between the 13-th order Elliptic filter and simply averaging every ~37.2 samples together for any of the games that I tested.  My advice to emulator developers: keep it simple.<br /><br />Edit:<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">A 37-sample boxcar FIR has awful frequency rejection... <br /><br />As a demonstration, try listening to a square wave at 9.4kHz with that implementation; there should be a pretty audible alias (-43dBFS) at 1kHz (from the 5th overtone).<br /><br />Alternatively, try the tonal noise, which randomly (depending on the exact value of the LFSR when you switch from periodic to tonal) has either a VERY LOUD or completely absent 31st harmonic: [$400E] with $80-$82 should produce aliases from this overtone (i.e. above 24kHz, for 48kHz sample rate output)</div><br /><br />True.  My test program, which simply records the gain in decibels for a range of frequencies (a very slow Fourier-like Transform), produces <a href="http://i.imgur.com/yfkI64X.png" class="postlink">these results</a>.  Nonetheless, it sounds fine to my ear and through my speakers.  I wonder if the sound hardware or the sound API does it's own filtering and decimating.<br /><br />For reference:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">public class AveragingDecimator {<br /><br />&nbsp; private final double inputSamplingPeriod;<br />&nbsp; private final double outputSamplingPeriod;<br />&nbsp; private final DecimatorListener listener;<br />&nbsp; <br />&nbsp; private double time;<br />&nbsp; private double sumOfSamples;<br />&nbsp; private int numberOfSamples;<br />&nbsp; <br />&nbsp; public AveragingDecimator(<br />&nbsp; &nbsp; &nbsp; double inputSamplingFrequency, <br />&nbsp; &nbsp; &nbsp; double outputSamplingFrequency, <br />&nbsp; &nbsp; &nbsp; DecimatorListener listener) {<br /><br />&nbsp; &nbsp; this.inputSamplingPeriod = 1.0 / inputSamplingFrequency;<br />&nbsp; &nbsp; this.outputSamplingPeriod = 1.0 / outputSamplingFrequency;<br />&nbsp; &nbsp; this.listener = listener;<br />&nbsp; }<br />&nbsp;<br />&nbsp; public void addInputSample(double x) {<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; sumOfSamples += x;<br />&nbsp; &nbsp; numberOfSamples++;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; time += inputSamplingPeriod;<br />&nbsp; &nbsp; if (time &gt;= outputSamplingPeriod) {<br />&nbsp; &nbsp; &nbsp; listener.processOutputSample(sumOfSamples / numberOfSamples);<br />&nbsp; &nbsp; &nbsp; sumOfSamples = 0;<br />&nbsp; &nbsp; &nbsp; numberOfSamples = 0;<br />&nbsp; &nbsp; &nbsp; time -= outputSamplingPeriod;<br />&nbsp; &nbsp; }<br />&nbsp; }<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Tue Jul 07, 2015 10:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zeroone wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">So i ask you: <br />- input samples are the samples that i take every 30.7~ CPU cc given 48Khz?<br />- array of weights (FIR filter): what is that?<br />- sum them up to produce an output sample: i think i understand that, but it would be welcomed to clarify that.<br /><br />So you are with a totally noob now  <br />Code is praciated.</div><br /><br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=r7ypfE5TQK0">https://www.youtube.com/watch?v=r7ypfE5TQK0</a><!-- m --></div><br /><br />I watch and re-watch this youtube video, but my &quot;listening&quot; english is very poor (although he writes on a paper).<br />Im studying signals generation with a friendly book and im clarifying things.<br /><br />Anyway i still don't understand what it's refered with &quot;weights&quot;: can somebody explain me please??<br />As you can see im very lost about this topic...<br /><br />Surely im boring people that as i can see knows about the topic but i just want to get the sound better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Tue Jul 07, 2015 10:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Anes wrote:</div><div class="quotecontent"><br />I watch and re-watch this youtube video, but my &quot;listening&quot; english is very poor (although he writes on a paper).<br />Im studying signals generation with a friendly book and im clarifying things.<br /><br />Anyway i still don't understand what it's refered with &quot;weights&quot;: can somebody explain me please??<br />As you can see im very lost about this topic...<br /><br />Surely im boring people that as i can see knows about the topic but i just want to get the sound better.</div><br /><br />Are you generating 8-bit samples or 16-bit samples?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Tue Jul 07, 2015 11:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm generating 16-bit samples....

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Tue Jul 07, 2015 11:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Anes wrote:</div><div class="quotecontent">I'm generating 16-bit samples....</div><br /><br />Verify that you are clamping the sample values to the appropriate range (i.e. -32768 to 32767 if you are using signed values and 0 to 65535 for unsigned) as opposed to letting the values wrap-around if there is underflow/overflow.  Make sure the sound API that you are adding those values is set to use signed or unsigned sample values accordingly.  Also, verify that each audio unit contributing to the total sound sample is properly scaling to 16-bits.<br /><br />What is your buffering strategy?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Tue Jul 07, 2015 12:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zeroone wrote:</div><div class="quotecontent"><div class="quotetitle">Anes wrote:</div><div class="quotecontent">I'm generating 16-bit samples....</div><br /><br />Verify that you are clamping the sample values to the appropriate range (i.e. -32768 to 32767 if you are using signed values and 0 to 65535 for unsigned) as opposed to letting the values wrap-around if there is underflow/overflow.  Make sure the sound API that you are adding those values is set to use signed or unsigned sample values accordingly.  Also, verify that each audio unit contributing to the total sound sample is properly scaling to 16-bits.<br /><br />What is your buffering strategy?</div><br /><br /><br />Im using a circular DirectSound buffer of 16-bit signed values.<br /><br />When CPU &quot;cc_counter&quot; pass/reaches samples_div (approx. 37.7~ cc for 48Khz) i do the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if (Sound.cc_counter &gt;= samples_div)<br />{<br />&nbsp; &nbsp;float sample;<br />&nbsp; &nbsp;sample = avgsamples(Sound.X, Sound.cc_counter);<br />&nbsp; &nbsp;sample *= amp_scale;<br />&nbsp; &nbsp;sample *= 0x07FFF;<br />&nbsp; &nbsp;sample = clip_sample(sample);<br />&nbsp; &nbsp;Sound.buffer&#91;Sound.buffer_index&#93; = sample;<br />&nbsp; &nbsp;Sound.buffer_index++;<br />&nbsp; &nbsp;Sound.amp = 0;<br />&nbsp; &nbsp;Sound.cc_counter -= samples_div;<br />}<br /></div><br /><br />- &quot;Sound.X&quot; is a float array that 42 floats so it never passes the max. <br /><br />- avgsamples(Sound.X, Sound.cc_counter); do the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">float avgsamples(float * out_buffer, int len)<br />{<br />&nbsp; &nbsp;float sample = 0;<br />&nbsp; &nbsp;for (int i = 0; i &lt; len; i++)<br />&nbsp; &nbsp;&nbsp; &nbsp;sample += out_buffer&#91;i&#93;;<br />&nbsp; &nbsp;return sample / (float) len;<br />}<br /></div><br />- amp_scale is defined as: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define ChangeScale()(amp_scale = pow(1.122018454, g_db)); <br /></div><br />Where g_db range from -36 to 12 db (this is for volume control)<br />- sample *= 0x7FFF; Here is my doubt i do that to scale it.<br />- then clip_sample(sample) is defined as: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static inline float clip_sample(float sample_value) {<br />&nbsp; if (sample_value &lt; -32000) return -32000;<br />&nbsp; if (sample_value &gt; 32000) return 32000;<br />&nbsp; return sample_value;<br />}<br /></div><br />as Tepples tought me.<br />- Sound.Buffer[] is an array that can holds 800 samples for the frame.<br />- Sound.buffer_index is set to &quot;0&quot; to start again when the frame ends.<br /><br />What is wrong?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Tue Jul 07, 2015 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some advice of DSP here...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why are you clamping to it [-32000, 32000] instead of [-32768, 32767] ?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>