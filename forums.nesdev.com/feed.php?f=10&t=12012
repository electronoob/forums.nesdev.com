<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=12012" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-11-11T07:14:33-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=12012</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-11-11T07:14:33-07:00</updated>
<published>2014-11-11T07:14:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136300#p136300</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136300#p136300"/>
<title type="html"><![CDATA[Re: Tile Limits / Bank Switching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136300#p136300"><![CDATA[
<div class="quotetitle">8BitDreams wrote:</div><div class="quotecontent"><br />- Is it best to have all my sprite tiles in one bank and only switch the background tiles when needed?<br /></div><br />Sprites will probably need switching too, won't they? Games with a lot of CHR animation/switching that use the MMC3 often divide the background side into 4 1KB slots and the sprite side into 2 2KB slots, allowing for finer background animations and progressive scenery changes, while half of the sprite side is used for the main character (which can be bankswitched for more animation frames) and the other half for enemies. You can obviously do it the other way around if you need finer sprite control. Some mappers divide the whole 8KB space into 1KB slots, so you don't need to choose.<br /><br />If you don't want to use these elaborate mappers, it's better to go with CHR-RAM, because you can't really animate or progressively change tiles when the CHR chunks are 4KB or 8KB unless you replicate A LOT of tiles. With CHR-RAM you have complete freedom over the pattern tables. In this case, the tiles are stored in PRG-ROM (and can even be compressed) and are copied to CHR-RAM by the game program. The only real limitation is that updating tiles isn't instantaneous like with bankswitching, the program actually spends some time uploading tiles to VRAM. During VBlank, you can realistically update 4 to 8 tiles per frame while still performing the remaining necessary updates. This is enough for simple background animations or dynamically animating the main character (double buffering might be necessary). This scheme is good for progressive level updates.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />- I'm making a 2D side-scroller that only scrolls is one direction so would it be any more efficient if I divide my background tiles up so that all the tiles that are used early on are in one bank and the tiles used later in the level (or game) are in another bank so that I don't have to switch back and forth?<br /></div><br />That's something you'll have to carefully think about when designing your levels. First you'll have to draw all the tiles and see how much bankswitching you'll actually need. This step is way ahead in the development process though... You should get an engine working first before implementing the final graphics.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Nov 11, 2014 7:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-11-11T02:25:39-07:00</updated>
<published>2014-11-11T02:25:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136296#p136296</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136296#p136296"/>
<title type="html"><![CDATA[Re: Tile Limits / Bank Switching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136296#p136296"><![CDATA[
<div class="quotetitle">8BitDreams wrote:</div><div class="quotecontent"><br />I am having trouble finding a concise answer on this. I understand that the NES can handle two banks of 256 tiles at one time. So my questions are:<br /></div>Specifically, the sprites and background can be specified to come from the first or last 4 KiB of the 8 KiB window. ( <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_registers#Controller_.28.242000.29_.3E_write">http://wiki.nesdev.com/w/index.php/PPU_ ... _.3E_write</a><!-- m --> )<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If I'm using an MMC3 mapper to bank switch then what is the limitation on the total number of tiles that I can use?<br /></div>MMC3 provides the ability to take each of those chunks of 4 KiB and divide them further. A total of 256 KiB, or 16384 tiles, but you can only swap out groups of 64 or 128 tiles at a time. ( <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/MMC3">http://wiki.nesdev.com/w/index.php/MMC3</a><!-- m --> )<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Is it best to have all my sprite tiles in one bank and only switch the background tiles when needed?<br /></div>With any mapper that provides the ability to switch the upper and lower 4 KiB CHR banks  independently, there's basically no reason to ever set the PPU to draw both background and sprite tiles from the same chunk. With the MMC3, you have access to six independent banks, which you can use for animations or dynamically changing tile sets as the level progresses.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm making a 2D side-scroller that only scrolls is one direction so would it be any more efficient if I divide my background tiles up so that all the tiles that are used early on are in one bank and the tiles used later in the level (or game) are in another bank so that I don't have to switch back and forth?<br /></div>I suspect you're optimizing prematurely here... certainly that layout would be viable, and might be what you had to do if you were planning on having large features that each required lots of tiles to represent, only one visible at a time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Nov 11, 2014 2:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[8BitDreams]]></name></author>
<updated>2014-11-11T00:27:14-07:00</updated>
<published>2014-11-11T00:27:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136294#p136294</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136294#p136294"/>
<title type="html"><![CDATA[Tile Limits / Bank Switching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12012&amp;p=136294#p136294"><![CDATA[
I am having trouble finding a concise answer on this. I understand that the NES can handle two banks of 256 tiles at one time. So my questions are:<br /><br />- If I'm using an MMC3 mapper to bank switch then what is the limitation on the total number of tiles that I can use? <br /><br />- Is it best to have all my sprite tiles in one bank and only switch the background tiles when needed? <br /><br />- I'm making a 2D side-scroller that only scrolls is one direction so would it be any more efficient if I divide my background tiles up so that all the tiles that are used early on are in one bank and the tiles used later in the level (or game) are in another bank so that I don't have to switch back and forth?<br /><br />Thanks for any info or suggestions you can give me!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6755">8BitDreams</a> — Tue Nov 11, 2014 12:27 am</p><hr />
]]></content>
</entry>
</feed>