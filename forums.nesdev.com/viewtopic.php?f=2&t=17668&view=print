<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Fixed point math for scrolling games</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Fixed point math for scrolling games</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17668">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17668</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slembcke</b> [ Thu Aug 16, 2018 11:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have some experience writing physics engines (Chipmunk2D), and want to try and see how far I can go with that on the NES. So far I've gotten circle-circle and circle-line collisions working with reasonable performance, and am working on reducing it further with some small lookup tables. My end goal is a game with a two wheeled vehicle. So far I've been using 8.8 fixed point because it's easy to prototype with from C, but I'm hoping to get at least 2 screen scrolling. So I was thinking about my options for using fixed point.<br /><br />If I wanted to stick with 16 bit types I could do something like 9.7 or 12.4 depending on how much accuracy feels right in the fractional bits for acceleration and such. All the extra shifting gets messy real fast in C, and I can only imagine moreso in assembly. Having a lot of multi-byte shifts seems like it might really bloat and slow the code too.<br /><br />16.8 is sort of appealing for the final assembly version. If I wanted to access the values from C I'd need to split the integer and fractional parts into a struct. I've already kind of ruled out padding it out to 32 bits. Even with a lot of casting and type annotations for 16/8 bit ops, I wasn't able to get cc65 to generate reasonable code using 32 bit ints.<br /><br />What have other people had good success with? Is 16.8 the way to go, or is something like 9.7 less troublesome than I think it is?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Thu Aug 16, 2018 1:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">16.8 is sort of appealing for the final assembly version. If I wanted to access the values from C I'd need to split the integer and fractional parts into a struct.</div><br /><br />I think this is a good approach.<br /><br />1 byte for which screen. Then 8.8 for within that screen.<br /><br /><br />na_th_an does some kind of bit shifting for different parts of his X,Y code, to keep the storage space 16 bits per direction.<br /><br />I thought it was 12.4 (allowing for 16 screen wide), but it might be 10.6 for the flick screen games (allowing for 4 screen wide movements). (not sure)<br /><br />Edited.<br />I think that corresponds to what you said &quot;12.4&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 16, 2018 2:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Both <em>Haunted</em> games use 16.8 displacements and 8.8 velocities. One drawback with 12.4 is that you may need to keep 16-bit displacements longer than you would with 16.8. In 16.8, you can ignore subpixel positions, subtract 16-bit pixel positions, reject displacements more than 128 pixels apart early, and save 8-bit pixel displacements for later processing. In 12.4, by contrast, a 20-pixel displacement between two objects is 320 units, which is solidly a 16-bit number.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Aug 16, 2018 2:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Both <em>Haunted</em> games use 16.8 displacements and 8.8 velocities.</div><br />This is my preferred configuration too. Much easier to manage, no need for bit shifting when doing physics. You'll probably still need bit shifting for collisions against the background, though.<br /><br />How many bytes are you really saving when using more tightly packed schemes? Most people don't even have 16 slots for active objects, the savings are minimal. There's hardly any advantage in processing time too, since the time spent shifting bits is probably larger than that of directly manipulating a whole extra byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slembcke</b> [ Thu Aug 16, 2018 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds like 16.8 is the way to go then. I found some random stuff on the internet that talked about using 12.4 fixed point, but it seems like a bad idea in this case. I was just wondering if there was something I was missing.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">How many bytes are you really saving when using more tightly packed schemes? Most people don't even have 16 slots for active objects, the savings are minimal. There's hardly any advantage in processing time too, since the time spent shifting bits is probably larger than that of directly manipulating a whole extra byte.</div></div><br /><br />More or less what I was thinking. It would waste a few dozen bytes of RAM at most, and I'm not expecting to make a very big game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Aug 16, 2018 3:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's difficult to do 24 bit numbers in C, especially with how cumbersome 32 bit numbers are in CC65. All I could suggest for this is to be sparing with the promotion to 32 bits, and do some of the relevant work in assembly instead.<br /><br />At the same time, it's difficult to do efficient arrays of anything bigger than byte-size in C as well. If you have an array of objects, there's a big advantage in assembly to storing each byte of this 24-bit number in a separate array. (&quot;Structure of arrays&quot; idiom.) Unfortunately it's cumbersome to use this kind of data in C, but like above I guess the advice is to try and minimize it, and be prepared to write some assembly. I don't think there's really any good way to do this in CC65 C, but you can plan to do some assembly optimization as needed.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ab = a&#91;i&#93; | (b&#91;i&#93; &lt;&lt; 8);<br />a&#91;i&#93; = (ab &gt;&gt; 0) &amp; 0xFF;<br />b&#91;i&#93; = (ab &gt;&gt; 8) &amp; 0xFF;<br />// a/b are both static unsigned char arrays<br />// ab is a static short int<br />// i is an unsigned char</div><br />The above code is relatively efficient on CC65, because it does at least tend to handle byte-aligned operations like &lt;&lt; 8 fairly well, and if you can use static variables where possible a lot of its internal stack use can be minimized. I think overall with careful use of 8 bit stripes, and a few macros to help you pack and unpack them, you'll end up with faster and smaller code than using 16 bit arrays. (Even with 24 bits its probably still a win over using arrays of 32-bit numbers... though the necessary casting up to 32-bit is going to hurt any way you do it except assembly.)<br /><br />Note above that <strong>i</strong> being an unsigned char + both <strong>a</strong> and <strong>b</strong> being char arrays means that they can be fetched and stored with <strong>LDA abs, X/Y</strong> / <strong>STA abs, X/Y</strong>, which you don't get if either of those conditions isn't true. (For arrays of short int, it always has to promote the index to 16 bits.)<br /><br />9.7 is OK if you need compactness and are only 2 screens wide, but the extra shift is very cumbersome for the code (in both assembly and C). Splitting in other sizes (e.g. 12.4) is not very good on the 6502. That works much better on processors that can shift more than 1 bit at a time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pubby</b> [ Thu Aug 16, 2018 4:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I mixed and matched in my platformer and used 16.8 for X and 12.4 for Y.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Thu Aug 16, 2018 4:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't think there's really any good way to do this in CC65 C, but you can plan to do some assembly optimization as needed.</div><br /><br />I've been toying with macros of casting and dereferencing. I'm away from my computer, but it's something like...<br /><br />#define low_byte(a)  *((unsigned char*)a)<br />#define high_byte(a)  *((unsigned char*)a+1)<br /><br />if &quot;a&quot; and &quot;array1&quot; are a known values, (and global) at compile time, then...<br /><br />low_byte(x_pos) = array1[object_number];<br /><br />compiles to...<br />ldy object_number<br />lda array1, y<br />sta x_pos<br /><br />likewise for the high byte from another array.<br />(these are 8 bit char arrays).<br /><br />high_byte(x_pos) = array2[object_number];<br /><br />edit... x_pos in this example would be an int (16 bit)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slembcke</b> [ Thu Aug 16, 2018 8:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All good tricks. I think in my case, only the physics will need the fractional bits. Rendering and hit detection don't really need them.<br /><br />On a separate note, you can get cc65 to do nice loads for interleaved arrays too like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Bad, assembly is exactly as written, no constant folding/propagation<br />for(i = 0; i &lt; 2*count; i += 2){<br />&nbsp; a = GLOBAL_ARRAY&#91;i + 0&#93;;<br />&nbsp; b = GLOBAL_ARRAY&#91;i + 2&#93;;<br />}<br /><br />// Better -&gt; tax, lda, lda<br />for(i = 0; i &lt; 2*count; i += 2){<br />&nbsp; a = (GLOBAL_ARRAY + 0)&#91;i&#93;;<br />&nbsp; b = (GLOBAL_ARRAY + 1)&#91;i&#93;;<br />}<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Thu Aug 16, 2018 10:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixed point math for scrolling games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For completeness. When dealing with odd fp. You can use tables to speed up and extract values<br />Say 6.2 for example<br />You make a table that is<br />0,0,0,0,1,1,1,1,2,2,2,2..... then to extract the '6' its upperSixLUT[value] <br /><br />for 12.4 you have a tables<br />XXXX 0000 upper 4 bits -&gt; lower 4 bits<br />00000 YYYY lower 4 bits -&gt; upper 4 bits<br />Then to extract the '12' <br />lo = upperToLower4BitsLUT[value.lo] | lowerToUpper4BitsLUT[value.hi]<br />hi = upperToLower4BitsLUT[value.hi]<br /><br />which in ASM becomes<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx value.lo<br />lda upperToLower4BitsLUT,x<br />ldx value.hi<br />ora lowerToUpper4BitsLUT,x<br />sta lo<br />lda upperToLower4BitsLUT,x<br />sta hi</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>