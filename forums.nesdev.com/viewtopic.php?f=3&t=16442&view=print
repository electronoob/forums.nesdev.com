<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Advices on implementing mixed switchable and fixed PRG banks</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Advices on implementing mixed switchable and fixed PRG banks</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=16442">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=16442</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Sun Sep 03, 2017 9:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Advices on implementing mixed switchable and fixed PRG banks</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi, my emulator is currently only supporting mapper 0, so the PRG-ROM is just a 32 kB chunk that gets loaded at ROM load and that's it.<br />So mappers that switch entire 32 kB PRG banks are trivial, but for mapper 2-UNROM, for example, that uses one switchable 16 kB bank and another one fixed, I've thought of these options:<br /><br />1) Just switch the switchable bank, using a pointer to the selected bank, in which case I have to modify my CPU code because if the PC crosses the bank boundary, I'll have to point to a different chunk in memory, cause they won't be next to each other.<br />2) I could instead of switching pointers just copy over the whole switchable bank on each bank switch so both banks are always next to each other in memory and PC movement is transparent. It looks unefficient, but moving 16 kB in a modern computer should be near cost zero.<br />3) I also could create whole 32 kB chunks in memory, one for each switchable 16 kB bank, all with copies of the fixed 16 kB bank so I could just switch between them transparently.<br /><br />Any ideas? a better solution?<br />My emulator is made in C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Sep 03, 2017 11:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Advices on implementing mixed switchable and fixed PRG b</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />FCEUX uses an array of function pointers and calls the correct one for each memory access.<br /><br />Using memcpy will produce subtle bugs later on, e.g. when you get to MMC5.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sour</b> [ Sun Sep 03, 2017 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Advices on implementing mixed switchable and fixed PRG b</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Imo, the simplest option (in the long run), is #1 - an array of pointers (e.g what lidnariq suggested)<br />When you consider the mappers with bank-switchable PRG RAM at $6000-$7FFF, it becomes hard to ensure your copy and the original stay in sync - it's simpler to just keep a single copy of the data.<br />Also, keep in mind that PRG ROM can be technically mapped outside the $8000-$FFFF range (although I forget if any mapper actually does this) and that banks can be smaller than 16kb (I believe 8kb is the smallest I have seen for PRG ROM, but smaller banks exist when it comes to PRG RAM)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Sep 03, 2017 11:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Advices on implementing mixed switchable and fixed PRG b</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sour wrote:</div><div class="quotecontent">Also, keep in mind that PRG ROM can be technically mapped outside the $8000-$FFFF range (although I forget if any mapper actually does this)<br /></div>FME-7 can bank ROM instead of RAM to $6000. JY Company's mapper collection can too. A bunch of the pirate FDS ports have unbankable ROM fixed there (m40, m50). <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and that banks can be smaller than 16kb (I believe 8kb is the smallest I have seen for PRG ROM, but smaller banks exist when it comes to PRG RAM)<br /></div>There's something weird going on with <a href="https://forums.nesdev.com/viewtopic.php?p=194067#p194067" class="postlink">this board</a> where banking granularity is 4K but that's split into a 3K and a 1K nonadjacent region. Of course, it's another pirate FDS port.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 03, 2017 12:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Advices on implementing mixed switchable and fixed PRG b</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Petruza wrote:</div><div class="quotecontent">2) I could instead of switching pointers just copy over the whole switchable bank on each bank switch so both banks are always next to each other in memory and PC movement is transparent. It looks unefficient, but moving 16 kB in a modern computer should be near cost zero.</div><br />I won't pretend to know how fast modern computers are at moving data, but don't fail to consider that games might switch banks dozens of times in a single frame, so you may end up with slight performance variations depending on the game/mapper.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Sun Sep 03, 2017 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Advices on implementing mixed switchable and fixed PRG b</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Petruza wrote:</div><div class="quotecontent">Hi, my emulator is currently only supporting mapper 0, so the PRG-ROM is just a 32 kB chunk that gets loaded at ROM load and that's it.<br />So mappers that switch entire 32 kB PRG banks are trivial, but for mapper 2-UNROM, for example, that uses one switchable 16 kB bank and another one fixed, I've thought of these options:<br /><br />1) Just switch the switchable bank, using a pointer to the selected bank, in which case I have to modify my CPU code because if the PC crosses the bank boundary, I'll have to point to a different chunk in memory, cause they won't be next to each other.<br />2) I could instead of switching pointers just copy over the whole switchable bank on each bank switch so both banks are always next to each other in memory and PC movement is transparent. It looks unefficient, but moving 16 kB in a modern computer should be near cost zero.<br />3) I also could create whole 32 kB chunks in memory, one for each switchable 16 kB bank, all with copies of the fixed 16 kB bank so I could just switch between them transparently.<br /><br />Any ideas? a better solution?<br />My emulator is made in C.</div><br /><br />It sounds like you've got assumptions about the NES memory layout hardcoded into your CPU implementation. This isn't a good idea and will only further break down as you attempt to emulate more sophisticated mappers (ones with multiple bank slots like MMC3, ones with registers below address $8000 like many third-party mappers, ones which can map RAM above address $8000 and/or map ROM below it like Sunsoft mappers and MMC5) You need to implement an abstract memory system; take a look at FCEU for an example (it's C++ but the actual emulation components were originally written in C and AFAIK are still entirely C-like code that doesn't make use of classes or polymorphism or other C++ features)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Mon Sep 04, 2017 8:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Advices on implementing mixed switchable and fixed PRG b</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">FCEUX uses an array of function pointers and calls the correct one for each memory access.<br />Using memcpy will produce subtle bugs later on, e.g. when you get to MMC5.</div><br /><div class="quotetitle">Sour wrote:</div><div class="quotecontent">Imo, the simplest option (in the long run), is #1 - an array of pointers (e.g what lidnariq suggested) [...]</div><br />Oh right! my emulator actually does have the function table for memory I/O, I haven't touched the code for almost a year now and had forgotten about that.<br />So I guess that's the most elegant solution and more well suited for future mappers too. Thanks!<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I won't pretend to know how fast modern computers are at moving data, but don't fail to consider that games might switch banks dozens of times in a single frame, so you may end up with slight performance variations depending on the game/mapper.</div><br />Yeah, you're right.<br /><br /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">It sounds like you've got assumptions about the NES memory layout hardcoded into your CPU implementation. This isn't a good idea and will only further break down as you attempt to emulate more sophisticated mappers (ones with multiple bank slots like MMC3, ones with registers below address $8000 like many third-party mappers, ones which can map RAM above address $8000 and/or map ROM below it like Sunsoft mappers and MMC5) You need to implement an abstract memory system; take a look at FCEU for an example (it's C++ but the actual emulation components were originally written in C and AFAIK are still entirely C-like code that doesn't make use of classes or polymorphism or other C++ features)</div><br />You're right, but I failed to mention that my immediate next step is to implement mappers 2,3,7 &amp; 11, which I considered a good compromise between amount of games supported and ease of implementation. Then I'll have to implement more important things before moving to implement MMCs and other mappers. (The whole APU is missing, lightgun support, state save, save RAM, etc.)<br />So a sub-optimal hacked solution that works with these 4 mappers would be ok for now, I can then improve it when moving to other mappers but that will happen in a distant future.<br />Never the less, I think the function table solution will be the best choice to cope with future mappers as well.<br />I will take another look at FCEU though.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>