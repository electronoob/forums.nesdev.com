<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=9110" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-07-21T02:19:42-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=9110</id>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2012-07-21T02:19:42-07:00</updated>
<published>2012-07-21T02:19:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96987#p96987</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96987#p96987"/>
<title type="html"><![CDATA[CA65: zp -&gt; abs when using nested .procs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96987#p96987"><![CDATA[
The reason this happens is that CA65 doesn't know whether "b0" is referring to the global symbol, or a symbol of the same name in the current scope which could be defined later. This has been discussed several times in the CC65 mailing list: <!-- m --><a class="postlink" href="http://www.cc65.org/mailarchive/2011-07/9539.html">http://www.cc65.org/mailarchive/2011-07/9539.html</a><!-- m --><br /><br />I agree it's kind of unfortunate that it behaves like this, especially because most of the time it will not give a warning when it ends up using absolute addressing for zeropage variables. This is actually the reason that I added warning messages to NintendulatorDX whenever a game uses absolute addressing when zeropage could be used.<br /><br />A case could be made that it would make more sense for CA65 to just use the global symbol, and if a symbol with the same name is defined later in the scope, just error out, because the case that CA65 is trying to protect against (having a global and local symbol with the same name) is so uncommon.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Sat Jul 21, 2012 2:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-07-20T16:31:02-07:00</updated>
<published>2012-07-20T16:31:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96979#p96979</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96979#p96979"/>
<title type="html"><![CDATA[CA65: zp -&gt; abs when using nested .procs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96979#p96979"><![CDATA[
Sounds like a bug to me.  I'm surprised that it would have those kind of problems.<br /><br />ASM6 is aggressive about using zeropage mode whenever possible.  It also uses a 3-pass system just in case it can't decide whether or not to use zeropage mode at the appropriate times.  Deciding whether or not to use zeropage mode instructions is usually obvious, but sometimes it isn't.  Especially once you support external symbols.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Fri Jul 20, 2012 4:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2012-07-20T15:39:38-07:00</updated>
<published>2012-07-20T15:39:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96977#p96977</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96977#p96977"/>
<title type="html"><![CDATA[CA65: zp -&gt; abs when using nested .procs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9110&amp;p=96977#p96977"><![CDATA[
In the CA65 wiki, there's an article on <a href="http://wiki.cc65.org/doku.php?id=cc65:symbols_in_local_scopes" class="postlink">using symbols in local scopes</a>. In some cases, using local scope makes the assembler assume absolute mode when you really wanted zp. If you assemble the following nonsense program (no flags required just ca65 the_below_code.asm), you'll get a range error because the sta b0 instructions all assemble to absolute mode:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br /><br />.proc test<br />  <br />  lda b0<br />  <br />.proc nested_proc<br /><br />  beq label<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  sta b0<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  nop<br />  <br />label:<br /><br />  rts<br /><br />.endproc<br />    <br />.endproc<br /><br /></div><br /><br />To correct this, it appears you can do a couple of things. One, suggested by the wiki, is to add the global scope specifier in front of the use of your symbol:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br /><br />.proc test<br />  <br />  lda ::b0<br /><br />....<br /></div><br /><br />What I find odd is, I only have to do this once (such as the first time the symbol is used). Another way to correct the issue is to remove that nested .proc and just use a normal label.<br /><br />What's further odd is, I remember using nested .procs for scope in the Nomolos codebase. Yet, I haven't yet found a place where CA65 is assembling to absolute mode where I'm expecting zeropage instructions.<br /><br />Anyone understand this quirk of CA65 scope better than I do?  Posting this will probably just make nesasm and asm6 adherants happy that they never made the switch  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Fri Jul 20, 2012 3:39 pm</p><hr />
]]></content>
</entry>
</feed>