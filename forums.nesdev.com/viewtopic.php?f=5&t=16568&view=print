<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Questions about memory mapping</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Questions about memory mapping</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16568">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16568</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DementedPurple</b> [ Tue Oct 10, 2017 2:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know how memory use works through the Software level, but I want to understand it through the hardware level. What I am mainly asking is how the memory chip on the NES for example, knows that when the address bus is at $037D, it knows “Hey! That’s me!” I just assume that the chip has a predetermined address range. But if that’s the case, then why is it that when I go on eBay to buy EPROMs, it never mentions what the address range for it is?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Oct 10, 2017 3:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Chip enables. <br /><br />For example, in the NES, there's a part called a &quot;74139&quot; that is how the NES divides its memory map into multiple regions.<br /><br />Half of it takes two signals from the 2A03 (&quot;M2&quot; and &quot;A15&quot;) and creates two signals (&quot;actively addressing memory from $0000-$7FFF&quot; and &quot;actively addressing memory from $8000-$FFFF&quot;).<br /><br />The other half of it then takes the first one of those, and two more signals from the 2A03 (&quot;A14&quot; and &quot;A13&quot;) and creates two more signals (&quot;actively addressing memory from $0000-$1FFF&quot;, which is connected to the CPU's RAM; and &quot;actively addressing memory from $2000-$3FFF&quot;, which is connected to the PPU)<br /><br />The RAM and PPU each have a single &quot;chip enable&quot; which use the signals generated above to be told when they should listen and/or talk.<br /><br />—<br /><br />In contrast, in the Atari 2600, there's no such part. Each of the individual parts on the board instead have <em>multiple</em> chip enables that allow for some rudimentary decoding.<br /><br />Both the TIA and RIOT have two chip enables; the TIA only responds to addresses where &quot;A12&quot; and &quot;A7&quot; are low, the RIOT only responds to addresses where &quot;A12&quot; is low and &quot;A7&quot; is high, and the cartridge ROM is expected to only respond to addresses where &quot;A12&quot; is high. But this is by design, not an intrinsic property. They didn't have to be connected to those specific addresses (although there's good reasons they made these choices)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Oct 10, 2017 4:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's the Chip Select pin, then some series of logic determines what value goes to that pin.<br /><br />So let's say you had RAM at 0000-1FFF as on the NES (mirrored to fill that address range)<br />You'd want CHIP SELECT to be set if highest 3 address bits are all 0.  That's 8000, 4000, 2000.  So you run whatever series of logic gates you need to make CHIP SELECT be set when ADDRESS 15, ADDRESS 14, ADDRESS 13 are all zero.  So that's !(A15 &amp; A14 &amp; A13).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Oct 10, 2017 4:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DementedPurple wrote:</div><div class="quotecontent">how the memory chip on the NES for example, knows that when the address bus is at $037D...</div><br />Most of the address bus is directly connected to the chip.<br /><br />For example, a 32k ROM has 15 address pins (2 ^ 15 = 32768). So, internally the ROM's address space is just $0000-7FFF. There's no 16th bit to get to $8000.<br /><br />The NES CPU has a 64k address bus, so this is 16 lines. We just connect the first 15 straight to the chip, and then that 16th one goes to the chip enable*.<br /><br /><div class="quotetitle">DementedPurple wrote:</div><div class="quotecontent">...it knows “Hey! That’s me!”</div><br />So that 16th line from the NEW CPU address bus is not used as an address line on the chip, but instead used to enable/disable it. On the NES CPU side that bit selects between $0000-$7FFF and $8000-FFFF, but where it's connected to the chip is just means off/on.<br /><br /><div class="quotetitle">DementedPurple wrote:</div><div class="quotecontent">...why is it that when I go on eBay to buy EPROMs, it never mentions what the address range for it is?</div><br />The ROM doesn't need to know where it's mapped. All it sees is 1s and 0s on its own address pins.<br /><br /><br />(* the 16th line isn't connected directly, but more or less this is what's happening. See <a href="https://wiki.nesdev.com/w/index.php/Cartridge_connector" class="postlink">/ROMSEL</a>.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Oct 10, 2017 9:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's not really the mapped chips/devices that go &quot;hey, that's me!&quot;, it's actually the console/computer that goes &quot;hey, you!&quot;. This is called &quot;address decoding&quot;. In order to activate a specific chip or device, the system has to use the state of the address lines to create an enable signal for the chip/device. How the address lines (and possibly other signals) are combined in order to form the various enable signals is what determines what gets mapped where.<br /><br />If you're wondering about mirroring, it's just a side effect of partial address decoding. For example, on the NES, the 8 PPU ports ($2000-$2007) are mirrored all the way up to $3FFF (e.g. writing to $3FFF is the same as writing to $2007). This happens because when deciding whether to redirect accesses to the PPU, the NES isn't watching the 13 address lines it would take to have the PPU respond only to $2000-$2007, it's actually watching only 3 address lines, which leaves a bunch of &quot;don't care&quot; bits in the address, causing a bunch of different addresses to be interpreted as the same thing.<br /><br />To have the PPU respond only to $2000-$2007 without mirroring, the NES would have to watch for addresses with the following  format: 00100000 00000PPP (P = PPU port)<br /><br />That'd be a waste of resources, so it's simpler and cheaper to just watch the 3 highest address lines instead: 001***** *****PPP (* = don't care, P = PPU port). This means that the value of the * bits aren't taken into consideration when deciding whether to access the PPU, so addresses that only differ by the &quot;don't care&quot; bits will appear to be the same to the system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DementedPurple</b> [ Mon Oct 30, 2017 10:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But that would mean chips have a pre determined chip number through chip select, right? I should probably ask about i2c mapping on the raspberry pi. Could you explain how I would put the individual chips in the mapping range?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Mon Oct 30, 2017 10:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DementedPurple wrote:</div><div class="quotecontent">But that would mean chips have a pre determined chip number through chip select, right? I should probably ask about i2c mapping on the raspberry pi. Could you explain how I would put the individual chips in the mapping range?</div><br />An I2C bus is not the same as a memory bus with potentially many individually-selected (via chip select) devices.<br />A device on an I2C bus has an address that is often, but not necessarily, encoded to it by a series of pull-up/down resistors on its pins. These pins are read by the chip and provide it a &quot;slave address&quot;. When an I2C command starts on the I2C bus the first byte is the device address and R/W. If the I2C device recognizes this address it will respond by ACKnowledge (pulling the bus low) in the 9th bus clock cycle. Otherwise, it stays silent.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DementedPurple</b> [ Wed Jan 31, 2018 8:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />what happens when you have 1 bit connected to the chip select, and other bits connected to other chip selects, and then you set both of them. Does it send that value to both addresses?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jan 31, 2018 10:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You <em>usually</em> don't have direct control over the chip select pins, and there is no way in software to enable multiple at the same time. (<a href="http://problemkaputt.de/zxdocs.htm#zx80zx81ioports" class="postlink">conspicuous counterexample: ZX80's keyboard</a>)<br /><br />If you <em>do</em> have a system where multiple devices can be enabled simultaneously, behavior depends on what they are and context. For example, in the SNES, there are two address buses, and two different devices can be enabled at the same time according to these two buses. They share the data bus; this is how it implements DMA transfers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 31, 2018 10:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about memory mapping</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You definitely wouldn't want multiple memory chips outputting data to the same bus, but there are cases when multiple chips receive the same data. If I'm not mistaken, the Master System has some memory mapped registers in the RAM area, and whenever you write data there, it gets written to RAM in addition to being sent to whatever hardware answers to writes to those locations. This means that you can read back values written to those locations as if you were reading from the memory-mapped register, but you're in fact just reading from RAM.<br /><br />On the NES we have mappers with bus conflicts, because PRG-ROM is normally enabled on any access to $8000-$FFFF, not just reads, and these mappers are wired to receive bits from the data bus only on writes to $8000-$FFFF. When a write to $8000-$FFFF happens, the ROM is enabled and outputting a value to the data bus, the CPU is also outputting a value to the data bus (the value should be the same to prevent conflicts) and the mapper chip's input is enabled so it can read the value that's on the bus. So yeah, there are cases when multiple devices respond to the same memory access in some way, but as long as this doesn't result in bus conflicts, it should be fine.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>