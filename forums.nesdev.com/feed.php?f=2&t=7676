<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7676" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-04-23T11:37:25-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7676</id>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-04-23T11:37:25-07:00</updated>
<published>2011-04-23T11:37:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77129#p77129</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77129#p77129"/>
<title type="html"><![CDATA[Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77129#p77129"><![CDATA[
Yeah, guys, I am not hacking the routine. I used it to find the data in the ROM [Well, was going to use it for that.]  I just thought this one was strange and bloated and would of thought it would have made a good topic. I guess not.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Sat Apr 23, 2011 11:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jstout]]></name></author>
<updated>2011-04-23T09:57:50-07:00</updated>
<published>2011-04-23T09:57:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77119#p77119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77119#p77119"/>
<title type="html"><![CDATA[Re: Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77119#p77119"><![CDATA[
I hacked RBI to contain all the baseball teams for someone at dee-nee.<br /><br />Not sure what you are trying to do with the code but $AF9F is the code to draw the Baseball at the beginning of the game and $B44A is one of RBI's codes to write data to the PPU.  RBI tends to have PPU data inside the code or uses a pointer at $3C with routines, like at $B44A, to write the data.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3601">jstout</a> — Sat Apr 23, 2011 9:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-04-23T09:43:29-07:00</updated>
<published>2011-04-23T09:43:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77118#p77118</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77118#p77118"/>
<title type="html"><![CDATA[Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77118#p77118"><![CDATA[
<div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />Eh, okay then. Not the way I would have done it, but if you think it's fine then so be it.<br /></div><br />I don't think this is a matter of whether people think it's fine, it's just that this is what the game used. You could make a simpler routine if you wanted, but hacking the routine itself would be a lot more trouble than just hacking the data, don't you think?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Apr 23, 2011 9:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-04-23T08:31:16-07:00</updated>
<published>2011-04-23T08:31:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77113#p77113</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77113#p77113"/>
<title type="html"><![CDATA[Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77113#p77113"><![CDATA[
Eh, okay then. Not the way I would have done it, but if you think it's fine then so be it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Sat Apr 23, 2011 8:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-04-23T08:26:58-07:00</updated>
<published>2011-04-23T08:26:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77112#p77112</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77112#p77112"/>
<title type="html"><![CDATA[Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77112#p77112"><![CDATA[
<div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />For the purpose it is used by, it seems just a bit overly uneededly complex compared to most other code.<br /></div><br />The first half looks like the most straightforward way to write a rectangular chunk of nametable to the screen. The second half, which I called writeStrings, appears to have come from a library used by multiple games and/or multiple places within a game, and its complexity follows from its generality.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />I don't see why it needs so much zero page<br /></div><br />On Atari 2600, five bytes is "a lot of zero page" because zero page is shared with the stack, the game state, and even the I/O registers. On Apple II, five bytes is "a lot of zero page" because ROM BASIC eats up most of it. On NES, neither is the case. In fact, my standard calling convention on the NES reserves 16 bytes for a subroutine's local variables.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Apr 23, 2011 8:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-04-23T08:01:04-07:00</updated>
<published>2011-04-23T08:01:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77111#p77111</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77111#p77111"/>
<title type="html"><![CDATA[Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77111#p77111"><![CDATA[
Nope, I was just trying to help the guy find the data in the ROM and since I didn't want to get into any guess and check algorithms and data types, I just waited for it to write to the name table. This was what I stumbled upon. For the purpose it is used by, it seems just a bit overly uneededly complex compared to most other code. Thanks for explaining how it works, now I'll relay this to the guy on NA. And before setting PPU Read/Write breaks, I found about 3 different subroutines that cleared the screen and other weird stuff, heh.<br /><br /><br />I don't see why it needs so much zero page and complexity to it. Like said above, per line, if you put it into RLE compression, the end blocks take up less space in the ROM and you get a shorter program. It's just.....not my choice I guess. Thanks for reading it through for me, it was at 5AM when I posted that just trying to find a simple fix for the guy. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Sat Apr 23, 2011 8:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-04-23T05:34:35-07:00</updated>
<published>2011-04-23T05:34:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77105#p77105</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77105#p77105"/>
<title type="html"><![CDATA[Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77105#p77105"><![CDATA[
Doh: Tepples beat me, but I'll still post this, I suppose. Here's my thought process.<br /><br />The goal is simply to hack the title screen? I don't see any bad code here. Sometimes you don't hack code. Sometimes you hack data. <br /><br />This routine puts the address of the titlescreen's data into $2B and $2C. It then loops loading values from that address using indexed indirect mode. <br /><br />Since I don't know anything about bank switching, I set a breakpoint at AFC3, and stepped through it looking for the values loaded to A. (Which of course are then stored to $2007 which writes a tile.)<br /><br />I got these: 70 70 70 70 70 7D 7E 80 C4<br /><br />I then ran a search for those hex values in my hex editor, and changed them to 01 02 03 04 05 7D 7E 80 C4, and the title screen displayed those tiles, which happened to display 12345 at the very top of the B.<br /><br />This lead me to believe that data for this title screen is uncompressed, as $70 is repeated many times and changing it changes exactly 1 tile. <br /><br />The start of the data in the rom is at $3024 in the actual rom file with header. Changing values here chooses which tiles are drawn to the titlescreen. <br /><br />The title screen that is not blank is $12 tiles long. (Which is why cmp #$13 ends the loop) So each set of $12 tiles starting at the address affects 1 row, starting 8 tiles from the right. This saves at least some space since the blank tiles before each row (24 24 24 24 24 24 24 24) don't have to be stored. That gets you as far as the main logo.<br /><br />I have no idea what the second thing does, and definitely don't want to find out since there's no context, but hopefully this will get you started. <br /><br />1P PLAY, 2P PLAY and WATCH, plus the copyright info seem to be affected by another routine. But... you don't even need to FIND that routine. You didn't need to look at the code at all. I just searched for the tile numbers the display 1 PLAY (01 19 24 19 15 0A 22) And changed them to whatever. I could have done exactly that for the main logo as well. Because the data is uncompressed, you don't really need a debugger at all. Is that all you want, or is there another goal in mind?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Sat Apr 23, 2011 5:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-04-23T05:21:11-07:00</updated>
<published>2011-04-23T05:21:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77104#p77104</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77104#p77104"/>
<title type="html"><![CDATA[Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77104#p77104"><![CDATA[
I'll take this question because ROM hacking uses some of the same <a href="http://en.wikipedia.org/wiki/Software_archaeology" class="postlink">software archaeology skills</a> that I use when <a href="http://nesdev.com/bbs/viewtopic.php?p=77094#77094" class="postlink">fixing up an 11-year-old project</a> or <a href="http://nesdev.com/bbs/viewtopic.php?p=63253#63253" class="postlink">recovering half-lost source code</a>.<br /><br />The first half is straightforward, looking like copying a 19x10 tile area to the screen. Let me rewrite in pseudocode:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">short srcAddress at $002B<br />short dstAddress at $002D<br />char numRowsLeft at $002F<br /><br /># AF9F<br />srcAddress = b012Table&#91;0&#93;<br />dstAddress = $2067<br />for numRowsLeft in range&#40;10, 0, -1&#41;:<br />    # AFC1<br />    for Y in range&#40;0, $13&#41;:<br />        write srcAddress&#91;Y&#93; to PPUDATA<br />    # AFCD<br />    srcAddress += $13<br />    dstAddress += $20  # move to next row<br />    # AFE7<br /></div><br /><br />$AFEB looks like it uses the strategy of putting arguments to a subroutine after the JSR. MLI calls in ProDOS use this strategy; so do switch statements of Super Mario Bros. (Refer to <a href="http://www.romhacking.net/docs/344/" class="postlink">SMBDis by doppelganger</a> for an explanation of JumpEngine in SMB1.)<br /><br />As I understand it, the subroutine at $B44A works like this (again, pseudocode):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">short srcAddress at $002B<br /><br />def writeStrings&#40;&#41;:<br />    # B44A<br />    Pop return address into srcAddress<br />    Read PPUSTATUS to reset the PPUADDR latch<br />    do:<br />        # B453<br />        Copy 2-byte address to PPUADDR<br />        # B463<br />        Copy bytes to PPUDATA until $FE or $FF value<br />    while terminator was $FE<br />    # B474<br />    Add the total number of bytes processed to srcAddress<br />    # B47E<br />    Push srcAddress back on the stack<br /></div><br />And it's used like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  jsr writeStrings<br />  .addr $2104<br />  .byt &quot;Hello World&quot;, $FE<br />  .addr $2124<br />  .byt &quot;This is line 2&quot;, $FE<br />  .addr $2124<br />  .byt &quot;This is the last line&quot;, $FF<br />  ; control returns here<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Apr 23, 2011 5:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-04-23T02:36:45-07:00</updated>
<published>2011-04-23T02:36:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77099#p77099</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77099#p77099"/>
<title type="html"><![CDATA[Hacking adventures, anyone?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7676&amp;p=77099#p77099"><![CDATA[
Well, got a little curious my self when trying to help somebody in the right direction on NintendoAge with how to hack/change R.B.I. Baseball. Well, they got everything done basically but the title screen. I tried to do this part my self, just find a little routine and edit it a bit. But what I found wasn't as easy to explain:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">00:AF9F:A0 00     LDY #$00<br />00:AFA1:B9 12 B0  LDA $B012,Y @ $B012 = #$14<br />00:AFA4:85 2B     STA $002B = #$14<br />00:AFA6:B9 13 B0  LDA $B013,Y @ $B013 = #$B0<br />00:AFA9:85 2C     STA $002C = #$B0<br />00:AFAB:A9 67     LDA #$67<br />00:AFAD:85 2D     STA $002D = #$67<br />00:AFAF:A9 20     LDA #$20<br />00:AFB1:85 2E     STA $002E = #$20<br />00:AFB3:A9 0A     LDA #$0A<br />00:AFB5:85 2F     STA $002F = #$0A<br />00:AFB7:A5 2E     LDA $002E = #$20<br />00:AFB9:8D 06 20  STA $2006 = #$67<br />00:AFBC:A5 2D     LDA $002D = #$67<br />00:AFBE:8D 06 20  STA $2006 = #$67<br />00:AFC1:A0 00     LDY #$00<br />00:AFC3:B1 2B     LDA &#40;$2B&#41;,Y @ $B014 = #$6E<br />00:AFC5:8D 07 20  STA $2007 = #$00<br />00:AFC8:C8        INY<br />00:AFC9:C0 13     CPY #$13<br />00:AFCB:D0 F6     BNE $AFC3<br />00:AFCD:A9 13     LDA #$13<br />00:AFCF:18        CLC<br />00:AFD0:65 2B     ADC $002B = #$14<br />00:AFD2:85 2B     STA $002B = #$14<br />00:AFD4:A9 00     LDA #$00<br />00:AFD6:65 2C     ADC $002C = #$B0<br />00:AFD8:85 2C     STA $002C = #$B0<br />00:AFDA:A9 20     LDA #$20<br />00:AFDC:18        CLC<br />00:AFDD:65 2D     ADC $002D = #$67<br />00:AFDF:85 2D     STA $002D = #$67<br />00:AFE1:A9 00     LDA #$00<br />00:AFE3:65 2E     ADC $002E = #$20<br />00:AFE5:85 2E     STA $002E = #$20<br />00:AFE7:C6 2F     DEC $002F = #$0A<br />00:AFE9:D0 CC     BNE $AFB7<br />00:AFEB:20 4A B4  JSR $B44A<br />.....<br />00:B44A:68        PLA<br />00:B44B:85 2B     STA $002B = #$14<br />00:B44D:68        PLA<br />00:B44E:85 2C     STA $002C = #$B0<br />00:B450:A0 01     LDY #$01<br />00:B452:AE 02 20  LDX $2002 = #$07<br />00:B455:C8        INY<br />00:B456:B1 2B     LDA &#40;$2B&#41;,Y @ $B014 = #$6E<br />00:B458:8D 06 20  STA $2006 = #$67<br />00:B45B:88        DEY<br />00:B45C:B1 2B     LDA &#40;$2B&#41;,Y @ $B014 = #$6E<br />00:B45E:8D 06 20  STA $2006 = #$67<br />00:B461:C8        INY<br />00:B462:C8        INY<br />00:B463:B1 2B     LDA &#40;$2B&#41;,Y @ $B014 = #$6E<br />00:B465:C8        INY<br />00:B466:C9 FE     CMP #$FE<br />00:B468:B0 06     BCS $B470<br />00:B46A:8D 07 20  STA $2007 = #$00<br />00:B46D:4C 63 B4  JMP $B463<br />00:B470:C9 FF     CMP #$FF<br />00:B472:D0 E1     BNE $B455<br />00:B474:88        DEY<br />00:B475:98        TYA<br />00:B476:18        CLC<br />00:B477:65 2B     ADC $002B = #$14<br />00:B479:A8        TAY<br />00:B47A:A9 00     LDA #$00<br />00:B47C:65 2C     ADC $002C = #$B0<br />00:B47E:48        PHA<br />00:B47F:98        TYA<br />00:B480:48        PHA<br />00:B481:60        RTS<br /></div><br /><br />I have no idea where to even start on that routine just to put the title screen up. And there's even more code after the JSR! Anyone else run into this stuff [Bad code, anything of that matter.] trying to change something in a game?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Sat Apr 23, 2011 2:36 am</p><hr />
]]></content>
</entry>
</feed>