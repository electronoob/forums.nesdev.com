<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Micro Machines glitches</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Micro Machines glitches</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=12425">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=12425</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Feb 26, 2015 6:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">They probably didn't have any official documentation at all to work from. A lot of unlicensed NES work was done on the basis of reverse engineering.</div><br />Sure, and as far as I know, a big part of the reverse engineering process involved analyzing disassembles of official games. Surely they have analyzed every register on their own, but when you don't have any official documentation to guide you, the official software should provide you with guidelines for development. Just because the hardware you happen to be testing on behaves a certain way, you can't expect that behavior to be consistent across every revision (now or in the future) unless the manufacturers say so. That's common sense.<br /><br />Now, my point isn't necessarily that they shouldn't have used such advanced/obscure techniques, but that it was very risky to use them for something as silly as title/menu screens that don't even look particularly impressive. As far as I can see, all the glitches happen in blank areas, so instead of wasting 8 scanlines on an obscure technique to sync with the PPU, wouldn't it be simpler to change 2 colors every HBlank during those 8 scanlines? With 85 pixels of HBlank, a 21-pixel jitter wouldn't get in the way of 2 palette writes and 2 more to move the VRAM address away from the palette range before the next scanline starts. Besides palette changes, what other kinds of raster effects are they doing? Horizontal scroll changes? Those don't need perfect PPU synchronization either.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The game was also never released on Famicom, so even if the technique would have failed on that, it wasn't relevant.</div><br />Unlicensed or not, I'm sure developers would want their software to have a high compatibility rate, even if the initial target market was limited.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If it works, it works. The fact that it's annoying to emulate is our problem, not theirs.</div><br />This is not about emulation, but about using the hardware in a safe way so that random customers don't show up complaining that the game doesn't work properly for them. I don't know how much they tested this technique (and on how many different consoles) before considering it safe to use, but the fact that it was not used in any official release (not that they have looked at every officially released game, but still) should have raised some flags. They took a chance when they chose this approach (which wasn't even absolutely necessarily to begin with), and luckily for them no consoles had trouble with it. Things might have been differently if the game was released in Japan.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Thu Feb 26, 2015 8:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">It's so weird that this game goes through all this trouble to pull off some stupid raster effects in menu screens that could have easily used timed code all the way, with the beginning of the frame and/or a sprite 0 hit as a reference point. But no, they decided to use an obscure/undocumented aspect of the console, that's not even guaranteed to work on all revisions (didn't OAM read back fail on some Famicom models?).</div><br /><br />From the look of things, I suspect that they hired a bunch of devs who used to work on Atari 2600 games.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">zeroone wrote:</div><div class="quotecontent">I think you mean $2004 and it seems to be doing all that polling on the same scanline (the sprite 0 hit scanline).<br /></div>I meant what I said, exactly as I said it.<br /><br />It polls $2002, waiting for sprite 0 hit. That provides a 6-7 cycle/18-21 pixel jitter.<br /><br />It then tests $2004 over eight successive scanlines, adjusting the PPU/CPU phase by one cycle (+1 pixel / -2 pixels) if necessary on each of those scanlines.</div><br /><br />Agreed.  <br /><br />But, the wiki does not provide enough information about $2004 reads for me to enhance my emulator.  How anyone solved this for Nintendulator or Nestopia is a mystery.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Thu Feb 26, 2015 10:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">But no, they decided to use an obscure/undocumented aspect of the console, that's not even guaranteed to work on all revisions (didn't OAM read back fail on some Famicom models?).</div><br />It would not be the only time they do stuff like this, literally every single one of their Master System games rely on the revised VDP in order to have a higher resolution, <em>despite the fact there isn't any single official game using it</em>. I guess that their reverse engineering consisted on disassembling a couple of games to get a vague outline then poking stuff to figure out the rest.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Thu Feb 26, 2015 10:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not surprisingly, Bee 52 is also quite glitchy on my emulator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Thu Feb 26, 2015 10:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dug something up from <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6424&amp;start=15" class="postlink">an older thread</a>:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In the title screen it reads $2004 8 times on scanlines 16..23 around scanline clock ~310: <br /><br />FD6E BIT $2004 <br />FD71 BMI $FD73 <br />FD73 ... <br /><br />So it adds an extra cycle whenever the value returned by $2004 has the top bit set. It's exploiting the fact that at certain times $2004 read always returns $FF and at certain times proper values from OAM, depending on which PPU cycle the read falls on. That way they get a more precise CPU-PPU sync. </div><br /><br />Which PPU cycles will $2004 return $FF and which ones will it return OAM values?  Of those that return OAM values, which OAM values are returned?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Feb 26, 2015 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Did you find this page on the wiki? <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation">http://wiki.nesdev.com/w/index.php/PPU_ ... evaluation</a><!-- m --><br /><br />It really should contain enough information for what you are doing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Thu Feb 26, 2015 11:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Did you find this page on the wiki? <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation">http://wiki.nesdev.com/w/index.php/PPU_ ... evaluation</a><!-- m --><br /><br />It really should contain enough information for what you are doing.</div><br /><br />I implemented that logic as best as I could interpret the page.  Does $2004 effectively return whatever was last read from either primary or secondary OAM?  For instance, at the bottom:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Read the first byte in secondary OAM (while the PPU fetches the first two background tiles for the next scanline)</div><br /><br />Does that mean that $2004 returns the first byte in secondary OAM?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Feb 26, 2015 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Sure, and as far as I know, a big part of the reverse engineering process involved analyzing disassembles of official games. Surely they have analyzed every register on their own, but when you don't have any official documentation to guide you, the official software should provide you with guidelines for development. Just because the hardware you happen to be testing on behaves a certain way, you can't expect that behavior to be consistent across every revision (now or in the future) unless the manufacturers say so. That's common sense.</div><br />Without any official documentation, there's no reason at all to assume the behaviour isn't consistent. That's not common sense at all. Why would you assume that something that works now wouldn't later? You can only find this by being told by the designers, or testing the revisions in question, and obviously you can't test future revisions.<br /><br />You act like disassembling a game isn't a monumental effort of its own. It's not like they could just set a breakpoint in an emulator and try out 100 games in an afternoon like we can today. Think of how much time (i.e. think of how much it <em>cost</em>) to disassemble a game for them. Every one they disassembled was burning time out of their development budget.<br /><br />Imagine they know this technique works from their testing. A programmer shows it to their lead. The lead says &quot;no don't do that. we haven't seen that in a game before. Go disassemble games until you find one that does this and then you will have my permission.&quot; If a lead used this strategy, the game would never be finished.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Unlicensed or not, I'm sure developers would want their software to have a high compatibility rate, even if the initial target market was limited.</div><br />You can't target an unknown platform. The only way to know what is out-of-design and what's not is to have the designer tell you. If you're not licensed, you're not given that information.<br /><br />There's really no reason to assume any particular technique is taboo with the information they had.<br /><br />If your goal is really to make the &quot;most compatible&quot; software possible, skipping the licensing process and relying entirely on reverse engineering is probably the <em>last</em> thing you should do. If you've accepted that they're willing to go rogue to cut costs, it's obvious that they're willing to take a risks like that to get their software out at lower cost to them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is not about emulation, but about using the hardware in a safe way so that random customers don't show up complaining that the game doesn't work properly for them. I don't know how much they tested this technique (and on how many different consoles) before considering it safe to use, but the fact that it was not used in any official release (not that they have looked at every officially released game, but still) should have raised some flags. They took a chance when they chose this approach (which wasn't even absolutely necessarily to begin with), and luckily for them no consoles had trouble with it. Things might have been differently if the game was released in Japan.</div><br />I just tested it on my Famicom, and it is indeed slightly glitchy looking. There is a little bit of white marks on the right hand side of the screen, and a bit of 1-line jitter up and down on the character select screen. It doesn't make the game unplayable even slightly. It doesn't make any of the names or graphics unreadable. It doesn't put garbage faces on the characters. It's just a couple of white marks and a little bit of jitter. This is not to mention that the actual gameplay takes place entirely on screens without this technique, so playing the game is entirely unaffected.<br /><br />As far as bugs go, this is pretty acceptable. It's not GOOD to have minor graphical glitches on the screen, but this is such a mild bug they might not even consider it worth fixing in a revision if they sold a lot of units and had an opportunity to get a new run of PRG ROMs made. How many well selling NES games had far worse problems than this? Lots of well selling games today even have bugs worse than this that the company doesn't want to pay to patch.<br /><br />This is all moot, though, if they <em>had</em> released it on Famicom, they would have tested that platform and fixed the problem (or possibly decide it didn't need fixing). It seems really strange to me to complain about a bug that wasn't even present on any platform the release was for (i.e. not actually a bug).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Feb 26, 2015 12:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Without any official documentation, there's no reason at all to assume the behaviour isn't consistent.</div><br />I agree with this regarding many other behaviors, but this one in particular is just too damn weird to be considered stable... If reverse engineering takes time, do you think they studied in depth what the values being read back from $2004 even meant? Do you think they got to figure out the sprite evaluation logic based on those reads? At first glance, a register that returns quickly changing values when you read it in a loop looks like the last think you'll want to trust.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's not common sense at all. Why would you assume that something that works now wouldn't later?</div><br />Because it's weird even when it's working. The values change faster than the CPU is able to keep up with and you have to use all sorts of trickery to do something useful with that register. Doesn't sound like something that was meant to be used like that. Again, not that I'm against being creative with the resources available, but I wonder if they were careful enough while going this route, considering that there were safer alternatives.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You act like disassembling a game isn't a monumental effort of its own.</div><br />And figuring out the details of the rendering logic inside the PPU by fiddling with its registers isn't?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's really no reason to assume any particular technique is taboo with the information they had.</div><br />It's a register returning rapidly changing values that the CPU can hardly keep up with unless the OAM is organized in specific ways. It's weird.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I just tested it on my Famicom, and it is indeed slightly glitchy looking. There is a little bit of white marks on the right hand side of the screen, and a bit of 1-line jitter up and down on the character select screen. It doesn't make the game unplayable even slightly.</div><br />Certainly not, but the reason they used the technique in the first place was so that they could make the game look better (otherwise they would have settled for less colors and effects), while glitches like these make the game look worse. If they had caught the compatibility issues earlier on, I'm sure they'd have done things differently.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It seems really strange to me to complain about a bug that wasn't even present on any platform the release was for (i.e. not actually a bug).</div><br />I wasn't complaining. I don't give a shit if a game I don't play much (although I do sorta like Micro Machines) has glitches here and there or whether emulator authors are having trouble running it. If you read my first post in this thread again you'll see that I was just surprised that they did it the way they did instead of using a less complex technique or even not implementing the effects at all, since they don't add much to the experience. Maybe you are right and they simply didn't perceive their choices as risky, or just didn't care.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 26, 2015 1:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Without any official documentation, there's no reason at all to assume the behaviour isn't consistent.</div><br />I agree with this regarding many other behaviors, but this one in particular is just too damn weird to be considered stable... If reverse engineering takes time, do you think they studied in depth what the values being read back from $2004 even meant? Do you think they got to figure out the sprite evaluation logic based on those reads? At first glance, a register that returns quickly changing values when you read it in a loop looks like the last think you'll want to trust.</div><br />You'd be surprised. The Apple II had one of the registers return something from the state of the video circuitry. Its <a href="http://www.folklore.org/StoryView.py?story=Apple_II_Mouse_Card.txt" class="postlink">mouse card</a> used that to synchronize to vertical blanking.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Feb 26, 2015 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If reverse engineering takes time, do you think they studied in depth what the values being read back from $2004 even meant? Do you think they got to figure out the sprite evaluation logic based on those reads? At first glance, a register that returns quickly changing values when you read it in a loop looks like the last think you'll want to trust.<br />...<br />I wonder if they were careful enough while going this route, considering that there were safer alternatives.<br />...<br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">You act like disassembling a game isn't a monumental effort of its own.</div><br />And figuring out the details of the rendering logic inside the PPU by fiddling with its registers isn't?</div><br />I can't speculate very specifically about what they knew, or how much time they spent on circuit analysis vs. disassembly, but given the unusual solutions present in Codemasters games, I'd guess they probably were able to do more analysis of the machine than disassembly of other software. I do think that at the time, with the tools available, disassembly was a lot more time intensive / expensive to do than hardware analysis. That's not at all the case now, of course, but I think it was for them.<br /><br />I doubt they knew all the consequences and behaviour of $2004, but they knew enough to figure out a way to write some sort of scanline timer with it, and it worked reliably for them. Remember their goal was to build software for the machine, not a clone of the machine itself. They only needed to know things that help you build software.<br /><br />Were they careful enough? I'd say yes. If it ran without problem on all target platforms, the risk they were taking paid off.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I wasn't complaining. I don't give a shit if a game I don't play much (although I do sorta like Micro Machines) has glitches here and there or whether emulator authors are having trouble running it. If you read my first post in this thread again you'll see that I was just surprised that they did it the way they did instead of using a less complex technique or even not implementing the effects at all, since they don't add much to the experience. Maybe you are right and they simply didn't perceive their choices as risky, or just didn't care.</div><br />I dunno, I guess to me... I look at this and see a successfully finished game, and I admire it for being that. You can look back on any game ever released, with all the knowledge gained across the years in your hindsight, and find all sorts of things and say &quot;that's not how I would have done it&quot;. Maybe it puts me on the defensive because in my professional life I've seen so much time wasted in useless arguments about how something should be implemented. And you know, most of the time a bad implementation is not even how the developer wanted to do it, really, but a consequence of the limited time and money available.<br /><br />If I were manging a project, I would not demand a perfect elegant solution to the problem I have from a (cheap) junior programmer. Conversely, I would expect an (expensive) experienced programmer not to waste my money refactoring an inelegant solution that works fine. The only place for perfect code is where the scope is small enough that time and money are irrelevant.<br /><br />As far as I can tell, this feature in Micro Machines worked perfectly, so in that respect I kind of feel it's above reproach here. Obviously with what we know and practice now it's not a good technique to use, but I see nothing at all wrong with it in its original context.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Thu Feb 26, 2015 4:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />From the wiki, $2004 returns $FF for PPU cycles 1--64 and likely not $FF for the rest of the scanline.  Maybe that's the only thing that is relevant here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Thu Feb 26, 2015 4:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if (rendering)<br />{<br />&nbsp; &nbsp;if (current_cycle &lt; 64)<br />&nbsp; &nbsp; &nbsp; return_value = 0xFF;<br />&nbsp; &nbsp;else if (current_cycle &lt; 256)<br />&nbsp; &nbsp; &nbsp; return_value = 0x00;<br />//Micro Machines relies on this:<br />&nbsp; &nbsp;else if (current_cycle &lt; 320)<br />&nbsp; &nbsp; &nbsp; return_value = 0xFF;<br />//and this:<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp; &nbsp; return_value = sprite_buffer&#91;0&#93;;<br />}<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Thu Feb 26, 2015 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">James wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">if (rendering)<br />{<br />&nbsp; &nbsp;if (current_cycle &lt; 64)<br />&nbsp; &nbsp; &nbsp; return_value = 0xFF;<br />&nbsp; &nbsp;else if (current_cycle &lt; 256)<br />&nbsp; &nbsp; &nbsp; return_value = 0x00;<br />//Micro Machines relies on this:<br />&nbsp; &nbsp;else if (current_cycle &lt; 320)<br />&nbsp; &nbsp; &nbsp; return_value = 0xFF;<br />//and this:<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp; &nbsp; return_value = sprite_buffer&#91;0&#93;;<br />}<br /></div></div><br /><br />That does minimize the effect:<br /><br /><img src="http://i.imgur.com/P3NhKYM.png" alt="Image" /><br /><br />That black line flickers.  Many frames are completely line-free.  It's almost doing the job.<br /><br />I'm not sure where to take it from here though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Feb 26, 2015 6:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Micro Machines glitches</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sprite_buffer[0]</tt> ?<br /><br />Is this the primary OAM (max. 64 sprites) or the secondary OAM (max. 8 sprites)?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>