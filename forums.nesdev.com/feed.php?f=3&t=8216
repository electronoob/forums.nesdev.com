<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8216" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-10-18T23:14:00-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8216</id>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2011-10-18T23:14:00-07:00</updated>
<published>2011-10-18T23:14:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85255#p85255</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85255#p85255"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85255#p85255"><![CDATA[
I would challenge that claim that SNES CPU/PPU timing is more well known than NES. I see nothing in any doc regarding which master clock read data comes from, or write data hits.<br /><br />Unfortunately, the same testcase you're running into on the NES wouldn't translate directly to the SNES, since the vblank flag and NMI there are generated on the CPU, and I don't see any mention of NMI suppression or a readback glitch with $4210 or $4200. I'd suggest that SNES timing isn't that well understood either, but the current state of the art for CPU/PPU interleaving there happens to match, since I don't see any particular register setups where the subtleties would be visible. On the NES, the VBL/NMI interaction is about the only one I can think of, as it requires a register that is readable, that can also have the value changing underneath it across the read cycle, and that also has some other functionality dependent on writes elsewhere, and where the update portion is running at a higher frequency than the CPU.<br /><br />Emulators tend to start top down, because that's usually how the documentation tends to approach things.<br /><br />Incidentally, if Q's visual 2A03 is to be believed, the divided CPU clock is 50/50 in the NES.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Tue Oct 18, 2011 11:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2011-10-18T17:58:58-07:00</updated>
<published>2011-10-18T17:58:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85248#p85248</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85248#p85248"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85248#p85248"><![CDATA[
<div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent"><br />He means test 7 out of ppu_vbl_nmi,<br /></div><br /><br />I've found a WIP in my forum, date 2008. See if it makes sense to you (some english fixes).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Fixed the nmi_on_timing test. The VBlank_flag_clear is set to <strong>true</strong> right on 2000h write, but this makes the NMI to trigger in a wrong time. The fix was verifying if VBlank_flag_clear is <strong>true</strong> before requesting a CPU NMI.<br /><br />- Such flag is set to <strong>false</strong> on the next instruction, since the number of PPU cycles have been expired.<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Tue Oct 18, 2011 5:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2011-10-18T16:42:30-07:00</updated>
<published>2011-10-18T16:42:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85245#p85245</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85245#p85245"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85245#p85245"><![CDATA[
Well, guess I'm on my own then. May as well leave 07 failing by one cycle. I don't see much point in hacking an inaccurate workaround just to get points on some arbitrary checklist, when the result would likely be wrong for every other register on the system anyway.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Back to the subject, that's what I fear while running most of the blargg's tests. An easy hack (or workaround) would get a pass. That's "unfair", a penalty in your emulation scheme.<br /></div><br /><br />Agree completely. I actually have about 1,000 SNES tests, but I don't release them because I don't want people trying to pass them explicitly to the detriment of doing things right.<br /><br />Fundamentally, there is a core minimum level necessary to express all hardware effects cleanly and without unnatural checks and hacks/workarounds. Whether that level is at the cycle-level, or if we have to simulate phi1/phi2 phases, or we have to simulate the warming up of transistors as the system runs ... there is a point where we can perfectly simulate all observable behaviors.<br /><br />And that point is, to me, quintessential to preservation. No, emulators do not have to work at this ultimate lower-level. We only need ONE emulator that does it, and documents all of the lowest-level timing information. And from here, we can abstract general-purpose playable emulators that take appropriate shortcuts where applicable. The biggest and most obvious being the elimination of the "pseudo-random" effects of things like power-on states for RAM, bizarre hardware glitches, etc ... stuff that no official or sane homebrew software would ever rely on.<br /><br />It's very disappointing to me, because I believed the NES scene was at this point already. What I've discovered is that cycle-level PPU timing for the NES is "easy" (once you know how it works; it was still a reverse-engineering marvel that it was figured out in the first place), and can be done in 10-15KB of code. I mistook it as being more amazing because the SNES PPU is ungodly complex by comparison. Aside from that, NES CPU timing actually seems, in some ways, to be more primitively understood than SNES CPU timing :/<br /><br />I just really feel like, across the board for every system ... we start emulation as a top-down approach, instead of the bottom-up approach that it should be. And it just takes so much longer to reach perfection this way, it's not even funny. You don't build you house by starting with the roofing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Tue Oct 18, 2011 4:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2011-10-18T15:16:55-07:00</updated>
<published>2011-10-18T15:16:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85236#p85236</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85236#p85236"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85236#p85236"><![CDATA[
With the APU, it isn't much of an issue, since all of its features are clocked at either the CPU clock, or one half that.<br /><br />As for the fears of what the Right Way is, there's only three ways to determine that:<br /><br />Get a rather fast logic analyzer, and oversample all the pins between the CPU and PPU, and see what the waveforms look like. Depending on how fast the LA is, there'll be some quantization error, but above 20MHz or so that shouldn't matter.<br /><br />Watch the clock, R/W, NMI, address, and data lines on a Fast Enough oscilloscope (probably take several, given the number of signals) and see what things look like in analog.<br /><br />Get a Visual 2A03 and a Visual 2C02 set up and connected with each other, and run a simulation trace to give you the equivalent of the waves above. This will probably be subject to certain idealistic simplifications regarding transistor speeds, trace delays, etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Tue Oct 18, 2011 3:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2011-10-18T14:55:25-07:00</updated>
<published>2011-10-18T14:55:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85227#p85227</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85227#p85227"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85227#p85227"><![CDATA[
Even lacking proper hardware knowledge, I don't see a logic that reproduces a CPU "half-cycle" as you say very often. From my viewpoint, we deal with 3 modules: CPU, APU and PPU. Well, the mother-thing is the CPU - we deal with instructions being executed as "steps", read a byte from a given memory adress, add with the accumulator register etc., and then the PPU is "clocked". Actually, I must call APU before the PPU because of DMC DMA thing, but that's another kind of abstraction.<br /><br /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent"><br />The suppression behavior (test 06) could be reproduced either with some trickery inside the PPU<br /></div><br /><br />Back to the subject, <strong>that's what I fear</strong> while running most of the blargg's tests. An easy hack (or workaround) would get a pass. That's "unfair", a penalty in your emulation scheme.<br /><br />Remember that even the Nintendo and its Virtual Console doesn't emulate the things perfectly. I played Star Fox 64 recently and... wow, it has lots of emulation quirks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Tue Oct 18, 2011 2:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-10-18T00:06:25-07:00</updated>
<published>2011-10-18T00:06:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85196#p85196</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85196#p85196"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85196#p85196"><![CDATA[
<div class="quotetitle">Zelex wrote:</div><div class="quotecontent"><br />If no matter what its startup state dependent, which you can't easily test for, then most games should not rely on the PPU/CPU sync behavior for correct operation. Therefore, it should be pretty irrelevant, no? Hack in correct behavior for the one or two games that require it, and you make your life easier in the process.<br /></div><br />I'm pretty sure you could detect the PPU syncs by seeing how the OAM readback behaves (which bytes get corrupted), but of course no games rely on that. But some emulators have goals besides just getting games to run, which in fact doesn't require that accurate low level emulation at all (just look at FCEUX, it's scanline based).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Tue Oct 18, 2011 12:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2011-10-17T21:02:17-07:00</updated>
<published>2011-10-17T21:02:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85195#p85195</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85195#p85195"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85195#p85195"><![CDATA[
What I meant was that at some point or another, you will hit a level where you technically don't (or can't) know the specific timing, and that the current knowledge is as good as the set of tests we have so far. Somewhere in there, emulation has to adopt some sort of compromise between simulating every last detail, and abstracting slightly in a way that maintains software compatability. Otherwise you end up with scope creep, and suddenly you're trying to simulate process variations, or speed vs temperature variations, and have to find a way to characterize some particular chip. If you aren't trying to hit that point (and that point is rather extreme) the usual compromise is to emulate a system that, to every observing program known, is indistinguishable from the Real Thing within reason. Power-up synchronization is something that is fairly reasonable for an emulator to force to a case that cleans up some edge issues.<br /><br />Even at the HDL level, compromises have to be made. Partly because we can't know certain things without doing a full RE of a die shot (and as awesome as visual 6502 is, their simulator is simulating ideal transistors in a lot of spots, because reality is messy) or because certain constructs don't work with modern logic. The NMOS 6502 is full of pass gates doubling as dynamic latches, which is something you just can't really do in an FPGA. In particular, dynamic level sensitive latches are not (reasonably) synthesizable, so they have to be 'emulated' as some form of edge sensitive flip flop. That's going to be a somewhat lossy process, but most of the time it doesn't matter in practice, due to guarantees made by other parts of the hardware (such as ensuring none of the input signals will change across the latch enable) <br /><br />Other compromises come in, to deal with hardware details such as having to share one ram chip among everything, and ways to deal with that.<br /><br />As for the specifics...<br /><br />What we care about is observable behavior. In this case, we have test roms, that run on the actual NES, and show repeatable behavior. As anomie's timing doc says, when you give a proclamation of "X happens on dot Y", there's at least half a dot of uncertainty as to exactly when that happens. Most of the time, that doesn't interact with some other behavior, but when it does, those uncertainties come into play.<br /><br />Most of the PPU regs are not readable, so if you have some event you can get a PPU cycle accurate test for, they should have repeatable behavior.<br /><br />Also, cycles are not atomic, monolithic things. Nothing happens instantly, and the chips we're dealing with are more complex than those that can be handled by a single level of logic. Ergo, to "properly" emulate the CPU, sans abstractions and "hacks", you'd need to drop down to at least a half-cycle, and emulate the sub-cycle signalling.<br /><br />All of these details fall out of what the CPU expects and provides, regarding M2, R/W, and the A &amp; D buses. It expects peripherals to start driving the data for a particular address around the time M2 goes high, expects that data to stabilize before M2 goes low, and latches the value on the pins when it does. Likewise, when it writes, peripherals know that M2 means the CPU's trying to write, but they don't know how long it will take the value to settle. When M2 drops, they know the CPU thinks it's had enough time.<br /><br />The suppression behavior (test 06) could be reproduced either with some trickery inside the PPU, delaying some signals more than others, etc, by having the CPU ignore NMI pulses shorter than a cycle, or by having the NMI output of the PPU be registered in a fashion that lets the clear and set logic settle such that there are no externally visible glitches on the line. (glitch in this case would be the hardware definition, where you see a spurious edge during switching) Any of these three could be what the Real Thing does, but they're otherwise indistinguishable in that test, so you usually implement whichever one fits your language best.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Mon Oct 17, 2011 9:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2011-10-17T20:03:50-07:00</updated>
<published>2011-10-17T20:03:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85194#p85194</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85194#p85194"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85194#p85194"><![CDATA[
<div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent"><br />It's hardly the most fundamental aspect.<br /></div><br /><br />The reason I disagree is because changing this alignment will require changing all timing, everywhere. And without having absolute values, you can't give definitive "this behavior happens at this cycle." Take the part where it caches the BG&amp;&amp;OAM enable for skipping the extra PPU dot. Nobody says "it happens at X=338", because where it happens depends on how you choose to guess how the interleaving works.<br /><br />To me, this is major. This is the core foundation of your emulator. You don't want to build your castle on top of a poor foundation. And nobody can document the completely accurate process of how the hardware works.<br /><br />Instead, everyone plays games of fiddling with numbers and hold latches and stuff until they can pass a given set of test ROMs that cover maybe 5% of the total possible combinations. You may nail blargg's $2000/$2002 timing tests, but are there also timing tests for $2003, $2004, $2006? Or what about with the more complex 64 PPU registers on the SNES?<br /><br />Minor flaws in the lowest level tend to multiply as you get to higher and higher levels of operation, requiring increasingly complicated hacks to match behaviors. If you want to match hardware in all your tests, you need to get everything exactly right, always.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />A read that hits on that cycle will return the state of that flag early in the cycle, whereas a write to $2000 won't hit the register (and the logic that does VBLANK &amp; ENABLE) until the end of the cycle, after the vblank flag drops.<br /></div><br /><br />Well, the issue is that three entire PPU cycles complete between each CPU cycle. And with our stock "don't know/care" approach of CPPP CPPP CPPP for both reads and writes, that means the CPU $2002 read or $2000 write will always occur on the very edge of every third PPU cycle.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Mon Oct 17, 2011 8:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2011-10-17T19:45:48-07:00</updated>
<published>2011-10-17T19:45:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85193#p85193</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85193#p85193"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85193#p85193"><![CDATA[
He means test 7 out of ppu_vbl_nmi,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />07-nmi_on_timing<br />----------------<br />Tests NMI occurrence when enabled near time<br />VBL flag is cleared.<br /><br />Enables NMI one PPU clock later on each line.<br />Prints whether NMI occurred.<br /><br />00 N<br />01 N<br />02 N<br />03 N<br />04 N<br />05 -<br />06 -<br />07 -<br />08 -<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Mon Oct 17, 2011 7:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2011-10-17T19:26:24-07:00</updated>
<published>2011-10-17T19:26:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85192#p85192</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85192#p85192"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85192#p85192"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />Zepper, I realize it was a while ago, but may I ask how you fixed test 07, if you still recall?<br /></div><br /><br />What test are you talking about?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Mon Oct 17, 2011 7:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2011-10-17T19:26:46-07:00</updated>
<published>2011-10-17T19:19:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85191#p85191</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85191#p85191"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85191#p85191"><![CDATA[
It's hardly the most fundamental aspect. <br /><br />If I'm reading the expected output correctly for the tests, assuming 0 is based the same for each, what we want is something that will produce this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cyc  0 1 2 3 4 5 6 7 8<br />stat V V V V V V - - -<br />ctrl N N N N N - - - -<br /></div><br /><br />Where stat is whether $2002.d7 read back as true or not, ctrl is whether an NMI occurs with a write to $2000 on that dot.<br /><br />This looks perfectly reasonable, given the assumption that the PPU regs update at or near the end of it's cycle. The internal vblank flag (NMI hold in your code I believe) gets cleared during cycle 5. A read that hits on that cycle will return the state of that flag early in the cycle, whereas a write to $2000 won't hit the register (and the logic that does VBLANK &amp; ENABLE) until the end of the cycle, after the vblank flag drops.<br /><br />Here's a rough timeline:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">4R 4F 5R 5F 6R<br />      R<br />         C<br />            W<br /></div><br /><br />R is the read, C is when the vblank flag is cleared, W is when the written data hits the reg for $2000.<br /><br />One other thing that comes to mind, though I don't think it applies here, is that if they decided to synchronize the CPU signals to the PPU clock for whatever reason, that would add a 1-2 cycle latency. It's exceedingly unlikely, since it would mean stuffing another bit or two worth of flipflops on all the data lines, M2, and R/W, and would be somewhat unneccesary.<br /><br />One last thing is that IIRC, NMI coming into the CPU might be synchronized, though with the divider, there's some question as to which clock it's synchronized to. If so, NMI pulses shorter than a CPU cycle might be invisible.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Mon Oct 17, 2011 7:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2011-10-17T18:12:22-07:00</updated>
<published>2011-10-17T18:12:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85187#p85187</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85187#p85187"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85187#p85187"><![CDATA[
So then the consensus is that nobody knows perhaps <em>the</em> most fundamental aspect of a parallel-operation system. Wonderful =(<br /><br />In that case, short of adding a hack to force-block an NMI, I can see no way to pass blargg's test 07, without subsequently failing test 03. And yet others seem to solve it. So is everyone else special casing the last point that NMI can be enabled and blocking it; or is there some other trick? If the latter, please explain, would be most helpful :/<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Mon Oct 17, 2011 6:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2011-10-17T17:29:10-07:00</updated>
<published>2011-10-17T17:29:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85186#p85186</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85186#p85186"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85186#p85186"><![CDATA[
Let's see if some diagrams can help a bit. Head to the bottom if you want the too long, didn't read summary. This is gonna be a bit heavy on clock details.<br /><br />First case, generic 6502. You have an input clock, nominally square, that looks something like the following. Call it mclk for lack of a better term.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">mclk: 111111000000111111000000....<br /></div><br /><br />Internally, the CPU needs a few more events than that can provide to be able to process things, and also needs something suitable to use as a signal to external hardware when the address and data are valid. These are phi1 and phi2 (phi2 tends to be listed as M2 in pinouts on the NES). Skipping the hardware that generates it (it's a mess I can barely follow) the outputs look like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">mclk: 111111000000111111000000....<br />phi1: 011110000000011110000000....<br />phi2: 000000011110000000011110....<br /></div><br /><br />phi1 updates the CPU internals, phi2 signals external hardware that it should provide data for reads, and expect data for writes. In reality, they're closer to the full width of the pulses than the above diagram, so for the rest of this, we'll treat it as if phi2 is 1 whenever mclk is 0.<br /><br />On the NES and SNES, the CPU is getting fed a 21MHz clock signal, that is divided internally to form the mclk signal for the actual 6502 or 65816 core. The unknown bit is whether that divider generates a 50/50 square wave, or some lopsided one. The SNES in particular could be quite likely to generate a lopsided one, as that would give the external hardware the most slack at the lower clock rates. Below, NES50 is a 50/50 NES freq wave, NES33 is a 33/66, and the SNS5 F/S/X and SNES F/S/X waves are the 3 SNES freqs at 50/50, and at a non-square rate I was planning on using in my fpga. F = /6, S = /8, X = /12<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">21MHz: 101010101010101010101010101010101010101010101010<br />NES50: 111111000000111111000000111111000000111111000000<br />NES33: 111100000000111100000000111100000000111100000000<br />SNS5F: 111000111000111000111000111000111000111000111000<br />SNS5S: 111100001111000011110000111100001111000011110000<br />SNS5X: 111111000000111111000000111111000000111111000000<br />SNESF: 111000111000111000111000111000111000111000111000<br />SNESS: 111000001110000011100000111000001110000011100000<br />SNESX: 111000000000111000000000111000000000111000000000<br /></div><br /><br />Note how the 0 periods on the non-square ones are longer. This gives external devices (rom, etc) more time to come up with data and get it stabilized.<br /><br />As for what exactly phi2 represents, it being high signifies the following:<br />The address bus will stay stable while it is high<br />If it's a write, the data bus will stay stable while it is high<br />If it's a read, the external device should drive the data, and hold it stable while m2 stays high<br /><br />Now let's take a closer look at the PPU's place in all this. Here are the 21MHz clock, NES33 clock, NES50 clock, and a 50/50 guess at the PPU's post-divider clock<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">21MHz: 101010101010101010101010101010101010101010101010<br />NES33: 111100000000111100000000111100000000111100000000<br />NES50: 111111000000111111000000111111000000111111000000<br />PPU:   110011001100110011001100110011001100110011001100<br /></div><br /><br />You can see there the x3 relationship, this is for the more trivial case of powerup synchronization. Noting that the M2 phase covers two full PPU cycles, we can surmise that the CPU-facing read hardware does not run directly at the full PPU clock rate, where the PPU would just treat M2 being high as meaning to do a read or write from the CPU that cycle. If it did, most of the accesses would see two back to back ones, rather than the single access it is. Also, it means the value would possibly jitter on the data bus while M2 is high.<br /><br />There is a much more likely situation for the PPU, and that's where the CPU-facing logic is controlled almost entirely by M2 and R/W.<br /><br />At the rising edge of M2, for a read, the PPU latches the appropriate data (status flags, $2007 buf, palette data, or OAM[$2003]) onto it's external data lines. This value will stay steady, regardless of what happens underneath. For $2002 and $2007, it also sets a flag indicating that the NMI flag should be cleared, or that the buffer should be refilled. Presumably, the PPU would act on this flag either at one of the following PPU clock edges (for the clear, could be either rising or falling), or at the start of the next memory cycle (2 PPU cycles long). Alternatively, it could treat a $2002 read as being an asynchronous clear of the NMI latch, though that might have some race issues with latching it for returning to the CPU. For the cases that could hit either edge, <br /><br />For a write, the PPU could either look for the rising edge, and apply the write at one of the next PPU edges, or could wait until M2 falls before applying. Writes to $2005 would fill the latch used to reset the VRAM address, writes to $2006 would fill the temp latch that gets copied into aforementioned scroll regs, and set a flag to flush it to the VRAM address. Writes to $2007 probably set the buffer and a flag indicating a pending memory request. Writes to $2000 or $2001 probably go straight to the register, since from the PPU's perspective, they're read-only. Writes to $2004 probably write the value, and probably set an increment flag that the PPU will act on at it's convenience. One possibility for $2007 writes that comes to mind, is that since they're suppressed during rendering anyways, they might bypass the buffer, and drive the next two PPU cycles directly, since the data will stay steady across the entire access period.<br /><br />For the SNES, the waves look something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">21MHz: 101010101010101010101010101010101010101010101010<br />SNS5F: 111100001111000011110000111100001111000011110000<br />SNESF: 111000001110000011100000111000001110000011100000<br />PPU:   110011001100110011001100110011001100110011001100<br /></div><br /><br />Either with a 50/50 CPU clock or a lopsided one, there's still only one PPU cycle covered by M2.<br /><br />Determining what case actually covers reality could be done trivially with an oscilloscope that can show you M2 against the 21MHz input. Determining it programmatically is a little trickier, given that whether something happens on the positive or negative edge generally just delays it a cycle or not, and the CPU can't read from the PPU fast enough to see the difference. Inspection of the die shots that are floating around might be able to shed some light on the particulars as well, but I haven't gotten the hang of reading them yet, and I think the 2C02 one is still missing a number of layers.<br /><br />What this means for emulation:<br /><br />Your approach of doing CPU reads 4 cycles earlier than writes working suggests the PPU latches the output on reads at the rising edge of M2, and latches incoming data on writes at the falling edge. It may not be 100% correct to the hardware, but it's probably within what can be determined without an oscilloscope and/or a logic analyzer with a rather high oversampling rate.<br /><br />As you can see above, it's not as simple as just interleaving the CPU and PPU, though for a lot of things, there's no visible difference.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Mon Oct 17, 2011 5:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zelex]]></name></author>
<updated>2011-10-17T12:59:54-07:00</updated>
<published>2011-10-17T12:59:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85175#p85175</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85175#p85175"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85175#p85175"><![CDATA[
If no matter what its startup state dependent, which you can't easily test for, then most games should not rely on the PPU/CPU sync behavior for correct operation. Therefore, it should be pretty irrelevant, no? Hack in correct behavior for the one or two games that require it, and you make your life easier in the process.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4854">Zelex</a> — Mon Oct 17, 2011 12:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-10-17T10:16:52-07:00</updated>
<published>2011-10-17T10:16:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85167#p85167</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85167#p85167"/>
<title type="html"><![CDATA[CPU&lt;&gt;PPU order of operations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8216&amp;p=85167#p85167"><![CDATA[
Are there any solid, easy to code tests for which alignment you're on? It might be useful as part of the seed for a PRNG.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Oct 17, 2011 10:16 am</p><hr />
]]></content>
</entry>
</feed>