<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Some questions about the memory map</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/">https://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Some questions about the memory map</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/viewtopic.php?f=12&amp;t=17632">https://forums.nesdev.com/viewtopic.php?f=12&amp;t=17632</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Señor Ventura</b> [ Sun Aug 05, 2018 1:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello.<br /><br />Here is a diagram of the memory map of the 65816:<br /><br /><img src="https://image.ibb.co/dcB4ve/memory_map.jpg" alt="Image" /><br /><br /><br /><br />Well, i have some questions about this table (or maybe some notions that i need to verify):<br /><br />1) The total amount of directionable memory comes determined by data bus bandwidth (24 bits --&gt; 16 bits of data adressing, and 8 bits of data banking)... Am I right?.<br /><br />2) According to this, 16 bits means in hexadecima that you have 16 positions of memory in this way (0, 1, 2, 3 , 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)... Is it correct?.<br /><br />3) The diagram shows an horizontal column from $FF to $00 (the orden of it is caused by little endian storing format?), but there are some blocks without reference, but still some of it must be missing.<br /><br />We have vertically from $0000 to $FFFF, and the horizontally $FF to $00, but there have blocks to be missing, What is happening?.<br /><br />4) In all of that diagram is supossed that there are 16MB, and some of these are reserved fro WRAM, VRAM, ARAM, some SRAM for cartridges, and may be another not mentioned ones... which could be the total amount of directionable memory in ROM with a custom decoder?.<br /><br /><br />Thank you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Aug 05, 2018 1:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some parts of the 65816's 16 MiB address space are indeed unassigned.<br /><br />VRAM, OAM (sprite display list), CGRAM (palette), and ARAM are separate address spaces in memory that is physically separate from the 65816. They don't overlap unused parts of the 65816's 16 MiB address space. They may be read or written only through an interface provided by another IC on the Control Deck's PCB.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>creaothceann</b> [ Sun Aug 05, 2018 1:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Señor Ventura wrote:</div><div class="quotecontent">Here is a diagram of the memory map of the 65816</div><br />No, that's the memory map of the SNES 5A22, which does contain a 65816 core. (Also, some game cartridges contain a <a href="https://en.wikipedia.org/wiki/List_of_Super_NES_enhancement_chips#SA1" class="postlink">SA1</a> which also contains a 65816 core and which has an entirely different memory map.)<br /><br /><div class="quotetitle">Señor Ventura wrote:</div><div class="quotecontent">1) The total amount of [addressable] memory is determined by the [address] bus [width] (24 bits --&gt; 8 [bank] bits and 16 [offset] bits)</div><br />Fixed that for you.<br /><br />2^24 bytes would be the total amount of addressable memory, but <a href="http://www.romhacking.net/documents/193/" class="postlink">in the SNES several areas of this memory map are already reserved</a>.<br /><br /><div class="quotetitle">Señor Ventura wrote:</div><div class="quotecontent">2) According to this, 16 bits means in hexadecima that you have 16 positions of memory in this way (0, 1, 2, 3 , 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)</div><br />16 bits means 2^16 = 65536 addresses.<br /><br />Use the memory map in the link above. Note that cartridges can map their components into the map however they want, as long as the game code knows about the exact location. So different games may map SRAM to different addresses. Also note that cartridges can do <a href="https://en.wikipedia.org/wiki/Bank_switching" class="postlink">bank switching</a> if they have the necessary hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Aug 05, 2018 1:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">16 bits means</div><br /><br />a &quot;16 bit processor&quot;, means that it has a 16 bit word size.<br /><br />That means it can add, subtract, bit shift, etc across 16 bits. It can load or store 16 bits in one move.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Aug 05, 2018 2:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">VRAM, OAM (sprite display list), CGRAM (palette), and ARAM are separate address spaces in memory that is physically separate from the 65816</div><br /><br />Just to add a little. VRAM is a separate 64k RAM chip (confusingly, actually 32k of 16-bit words), that is accessed through hardware registers.<br /><br />The OAM is another separate RAM chip of 544 bytes, accessed through hardware registers.<br /><br />The CGRAM is another 512 byte RAM chip, accessed through hardware registers.<br /><br />The Audio chip (Sony SPC700) has it's own RAM chip, that is accessed through some hardware registers, and it runs it's own program, which has to be loaded at startup.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Señor Ventura</b> [ Sun Aug 05, 2018 5:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, thank you to all... the 65816 doesn't access to the vram, so its memory map doesn't includes that 64KB, it was obvious, i was hurry to finish the post.<br /><br />And the ARAM is managed by the spc700, so, the same here.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Some parts of the 65816's 16 MiB address space are indeed unassigned.</div><br /><br />So, i noticed well, there are memory position that aren't included in the diagram, right?, so, What happens if you try to access to one of that adress spaces?.<br /><br /><div class="quotetitle">creaothceann wrote:</div><div class="quotecontent">Fixed that for you.<br /><br />2^24 bytes would be the total amount of addressable memory, but in the SNES several areas of this memory map are already reserved.</div><br /><br />Yes, that is the point 2^24 are 16MB addressable, but you can count only 95 megabits reserved for ROMs.<br /><br />The question is if it could be achieved near the whole 16MB with a custom decoder.<br /><br /><br />I put this here for later:<br /><br />=============================================================================<br /> Anomie's SNES Memory Mapping Doc<br /> $Revision: 1160 $<br /> $Date: 2008-12-21 12:40:39 -0500 (Sun, 21 Dec 2008) $<br /> &lt;anomie@users.sourceforge.net&gt;<br />=============================================================================<br /><br />This is a document intended to describe the SNES memory map. It will NOT<br />include information on the MAD-1 or any other address decoder.<br /><br />HARDWARE<br />========<br /><br />The SNES has one 8-bit data bus, two address busses typically known as<br />&quot;Address Bus A&quot; and &quot;Address Bus B&quot;.<br /><br />Data Bus<br />--------<br /><br />The data bus is 8 bits. If nothing sets a value on the data bus for any<br />particular read request, the last value placed on the bus is read instead<br />(this is known as &quot;Open Bus&quot;).<br /><br />LINE | CART | EXPAND<br />-----+------+--------<br /> D0  |  19  |   11<br /> D1  |  20  |   12<br /> D2  |  21  |   13<br /> D3  |  22  |   14<br /> D4  |  50  |   15<br /> D5  |  51  |   16<br /> D6  |  52  |   17<br /> D7  |  53  |   18<br /><br />Address Bus A<br />-------------<br /><br />This address bus is 24 bits, along with read and write lines (/RD and /WR)<br />and 2 auxiliary lines (/CART and /WRAM). WRAM is connected to this bus, as<br />well as the cart connector.<br /><br />LINE | CART          LINE  | CART<br />-----+------        -------+------<br /> A0  |  17            A14  |  39<br /> A1  |  16            A15  |  40<br /> A2  |  15            A16  |  41<br /> A3  |  14            A17  |  42<br /> A4  |  13            A18  |  43<br /> A5  |  12            A19  |  44<br /> A6  |  11            A20  |  45<br /> A7  |  10            A21  |  46<br /> A8  |   9            A22  |  47<br /> A9  |   8            A23  |  48<br /> A10 |   7            /RD  |  23<br /> A11 |   6            /WR  |  54<br /> A12 |  37           /CART |  49<br /> A13 |  38           /WRAM |  32<br /><br />Address Bus B<br />-------------<br /><br />This address bus is 8 bits, along with read and write lines (/RD and /WR).<br />d /WRAM). WRAM, PPU1, PPU2, and APU are connected to this bus, as well as<br />the cart and expansion ports.<br /><br />LINE | CART | EXPAND<br />-----+------+--------<br /> PA0 |  28  |    1<br /> PA1 |  59  |    2<br /> PA2 |  29  |    3<br /> PA3 |  60  |    4<br /> PA4 |  30  |    5<br /> PA5 |  61  |    6<br /> PA6 |   3  |    7<br /> PA7 |  34  |    8<br />/PARD|   4  |   10<br />/PAWR|  35  |    9<br /><br /><br />MEMORY MAP<br />==========<br /><br />As far as the SNES is concerned, this is the memory map. &quot;LoROM&quot;, &quot;HiROM&quot;,<br />and anything else is just the cart responding differently to the addresses<br />placed on Address Bus A.<br /><br />WRAM responds to Address Bus A whenever /WRAM is active, and to registers<br />$2180-$2183 on Address Bus B. APU responds to $40-$7F on Address Bus B. PPU1<br />and PPU2 respond to $2100-$213F on Address Bus B. The cart is expected to<br />respond when /CART is active, but it can respond to any address on either bus<br />that is not otherwise mapped. Similarly, the device plugged into the expansion<br />port may respond to any unmapped register on Address Bus B.<br /><br />The 'Speed' column indicates the memory access speed for that area of memory.<br />The SNES master clock runs at about 21MHz (probably as close to 1.89e9/88 Hz as<br />possible). Internal operation CPU cycles always take 6 master cycles. Fast<br />memory access cycles also take 6 master cycles, Slow memory access cycles take<br />8 master cycles, and XSlow memory access cycles take 12 master cycles.<br /><br /><br />  Banks  |  Addresses  | Speed | Mapping<br />---------+-------------+-------+---------<br /> $00-$3F | $0000-$1FFF | Slow  | Address Bus A + /WRAM (mirror $7E:0000-$1FFF)<br />         | $2000-$20FF | Fast  | Address Bus A<br />         | $2100-$21FF | Fast  | Address Bus B<br />         | $2200-$3FFF | Fast  | Address Bus A<br />         | $4000-$41FF | XSlow | Internal CPU registers (see Note 1 below)<br />         | $4200-$43FF | Fast  | Internal CPU registers (see Note 1 below)<br />         | $4400-$5FFF | Fast  | Address Bus A<br />         | $6000-$7FFF | Slow  | Address Bus A<br />         | $8000-$FFFF | Slow  | Address Bus A + /CART<br />---------+-------------+-------+---------<br /> $40-$7D | $0000-$FFFF | Slow  | Address Bus A + /CART<br />---------+-------------+-------+---------<br /> $7E-$7F | $0000-$FFFF | Slow  | Address Bus A + /WRAM<br />---------+-------------+-------+---------<br /> $80-$BF | $0000-$1FFF | Slow  | Address Bus A + /WRAM (mirror $7E:0000-$1FFF)<br />         | $2000-$20FF | Fast  | Address Bus A<br />         | $2100-$21FF | Fast  | Address Bus B<br />         | $2200-$3FFF | Fast  | Address Bus A<br />         | $4000-$41FF | XSlow | Internal CPU registers (see Note 1 below)<br />         | $4200-$43FF | Fast  | Internal CPU registers (see Note 1 below)<br />         | $4400-$5FFF | Fast  | Address Bus A<br />         | $6000-$7FFF | Slow  | Address Bus A<br />         | $8000-$FFFF | Note2 | Address Bus A + /CART<br />---------+-------------+-------+---------<br /> $C0-$FF | $0000-$FFFF | Note2 | Address Bus A + /CART<br /><br />Note 1: The address for internal CPU registers may go out Address Bus A,<br />  however the CPU ignores the data bus. It is unknown whether the data bus<br />  is ignored for the whole memory region, or just for those addresses which<br />  are actually registers. It is also unknown whether CPU writes show up on<br />  the data bus or not. Current theory is that addresses and writes will show<br />  up, but reads may or may not, and the data bus is only ignored for those<br />  bits of those registers actually mapped (e.g., data bus is ignored for only<br />  bit 7 of $4211).<br /><br />Note 2: If bit 0 of CPU register $420d is set, the speed is Fast, otherwise<br />  it is Slow.<br /> <br /><br /><br />=============================================================================<br />HISTORY:<br /><br />Version 1.1: Jun 18, 2003<br /> * Tested the memory access speed of all 256-byte memory blocks, and filled in<br />   the table with the findings.<br /><br />Version 1.0:<br /> * Initial version.<br /><br /><div class="quotetitle">creaothceann wrote:</div><div class="quotecontent">16 bits means 2^16 = 65536 addresses.</div><br /><br />Yes, you have 16 positions in hexadecimal in horizontal x vertical.<br /><br /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">a &quot;16 bit processor&quot;, means that it has a 16 bit word size.</div><br /><br />Yes, high Byte and low Byte, but the diagram has 16 adress position in hexadecima in horizontal and vertical. i meant that the memory mapping is about the processor, but the amount addressable is about the adress bus (16 bits + 8 bits).<br /><br /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">Just to add a little. VRAM is a separate 64k RAM chip (confusingly, actually 32k of 16-bit words), that is accessed through hardware registers.<br /><br />The OAM is another separate RAM chip of 544 bytes, accessed through hardware registers.<br /><br />The CGRAM is another 512 byte RAM chip, accessed through hardware registers.<br /><br />The Audio chip (Sony SPC700) has it's own RAM chip, that is accessed through some hardware registers, and it runs it's own program, which has to be loaded at startup.<br /></div><br /><br />Yes, thank you, i didn't think about it so well xD

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>creaothceann</b> [ Sun Aug 05, 2018 6:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Señor Ventura wrote:</div><div class="quotecontent">So, what happens if you try to access to one of those address spaces?</div><br />Then you need to look at what happens when the CPU does a read access.<br /><br /><a href="https://en.wikipedia.org/wiki/MOS_Technology_6502#Variations_and_derivatives" class="postlink">The 65* chip family</a> operates with a 2-phase clock signal. In the first phase (PHI1) of each CPU clock cycle, the CPU sets the &quot;RWB&quot; (read/write bit) line, and puts a value on the data bus if it's writing a value. In the second phase (PHI2) of each CPU clock cycle, the hardware connected to the CPU reacts to the values on these lines. The WRAM for example puts a value on the data bus if it was a read access, or stores the value if it was a write access; other hardware, for example the PPU, may even react to read accesses by changing some internal register.<br /><br />If you execute a read instruction (e.g. LDA $3412), the CPU reads the opcode ($AD = LDA), then the first byte of the operand ($12) and then the second byte of the operand ($34). So after loading the complete instruction, the <a href="https://en.wikipedia.org/wiki/Memory_buffer_register" class="postlink">the CPU's MDR</a> contains the value $34. Assuming there's no hardware mapped to address $3412, the MDR simply remains unchanged. At the end, the value in the CPU's accumulator will be $34 if it's in 8-bit transfer mode, or $3434 if it's in 16-bit transfer mode.<br /><br /><br /><div class="quotetitle">Señor Ventura wrote:</div><div class="quotecontent">Yes, that is the point 2^24 are 16MB addressable, but you can count only 95 megabits reserved for ROMs.<br /><br />The question is if it could be achieved near the whole 16MB with a custom decoder.</div><br />No, because the hardware that already exists in the SNES can't just be deactivated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Aug 05, 2018 7:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could get to just under 15 MB if you put ROM literally everywhere that isn't already taken.<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4380&amp;p=105068#p105068">viewtopic.php?f=12&amp;t=4380&amp;p=105068#p105068</a><!-- l --><br /><br />The cartridge design would be no cakewalk, but it's possible.  Any more than that requires a mapper chip.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Aug 05, 2018 8:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">The cartridge design [of the 119Mibit cart] would be no cakewalk, but it's possible.<br /></div>Horrible tangent: It's trivial.<br /><br />Because of how the existing map is, you can use /ROMSEL to simplify the logic. Just A0-A14, A22, and /ROMSEL is sufficient. It'd both fit in an inexpensive 16V8 and be fast enough.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Mon Aug 06, 2018 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />...<a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=17374&amp;start=90#p219923" class="postlink">but you told me</a>...<br /><br />Oh well.  That's what I get for trying to infer something beyond my expertise and stating it as a fact...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Aug 06, 2018 1:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some questions about the memory map</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's also a huge difference between what makes sense for hobbyists now and what made sense for N at the time. Given that the largest game they published for the SNES was 6 MiB (right?), a 15 MB cart wouldn't really have made economic sense.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>