<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Creating the 'best possible' NES game</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Creating the 'best possible' NES game</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11483">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11483</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 02, 2014 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But <em>Columns</em> for Game Gear has a taller playfield that won't fit in the NES picture without using a scanline-counting IRQ to cut off the bottom 4 scanlines of each 16x16 pixel tile like the bottom half of <em>Klax</em>.</div><br />Would you really need IRQs in a puzzle game where little to no action takes place? Sound to me like cycle counting would suffice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 02, 2014 3:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">But I don't see a company do something like, &quot;ok, we could make this game perfect, but we'll introduce flaws in it in order to give other games a chance&quot;.</div><br />Flaws are not introduced, but they are left unfixed if time and budget won't allow.<br /><br />Not every game is made to be the best possible. I make websites for a living and although I'm a perfectionist and pretty competent at what I do, the quality of the websites I make depend heavily on how much my bosses charge the clients and how much time I'm given to work on each project. Those things dictate the level of quality that's being expected, and sure enough I deliver accordingly. I'm pretty sure the same thing has always happened with games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Aug 02, 2014 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Flaws are not introduced, but they are left unfixed if time and budget won't allow.</div>And, I like to release source codes so that it is potentially fixed later even if it cannot be made perfect at first (or in case someone likes to make other changes too, or just to learn how it is working). But, it is still a good idea to fix it as much as possible at first if you can do so. (If you do not like to release source-codes right away for any reason, you could &quot;time lapse&quot; them.)<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But <em>Columns</em> for Game Gear has a taller playfield that won't fit in the NES picture without using a scanline-counting IRQ to cut off the bottom 4 scanlines of each 16x16 pixel tile like the bottom half of <em>Klax</em>. (<em>Columns Crown</em> and <em>Puyo Pop</em> and <em>Luminesweeper</em> for GBA use a similar technique using the GBA's HDMA to allow 12 rows.) <em>Columns III</em> for Genesis has a 5-player mode that uses 8x8 pixel tiles ... an NES clone of that using a Four Score would have to find some way to represent more than 3 species with 3 hardware colors.</div>MMC5 is one way (and so is cycle counting, with or without mapper support), but other way could be that state of PA8 while PA13 is low is saved and then the saved PA8 state is output to CIRAM A10 (I don't know if it will work; I didn't test it). Combining with sprites (based on the odd/even column positions), it could then give you twelve colors with a single 16x8 or 8x16 playfield if 8x8 tiles are used.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Aug 02, 2014 5:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But <em>Columns</em> for Game Gear has a taller playfield that won't fit in the NES picture without using a scanline-counting IRQ to cut off the bottom 4 scanlines of each 16x16 pixel tile like the bottom half of <em>Klax</em>.</div><br />Would you really need IRQs in a puzzle game where little to no action takes place? Sound to me like cycle counting would suffice.</div><br />It would suffice in <em>Klax</em> because only four such cutoffs are needed. The game logic can run above and below the bottom bin. But in <em>Columns</em>, the cutoffs would stretch throughout the height of the screen. If the program does nothing else in the loop, that would leave little time for pattern detection (whether or not the correct number of pieces have made a row) and preparing background update data while pieces are falling after a line clear. If the program tries to squeeze game logic into the wait loop, most of the game logic would have to be carefully written to use a constant number of cycles. Programmer time costs money too, be it in wage payments from the producer (for a professional) or in how long the programmer has to work at a day job to support development before the program is usable (for a hobbyist). Installing a scanline counter IC on the cart PCB might be cheaper than trying to shoehorn game logic into a stable raster, and one that just asserts /IRQ every 12 triple-reads shouldn't take too many macrocells in a CPLD.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 02, 2014 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But in <em>Columns</em>, the cutoffs would stretch throughout the height of the screen.</div><br />All 240 scanlines? What about the portions hidden in NTSC TVs?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If the program does nothing else in the loop, that would leave little time for pattern detection (whether or not the correct number of pieces have made a row) and preparing background update data while pieces are falling after a line clear.</div><br />From looking at gameplay videos, the game appears to be slow enough (the pieces don't even move smoothly) to run at 30fps or even less, in which case you could alternate the use of VBlank for different tasks.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If the program tries to squeeze game logic into the wait loop, most of the game logic would have to be carefully written to use a constant number of cycles.</div><br />Timed game logic is hell to program, I wouldn't recommend that to anyone.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Aug 02, 2014 7:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But in <em>Columns</em>, the cutoffs would stretch throughout the height of the screen.</div><br />All 240 scanlines? What about the portions hidden in NTSC TVs?</div><br />If you're trying to make the 6x18-cell Game Gear playfield with 16x12 pixel cells, you end up with a 216-pixel-tall playfield.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">From looking at gameplay videos, the game appears to be slow enough (the pieces don't even move smoothly) to run at 30fps or even less</div><br />Even when pieces are falling after a line clear in 2-player mode? Or are you recommending doing something like the notoriously slow update routine of <em>Dr. Mario</em> that blits only 1 playfield row on each side per frame?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Aug 02, 2014 9:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The 'best possible' NES game was Super Mario 3, by the way, if you were wondering. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Aug 03, 2014 12:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If you're trying to make the 6x18-cell Game Gear playfield with 16x12 pixel cells, you end up with a 216-pixel-tall playfield.</div><br />There you go... 24 scanlines + VBlank should be enough to do a decent amount of calculations.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Even when pieces are falling after a line clear in 2-player mode? Or are you recommending doing something like the notoriously slow update routine of <em>Dr. Mario</em> that blits only 1 playfield row on each side per frame?</div><br />VBlank time would still be a problem even if you used IRQs, right? Anyway, let's do the math: 6 x 18 x 4 that's 432 tiles. Since you'd already be in full control of the vertical scroll during the entire screen, you could use a trick to cut the number of tiles you have to update in half: Arrange your pattern tables so that $0000 contains the top half of the blocks and $1000 contains the bottom half, in the same positions. Then, during rendering, after the top 8 pixels have been displayed, you move the scroll back to the same row of tiles and switch to the second pattern table. This will get you the bottom half for free.<br /><br />You can also arrange the pattern tables so that the right side tile index is always the left side tile index plus 1, so you can INX/INY the value instead of loading it. Of course, this will require you to update the background in row mode, meaning you'll have to set the VRAM address more times. I'm too lazy to calculate right now whether columns (2 loads per block, set address 12 times) or rows (1 load + 1 increment per block, set address 36 times) would be better in this case.<br /><br />Anyway, columns or rows don't matter, as you can safely write 216 bytes to VRAM during VBlank with time to spare. If you're into forced blanking you might even squeeze updating BOTH playfields in a single frame. Otherwise, you can alternate between processing P1 and P2, and alternate between game logic and full playfield updates and each side would run at 15fps. Would that be acceptable?<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">The 'best possible' NES game was Super Mario 3, by the way, if you were wondering. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /></div><br />I hope you don't mean it as a technical achievement, because the attribute artifacts that show up when scrolling (for example) is a pretty annoying flaw.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Aug 03, 2014 2:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I hope you don't mean it as a technical achievement, because the attribute artifacts that show up when scrolling (for example) is a pretty annoying flaw.</div><br /><br />Definitely, also, the lack of passwords is another pretty annoying flaw. Otherwise, yes I agree SMB3 is the best Mario game ever, and one of the best games on the NES.<br /><br />Before I was going to say some titles, but I refrained to avoid this thread end up in &quot;what's your favourite games&quot; thread. But, come on, Mega Man 2 really is perfection <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Aug 03, 2014 6:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Arrange your pattern tables so that $0000 contains the top half of the blocks and $1000 contains the bottom half, in the same positions. Then, during rendering, after the top 8 pixels have been displayed, you move the scroll back to the same row of tiles and switch to the second pattern table. This will get you the bottom half for free.</div><br />The background and border would need to be arranged the same way for this to work. Not that this isn't possible though.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anyway, columns or rows don't matter, as you can safely write 216 bytes to VRAM during VBlank with time to spare.</div><br />&quot;Time to spare&quot; including an OAM DMA for the other player's falling piece? Or perhaps it could alternate OAM and nametable updates in separate frames, causing a bit of lag when pieces get <em>real</em> fast.<br /><br />But then how would one do the four player mode without an MMC5?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Aug 03, 2014 8:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was just being tongue-in-cheek when I mentioned SMB3, but it is also relevant to the discussion about what form the &quot;best possible&quot; game might take. Looking hard at the best extant NES games should give you ideas about what the NES can do well.<br /><br />w.r.t. the attribute glitch, as a professional graphics programmer it's the kind of thing that I would pull my hair out over in development (if I had any left) but looking at it from the outside, I doubt the game lost even a single sale over it. It's also easy to forget how often televisions of the time had a very wide bezel covering the edge of the screen (not all did, but it was very common; mine did).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>OneCrudeDude</b> [ Sun Aug 03, 2014 6:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />While Mario 3 is an impressive game, I don't think it can be seen as the pinnacle of NES technology; it looks like it was designed for something far greater or the ideas were too ambitious, but the programmers or the hardware wasn't up to the task.  This also completely goes against the notion that Yamauchi originally envisioned, he wanted the NES to live for almost a decade before a successor was introduced.  It was half true, as the NES was on the market for 9 or so years before finally being discontinued; allegedly the Famicom was for sale up until 2003.  Hell, some of Nintendo's later NES games just look like they didn't even care at that point, such as Wario's Woods giving Wario a purple hat.<br /><br />Speaking of making a game for a vintage Nintendo console as well as making it available for Nintendo's eShop, there appears to be this game, Justice Beaver, that aims to do exactly that.<br /><br /><!-- m --><a class="postlink" href="http://www.nintendolife.com/news/2014/07/collectorvision_announces_justice_beaver_for_wii_u_eshop_and_super_nintendo">http://www.nintendolife.com/news/2014/0 ... r_nintendo</a><!-- m --><br /><br />Whether Nintendo will go along with it or not is up for debate, but if Nintendo does give them the okay to do so, what does that have in store for homebrew programmers?  Will we finally have our chance in the limelight?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Mon Aug 04, 2014 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Rather, a team of hobbyist programmers would be needed, and they would need to be paid . . . what is the ideal size of a development team, and how big would the budget be? This just covers the development, advertising would be another question entirely.</div><br />Great questions - although I think that your second question - that of a budget - needs to take into account how much harder it is to develop an NES game than an NES-looking game. It is so much easier, and therefore faster, and therefore <em>cheaper</em> to develop an NES-looking game in a modern language for a modern system. This approach would save all that time that would otherwise be spent (a) teaching your programmers 6502 assembly, (b) your artists the best practices of the RP2C02, and (c) hammering home the necessities of keeping everything in 2kb or 10kb at every step along the way. Hayato Tsuru and his team at <strong>Inti Creates</strong> obviously felt this way when developing Mega Man 9. <br /><br />The same possibilities which would push a modern team away from the NES on the basis of a budget change the calculus of your first question as well. Modern programming languages and interfaces allow the rapid development of tools that allow much faster world building and A.I. scripting than the tools available to the original NES developers. Whereas - back in the eighties - you might be designing not even screens worth of the world at a time, but mere rows[1] - today you could easily design a development tool which could show a 16000 x 16000 world map at once, change palettes on a whim, and design sprites as easily as dragging and dropping different tiles from VRAM manifests. I know it's possible - I designed a tool like this for my own - sadly stalled - NES project.<br /><br />Interestingly, the reason I stopped working on the NES is because of the limits. I love retro software. I love learning about old hardware. But writing software in the assembly is frustrating. Having to retool my sorting routine because I realized that I needed a few more bytes to determine which frame of a sprite definition to display for an actor is frustrating.<br /><br />And the worst of it is that there's not a market for retro development on retro hardware. Sales of the <em>best</em> NES game ever might top out at 20,000 buyers - because that's the entire market for the NES today.<br /><br />By comparison, an indie team could write NES-looking software (a) in a much easier to use language, (b) with no limits on the data output by their tools, (c) and as much fudging as might be required on the two worst limits on NES development, the 8-sprite limit and the 4-palette limit, (d) for much less money, and (e) faster.<br /><br />NES development is a hobby. It's an awesome hobby. But NES development is not where you're going to find or fund the best NES-looking game. Development of a modern indie retro game on the .NET framework, in Mono, or the equivalent iLanguage (objective-c? Swift?) would take much less time, and with much less limits, than actual development on an NES. And as a side benefit, if your game is actually good, the installed market of the Xbox, Playstation, iDevices, and the PC is millions upon millions upon millions of users.<br /><br />[1] Think of the way that Zelda 1 data is laid out in the ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 04, 2014 7:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One way to work around the need to develop the game (physics, AI, level design) and the program (6502 assembly) at the same time is to develop the entire game in a &quot;modern&quot; language and then port it to NES. It worked for <em>STREEMERZ</em>, which was originally written in a language that targeted SWF.<br /><br />In practice, Xbox, PlayStation, and the like are closed to you unless your company has previous PC or touch screen games or your developers have years of experience working for a mainstream studio. Android and iOS aren't suitable for the same genres, as a touch screen alone can't do more than point and click, one or two button runners, and shmups. It has serious problems, for example, with any platformer requiring the player to move both forward and backward. This leaves PC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>OneCrudeDude</b> [ Mon Aug 04, 2014 9:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am aware the NES is a niche market, and why I suggested there to be an eShop version of the game in addition to the cartridges.  As Tepples put it, developing your game on quicker software and then downporting it would work, and you will have developed two similar games for the cost of one.  I think that's how Retro City Rampage was meant to turn out, until he abandoned the NES port; ROM City Rampage states that it is an incomplete <em>work in progress</em>, so it might not be entirely out.<br /><br />As for the programmers, I reckon a few NESDev regulars would be willing to make some money to hone their skills further; I really like Shiru's simple games, especially Zooming Secretary, who knows what he might do with funding or a team.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>