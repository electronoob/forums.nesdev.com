<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - To lookup or not to lookup?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">To lookup or not to lookup?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3978">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3978</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Mar 19, 2008 1:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">Technically the compiler can look at a lot more, but language semantics usually restrict what it can do</div><br />C99 is supposed to help solve this by adding a new keyword <strong>restrict</strong> that specifies the semantics of a function with respect to aliasing.</div><br />Yes, restrict helps on RISC machines a lot, where it's the compiler that must move memory loads as early as possible, due to the delay until the result is available. But on x86, restrict helps much less because the instruction set favors non-parallel code.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The only hard information is how fast a particular pair of algorithms execute on a particular processor</div><br />What do you want to see? A space-time-accuracy comparison of CORDIC and LUT approaches to cosine calculation on a Nintendo DS, perhaps?</div><br />No; my point was that one should code the algorithm both ways in the actual program and measure the difference in speed, rather than rely on general benchmarks.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">If you write to the array then access it again, some compilers won't be smart enough to determine that the a and b pointers didn't change, so it will re-read them before the next access; in some cases, the compiler can't prove that they won't change, so it must re-read them. </div><br />I thought that's what the <strong>volatile</strong> keyword was for: to specify that memory won't change except across a function call, unless the keyword is present. There's also the tradeoff of rereading the address from the data section vs. rereading it from the code.</div>
<br />No, this is about a memory write that the compiler inserted, and it not being able to prove that it didn't modify some other value also in memory. As you said above, restrict is the answer to this aliasing issue. volatile would force this unoptimal situation by making the compiler reload the pointer every time it's used.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Wed Mar 19, 2008 2:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is getting rather off topic =P
<br />
<br />I think we can agree that modern x86's are RISC cores with an excessively complicated, but generally compact code in front. Sort of like a Mirror Universe Thumb set.
<br />
<br />The two threads per core on the 360 do help, but they can easily clog each other up.
<br />
<br />It really comes down to the difference between what the compiler knows at compile time, and what the chip knows at runtime. Restrict can help, but it can't solve every aliasing uncertainty at compile time. At runtime, there are no uncertainties past speculative execution across predicted branches -- the chip knows what memory you're accessing, and knows exactly what registers you're working with. 
<br />
<br />On the high end processors (not arm) the compiler can't even addres all of the avaliable registers, due to renaming. X86's haven't been saddled with the base 8 registers since the P6. 
<br />
<br />In-Order chips tend to be tied to exactly the architecturally exposed set, and punting on working around data hazards to the compiler breaks down in that situation unless you have enuogh registers to avoid reusing one for different purposes within the pipeline depth. When you have a 50 stage pipeline, and every instruction is 3 or 4 address, that ranges between difficult and impossible.
<br />
<br />I'm a big fan of OOE chips, as they make the compiler's job much easier. Optimal compile time scheduling is one of those nasty little problems that's been an active research topic for the last 15 years. They haven't found a really good solution yet, and the last chip that tried to rely on the compiler being smart was the Itanic. The ps3 and 360 will probably be struggling with compiler quality until they get EOL'd. The wii situation is not a whole lot better, but that's mostly due to being stuck with codewarrior, crappiest compiler on earth.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Mar 19, 2008 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So you prefer to put instruction scheduling hardware in every computer rather than have it in the relatively fewer compilers used to build software? It is true that the processor has more information about the values of variables for each execution of the code, but profile-guided compiler optimization can give the compiler the same information.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 19, 2008 2:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">The wii situation is not a whole lot better, but that's mostly due to being stuck with codewarrior, crappiest compiler on earth.</div><br />Why didn't Nintendo go to GCC for the Wii like it did for the handhelds?<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">So you prefer to put instruction scheduling hardware in every computer rather than have it in the relatively fewer compilers used to build software?</div>
<br />"Relatively fewer compilers"? Tell that to anybody who programs in a language that compiles to bytecode other than that of the hardware. There's a JIT for Java and .NET on a lot of PCs out there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Mar 19, 2008 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">So you prefer to put instruction scheduling hardware in every computer rather than have it in the relatively fewer compilers used to build software?</div><br />"Relatively fewer compilers"? Tell that to anybody who programs in a language that compiles to bytecode other than that of the hardware. There's a JIT for Java and .NET on a lot of PCs out there.</div>
<br />But it's not in hardware. Do you really not grasp what I was asserting? The cost of putting this software-based scheduler on every PC is virtually 0, while the cost of putting a hardware-based one is very much non-zero. It's just the cost of developing the compiler that matters, not duplicating it, unlike hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Wed Mar 19, 2008 4:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">So you prefer to put instruction scheduling hardware in every computer rather than have it in the relatively fewer compilers used to build software? It is true that the processor has more information about the values of variables for each execution of the code, but profile-guided compiler optimization can give the compiler the same information.</div>
<br />
<br />(1)  I agree with everything ReaperSMS said in his post above yours.
<br />
<br />(2)  Yes, I would prefer to have out-of-order execution hardware in every computer.  Its more effective than any static compiler can be, and it works on any program (not just ones compiled with some compiler or some optimization settings or whatever).  For general-purpose computers, it is usually worth it.  Of course when transistors or power efficiency is at a premium (cellphones and Xbox360's), this hardware might be too costly.
<br />
<br />Obviously, compiler scheduling has different goals for out-of-order chips than it has for an in-order chip.  For an out-of-order chip, it mainly wants to keep the functional units fed with lots of work, but it has a lot of flexibility and can try to minimize register pressure or optimize instruction issue (like the 4-1-1 decoding template mentioned above) or things like that.  For an in-order chip, it has to try and put things in a good order to try and minimize bubbles/hazards and pipeline stalls.  Of course lots of stalls will be for unpredictable things like cache misses, which the compiler can not do very much about.  Automatic prefetching by compilers has not been very successful in the real world, and all the compilers I know of don't do it at all (leaving it up to the programmer to do it where its needed).
<br />
<br />(3)  Profile-guided optimization is no silver bullet.  We usually don't even use it for console games, because of several factors: implementations that crash or produce incorrectly-optimized code, the difficulty of feeding it a repeatable but representative workload for training, and the fact that our code is being changed (bug fixes, etc) right up until the time we ship.  So there isn't really time to collect and combine a bunch of profile info to make PGO final builds with (and then we'd have to test them, and what if it exposed a PGO-only optimizer bug?)  With 50 programmers working on the same codebase, there's almost no point in trying to have a PGO build during production, either, because by the time the testers have run the regular binary enough to collect the PGO data to build the PGO version with, a new binary will be released to them with dozens or hundreds of source files changed, and the collected PGO data would then be useless!
<br />
<br />The risk of optimizer bugs is real, too.  Last week we found a non-PGO-related bug in the optimizer for MSVC, and that's like the most-tested compiler backend on Earth!  Without PGO, we can get repeatable builds--if the source code hasn't changed, probably the generated code won't change either.  With PGO, if you change the source code enough (and we always do) then your PGO data is not valid anymore and you have to collect new data.  The new data will cause different codegen decisions to be made, even when compiling the parts of the source code that *didn't* change.  It's a lot less repeatable, which makes it a lot less trustworthy, because the way we get confidence in it is by lots of hours of testing of the compiled binaries.
<br />
<br />Anyway, I don't think PGO can really improve low-level scheduling enough to make it competitive with OOE hardware.  Really what PGO is good for is higher-level decision making.  Things like, choosing which if/else case to put in straight-line code (the 80% one) and which one to move somewhere else (the 20% one).  Or, grouping infrequently-used code in one place in the program and all the frequently-used code in another place.  Or, choosing to aggressively unroll this frequently-executed loop (even inlining the somewhat large function called inside of it), versus choosing not to unroll or inline in this other less-frequently-used loop.  There are lots of other things compilers can do using info collected by PGO, which are sort of complementary to the low-level instruction scheduling stuff.  Ideally we'd have OOE hardware and use PGO builds on it when possible (the situation for x86 today).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Wed Mar 19, 2008 4:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">So you prefer to put instruction scheduling hardware in every computer rather than have it in the relatively fewer compilers used to build software?</div><br />"Relatively fewer compilers"? Tell that to anybody who programs in a language that compiles to bytecode other than that of the hardware. There's a JIT for Java and .NET on a lot of PCs out there.</div><br />But it's not in hardware. Do you really not grasp what I was asserting? The cost of putting this software-based scheduler on every PC is virtually 0, while the cost of putting a hardware-based one is very much non-zero. It's just the cost of developing the compiler that matters, not duplicating it, unlike hardware.</div>
<br />It's apples and oranges though, because no compiler will ever be able to 
<br />avoid certain performance penalties of an in-order chip, which the out-of-order designs can mitigate or entirely absorb for you.
<br />
<br />And even if they could, its a bit unfair to claim that "the cost would be zero" because optimizing compilers are huge projects whose cost is measured in man-decades!   <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Wed Mar 19, 2008 7:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Duplicating the OOE logic doesn't cost any more than duplicating an equal sized chunk of cache that ends up being useless because the execution units just puked out the entire pipeline because the compiler couldn't reshuffle instructions well enough. The set of scheduling rules one has to work around for certain chips (*cough* 360 *cough*) are many, complicated, and further screwed up by the 40-60 stage pipeline you get to try and schedule for.
<br />
<br />In theory, a JIT could have the same sort of advantage, but it will have to burn cycles doing all of the logic the OOE CPU would be doing, and would chew through tons of memory and cache duplicating any code for the various possibilities. That's after you solve the issue of determining exactly which version of the function to call at any particular point in the program, which can itself vary depending on the data or general state.
<br />
<br />The entire push *for* OOE execution is driven by the fact that static compile time instruction scheduling is a Very Difficult Nut To Crack, and most 'solutions' at some point involve a code explosion that will destroy any gains you may have achieved. I'd love to have a compiler that could perfectly schedule any code I could conceive of. I don't believe I will see such a beast in my lifetime.
<br />
<br />As a side note, production compilers these days can barely get dead store elimination and math intrinsics right.
<br />
<br />tepples: The handhelds are still using codewarrior as the official compiler, the general feeling is that the homebrew people have better tools. Most of the people working on the GC used SN's gcc port, which had it's issues, but it worked, and had a really nice debugger.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Thu Mar 20, 2008 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">As a side note, production compilers these days can barely get dead store elimination and math intrinsics right.</div>
<br />Oh man, don't get me started on intrinsics.  The register allocation for SSE intrinsics in Microsoft's compiler is super stingy.  It also can't pass vector wrapper types by value on x86.  Trying to use SSE vector intrinsics from C++ is an exercise in frustration.   <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Thu Mar 20, 2008 1:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tell me about it. I've hacked GCC to try and improve the situation, but even that was mostly just adding a new type for them.
<br />
<br />The language semantics start to get really nasty when you start trying to pass or return structs by value, when those structs want to be in registers other than the integer GP regs, and that seems to be true on just about any platform, and when the semantics don't screw you over, the compiler and/or ABI will.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>