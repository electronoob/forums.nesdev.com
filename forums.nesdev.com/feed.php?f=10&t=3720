<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=3720" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-11-20T19:35:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=3720</id>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2007-11-20T19:35:15-07:00</updated>
<published>2007-11-20T19:35:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28535#p28535</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28535#p28535"/>
<title type="html"><![CDATA[Timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28535#p28535"><![CDATA[
<div class="quotetitle">johnnie wrote:</div><div class="quotecontent"><br />Thanks for your elaborate explanation on relative internal timing, but what I really meant was: how do you do timing relative to the host system? How do you make sure your emulated CPU does not run at 3GHz but at ~1.7 MHz?<br /></div><br /><br />so many master cycles is 1 frame<br /><br />and I output 60 frames a second.<br /><br />If you draw 1 frame every 16.6667 or whatever milliseconds, you'll be running your emulator at 60 FPS, and thusly running the appropriate amount of master cycles (and therefore the appropriate amount of CPU cycles)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Nov 20, 2007 7:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2007-11-20T19:23:39-07:00</updated>
<published>2007-11-20T19:23:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28534#p28534</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28534#p28534"/>
<title type="html"><![CDATA[Timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28534#p28534"><![CDATA[
You can't, the best accuracy you can hope for is the necessary ~60Hz timing for video and sync everything to that.<br /><br />I found this page helpful when I was working on my timing: <!-- m --><a class="postlink" href="http://www.geisswerks.com/ryan/FAQS/timing.html">http://www.geisswerks.com/ryan/FAQS/timing.html</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Tue Nov 20, 2007 7:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[johnnie]]></name></author>
<updated>2007-11-20T18:55:13-07:00</updated>
<published>2007-11-20T18:55:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28533#p28533</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28533#p28533"/>
<title type="html"><![CDATA[Timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28533#p28533"><![CDATA[
Thanks for your elaborate explanation on relative internal timing, but what I really meant was: how do you do timing relative to the host system? How do you make sure your emulated CPU does not run at 3GHz but at ~1.7 MHz?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3431">johnnie</a> — Tue Nov 20, 2007 6:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2007-11-20T18:33:47-07:00</updated>
<published>2007-11-20T18:33:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28532#p28532</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28532#p28532"/>
<title type="html"><![CDATA[Timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28532#p28532"><![CDATA[
I operate on a fictional time system I call "master cycles"<br /><br />every 1 CPU cycle takes 15 master cycles (on NTSC) or 16 (on PAL).<br /><br />Every 1 dot (aka PPU cycle) takes 5 master cycles.<br /><br />Therefore... since an instruction like LDA #$00 takes 2 cycles, it would take 30 master cycles (NTSC).<br /><br />I keep a timestamp for each subsystem (CPU, PPU, APU, and any external system like a mapper).  I run the CPU ahead of everything else, and keep adjusting its timestamp as cycles are emulated.  When the CPU does something to interact with another system (usually in the form of a register read or write), I emulate the subsystem until its timestamp reaches or exceeds the CPU's timestamp.  This is probably more well known as the "catch up" approach.<br /><br />Basic Example:<br /><br />Let's say CPU and PPU timestamps are both 0.  My CPU emulator then emulates the following code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$00    ; after this, CPU timestamp is 30<br />STA $FE     ; CPU time = 75<br />STA $FF     ; 120<br />STA $2001   ; 180<br /></div><br /><br />Since the value written to $2001 will affect how the PPU operates (it is a PPU register), I would jump to my PPU emu and "catch it up" -- that is... run it until its timestamp is &gt;= 180, <em>then</em> I would apply the value written to $2001 and continue with CPU emulation as normal.<br /><br /><br />I can run my emu for chunks at a time that split cleanly into frames using this method.  IE:  I would run the CPU for X master cycles, then catch up all subsystems, then output the generated video/audio to the user, then rinse and repeat as needed.<br /><br />Since frames (practically) are a fixed length (341 dots * 262 scanlines * 5 master cycles per dot = 446710 master cycles per frame)* this system not only indicates how long I need to run each system, but also where in the frame the system is.  That is.. .I can perform math on any given timestamp and know which scanline the system is currently on and whatnot.<br /><br />** another technical note:  Odd frames on NTSC are sometimes 5 master cycles shorter (446705 instead of 446710) due to a PPU cycle being skipped under some circumstances.  Rather than reconstruct my entire timebase system, I simply have non-ppu related systems skip this cycle by adding an additional 5 to their timestamps where appropriate **<br /><br /><br />Anyway that's about the jist of it.  Just tally up cycles as you go until you reach a target timestamp.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Nov 20, 2007 6:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[johnnie]]></name></author>
<updated>2007-11-20T18:05:32-07:00</updated>
<published>2007-11-20T18:05:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28529#p28529</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28529#p28529"/>
<title type="html"><![CDATA[Timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3720&amp;p=28529#p28529"><![CDATA[
Hello,<br /><br />I am writing a NES emulator, but am doing the 6502 CPU first. Now I was wondering: how do you make sure the timing of the CPU is correct? Do you give the CPU a tick every (1/frequency) seconds? If so, how do you make such a high-resolution timer?<br /><br />In shortL how do you implement proper timing for your CPU?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3431">johnnie</a> — Tue Nov 20, 2007 6:05 pm</p><hr />
]]></content>
</entry>
</feed>