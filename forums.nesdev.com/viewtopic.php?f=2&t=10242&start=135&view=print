<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - uc65, a Mid-Level Language Compiler READY FOR USE!</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">uc65, a Mid-Level Language Compiler READY FOR USE!</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10242">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10242</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>10</strong> of <strong>11</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Dec 08, 2013 9:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Also, there is no end clause for loop.</div>  So loop is basically an infinite loop then?  Same as:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">while 1==1<br />...<br />end while</div><br />If that's the case, I'd wonder if it's even worth having loop since the while loop is easily adapted to give the same effect.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Subroutine parameters are copy-on-call. If you want them in zero-page, use the fast modifier for the subroutine. If you want the subroutine's variables in zero page, use the fast modifier on the variables. uc65 only uses the stack to store register values during interrupt handlers.<br /><br />rom and ram apply to everything that emits code or variables following those statements until the next such statement.<br /><br />Again when I am feeling better I will try to make the documentation more clear.</div><br /><br />That makes sense based on the limitation that recursion isn't allowed as the second call will override the variables of the first.  So basically every subroutine's variables will ALWAYS occupy a location in ram.  A subroutines variables aren't temporary.  So if one is trying to conserve ram use try to limit the number of variables used.  Using globals for a subroutine to modify themselves, vice using temporary storage variables within a subroutine would be best.  Or perhaps a handful of global temp variables which all routines can use as scratch.  These things make sense when you understand the underlying assembly going on. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  One can take the easy route and create those temporary variables without trouble, but then when it comes to optimizing it helps to have a good grasp of assembly.<br /><br />Regarding my discussion of having banked ram, it would sound prudent to put all globals in system ram so they truely are global (regardless of banking).  To allow subroutines to use banked ram for variable use would require some specific rules.  Let me know if this sounds right:<br /><br />subroutine parameters:  when are variables copied over?  I assume it's just before the parent routine jumps to the child subroutine.  So by ensuring the child's ram bank is active prior to calling the subroutine, you ensure the subroutine will get the copy over of input parameters.<br /><br />variables within the subroutine:  The subroutine needs to ensure it's ram bank is active before using the variables.  <br /><br />There is no harm in the parent setting up ram banking for the child's variables.  But as a design choice you could make the child responsible for setting up banking for it's own variables.  Parents MUST initialize child's ram banking when parameters are passed in though to ensure proper copy over.  Since ram/rom segments can't be used within subroutines, that means the parameters and variables of a subroutine need to be in the same bank/segment.  Starts to get tricky the more I think about this...  Having banked SRAM would require a lot of delicate care especially if the parent and child's ram wasn't visible at the same time.  <br /><br />Really my only desire is to put game/graphics data swappable with RAM in FME-7 style.  So operating with the assumption that the WRAM was always there except for the routines which swapped in ROM for game/graphics data, then you'd be okay.  <br /><br />The best way to handle funky situations like that were you had to handshake between parent and child ram banking would be to make use of the stack and/or A/X/Y registers for passing/returning variables.  Using the stack for passing in parameters could be done with the language as-is by creating a helper 'handshake' function to utilize the stack so you'd pass the parameters into the helper vice the subroutine itself.<br /><br />So I'm having some confusion on how to best utilize return variables.  I was writing a subroutine to read controllers:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;; Read controller ports<br />;;<br />;; @param padnum The controller pad desired to be read<br />;; return button output A,B,sel,srt,U,D,L,R<br />export sub nesReadPad byte padnum as byte<br /><br />&nbsp; &nbsp;;strobe latch signal<br />&nbsp; &nbsp;controller1 = $10<br />&nbsp; &nbsp;controller1 = $00<br /><br />&nbsp; &nbsp;if padnum == 1<br />&nbsp; &nbsp;&nbsp; &nbsp;asm<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LDX #$08<br />&nbsp; &nbsp;&nbsp; &nbsp;joy1_loop:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LDA $4016<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LSR A&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; bit0 -&gt; Carry<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ROL nesReadPad_return&nbsp; &nbsp;; bit0 &lt;- Carry<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;DEX&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;BNE joy1_loop<br />&nbsp; &nbsp;&nbsp; &nbsp;end asm<br /><br />&nbsp; &nbsp;else ;if padnum == 2<br />&nbsp; &nbsp;&nbsp; &nbsp;asm<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LDX #$08<br />&nbsp; &nbsp;&nbsp; &nbsp;joy2_loop:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LDA $4017<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LSR A&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; bit0 -&gt; Carry<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ROL nesReadPad_return&nbsp; &nbsp;; bit0 &lt;- Carry<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;DEX&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;BNE joy2_loop<br />&nbsp; &nbsp;&nbsp; &nbsp;end asm<br />&nbsp; &nbsp;end if<br /><br />&nbsp; &nbsp;return nesReadPad_return<br /><br />end sub</div>But I'm not sure I'm doing it right...  See I don't want to create a new variable, and use that for ROL'ing the controller data into, because there is already a return variable automatically created.  So can I just use the sub_return variable without instantiating it (outside of asm portions too) because I know it will be created by the assembler?  Do I need to use the return statement since I know I'm modifying the return variable?  Or could just leave out the return statement and assume it's implied?  Basically I don't know how to use the return variable within the subroutine.   Perhaps I should instantiate a variable which conflicts with the return variable's name intentionally?  Normally I wouldn't have thought about doing this except the comment in the documentation regarding asm portions brought it up so now I want to give it a try as it conserves on ram use.  I suppose once return variables via A/X/Y registers is implemented then this isn't of much use aside from large return variables I suppose.<br /><br />Is there any way to utilize macros with uc65?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Mon Dec 09, 2013 7:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Or perhaps a handful of global temp variables which all routines can use as scratch.</div><br /><br />This sounds good. When a function/routine returns a value it would default to the first temp variable (temp1) and go up from there.  Also having them available as plain old temp vars is a plus.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Dec 09, 2013 7:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />loop is an explicit infinite loop. &quot;while 1=1&quot; will still execute a comparison. There's no compile-time optimization to remove this comparison.<br /><br />Banking of both RAM and ROM is left to the user to implement and not mess up. Also, to a previous point you had, the OMA page $0200 is already set up in the memory configs.<br /><br />The caller of the subroutine copies values into the subroutine's parameter variables before the jsr.<br /><br />Return values are a syntax convenience. If you want to eliminate the automatic variable created by the subroutine, you can place the value in a global temp variable and not use return values. The the caller will have to copy the value manually.<br /><br />The thing to remember here is that uc65 will not generate 100% efficient assembly code. There's a trade off between ease of development and resource utilization. There's always the option of using assembly <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Personally I tend to write subroutines like controller polling in assembly because they are small and easy to write in assembly. In the larger main program I write things in uc65 and call the subroutines I've written because it's easier to maintain and develop.<br /><br />I am concerned that RAM utilization will be a key limiting factor in the size and complexity of a uc65 program though. We'll have to see how it plays out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Mon Dec 09, 2013 1:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just FYI I've created a NESICIDE template project using the hello world that INL put together.  It works, but there's still the issue of the error in the debug info.  That, unfortunately, prevents being able to do source stepping, setting breakpoints, etc.  Any luck on that front yet?<br /><br />So in order to get going in UC65 all one would have to do is create a new project based on the 'NROM Hello World - UC' template.  It builds/runs out of the box.  I'm going to add uc65.jar directly into the CC65 bin folder that's delivered with the installer, I think...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Dec 09, 2013 4:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">loop is an explicit infinite loop. &quot;while 1=1&quot; will still execute a comparison. There's no compile-time optimization to remove this comparison.</div>Gotcha.  I'd agree the way you've set things up make sense then.  People will probably request things like loop N times, but I can see why you wouldn't want to implement that.  Better off to force the user to create a while with their own variable for that use.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Banking of both RAM and ROM is left to the user to implement and not mess up. Also, to a previous point you had, the OMA page $0200 is already set up in the memory configs.</div>Yeah I understand that, I was trying to figure out how to not mess it up. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />  I noticed the OMA defn shortly after posting of course...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Return values are a syntax convenience. If you want to eliminate the automatic variable created by the subroutine, you can place the value in a global temp variable and not use return values. The the caller will have to copy the value manually.</div><br />I get that, my question is how do I utilize that variable within the subroutine that's about to return it.  Perhaps the best answer is just not to try and make use of the return variable before the return statement, but your mention of it's name being 'sub_return' made me want to make use of it.  Do I need to instantiate it before making use of it?  Or can I just assume it exists with the 'sub_return' name since the subroutine is defined as having a return type?<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The thing to remember here is that uc65 will not generate 100% efficient assembly code. There's a trade off between ease of development and resource utilization. There's always the option of using assembly <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I am concerned that RAM utilization will be a key limiting factor in the size and complexity of a uc65 program though. We'll have to see how it plays out.</div><br />While I get that we're trading conveince for effeciency when choosing uc65 over assembly, I share your concern about ram utilization.  So understanding how the language makes use of and allocates ram aids in trying to write uc65 code that conserves on ram use.  From what I'm seeing thus far you have to think about ram use as if you're writing in assembly.  I think doing that will go a long way to keeping ram from becoming scarce with uc65.<br /><br /><div class="quotetitle">cpow wrote:</div><div class="quotecontent">So in order to get going in UC65 all one would have to do is create a new project based on the 'NROM Hello World - UC' template. It builds/runs out of the box. I'm going to add uc65.jar directly into the CC65 bin folder that's delivered with the installer, I think...</div>Good stuff!  Looking forward to playing around with NESICIDE once things are finished up! <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Mon Dec 09, 2013 9:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm trying to figure out how to rebuild uc65.jar...it's not obvious to me.  I'd like to try the following changes to CodeGenerator.java:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&quot;.DBG SYM, \&quot;%s\&quot;, \&quot;00\&quot;, %s, \&quot;%s\&quot;\n&quot;,</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&quot;.DBG FUNC, \&quot;%s\&quot;, \&quot;00\&quot;, %s, \&quot;%s\&quot;\n&quot;,</div><br /><br />I looked at CC65 source and it emits &quot;00&quot; not &quot;90&quot; for those.<br /><br />Hopefully that'll solve the debuginfo parsing problem...but I can't be sure.  Can you provide directions for how to rebuild uc65.jar?<br /><br />EDIT: I manually changed the 90's to 00's in the generated debuginfo file and source stepping works again, so likely the change proposed to uc65.jar will correct the problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Tue Dec 10, 2013 12:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for working that out. The 90 thing was based on reading the source code. Like I said, documentation is no good for this.<br /><br />I have attached a new zip file, rc4, to the first post. This contains a new JAR file with the 00 fix, the stderr fix and the percision / precision spelling correction. I am over my flu today but still sleeping a lot trying to get my strength back. Should be back in the swing of things tomorrow <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Edit: Also, if you put uc65.jar into the NESCISIDE bundle, please include the file COPYING (or in some other way note that uc65 is licensed under the GPLv3 or later, and provide the text of the GPLv3) and a link to the project page. This will satisfy the terms of the license as long as you don't make source code changes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Tue Dec 10, 2013 3:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Thanks for working that out. The 90 thing was based on reading the source code. Like I said, documentation is no good for this.</div><br />Works here.  I've <a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=9275&amp;start=105#p122235" class="postlink">released a NESICIDE update with a template project for uc65</a>.  Eventually I'd like to put a lexer for the language into the editor, and support symbol tool-tips.  Actually...if you treat your symbols like C symbols [prepend an underscore in the generated ASM output], what's there for C support might &quot;just work&quot;.  But anyway, symbol watching appears to work, breakpointing, stepping source, also.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Tue Dec 17, 2013 1:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not sure if I was supposed to be able to derive this issue from the doc or not, but quoting the doc:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">IMPORTS/EXPORTS section: Note that the compiler does not compile imported source files into assembly files, nor does it automatically link these assembly files. The user must take care in their build automation steps to separately compile, assemble and link each source file needed to construct the entire program. Failure to do so will result in unresolved symbols at link time. See the section &quot;Build Automation&quot; for more information. </div><br /><br />I have 3 files, global.uc, sprite.uc, and main.uc<br /><br />I want sprite.uc and main.uc to import global.uc, and I want main.uc to import sprite.uc.<br /><br />The ordering in which the files are imported into main.uc is critical, else errors plague you.<br /><br /><br />main.uc broke:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">import &quot;sprite.uc&quot;<br />import &quot;global.uc&quot;</div><br /><br />main.uc works:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">import &quot;global.uc&quot;<br />import &quot;sprite.uc&quot;</div><br /><br />I also verified that sprites.uc wasn't bringing global.uc along for the ride when sprites.uc is imported to main.uc, so the issue isn't global.uc getting doubly imported.  I'm not used to the order things are imported making much difference.  <br /><br />Not saying it should necessarily needs to be changed.  But it threw me for a loop for awhile, perhaps explaining that in the manual (more clearly?) would be helpful.  Or maybe the upcoming &quot;build automation&quot; doc will help explain?  Just thought it was worth sharing at a minimum.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Wed Dec 18, 2013 7:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can you help me understand how the first scenario &quot;broke&quot;? Does sprite.uc import global.uc? I think I may have an issue with the way I am preventing multiple imports, let me look into this.<br /><br />Also, I have updated the documentation regarding the loop statement to be correct.<br /><br />Thank you all for your patience with this project as I got my day job situation taken care of!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Wed Dec 18, 2013 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Can you help me understand how the first scenario &quot;broke&quot;? Does sprite.uc import global.uc? I think I may have an issue with the way I am preventing multiple imports, let me look into this.</div><br />Yes, both main.uc and sprite.uc import global.uc, and main.uc imports sprite.uc <br /><br />sprite.uc does not import anything besides global.uc, and global.uc imports nothing.<br /><br />no other files import global.uc<br /><br />sprite.uc<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">import &quot;global.uc&quot;</div><br /><br />main.uc<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">import &quot;nes.uc&quot;<br />import &quot;data.uc&quot;<br />import &quot;sprite.uc&quot; <br />import &quot;global.uc&quot; ;must come before sprites.uc which also imports global.uc</div><br /><br />errors:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C:\Dropbox\nesdev\dig_deeper2&gt;java -jar ..\uc65.jar source\global.uc<br /><br />C:\Dropbox\nesdev\dig_deeper2&gt;java -jar ..\uc65.jar source\nes.uc<br />source\nes.uc(165): Warning: Possible loss of precision<br /><br />C:\Dropbox\nesdev\dig_deeper2&gt;java -jar ..\uc65.jar source\sprite.uc<br /><br />C:\Dropbox\nesdev\dig_deeper2&gt;java -jar ..\uc65.jar source\main.uc<br />source\main.uc(30): Error: Unresolved symbol gameState<br />source\main.uc(62): Error: Unresolved symbol buttons1<br />source\main.uc(63): Error: Unresolved symbol buttons2<br />source\main.uc(69): Error: Unresolved symbol buttons1<br />source\main.uc(72): Error: Unresolved symbol buttons1<br />source\main.uc(75): Error: Unresolved symbol buttons1<br />source\main.uc(78): Error: Unresolved symbol buttons1<br />Compilation failed</div><br /><br />global.uc:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; along with this program.&nbsp; If not, see &lt;http://www.gnu.org/licenses/&gt;.<br /><br />export fast byte gameState<br />export fast byte buttons1<br />export fast byte buttons2<br /><br />;;buttons<br />export constant&nbsp; &nbsp;NOTHING&nbsp; &nbsp;&nbsp; &nbsp;= %00000000<br /><br />;;gameState<br />export constant&nbsp; &nbsp;TITLE&nbsp; &nbsp;&nbsp; &nbsp;= $00<br />export constant LEVEL1 &nbsp; &nbsp;&nbsp; &nbsp;= $01<br />export constant LEVEL2 &nbsp; &nbsp;&nbsp; &nbsp;= $02<br />export constant GAMEOVER &nbsp; &nbsp;= $FF<br /><br /><br />;;metaSprite.state<br />export constant INACTIVE&nbsp; &nbsp;= $00<br />export constant NEWBORN&nbsp; &nbsp;&nbsp; &nbsp;= $01<br />export constant NORMAL &nbsp; &nbsp;&nbsp; &nbsp;= $02<br />export constant DYING&nbsp; &nbsp;&nbsp; &nbsp;= $FF<br /></div><br /><br />Make this one change to main.uc and errors go away:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">import &quot;nes.uc&quot;<br />import &quot;data.uc&quot;<br />import &quot;global.uc&quot; ;must come before sprites.uc which also imports global.uc<br />import &quot;sprite.uc&quot; </div><br /><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thank you all for your patience with this project as I got my day job situation taken care of!</div>No problem, thanks for working on things as time permits. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Thu Dec 19, 2013 8:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the bug report INL! I have raised <a href="https://code.google.com/p/uc65/issues/detail?id=4" class="postlink">Issue 4</a> in the bug tracker to track the status of this issue. The issue has been reproduced and a failing regression test added to source control. I am working on the fix now. I'll also update this thread when I fix it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Fri Dec 20, 2013 6:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm confused as to how break and continue statements are supposed to work especially with providing number of loops to advance.<br /><br />Since there are no defined iterators (like a typical for loop would have), how does the language/compiler know what iteration to advance to?  I've created the same effect of a for loop using the while statement, but have to create my own iterator.  It doesn't seem that the language would support &quot;continue [n]&quot; and know which variable is my iterator.  Based on how the while and loop statements work, it would only make sense for the user to have to manually advance the iterator prior to the continue call.<br /><br />I tried to use continue, and I'm pretty sure it's broken, although due to my confusion above and lack of trust in my surrouding logic I'm not yet certain of the issue.  I still need to look through the asm output though too.  I wanted your input and improve my understanding before I start trying to debug further.<br /><br />This is the current definition:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Continue and Break<br /><br />The continue and break statements advance to the next iteration of, or end condition of a containing while or loop statement block respectively. An optional number of nested loops to advance through may be provided.<br /><br />continue [n]<br />break [n]<br /><br />Where n is the number of nested loops to advance through. If omitted, this defaults to one. N must be greater than zero and less than or equal to the nested loop depth. </div><br /><br />I'm guessing it's just a carry over issue similar to the loop conditional, so if I were a betting man I'm thinking with the current while and loop definitions the following would be more accurate:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Continue and Break<br /><br />continue within a while block: jump out of the while loop and evaluate the while conditional to determine whether to re-enter the while statement block or to exit the while block.<br /><br />continue withing a loop statement block: jump out of current iteration of the loop and restart from the loop statement.<br /><br />break within a while statement block: exit the while block all together.<br /><br />break within a loop statement block: exit the loop, a means to end the infinite loop.<br /><br />There is no such thing as: continue [n], but you can create the same effect by manually advancing your own iterator prior to the continue statement.  In fact it's 'default' is always &quot;continue 0&quot; because you have to manually advance the iterator, failing to do so would repeat the current iteration from the beginning.<br /><br />Doesn't make sense: break [n] where n&gt;1, because you can only exit a while or loop statement once.  It's as if the 'default' is always 1. </div><br /><br />Thoughts?  Am I all mixed up here?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sun Dec 22, 2013 6:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">Doesn't make sense: break [n] where n&gt;1, because you can only exit a while or loop statement once.  It's as if the 'default' is always 1. </div><br />Doesn't the break [n] where n&gt;1 really mean &quot;break out of n nest levels&quot;.  In other words, if I'm nested three deep and I do a break 2 I'll break not only out of the innermost loop, but the mid-level loop also and find myself back in the outer loop.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Dec 23, 2013 12:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: uc65, a Mid-Level Language Compiler READY FOR USE!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ahh gotcha, that makes sense.  I think the combining of the explanation of break and continue at the same time confused me a little in the doc.  <br /><br />So the only thing I'm confused on now is the continue [n] statement without an explicit iterator.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>10</strong> of <strong>11</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>