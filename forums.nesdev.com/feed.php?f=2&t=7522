<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7522" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-03-08T06:39:00-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7522</id>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2011-03-08T06:39:00-07:00</updated>
<published>2011-03-08T06:39:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75268#p75268</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75268#p75268"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75268#p75268"><![CDATA[
As for multiplexing collision detection I get some issues with diagonal movement of bullets. This can sometimes cause a false miss. I kinda like it though, it's sort of like grazing in modern SHMUPS.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Another way not to miss collisions is to extend a projectile's hitbox backward by how far it has traveled over the past frame or two.<br /></div><br /><br />Thanks for the hint Tepples, I'll implement that if I ever have issues with "shooting through a wall" as it were.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />@Drag, <br /><br />Don't know why I did not think of that before. Due to my very narrow requirements this will fit very nicely. I will implement this soon.<br /></div><br /><br />I don't know what I was thinking here. This reduces performance <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> I still have to consider every object's bounding rect more than once, therefore caching their bounding rect in memory and running comparisons from there is more efficient.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Tue Mar 08, 2011 6:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-03-06T20:08:54-07:00</updated>
<published>2011-03-06T20:08:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75199#p75199</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75199#p75199"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75199#p75199"><![CDATA[
<div class="quotetitle">qbradq wrote:</div><div class="quotecontent"><br />By managing the maximum speed of the projectiles with the the minimum width of the enemies I shouldn't miss collisions.<br /></div><br />Another way not to miss collisions is to extend a projectile's hitbox backward by how far it has traveled over the past frame or two.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Mar 06, 2011 8:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2011-03-06T19:25:46-07:00</updated>
<published>2011-03-06T19:25:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75198#p75198</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75198#p75198"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75198#p75198"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Quote:<br />I am using a JSR / RTS for the collision test. I wounder if in-lining this would help much.<br /><br />JSR/RTS inside a loop could add to alot of extra time. I tend to inline everything that is only done in a single place... Hell, I'll even duplicate a routine if using it inlined results in significant speed increase.<br /></div><br /><br />In-lining that routine reduced the execution time by 15%! Yay!<br /><br />@Drag,<br /><br />Don't know why I did not think of that before. Due to my very narrow requirements this will fit very nicely. I will implement this soon.<br /><br />I also implemented collision multiplexing, only doing 50% of collision detections per frame. I only consider odd-numbered bullets on odd-numbered frames and vice versa. By managing the maximum speed of the projectiles with the the minimum width of the enemies I shouldn't miss collisions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Sun Mar 06, 2011 7:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-03-04T19:23:41-07:00</updated>
<published>2011-03-04T19:23:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75131#p75131</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75131#p75131"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75131#p75131"><![CDATA[
<div class="quotetitle">qbradq wrote:</div><div class="quotecontent"><br />Also, is everyone using 16-bit values for X and Y? I am using 8-bit values with two bits in the flags byte for the object that act as a ninth bit. I skip any object that is off-screen in either direction (as in I don't even generate bounding rects for them) and then clip the bounding rect to the screen.<br /></div><br />You know, I was thinking about this the other day. I currently use 16-bits for all coordinates, but it might be a good idea to only check collisions for objects that are on screen and use 8 bits instead... The problem is that this works well for sprite collisions, but for background collisions you still need 16-bit coordinates...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I am using a JSR / RTS for the collision test. I wounder if in-lining this would help much.<br /></div><br />JSR/RTS inside a loop could add to alot of extra time. I tend to inline everything that is only done in a single place... Hell, I'll even duplicate a routine if using it inlined results in significant speed increase.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Mar 04, 2011 7:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-03-04T15:51:17-07:00</updated>
<published>2011-03-04T15:51:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75122#p75122</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75122#p75122"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75122#p75122"><![CDATA[
There's another trick you can use to speed up bounds-checking.<br /><br />If you only check the enemy's X range against the bullet's X range, and you find that they're not overlapping, then there's no way a collision can be occuring, and you don't need to check the Y range.<br /><br />Same thing for Y, if the two actors' Y ranges are not overlapping, then there's no way they can be overlapping, and you don't need to check X.<br /><br />Furthermore, you can write some pretty fast code by being careful with how you perform your checks.<br /><br />Two actors, A and B, are colliding if both their x ranges and y ranges are overlapping:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> A = Some actor<br /> Calculate A's hitbox here.<br /> B = A<br />LOOP:<br /> B++<br /> IF &#40;B &gt; last actor&#41; THEN exit<br /> Calculate the X coordinates of the left and right edges of B's hitbox here.<br /> IF &#40;A.left &gt; B.right&#41; THEN GOTO LOOP<br /> IF &#40;A.right &lt; B.left&#41; THEN GOTO LOOP<br /> ; If you reach this point, A and B are overlapping on the X axis.<br /> Calculate the Y coordinates of the top and bottom edges of B's hitbox here.<br /> IF &#40;A.top &gt; B.bottom&#41; THEN GOTO LOOP<br /> IF &#40;A.bottom &lt; B.top&#41; THEN GOTO LOOP<br /> ; If you reach this point, a collision is occuring between A and B.<br /> Handle the collision.<br /> GOTO LOOP<br /></div><br />This way, you can eliminate half of your calculations most of the time. If you're doing a vertical shmup, then I'd recommend doing the Y check first, then X.<br /><br />This is exactly how I'm doing collision detection. Additionally, I "reworded" the conditional statements so they're always "less than" comparisons, since you only need one branch for those, versus "greater than", which requires two (remember, 6502 only has &gt;=, not &gt;).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Fri Mar 04, 2011 3:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2011-03-04T10:50:47-07:00</updated>
<published>2011-03-04T10:50:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75098#p75098</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75098#p75098"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75098#p75098"><![CDATA[
OK, I'm verging on thread-jacking at this point <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> I'll turn the conversation more generic.<br /><br />Are you all using the entire sprite area as the bounding rectangle or are you using X and Y offsets with a width and height? I am doing the latter for more accurate collision detection, but it eats CPU time due to the multiple adds.<br /><br />Also, is everyone using 16-bit values for X and Y? I am using 8-bit values with two bits in the flags byte for the object that act as a ninth bit. I skip any object that is off-screen in either direction (as in I don't even generate bounding rects for them) and then clip the bounding rect to the screen. This way the collision detection code is a LOT simpler.<br /><br />I am using a JSR / RTS for the collision test. I wounder if in-lining this would help much. I'll test that next.<br /><br />What I would like to do is put together a best practices document for collision detection and response on the NES. Of course it would not apply for every genre, but I see this as a big barrier to entry for folks wanting to develop more complex NES homebrew.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Fri Mar 04, 2011 10:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-03-04T07:34:15-07:00</updated>
<published>2011-03-04T07:34:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75093#p75093</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75093#p75093"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75093#p75093"><![CDATA[
<div class="quotetitle">qbradq wrote:</div><div class="quotecontent"><br />Here is my approach, but it is taking 42 scan lines for 8 enemies, 5 bullets and 1 player.<br /></div><br />Is that just for the collisions? That time might not be so bad depending on how much you spend on the AI and background collisions (something you might not even have in a space shooter, for example).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Mar 04, 2011 7:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2011-03-04T11:35:48-07:00</updated>
<published>2011-03-04T07:16:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75092#p75092</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75092#p75092"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75092#p75092"><![CDATA[
This has been a very timely discussion as I am implementing collision detection this week <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Here is my approach, but it is taking 42 scan lines for 8 enemies, 5 bullets and 1 player. I'd love some advice on how I can improve this.<br /><br />I am basically implementing the collision grouping idea of the OP but in a different way. I have very narrowly defined criteria for what will collide with what.<br /><br />1. Player projectiles with Enemy ships<br />2. Enemy projectiles with the Player's ship<br /><br />As such I did not use the bitmask approach. Here's what I do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1. Iterate through all objects<br />    a. Calculate the bounds of each object in RAM &#40;top, left, bottom, right&#41;<br />    b. Place the object in a collision array based on it's type &#40;player projectile, enemy projectile, or enemy&#41;<br />    c. Make note of the player's object number when we see it<br />2. Iterate through all player projectiles<br />    a. Iterate through all enemy ships and compare bounds<br />    b. If there is a collision, handle it<br />3. Iterate through all enemy projectiles<br />    a. Compare bounds with the player's ship<br />    b. If there is a collision, handle it<br /></div><br /><br />This is about as efficient as I can think to make it. I am only calculating bounds once per each object and I am only comparing those bounds for unique sets of objects. My problem comes with scaling. With 8 enemies and 5 player bullets that's 40 comparisons.<br /><br />I know it is possible to do very large scale object collision on the NES. Take LifeForce for example. The player can have up to 10 projectiles on the screen at any one time along with up to 30 enemies (see level 2, falling rocks segment) without slowdown.<br /><br />I tried limiting my game to 30 FPS to give me more time for collision detection, but this looks simply awful. Should I keep looking at multiplexing or am I just doing collision detection poorly?<br /><br />[EDIT]<br />Trying not to hijack the thread here, I just wanted to let others that read this later know how I resolved my problems. In the above code block I was using a subroutine to check the bounding rects. In-lining this saved about 14% of the execution time. I then multiplexed the collision detection, only processing even-numbered bullets on even-numbered frames and vice versa. <br />[/EDIT]<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Fri Mar 04, 2011 7:16 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-03-03T17:45:25-07:00</updated>
<published>2011-03-03T17:45:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75058#p75058</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75058#p75058"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75058#p75058"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">You can use the same solution again, and have a linked list of empty slots, so there will be no need to scan. When you need a free slot, just grab the first one and make the second one the new first, and when you free a slot you can do the opposite. Memory use will just increase by 1 byte, the one used to indicate the first free slot, because objects can't be in both lists, so you can still get away with only one byte per object indicating the next one.<br /></div><br /><br />Wow, never thought of this trick.  That's a great idea!</div><br />Yeah, that's phenomenal! <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu Mar 03, 2011 5:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-03-03T12:05:52-07:00</updated>
<published>2011-03-03T12:05:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75032#p75032</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75032#p75032"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75032#p75032"><![CDATA[
Wikipedia has heard of <a href="http://en.wikipedia.org/wiki/Free_list" class="postlink">free lists</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Mar 03, 2011 12:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2011-03-03T11:30:33-07:00</updated>
<published>2011-03-03T11:30:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75028#p75028</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75028#p75028"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75028#p75028"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If your linked lists are very dynamic (for example, projectiles being added and removed frequently), then you may end up with a heap of memory with lots of holes, and every time you want to add an object to a list, you'd need to scan through the whole heap to locate a free spot.<br /></div><br />You can use the same solution again, and have a linked list of empty slots, so there will be no need to scan. When you need a free slot, just grab the first one and make the second one the new first, and when you free a slot you can do the opposite. Memory use will just increase by 1 byte, the one used to indicate the first free slot, because objects can't be in both lists, so you can still get away with only one byte per object indicating the next one.<br /></div><br /><br />Wow, never thought of this trick.  That's a great idea!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Thu Mar 03, 2011 11:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-03-03T10:02:53-07:00</updated>
<published>2011-03-03T10:02:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75023#p75023</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75023#p75023"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=75023#p75023"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br />If you have a lot of objects and/or groups, that could potentially use up a lot of memory, even if it's just lists of pointers.<br /></div><br />I admit that there might be some memory overhead depending on how you implement the lists, but my implementation just requires one byte to point to the first element and one byte per object (it's in a constant place in the object's memory) to indicate the next element in the list.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If your linked lists are very dynamic (for example, projectiles being added and removed frequently), then you may end up with a heap of memory with lots of holes, and every time you want to add an object to a list, you'd need to scan through the whole heap to locate a free spot.<br /></div><br />You can use the same solution again, and have a linked list of empty slots, so there will be no need to scan. When you need a free slot, just grab the first one and make the second one the new first, and when you free a slot you can do the opposite. Memory use will just increase by 1 byte, the one used to indicate the first free slot, because objects can't be in both lists, so you can still get away with only one byte per object indicating the next one.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Each actor has one byte (defined by the actor type, with that table in ROM) which can assign up to 8 teams simultaneously (and a byte to 'watch' 8 teams simultaneously), where the linked list method would require duplicate list entries (in ram) to achieve the same thing.<br /></div><br />Not really, as explained above. If your collision masks are stored in ROM (if they were in RAM, the memory use would be practically the same as the linked lists way), that inner loop that checks the flags will take even more CPU time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Mar 03, 2011 10:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Wave]]></name></author>
<updated>2011-03-03T02:25:25-07:00</updated>
<published>2011-03-03T02:25:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74997#p74997</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74997#p74997"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74997#p74997"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br /><strong>So I guess it comes down to CPU vs Memory usage. </strong>:P<br /></div><br />It's almost ALWAYS a CPU vs Mem issue <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4116">Wave</a> — Thu Mar 03, 2011 2:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-03-02T23:22:48-07:00</updated>
<published>2011-03-02T23:22:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74991#p74991</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74991#p74991"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74991#p74991"><![CDATA[
Don't worry, I didn't take any offense to anything. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Part of this thread <em>was</em> to get critiques, after all. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Plus, it's always a good thing to present multiple ways to solve the same problem. Programming would be very boring if we all had to do it one way! <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />Yeah, you do have a good point; you perform less checks if you group the actors together with those lists, but a shortcoming with that is the fact that you're storing several lists, one list for each group. If you have a lot of objects and/or groups, that could potentially use up a lot of memory, even if it's just lists of pointers. If your linked lists are very dynamic (for example, projectiles being added and removed frequently), then you may end up with a heap of memory with lots of holes, and every time you want to add an object to a list, you'd need to scan through the whole heap to locate a free spot.<br /><br />The only advantage my method would have over this is the fact that the memory is more static; the only actor related stuff in the memory are the actors themselves. Each actor has one byte (defined by the actor type, with that table in ROM) which can assign up to 8 teams simultaneously (and a byte to 'watch' 8 teams simultaneously), where the linked list method would require duplicate list entries (in ram) to achieve the same thing.<br /><br />If you have the memory to spare though, the efficiency of the checks may be worth the expense of extensive memory management, because arguably, the checks would be occuring a lot more frequently than the addition/removal of objects.<br /><br />So I guess it comes down to CPU vs Memory usage. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Wed Mar 02, 2011 11:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-03-02T20:18:32-07:00</updated>
<published>2011-03-02T20:18:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74987#p74987</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74987#p74987"/>
<title type="html"><![CDATA[Handy collision detection]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7522&amp;p=74987#p74987"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br />Either way, we're still grouping things together and checking other groups. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /></div><br />Yeah, the basic difference is when and where in the code those checks happen, but final effect is pretty much the same.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This is just how I structured my code. By all means, you should definitely stick with your own ways of doing things if it's more comfortable to you.<br /></div><br />Sure, the same to you. I know how difficult it can be to find solutions for problems like these, and when we finally do we grow very fond of our conclusions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm only posting about my ways in case it may be helpful to someone.<br /></div><br />Yeah, same here. Maybe your method sounded more complicated than it actually is, so I kinda felt the need to present an alternative solution, even if only to let people know that there are various possible ways to solve this issue.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Iterating through all unique pairs of actors (without redundancy) is trivial:<br />A B C D E<br />Check A against B, C, D, E<br />Check B against C, D, E<br />Check C against D, E<br />Check D against E<br /></div><br />Sure, you found a simple way to make sure the collision checks aren't redundant, but you still waste some CPU time ANDing the masks of objects that will never collide. It might not seem like much with just 5 objects, but it might add up to something significant when there are, say, 20 active objects. Let's see what happens with 10 objects:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A B C D E F G H I J<br /><br />check A against B C D E F G H I J<br />check B against C D E F G H I J<br />check C against D E F G H I J<br />check D against E F G H I J<br />check E against F G H I J<br />check F against G H I J<br />check G against H I J<br />check H against I J<br />check I against J</div><br />That's 45 checks you have to do just to figure out what collisions to check for. I'll assume your loop looks something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   ldy #FIRST_OBJECT ;2 cycles<br />OuterLoop:<br />   tya ;2 cycles<br />   tax ;2 cycles<br />   inx ;2 cycles<br />InnerLoop:<br />   lda CollisionMask, y ;4 cycles<br />   cmp CollisionMask, x ;4 cycles<br />   beq SkipCollision ;3 cycles<br />   ;;;COLLISION CHECK GOES HERE;;;<br />SkipCollision:<br />   inx ;2 cycles<br />   cpx #LAST_OBJECT+1 ;2 cycles<br />   bne InnerLoop ;3 cycles<br />   iny ;2 cycles<br />   cpy #LAST_OBJECT ;2 cycles<br />   bne OuterLoop ;2 cycles</div><br />If this is really the case, just the inner loop, repeating 45 times, will use nearly 8 scanlines. Considering the rest of the code, that doesn't run 45 times, it goes a little past 8 scanlines.<br /><br />Now say that 4 of these objects are enemies and 6 are projectiles. This means you'll need 24 collision checks:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">enemy A against projectiles E F G H I J<br />enemy B against projectiles E F G H I J<br />enemy C against projectiles E F G H I J<br />enemy D against projectiles E F G H I J</div><br />The collision checks will obviously take more time, but that doesn't matter because the same number of collision checks would be performed either way. The point is that while with collision masks you'd need to spend 8 scanlines just figuring out who can collide with who, with the linked lists you can skip straight to the collision checks.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Take a byte from A, AND it with a byte from B.<br /></div><br />This might not be so versatile if 8 bits aren't enough for all the group combinations you want to make.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This doesn't take any more or less time to perform than iterating through linked lists repeatedly<br /></div><br />I think there is a difference... it might be negligible to you, but it is there. A liked list tells you right away which objects you need to collide with, there is no need to waste CPU time figuring out whether one type of object should collide with another... if an objected requested collision checks against the objects in a linked list, you just know that ALL the objects in the list represent possible collisions.<br /><br />I'm not saying your solution sucks, it's probably perfect for your game, or you wouldn't be using it. But I did notice some possible problems with your method, so I thought I should bring them up. Maybe they are not really problems for you, but I still wanted to show another way to handle collisions, and I'm trying to explain the difference. I hope you don't take this as an attack to you or as a claim of superiority from my part, I just want to get what I think is a good solution out there, so other people can hopefully use our methods as inspiration for making their own, rather than copying one or the other directly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Mar 02, 2011 8:18 pm</p><hr />
]]></content>
</entry>
</feed>