<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Small C for NES: A Curious Journey</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Small C for NES: A Curious Journey</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10205">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10205</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Jun 26, 2013 9:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I thought about this, sure, it could be done this way.<br /><br />As for 24K for fixed bank, where it comes from. I tried to remove music and level data from the Sir Ababol game, leaving only compiled C code and some minor data pieces. Full game takes ~29K, with these things removed it is ~14K, so there is ~15K of data (a half of total size). I think a more complex game will have enough extra code to go over 16K, but probably could fit 24K.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Jun 27, 2013 1:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Too bad that to my knowledge there are no discrete logic mappers that allow this configuration, and MMC3 probably would be an overklll.</div>You could fake it by using UNROM and just duplicating the top half (what will be banked into $A000-BFFF) across each changeable bank. A little wasteful, but I don't think problematically so.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 27, 2013 2:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Speaking of programming a large game in C with a mapper, for now I think I'd go with 8+24 PRG and CHR RAM configuration, i.e. first 8K of PRG with bankswitching for all kinds of large data (music, level maps, graphics), top 24K fixed for C code, vectors, maybe a bit of DPCM.</div><br />Sounds like MMC2 to me, except for the CHR-RAM part, but having automatically switchable CHR-ROM is very nice too !<br /><br />And rainwarror, thank you very much for clarifying multi-dimentional arrays in C ! This has never been totally clear in my mind, but now I think it is. So it turns out that arrays and pointers are different things in C, but they just happen to be &quot;accessed&quot; with the same syntax.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jun 27, 2013 6:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I think I'd go with 8+24 PRG and CHR RAM configuration, i.e. first 8K of PRG with bankswitching for all kinds of large data (music, level maps, graphics), top 24K fixed for C code, vectors, maybe a bit of DPCM.</div><br />So you want to take the top half of the address space and &quot;punch out&quot; a window for banked data.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Too bad that to my knowledge there are no discrete logic mappers that allow this configuration, and MMC3 probably would be an overklll.</div><br />As Bregalad pointed out, an MMC2 with the CHR banking logic bypassed implements exactly this memory model, but you probably don't want to rip up a Punch-Out!!. So either clone the MMC2 in a CPLD or build a three-chip discrete mapper that uses 74161 and <strong>[nope, messed up, see lidnariq's post below]</strong>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Thu Jun 27, 2013 9:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Too bad that to my knowledge there are no discrete logic mappers that allow this configuration, and MMC3 probably would be an overklll.</div>You could fake it by using UNROM and just duplicating the top half (what will be banked into $A000-BFFF) across each changeable bank. A little wasteful, but I don't think problematically so.</div><br />Clever, thanks for the idea, I somehow didn't think about it. 256K ROM would then give 144K of usable space in this configuration, not too bad, considering it'll keep it simple hardware-wise and compatible with emulators.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu Jun 27, 2013 10:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">You could fake it by using UNROM and just duplicating the top half (what will be banked into $A000-BFFF) across each changeable bank. A little wasteful, but I don't think problematically so.</div><br /><br />Yeah you should be fine doing that.  Something told me I should hold off on saying it wasn't possible until you chimed in.  I never thought about just tossing some cheap bits at the problem. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Jun 27, 2013 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Since the extra fixed bank is being faked at the preparation stage, the other nice thing is that you no longer have to have a strict 24/8 division. I'd assume larger variable banks would be more generally useful, but you could obviously go for more fixed bank too.<br /><br />(That said, the &quot;real&quot; solution is 74'161 + 74'157 + some logic whose truth table has three identical values, such as:<br />* Variable bank from $8000-$9FFF: 74'1G02 / 74'1G32 or two transistors<br />* from $A000-$BFFF: <a href="http://forums.nesdev.com/viewtopic.php?p=108918#p108918" class="postlink">A13&gt;A14 (single transistor)</a><br />* from $C000-$DFFF: A14&gt;A13 (single transistor)<br />* from $E000-$FFFF: 74'1G08 / 74'1G00 or two transistors)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Thu Jun 27, 2013 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On a second thought, I like this approach even more, as it does not require the switchable part to actually be 8K, which is pretty flexible. If linear space of compiled C code takes, say 20K, the switchable part could be 12K rather than 8K, reducing wasted space (200K of usable space on a 256K ROM). Or, if the code got slightly past 24K, and 8+16K configuration wouldn't be effective anymore (will require data duplication as well), this method would still work without changes, although switchable part will be smaller, and amount of wasted space will increase. Another thing, to store CHR data in PRG (with CHR RAM configuration), few 16K banks could only contain CHR data without duplicating the unswitchable part, and a small routine that unpacks/uploads CHR data could be placed near the top of memory. The same could be done with sound and music data. This again increases amount of usable space.<br /><br />Sure, it isn't a perfect way to go, but considering simplicity and flexibility, it is a good option.<br /><br />Edit: ninja'd by idnariq with this

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 27, 2013 12:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, this is an elegant solution, and the day the compiler is updated and produces more efficient banked code that fits in 16k, you don't have to &quot;rethink&quot; everything, you just adapt it and that's it. Very elegant.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Thu Jun 27, 2013 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">batari Basic looks very interesting. It has a number of limitations similar to what I'm talking about. For one there's no parametrized subroutines or functions. Another thing is all math is 8-bit, which works out pretty OK for the 2600. It looks like the final version uses a program-at-a-time banking method, which fits the 2600's limitations.<br /><br />The compiler I've been working on is similar to batari Basic, but has parameterized subroutines, n-byte math and a more modern syntax.<br /><br />I like the idea of offering game &quot;kernels&quot; to end users to allow rapid development of pet projects. Sounds pretty awesome really!<br /><br />Thank you all again for your input. This has given me a lot of perspective.</div><br /><br />While trying to learn C I've always fought with the syntax and formatting of instructions.  I've never had to do that with relaxed languages like BASIC.  I'd rather focus on game logic then white space or brackets being off.<br /><br />I'd really like to see this project take off.  I've tried to help test Scratchalan but I haven't heard back from the developer in ages.  You can count on me to test the heck out of this once binaries are released.  Got the PowerPak ready <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Jun 27, 2013 8:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Idea for automatically making variables static (not on stack)<br /><br />You have functions, and they need some amount of local variables or function arguments.  If you can reduce this with an optimizer, all the better.<br />Start by making a call graph.  One root for each thread (main thread, IRQ, NMI).  Consider everything that may be assigned to a function pointer, as well as calls to the function pointer.<br />If a function may possibly call itself due to a loop in the call graph, it needs stack variables.  Otherwise, it can use static variables.<br />Use the call graph to allocate static space that doesn't overlap.<br /><br />Duplicate functions that are called from IRQs if they overlap with code from main.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Jun 28, 2013 4:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looking over the disassembly notes, SMB3 has 5 8k banks of code for objects alone. Out of the 32 banks in the ROM, 19 contain code. I haven't been able to find (and can't be bothered to make) a code / data log for the game so I don't know how dense this code is, but I'd be willing to bet it's more than 24k. Like a lot more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jun 28, 2013 8:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Idea for automatically making variables static (not on stack)<br /><br />You have functions, and they need some amount of local variables or function arguments.  If you can reduce this with an optimizer, all the better.<br />Start by making a call graph.  One root for each thread (main thread, IRQ, NMI).  Consider everything that may be assigned to a function pointer, as well as calls to the function pointer.<br />If a function may possibly call itself due to a loop in the call graph, it needs stack variables.  Otherwise, it can use static variables.<br />Use the call graph to allocate static space that doesn't overlap.<br /><br />Duplicate functions that are called from IRQs if they overlap with code from main.</div><br />Even being able to USE statically allocated variables/arguments would be very helpful, even if it didn't do any automatic detection of stack/static variables. In CC65 you always have to use the slow software stack, even though majority of functions in a typical application don't need recursion (99% of the time you don't need recursion or can rework your algorithms not to use it). The only &quot;workaround&quot; is to use global variables (for parameters) and/or static locals (for local variables), but both solutions suck.<br /><br />I believe Atalan supports this type of automatic detection. I'm kind of surprised nobody has written a NES game with Atalan (that I know of...), but I guess it's mostly because of the esoteric syntax.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jun 28, 2013 8:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually, having automatic stack deletion can make better code than assembly (memory usage wise) !<br />Why ?<br />Because the compiler can do a call graph, and re-use variable among mutually exclusive function. This is harder to do in assembly as it has to be done in assembly, and oh my god, HOW MANY TIMES DID I MESS THIS UP ? Quite a lot.<br /><br />Atalan looks amazing. The problem is that it's a new language, and that it's not (yet ?) portable. C, on the other side, is easily portable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Fri Jun 28, 2013 9:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">I'm kind of surprised nobody has written a NES game with Atalan (that I know of...), but I guess it's mostly because of the esoteric syntax.</div><br /><br />Nope.  I'd love to use Atalan but the NES page is barely there.  Certainly not enough information for a new user to start making games.<br /><!-- m --><a class="postlink" href="http://atalan.kutululu.org/nes.html">http://atalan.kutululu.org/nes.html</a><!-- m -->

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>