<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=2308" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-10-22T01:06:23-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=2308</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-10-22T01:06:23-07:00</updated>
<published>2006-10-22T01:06:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18741#p18741</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18741#p18741"/>
<title type="html"><![CDATA[Max tiles updated during vblank?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18741#p18741"><![CDATA[
This has been covered <a href="http://nesdev.com/bbs/viewtopic.php?t=259" class="postlink">here</a>.<br />Tell us if you still need more explainations.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Oct 22, 2006 1:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-10-21T18:29:48-07:00</updated>
<published>2006-10-21T18:29:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18729#p18729</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18729#p18729"/>
<title type="html"><![CDATA[Max tiles updated during vblank?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18729#p18729"><![CDATA[
Fastest way to modify tile memory? Maybe doing INC $2007 over and over, since it does a double write in a 5-clock instruction, though it also reads so it'd modify two out of every three bytes. You can fill tile memory quickly using an unrolled loop consisting of a bunch of STA $2007 instructions. If the data can be determined in advance, you can dynamically generate code consisting of LDA #value, STA $2007 for each byte to modify. As tokumaru mentioned, you can fill the stack with the reversed data then pop it off in an unrolled loop consisting of PLA, STA $2007.<br /><br />With about 2270 CPU clocks for VBL, reduced by 513 for sprite DMA, I calculate 439 bytes (27 tiles) filled, 292 bytes (18 tiles) for dynamic writing, and 219 bytes (13 tiles) for the stack method.<br /><br />If you need to quickly modify ever pixel of many tiles per frame, you could double the tile counts above by modifying only one bit plane of the tiles. To get around the problem of quickly skipping every other 8 bytes, you could use the PPU's 32 byte skip mode and write the data in a somewhat convoluted fashion that reduces the number of $2006 writes to 8:<br /><br />$0000, $0020 ...<br />$0001, $0021 ...<br /><br />This wouldn't complicate the code much since it would only involve storing the source data in this scrambled order. It would mean that you use even tiles only: 0, 2, 4 ...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Oct 21, 2006 6:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2006-10-21T17:33:33-07:00</updated>
<published>2006-10-21T17:33:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18728#p18728</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18728#p18728"/>
<title type="html"><![CDATA[Max tiles updated during vblank?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18728#p18728"><![CDATA[
I guess it all depends on the method you use. I once heard of a game that would put the data on the stack before VBlank, so that when it's time to write all you have to do is pop the bytes and write to VRAM.<br /><br />Anyway, I guess that with the quickest methods you'd be able to write 256 bytes during NTSC VBlank safely. That'd be 16 tiles. But then I don't think there would be time for a sprite DMA. Since PAL VBlank takes like, more than 3 times the NTSC one, that'd be a lot more tiles. I'm against PAL-only code though.<br /><br />Anyway, I think it would be smart to give up on a few scanlines so that you could upload a much higher number of tiles.<br /><br />Are you planning on doing some sort of bitmap display or something?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Oct 21, 2006 5:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2006-10-21T17:15:36-07:00</updated>
<published>2006-10-21T17:15:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18727#p18727</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18727#p18727"/>
<title type="html"><![CDATA[Max tiles updated during vblank?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2308&amp;p=18727#p18727"><![CDATA[
What is the max number of CHR tiles that can be updated during vblank on NTSC and PAL?  (I'm assuming the full 16 bytes are rewritten, and assuming that sprite DMA takes place)<br /><br />Edit: The search feature really sucks, I already found out the answer to this question for NTSC, but the search was very unhelpful.  Fix the search, and I won't have to ask redundant questions!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Oct 21, 2006 5:15 pm</p><hr />
]]></content>
</entry>
</feed>