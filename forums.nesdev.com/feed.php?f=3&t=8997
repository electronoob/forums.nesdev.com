<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8997" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-06-13T10:12:01-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8997</id>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-06-13T10:12:01-07:00</updated>
<published>2012-06-13T10:12:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95466#p95466</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95466#p95466"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95466#p95466"><![CDATA[
<div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />I would carry this over to <a href="http://www.qmtpro.com/~nes/chipimages/visual2a03/expert.html" class="postlink">visual2a03</a> but it doesn't seem to accept the toggling of the IRQ input.<br /></div><br />Quietust has addressed the problem I mentioned above so now IRQs can be fed to Visual2A03.  While looking at that I got sidetracked by the sprite DMA versus DMC DMA conversation that I'd wanted to run through Visual2A03.  <a href="http://nesdev.com/bbs/viewtopic.php?t=9009&amp;highlight=" class="postlink">This thread</a> was the result of that.  Hopefully I have more time to play with Visual2A03.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Wed Jun 13, 2012 10:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2012-06-13T08:23:20-07:00</updated>
<published>2012-06-13T08:23:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95461#p95461</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95461#p95461"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95461#p95461"><![CDATA[
If your test/affirmation is correct, regarding the interrupt IRQ triggering, so I have to disagree about blargg's VBlank flag test on $2002 reads, which would sound absurd.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Wed Jun 13, 2012 8:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-06-11T11:23:39-07:00</updated>
<published>2012-06-11T11:23:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95353#p95353</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95353#p95353"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95353#p95353"><![CDATA[
<div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br /><div class="quotetitle">cpow wrote:</div><div class="quotecontent">I had some discussion on this previously with the 6502.org folks.  I also ran some Visual6502 simulations...<br /></div><br /><br />Well I guess that further proves my point that it's unpredictable...<br /><br />Out of curiosity what is the difference between the two?  <br /><br />One other thing not simulated there is the pull-up on the IRQ line.  So depending on the strength of the device firing the IRQ a half cycle long IRQ has even less of a chance of getting acknowledged.</div><br /><br />The difference between the two is just what half-cycle the IRQ 'fires' on.  You can see it in the trace at bottom-right under the irq column.  <br /><br />As was pointed out in the 6502.org forum where this discussion took place, the typical usage of IRQ is to pull it active until some action causes the thing pulling it active to let it go.  Thus, a half-CPU-cycle IRQ isn't a typical occurrence.  But it's relevant here because it shows [I think] where the sensing of the interrupt occurs [the Break flag clearing in the second half-cycle.<br /><br />I would carry this over to <a href="http://www.qmtpro.com/~nes/chipimages/visual2a03/expert.html" class="postlink">visual2a03</a> but it doesn't seem to accept the toggling of the IRQ input.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Mon Jun 11, 2012 11:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-06-11T10:20:51-07:00</updated>
<published>2012-06-11T10:20:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95347#p95347</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95347#p95347"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95347#p95347"><![CDATA[
<div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />I had some discussion on this previously with the 6502.org folks.  I also ran some Visual6502 simulations...<br /></div><br /><br />Well I guess that further proves my point that it's unpredictable...<br /><br />Out of curiosity what is the difference between the two?  <br /><br />One other thing not simulated there is the pull-up on the IRQ line.  So depending on the strength of the device firing the IRQ a half cycle long IRQ has even less of a chance of getting acknowledged.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Jun 11, 2012 10:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-06-11T07:21:33-07:00</updated>
<published>2012-06-11T07:21:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95336#p95336</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95336#p95336"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95336#p95336"><![CDATA[
<div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br />But the real question is were IRQs enabled when the IRQ triggering event occured.  If yes, you get an IRQ if not you don't.  But then the second (6502) question is how long does the IRQ line have to be asserted in order for the CPU to recognize it?<br /></div><br />I had some discussion on this previously with the 6502.org folks.  I also ran some Visual6502 simulations...<br /><br /><a href="http://visual6502.org/JSSim/expert.html?a=fffe&amp;d=40&amp;a=0&amp;d=a901a90258a903a904a905a906a907a908a90910fe&amp;a=40&amp;d=a90040&amp;irq0=17&amp;irq1=18&amp;logmore=irq&amp;steps=50" class="postlink">This</a> shows an acknowledged IRQ that is a half-CPU-cycle long.<br /><br /><a href="http://visual6502.org/JSSim/expert.html?a=fffe&amp;d=40&amp;a=0&amp;d=a901a90258a903a904a905a906a907a908a90910fe&amp;a=40&amp;d=a90040&amp;irq0=16&amp;irq1=17&amp;logmore=irq&amp;steps=50" class="postlink">This</a> shows an unacknowledged IRQ that is a half-CPU-cycle long.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Mon Jun 11, 2012 7:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-06-10T19:50:42-07:00</updated>
<published>2012-06-10T19:50:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95310#p95310</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95310#p95310"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95310#p95310"><![CDATA[
The thing is it doesn't depend as much as what's happening with the CPU as what's happening with the device that generating the IRQ.<br /><br />koitsu: while what you're saying about the CPU finishing the instruction before handling the IRQ is true, your answer assumes the IRQ is actually generated.  The question here is also dependent on whether it was ever generated in the first place.<br /><br />For example if you considered and IRQ from something like the MMC3 scanline counter.  Now extremely specific details on the MMC3 like this aren't really known.  But one thing is pretty apparent, rising edges of CHR A12 trigger IRQs assuming they are enabled.  So since CHR A12 is on a faster clock than the CPU there are 3 times that the IRQ could be triggered for a given CPU cycle etc.<br /><br />But the real question is were IRQs enabled when the IRQ triggering event occured.  If yes, you get an IRQ if not you don't.  But then the second (6502) question is how long does the IRQ line have to be asserted in order for the CPU to recognize it?  <br /><br />You could assume that writes (disabling IRQs) happen on the second half of the CPU cycle.  So CHR A12 rises late or early in the cycle you might get different responses.  Early in the cycle and I'd imagine the MMC3 would generate and IRQ breifly before getting disabled.  However being an open collector signal the line probably doesn't have enough time to get pulled low enough for the CPU to see it.  I could go on and on about what might happen if it comes late in the CPU cycle.  <br /><br />But really the best answer here is it's unpredictable/unknown behavior.  Knowing more details about how the MMC3 disables IRQs exactly you might be able to answer your question but that only answers if for the MMC3.<br /><br />Your second question about SEI is a completely different question really.  I'd imagine that your right that you could answer that question with the visual6502.  Although it may very well still depend on when during the CPU cycle the device generates the IRQ, the visual6502 will probably let you know whether it does or not.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Sun Jun 10, 2012 7:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-06-10T19:44:36-07:00</updated>
<published>2012-06-10T19:44:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95308#p95308</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95308#p95308"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95308#p95308"><![CDATA[
I was always under the impression that as part of the pipelining process, the CPU looks for interrupts one cycle before the end of the instruction.<br /><br />So in the case you described, koitsu, the status of the I flag and any pending IRQ would be relevant <em>only</em> at the end of the first cycle of SEI.  If the interrupt happens after that, the CPU has already begun pipelining the next instruction and it would be too late to interrupt.<br /><br />But that's complete speculation on my part.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Jun 10, 2012 7:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2012-06-10T18:58:40-07:00</updated>
<published>2012-06-10T18:58:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95305#p95305</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95305#p95305"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95305#p95305"><![CDATA[
The CPU instruction gets precidence in the case of a tie.  Existing 65xxx docs (I can point you to the exact document/page/paragraph if you want to read it) state that in the case of an interrupt occurring in the middle of a CPU instruction, the CPU instruction finishes normally then the interrupt happens.<br /><br />There's only one gotcha to this, and it's one I'm curious about myself:<br /><br />Let's say the instruction in question is SEI and the incoming interrupt is a hardware IRQ (not NMI; NMI always happens independent of the i bit in P).  Let's say the hardware IRQ happens after the 1st but before the 2nd cycle of SEI.  In this case, I'm not sure what happens; would the CPU would finish doing the 2nd cycle of SEI, thus bit i would be set, then the interrupt would be ignored because i is set?  I simply don't know.  I'm sure someone could verify the actual behaviour using visual6502.org (that's exactly why it exists, to determine situations/cases like this!)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Sun Jun 10, 2012 6:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2012-06-10T17:30:56-07:00</updated>
<published>2012-06-10T17:30:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95298#p95298</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95298#p95298"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95298#p95298"><![CDATA[
I believe it's called "race condition". If you consider the IRQ is acknowledged in the last cycle of the current instruction <strong>and</strong> reading/writting from/to a register occurs <em>before</em> the acknowledge, I'd say the IRQ occurs.<br /><br />One example is the VBlank flag. From the test roms: <em>"flag should read as set 0 PPU clocks after VBL"</em>. It means reading $2002 right on VBlank cycle, which <em>should</em> clear it.<br /><br />I may be wrong, though...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Sun Jun 10, 2012 5:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-06-10T17:00:35-07:00</updated>
<published>2012-06-10T17:00:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95296#p95296</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95296#p95296"/>
<title type="html"><![CDATA[Interrupt timing and writes to acknowledge them]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8997&amp;p=95296#p95296"><![CDATA[
Let's say that you are doing a write to clear an interrupt at almost the same time as the interrupt happens.<br />The CPU cycle that writes to memory happens at W.<br />The IRQ flag from the interrupting device happens at I.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">....I<br />...W<br /></div><br />In this case, the interrupt happens after the write to acknowledge it, so you clearly get an interrupt.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">..I<br />...W<br /></div><br />In this case, the interrupt happens before the CPU instruction writes to clear it, and the CPU clears it, so no interrupt happens.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...I<br />...W<br /></div><br />But what about the condition where there's a tie?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sun Jun 10, 2012 5:00 pm</p><hr />
]]></content>
</entry>
</feed>