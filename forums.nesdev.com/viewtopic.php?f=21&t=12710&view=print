<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MyaGrafx: Minimal 8x8 pixel attributes</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MyaGrafx: Minimal 8x8 pixel attributes</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=21&amp;t=12710">http://forums.nesdev.com/viewtopic.php?f=21&amp;t=12710</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Wed Apr 22, 2015 6:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">In <a href="http://forums.nesdev.com/viewtopic.php?p=145690#p145690" class="postlink">this post</a>, tepples wrote:</div><div class="quotecontent">Perhaps someone should mock up a specification for a CPLD that <em>only</em> provides 8x8 attributes and nothing else.</div><br />So <a href="http://wiki.nesdev.com/w/index.php?title=User:Myask/MyaGrafx&amp;oldid=10354#Basic_Implementation" class="postlink">something (static ver.)</a> that did basically this:

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<img src="./download/file.php?id=3101" alt="MyaGrafx.png" /><br />
			<span class="gensmall">MyaGrafx.png [ 2.33 KiB | Viewed 5447 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Wed Apr 22, 2015 8:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://wiki.nesdev.com/w/index.php?title=User:Myask/MyaGrafx&amp;oldid=10355#Basic_Implementation" class="postlink">New version</a> with different attribute organisation, <s>moment while I make a new graphic.</s>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<img src="./download/file.php?id=3104" alt="MyaGrafxDS.png" /><br />
			<span class="gensmall">MyaGrafxDS.png [ 2.46 KiB | Viewed 5415 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Apr 24, 2015 8:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I was about to yell at you with the previous organization =P (although I think that it being big endian instead of little endian may be better, but this is still more manageable anyway)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Apr 24, 2015 8:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The original organization is &quot;free&quot; because it retains the  PPU's existing subdivision. The nicer organization requires something to shove bits around ... which is why UNL_DripGame presents its interface to 8x8 attributes as a 2048x2-bit array in CPU memory. (Does the convenience of  &quot;no bitpacking&quot; outweigh the &quot;takes four times as long&quot;?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Apr 24, 2015 9:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I do not understand this picture. Attribute table RAM is normally $40 bytes long.<br /><br />Personally if I'd have to do a circuit that does *only* 8x8 (or any finer than 16x16) attribute size, I believe it should be possible to do with discrete logic (and maybe PAL), by sacrifying one name table in CIRAM, and use the other half of CIRAM for colour data. Unfortunately it's *not* possible to highack the adress lines of CIRAM, making such a trick hard to realize. The answer is to steal a part of CHR-RAM, whose address lines *can* be highacked, by the second 1k of CIRAM.<br /><br />So it'd work like that :<br />* Name-table : 1k of CIRAM (minus $3c0-$3ff, unused)<br />* Finer-grained attribute-table : 1k of CHR-RAM (reads like a name, table)<br />* Pattern tables : 7k stands in physical CHR-RAM, and 1k in the second half of CIRAM, but nobody notices, and this fakes 8k of CHR-RAM<br /><br />A register traps NT fetched, and uses it's adress to replace adress lines of CHR-RAM on AT fetches... that's it. Not very simple, but not very complicated either. Oh, and all the content of the new attribute table should be repeated 4 times in a byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Apr 24, 2015 10:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice idea, Bregalad! It just sounds like a waste of space to dedicate the an entire 1KB to attributes, while all you really need is 240 bytes. Couldn't we use the rest of this memory as a name table for status bars or something?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Fri Apr 24, 2015 12:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I touched on this briefly when <a href="http://forums.nesdev.com/viewtopic.php?p=131987#p131987" class="postlink">I was working on my own hypothetical mapper</a>.<br /><br />You take advantage of the fact that the currently-needed attribute fetching address is derived from the nametable fetch that occurs immediately beforehand, so that's the first fetch with ppuA13 high. You just remember the address from that fetch (using a latch or something), and then you rearrange the bits to form a new attribute address to fetch. My design arranged the expanded attribute table to be like the regular attribute table, but with 8x8 regions instead of 16x16 (so each byte described a 16x16 region of four 8x8 regions).<br /><br />And then after that, my design was to extract the two bits of interest from the extended attribute byte, repeating them 4 times to form a full byte, since the NES is still expecting its own attribute format and will select two bits out of the byte on its own, mirroring the bits just removes the need to figure out which two bits the NES is going to extract from the byte you give it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Apr 24, 2015 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It would probably be simple to just mirror the bits in the software that fills the attribute table, if you wanted to avoid spending hardware on extra data line mirroring logic.<br /><br />Spending 1k on attributes instead of packing them sounds sensible enough to me, if it simplifies the hardware. You're probably not hurting for CHR-RAM size these days.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri Apr 24, 2015 1:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><span style="font-size: 50%; line-height: normal">I thought I addressed most of this in the <a href="http://wiki.nesdev.com/w/index.php?title=User:Myask/MyaGrafx" class="postlink">linked page in my userspace</a>. Did people not click through?</span><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I do not understand this picture. Attribute table RAM is normally $40 bytes long.</div><span style="font-size: 80%; line-height: normal">I seem to have neglected to precisely mention the actual &quot;add a RAM chip to the cart to handle attributes&quot; anywhere, aside from the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">//then cart-internals: first, the &#40;probably 6264&#41;</tt></span> But since the [added] RAM was only being used for Attribute Tables, not CHR, I called it ATRAM.<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Unfortunately it's *not* possible to highack the adress lines of CIRAM, </div><br /><a href="http://wiki.nesdev.com/w/index.php?title=User:Myask/MyaGrafx#Basic" class="postlink">I did note/mention that...</a><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">A register traps NT fetched, and uses it's adress to replace adress lines of CHR-RAM on AT fetches... that's it. Not very simple, but not very complicated either. Oh, and all the content of the new attribute table should be repeated 4 times in a byte.</div><br />That, however, is pretty close to exactly what the Verilog I wrote on the <strong><a href="http://wiki.nesdev.com/w/index.php?title=User:Myask/MyaGrafx" class="postlink">linked page in my userspace</a></strong> does. (It also remaps more of PPU-address-space as a write port.) It stores each attribute byte as packed, though, and just mirrors the relevant two-bits across the byte when read based on the preceding NT-fetch...like what Drag said.<br /><br />[hr]<br /><br />Mind, I didn't actually design/code the actual PRG- and CHR-mapping portions that need taking care of. I'm told that 1,2,4kiB SRAMs are no longer cheaply available, just 8kiB and 32kiB. The 4-screen AT is ~1kiB. 4-screen NT (that is, adding 2 screens' worth) is ~2kiB. CHR-RAM unbanked is 8kiB, so that's not nice to add without adding banking...<br /><br />e: So what sort of CHR-banking (and PRG, I suppose) would be sensible, as it seems like &quot;just&quot; adding 8x8 attributes seems like a waste of CPLD?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Apr 24, 2015 4:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've figured out a simple &quot;CNRAM&quot; style discrete logic 8x8 attributes in 5 ICs (<a href="http://wiki.nesdev.com/w/index.php/User:Lidnariq/Mapper_thoughts#8.C3.978_attributes" class="postlink">nesdevwiki:User:Lidnariq/Mapper thoughts#8×8 attributes</a>).<br /><br />For the programmer, it'd be four 8 KiB pages of CHR-RAM, where tile #s $3C-$3F, $7C-$7F, $BC-$BF, and $FC-$FF in the left pattern table is replaced with the replacement attribute tables. Each of the four pages would correspond to the four corners of each 16x16 zone.<br /><br />But this is the layout that Sik was complaining about, so maybe it's a bit too annoying.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Fri Apr 24, 2015 11:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oops, I saw the image and skipped right over the link. Sorry. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> It looks like we had the same idea, so I don't have anything else to add, other than I tried a couple of layouts for the bitpacking and settled on the &quot;like the PPU except 8x8&quot; because it was already pretty versatile for both horizontal and vertical nametable updates.<br /><br />I think Tepples might've mentioned the CPLD so there'd be an implementation of 8x8 attribute tables for others to use in their CPLD mappers, since 8x8 attributes doesn't really provide any advantages or disadvantages for any particular chr/prg banking style.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Mon Apr 27, 2015 4:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Nice idea, Bregalad! It just sounds like a waste of space to dedicate the an entire 1KB to attributes, while all you really need is 240 bytes. Couldn't we use the rest of this memory as a name table for status bars or something?</div><br />(moved from split topic)<br />&quot;...per nametable upgraded. (And technically, 180 bytes, if you let CIRAM take some, but then you have less arrangement control.)&quot;<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> since 8x8 attributes doesn't really provide any advantages or disadvantages for any particular chr/prg banking style.</div> <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">like a waste of CPLD</div><br />okay, more like a waste of a 6264 (8kiB)...<br />There's already address lines attached to nice-arranged (present revision) to allow PPU-space mapped registers, at 14'b__11_xx01_RRRx_xxRR, instead of in CPU-space, but that would prevent raster effects from being as easy or as nice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri Oct 09, 2015 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes...8x16</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It occurs to me that one could implement 8x16 attributes with a little discrete logic: a flip-flop to toggle even/odd for each AT fetch, hooked up (with an AND to mask it to only AT area) to CIRAM /A10, so that the second nametable's attribute zone gets co-opted for the other half of the first. [Like my other &quot;simple&quot; suggestions, this is hellish to write to; restricting the oscillating behavior to reads with another input on the AND, and allowing PPUA10 to control CIRAMA10 for writes, would make it somewhat easier at the cost of somewhat more logic...but maybe you could fit it all in one NAND chip.]<br /><br />16x8 attributes would be harder, since you need to implement a scanline counter and then switch every 8.<br /><br />Of course, were the cartridge to have access to four more address lines, one would have just enough to maximize the first nametable's attribute density at 8x1, putting it in the other table. But that's just wishful thinking.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Oct 09, 2015 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For either 8x16 or 16x8 attributes you may as well just latch A0 or A5 on the nametable fetch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri May 20, 2016 8:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MyaGrafx: Minimal 8x8 pixel attributes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was pondering how to make hexagon-arranged square attributes (think how Koei's strategy games often do it)--but then I realized that just doing a 16x8 and having some mild redundancy in attribute tables would be far, far, easier than actually implementing 16x16 offset attributes (check row, check column, selecting the proper attribute out of the byte, adding to the row...) along with being more flexible for the rest of the screen.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>