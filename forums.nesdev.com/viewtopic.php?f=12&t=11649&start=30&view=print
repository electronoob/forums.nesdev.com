<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - A simple sprite demo for teaching</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">A simple sprite demo for teaching</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11649">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11649</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Feb 01, 2015 12:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I split out two more files. Now before I push out a new version of NROM, SNROM, and LoROM, I'm just waiting for koitsu to rip me a new one with constructive criticism <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Feb 01, 2015 3:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">So I split out two more files. Now before I push out a new version of NROM, SNROM, and LoROM, I'm just waiting for koitsu to rip me a new one with constructive criticism :?</div><br />*laugh* You crack me up man.  :P  Good thing I've been drinking this evening.<br /><br />I know this is kinda roundabout, but if you could download (in the other SNESdev thread, re: &quot;issues with 16-bit indexing&quot;) the MetaspriteTestKoitsu stuff, that might give you some insights into how I tend to lay things out.  The organisation there is not pristine, meaning it's not 100% how I'd implement stuff, but you'll get an idea of what I've changed + where my complaints stem from.  The template was kind of weird anyway, I was often confused by things like why there was &quot;zero page&quot; yet it was a 65816 program (and after trying to implement &quot;true direct page&quot; I now understand why you did stuff like leave ZP from $10-FF, although IMO that should really be $00-FF.  If there's a reason for $10-FF I'd love to know what it is!).<br /><br />A lot of it has to do with overall formatting.  Your comments and general organisation of code/directives are... compact?  I'm not sure what word to use.  I might use the word &quot;lazy&quot;.  Things aren't formatted very well (aligned spacing, etc.).  I changed a bunch of that not only in the template but related files too.  One of my main complaints is that in snesheader.s (?) you actually have your NMI handler and RESET handler code -- this should not be in that file.  That file should be solely for either the SNES ROM header (as in $FFC0 or whatever), or the file format header (e.g. SMC/SFC file).  That's what the filename implies.  You'll see in what I implemented for Espozo that I stuck it into Main.asm with the rest of the code.<br /><br />I'm not so sure I like the general layout of snes.h either.  While describing each of the bits in an MMIO register the way you do is understandable (for quick reference), I imagine most people doing development fall into two categories: a) not knowing what the bits do + already have something open (PDF, etc.) that documents them, or b) know what the bits do and don't need the quick reference.<br /><br />The names of the equates should also be the same as what's in the official SNES developers manual, IMO.  Note: I myself am quite of not using those equate names, so I can't pass too much judgement, but it's a good habit to get into early on.  You made a template/etc. for people to learn from, and I feel changing that to instil good habits from the start is worthwhile.<br /><br />I would also strongly suggest that the file not be named with an .h suffix, as it implies C header syntax.  I'm willing to bend on this, but I think Espozo also mentioned this.  Things that get <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.include</tt>d I tend to name either .asm or .inc (often opting for the former, because assembly code is assembly code, even if all it is is a huge bunch of FOO = $xxxx statements).  But I'm flexible.<br /><br />This is one of those projects where I wish I could just sit down with you in person for a couple days and clean everything up alongside you, and negotiate things in person.  It goes a lot faster than online, as I'm sure you know.<br /><br />All criticism aside: I'm REALLY thankful you made that lorom template.  It took me some hours to sift through, but I wouldn't have been able to write that from scratch, and it allowed me to learn a lot about ca65 in the process.  Though admittedly I had the ca65 and ld65 docs up for hours as well, especially ld65 -- &quot;Who cares if there isn't a zeropage segment defined!!!  It's direct page on 65816, jerk!&quot;  :-)  Oh that reminds me: I was sure in my version to inline comment the addresses in the MEMORY section to actually correlate with what's in the actual 65816 code.  I feel it's important to document there that, for example, if you declare a certain region in the MEMORY section that it should match what your code does using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda/tcd</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldx/txs</tt> (although for the latter (stack) I just gave up and left it within BSS.  Admittedly, I still don't understand why BSS is even needed per se: I fully understand this for C, but for pure assembly on a console this kind of thing seems weird.  But I think that's more of a ca65 &quot;design&quot; thing than the fault of... well... I'm not sure what.  *laugh*)<br /><br />Oh, and that reminds me: I wish there was some kind of programmatic way in ca65/ld65 to &quot;get the address of a MEMORY section&quot;, so that you could actually implement that in code somehow.  I can see exactly why this is difficult/troublesome, but it'd be nice to just be able to change the template file and then have your <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #xxxx/tcd</tt> statements correlate with what you changed.  You'll see in the code I changed/wrote that I was meticulous in documenting the importance of that correlation.  For my complaint about the stack (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldx/txs</tt>), it'd be weird because the stack starts at the end and works backwards; so an origin of $1e00 and a size of $100 would thus be <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldx #$1fff/txs</tt> but that's not really &quot;obvious&quot; to a newcomer... sorry, rambling a bit here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Feb 01, 2015 11:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">if you could download (in the other SNESdev thread, re: &quot;issues with 16-bit indexing&quot;) the MetaspriteTestKoitsu stuff, that might give you some insights into how I tend to lay things out.</div><br />If you're referring to <a href="http://forums.nesdev.com/viewtopic.php?p=140305#p140305" class="postlink">this post</a>, is there a reason you use .rar instead of the more widely supported .zip?<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">and after trying to implement &quot;true direct page&quot; I now understand why you did stuff like leave ZP from $10-FF, although IMO that should really be $00-FF. If there's a reason for $10-FF I'd love to know what it is!</div><br />I have added a comment to lorom256.cfg to address my reasoning behind this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; # I usually reserve $000000-$00000F for local variables<br />&nbsp; # allocated just below the .proc statement of a subroutine.<br />&nbsp; # The rest is open for global variables.</div><br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Things aren't formatted very well (aligned spacing, etc.).</div><br />Not sure what you mean by this. Are you referring to my habit of spacing inline comments from the code by 2 spaces instead of tabbing all the way out to column 41 or thereabouts?<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">One of my main complaints is that in snesheader.s (?) you actually have your NMI handler</div><br />The NMI handler is actually in main.s. What you're seeing here are handlers for the <em>unused</em> vectors. The S-CPU has no /ABORT signal, and the program doesn't use the /IRQ signal or BRK or COP instructions or 6502 emulation mode (except for the first couple instructions).<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cop_handler:<br />brk_handler:<br />abort_handler:<br />irq_handler:<br />ecop_handler:<br />eabort_handler:<br />enmi_handler:<br />eirq_handler:<br />&nbsp; rti</div><br />Putting these in the same file as the vectors also means that most of the vectors don't have to be made global (except for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">nmi_vector</tt> and perhaps <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">irq_vector</tt> if I end up using it).<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">You'll see in what I implemented for Espozo that I stuck [the init routine] into Main.asm with the rest of the code.</div><br />Which makes main.s even longer. I tried to separate it out because it's something the user doesn't need to touch quite as often.<br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">another thing that would make the code a lot more &quot;comprehendible&quot; would be if you actually separated these into separate files.</div><br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">While describing each of the bits in an MMIO register the way you do is understandable (for quick reference), I imagine most people doing development fall into two categories: a) not knowing what the bits do + already have something open (PDF, etc.) that documents them, or b) know what the bits do and don't need the quick reference.</div><br />I need the quick reference to save me from having to pull up Fullsnes all the time. You might notice I did the same with &quot;pin8gba.h&quot; back when I was homebrewing for GBA.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">The names of the equates should also be the same as what's in the official SNES developers manual</div><br />I'm not officially supposed to have access to that manual, and I wanted to avoid the appearance of misappropriation.* So for most MMIO ports, I chose names that made sense to me in the context of the quick reference. You might notice that I left the HDMA-related names commented out because I haven't played with HDMA yet.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I wish there was some kind of programmatic way in ca65/ld65 to &quot;get the address of a MEMORY section&quot;</div><br />You can get the address of a segment. If you put <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">define=yes</tt>, <a href="http://cc65.github.io/doc/ld65.html#ss5.4" class="postlink">ld65 will export symbols</a> for the segment's size, its run address (where the data is used), and its load address (where its data was stored in ROM, which doesn't exist in the case of BSS-type segments). In blarggapu.s, based on an example by (guess whom), I use this to send the SPC700's executable image to the SPC700 IPL.<br /><br />I've attached a WIP version of the LoROM template with some but not all recommended changes made.<br /><br /><br /><span style="font-size: 85%; line-height: normal">* The <a href="https://en.wikipedia.org/wiki/Uniform_Trade_Secrets_Act" class="postlink">Uniform Trade Secrets Act</a>, in effect in most U.S. states, defines &quot;misappropriation&quot; to include &quot;disclosure <em>or use</em> of a trade secret of another without express or implied consent by a person who [...] at the time of disclosure or use, knew or had reason to know that his knowledge of the trade secret was [...] acquired under circumstances giving rise to a duty to maintain its secrecy or limit its use&quot;.</span>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=2611">lorom-template-0.05-pre.zip</a> [122.75 KiB]
			</span><br />
			<span class="gensmall">Downloaded 6 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Sun Feb 01, 2015 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There does appear to be <a href="https://en.wikipedia.org/wiki/Economic_Espionage_Act_of_1996" class="postlink">a federal trade secrets law</a>.<br /><br />On the other hand [and I am not a lawyer] the <em>register names</em> don't seem like they're a &quot;secret whose holding conveys economic advantage&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>whicker</b> [ Sun Feb 01, 2015 2:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />if a trade secret is like a formula (percentage of ingredients proportional to each other), or a process (add this, then that, remove that, etc), manufacturing technique (some sort of sequence again), computer algorithm (sequence of instructions that produces a desired result), or survey method or &quot;marketing strategy&quot; or something patentable but not yet patented, I don't see how 6-character labels or whatever of internal registers matter in such a debate.<br /><br />Honestly, it's past to the point where we need a retrogame homebrew association kind of thing to try and define legal rights, to stop this guessing game. Nobody seems to be getting rich off this hobby, and thus it's too expensive for individual representation. But yet it's an activity that people seem to want to engage in, for whatever reason...<br /><br />Just a thought...<br /><br /><br /><br />Also, based on what tepples has created, it actually does make a lot of sense to me to handle the interrupt vector table in the header. Personally I'd take it even further, in his naming logic, to have an init.s type file that includes the header, that gets the system going in a known (initialized) state then jumps to main. This is subject to debate, of course.<br /><br />I am leery of splitting even more stuff out, other than the general memory to memory copy routines, because if we're talking about a simple example there is a mental burden in jumping between numerous source files trying to match up label references.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Feb 01, 2015 11:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I wish there was some kind of programmatic way in ca65/ld65 to &quot;get the address of a MEMORY section&quot;</div><br />You can get the address of a segment. If you put <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">define=yes</tt>, <a href="http://cc65.github.io/doc/ld65.html#ss5.4" class="postlink">ld65 will export symbols</a> for the segment's size, its run address (where the data is used), and its load address (where its data was stored in ROM, which doesn't exist in the case of BSS-type segments).</div><br />&quot;define=yes&quot; is also supported for MEMORY specifications.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Feb 02, 2015 12:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I would also strongly suggest that the file not be named with an .h suffix, as it implies C header syntax.  I'm willing to bend on this, but I think Espozo also mentioned this.  Things that get <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.include</tt>d I tend to name either .asm or .inc (often opting for the former, because assembly code is assembly code, even if all it is is a huge bunch of FOO = $xxxx statements).  But I'm flexible.</div><br />&quot;.inc&quot; might be a good choice here, given that cc65 library source code also uses it for its assembly include files (<!-- m --><a class="postlink" href="https://github.com/cc65/cc65/tree/master/asminc">https://github.com/cc65/cc65/tree/master/asminc</a><!-- m -->). One more advantage to not using &quot;.h&quot; is that text editors will have an easier job telling apart C and assembly source.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Feb 02, 2015 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't text editors already have trouble telling 6502-family assembly source from 8086-family assembly source?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 05, 2015 4:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I got around to looking at koitsu's init code, and I'll summarize it in words before implementing it in my template.<br /><br />A tiny stub in bank $00 needs to set interrupt priority to 1, turn off decimal mode, leave 6502 emulation mode, and long jump to the rest of init code in another bank. This should set 16-bit mode, set the stack pointer, set the data bank, set the direct page base address, and then load a predictable state into writable MMIO ports of the S-PPU and S-CPU. Here are the values found in koitsu's init code, with nonzero values explained to the best of my ability:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">2100=80&nbsp; // Forced blanking<br />2101-2103=00<br />// Skip 2104: OAM write<br />2105-210C=00<br />210D-2115=00 00<br />2115=80&nbsp; // Increment VRAM after high byte write<br />2116-2117=00<br />// Skip 2118: VRAM write<br />211A=00<br />211B=00 01&nbsp; // Top left 1 in identity matrix for mode 7<br />211C-211D=00 00<br />211E=00 01&nbsp; // Bottom right 1 in identity matrix for mode 7<br />211F-2120=00 00<br />2121=00<br />// Skip 2122: CGRAM write<br />2123-212F=00<br />4200=00<br />4201=FF<br />4202-420D=00<br /></div><br /><br />Unlike on the NES, you don't need to wait for 2 vblanks before clearing video memory:<br /><ul><li>VRAM: Fill 65536 bytes with 00 </li><li>CGRAM: Fill with 00 </li><li>OAM: Fill with F0 F0 00 00 </li><li>High OAM: Fill with 00 </li></ul><br />Except for things that you want to survive a reset, it's recommended to clear WRAM to $00. The fast way is to write the address to $2181, then do two 65536-byte fixed-source DMAs from a byte in ROM to $2180. There have been holy wars about this subject in the past, with some people claiming that clearing helps hide failure to properly initialize memory at the start of each level.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Feb 05, 2015 6:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And for those who aren't sure... :P<br /><br />Also, the reason I set $2180 to $80 instead of $8f is because I intentionally set the screen &quot;as dark as possible&quot; initially, as most of my stuff tended to fade screens in once init + VRAM setup + etc. was done.  You can set it to $8f without any repercussions.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<a href="./download/file.php?id=2638&amp;mode=view"><img src="./download/file.php?id=2638&amp;t=1" alt="magic.png" /></a><br />
			<span class="gensmall">magic.png [ 89.22 KiB | Viewed 282 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 05, 2015 11:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for all the help so far making this template better.<br /><br />Let me paraphrase that scan: &quot;These are useful defaults, but you don't <em>have</em> to use these exact values. If you know what you're doing, you can use other values. But make sure you write something to all writable ports before trying to do anything that depends on their values.&quot; Or even shorter: &quot;Write something meaningful to each port.&quot; This encourages me to briefly describe what the result of the settings shall be.<br /><br />Are the names in Fullsnes the same as the official names? If so, I can probably add them as aliases in a section titled &quot;Fullsnes names&quot;.<br /><br />I've changed the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.h</tt> extensions to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.inc</tt>. Let me explain why I chose <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.inc</tt> instead of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.asm</tt>: When I used to post to forum.gbadev.org, certain people got in the bad habit of having <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">main.c</tt> do <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">#include &quot;this.c&quot;</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">#include &quot;that.c&quot;</tt>, etc. The best practice was to compile each <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.c</tt> file separately, and include only interface stuff (constants, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">struct</tt> declarations, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">extern</tt> global variable declarations, function prototypes, and possibly <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">static inline</tt> functions) in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.h</tt> files. With this C best practice firmly ingrained in my mind, I ended up developing an analogous habit of distinguishing files that get assembled into independent object files (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.s</tt>) from those that are only included into other files (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.inc</tt>, formerly <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.h</tt>).<br /><br />I've also started to break what is now <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">snes.inc</tt> into functional groups and indented the forward branches in the player code.<br /><br />Otherwise, my next tasks before releasing 0.05 are as follows:<br /><ul><li>Break <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">snes.inc</tt> by functional group </li><li>Add Fullsnes names to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">snes.inc</tt> </li><li>Briefly describe effects of default settings applied by init code </li><li>Backport these changes to NES versions </li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Feb 06, 2015 11:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, the preceding paragraph is badly translated, so it's difficult (without seeing the Japanese docs) to know what exactly they're trying to say.  It all sounds flexible up until the very end where it says &quot;...and initial settings must be performed&quot;.  The chapter is called &quot;Register Clear (Initial Settings)&quot;, so the way I've always read the paragraph is: &quot;no matter what you do later in the code, you need to make sure these exact values are written to their associated registers on reset (power-on)&quot;.<br /><br />And as I've said before, since the routine only gets called <strong>one time</strong> (reset), &quot;optimising&quot; the routine (either for speed or length/size (loops), or flat out skipping some register initialisation because &quot;you do it later&quot;) is absolutely 100% pointless.  I strongly believe it's best to just have a straight set of lda/sta/stz code that sets these values, skipping ones like $2104, $2118/9, and $2122 (since you'll be doing those later), and use that followed by your own code.  Yet over the years I have (honest!) encountered at least 6 different variations of this init routine, where people are overcomplicating it for no good reason.<br /><br />Translation: stuff like this is absolutely ridiculous:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDX #$2101<br />_Loop00:&nbsp; &nbsp;&nbsp; &nbsp;;regs $2101-$210C<br />&nbsp; STZ $00,X&nbsp; &nbsp;&nbsp; &nbsp;;set Sprite,Character,Tile sizes to lowest, and set addresses to $0000<br />&nbsp; INX<br />&nbsp; CPX #$210D<br />&nbsp; BNE _Loop00<br /><br />_Loop01:&nbsp; &nbsp;&nbsp; &nbsp;;regs $210D-$2114<br />&nbsp; STZ $00,X&nbsp; &nbsp;&nbsp; &nbsp;;Set all BG scroll values to $0000<br />&nbsp; STZ $00,X<br />&nbsp; INX<br />&nbsp; CPX #$2115<br />&nbsp; BNE _Loop01<br /></div><br /><br />...while this does the exact same thing.  Again, remember, ROUTINE IS ONLY USED ONCE.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; stz $2101<br />&nbsp; stz $2102<br />&nbsp; stz $2103<br />&nbsp; stz $2104<br />&nbsp; stz $2105<br />&nbsp; stz $2106<br />&nbsp; stz $2107<br />&nbsp; stz $2108<br />&nbsp; stz $2109<br />&nbsp; stz $210a<br />&nbsp; stz $210b<br />&nbsp; stz $210c<br />&nbsp; stz $210d<br />&nbsp; stz $210d<br />&nbsp; stz $210e<br />&nbsp; stz $210e<br />&nbsp; stz $210f<br />&nbsp; stz $210f<br />&nbsp; stz $2110<br />&nbsp; stz $2110<br />&nbsp; stz $2111<br />&nbsp; stz $2111<br />&nbsp; stz $2112<br />&nbsp; stz $2112<br />&nbsp; stz $2113&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; stz $2113&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; stz $2114<br />&nbsp; stz $2114<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 06, 2015 11:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't worry; I'm not doing loops or any $#!+ like that. I'm doing the unrolled set of sta/stz as you recommend, just with the 16-bit writes (where consecutive registers both get a single $00) before the ones that need to be done 8-bit, and with direct page set to $4200 and $2100 like Square Enix games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Feb 06, 2015 12:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: A simple sprite demo for teaching</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds fine to me.  Just make sure that D gets set back to whatever it &quot;should&quot; be (ideally $0000) at the end or the like.  Although this is where I bring up the thing I mentioned in the other thread, re: how I wish ca65 had better comprehension of direct page + a way to get the start address defined in the temple MEMORY area into code, so that you could just say something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #.LOWORD&#40;MEMORY&#40;DP&#41;&#41;/tcd</tt> and be able to relocate things simply by changing the template.<br /><br />Otherwise, well, the simple solution is -- just document it with a comment like I did in the code for Espozo.  :-)  &quot;Make sure this correlates with what's in lorom256k.cfg&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri Feb 06, 2015 4:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The devil needs an advocate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This seems to be a bit of a hot-button issue for you. I wonder why.<br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Well, the preceding paragraph is badly translated, so it's difficult (without seeing the Japanese docs) to know what exactly they're trying to say. It all sounds flexible up until the very end where it says &quot;...and initial settings must be performed&quot;. The chapter is called &quot;Register Clear (Initial Settings)&quot;, so the way I've always read the paragraph is: &quot;no matter what you do later in the code, you need to make sure these exact values are written to their associated registers on reset (power-on)&quot;.</div>And poor translation from Japanese to English can be horrendous, as I'm sure we all know.<br />Still, this seems a bit cargo-cult-programming-ish to me. You even named it &quot;magic&quot;. (Yes, seems, not is; I looked at the docs and elsewhere it appears to underscore the need to clear the registers.)<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"> The official docs <strong>don't include any code</strong> -- they just tell you what each register needs to be set to value-wise on reset. So no, it's simply people being ridiculous and for some reason thinking that this one-time-called routine deserves loops and other nonsense (like &quot;don't bother initialising some registers because we set them in the near future anyway&quot; -- WHO CARES, <strong>do the init exactly like Nintendo says,</strong> do it one time, and stop worrying about the rest!)</div><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">meaning it's the closest to the official init routine Nintendo mandates, </div><br />If all they have is register values, they have not mandated any kind of routine; they don't even mandate an order (in the page you posted).<br /><s>If they&#39;re going to set them soon, then it is a waste to set them up first and there is no good reason to leave it in, save &quot;limited programmer time&quot;.</s>OK, skimmed, various <em>other</em> places appear to say &quot;clear the registers first&quot;.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I WISH PEOPLE WOULD STOP SCREWING AROUND WITH THE INIT ROUTINES: THERE IS NOTHING TO FIX/OPTIMISE IN THEM. THEY ARE RUN *ONCE* DURING RESET/POWER-ON. JUST USE THE VALUES NINTENDO GIVES YOU IN THE OFFICIAL DOCS AND BE DONE WITH IT. YOU DO NOT NEED LOOPS ETC. (THOSE ARE JUST SLOWER THAN UNROLLED) AND ALL IT DOES IS OBFUSCATE THE CODE. PLEASE STOP WRITING INIT ROUTINES OR &quot;OPTIMISING THEM&quot;.<br /></div><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Again, remember, ROUTINE IS ONLY USED ONCE.</div>So, unlike a routine that gets run incredibly often multiple times, it has the worst possible speed payoff for unrolling. (Well, there is code that NEVER gets run, but...) Normally, unrolled loops and heavy-duty for-time optimization are for either a. time-critical code (like in VBLANK on NES) and b. oft-called code. Initialization is neither, and tens of loop iterations are going to lose negligible time. And, if we really are going to insist on having the <em>best possible init routine</em>, <div class="quotetitle">koitsu wrote:</div><div class="quotecontent">And yes, there is some redundant code in there</div>then redundant loads are not going to be the way.<br /><br />So, reasons people would write their own init routines (with loops):<ul><li>Not using someone else's code or concept, for either IP reasons, (that is, so they don't have to find you/license your code/credit you/pay you/get sued by you, depending on how paranoid they are)</li><li>-or so that they have no black box, cargo-cult programming.</li><li>-or so they have a personalized understanding of their program; doing generally leads to more learning than reading.</li><li>Practice writing code in this new environment- including </li><li>...what registers are where. (Certainly not something happening with un-named register addresses...but see below.)</li><li>If the routine will be included in all projects, then it would probably be better not to screw with omitting values, but...that means it's also now getting included in more SPACEs.</li><li>Loops are easier to program.</li><li>(style variance) Loops do not &quot;obfuscate code&quot;; they're a lot easier for me to read than that uncommented block of sta/stz you've got there.</li></ul><br />Looking at SNESdevwiki, posting the SnesInit.asm snippet with the comments in naming the registers would have looked better than this block of raw stz's, too.<br /><br />ed: I am curious what led you to believe it's badly translated.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>