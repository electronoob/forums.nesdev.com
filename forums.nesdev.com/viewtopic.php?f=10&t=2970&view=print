<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How do you guys debug your code</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How do you guys debug your code</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=2970">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=2970</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>albailey</b> [ Mon Feb 19, 2007 8:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How do you guys debug your code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a question about 6502 code written to run on the NES (and its emulators).
<br />
<br />I'm wondering how you guys debug your 6502 code. What tools and/or techniques you use.
<br />
<br />Personally, when I write a snippet of 6502 and I am not sure if I've done it right, I double check it in 6502 simulator, then add it into my code stream.
<br />
<br />But over the weekend I made a bone-headed mistake.   I tested my code in 6502 simulator as best I could but when I ported it to CA65 I made my mistake.
<br />I was using a mask as part of my joypad input routine and had declared the mask:
<br />JOYPAD1_SELECT_MASK = $04
<br />
<br />And then I made use of it incorrectly like this:
<br />AND  JOYPAD1_SELECT_MASK
<br />
<br />instead of like this
<br />AND  #JOYPAD1_SELECT_MASK
<br />
<br />My point is,  it was a dumb mistake, but what was more frustrating is that since I am a newbie I'm still unfamiliar  with effective techniques to track down these errors.
<br />
<br />I tracked it down by writing information to some memory addresses and viewing them using the memory viewer of FCEU.
<br />I had tried stepping through the debugger of FCEU but had no luck because I lack patience when I run across code snippets like this:
<br />: LDA $2002
<br />  BPL :-
<br />
<br />and the debugger keeps looping over and over waiting for VBLANK.  I try entering the value for the next instruction after this loop but I assume I am doing it wrong in FCEU because it never goes to that breakpoint for me.
<br />
<br />So let my hear how your guys debug.
<br />Thanks,
<br />Al

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Mon Feb 19, 2007 9:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When developing code, I used to test it directly on the hardware as long as no hard-to-track-down bugs appeared. When they did, I always loaded the binary in FCE Ultra, having a list file output by the assembler in notepad next to the emulator's window. I never had a problem with the LDA $2002 snippet you mention, since you could easily make the emulator run until it hit the location after the polling loop.
<br />
<br />At the time, I thought I couldn't get my EPROM emulator working in windows (turns out it was just a collision with my scanner's driver which also used the parallel port) so I didn't revert to using an emulator to debug the code unless I really had to, since I had to copy the stuff by disk from my DOS-only laptop to my desktop PC. Would I start coding something now, things oughta be much simpler.
<br />
<br />If the assembler won't output a list file you're kind of screwed though, so be sure to use one which does.
<br />
<br />For checking that the pattern tables had been written as expected, I always used Nesticle. Partly because Nintendulator (which can also display PPU contents graphically) was far too slow for my PC, especially when displaying PPU contents. But mostly because Nesticle worked in DOS so I didn't have to do the copy to my desktop.
<br />
<br />Then of course, you have bugs which are graphical glitches resulting from not being properly synced with the PPU. These you need to track down on the actual hardware, so a good way is replacing your $2005/$2006 write with a code snippet that takes the same amount of cycles, buts sets/unsets the monochrome bit or emphasize bits in $2001 instead. That way, you can easily check if the write happens where you expect it to, and notice if your code is unsynced altogether.
<br />
<br />I'd really wish for an emulator that has (besides a good graphical display of PPU contents) a debugger which can take a list file as input, and let you debug your code using symbols in the same way the MSVC debugger does. Don't expect any emulator to be up to the task though, as that feature's potential user base would be rather small. :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Feb 19, 2007 9:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I often debug my code with FCEUltra, and sometimes I add manual beakpoints. I sometimes use "inc $100" as an easy breakpoint, because you'll never want to do anything with the location $100 (unless you run out of system RAM), it's in the stack, but the stack will never use the whole page and grow up to $100 (assuming you initialised it to $1ff at startup).
<br />For the $2002 trick you mentionned, either double-click on the next instruction, forcing the CPU to jump there (knowing the emulation won't be accurate for timing any longer), or use a breakpoint on the next instruction's adress (wich is accurate, but happens to be annoying, since you'll usually have to remove the previous brackpoint, and set it back afterwards).
<br />
<br />If you need to debug precise scanline stuff, I recommand getting it working in Nintendulator, wich is very accurate when it comes to tricky PPU synch. However, it is very slow and sometimes frezes, and that's why I use Nintendulator only when I have to.
<br />
<br />Of course I won't claiming anything "works" without trying it on hardware when it comes to PPU or APU timing quicks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Mon Feb 19, 2007 10:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bananmos wrote:</div><div class="quotecontent">I'd really wish for an emulator that has (besides a good graphical display of PPU contents) a debugger which can take a list file as input, and let you debug your code using symbols in the same way the MSVC debugger does.</div>
<br />
<br />FCEUXDSP has support for symbolic debugging. it uses this format:
<br />
<br />#<em>address</em>#<em>labelname</em>#<em>comment</em>
<br />
<br />the readme gives a more detailed explanation on how to set it up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>albailey</b> [ Mon Feb 19, 2007 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">For the $2002 trick you mentionned, either double-click on the next instruction, forcing the CPU to jump there (knowing the emulation won't be accurate for timing any longer), or use a breakpoint on the next instruction's adress (wich is accurate, but happens to be annoying, since you'll usually have to remove the previous brackpoint, and set it back afterwards).<br /></div>
<br />
<br />I didnt know about the double click "trick".  Thanks.  That'll be very useful next time for me.
<br />
<br />I'm going to read the docs.  Whenever I try setting a breakpoint, I never seem to hit it. (meaning I'm not doing it right)
<br />
<br />
<br />Al

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Thu Feb 22, 2007 2:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">FCEUXDSP has support for symbolic debugging. it uses this format: <br /><br />#address#labelname#comment <br /><br />the readme gives a more detailed explanation on how to set it up.<br /></div>
<br />
<br />Just checked out FCEUXD SP. Really neat indeed! I suppose this will be my favourite emulator from now on. Its reverse-engineering features are just lovely. :)
<br />
<br />Still though, even if I were to make a program for converting all labels and comments in my list file to this format, the code in the debugger wouldn't look very much alike my source anyway. 
<br />
<br />What I'd really like is a way to single-step the source code in the list file. (generated by X816 in this case) I guess that's asking for too much though, especially considering each and very assembler has it's own peculiar syntax for the list file it generates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Feb 23, 2007 10:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The only solution to that is to create your own developement environement, including assember, linker and emulator all in a common IDE. Of course, the coded for various assembly and emulating parts could be stolen elsewhere with their respective author's agreement, so that it is possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Fri Feb 23, 2007 3:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not necessarily if there was a clear consensus on which 6502 assembler is preferable, but there ain't. I guess ca65 is the most used, but I prefer x816 myself, just because I'm so in love with its anonymous labels. :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Feb 23, 2007 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bananmos wrote:</div><div class="quotecontent">I prefer x816 myself, just because I'm so in love with its anonymous labels. :)</div>
<br />
<br />They seemed awkward... like I never understood exactly how they worked.  Then again maybe I'm just too used to ca65's anonymous labels.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Fri Feb 23, 2007 5:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What I love so much about them (besides not having to spend half your coding time thinking up pointless label names) is that after just a few weeks of using them, your eye will be able to "see the bigger picture" in your algorithms just as easily as if you were using for- and while-loops, if not better.
<br />
<br />An example:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">--<br />-<br />&nbsp; &nbsp; lda DecrunchingState<br />&nbsp; &nbsp; beq -<br />&nbsp; &nbsp; bpl -<br /><br />&nbsp; &nbsp; lda DecrunchingBank<br />&nbsp; &nbsp; jsr MMC1_WriteRegister3<br /><br />&nbsp; &nbsp; lda #&lt;DecrunchedTune<br />&nbsp; &nbsp; sta TempWord2<br />&nbsp; &nbsp; lda #&gt;DecrunchedTune<br />&nbsp; &nbsp; sta TempWord2+1<br />&nbsp; &nbsp; ldx CrunchedTune<br />&nbsp; &nbsp; ldy CrunchedTune+1<br />&nbsp; &nbsp; jsr DecodeLZ77<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$01<br />&nbsp; &nbsp; sta DecrunchingState<br /><br />-<br />&nbsp; &nbsp; lda DecrunchingState<br />&nbsp; &nbsp; bne -<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jmp --<br /></div><br /><br />A second one:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ldx #8<br />-<br />&nbsp; &nbsp; lda _666addHi<br />&nbsp; &nbsp; beq +<br />+<br /><br />&nbsp; &nbsp; lda _666&nbsp; &nbsp; &nbsp; &nbsp; ;3<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc _666add<br />&nbsp; &nbsp; bcs +&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3/2<br />+&nbsp; &nbsp;sta _666&nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; &nbsp; &nbsp; 19.xxx/18.xxx<br /><br />&nbsp; &nbsp; dex<br />&nbsp; &nbsp; bne -<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 23, 2007 5:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bananmos wrote:</div><div class="quotecontent">What I love so much about them (besides not having to spend half your coding time thinking up pointless label names)</div>
<br />You could use <a href="http://www.cc65.org/doc/ca65-5.html#ss5.4" class="postlink">label names that start with '@'</a>. Labels named this way are local, that is, they are valid only between label names that don't start with '@'. This means you can use '@loop' in more than one subroutine. CA65 has also a slightly different flavor of <a href="http://www.cc65.org/doc/ca65-5.html#ss5.5" class="postlink">anonymous labels</a>, called ':', which can be referenced backward with ':-' or forward with ':+' .
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">-<br />&nbsp; &nbsp; lda DecrunchingState<br />&nbsp; &nbsp; bne -</div><br />Is this supposed to loop forever? Or does an interrupt handler change DecrunchingState?<br /><br />Anyway, I translated the first code to CA65, using an @-label:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">@mainLoop:<br />:<br />&nbsp; &nbsp; lda DecrunchingState<br />&nbsp; &nbsp; beq :-<br />&nbsp; &nbsp; bpl :-<br /><br />&nbsp; &nbsp; lda DecrunchingBank<br />&nbsp; &nbsp; jsr MMC1_WriteRegister3<br /><br />&nbsp; &nbsp; lda #&lt;DecrunchedTune<br />&nbsp; &nbsp; sta TempWord2<br />&nbsp; &nbsp; lda #&gt;DecrunchedTune<br />&nbsp; &nbsp; sta TempWord2+1<br />&nbsp; &nbsp; ldx CrunchedTune<br />&nbsp; &nbsp; ldy CrunchedTune+1<br />&nbsp; &nbsp; jsr DecodeLZ77<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$01<br />&nbsp; &nbsp; sta DecrunchingState<br /><br />:<br />&nbsp; &nbsp; lda DecrunchingState<br />&nbsp; &nbsp; bne :-<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jmp @mainLoop<br /></div><br /><br />And the second one. The biggest difference is that a CA65 program can't easily use backward references that overlap forward references. (But what exactly does _666 do?)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ldx #8<br />@loop:<br />&nbsp; &nbsp; lda _666addHi<br />&nbsp; &nbsp; beq :+<br />:<br /><br />&nbsp; &nbsp; lda _666&nbsp; &nbsp; &nbsp; &nbsp; ;3<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc _666add<br />&nbsp; &nbsp; bcs :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3/2<br />:<br />&nbsp; &nbsp; sta _666&nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; &nbsp; &nbsp; 19.xxx/18.xxx<br /><br />&nbsp; &nbsp; dex<br />&nbsp; &nbsp; bne @loop<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Fri Feb 23, 2007 6:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for displaying the difference tepples. That shows pretty well why I prefer the x816-style. I find those colons to be somewhat ugly, and the inability to overlap the reference kills most of the benefits of unnamed labels IMO.
<br />
<br />But to each his own... some might say that too many unnamed labels make the code less readable as well, and I can't say they don't have a point. But I find code equally hard to read when there's too much "label clutter".
<br />
<br />Though I'm not saying I could never become a ca65 convert if I had good enough reasons. (an emulator which allowed source-code debugging would probably qualify as a good one :)
<br />
<br />Yeah, an interrupt handler changes DecrunchingState in the first example. Both sections are from Years Behind btw. The code that handles music switching in the NMI routine sets DecrunchingState to #$80 once all the variables for the DecodeLZ77 routine have been initialized. This will put the main loop into the decrunching state. Once the tune is decrunched, the main loop sets DecrunchingState to #$01 to signal that decrunching is complete. The NMI routine will then call NED_SetupNED once and then reset DecrunchingState to #$00. 
<br />
<br />The mainloop gets a few scanlines of cycles at the end of screen rendering, but even more of them in the volume bar window where the replay routine would normally be called. The NMI routines grants it these extra scanlines by setting off a DPCM IRQ and returning prematurely from the NMI. The IRQ handler will then jump back into the NMI routine and the code continues where it left off. If anyone ever wondered why YB buzzes when switching tunes, this is the reason.
<br />
<br />In the second example _666 is a "cycle accumulator" that keeps track of how to adjust the cycles to keep the scanline code in phase with the PPU. Since we have a fractional amount of cycles on both NTSC and PAL, we need to emulate (harhar) a fraction of a cycle somehow, and the only way to do that it to make the scanline code take an extra cycle at regular intervals, so that the average number of cycles/scanline becomes a non-integer value. The code would normally look like this: (the clc can be skipped if you're running low on cycles)
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda _666<br />&nbsp; &nbsp; clc <br />&nbsp; &nbsp; adc #113&nbsp; &nbsp;;use #85 for NTSC<br />&nbsp; &nbsp; bcs +<br />+&nbsp; &nbsp;sta _666<br /></div>
<br />
<br />This will make your code take an extra cycle every time the adc gives a carry. The _666 variable was named so by Loopy, who showed me this nifty trick in the first place.
<br />
<br />But since there's DPCM in years behind, the DPCM DMA will steal some extra cycles every now and then, so you must adjust the #113 constant to other values which depend on the playback frequncy. And on the higher frequencies, it takes more than a cycle per scanline, and the _666 variable won't be enough any longer. So _666addHi works a a flag for this case. Both are changed accordingly in the replay routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Feb 23, 2007 7:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />EDIT -- nevermind  I just realized you answered my Q already in one of your examples  =P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Feb 24, 2007 1:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wla-DX also supports '-' and '+' labels, in theory up to 8 + or - aligned, but in practice I never use more than 3 to keep the code readable.
<br />What is great with Wla-DX is that is seems the only assembler that has serious provisions for bankswitched code and RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Sat Feb 24, 2007 3:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But what's really bad about WLA-DX (at least last time I tried it, which was a couple of years ago) is:
<br />
<br />1) Its buggy 65816 support
<br />2) Its buggy and incomplete list file support, which make the abovementioned bugs extremely hard to track down
<br />3) Its inabilities to automatically detect zero-page or absolute adressing for an instruction, due to the separation of the assembler and the linker stage
<br />
<br />I really liked WLA-DX's features when I first tried it, but eventually realized it was lacking many elementary features. Unless these issues have been fixed, my recommendation is to avoid it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>