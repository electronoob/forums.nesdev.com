<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=8089" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-09-09T16:03:40-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=8089</id>
<entry>
<author><name><![CDATA[Asteroid]]></name></author>
<updated>2011-09-09T16:03:40-07:00</updated>
<published>2011-09-09T16:03:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83679#p83679</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83679#p83679"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83679#p83679"><![CDATA[
argggh....can't believe I missed something so simple.  <br /><br />thanks kasumi<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4991">Asteroid</a> — Fri Sep 09, 2011 4:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-09-09T15:46:05-07:00</updated>
<published>2011-09-09T15:46:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83678#p83678</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83678#p83678"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83678#p83678"><![CDATA[
It's because that code isn't run. An NES program starts from the RESET label specified here:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">org $FFFA     ;first of the three vectors starts here<br />  .dw NMI        ;when an NMI happens &#40;once per frame if enabled&#41; the<br />                   ;processor will jump to the label NMI:<br />  .dw RESET      ;when the processor first turns on or is reset, it will jump<br />                   ;to the label RESET:<br />  .dw 0          ;external interrupt IRQ is not used in this tutorial <br /></div><br /><br />You'll notice the initial position of the ball code is above your reset label:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />  LDA #$80;Above RESET. Never run.<br />  STA ballx;Above RESET. Never run.<br />  STA bally ;Above RESET. Never run.<br />  LDA #$01;Above RESET. Never run.<br />  STA motion;Above RESET. Never run.<br />  STA motiony;Above RESET. Never run.<br /> <br /> <br />RESET:<br />  SEI          ; disable IRQs<br />  CLD          ; disable decimal mode<br />  LDX #$40 <br /></div><br /><br />So those instructions are never run.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Fri Sep 09, 2011 3:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Asteroid]]></name></author>
<updated>2011-09-09T15:42:52-07:00</updated>
<published>2011-09-09T15:42:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83677#p83677</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83677#p83677"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83677#p83677"><![CDATA[
So I spent some time reworking my CheckPaddleCollision subroutine, and now everything works perfectly <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />However, another issue that I had from the beginning that I never bothered to correct is the following:  As you can see from my code at the top in the section titled "STORE THE INITIAL POSITION OF THE BALL" I initialize my ball to (x,y) of ($80,$80).  But it doesn't matter what values I place there, every single time I load my program, the ball always begins at the lower right hand corner of the screen. <br /><br />I've tried all kinds of values ($0C, $60), ($12, #33) etc and nothing.  The ball always starts at the lower right corner and I'm puzzled as to why that's happening.  Any ideas?<br /><br />thanks<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4991">Asteroid</a> — Fri Sep 09, 2011 3:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Asteroid]]></name></author>
<updated>2011-09-05T19:20:41-07:00</updated>
<published>2011-09-05T19:20:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83541#p83541</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83541#p83541"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83541#p83541"><![CDATA[
good good stuff tokumaru.  I agree, I've got a few things to work out, and I'd rather start using good nesasm programming practices from the beginning.  After re-reading your post and 3gengames' several times, I see a few places where I can make some improvements that should hopefully solve the problem.  <br /><br />and no worries on not reading my code.  That's why I posted that picture, because I know assembler code can be the worst kind of spaghetti to unravel.<br /><br />thanks toku and 3geng <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />***EDIT***<br />As soon as I hit submit, I saw that there was a new post by Trepples.  Yeah, I'm familiar with analytical geometry.  It's funny because I had totally overlooked mathematical algorithms for collision and other future gameplay issues.  It's great you pointed that out, because now I'll be able to infuse my programs with other math ideas/algo's to optimize other things in the future.<br /><br />thanks!!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4991">Asteroid</a> — Mon Sep 05, 2011 7:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-09-05T19:21:20-07:00</updated>
<published>2011-09-05T19:17:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83540#p83540</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83540#p83540"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83540#p83540"><![CDATA[
If I were making a ball-and-paddle game, I'd use the same line-circle test that I used to check for collisions between an explosion and a balloon in Thwaite. Are you familiar with analytic geometry?<br /><br />First define the radius (half diameter) of the ball and the radius (half width) of the paddle. It doesn't matter whether they're constants or as variables at this point; just know what their sum is. The sum of the radii Σ<em>r</em> is the shortest distance from the center of the paddle to the center of the ball that will register as a collision.<br /><br />Then find the displacement from the top of the paddle to the ball: (<em>x_disp</em>, <em>y_disp</em>) = (<em>x_ball</em> - <em>x_paddle</em>, <em>y_ball</em> - <em>y_paddle</em>). This in effect gives the position of the ball in a coordinate space local to the paddle, so we can in effect consider the paddle-ball system to be a mobile ball currently at (<em>x_disp</em>, <em>y_disp</em>) with a stationary paddle as a line from (0, 0) to (0, <em>h_paddle</em>).<br /><br />At this point, you can do trivial rejection tests. "Trivial rejection" means easy tests to determine that a collision is impossible. The bounding boxes of the ball and paddle are at least as large as the ball and paddle themselves, and they're easy to test. One might express tokumaru's "4 conditions that make a collision impossible" as follows: If <em>x_disp</em> &lt; -Σ<em>r</em> or <em>x_disp</em> &gt; Σ<em>r</em> or <em>y_disp</em> &lt; -Σ<em>r</em> or <em>x_disp</em> &gt; <em>h_paddle</em> + Σ<em>r</em>, the bounding boxes of the ball and the paddle have not collided.<br /><br />Now collapse the paddle from a line to just a point: If <em>y_disp</em> is greater than <em>h_paddle</em>, subtract <em>h_paddle</em> from <em>y_disp</em>. Otherwise, if <em>y_disp</em> is between 0 and the bottom of the paddle <em>h_paddle</em>, set <em>y_disp</em> to 0.<br /><br />The problem now becomes equivalent to one of whether a circle at (<em>x_disp</em>, <em>y_disp</em>) with radius Σ<em>r</em> overlaps the origin. There are shortcuts to calculate that, but I prefer to look up <em>x_disp</em>² and <em>y_disp</em>² in a lookup table in order to compare them to (Σ<em>r</em>)².<br /><br />This will catch all collisions, so long as the ball doesn't move more than 2Σ<em>r</em> (the width of one ball and one paddle) relative to the paddle in one frame. It's possible to catch collisions even with a faster ball, but that takes a lot more math if you want to get it perfect.<br /><br />I can make a diagram of all this if you want.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Sep 05, 2011 7:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-09-05T19:10:34-07:00</updated>
<published>2011-09-05T19:10:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83539#p83539</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83539#p83539"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83539#p83539"><![CDATA[
Like 3gengames said, it's bad practice to hardcode objects to specific sprites, and the problems you are facing are the reason why. You are doing all sorts of gymnastics to compensate for the width/height of the sprites, and the fact that more than one of them are used to make up a single object.<br /><br />The best way to program games is to not think in terms of sprites, but objects. You should have variables called paddleX and paddleY (or something like that) instead of relying on what the OAM data says. You seem to be doing that for the ball, I don't know why you didn't do it for the paddle.<br /><br />Anyway, the way you are checking for a collision is OK for a beginner, but even if you solve this particular bug there will be cases when you'll miss a hit, such as if the ball hits the paddle form the side. The most precise way to check for collisions is actually to look for conditions that make the collision impossible. There are 4 conditions that make a collision impossible:<br /><br />- Object A is to the left of object B;<br />- Object A is to the right of object B;<br />- Object A is above object B;<br />- Object A is below object B;<br /><br />If any of those is true, a collision is impossible. If all of those are false, a collision happened. In order to check for these, you have to calculate the edges of both objects. For example, assuming that ballx and bally represent the top left corner of the ball, you already know the top and the left edges of the ball. To calculate the bottom and the right edges, just do bally + ballheight and ballx + ballwidth. Do the same for the paddle and you are ready to check for collisions.<br /><br />So, if ballright &lt; paddleleft, that means that the ball is to far to the left of the paddle, meaning a collision is impossible. Similarly, if ballleft &gt; paddleright, the ball is too far to the right of the paddle. Just do the same with the Y coordinates and you'll know if there was a hit or not.<br /><br />With this method you can even move the ball more than 1 pixel per frame, which is a pretty bad limitation these simplistic collision detection methods have. If you move too fast (enough for the ball to appear before the paddle in one frame and after it in the next) you can still miss collisions though.<br /><br />Sorry if I just didn't look at your code and figured out what was wrong, but I hate looking at other people's code. I'd rather just explain the right way to do things, and even if you don't plan on using what I wrote right now, I'm sure it will be useful eventually.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Sep 05, 2011 7:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Asteroid]]></name></author>
<updated>2011-09-05T18:53:02-07:00</updated>
<published>2011-09-05T18:53:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83538#p83538</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83538#p83538"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83538#p83538"><![CDATA[
hmmm....I KINDA see what you're saying, but I also KINDA don't.  In my simple case, where paddle is 2 sprites and ball is 1, I don't really need to worry about paddle/ball sizes.  <br /><br />The way I'm thinking about is: if the ball is moving 1 pixel per frame, and I'm doing a check for the y-value $98, then why is it that sometimes it hits, but sometimes it doesn't.  That leads me to believe I'm not doing the checking for the X range correctly.  But I am.  I'm checking if the ball is too far to the left, or too far to the right of the paddle.    <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <br /><br />sorry if I sound a little frustrated, but this thing is driving me bonkers  <img src="http://forums.nesdev.com/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4991">Asteroid</a> — Mon Sep 05, 2011 6:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-09-05T18:44:08-07:00</updated>
<published>2011-09-05T18:44:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83537#p83537</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83537#p83537"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83537#p83537"><![CDATA[
You X-Coord is at a spot, but to add to that, you should have a variable for the ball size x and y, and paddle size x and y and use that to make it more adjustable. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />And yeah, 098 is the first spot where it can look liek it hits the paddle, which subtracting X size from that would make you find the real X to look for. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> And if you don't want to tear your hair out for this, just make the ball square. XD<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Mon Sep 05, 2011 6:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Asteroid]]></name></author>
<updated>2011-09-05T18:42:50-07:00</updated>
<published>2011-09-05T18:42:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83536#p83536</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83536#p83536"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83536#p83536"><![CDATA[
I took a screenshot of my pong program with a graphical display of what I'm doing to detect collisions.  Sometimes pictures are better than words <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  I know it's probably something very simple that I'm overlooking, but it's going on 3 days now and I can't seem to find the bug.<br /><br />btw, thanks for your help 3gengames, I really appreciate it <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><img src="http://i53.tinypic.com/2hhq3ci.jpg" alt="Image" /><br /><br />so that's what I'm trying to do.  Again, the x-coordinates of my paddle are given by $0207 and $020B.  And it lies in the $A0 y-coordinate axis...that's why I subtracted $08 to check for collisions at the value $98.<br /><br /><img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4991">Asteroid</a> — Mon Sep 05, 2011 6:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-09-05T17:45:01-07:00</updated>
<published>2011-09-05T17:45:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83533#p83533</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83533#p83533"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83533#p83533"><![CDATA[
Mmmm...nesasm3 has this command called .include, use it to seperate subroutines for all things to different files so when you have to post all the code, you don't post a huge lump of code, but a small one that does everything and it's smaller. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />But yeah, hit detection is tricky to get, just think it out and try again. You need to do something like rightmost+ballwidth=rightmost pixel to hit, and then leftmost-ballwidth=leftmost hit, and then the Y is like the same thing, just with the Y. I'd post code of my routine, but it's pretty trashy and not commented and a complete mess, sorry. lol.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Mon Sep 05, 2011 5:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Asteroid]]></name></author>
<updated>2011-09-05T17:40:43-07:00</updated>
<published>2011-09-05T17:40:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83532#p83532</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83532#p83532"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83532#p83532"><![CDATA[
Yeah...not sure if that's how collision detection works, but what I'm doing is: If the ball's y coordinate is the same as the paddle, AND if it falls within the range of the paddles surface, then it's a collision so bounce the ball.  I check the x-coordinate of my paddle, which is composed of 2 sprites.  that's why you see a comparison of ballx with $0207 and $020B, but I can create variables for those to be safe.  <br /><br />That's not my entire code, just a snippet.  I can post all of it.  Been going over this for several days, and can't see why it goes through sometimes. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  .inesprg 1   ; 1x 16KB PRG code<br />  .ineschr 1   ; 1x  8KB CHR data<br />  .inesmap 0   ; mapper 0 = NROM, no bank swapping<br />  .inesmir 1   ; background mirroring<br />  <br />  .rsset $0000  ;;start variables at ram location 0<br />ballx   .rs 1<br />bally   .rs 1<br />motion   .rs 1<br />motiony   .rs 1<br />buttons   .rs 1  ; player 1 gamepad buttons, one bit per button<br />paddleright  .rs 1<br /><br />RIGHTWALL      = $F0  ; when ball reaches one of these, do something<br />TOPWALL        = $20<br />BOTTOMWALL     = $E0<br />LEFTWALL       = $04  <br />  <br />;;;;;;;;;;;;;;;<br />    <br />  .bank 0<br />  .org $8000<br />ballcolor:    .incbin &quot;test.dat&quot;  <br /><br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;STORE THE INITIAL POSITION OF THE BALL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />  <br />  LDA #$80<br />  STA ballx<br />  STA bally  <br />  LDA #$01<br />  STA motion<br />  STA motiony<br />  <br />  <br />RESET:<br />  SEI          ; disable IRQs<br />  CLD          ; disable decimal mode<br />  LDX #$40<br />  STX $4017    ; disable APU frame IRQ<br />  LDX #$FF<br />  TXS          ; Set up stack<br />  INX          ; now X = 0<br />  STX $2000    ; disable NMI<br />  STX $2001    ; disable rendering<br />  STX $4010    ; disable DMC IRQs<br /><br />vblankwait1:       ; First wait for vblank to make sure PPU is ready<br />  BIT $2002<br />  BPL vblankwait1<br /><br />clrmem:<br />  LDA #$00<br />  STA $0000, x<br />  STA $0100, x<br />  STA $0200, x<br />  STA $0400, x<br />  STA $0500, x<br />  STA $0600, x<br />  STA $0700, x<br />  LDA #$FE<br />  STA $0300, x<br />  INX<br />  BNE clrmem<br />   <br />vblankwait2:      ; Second wait for vblank, PPU is ready after this<br />  BIT $2002<br />  BPL vblankwait2<br /><br /><br />LoadPalettes:<br />  LDA $2002             ; read PPU status to reset the high/low latch<br />  LDA #$3F<br />  STA $2006             ; write the high byte of $3F00 address<br />  LDA #$00<br />  STA $2006             ; write the low byte of $3F00 address<br />  LDX #$00              ; start out at 0<br />LoadPalettesLoop:<br />  LDA ballcolor, x        ; load data from address &#40;palette + the value in x&#41;<br />                          ; 1st time through loop it will load palette+0<br />                          ; 2nd time through loop it will load palette+1<br />                          ; 3rd time through loop it will load palette+2<br />                          ; etc<br />  STA $2007             ; write to PPU<br />  INX                   ; X = X + 1<br />  CPX #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites<br />  BNE LoadPalettesLoop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br />                        ; if compare was equal to 32, keep going down<br /><br /><br /><br />LoadSprites:<br />  LDX #$00              ; start at 0<br />LoadSpritesLoop:<br />  LDA sprites, x        ; load data from address &#40;sprites +  x&#41;<br />  STA $0200, x          ; store into RAM address &#40;$0200 + x&#41;<br />  INX                   ; X = X + 1<br />  CPX #$0C              ; Compare X to hex $0C, the 12 bytes of sprite data<br />  BNE LoadSpritesLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />                        ; if compare was equal to 32, keep going down<br />              <br />              <br /><br />  LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />  STA $2000<br /><br />  LDA #%00011110   ; enable sprites, enable background, no clipping on left side<br />  STA $2001<br /><br />Forever:<br />  JMP Forever     ;jump back to Forever, infinite loop<br />  <br /> <br /><br />NMI:<br />  LDA #$00<br />  STA $2003       ; set the low byte &#40;00&#41; of the RAM address<br />  LDA #$02<br />  STA $4014       ; set the high byte &#40;02&#41; of the RAM address, start the transfer<br />  <br />  LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />  STA $2000<br />  LDA #%00011110   ; enable sprites, enable background, no clipping on left side<br />  STA $2001<br />  LDA #$00        ;;tell the ppu there is no background scrolling<br />  STA $2005<br />  STA $2005<br />  <br />  JSR ReadController1<br />  JMP EnginePlaying<br />EngineDone:<br />  JSR CheckPaddleCollision<br />  RTI             ; return from interrupt  <br />  <br />EnginePlaying:<br />;;;;;;;;;;;;;;;;;;;;;;;;MAKE THE BALL MOVE;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />MoveRight:<br />  LDA motion        ;Check which direction the motion is in and make sure we're moving right first<br />  BEQ MoveLeft<br />  LDA ballx<br />  ClC<br />  ADC #$01<br />  CMP #RIGHTWALL     ; Add one to the motion of the ball in x-direction and check for collision against right wall<br />  BCC RightDone        ; If ballx &lt; RightWall, then jump to right done and save the current value of ballx<br />  STA ballx                ; otherwise, we have hit the wall so we still must save current values&#40;ballx&#41; and also change motion = 0 <br />  LDA #$00               ; so mark that the ball is now moving left<br />  STA motion<br />  JMP BallMovingDone <br />RightDone:<br />  STA ballx<br />  LDA #$01<br />  STA motion<br />  JMP BallMovingDone<br /> <br />MoveLeft:<br />  LDA motion<br />  BNE MoveRight<br />  LDA ballx<br />  SEC<br />  SBC #$01<br />  CMP #LEFTWALL  <br />  BCS LeftDone<br />  STA ballx<br />  LDA #$01<br />  STA motion<br />  JMP BallMovingDone  <br />LeftDone: <br />  STA ballx<br />  LDA #$00<br />  STA motion  <br />  <br />BallMovingDone:<br />  LDA ballx<br />  STA $0203<br />  <br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Make the ball move in the y-direction;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />MoveDown:<br />  LDA motiony        ;Check which direction the motion is in and make sure we're moving right first<br />  BEQ MoveUp<br />  LDA bally<br />  ClC<br />  ADC #$01<br />  CMP #BOTTOMWALL     ; Add one to the motion of the ball in x-direction and check for collision against right wall<br />  BCC DownDone        ; If ballx &lt; RightWall, then jump to right done and save the current value of ballx<br />  STA bally                ; otherwise, we have hit the wall so we still must save current values&#40;ballx&#41; and also change motion = 0 <br />  LDA #$00               ; so mark that the ball is now moving left<br />  STA motiony<br />  JMP BallDone <br />DownDone:<br />  STA bally<br />  LDA #$01<br />  STA motiony<br />  JMP BallDone<br /><br /> <br />MoveUp:<br />  LDA motiony<br />  BNE MoveDown<br />  LDA bally<br />  SEC<br />  SBC #$01<br />  CMP #TOPWALL  <br />  BCS UpDone<br />  STA bally<br />  LDA #$01<br />  STA motiony<br />  JMP BallDone  <br />UpDone: <br />  STA bally<br />  LDA #$00<br />  STA motiony  <br />  <br />BallDone:<br />  LDA bally<br />  STA $0200<br /><br />  LDA #$00    ;;Just making sure to update the rest of the sprite information, e.g. tile number and attributes&#40;color&#41;<br />  STA $0201<br />  <br />  LDA #$01<br />  STA $0202  <br />  <br />PaddleLeft:<br />  LDA buttons<br />  and #%00000010<br />  BEQ PaddleLeftDone<br />  LDA $0207<br />  SEC<br />  SBC #$01<br />  CMP #LEFTWALL                         ;So just compare to the leftwall.  If the value is now less, DO NOT store it.  This works because next time accumulator<br />  BCC PaddleLeftWall                   ;is loaded, the old value will still be there, which will be in the valid range.  Thus paddle will not go beyond wall.<br />  STA $0207<br /> <br />  LDA $020B<br />  SEC<br />  SBC #$01<br />  CMP #LEFTWALL<br />  BCC PaddleLeftWall<br />  STA $020B<br />  jmp PaddleLeftDone<br />  <br />PaddleLeftWall:            ;;store the border x values for both sprites just to be sure<br />  LDA #$04<br />  STA $0207<br />  LDA #$0C<br />  STA $020B<br />  <br />PaddleLeftDone:<br /><br />PaddleRight:<br />  LDA buttons<br />  and #$00000001<br />  BEQ PaddleRightDone<br />  LDA $020B<br />  CLC<br />  ADC #$01<br />  CMP #RIGHTWALL                    ;The wall collision mechanism for the right wall is similar, EXCEPT, notice that sprite $020B comes first since that is the rightmost<br />  BCS PaddleRightWall              ; sprite and hits the wall first.  Originally, we had it with sprite $0207 first&#40;like for left&#41;, but since that is the left most sprite, by the time it hit the wall<br />  STA $020B                             ; the rightmost sprite had already gone through it.  So thats why we need to switch and check rightmost sprite first. <br />  <br />  LDA $0207<br />  CLC<br />  ADC #$01<br />  CMP #RIGHTWALL<br />  BCS PaddleRightWall<br />  STA $0207<br />  jmp PaddleRightDone<br />  <br />PaddleRightWall:                  ;;store the border x values for both sprites<br />  LDA #$E8<br />  STA $0207<br />  LDA #$F0<br />  STA $020B<br />  <br />PaddleRightDone:<br />  JMP EngineDone<br />  <br /><br />  <br />;; READ THE CONTROLLER AND MOVE PADDLE ;;<br />ReadController1:<br />  LDA #$01<br />  STA $4016<br />  LDA #$00<br />  STA $4016<br />  LDX #$08<br />ReadController1Loop:<br />  LDA $4016<br />  LSR A            ; bit0 -&gt; Carry<br />  ROL buttons     ; bit0 &lt;- Carry<br />  DEX<br />  BNE ReadController1Loop<br />  RTS<br />  <br />CheckPaddleCollision:<br />  LDA bally<br />  CMP #$98         ;we have checked that the ball has hit the top of the paddle surface<br />  BEQ PaddleRange           ;now lets check that the x values also lie within the paddle surface<br />  jmp NoHit<br />  <br />PaddleRange:<br />  LDA ballx                    ;;if the balls x coordinate &lt; paddle left sprite, it is a miss<br />  CMP $0207<br />  BCC NoHit<br />  LDA $020B                   ;;if balls x coordinate &gt; paddle right sprite, it is a miss<br />  CLC<br />  ADC $08<br />  STA paddleright<br />  LDA ballx<br />  CMP paddleright<br />  BCS NoHit  <br /><br />Hit:<br />  LDX #$00<br />  STX motiony<br />NoHit:<br />  RTS<br />  <br /><br /><br /> <br />;;;;;;;;;;;;;;  <br />  <br />  <br />  <br />  .bank 1<br />  .org $E000<br />palette:<br />  .db $0F,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$0F<br />  .db $0F,$1C,$15,$14,$31,$02,$38,$3C,$0F,$1C,$15,$14,$31,$02,$38,$3C<br /><br />sprites:<br />     ;vert tile attr horiz<br />  .db $80, $00, $01, $40   ;sprite 0  The ball is only in tile 0. Ball will start in center of screen<br />  .db $A0, $10, $00, $80   ;The paddle sprite information.  It is composed of 2 sprites<br />  .db $A0, $11, $00, $88<br />  <br />  .org $FFFA     ;first of the three vectors starts here<br />  .dw NMI        ;when an NMI happens &#40;once per frame if enabled&#41; the <br />                   ;processor will jump to the label NMI:<br />  .dw RESET      ;when the processor first turns on or is reset, it will jump<br />                   ;to the label RESET:<br />  .dw 0          ;external interrupt IRQ is not used in this tutorial<br />  <br />  <br />;;;;;;;;;;;;;;  <br />  <br />  <br />  .bank 2<br />  .org $0000<br />ship:    .incbin &quot;ball.chr&quot;    ;includes 8KB graphics file from SMB1</div><br /><br /><strong>[Page-widening comment fixed by MOD]</strong><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4991">Asteroid</a> — Mon Sep 05, 2011 5:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-09-05T16:58:51-07:00</updated>
<published>2011-09-05T16:58:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83528#p83528</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83528#p83528"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83528#p83528"><![CDATA[
NMI is called when VBlank starts, and you should upload your sprites, change the background tiles, and palette updates and such. But what is that program doing exactly? Detecting a hit on paddle 2? And it looks awful small, you comparing the Y axis &amp; X axis? And I wouldn't do compares to sprite memory, as those can change later on into a project.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Mon Sep 05, 2011 4:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Asteroid]]></name></author>
<updated>2011-09-05T16:53:12-07:00</updated>
<published>2011-09-05T16:53:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83527#p83527</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83527#p83527"/>
<title type="html"><![CDATA[A bug in my Pong...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8089&amp;p=83527#p83527"><![CDATA[
Hello everyone,<br /><br />New member here saying hi and hoping to get some help with my simple Pong program.  I've been going through the Nerdy Nights tuts and in combination with it, I've come up with my own Pong program.  The problem is that I'm getting a pernicious bug where every once in a while, the ball will go through the paddle rather than bounce off it.  <br /><br />here is the piece of code I think may be the culprit, but I can post the whole source code if necessary.<br /> <div class="codetitle"><b>Code:</b></div><div class="codecontent">CheckPaddleCollision:<br />  LDA bally<br />  CMP #$98         ;we have checked that the ball has hit the top of the paddle surface<br />  BEQ PaddleRange           ;now lets check that the x values also lie within the paddle surface<br />  jmp NoHit<br />  <br />PaddleRange:<br />  LDA ballx                    ;;if the balls x coordinate &lt; paddle left sprite, it is a miss<br />  CMP $0207<br />  BCC NoHit<br />  LDA $020B                   ;;if balls x coordinate &gt; paddle right sprite, it is a miss<br />  CLC<br />  ADC $08<br />  STA paddleright<br />  LDA ballx<br />  CMP paddleright<br />  BCS NoHit  <br /><br />Hit:<br />  LDX #$00<br />  STX motiony<br />NoHit:<br />  RTS</div><br /><br />the way I understand it, the NMI interrupt is called when there are graphics updates.  My paddle lies in the $A0 y-coordinate line, which is why I check for a collision at $98.  Even though the ball is only moving one pixel each frame, is it possible it is not getting updated fast enough? Do I need to check for collisions within a range, say from $96 to $99 to make sure the collision happens?  Maybe my bug lies elsewhere, I don't know.  Like I said, it bounces off my paddle about 70% of the time <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />I hope I explained things correctly, and thank you for any help <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4991">Asteroid</a> — Mon Sep 05, 2011 4:53 pm</p><hr />
]]></content>
</entry>
</feed>