<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=17553" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-07-22T19:04:54-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=17553</id>
<entry>
<author><name><![CDATA[imid]]></name></author>
<updated>2018-07-22T19:04:54-07:00</updated>
<published>2018-07-22T19:04:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221771#p221771</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221771#p221771"/>
<title type="html"><![CDATA[Re: MMC1 Emulation 32k Mode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221771#p221771"><![CDATA[
I had to google possum hollow, I thought you were pulling my leg. It looks pretty neat. I didn't even realize people were still putting out games. I've been pretty much out of the NES scene for 20 years. I got into collecting games pretty heavy around the mid nineties. Once emulators started getting developed i built a io56 and put it to absurdly good use. I built up a collection of over 700 different USA titles within a couple years, a lot were donated from people at the time. I got back into this summer with writing this emulator and I am shocked at how much information was wrong back then on the NES. By 98 it really felt like everything was figured out and working to some extant, its amazing emus worked as well as they did back then.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9301">imid</a> — Sun Jul 22, 2018 7:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-07-22T18:27:05-07:00</updated>
<published>2018-07-22T18:27:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221769#p221769</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221769#p221769"/>
<title type="html"><![CDATA[Re: MMC1 Emulation 32k Mode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221769#p221769"><![CDATA[
<em>The Curse of Possum Hollow</em> (unlicensed, TGROM clone) breaks very visibly very quickly if its 32K CHR RAM isn't bankswitched.<br /><br /><em>Lagrange Point</em> (licensed, Japan-only, VRC7) also breaks if CHR RAM isn't bankswitched.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jul 22, 2018 6:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[imid]]></name></author>
<updated>2018-07-22T16:56:07-07:00</updated>
<published>2018-07-22T16:56:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221765#p221765</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221765#p221765"/>
<title type="html"><![CDATA[Re: MMC1 Emulation 32k Mode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221765#p221765"><![CDATA[
Thank you, That site is really useful. I went ahead and added CHR RAM and PRG RAM bank switching. For anyone else working on this i was able to also find that Space Shuttle Project uses CHR RAM bank switching right on the title screen. Half the screen will be garbled if it isn't implemented. It makes testing so much easier when games break right away like that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9301">imid</a> — Sun Jul 22, 2018 4:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-07-22T13:47:05-07:00</updated>
<published>2018-07-22T13:47:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221755#p221755</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221755#p221755"/>
<title type="html"><![CDATA[Re: MMC1 Emulation 32k Mode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221755#p221755"><![CDATA[
Koei's games on the SOROM board use bank switching.<br /><br /><a href="http://bootgod.dyndns.org:7777/search.php?keywords=sorom&amp;kwtype=pcb" class="postlink">Genghis Khan, Romance of the Three Kingdoms, Nobunaga's Ambition</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jul 22, 2018 1:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[imid]]></name></author>
<updated>2018-07-22T12:26:17-07:00</updated>
<published>2018-07-22T12:26:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221749#p221749</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221749#p221749"/>
<title type="html"><![CDATA[Re: MMC1 Emulation 32k Mode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221749#p221749"><![CDATA[
I had a couple of more questions about MMC1 before i move on. Ive updated the code above to reflect PRG bank switching on writes to REG0 and REG1 as well as REG3. I suspect CHR switching may work the same way I just need to find a case where doing so fixes something. <br /><br />One question I have is regarding Matt Richey's MMC1.txt file. There is a Further Switching Section near the bottom where he talks about these transitions between states in the MMC1 and how they are handled. I am not handling these in code right now in any special way and yet i don't see any games breaking due to it. I also don't see anything about them on the wiki aside from which banks should be used in 32K mode, which leads me to believe that the information may not be accurate. can anyone confirm if these transitions are needed or not?<br /><br />The other question i had has to do with PRG RAM. Currently I just keep the entire area 0x6000-0x8000 writeable and everything seems fine. I have not implemented any bankswitching for it in MMC1 and also the same goes for CHR RAM which i also haven't implemented any bankswitching for. The only ROMS I have found that need these in MMC1 are the holy batman test ROMS. I wondering how important this is if the goal is just to be able to play all USA licensed games. Does anyone know of any games that use these extended features?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9301">imid</a> — Sun Jul 22, 2018 12:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[imid]]></name></author>
<updated>2018-07-18T01:52:14-07:00</updated>
<published>2018-07-18T01:52:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221391#p221391</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221391#p221391"/>
<title type="html"><![CDATA[Re: MMC1 Emulation 32k Mode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221391#p221391"><![CDATA[
Thank You! That did the trick. All the US MMC1 games now at least load up and look good. For anyone else I changed<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if (MMC1COUNT == 1)<br />{<br />MMC1FIVEBITVALUE = val &amp; 31;<br />}<br /></div><br /><br />to <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  if ((val &amp; 1) == 0)<br />  {<br />      MMC1FIVEBITVALUE &amp;= ~(1 &lt;&lt; 5);<br />  }<br />  else<br />  {<br />      MMC1FIVEBITVALUE |= 1 &lt;&lt; 5;<br />  }<br />  MMC1FIVEBITVALUE = ((MMC1FIVEBITVALUE &gt;&gt; 1) &amp; 0xFF);<br /></div><br /><br />There is probably a more elegant way to do it but for now im glad its working. Thanks again.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9301">imid</a> — Wed Jul 18, 2018 1:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-07-17T23:42:29-07:00</updated>
<published>2018-07-17T23:42:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221377#p221377</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221377#p221377"/>
<title type="html"><![CDATA[Re: MMC1 Emulation 32k Mode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221377#p221377"><![CDATA[
<div class="quotetitle">imid wrote:</div><div class="quotecontent"><br />if (MMC1COUNT == 1)<br />                    {<br />                        MMC1FIVEBITVALUE = val &amp; 31;<br />                    }<br /></div>I understand the cleverness you're trying here, but that's not how the MMC1 works.<br /><br />It only has two data pins. One pays attention to the most significant bit (&amp; 128, or &gt; 127) and the other only pays attention to the least significant bit (&amp; 1).<br /><br />While most games do load the value into some register, and then repeatedly shift the register and write to the MMC1, there are other games, like the traces you have here, that instead write constant values to the MMC1's registers instead by just loading A,X, or Y with 0 and/or 1.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Jul 17, 2018 11:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[imid]]></name></author>
<updated>2018-07-22T16:48:51-07:00</updated>
<published>2018-07-17T22:22:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221372#p221372</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221372#p221372"/>
<title type="html"><![CDATA[MMC1 Emulation 32k Mode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17553&amp;p=221372#p221372"><![CDATA[
Hello,  I could use some help with my mmc1 emulation. I have gone through the wiki and docs best i could and have come up with an implementation that works almost all the time but a couple games still give me trouble. One is Adams Family Puglsy scavenger hunt and the other Ninja Gaiden. Adams family breaks within the first 30 instructions so its a little easier to follow but Im still getting the banks wrong. Ive included the log below for Adams Family and my mmc1 code.  On startup I load 0xC into Reg0 and all other regs are 0. The lower PRG space has bank 0 and upper PRG space has the last bank which is 7. <br /><br />As i follow the log below i can see that it starts by a series of resets then writes to Reg1 with an initial value of 1. Which to my understanding means 32k switching mode. Then on line 23 writes begin to Reg3 with an initial value of 1. After the 5th write i switch in bank 0 at the lower PRG Space and bank 1 into the upper PRG space. This is where it falls apart. Checking with nintendulator i can see that after the 5th write that the lower PRG space has bank 7 and the upper PRG space has 7 as well. I cant seem to figure out how bank 7 ends up in either bank when 32k should of been switched out using a Reg3 value of 1.<br /><br /><br />1FF80A9 FFLDA #$FF                A:00X:00Y:00P:24SP:FDCYC:  0SL:241<br />2FF828D 00 80STA $8000 = 00A:FFX:00Y:00P:A4SP:FDCYC:  6SL:241<br />3FF858D 00 A0STA $A000 = 01A:FFX:00Y:00P:A4SP:FDCYC: 18SL:241<br />4FF888D 00 C0STA $C000 = 00A:FFX:00Y:00P:A4SP:FDCYC: 30SL:241<br />5FF8B8D 00 E0STA $E000 = D0A:FFX:00Y:00P:A4SP:FDCYC: 42SL:241<br />6FF8EA2 01LDX #$01                A:FFX:00Y:00P:A4SP:FDCYC: 54SL:241<br />7FF90A0 00LDY #$00                A:FFX:01Y:00P:24SP:FDCYC: 60SL:241<br />8FF928E FF 9FSTX $9FFF = 01        A:FFX:01Y:00P:26SP:FDCYC: 66SL:241<br />9FF958E FF 9FSTX $9FFF = 01        A:FFX:01Y:00P:26SP:FDCYC: 78SL:241<br />10FF988E FF 9FSTX $9FFF = 01        A:FFX:01Y:00P:26SP:FDCYC: 90SL:241<br />11FF9B8E FF 9FSTX $9FFF = 01        A:FFX:01Y:00P:26SP:FDCYC:102SL:241<br />12FF9E8C FF 9FSTY $9FFF = 01        A:FFX:01Y:00P:26SP:FDCYC:114SL:241<br />13FFA18C FF BFSTY $BFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:126SL:241<br />14FFA48C FF BFSTY $BFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:138SL:241<br />15FFA78C FF BFSTY $BFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:150SL:241<br />16FFAA8C FF BFSTY $BFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:162SL:241<br />17FFAD8C FF BFSTY $BFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:174SL:241<br />18FFB08E FF DFSTX $DFFF = FA        A:FFX:01Y:00P:26SP:FDCYC:186SL:241<br />19FFB38C FF DFSTY $DFFF = FA        A:FFX:01Y:00P:26SP:FDCYC:198SL:241<br />20FFB68C FF DFSTY $DFFF = FA        A:FFX:01Y:00P:26SP:FDCYC:210SL:241<br />21FFB98C FF DFSTY $DFFF = FA        A:FFX:01Y:00P:26SP:FDCYC:222SL:241<br />22FFBC8C FF DFSTY $DFFF = FA        A:FFX:01Y:00P:26SP:FDCYC:234SL:241<br />23FFBF8E FF FFSTX $FFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:246SL:241<br />24FFC28E FF FFSTX $FFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:258SL:241<br />25FFC58E FF FFSTX $FFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:270SL:241<br />26FFC88C FF FFSTY $FFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:282SL:241<br />27FFCB8C FF FFSTY $FFFF = C3        A:FFX:01Y:00P:26SP:FDCYC:294SL:241<br />28FFCE4C A4 C5JMP $C5A4        A:FFX:01Y:00P:26SP:FDCYC:306SL:241<br />29C5A4                        A:FFX:01Y:00P:26SP:FDCYC:315SL:241<br /><br /><br />*Code Updated 7/22/18 CHR RAM/PRG RAM Bank Swicthing<br />*Code Updated 7/22/18<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        public override void WriteToAddress(int MemoryAddress, int val)<br />        {<br />            if (MemoryAddress &gt;= 0x8000 &amp;&amp; MemoryAddress &lt;= 0xffff &amp;&amp; (((CPU.TotalCPUCycles - 1)!=LastWriteCycle) ))<br />            {<br />                LastWriteCycle = CPU.TotalCPUCycles;<br />                if (val &gt; 127)<br />                {<br />                    MMC1COUNT = 0;<br />                    MMC1REG0 = MMC1REG0 | 12;<br />                }<br />                else<br />                {<br />                    MMC1COUNT++;                   <br />                    if (MMC1COUNT == 1)<br />                    {<br />                        MMC1FIVEBITVALUE = val &amp; 31;<br />                    }<br />                    if (MMC1COUNT == 5)<br />                    {<br />                        if (MemoryAddress &gt;= 0x8000 &amp;&amp; MemoryAddress &lt; 0xA000)<br />                        {<br />                            MMC1REG0 = MMC1FIVEBITVALUE &amp; 31;<br />                            PPU.MIRROR= MMC1REG0 &amp;3;<br />                            MMC1PRG();<br />                        }<br />                        if (MemoryAddress &gt;= 0xA000 &amp;&amp; MemoryAddress &lt; 0xC000)<br />                        {<br />                            MMC1REG1 = MMC1FIVEBITVALUE;<br />                            MMC1PRG(); <br />                           if (GAME.NUMCHRPAGES &gt; 0)<br />                            {<br />                                if ((((MMC1REG0 &gt;&gt; 4) &amp; 1) == 0))<br />                                {<br />                                    GAME.SwitchCHRBank((MMC1REG1 &gt;&gt; 1), 0x2000, 0x2000, 0x0000);<br />                                }<br />                                else if ((((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />                                {<br />                                    GAME.SwitchCHRBank(MMC1REG1, 0x1000, 0x1000, 0x0000);<br />                                }<br />                            }      <br />                            else if (GAME.NUMCHRPAGES == 0 &amp;&amp; (((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />                            {<br />                                GAME.SwitchCHRRAMBank((MMC1REG1 &amp; 1), 0x1000, 0x1000, 0x0000);<br />                            }<br />                            if (GAME.NUMCHRPAGES &lt;= 2)<br />                            {<br />                                GAME.SwitchPRGRAMBank(((MMC1REG1 &gt;&gt; 2) &amp; 3), 0x2000, 0x2000, 0x6000);<br />                            }                    <br />                        }<br />                        if (MemoryAddress &gt;= 0xc000 &amp;&amp; MemoryAddress &lt;= 0xdfff)<br />                        {<br />                            MMC1REG2 = MMC1FIVEBITVALUE &amp; 31;<br />                            if (GAME.NUMCHRPAGES &gt; 0 &amp;&amp; (((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />                            {<br />                                GAME.SwitchCHRBank(MMC1REG2, 0x1000, 0x1000, 0x1000);<br />                            }<br />                            else if (GAME.NUMCHRPAGES == 0 &amp;&amp; (((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />                            {<br />                                GAME.SwitchCHRRAMBank((MMC1REG2 &amp; 1), 0x1000, 0x1000, 0x1000);<br />                            }<br />                            if(GAME.NUMCHRPAGES &lt;= 2 &amp;&amp; (((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />                            {<br />                                GAME.SwitchPRGRAMBank(((MMC1REG2 &gt;&gt; 2) &amp; 3), 0x2000, 0x2000, 0x6000);<br />                            }<br />                        }<br />                        if (MemoryAddress &gt;= 0xe000 &amp;&amp; MemoryAddress &lt; 0x10000)<br />                        {<br />                            MMC1REG3 = MMC1FIVEBITVALUE &amp; 15;<br />                            MMC1PRG();                           <br />                        }<br />                    }<br />                    if (MMC1COUNT == 5) { MMC1COUNT = 0; }<br />                }<br />            }<br />         if(MemoryAddress&gt;=0x6000 &amp;&amp; MemoryAddress &lt; 0x8000)<br />            {<br />                GAME.TheMapper.WritePRGRAM(MemoryAddress, val);<br />            }<br />        }<br /><br /> public static void MMC1PRG()<br />        {<br />            int offset = (((MMC1REG1 &gt;&gt; 4) &amp; 1) * 16 * (0x4000));<br />            if ((((MMC1REG0 &gt;&gt; 2) &amp; 3) &lt; 2))<br />            {<br />                GAME.SwitchPRGBank((MMC1REG3 &amp; ~1), 0x4000, 0x4000, 0x8000, offset);<br />                GAME.SwitchPRGBank(((MMC1REG3 &amp; ~1) | 0x01), 0x4000, 0x4000, 0xC000, offset);<br />            }<br />            else if ((((MMC1REG0 &gt;&gt; 2) &amp; 3) == 2))<br />            {<br />                GAME.SwitchPRGBank(((MMC1REG3 &amp; 15)), 0x4000, 0x4000, 0xC000, offset);<br />                GAME.SwitchPRGBank(0, 0x4000, 0x4000, 0x8000, offset);<br /><br />            }<br />            else if ((((MMC1REG0 &gt;&gt; 2) &amp; 3) == 3))<br />            {<br />                GAME.SwitchPRGBank(((MMC1REG3 &amp; 15)), 0x4000, 0x4000, 0x8000, offset);<br />                GAME.SwitchPRGBank(((GAME.NUMPRGPAGES - 1) &amp; 15), 0x4000, 0x4000, 0xC000, offset);<br />            }<br />        }<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9301">imid</a> — Tue Jul 17, 2018 10:22 pm</p><hr />
]]></content>
</entry>
</feed>