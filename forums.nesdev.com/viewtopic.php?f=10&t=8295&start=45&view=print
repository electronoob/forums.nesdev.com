<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - pong collision from nerdy nights</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">pong collision from nerdy nights</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=8295">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=8295</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Wed Jan 11, 2012 4:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Uhm ... ill have to read this a couple of times again <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> and search on google etc.
<br />I think ill get the idea..but im not sure.
<br />
<br />Somehow i already thought that the collision for the 2nd paddle didn't work because i used ball x and y again.
<br />On the other hand i thought i saw some exsamples on the web that worked and used the ball x and y again without a problem?
<br />
<br />The big picture is(i gues)That the variables i have like ballx and y are still set normal like variable ballx . rs 1 etc at the beginning.
<br />There still are set on screen etc. by the rs variable BUT
<br />I also set them as temp ram after ball x .rs in a different section like:
<br />ballx=temp1 bally= temp 2 etc.
<br />Then ill make a collision detection code somehow.
<br />that will look different like this
<br />lda ballx
<br />clc
<br />adc #$08
<br />cmp paddle1
<br />bcc no hit
<br />
<br />but will do all the checks x with x and  with y +height and width etc for all object that can collide with 1 subroutine code.
<br />Something like the buttons ? all of them go threw ?
<br />OR i look like a fool and it works completleY different <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Jan 11, 2012 7:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is a programming term "scope". Scope is a very important/difficult programming concept, so I hope my simple explanation is good enough.
<br />
<br />Each variable has a scope. A variable's scope is how long the variable is expected to refer to the same value. For example, how long ram location $00 is expected to contain ballx's position. 
<br />
<br />A variable's scope begins when it is used the first time after it was not being used, and ends when it is free to be used for something else. 
<br />
<br />Let's take a look at buttons1. Very early in each frame, you jsr to ReadController1. This starts storing which buttons are held in buttons1, and starts a scope where buttons1 is expected to hold which buttons are held.
<br />
<br />I could write whatever I want to buttons1 BEFORE the jsr to ReadController1 and it would not affect anything, because at that point buttons1 isn't expected to hold anything.
<br />
<br />The scope for buttons1 ends the last time it is expected to hold which buttons are held. So after you check for player 1 pressing up and down to move the paddle, the scope has ended. 
<br />
<br />I could write whatever I want to buttons1 AFTER checking up and down for the first paddle's movement, because at that point buttons1 is no longer expected to hold which buttons are held.
<br />
<br />You cannot (safely) change a variable to an unrelated value while it is expected to hold a value, i.e. while it has scope. Imagine if we wrote something to buttons1 during its scope. It could possibly make the paddles move up and down without the user's input!
<br />
<br />buttons1 has a scope that is a little less than a frame. What about variables who have an "endless" scope? In your code right now, ballx has endless scope. After it is setup, it is always expected to have the same value. (The current value of the ball's x position.) Changing it to something unrelated would cause the ball to warp around!
<br />
<br />A temporary variable is a variable that has very short scope. Here is an example that adds 1/2 of a number to itself. It does this by storing itself in a temporary variable.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Some number is in A. It doesn't matter what number specifically.<br />sta temp;A scope begins for temp here. It is expected to hold the number we want to add half to.<br />lsr a;A now holds half of itself.<br />clc<br />adc temp;We have just added temp &#40;our number&#41; to 1/2 of our number.<br />;We no longer need to know what temp &#40;our number&#41; was, because the operation is done. The scope for temp ends here.<br /></div><br />We could use then temp for something else (start a new scope) IMMEDIATELY after this.<br /><br />Now let's look at how this affects your collision detection routine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">collisiondetection:<br />lda ballx<br />clc<br />adc #$08<br />cmp paddle1x<br />;etc<br />rts<br /></div><br />This routine currently compares two variables with near endless scope! <br /><br />If I wanted to use it to compare say... ballx and paddle2x. I would have to OVERWRITE paddle1x with paddle2x to use this routine. Overwriting a value in scope is BAD.<br /><br />To get around this, we use temp RAM.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">collisiondetection:<br />lda temp1x<br />clc<br />adc #$08<br />cmp temp2x<br />;etc<br />rts;Scope for temp1x and temp2x ends<br /></div>
<br />
<br />To use this, you write the x values you want to check (like ballx and paddle1x) to temp1x and temp2x before the routine starts. This starts a scope where they're expected to be  those values. Then you jsr to the subroutine which checks them and ends their scope.
<br />
<br />To check two different objects, you write the values you want to check (like ballx and paddle2x), and jsr to the same subroutine. This allows you to use the same routine for all collision checks, without overwriting any variables in scope.
<br />
<br />The reason you want your collision routine as a subroutine is that, generally, you don't want to duplicate complicated bits of code.
<br />
<br />Imagine you had collision routine duplicated for each collision you wanted. (paddle1, ball and paddle2, ball). If you found a mistake in the collision code, you'd have to update two different routines to make the same change.
<br />
<br />edit: And the next day, I realize I'm describing a variable's "extent" not "scope"? At least I think...? Being self taught fills me with self doubt when I try to teach. I feel like I know how these things work but then call them the completely wrong things... Anyone else, please feel free to correct me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Thu Jan 12, 2012 3:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think i got it <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> 
<br />
<br />For my collision code i would only have 2 use 6 temps <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> uhm make that 4.
<br />Because my paddles are the same in size i would not have to edit height and width.
<br />So ill get something like this
<br />
<br />
<br />Checkcollision:
<br />lda temp1
<br />clc
<br />adc #$08
<br />cmp temp2
<br />bcc no hit
<br />
<br />hmmm now im typing this another thing pops up my collision code is
<br />
<br />lda ballx
<br />lda #$01
<br />sta ballright
<br />lda #$00
<br />sta ballleft
<br />RTS
<br />
<br />So i would also have to get ballleft and ballright in the temp ram.What about ballspeed?i gues not?
<br />
<br />and i would have to make checkcollision a subroutine
<br />JSR Checkcollision
<br />
<br />I understand the collision no problem BUT where do i put the temp ram and HOW?
<br />
<br />My gues <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> 
<br />
<br />1.It would have to be in the ENGINEPLAYING
<br />
<br />2. It would have to be in programcode like this??
<br />
<br />TempRam:
<br />
<br />lda ballx
<br />sta temp1
<br />lda paddle1x
<br />sta temp2 
<br />ETC .followed by
<br />JSR checkcollision
<br />Tempramdone
<br />
<br />code goes further
<br />
<br />Tempram2:
<br />
<br />lda ballx
<br />sta temp1
<br />lda paddle2x
<br />
<br />and so on and on for other collision checs if there where any..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Jan 12, 2012 6:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">log in wrote:</div><div class="quotecontent">So i would also have to get ballleft and ballright in the temp ram.</div><br />Nope. You don't need to put the speed or direction of the ball in temp RAM, because your collision routine doesn't care about any of that. Your collision routine should only return whether or not there is a collision. There are exactly two possible outcomes (either the objects are colliding or they are not), so you can just use the carry flag for the result instead of more temp RAM. Set the carry within the routine if there is a collision. Clear it if there is not. Then simply use a branch after the subroutine to do what you want with the result.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Collision check 1<br />lda ballx<br />sta temp1<br />lda paddlex<br />sta temp2<br />;etc<br />jsr Checkcollision<br />bcc skipbounceright<br />lda #$01<br />sta ballright<br />lda #$00<br />sta ballleft <br />skipbounceright:<br /></div><br />Having this part in the body of your actual subroutine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$01<br />sta ballright<br />lda #$00<br />sta ballleft <br /></div><br />would mean that that subroutine could no longer be used to bounce the ball left. A similar problem to when you weren't using temp ram for paddle1x.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Where do i put the temp ram and HOW?</div><br />You make room for it with .rs like any other RAM. You store and load values to it like any other RAM. Its purpose is only special to you because you have to keep its extent and what it currently needs to hold in mind, but temp and ballx are not different types of variables to the assembler.<br /><br />edit: <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because my paddles are the same in size i would not have to edit height and width.</div><br />Correct, but keep in mind if you work this way the ball's y position must be stored in the slot of temp RAM that adds 8 for height, and the paddle's y position must be in the slot of temp RAM that adds 16. You're right that for pong it is not that worth it/useful to have temp RAM for height and width.<br /><br />Finally, a quick note about some code left over from the bunnyboy tutorial. The ball can't be traveling left and right at the same time or up and down at the same time, right? So you don't actually need four variables for the ball's direction (ballleft, ballright, ballup, balldown). You only need two. (balldirectionx and balldirectiony).<br /><br /><br />If balldirectionx is 0, the ball is traveling right. If it's nonzero, it's traveling left. Likewise for y. Less RAM, and serves the same purpose. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2. It would have to be in programcode like this??<br />*snip*<br />and so on and on for other collision checs if there where any..</div>
<br />That is correct.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Sat Jan 14, 2012 2:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My code
<br />
<br />temp1         .rs 1  ; 
<br />temp2         .rs 1  ; 
<br />temp3         .rs 1  ;                   added this to variables
<br />temp4         .rs 1  ; 
<br />
<br />;---------------------------------------
<br />
<br />  JSR CheckCollision                  added this after the JMP readcontrollers
<br />
<br />;----------------------------------------
<br />
<br />Bounce:
<br />
<br /> LDA ballx
<br /> STA temp1
<br /> LDA bally
<br /> STA temp2
<br /> LDA PADDLE1X                            added this at the last part of the game 
<br /> STA temp3                                   engine
<br /> LDA paddle1y
<br /> STA temp4
<br /> JSR CheckCollision
<br /> BCC SkipBounceRight
<br />
<br />
<br />  
<br />  LDA #$01
<br />  STA ballright
<br />  LDA #$00
<br />  STA ballleft
<br />
<br />
<br />SkipBounceRight:
<br />
<br /> JMP GameEngineDone
<br />
<br />;----------------------------------------------------------------
<br />
<br />
<br />CheckCollision:
<br />  
<br />
<br />   LDA temp3
<br />   CLC
<br />   ADC #$08 
<br />   CMP temp1                                            ;    added this after the 
<br />                                                                controller loop
<br />   LDA temp1
<br />   CLC 
<br />   ADC #$08 
<br />   CMP temp3 
<br />.   
<br />
<br />   LDA temp4
<br />   CLC 
<br />   ADC #$32 
<br />   CMP temp2
<br />   
<br />
<br />   LDA temp2 
<br />   CLC 
<br />   ADC #$08 
<br />   CMP temp4
<br />   
<br />
<br />   RTS
<br />
<br />;----------------------end of all editing

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Sat Jan 14, 2012 5:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So when using this the ball goes ApeShit.
<br />And i think i know why my collision sucks.
<br />
<br />I work this all out on paper first (like the 6502 book says,yeah got a translated version <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  of rodney)
<br />
<br />The problem is the split up off my code.
<br />
<br />The collision is ok as far as i can see,but the problem is the split of the collision code and the code for the ball bouncing.
<br />
<br />Ok ,how do i say this <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> 
<br />
<br />In my old code i would bcc if the collision could not happen to NoHit and if everything was ok the program would work his way to the collision code.
<br />But now that won't work..
<br />Because the collision code is somewhere else and if i try to get there its out of reach so..
<br />
<br />i let the code run and tried bcc and the ball goes bananas,proberly because it checks only 1 bcc of my 4 checks <img src="./images/smilies/icon_question.gif" alt=":?:" title="Question" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Jan 14, 2012 5:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If this is your code it can't work.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CheckCollision:<br /><br /><br />LDA temp3<br />CLC<br />ADC #$08<br />CMP temp1 ; added this after the<br />controller loop<br />LDA temp1<br />CLC<br />ADC #$08<br />CMP temp3<br />.<br /><br />LDA temp4<br />CLC<br />ADC #$32<br />CMP temp2<br /><br /><br />LDA temp2<br />CLC<br />ADC #$08<br />CMP temp4<br /><br /><br />RTS<br /></div><br />There's not a single branch there. That means that only the very last cmp determines whether or not there is a collision.<br /><br />When your old code worked, it did this when there was a collision:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$01<br />STA ballright<br />LDA #$00<br />STA ballleft<br /></div><br />And nothing when there was not.<br /><br />You want the same collision checks in your subroutine (except with temp RAM) except you want to SEC instead of the above when there is a collision (then RTS), and CLC instead of nothing when there is not a collision. (then RTS).<br /><br />Do all four collision checks:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;If a collision fails, you branch to nohit.<br />;If all the collision checks are true it continues down to the following without branching.<br />sec<br />rts<br />nohit:<br />clc<br />rts<br /></div><br />That way if it returns after branching from nohit, the carry is guaranteed to be clear when it returns. If it never branches to nohit, the carry is guaranteed to be set when it returns. Then, after the subroutine returns you can use bcc to skip the code that shouldn't happen if there was no collision.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">  JSR CheckCollision                  added this after the JMP readcontrollers<br /></div><br />You mean like this?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JSR ReadController1 ;;get the current button data for player 1<br />JSR ReadController2 ;;get the current button data for player 2<br />JSR CheckCollision <br /></div>
<br />Why? You should only jsr to the check collision if you're checking a collision.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Sun Jan 15, 2012 12:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bounce2: 
<br />
<br />LDA ballx 
<br />STA temp1 
<br />LDA bally 
<br />STA temp2 
<br />LDA PADDLE2X 
<br />STA temp3 
<br />LDA paddle2y 
<br />STA temp4 
<br />JSR CheckCollision 
<br />BCC SkipBounceRight2 
<br />
<br />
<br />
<br />LDA #$00
<br />STA ballright 
<br />LDA #$01 
<br />STA ballleft 
<br />
<br />
<br />SkipBounceRight2: 
<br />
<br />;-----------------------------------------------------------------
<br />
<br />
<br />
<br />1. What am i missing or doing wrong i read it a couple of times again and it must work.The JSR and the code is ok.
<br />Because paddle 1 works.
<br />So what is wrong with this 1? the temps have been replaced,the ball bounce code has been reversed.
<br />Are the temps not clear again?
<br />
<br />2.The JSR in the last post was stupid and made no sence at all.
<br />
<br />3.Im curius about collision some more.Are there limitations? Like the number of collisions on screen(something like 8 sprites on a line).
<br />And can it happen that you get in trouble with 2 collisions at the same time?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sun Jan 15, 2012 1:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are the temps not clear again?</div><br />You just have to set the temps again with the new values before you call the subroutine again. It looks like you're doing that, so no problem there.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3.Im curius about collision some more.Are there limitations? Like the number of collisions on screen(something like 8 sprites on a line).<br />And can it happen that you get in trouble with 2 collisions at the same time?</div>
<br />
<br />There aren't any limitations like that, no. You should be able to check any number of collisions, even 1,000 if you wanted to. One limitation is that the current routine may return false if both objects are colliding very close to the bottom or right of the screen, but I don't think that would be the issue here.
<br />
<br />So the problem must be with your collision code. It's possible the way it is written would make it work for one case and not another. I haven't seen it since you said it was working, so please post it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Sun Jan 15, 2012 3:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />time to test my pasta bin skills <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> 
<br /><!-- m --><a class="postlink" href="http://pastebin.com/PVhcBvdh">http://pastebin.com/PVhcBvdh</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sun Jan 15, 2012 6:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PADDLE1X&nbsp; &nbsp; &nbsp; &nbsp;= $08&nbsp; ; horizontal position for paddles, doesnt move<br />PADDLE2X&nbsp; &nbsp; &nbsp; &nbsp;= $F0<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA PADDLE1X; = lda $08<br />;Which is NOT the same as lda #$08.<br />LDA PADDLE2X; = lda $F0<br />;Which is NOT the same as lda #$F0.<br /></div><br /><br />I said that already and went into detail in the very beginning of <a href="http://nesdev.com/bbs/viewtopic.php?p=86704#86704" class="postlink">this post.</a><br /><br />Edit: Though, I guess I understand why you did this. It's what I did in my example. I did this I'd actually just use RAM for the two paddlex values. It makes it much easier. In any case, that's the issue.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ADC #$32; #$32 = lda #50.<br />;You want adc #$20 if the paddle is only 32 pixels tall.<br /></div><br />I said that already in <a href="http://nesdev.com/bbs/viewtopic.php?p=87812#87812" class="postlink">this post.</a><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; JSR ReadController1&nbsp; ;;get the current button data for player 1<br />&nbsp; JSR ReadController2&nbsp; ;;get the current button data for player 2<br />&nbsp; JSR CheckCollision;Still there.<br /></div>
<br />
<br />But the collision code is fine, and should work when you make those changes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Mon Jan 16, 2012 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />fixed everything and got the paddles working,it all worked perfect on the powerpak.
<br />Wrote everything down in my map and wrote constants and # down in BIG letters <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> 
<br />
<br />I think i can close the capter collisions now(sprite vs sprite)
<br />More tips or pointers would be very welcome  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> 
<br />Many MANY thank you's

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Jan 17, 2012 12:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Congrats!
<br />
<br />The first thing you should do is start naming your labels and variables more meaningful things.
<br />
<br />SkipBounceRight2? Why not SkipBounceLeft? It is not a good habit to copy and paste things and change just enough so it works right. If you read your code later, you'll have to think twice as hard about what the code is doing.
<br />
<br />MovePaddle1y
<br />DownPaddle1y
<br />
<br />Why not UpPaddle1y? The labels should be immediately clear. Related code should follow a format.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">paddle1y&nbsp; &nbsp;.rs 1;This one's labeling doesn't match the others.<br />paddle12&nbsp; .rs 1;These could be read as PaddleTwelve<br />paddle13&nbsp; .rs 1;PaddleThirteen<br />paddle14&nbsp; .rs 1;PaddleFourteen<br />;Which hides their purpose a little bit.<br /></div><br />You actually don't need paddle12, paddle13, and paddle14 at all.<br /><br />Right now you are using 4 zero page RAM locations for each paddle's y position.<br /><br />This has two problems: <br />1. You have to update all 4 every time the paddle moves.<br />2. You're using 3 more bytes of zero page RAM than you need.<br /><br />You can update only one byte of RAM that contains the actual Y position of the paddle:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MovePaddle1y:<br />&nbsp; LDA buttons1<br />&nbsp; AND #%00001000<br />&nbsp; BEQ MovePaddle1yDone<br /><br />&nbsp; LDA paddle1y<br />&nbsp; SEC <br />&nbsp; SBC #$01<br />&nbsp; STA paddle1y<br />MovePaddle1yDone:<br /></div><br /><br />Then do this when you update the sprites:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA paddle1y;Paddle1y is in A.<br />&nbsp; STA $0204<br />&nbsp; <br />&nbsp; LDY #$37;We're using Y instead of A<br />&nbsp; STY $0205;Because A holds a value we'll add to<br />;For the other sprites in the paddle.<br />&nbsp; LDY #$00<br />&nbsp; STY $0206<br /><br />&nbsp; LDY #$08<br />&nbsp; STY $0207<br /><br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />&nbsp; CLC<br />&nbsp; ADC #$08;We've added 8 to the top y position. <br />&nbsp; STA $0208;Paddle1y+8 is in A.<br />&nbsp; <br />&nbsp; LDY #$47<br />&nbsp; STY $0209<br /><br />&nbsp; LDY #$00<br />&nbsp; STY $020A<br /><br />&nbsp; LDY #$08<br />&nbsp; STY $020B<br /><br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br /><br />&nbsp; CLC<br />&nbsp; ADC #$08;Paddle1y+16 is in A.<br />&nbsp; STA $020C<br />&nbsp; <br />&nbsp; LDY #$57<br />&nbsp; STY $020D<br /><br />&nbsp; LDY #$00<br />&nbsp; STY $020E<br /><br />&nbsp; LDY #$08<br />&nbsp; STY $020F<br /><br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br /><br />&nbsp; CLC<br />&nbsp; ADC #$08;Paddle1y+24 is in A.<br />&nbsp; STA $0210<br />&nbsp; <br />&nbsp; LDY #$67<br />&nbsp; STY $0211<br /><br />&nbsp; LDY #$00<br />&nbsp; STY $0212<br /><br />&nbsp; LDY #$08<br />&nbsp; STY $0213<br /></div><br />That updates all the sprites properly without the extra RAM.<br /><br />In fact, you can take it a little further. I said earlier that anytime you need to duplicate complicated code, it's probably worth turning it into a subroutine. Right now you have the "update paddle sprites" code duplicated for each paddle.<br /><br />You can make a subroutine using the ,x addressing mode. <br /><br />lda $0200,x loads the value at the location $02XX. If X is FF it loads from $02FF.<br />If X is 8, it loads $0208.<br /><br />Remember how we had to put things in temp RAM to set up our checkcollision routine? Here we need to do some setup, but we'll just use A, X,  and Y.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;load the y position of the paddle in A.<br />;Load the X position of the paddle in Y.<br />;Then load the location of the first byte of the paddle you want to draw in X.<br />;JSR to this subroutine and it will draw the paddle.<br /><br />DrawPaddle:<br />&nbsp; STA $0200,x;This works because before we jsr'd to DrawPaddle, we loaded the y position in A.<br /><br /><br />&nbsp; STA temp1;We need to store it in temp RAM instead of keeping it in A<br />;For the subroutine. This is because you can't STY $0200,x. ST ,x is only available for A.<br /><br />&nbsp; LDA #$37<br />&nbsp; STA $0201,x<br /><br />&nbsp; LDA #$00<br />&nbsp; STA $0202,x<br /><br />&nbsp; TYA;Move the value in Y&#40;the X position of the paddle&#41; into A.<br />&nbsp; STA $0203,x <br />&nbsp; inx<br />&nbsp; inx<br />&nbsp; inx<br />&nbsp; inx;We want to work with a new sprite now, so we advance four bytes.<br /><br />&nbsp; LDA temp1<br />&nbsp; CLC<br />&nbsp; ADC #$08<br />&nbsp; STA temp1<br />&nbsp; STA $0200,x<br />&nbsp; <br />&nbsp; LDA #$47<br />&nbsp; STA $0201,x<br /><br />&nbsp; LDA #$00<br />&nbsp; STA $0202,xx<br /><br />&nbsp; TYA<br />&nbsp; STA $0203,x<br /><br />&nbsp; inx<br />&nbsp; inx<br />&nbsp; inx<br />&nbsp; inx<br />;*insert the same sort of thing for the final two sprites*<br />&nbsp; rts<br /></div><br /><br />Then, you can use it like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda paddle1y<br />&nbsp; ldy paddle1x<br />&nbsp; ldx #$04;The ball occupies $0200, $0201, $0202, and $0203, so we start with $0204.<br />&nbsp; jsr DrawPaddle<br />;The first paddle's sprites are updated! You don't even have to update X to do more, since the DrawPaddle routine automatically moves it to the next free sprite.<br /><br />&nbsp; lda paddle2y<br />&nbsp; ldy paddle2x<br />&nbsp; jsr DrawPaddle<br />;The second paddle's sprites are updated!<br /><br />;You can even draw more paddles in other locations!<br /><br />&nbsp; lda #$80<br />&nbsp; ldy #$80<br />&nbsp; jsr DrawPaddle<br /></div><br /><br />If you use subroutines instead of hard coding everything it makes it very easy to add new objects to the game.<br /><br />One last thing. The CURSE of nesasm.<br /><br />Whenever you are using a zero page variable, put &lt; before it.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda temp1<br />;becomes<br />lda &lt;temp1<br /><br />lda paddle1y<br />;becomes<br />lda &lt;paddle1y<br /></div>
<br />
<br />This makes your code faster. 
<br />
<br />lda temp1 is like typing lda $XXXX which takes 4 cycles.
<br />lda &lt;temp1 is like typing lda $XX which takes 3 cycles.
<br />
<br />It's faster, and there's no drawback to doing it 99% of the time. 
<br />
<br />The one percent is when you want to do lda temp1,x. In that case lda &lt;temp1,x and lda temp1,x can possibly do different things.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>