<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=9136" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-08-03T10:04:03-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=9136</id>
<entry>
<author><name><![CDATA[B00daW]]></name></author>
<updated>2012-08-03T10:04:03-07:00</updated>
<published>2012-08-03T10:04:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97472#p97472</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97472#p97472"/>
<title type="html"><![CDATA[Re: Racermate Challenge 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97472#p97472"><![CDATA[
Sent you a private message.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3466">B00daW</a> — Fri Aug 03, 2012 10:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2012-07-31T21:58:33-07:00</updated>
<published>2012-07-31T21:58:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97358#p97358</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97358#p97358"/>
<title type="html"><![CDATA[Racermate Challenge 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97358#p97358"><![CDATA[
Of course I work on this more and come up with something complete, but maybe someone else will take a gander at the things that puzzle me.<br /><br />So, all the remaining ICs are part of the battery-backed RAM protection circuit. The 74hct74 enables or disables the SRAMs nSELected lines; the transistor Q2 clears both registers in the '74 when the Vcc line fails. (In turn driving the inverted output on pin 7 high, which is then ORed in U5 with the select lines)<br /><br />The NAND gate in U8 on pins 8-10 should generate the clock strobe to the secondary D register in the '74, mapping it to writes to $c000-$ffff. The board was originally laid out to use CPU A7 for the data input; however the one pictured in NesCartDB has been revised to use CPU D2.<br /><br /><strong>First question</strong>: any guesses why they rewired this? The actual code alternates between writing $FF -&gt; $F080 and $00 -&gt; $F000 over and over.<br /><br />In any case, this means that the CPU can disable the battery-backed SRAM protection by writing 1 then 0 to the relevant bit (whether it's A7, D2, or something else).<br /><br />However, it seems that the Q5 bit of the 74HCT4040 U10 goes to the /PRESET line of the primary D register in the '74, perpetually setting the bit and therefore driving the inverted output low. So as long as M2 is running, every 32 1.8MHz clock cycles the SRAM will be de-protected. So there's no need for the CPU code to deprotect it.<br /><br /><strong>Thus the second question</strong>: Any idea why both methods for deprotecting would be present? It's not like the anything could disable the M2-based deprotector.  <br /><br />Or, is my guess wrong here? Where else could Q5 go? The only inputs that don't have traces definitively going to them are the primary /PRESET and secondary CLOCK inputs. If I have these backwards, what's going on instead?<br /><br />Final point, for clarification on the jumpers:<br />J2 means only the 32k SRAM labeled U1 has its nSELECT line driven high on +5V fail; J1 means both do. Thus, J1+J4 is correct for battery-backing 64kB; J2+J3 is correct for only battery backing U1 and not U2.<br /><br />All my analysis has been done by labelling and painting over the images of the PCBs in GIMP; I have a 4MB .xcf file that I can PM people a URL to if they want it. (for bandwidth reasons I don't want to post it publicly)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Jul 31, 2012 9:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2012-07-30T15:05:21-07:00</updated>
<published>2012-07-30T15:05:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97313#p97313</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97313#p97313"/>
<title type="html"><![CDATA[Racermate Challenge 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9136&amp;p=97313#p97313"><![CDATA[
So I started REing this board a couple days ago (as part of my "get everything <a href="http://bootgod.dyndns.org:7777/profile.php?id=2696" class="postlink">in NesCartDB</a> in the wiki" project), and ran into trouble because enough traces are hidden under ICs and there's no complete functional description of what exactly is going on.<br /><br />CaH4e3, in his <a href="http://fceumm.svn.sourceforge.net/viewvc/fceumm/src/boards/168.c?view=markup" class="postlink">implementation in fceumm</a>, says there's a 6 bit register laid out as [PP.. CCCC] at $b000. There is; on the board it's the 74ls174 labeled U4. <br /><br />What I saw and what CaH4e3 wrote differs from what <a href="http://nesmuseum.com/racermate.html" class="postlink">bunnyboy said in the nesmuseum</a>, though. I'm not certain what to think of that.<br /><br />The two PRG bits are used in an UNROM style banking fashion, with a fixed bank from $c000-$ffff and switchable from $8000-$bfff. The other two OR gates are used to select when to load the banking register: nROMSEL OR READnotWRITE OR A14. This means the register is actually mapped over the entire $8000-$bfff range. This makes up the 74ls32 labeled U7.<br /><br />The 4 chr address lines through the NAND gate U6 (against PPU A12) so that the $0000-$0fff pattern table is always bank 15 and the $1000-$1fff pattern table is the two's complement of the written bank. (This is isomorphic to what CaH4e3 wrote: 0 and ($bank&amp;15), modulo concerns about which 32kB are battery-backed.) (Also, the C bits are out of order as 3012, but it's RAM, so it doesn't matter)<br /><br />This, however, leaves U5 (another '32), U8 (another '00), U9 (a '74) and U10 (a 4040). <br /><br />Part of U5 and ¼ of U8 (as an inverter) is used to make the two 32kB RAMs act like one homogenous 64kB memory space, but some of the traces in the area are confusing. Another ¼ of U8 is used to prevent bus conflicts.<br /><br />Jumpers: J3 vs J4 selects respectively whether one or both SRAMs are battery backed. <br />J1 vs J2 has something to do with how it selects the not-necessarily-battery-backed SRAM, but I can't follow the traces under U5 to figure it out.<br /><br />The 4040 is a 12 bit counter IC, and its 2^12s bit (or something else, probably 2^11s bit, see traces near R2) is connected via a BJT to the cartridge edge /IRQ line. The counter is clocked by M2. Q5 also goes somewhere under the 74'74 U9. This should produce interrupts—as far as I can tell, ungatably so— at some multiple of 437 Hz.<br /><br />Finally, CPU D2 is connected to the D input of one of the two D registers inside the 74'74, but I cannot figure out under what conditions it uses it. This is far enough away from the cartridge edge that there are no lower address lines than /ROMSEL, so I'm hard pressed to think of anything sensible it could be doing.<br /><br />Does anyone have any insights, or a cartridge to measure?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Jul 30, 2012 3:05 pm</p><hr />
]]></content>
</entry>
</feed>