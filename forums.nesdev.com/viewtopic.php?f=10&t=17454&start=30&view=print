<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hello, new here, and need best recommandations.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hello, new here, and need best recommandations.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17454">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17454</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Jun 24, 2018 6:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is it a separate engine, like the Address? Or is it a form of abilities like RAM or DATA styles?<br /><br />Like how does the register of A X Y [and P Z ] works? Or they work as a special form of variables like, a temporary placement of &quot; A = X + Y&quot; until the new replacement happens like &quot;STA&quot; or &quot;LDA&quot;? </div><br /><br />these registers exist inside the CPU.<br /><br />It holds a value, 8 bits each.<br /><br />This value can be whatever your program wants it to be. As a temporary variable. As an address (pointer). As a counter.<br /><br />And when I say temporary, I mean very very briefly. As the program runs the A register will change values hundreds of times a second, depending on what the program is doing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">like the A represent the stages of Mario Bros. your in, X represent your health, and Y represent your Mario life?</div><br /><br />Ok, let's say you've chosen RAM address 31 to hold the health of Mario. Let's say Mario gets injured, so his health goes down 1. You can decrease the value of 31 by loading it into the A register and subtracting 1, then storing it again at RAM 31.<br /><br />LDA 31 ;load from 31<br />SEC   ;set the carry flag, for subtraction<br />SBC #1 ;subtract 1<br />STA 31 ;store to 31<br /><br />(There is another way to do this, but I chose to use the A register for example)<br /><br />The health only is used by A for a brief moment, then A goes on to do other things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Sun Jun 24, 2018 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is it a separate engine, like the Address? Or is it a form of abilities like RAM or DATA styles?<br /><br />Like how does the register of A X Y [and P Z ] works? Or they work as a special form of variables like, a temporary placement of &quot; A = X + Y&quot; until the new replacement happens like &quot;STA&quot; or &quot;LDA&quot;? </div><br /><br />these registers exist inside the CPU.<br /><br />It holds a value, 8 bits each.<br /><br />This value can be whatever your program wants it to be. As a temporary variable. As an address (pointer). As a counter.<br /><br />And when I say temporary, I mean very very briefly. As the program runs the A register will change values hundreds of times a second, depending on what the program is doing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">like the A represent the stages of Mario Bros. your in, X represent your health, and Y represent your Mario life?</div><br /><br />Ok, let's say you've chosen RAM address 31 to hold the health of Mario. Let's say Mario gets injured, so his health goes down 1. You can decrease the value of 31 by loading it into the A register and subtracting 1, then storing it again at RAM 31.<br /><br />LDA 31 ;load from 31<br />SEC   ;set the carry flag, for subtraction<br />SBC #1 ;subtract 1<br />STA 31 ;store to 31<br /><br />(There is another way to do this, but I chose to use the A register for example)<br /><br />The health only is used by A for a brief moment, then A goes on to do other things.</div><br /><br />Is register is inside everything programming-wise? Or it's selective? <br /><br />So it's the same as:<br /><br />JOE = 10 <br /><br />ROB = 5 <br /><br />JUMP = JOE + ROB<br /><br />IF JOE == ROB <br />GOTO @NAME<br /><br />???<br /><br />Or is it pretty much the same, except the difference is the NES CPU can only do 3 to 5 variables instead of infinite? I learn this kind of program styles in SmileBASIC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sun Jun 24, 2018 7:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">Thanks for PDF! <br /><br />But this is what I don't understand.<br /><br />Is it a separate engine, like the Address? Or is it a form of abilities like RAM or DATA styles?<br /><br />Like how does the register of A X Y [and P Z ] works? Or they work as a special form of variables like, a temporary placement of &quot; A = X + Y&quot; until the new replacement happens like &quot;STA&quot; or &quot;LDA&quot;? <br />I don't like to say this much, but can you explain like if I'm in Elementary School to help me understand about register?  [It's very owned variables, like no other regular variables can use?]<br /><br />Or it's like a &quot;magic effects&quot; but in programming, like the A represent the stages of Mario Bros. your in, X represent your health, and Y represent your Mario life?</div>I'm sorry I can't explain registers to you in elementary school logic because I didn't learn about registers until college.  But, I can try. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />The processing chip that the NES uses is called the 2A03.  The 2A03 is a special type of the 6502 processing chip.  (For instance, it doesn't have the b flag in its status register and its d flag is pointless too, but those aren't important now.)  The three 6502 registers I'm attempting to explain are A, X, and Y.  Each of the registers are created with 8 bits.  Every bit comes from a transistor.  If a bit's transistor holds an electrical charge, the bit is set and that translates into a 1.  Otherwise, the bit's transistor lacks an electrical charge then the bit is clear and so we have a 0.  Ever hear of computers being all 1s and 0s? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />   The numeral system Binary is an easy, but lengthy way, of telling the NES's 2A03's A register what to hold.  If your program tells the NES: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #%00000001</tt> that will set bit0 of register A and clear register A's bits 1 through 7. <br />Bits in a register are named <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">| bit7 | bit6 | bit5 | bit4 | bit3 | bit2 | bit1| bit0 |</tt>.  Yes, that's right to left, but use it enough an you'll get used to it. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  There are two other ways of describing the value, you want loaded into register A, to the assembler:  Hexidecimal and Decimal.<br /><br />Before you click on this link read the paragraph sections above carefully. <a href="https://betterexplained.com/articles/numbers-and-bases/" class="postlink">https://betterexplained.com/articles/numbers-and-bases/</a><br /><br />Now I will close by saying that the three 8bit-wide registers A, X, and Y are located on the NES's 2A03 processing chip. There is the simplest way I can fully explain a register.  Perhaps someone else can help you more. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Sun Jun 24, 2018 7:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">Thanks for PDF! <br /><br />But this is what I don't understand.<br /><br />Is it a separate engine, like the Address? Or is it a form of abilities like RAM or DATA styles?<br /><br />Like how does the register of A X Y [and P Z ] works? Or they work as a special form of variables like, a temporary placement of &quot; A = X + Y&quot; until the new replacement happens like &quot;STA&quot; or &quot;LDA&quot;? <br />I don't like to say this much, but can you explain like if I'm in Elementary School to help me understand about register?  [It's very owned variables, like no other regular variables can use?]<br /><br />Or it's like a &quot;magic effects&quot; but in programming, like the A represent the stages of Mario Bros. your in, X represent your health, and Y represent your Mario life?</div>I'm sorry I can't explain registers to you in elementary school logic because I didn't learn about registers until college.  But, I can try. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />The processing chip that the NES uses is called the 2A03.  The 2A03 is a special type of the 6502 processing chip.  (For instance, it doesn't have the b flag in its status register and its d flag is pointless too, but those aren't important now.)  The three 6502 registers I'm attempting to explain are A, X, and Y.  Each of the registers are created with 8 bits.  Every bit comes from a transistor.  If a bit's transistor holds an electrical charge, the bit is set and that translates into a 1.  Otherwise, the bit's transistor lacks an electrical charge then the bit is clear and so we have a 0.  Ever hear of computers being all 1s and 0s? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />   The numeral system Binary is an easy, but lengthy way, of telling the NES's 2A03's A register what to hold.  If your program tells the NES: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #%00000001</tt> that will set bit0 of register A and clear register A's bits 1 through 7. <br />Bits in a register are named <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">| bit7 | bit6 | bit5 | bit4 | bit3 | bit2 | bit1| bit0 |</tt>.  Yes, that's right to left, but use it enough an you'll get used to it. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  There are two other ways of describing the value, you want loaded into register A, to the assembler:  Hexidecimal and Decimal.<br /><br />Before you click on this link read the paragraph sections above carefully. <a href="https://betterexplained.com/articles/numbers-and-bases/" class="postlink">https://betterexplained.com/articles/numbers-and-bases/</a><br /><br />Now I will close by saying that the three 8bit-wide registers A, X, and Y are located on the NES's 2A03 processing chip. There is the simplest way I can fully explain a register.  Perhaps someone else can help you more. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />I thought 2A03 is primary used for default sound and audio creations engine inside NES.<br /><br />So it's just an on and off switch like 0s and 1s? What is the differences or limitations compare to other engine like PS2 or PC or C#?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Jun 24, 2018 10:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think you current issue right now is that before getting into understanding the nes you will need first to understand what is the 6502 and how to use it with assembler.  Without that knowledge it will make it difficult to get to the interesting stuff, which is programming a game for the nes.<br /><br />I did a quick search regarding some basic tutorial about 6502 and this page seems quite interesting:<br /><br /><!-- m --><a class="postlink" href="http://skilldrick.github.io/easy6502/">http://skilldrick.github.io/easy6502/</a><!-- m --><br /><br />It is a tutorial that allows to test online some assembler and see the result with their simulated machine. The concept is interesting since you can see the results right away and don't need to worry about how to use any compilers, linkers, nes architecture etc and can just focus on studying the 6502. I think this page will help you get a step further to programming for the nes. Once you understand about registers (A is the accumulator, X/Y are the index) and basic addressing, the nerdy nights should be a lot easier to follow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jun 24, 2018 11:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, it can be hard to learn everything at once: 6502 assembly, the NES architecture, the iNES file format, game logic... If you're feeling overwhelmed, starting out with pure 6502 assembly like Banshaku suggested is a good alternative.<br /><br />When I first tried to learn 6502 assembly some 20 years ago I too was confused as hell... registers and status flags made no sense to my brain, which was only familiar with BASIC and Pascal. I was able to make a couple of NES demos with a bit of animation but it was a lot of trial and error, so I kinda gave up on that. It wasn't until I tried <a href="http://www.exifpro.com/utils.html" class="postlink">this 6502 simulator</a> that everything finally made sense to me. I tried all the instructions and watched how they affected the processor's status, and once I understood what all the instructions did, I was able to code a few subroutines that performed actual tasks, such as multiply 2 numbers and return the result. That way I got the hang of how to use those simple instructions to perform more complex tasks, and felt ready to learn more about the NES architecture and everything else.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Jun 25, 2018 4:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">JOE = 10 <br />ROB = 5 <br />JUMP = JOE + ROB<br />IF JOE == ROB <br />GOTO @NAME</div><br /><br />In Assembly, JOE, ROB, and JUMP could be RAM address, and @NAME is a label that the assembler will give a value to at assembly time. (Omitting some assembly directives to make it easier)<br /><br /><span style="color: #00BF00">LDA #10</span> ;load A with 10<br /><span style="color: #00BF00">STA JOE</span> ;store it to JOE<br /><span style="color: #00BF00">LDA #5</span> ;load A with 5<br /><span style="color: #00BF00">STA ROB</span> ;store it to ROB<br /><span style="color: #00BF00">LDA JOE</span> ;load A with JOE<br /><span style="color: #00BF00">CLC</span> ;clear the carry flag, for addition<br /><span style="color: #00BF00">ADC ROB</span> ;add ROB to A<br /><span style="color: #00BF00">STA JUMP</span> ;store the result to JUMP<br /><span style="color: #00BF00">LDA ROB</span> ;load A with ROB<br /><span style="color: #00BF00">CMP JOE</span> ;compare A with JOE<br /><span style="color: #00BF00">BEQ @NAME</span> ;branch to the label @NAME if equal

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Mon Jun 25, 2018 10:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yeah, it can be hard to learn everything at once: 6502 assembly, the NES architecture, the iNES file format, game logic... If you're feeling overwhelmed, starting out with pure 6502 assembly like Banshaku suggested is a good alternative.<br /><br />When I first tried to learn 6502 assembly some 20 years ago I too was confused as hell... registers and status flags made no sense to my brain, which was only familiar with BASIC and Pascal. I was able to make a couple of NES demos with a bit of animation but it was a lot of trial and error, so I kinda gave up on that. It wasn't until I tried <a href="http://www.exifpro.com/utils.html" class="postlink">this 6502 simulator</a> that everything finally made sense to me. I tried all the instructions and watched how they affected the processor's status, and once I understood what all the instructions did, I was able to code a few subroutines that performed actual tasks, such as multiply 2 numbers and return the result. That way I got the hang of how to use those simple instructions to perform more complex tasks, and felt ready to learn more about the NES architecture and everything else.</div><br /><br />I'll try the 6502 Simulator, do I put the .nes or the .asm in it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Mon Jun 25, 2018 10:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">JOE = 10 <br />ROB = 5 <br />JUMP = JOE + ROB<br />IF JOE == ROB <br />GOTO @NAME</div><br /><br />In Assembly, JOE, ROB, and JUMP could be RAM address, and @NAME is a label that the assembler will give a value to at assembly time. (Omitting some assembly directives to make it easier)<br /><br /><span style="color: #00BF00">LDA #10</span> ;load A with 10<br /><span style="color: #00BF00">STA JOE</span> ;store it to JOE<br /><span style="color: #00BF00">LDA #5</span> ;load A with 5<br /><span style="color: #00BF00">STA ROB</span> ;store it to ROB<br /><span style="color: #00BF00">LDA JOE</span> ;load A with JOE<br /><span style="color: #00BF00">CLC</span> ;clear the carry flag, for addition<br /><span style="color: #00BF00">ADC ROB</span> ;add ROB to A<br /><span style="color: #00BF00">STA JUMP</span> ;store the result to JUMP<br /><span style="color: #00BF00">LDA ROB</span> ;load A with ROB<br /><span style="color: #00BF00">CMP JOE</span> ;compare A with JOE<br /><span style="color: #00BF00">BEQ @NAME</span> ;branch to the label @NAME if equal</div><br /><br />I'm starting to get it little.<br /><br />So it would be &quot;store #10 to JOE, confirming it into variable like JOE = 10&quot;?<br /><br />What about X and Y? So the A X and Y is like &quot;three same variables, only purpose is to keep organized in human mentalities on which one is more important than others or certain things&quot;???<br /><br />My thoughts:<br /><br />DIM ROOM<br /><br />BED = 100<br />LAMP = 10<br /><br />END ROOM <br /><br />'===<br /><br />DIM MAN<br /><br />TIRE = 0<br />STR = 0<br />LVLSTR = STR + 1<br />HEALTH = 20<br /><br />IF HEALTH == TIRE <br />GOTO @GAMEOVER<br /><br /><strong>==================</strong><br /><br />.[[dim?]] $0001<br />ROOM:<br /><br />LDA #100 ; Meaning? : Load as in &quot;put&quot; # 100 into variable / register A<br />STA BED ; Store the variable / Register A, which is stated as # 100 [like A = 100] into BED, which now turns into &quot; BED = 100 &quot; but in style of #100 <br /><br />LDA #10 ; in style of &quot; A = 10 &quot;<br />STA LAMP ; in style of &quot;LAMP = 10&quot;<br /><br />ENA ROOM ;  [End ROOM?????]<br /><br />[[org. /dim.???]] $0002<br /><br />MAN: <br /><br />LDX #0 <br />LDY #0 <br /><br />STX TIRE<br />STY STR<br /><br />INC STR ; [[ INC X??? ]]<br /><br />[[I'm a little fuzzed afterward about IF THEN part.]]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jun 25, 2018 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">I'll try the 6502 Simulator, do I put the .nes or the .asm in it?</div><br />NES code won't work, because this emulates just the 6502 (and a rudimentary I/O system). It can load ASM files, but since each assembler is different, code written for other assemblers won't work on it without modifications. It has an integrated editor, so you'd normally type code in the program itself rather than in a separate text editor.<br /><br />Banshaku's suggestion is probably a better place to start if you want an accompanying tutorial.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Jun 25, 2018 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">Thanks for PDF! <br /><br />But this is what I don't understand.<br /><br />Is it a separate engine, like the Address? Or is it a form of abilities like RAM or DATA styles?<br /><br />Like how does the register of A X Y [and P Z ] works? Or they work as a special form of variables like, a temporary placement of &quot; A = X + Y&quot; until the new replacement happens like &quot;STA&quot; or &quot;LDA&quot;? <br />I don't like to say this much, but can you explain like if I'm in Elementary School to help me understand about register?  [It's very owned variables, like no other regular variables can use?]<br /><br />Or it's like a &quot;magic effects&quot; but in programming, like the A represent the stages of Mario Bros. your in, X represent your health, and Y represent your Mario life?</div>I'm sorry I can't explain registers to you in elementary school logic because I didn't learn about registers until college.  But, I can try. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />The processing chip that the NES uses is called the 2A03.  The 2A03 is a special type of the 6502 processing chip.  (For instance, it doesn't have the b flag in its status register and its d flag is pointless too, but those aren't important now.)  The three 6502 registers I'm attempting to explain are A, X, and Y.  Each of the registers are created with 8 bits.  Every bit comes from a transistor.  If a bit's transistor holds an electrical charge, the bit is set and that translates into a 1.  Otherwise, the bit's transistor lacks an electrical charge then the bit is clear and so we have a 0.  Ever hear of computers being all 1s and 0s? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />   The numeral system Binary is an easy, but lengthy way, of telling the NES's 2A03's A register what to hold.  If your program tells the NES: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #%00000001</tt> that will set bit0 of register A and clear register A's bits 1 through 7. <br />Bits in a register are named <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">| bit7 | bit6 | bit5 | bit4 | bit3 | bit2 | bit1| bit0 |</tt>.  Yes, that's right to left, but use it enough an you'll get used to it. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  There are two other ways of describing the value, you want loaded into register A, to the assembler:  Hexidecimal and Decimal.<br /><br />Before you click on this link read the paragraph sections above carefully. <a href="https://betterexplained.com/articles/numbers-and-bases/" class="postlink">https://betterexplained.com/articles/numbers-and-bases/</a><br /><br />Now I will close by saying that the three 8bit-wide registers A, X, and Y are located on the NES's 2A03 processing chip. There is the simplest way I can fully explain a register.  Perhaps someone else can help you more. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />I thought 2A03 is primary used for default sound and audio creations engine inside NES.</div>The 2A03 does include an APU (Audio Processing Unit) for default sound and audio creations, but the 2A03's meat and potatoes is its 6502 processing architecture.<br /><br /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">So it's just an on and off switch like 0s and 1s?</div>Yes, registers on the NES are just groups of 8 &quot;on and off&quot; switches.  <br /><br /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">What is the differences or limitations compare to other engine like PS2 or PC or C#?</div>I've never programmed on the PS2, but every computer (i.e. PS2 or PC) has at least one processing chip that contains a number of registers.  After you write a program in BASIC you have to &quot;compile&quot; it in order to run your program.  A compiler takes your programming code (i.e. BASIC code) and translates it into assembly language <span style="color: #BF80FF">that's able to run on the processing chip(s) that your compiler is working with</span> and then into 1s and 0s so that it can be run on whatever computer-type-machine you compile it on.  Some of those 1s and 0s are fed into registers that are within whatever processing chip(s) your computer-type-machine uses. C# is a programming language that needs to be translated by a compiler.<br /><br />The NES is different, for me, because I try to write code for the NES using assembly language.  Assembly language is already assembly language; it doesn't need to be translated by a compiler.  Assembly language does, however, need to be assembled into 1s and 0s by an assembler.  But, assembling is much more precise than compiling because:<br />1.) a compiler <em>translates</em> programming code (i.e. BASIC code) into assembly language<br />2.) and assembly language gets to skip the inefficient compiler translation process entirely.<br /><br />Hope that helps you understand how the 2A03 compares with &quot;PS2 or PC or C#&quot;. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><br /><span style="color: #BF80FF">edit.</span><br /><br />edit2: fixed all of my mispellings of machine (was &quot;machiene&quot;, sorry  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> )<br /><br />final edit: You asked for elementary school teaching so here is a translation of:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2.) and assembly language gets to skip the inefficient compiler translation process entirely.</div>Using a compiler to translate programming code (i.e. programming languages such as BASIC or C or C++ or C#) *can* create a much slower and larger program than if you spent the time needed to understand and make wise use of the assembly language that runs on the processing chip(s) in the machine you are trying to program for.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I just read that some compilers try to focus on things like speed or for the generated program being useable on many different kinds of machines.  Compilers create 1s and 0s based on what they are focusing on.  I don't know anything about using compilers to create NES games, I'm sorry. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Mon Jun 25, 2018 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So judging by what I wrote, did it look alright by using A X Y register examples? Or I did the wrong way of examples of A X Y Register?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Jun 25, 2018 5:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">TIRE = 0<br />STR = 0<br />...<br />LDX #0 <br />LDY #0 <br /><br />STX TIRE<br />STY STR<br /><br />INC STR ; [[ INC X??? ]]<br /></div><br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldx #0</tt> means load a value of 0 into the X index register.  Same goes for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldy #0</tt> but into the Y index register.<br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stx TIRE</tt> means store (write) the current X index register value into the memory location represented by <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE</tt>.  If <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE</tt> was declared as being equivalent to memory location $1234, then this would become <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stx $1234</tt> (in English: write value 0 to memory location $1234).<br /><br />But in your code, you've said <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE = 0</tt>, which essentially means <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE = $00</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE = $0000</tt> (there's of a difference between these two, sort of, but don't worry about that right now), so in this case the result would be <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stx 0</tt>, which is the same as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stx $00</tt> (in English: write value 0 to memory location $0000).<br /><br />Same situation for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sty STR</tt> but with the Y index register, etc..<br /><br />Then, in the same code, you also say <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STR = 0</tt>.  So now literally <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STR</tt> both refer to memory location 0.  This is probably not what you want (see below).<br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">inc STR</tt> increments the value at memory location <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STR</tt> by 1.  So this is the same as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">inc $00</tt> basically.  Under the hood, the CPU does the equivalent of &quot;read value from memory location $00, increment it by one, write it back to memory location $00&quot; (but without using a register).  You could do the exact same yourself in code by doing something like: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda STR</tt> <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">clc</tt> <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">adc #1</tt> <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sta STR</tt>.<br /><br />I believe when you wrote <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE = 0</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STR = 0</tt>, you were thinking &quot;how can I pre-assign a value of a variable&quot;, because that's what other programming languages let you do -- they hide what goes on under the hood, instructions that are generated internally by the compiler or interpreter.  In assembly language, these are called <span style="text-decoration: underline"><strong>EQU</strong>ates</span>, which is why you can say something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE = 0</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TIRE EQU 0</tt> -- they mean the same thing.  Equates are only expanded at <span style="text-decoration: underline">assemble time</span>, not at run-time.  Understanding the difference is important!<br /><br />Equates can be used in many different ways, not just as &quot;memory locations&quot;.  They can be used as literal values, or even pre-calculated values.  I'll give an example below.<br /><br />It just so happens that on the NES, memory location $00 happens to be RAM (in fact, it's something called zero page, but that's still advanced so ignore that for now).  <a href="https://wiki.nesdev.com/w/index.php/CPU_memory_map" class="postlink">RAM on the NES</a> ranges from memory locations $0000 to $07FF (so that's 2KBytes).<br /><br />If you wanted to give all of your variables their own unique memory locations, you'd do something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">TIRE&nbsp; = $00&nbsp; &nbsp; ; Memory location $00<br />STR&nbsp; &nbsp;= $01&nbsp; &nbsp; ; Memory location $01<br />MAN&nbsp; &nbsp;= $02&nbsp; &nbsp; ; Memory location $02<br />SNAKE = MAN+1&nbsp; ; Memory location $03<br /><br />; Initialise all the above variables to 0<br />lda #0<br />sta TIRE<br />sta STR<br />sta MAN<br />sta SNAKE<br /><br />; Increment MAN by 1 (MAN now contains value 1)<br />inc MAN<br /><br />; Load the literal address of SNAKE into the accumulator, i.e. lda #$03<br />lda #SNAKE<br /></div><br /><br />The last line will probably confuse you.  Note the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">#</tt> (hash mark).  It indicates what's called an &quot;immediate value&quot; (a.k.a. literal value).  This is how you tell the assembler what kind of access method to use, a.k.a. addressing mode.  Here's a better way to demonstrate it with regards to what I said.  Note the difference between the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda</tt> lines:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MYVAR = $1e<br /><br />lda MYVAR&nbsp; &nbsp;; Load the contents of memory location $1E into the accumulator (i.e. A = whatever memory location $1e contains)<br />lda #MYVAR&nbsp; ; Load literal value $1e into the accumulator (i.e. A = $1e)<br /></div><br />These literally become the following lines:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda $1e<br />lda #$1e<br /></div><br />...and as such, the assembler assembles these into two completely different results: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda $1e</tt> assembles into bytes <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">a5 1e</tt>, while <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$1e</tt> assembles into bytes <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">a9 1e</tt>.  See the difference?  The instructions are identical (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda</tt>), but the opcodes (due to addressing modes) differ.  The former addressing mode is called &quot;zero page addressing&quot;, while the latter is called &quot;immediate addressing&quot;.  That's how the CPU knows what to do with each subsequent byte (operand).<br /><br />That's probably enough for one day.  Real-time comparisons are a whole other subject (e.g. trying to do <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">if HEALTH == TIRE</tt>, but in 6502).  I think understanding the above is more important, as well as understanding addressing modes (there are several, and many limitations! Some instructions can only use certain addressing modes or certain registers, for example).<br /><br />Edit: lots of them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Jun 25, 2018 5:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />^<div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">I'm starting to get it little.<br /><br />So it would be &quot;store #10 to JOE, confirming it into variable like JOE = 10&quot;?</div>Yes. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">My thoughts:<br /><br />DIM ROOM<br /><br />BED = 100<br />LAMP = 10<br /><br />END ROOM <br /><br />'===<br /><br />DIM MAN<br /><br />TIRE = 0<br />STR = 0<br />LVLSTR = STR + 1<br />HEALTH = 20<br /><br />IF HEALTH == TIRE <br />GOTO @GAMEOVER<br /><br /><strong>==================</strong><br /><br />.[[dim?]] $0001<br />ROOM:<br /><br />LDA #100 ; Meaning? : Load as in &quot;put&quot; # 100 into variable / register A<br />STA BED ; Store the variable / Register A, which is stated as # 100 [like A = 100] into BED, which now turns into &quot; BED = 100 &quot; but in style of #100 <br /><br />LDA #10 ; in style of &quot; A = 10 &quot;<br />STA LAMP ; in style of &quot;LAMP = 10&quot;<br /><br />ENA ROOM ;  [End ROOM?????]</div><div class="codetitle"><b>Code:</b></div><div class="codecontent">;I haven't a clue what &quot;DIM&quot; is... but here is what I think you want (in asm6 format)<br /><br />; iNES header<br />.byte &quot;NES&quot;, $1a<br /><br />; Number of PRG-ROM blocks<br />.byte $02 ;2 16kb blocks (32kb from $8000 to $FFFF)<br /><br />; Number of CHR-ROM blocks<br />.byte $01 ;1 8kb space for character graphics (when using Mapper #00)<br /><br />; ROM control bytes: Vertical mirroring, no PRG-RAM, no trainer, Mapper #00<br />.byte %00000001, $00<br /><br />; Filler<br />.byte $00, $00, $00, $00, $00, $00, $00, $00<br /><br />.enum $0000 ;declare names for variables starting at beginning of the zeropage (location $0000)<br />BED .dsb 1 ;BED is now at location $0000<br />LAMP .dsb 1 ;LAMP is now at location $0001<br />.ende ;ends this variable declaration section<br /><br />.org $C000 ;start code following at location $C000<br />reset: ;code that runs when the power button is pressed (or when the game is loaded) and each time your game is reset<br />sei ;sets interrupt flag<br />cld ;clears decimal flag because decimal mode on the NES is pointless (a feature of the 2A03)<br />; Wait two VBLANKS.<br />- bit $2002<br />&nbsp; bpl -<br /><br />; Clear out RAM.<br />&nbsp; lda $00<br />&nbsp; ldy $00<br />- sty $000, y<br />&nbsp; sty $100, y<br />&nbsp; ;usually, RAM page 2 is used for the display list to be copied to OAM.&nbsp; OAM needs to be initialized to $EF-$FF, not 0, or you'll get a bunch of garbage sprites at (0, 0).<br />&nbsp; sta $300, y<br />&nbsp; sta $400, y<br />&nbsp; sta $500, y<br />&nbsp; sta $600, y<br />&nbsp; sta $700, y<br />&nbsp; iny<br />&nbsp; bne -<br /><br />- bit $2002<br />&nbsp; bpl -<br /><br />rti ;end reset<br /><br /><br />MainLoop:<br />jsr ROOM<br />jmp MainLoop<br /><br />ROOM:<br />lda #100 ;yes, this loads the A register with #100 (A = #100)<br />sta BED ;$0000 = #100<br /><br />lda #10<br />sta LAMP ; $0001 = #10<br /><br />rts ;ends function ROOM<br /><br />vblank:<br />rti ;ends vblank<br /><br />nmi:<br />rti ;ends nmi<br /><br /><br />.pad $FFFA ; &lt;will fill all the ROM from the byte (a byte is 8 bits of info) after NMI's rti up to $FFFA with 00s.<br />.word vblank, reset, irq ;these 3 words (a word is 16 bits of info) will close your program and cause the NES to know where to find your vblank, reset, and nmi code.<br /><br />; CHR-ROM<br />.include &quot;your4kb_backgroundFile.chr&quot;<br />.include &quot;your4kb_spritesFile.chr&quot;</div>This program will just constantly <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsr ROOM</tt> over and over.  <span style="font-size: 85%; line-height: normal">Could be made faster if you copied the contents of ROOM (everything between <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ROOM:</tt> and its <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rts</tt> and pasted them in place of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsr ROOM</tt> because jsr and rts each take 6 cycles and are pointtless because your NES file is really empty right now.</span><br />When you have more experience:<br />1.) look at <a href="http://wiki.nesdev.com/w/index.php/INES" class="postlink">http://wiki.nesdev.com/w/index.php/INES</a> to read more about the iNES header at the top<br />2.) look at <a href="http://wiki.nesdev.com/w/index.php/Mapper" class="postlink">http://wiki.nesdev.com/w/index.php/Mapper</a> to maybe choose a different mapper; you are using mapper 000 <a href="http://wiki.nesdev.com/w/index.php?title=INES_Mapper_000" class="postlink">http://wiki.nesdev.com/w/index.php?title=INES_Mapper_000</a><br /><br />I don't have time to use your second part but for the most part it looked ok to me. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Hope this helps your NES journey. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Jun 26, 2018 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />^Notes about code in my previous post: <br />1.) It's untested. <br />2.) The two chr files .incbin'ed at the end are pointless, right now, because that section of code doesn't have functions that draws the background and that draws the sprites.  Just put them there so you would know where to place them when you get around to needing them. <br />3.) I don't think the Simulator that tokumaru recommends allows .include or .incbin so just comment those lines.  Comments usually start with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">;</tt> and the rest of the line following a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">;</tt> isn't assembled.  If you comment the two .incbin lines maybe you could add <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.pad $12000</tt>, to the end, to fill that 8kb ($10000 to $12000) with 0s.  That may help the Simulator, I don't know.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />  When using the Simulator you should also probably replace the &quot;nameless&quot; <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-</tt> lables, those only work with asm6, I think.<br />4.) That code is written in asm6 format.<br />5.) You could try running that code, after assembling into a .nes file with asm6, in the Mesen emulator and click Options&gt;Preferences then click the box at the bottom next to &quot;Enable developer mode&quot;.  After doing that, click Debug&gt;&quot;Memory Tools&quot; and then, in the window that opens, the upper left corner should constantly be red because byte $0000 and byte $0001 are constantly being written to.  The latest Mesen can be found here: <a href="https://ci.appveyor.com/project/Sour/mesen/build/artifacts" class="postlink">https://ci.appveyor.com/project/Sour/mesen/build/artifacts</a>. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  <br /><br />Sour's Mesen thread: <a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=13844" class="postlink">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=13844</a><br /><br />edit: about #3, just commenting those .incbin lines should be enough.  When you get around to using them add labels before each file and then you can implement Sprite DMA.  But, don't worry about that now.  Sprite DMA isn't being used and so just commenting those two .incbin lines should work excellently and you don't need the .pad $12000, I think. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />edit2: Those two .include should be .incbin because chr files are binary files<span style="color: #FF00BF">, not text files </span>.  Sorry, I made some mistakes<span style="color: #FF00BF"> while trying to help you</span>.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><br /><br /><span style="color: #FF00BF">final edit.</span> <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>