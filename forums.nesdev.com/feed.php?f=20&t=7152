<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=20&amp;t=7152" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-11-13T12:31:09-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=20&amp;t=7152</id>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-11-13T12:31:09-07:00</updated>
<published>2010-11-13T12:31:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7152&amp;p=69963#p69963</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7152&amp;p=69963#p69963"/>
<title type="html"><![CDATA[Interrupt acknowledgement and timings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7152&amp;p=69963#p69963"><![CDATA[
The source to Gambatte probably has it correct. I would guess that interrupts are handled before the next Opcode is fetched. Then as you say, some cycles are used to push the PC onto the stack and then fetch the vector from the interrupt table to load into the PC. But I can't tell you the exact timing. Gambatte's source should. It's supposed to be a GB emulator aimed at very high hardware accuracy. Ofcourse most software probably isn't going to rely on super precise timing. You have to have your timing EXTREMELY bad to cause problems with most games. I did this in my GB emulator at first where I didn't have CPU Cycles/Master Cycles/PPU Cycles figured out. So basically games had something like 1/3rd of expected CPU time and would crash and do all sorts of things that drove me crazy till I realized it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Sat Nov 13, 2010 12:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ejelly]]></name></author>
<updated>2010-11-13T03:34:36-07:00</updated>
<published>2010-11-13T03:34:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7152&amp;p=69955#p69955</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7152&amp;p=69955#p69955"/>
<title type="html"><![CDATA[Interrupt acknowledgement and timings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7152&amp;p=69955#p69955"><![CDATA[
Hi,<br /><br />I'm not sure how the Gameboy CPU handles interrupts exactly yet. Two questions:<br /><br />How many cycles are needed to handle an interrupt? What I mean is, when an interrupt occurs, how many cycles pass between completion of the last instruction and fetching of the interrupt handler's first opcode?<br /><br />Some emulator code suggests that this happens immediately, but that seems highly unlikely. The CPU needs to at least push the return address on the stack, which is one memory access minimum.<br /><br />The second question is more subtle: Some documentation says "interrupts are acknowledged during the opcode fetch phase". Does that mean that<br /><ol style="list-style-type: lower-alpha"><li>the CPU checks for interrupts <em>before</em> it would fetch the next opcode, and if an interrupt occurred, it injects the call to the interrupt instead, or</li><li>the CPU <em>already fetched</em> the next instruction (i.e. has performed the read from memory) but discards the opcode, and injects the call to the interrupt?</li></ol><br />I have seen emulators handling interrupts after emulating the last instruction. If done right, this should be functionally equivalent to a). It's also cleaner, so I tend to lean towards a), but emulators are seldom perfect (as seen above).<br /><br />Thanks a lot!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4622">ejelly</a> — Sat Nov 13, 2010 3:34 am</p><hr />
]]></content>
</entry>
</feed>