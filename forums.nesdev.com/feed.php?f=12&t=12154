<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=12154" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-12-25T10:41:59-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=12154</id>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-12-25T10:41:59-07:00</updated>
<published>2014-12-25T10:41:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138031#p138031</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138031#p138031"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138031#p138031"><![CDATA[
I'll might as well post the color palette on here and the RGB triplets, when I get to it.  I'm currently working on animating more moves for the player character, which is a priority for me.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Thu Dec 25, 2014 10:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-12-24T07:55:41-07:00</updated>
<published>2014-12-24T07:55:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138009#p138009</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138009#p138009"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138009#p138009"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />You could implement an assembler's mnemonics with a macro system<br /></div><br />Which <a href="http://forums.nesdev.com/viewtopic.php?p=121690#p121690" class="postlink">blargg actually did for the SPC700</a>. Add Z80, GBZ80, and 68000 and I'll be set <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Dec 24, 2014 7:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-12-24T02:21:39-07:00</updated>
<published>2014-12-24T02:21:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138001#p138001</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138001#p138001"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=138001#p138001"><![CDATA[
The origin of the term macro comes from assemblers. Specifically it referred to a way to make multiple output instructions from a single statement. A &quot;macro instruction&quot;. It later came to apply to a lot more things (macros for a word processor, C preprocessor macros, etc.) where it is just more generally a substitution.<br /><br />You could implement an assembler's mnemonics with a macro system, but I don't think it's particularly useful to think of single instruction mnemonics as macros. To be a macro it has to be something that you can define yourself; the instruction mnemonics are pre-defined, a core language feature. They're not substituting something large for something small, they're a 1:1 unit.<br /><br />The thing is, though, when it comes to computer languages terms like this are generally very well defined. They have to be; it's necessary to have a rigorous specification to make a compiler/assembler. In C, the macro is a text substitution; it's not an expression (though it can produce one), and it's not a function. The definitions it uses aren't loose at all; they are formal and explicit.<br /><br />All three of your example macros unambiguously produce &quot;expressions&quot;. I'm not sure what is different between them in that way. The C language also has a specific definition of what a function is, and a macro isn't one, in itself, though a macro can define a function, of course (and the definition of a function is also an expression, by the way!). If you want to step outside the C language's definition, sure you can call it a &quot;function&quot; in the general sense of something that operates on an input to produce an output, but I don't really see the use of talking about it this way (just like I don't see the use in calling a built-in mnemonic a macro).<br /><br />For example, look at the &quot;inline&quot; language feature. Part of the reason this exists is to discourage people from using macros to create pseudo inline functions, because of all the problems inherent in this approach. There is good reason to use the terms as they are defined. C++11 even added the &quot;constexpr&quot; feature to make compile-time calculations explicit where it is needed, instead of an optional optimization of inline functions.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define MUL(a,b) (a*b)<br />int x = MUL(1+2,3+4); // x = 1+(2*3)+4<br /><br />constexpr int mul(int a, int b) { return a*b; }<br />int z = mul(1+2,3+4); // z = (1+2)*(3+4)</div><br /><br />Obviously you can define MUL as ((a)*(b)) to get around this specific case, but the point I'm trying to get across is that macros behave differently, and it's useful to talk about them with the correct terminology so that you don't make this kind of mistake. Calling a macro a &quot;function&quot; would seem to obfuscate this difference. Often times the reason you would want to use a macro is because it can do things that a function can't. The fact that macros can produce things other than expressions is a part of this! The example of &quot;.define EQU =&quot; already mentioned should adequately demonstrate this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Wed Dec 24, 2014 2:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-12-23T19:12:24-07:00</updated>
<published>2014-12-23T19:12:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137983#p137983</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137983#p137983"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137983#p137983"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />but if its &quot;define&quot; can only produce expressions, then maybe the the terminology it chooses is deliberate and appropriate?<br /></div><br />It would seem so.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The very first example in the ca65 documentation is: &quot;.define EQU =&quot;. The fragment of code &quot;=&quot; is not an expression either.<br /></div><br />Ahh, I see. It definitely states &quot;C style macro&quot; as well. I think this is the point of contention. &quot;define&quot; is <em>all three</em> in C:<br /><br />(expression. or rather <em>function </em>since it's actually gonna be applied to something. It's an expression by definition, it's a function by application)<br />#define CURSOR(top, bottom) (((top) &lt;&lt; 8) | (bottom))<br /><br />(macro: actual processor code generation)<br />#define getrandom(min, max) \<br />    ((rand()%(int)(((max) + 1)-(min)))+ (min))<br /><br />(equate. self explanatory)<br />#define WIDTH       80<br />#define LENGTH      ( WIDTH + 10 )<br /><br />  I think C uses a very liberal/loose sense of the word <em>macro</em>, for the very reason being the differences between C and assembler. By that definition, all mnemonics used in an assembler are just macros. C use is most likely truer to the original definition of macro (for whatever that is), where as Assembly is much more limited in syntax and ops to tie down terms to specifics. CA65's maintainers seem to have a more C bias approach/view, than other assemblers back in the day? I don't have enough exposure to <em>all </em>those old assemblers to say for sure. Anyway, this all seems kind of pointless now. My original point was a call for clarity, but apparently clarity is specifically based on who wrote which assembler, or where you take your methodology from, etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Tue Dec 23, 2014 7:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-12-22T20:53:20-07:00</updated>
<published>2014-12-22T20:53:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137959#p137959</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137959#p137959"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137959#p137959"><![CDATA[
Well, in C, the term &quot;expression&quot; is well defined. C macros are not in themselves expressions, though the resulting output may form an expression. i.e. expressions are a <em>subset</em> of things that a macro can output.<br /><br />This is also true in ca65, even though its macros are not text replacement (i think it's more like &quot;token replacement&quot;, internally). For instance, a label is <em>not</em> an expression, but you can create them with ca65 macros. The very first example in the ca65 documentation is: &quot;.define EQU =&quot;. The fragment of code &quot;=&quot; is not an expression either.<br /><br />I'm not familiar with PCEAS, but if its &quot;define&quot; can only produce expressions, then maybe the the terminology it chooses is deliberate and appropriate?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Dec 22, 2014 8:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-12-22T18:39:49-07:00</updated>
<published>2014-12-22T18:39:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137956#p137956</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137956#p137956"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137956#p137956"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />No, it's a very standard use of the word macro. <strong>The original use</strong> of macro in computer software is to replace some small (micro) input with something large (macro). In the case of an assembler or C, it's replacing a small name with a larger piece of code.<br /></div><br /><br /> Then maybe I'm old school? I dunno. I've specifically used macros to replace code or structured data defines, but that's clearly neither; it's just an expression. I use user-defined expressions in much the same manner as macros; to replace something larger with something more compact (usually for readability), but the expression itself doesn't contain code or data. It only contains the method of how it (data only) should be interpreted. Maybe that's getting down to semantics, but that seems a big of enough difference IMO - to warrant a different description/name/whatever. Maybe the difference here is Assembly vs higher level languages? I would say macros are a huge part of assembly language compared to other higher level languages. Then again, I don't have a lot of exposure to C/C++ and other higher level language culture/scene, to really form a judgement on that side. But the work that I have done, 'defines' are nothing more than a label replacement for anything else in the compiler and real macros are nothing more than <em>in-lining</em> an otherwise defined function. <br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />ca65 is a little bit of an oddball in that it has two separate directives, .macro and .define, but they are both macros by the definition I'm familiar with, and also are both called macros in the documentation of ca65. It's a little different than the C macros they're modelled after, since it's not really a preprocessor text substitution in ca65.<br /></div><br /><br />PCEAS has this too, and is not defined as a macro, but defined as exactly what it is; user defined expression. It makes a clear distinction between the two. Edit: I just looked at PCEAS and they call it a <em>user defined function</em>: &quot;same calculation <em>[used]</em> again and again in expressions&quot;. Not function is the C sense of the meaning. <em>Label .func((\1) &lt;&lt; 12) | ((\2) &gt;&gt; 4)</em><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Mon Dec 22, 2014 6:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-12-21T22:39:30-07:00</updated>
<published>2014-12-21T22:39:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137931#p137931</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137931#p137931"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137931#p137931"><![CDATA[
No, it's a very standard use of the word macro. The original use of macro in computer software is to replace some small (micro) input with something large (macro). In the case of an assembler or C, it's replacing a small name with a larger piece of code.<br /><br />ca65 is a little bit of an oddball in that it has two separate directives, .macro and .define, but they are both macros by the definition I'm familiar with, and also are both called macros in the documentation of ca65. It's a little different than the C macros they're modelled after, since it's not really a preprocessor text substitution in ca65.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Dec 21, 2014 10:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-12-21T21:25:32-07:00</updated>
<published>2014-12-21T21:25:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137928#p137928</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137928#p137928"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137928#p137928"><![CDATA[
Calling that a macro, seems like a misnomer. Heh.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Sun Dec 21, 2014 9:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-12-21T15:57:12-07:00</updated>
<published>2014-12-21T15:57:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137912#p137912</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137912#p137912"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137912#p137912"><![CDATA[
From <a href="http://cc65.github.io/doc/ca65.html#ss12.7" class="postlink">ca65 Users Guide: C style macros</a>: &quot;Starting with version 2.5 of the assembler, there is a second macro type available: C style macros using the .DEFINE directive.&quot;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 21, 2014 3:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-12-21T13:37:13-07:00</updated>
<published>2014-12-21T13:37:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137908#p137908</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137908#p137908"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137908#p137908"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Or just make <strong>macros</strong>. For Super NES and Game Boy Advance, it might look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.define RGB(r,g,b) ((r) | ((g) &lt;&lt; 5) | ((b) &lt;&lt; 10))</div><br /></div><br />Wouldn't that be a user defined ''expression' rather than a <em>macro</em>?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Sun Dec 21, 2014 1:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-12-21T11:04:19-07:00</updated>
<published>2014-12-21T11:04:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137904#p137904</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137904#p137904"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137904#p137904"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Or even better, convert it from from another more friendly colourspace, either with macros or run-time computing, depending on your needs. Persoally I find the RGB colourspace the less intuitive to work with.<br /></div><br /><br />I could also create a handpicked palette like Retro City Rampage, Shovel Knight, and Arne's stuff, for my future SNES projects.  I can take the colors I have so far, merge colors that are almost indistinguishable, and recycle colors whenever possible.  If I need a color I don't have, I can make a new one.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sun Dec 21, 2014 11:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2014-12-20T15:22:27-07:00</updated>
<published>2014-12-20T15:22:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137861#p137861</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137861#p137861"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137861#p137861"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />For Genesis, the macro becomes<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define RGB(r,g,b) (((r) &lt;&lt; 1) | ((g) &lt;&lt; 5) | ((b) &lt;&lt; 9))</div><br /></div><br />In this case don't even bother though, write the vaule as hexadecimal and each digit is one of the BGR components (only even numbers are usable, but yeah), so for example orange is 0x08E, or turquoise is 0xAA0, or magenta is 0xE0E, etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Sat Dec 20, 2014 3:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-12-20T14:02:05-07:00</updated>
<published>2014-12-20T14:02:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137856#p137856</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137856#p137856"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137856#p137856"><![CDATA[
Or even better, convert it from from another more friendly colourspace, either with macros or run-time computing, depending on your needs. Persoally I find the RGB colourspace the less intuitive to work with.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Dec 20, 2014 2:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-12-20T13:56:12-07:00</updated>
<published>2014-12-20T13:56:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137855#p137855</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137855#p137855"/>
<title type="html"><![CDATA[Re: storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137855#p137855"><![CDATA[
Or just make macros. For Super NES and Game Boy Advance, it might look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.define RGB(r,g,b) ((r) | ((g) &lt;&lt; 5) | ((b) &lt;&lt; 10))</div><br /><br />As used in <a href="http://forums.nesdev.com/viewtopic.php?p=134144#p134144" class="postlink">this sample project</a>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette:<br />  .word RGB(15,23,31),RGB(12,12, 0),RGB(14,23, 0),RGB(16,31, 0)<br />  .word RGB( 0, 0,15),RGB(15,15, 0),RGB(23,23, 8),RGB(31,31,16)<br />palette_size = * - palette<br /><br />objpalette:<br />  .word               RGB(16, 8, 0),RGB( 6, 6, 6),RGB(12,12,12)<br />  .word RGB(18,18,18),RGB(23,23,23),RGB(16, 0, 0),RGB(24, 0, 0)<br />  .word RGB(20,16,14),RGB(31,22,20),RGB(21, 0, 0),RGB(31, 0, 0)<br />  .word RGB( 0, 0,15),RGB( 0, 0, 3),RGB(21, 0, 0),RGB(31, 0, 0)<br />objpalette_size = * - objpalette<br /></div><br /><br />For Genesis, the macro becomes<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define RGB(r,g,b) (((r) &lt;&lt; 1) | ((g) &lt;&lt; 5) | ((b) &lt;&lt; 9))</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Dec 20, 2014 1:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-12-20T13:38:47-07:00</updated>
<published>2014-12-20T13:38:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137854#p137854</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137854#p137854"/>
<title type="html"><![CDATA[storing colors as RGB triplets]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12154&amp;p=137854#p137854"><![CDATA[
It gets tiring having to pull out a calculator everytime you need to edit the color palette for your game, so I thought of a way of making palette editing easier.<br /><br />Store each color as 3 bytes.  One for each primary.  While it's loading the palette into cram, have the CPU shift the RGB triplets into 0bbbbbgggggrrrrr format.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sat Dec 20, 2014 1:38 pm</p><hr />
]]></content>
</entry>
</feed>