<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Programing 65xxx processors in C</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Programing 65xxx processors in C</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8867">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8867</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri May 04, 2012 11:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Programing 65xxx processors in C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am making this thread in an effort to avoid highacking pichichi010's.
<br />
<br /><div class="quotetitle">mic wrote:</div><div class="quotecontent">Stack access is not such a large problem. I'd say the bigger problems are: <br /><br /> Lack of registers. <br /> Register width. <br /> Few addressing modes. <br /><br /> With that being said, it would certainly be possible to generate good 65xx code from C. It's just that the efforts to develop good compilers/optimizers tend to go into platforms that are used on a large scale, like x86 or ARM.</div><br /><br />You are completely right for the first 2.<br />However, the 6502 has a lot of adressing modes !<br /><br />Also, more registers can be simulated using zero page variables.<br />You can do most arithmetical operations directly with them - which many processors can't (they can only load/store to/from memory, and do operations on their registers).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">With that being said, it would certainly be possible to generate good 65xx code from C. It's just that the efforts to develop good compilers/optimizers tend to go into platforms that are used on a large scale, like x86 or ARM.</div>
<br />The more I think, the more I guess it would be a really good investment to have great C compilers.
<br />
<br />At my work I work with an "obscure" microcontroller by Texas Instruments, and I program it in C, I'm pretty sure the compiler is by TI too, and the debugger shows code both in C and in assembly (the output of the compiler).
<br />I am not familiar with the architecture of this microcontroller (nowhere like I'm familiar with the 6502), but I can tell the output is very clean, and extremely close to what I would have done if I wrote it in assembly.
<br />Most C code translate into ~2 lines or assembly or so.
<br />
<br />All this to say I think it's better to spend time to make great tools than to spend time to deal with complicated things because you're writing code in assembly.
<br />
<br />I think CC65 is open source so maybe if it's so bad we should all spend some time to improve it to make proper code - for all diferent kinds of 65xxx processors, and all the community would benefit from it.
<br />The other option - porting GCC to 65xxx processors should probably be envigased too but it sounds more complicated. Someone <a href="http://www.google.ch/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=5&amp;ved=0CHQQFjAE&amp;url=http%3A%2F%2Fforum.6502.org%2Fviewtopic.php%3Fp%3D7080&amp;ei=6SKkT_6fMO2O4gSvzamfCQ&amp;usg=AFQjCNH1oC3PPX7vgo5Loc9tvmnMmbnJ7A&amp;sig2=GdTxHF6flVh6YeTQkdogxQ" class="postlink">already did that</a> but the project somehow ended in an incomplete status.
<br />
<br />So yeah I am more and more thinking that it would be better to do complete games in C that uses unoptimized code than half-completed game engine that uses very optimized assembly code, but that no-one will ever play.
<br />
<br />That being said - I haven't ever programmed a single line of C for the NES, but I should look into it very soon - and also look at CC65's sources to see how expandable the compiler is.
<br />
<br />The success of the author of "Zooming Secretary" and "Alter Ego" where all of us failed for years to release a complete games definitely convinced me that I was going wront when writing 10k+ lines of assembly to build a game engine that could be done with only 1k of C lines - and it would be more portable to other platforms as a bonus.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Fri May 04, 2012 12:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">However, the 6502 has a lot of adressing modes ! </div><br />Not compared to many other processors. And it's very unorthogonal. <br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, more registers can be simulated using zero page variables. <br />You can do most arithmetical operations directly with them - which many processors can't (they can only load/store to/from memory, and do operations on their registers). </div>
<br />There are still many things for which you can only use the accumulator. Which also means that you often need to save and restore the result of a calculation of subexpressions.
<br />
<br />Here's a concrete example of what tcc-816 outputs:
<br />
<br />this
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void opt_test&#40;char *dst, char *src, unsigned int len&#41;<br />&#123;<br />&nbsp; &nbsp;while &#40;len &gt; 0&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;*dst++ = *src++;<br />&nbsp; &nbsp;&nbsp; &nbsp;len--;<br />&nbsp; &nbsp;&#125;<br />&#125;<br /></div><br /><br />turns into this<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">opt_test:<br />.ifgr __opt_test_locals 0<br />tsa<br />sec<br />sbc #__opt_test_locals<br />tas<br />.endif<br />__local_13:<br />lda 11 + __opt_test_locals + 1,s<br />sta.b tcc__r0<br />ldx #1<br />sec<br />sbc.w #0<br />tay<br />beq +<br />bcs ++<br />+ dex<br />++<br />stx.b tcc__r5<br />txa<br />bne +<br />brl __local_12<br />+<br />lda 5 + __opt_test_locals + 1,s<br />sta.b tcc__r0h<br />lda 3 + __opt_test_locals + 1,s<br />sta.b tcc__r0<br />sta.b tcc__r1<br />lda.b tcc__r0h<br />sta.b tcc__r1h<br />inc.b tcc__r0<br />lda.b tcc__r0<br />sta 3 + __opt_test_locals + 1,s<br />lda.b tcc__r0h<br />sta 5 + __opt_test_locals + 1,s<br />lda 9 + __opt_test_locals + 1,s<br />sta.b tcc__r0h<br />lda 7 + __opt_test_locals + 1,s<br />sta.b tcc__r0<br />sta.b tcc__r2<br />lda.b tcc__r0h<br />sta.b tcc__r2h<br />inc.b tcc__r0<br />lda.b tcc__r0<br />sta 7 + __opt_test_locals + 1,s<br />lda.b tcc__r0h<br />sta 9 + __opt_test_locals + 1,s<br />lda.w #0<br />sep #$20<br />lda.b &#91;tcc__r2&#93;<br />rep #$20<br />xba<br />xba<br />bpl +<br />ora.w #$ff00<br />+<br />sep #$20<br />sta.b &#91;tcc__r1&#93;<br />rep #$20<br />lda 11 + __opt_test_locals + 1,s<br />sta.b tcc__r0<br />sta.b tcc__r1<br />lda.b tcc__r0h<br />sta.b tcc__r1h<br />clc<br />lda.b tcc__r0<br />adc.w #65535<br />sta.b tcc__r0<br />sta 11 + __opt_test_locals + 1,s<br />jmp.w __local_13<br />__local_12:<br />.ifgr __opt_test_locals 0<br />tsa<br />clc<br />adc #__opt_test_locals<br />tas<br />.endif<br />rtl<br /></div>
<br />
<br />Note the overly-complex loop condition check (an LDA/BNE pair would've been sufficient since the variable is unsigned), the unnecessary re-creation of the indirect pointers at every iteration, the unnecessary sign-extension of the value read from *src, and the use of ADC instead of DEC to update the loop count.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri May 04, 2012 12:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh my god it seems this compiler is really terrible.
<br />
<br />Maybe it would have been better if "len" was "unsigned char" ?
<br />
<br />But even then, it compiling  this is not tolerable. I guess some kind of system which use zero page as much as possible instead of the stack is necessarily.
<br />
<br />I'm pretty sure ARMGCC does something similar, it uses R0-R3 whenever possible and uses the stack only when more registers would be needed.
<br />This should be applicable to 65xxx too, exept that zero page would be used instead of registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Fri May 04, 2012 12:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Oh my god it seems this compiler is really terrible.<br /></div>
<br />That's not cc65 though.  The thread was started with discussion about cc65 being "bad"?  How about we compare the two?  [I'm not at my laptop with cc65 on it at the moment so I can't quickly compile the same example and throw it up here.]
<br />
<br />Also, I have lots of counter examples to the claim that "most C lines compile to ~2 assembly instructions".  Just run AlterEgo in NESICIDE and look at the mixed-mode source/assembly display of game.c for any one of a number of single-line C statements, for loops, etc.  A for loop alone translates to about 12 assembly instructions if I recall.
<br />
<br />Having said all of that I'm not sure why any bashing of any C compiler is going on when it's obvious that people can create great games for NES with CC65.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri May 04, 2012 1:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Also, I have lots of counter examples to the claim that &quot;most C lines compile to ~2 assembly instructions&quot;. </div><br />I was talking about a 16-bit RISC microcontroller by TI, which is way younger than the 6502 and was probably designed to be programmed in C to start with.<br /><br />Also it all depends what is your coding style and if your "instruction line" is :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; i++;</div><br /><br />or <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; Struct-&gt;Element += &#40;u16*&#41;MyTable&#91;X&#91;a*5&#93;&gt;&gt;8 | j&#91;b*7&lt;&lt;8&#93;&#93;;</div>
<br />
<br />I have no doubt CC65 is a good compiler, in fact I plan to use it in the future.
<br />It's just that it can unfortunately not compile 65816, so it is suitable to write NES games, but not SNES games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri May 04, 2012 1:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As a user of both CC65 and TCC816, I would say that CC65 is much better made overall - produces seemingly more efficient code, has less bugs and problems (can't even recall anything serious). TCC816 has some pretty weird problems - like adding a single line comment sometimes could make code not compilable (it starts to think a local fuction is defined), or it reports wrong line number in an error sometimes. Luckily it does not produce broken code, at least I didn't have such problem yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Fri May 04, 2012 2:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The thread was started with discussion about cc65 being "bad"?</div><br />I thought it was started as a branch-out of a topic where the question came up about 65C816 C compilers and the quality of the code they generate.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> How about we compare the two? </div><br />Unfortunately you can't <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />  Unless CC65 can generate code for the 65C816 these days.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Having said all of that I'm not sure why any bashing of any C compiler is going on when it's obvious that people can create great games for NES with CC65.</div>
<br />The thread isn't about "you can't create good games with compiler X" <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />Pointing out flaws in a compiler isn't the same as saying the author made a poor effort when creating it. I've used tcc-816 a lot, and it's better than nothing. I had to write support tools for fixing the code it generates, but in the end I got code the works.
<br />I do think that there's value in pointing out problems though - as long as you state exactly what the problem is, and not just something like "it sucks!".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Fri May 04, 2012 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I guess some kind of system which use zero page as much as possible instead of the stack is necessarily. </div>
<br />Stack-relative operations are fairly cheap on the 65C816. Usually they only take one cycle more than zero page ops, so that's not a big issue. The real problem is the huge amount of unnecessary instructions generated by the compiler.
<br />
<br />Of course, since tcc-816 is open source, anyone is free to fix it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri May 04, 2012 2:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK so this is how CA65 compile mic's example :
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; ---------------------------------------------------------------<br />; void __near__ opt_test &#40;__near__ unsigned char*, __near__ unsigned char*, unsigned int&#41;<br />; ---------------------------------------------------------------<br /><br />.segment&nbsp; &nbsp;&quot;CODE&quot;<br /><br />.proc&nbsp; &nbsp;_opt_test: near<br /><br />.segment&nbsp; &nbsp;&quot;CODE&quot;<br /><br />;<br />; while &#40;len &gt; 0&#41; &#123; <br />;<br />&nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;L0020<br />;<br />; *dst++ = *src++; <br />;<br />L001E:&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$05<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;sp&#41;,y<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;sp&#41;,y<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;regsave<br />&nbsp; &nbsp;stx&nbsp; &nbsp; &nbsp;regsave+1<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#$01<br />&nbsp; &nbsp;bcc&nbsp; &nbsp; &nbsp;L0024<br />&nbsp; &nbsp;inx<br />L0024:&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$04<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;staxysp<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;regsave<br />&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;regsave+1<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;pushax<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$05<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;sp&#41;,y<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;sp&#41;,y<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;regsave<br />&nbsp; &nbsp;stx&nbsp; &nbsp; &nbsp;regsave+1<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#$01<br />&nbsp; &nbsp;bcc&nbsp; &nbsp; &nbsp;L0026<br />&nbsp; &nbsp;inx<br />L0026:&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$04<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;staxysp<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;regsave&#41;,y<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;staspidx<br />;<br />; len--; <br />;<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$01<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;sp&#41;,y<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;sp&#41;,y<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc&nbsp; &nbsp; &nbsp;#$01<br />&nbsp; &nbsp;bcs&nbsp; &nbsp; &nbsp;L0028<br />&nbsp; &nbsp;dex<br />L0028:&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;stax0sp<br />;<br />; while &#40;len &gt; 0&#41; &#123; <br />;<br />L0020:&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;sp&#41;,y<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;ora&nbsp; &nbsp; &nbsp;&#40;sp&#41;,y<br />&nbsp; &nbsp;bne&nbsp; &nbsp; &nbsp;L001E<br />;<br />; &#125;<br />;<br />&nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;incsp6<br /><br />.endproc<br /></div><br /><br />And now how ADC65-DEMO compiles the same example :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 321&nbsp; 827D&nbsp; &nbsp; &nbsp;08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;php<br />&nbsp; 322&nbsp; 827E&nbsp; &nbsp; &nbsp;78&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sei<br />&nbsp; 323&nbsp; 827F&nbsp; &nbsp; &nbsp;38&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sec<br />&nbsp; 324&nbsp; 8280&nbsp; &nbsp; &nbsp;A5 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__stack_ptr<br />&nbsp; 325&nbsp; 8282&nbsp; &nbsp; &nbsp;E9 04&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sbc&nbsp; &nbsp;#.low.+?LSC2+?TSC2<br />&nbsp; 326&nbsp; 8284&nbsp; &nbsp; &nbsp;85 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__stack_ptr<br />&nbsp; 327&nbsp; 8286&nbsp; &nbsp; &nbsp;A5 07&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__stack_ptr+1<br />&nbsp; 328&nbsp; 8288&nbsp; &nbsp; &nbsp;E9 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sbc&nbsp; &nbsp;#.high.+?LSC2+?TSC2<br />&nbsp; 329&nbsp; 828A&nbsp; &nbsp; &nbsp;85 07&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__stack_ptr+1<br />&nbsp; 330&nbsp; 828C&nbsp; &nbsp; &nbsp;28&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;plp<br />&nbsp; 331&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; ;&#123;<br />&nbsp; 332&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;.local&nbsp; &nbsp;_dst,42,V,pc1,s,f,d,f,d,0+?LSC2+?TSC2+0,00h<br />&nbsp; 333&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;.local&nbsp; &nbsp;_src,42,V,pc1,s,f,d,f,d,2+?LSC2+?TSC2+0,00h<br />&nbsp; 334&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;.local&nbsp; &nbsp;_len,42,V,i,u,d,d,d,d,4+?LSC2+?TSC2+0,00h<br />&nbsp; 335&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; ;while <br />&nbsp; 336&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;828D&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ?TOL1:&nbsp; &nbsp;&nbsp; &nbsp;.equal&nbsp; &nbsp;$<br />&nbsp; 337&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; ;&#40;len &gt; 0&#41; <br />&nbsp; 338&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;.whi_top&nbsp; 02f4h,?BOL1,1,43<br />&nbsp; 339&nbsp; 828D&nbsp; &nbsp; &nbsp;A9 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;#.low.0<br />&nbsp; 340&nbsp; 828F&nbsp; &nbsp; &nbsp;85 02&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper2<br />&nbsp; 341&nbsp; 8291&nbsp; &nbsp; &nbsp;A9 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;#.high.0<br />&nbsp; 342&nbsp; 8293&nbsp; &nbsp; &nbsp;85 03&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper2+1<br />&nbsp; 343&nbsp; 8295&nbsp; &nbsp; &nbsp;A0 08&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+4+?LSC2+?TSC2<br />&nbsp; 344&nbsp; 8297&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 345&nbsp; 8299&nbsp; &nbsp; &nbsp;85 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1<br />&nbsp; 346&nbsp; 829B&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 347&nbsp; 829C&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 348&nbsp; 829E&nbsp; &nbsp; &nbsp;85 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1+1<br />&nbsp; 349&nbsp; 82A0&nbsp; &nbsp; &nbsp;20 6A B3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;jsr&nbsp; &nbsp;__cmp_int<br />&nbsp; 350&nbsp; 82A3&nbsp; &nbsp; &nbsp;B0 03 90 42 83 &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;bcc&nbsp; &nbsp;?BOL1<br />&nbsp; 351&nbsp; 82A8&nbsp; &nbsp; &nbsp;D0 03&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;bne&nbsp; &nbsp;+3<br />&nbsp; 352&nbsp; 82AA&nbsp; &nbsp; &nbsp;4C 42 83&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;jmp&nbsp; &nbsp;?BOL1<br />&nbsp; 353&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;82AD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ?PLC2:&nbsp; &nbsp;&nbsp; &nbsp;.equal&nbsp; &nbsp;$<br />&nbsp; 354&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;.c_end&nbsp; &nbsp;02fch,43<br />&nbsp; 355&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; ;*dst++ = *src++<br />&nbsp; 356&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;.c_start&nbsp; 0309h,44<br />&nbsp; 357&nbsp; 82AD&nbsp; &nbsp; &nbsp;A0 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+2+?LSC2+?TSC2<br />&nbsp; 358&nbsp; 82AF&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 359&nbsp; 82B1&nbsp; &nbsp; &nbsp;85 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1<br />&nbsp; 360&nbsp; 82B3&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 361&nbsp; 82B4&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 362&nbsp; 82B6&nbsp; &nbsp; &nbsp;85 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1+1<br />&nbsp; 363&nbsp; 82B8&nbsp; &nbsp; &nbsp;A0 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+0+?LSC2<br />&nbsp; 364&nbsp; 82BA&nbsp; &nbsp; &nbsp;A5 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1<br />&nbsp; 365&nbsp; 82BC&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 366&nbsp; 82BE&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 367&nbsp; 82BF&nbsp; &nbsp; &nbsp;A5 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1+1<br />&nbsp; 368&nbsp; 82C1&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 369&nbsp; 82C3&nbsp; &nbsp; &nbsp;18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; 370&nbsp; 82C4&nbsp; &nbsp; &nbsp;A5 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1<br />&nbsp; 371&nbsp; 82C6&nbsp; &nbsp; &nbsp;69 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;adc&nbsp; &nbsp;#1<br />&nbsp; 372&nbsp; 82C8&nbsp; &nbsp; &nbsp;85 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1<br />&nbsp; 373&nbsp; 82CA&nbsp; &nbsp; &nbsp;A5 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1+1<br />&nbsp; 374&nbsp; 82CC&nbsp; &nbsp; &nbsp;69 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;adc&nbsp; &nbsp;#0<br />&nbsp; 375&nbsp; 82CE&nbsp; &nbsp; &nbsp;85 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1+1<br />&nbsp; 376&nbsp; 82D0&nbsp; &nbsp; &nbsp;A0 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+2+?LSC2+?TSC2<br />&nbsp; 377&nbsp; 82D2&nbsp; &nbsp; &nbsp;A5 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1<br />&nbsp; 378&nbsp; 82D4&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 379&nbsp; 82D6&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 380&nbsp; 82D7&nbsp; &nbsp; &nbsp;A5 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1+1<br />&nbsp; 381&nbsp; 82D9&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 382&nbsp; 82DB&nbsp; &nbsp; &nbsp;A0 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+0+?LSC2<br />&nbsp; 383&nbsp; 82DD&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 384&nbsp; 82DF&nbsp; &nbsp; &nbsp;85 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1<br />&nbsp; 385&nbsp; 82E1&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 386&nbsp; 82E2&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 387&nbsp; 82E4&nbsp; &nbsp; &nbsp;85 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1+1<br />&nbsp; 388&nbsp; 82E6&nbsp; &nbsp; &nbsp;A0 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#0<br />&nbsp; 389&nbsp; 82E8&nbsp; &nbsp; &nbsp;B1 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__oper1&#41;,y<br />&nbsp; 390&nbsp; 82EA&nbsp; &nbsp; &nbsp;A0 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+0+?LSC2<br />&nbsp; 391&nbsp; 82EC&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 392&nbsp; 82EE&nbsp; &nbsp; &nbsp;A0 04&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+0+?LSC2+?TSC2<br />&nbsp; 393&nbsp; 82F0&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 394&nbsp; 82F2&nbsp; &nbsp; &nbsp;85 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1<br />&nbsp; 395&nbsp; 82F4&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 396&nbsp; 82F5&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 397&nbsp; 82F7&nbsp; &nbsp; &nbsp;85 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1+1<br />&nbsp; 398&nbsp; 82F9&nbsp; &nbsp; &nbsp;A0 02&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+2+?LSC2<br />&nbsp; 399&nbsp; 82FB&nbsp; &nbsp; &nbsp;A5 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1<br />&nbsp; 400&nbsp; 82FD&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 401&nbsp; 82FF&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 402&nbsp; 8300&nbsp; &nbsp; &nbsp;A5 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1+1<br />&nbsp; 403&nbsp; 8302&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 404&nbsp; 8304&nbsp; &nbsp; &nbsp;18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; 405&nbsp; 8305&nbsp; &nbsp; &nbsp;A5 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1<br />&nbsp; 406&nbsp; 8307&nbsp; &nbsp; &nbsp;69 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;adc&nbsp; &nbsp;#1<br />&nbsp; 407&nbsp; 8309&nbsp; &nbsp; &nbsp;85 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1<br />&nbsp; 408&nbsp; 830B&nbsp; &nbsp; &nbsp;A5 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1+1<br />&nbsp; 409&nbsp; 830D&nbsp; &nbsp; &nbsp;69 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;adc&nbsp; &nbsp;#0<br />&nbsp; 410&nbsp; 830F&nbsp; &nbsp; &nbsp;85 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper1+1<br />&nbsp; 411&nbsp; 8311&nbsp; &nbsp; &nbsp;A0 04&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+0+?LSC2+?TSC2<br />&nbsp; 412&nbsp; 8313&nbsp; &nbsp; &nbsp;A5 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1<br />&nbsp; 413&nbsp; 8315&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 414&nbsp; 8317&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 415&nbsp; 8318&nbsp; &nbsp; &nbsp;A5 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__oper1+1<br />&nbsp; 416&nbsp; 831A&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 417&nbsp; 831C&nbsp; &nbsp; &nbsp;A0 02&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+2+?LSC2<br />&nbsp; 418&nbsp; 831E&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 419&nbsp; 8320&nbsp; &nbsp; &nbsp;85 02&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper2<br />&nbsp; 420&nbsp; 8322&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 421&nbsp; 8323&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 422&nbsp; 8325&nbsp; &nbsp; &nbsp;85 03&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__oper2+1<br />&nbsp; 423&nbsp; 8327&nbsp; &nbsp; &nbsp;A0 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+0+?LSC2<br />&nbsp; 424&nbsp; 8329&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 425&nbsp; 832B&nbsp; &nbsp; &nbsp;A0 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#0<br />&nbsp; 426&nbsp; 832D&nbsp; &nbsp; &nbsp;91 02&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__oper2&#41;,y<br />&nbsp; 427&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.c_end&nbsp; &nbsp;0318h,44<br />&nbsp; 428&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;len--<br />&nbsp; 429&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.c_start&nbsp; 0323h,45<br />&nbsp; 430&nbsp; 832F&nbsp; &nbsp; &nbsp;A0 08&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#+4+?LSC2+?TSC2<br />&nbsp; 431&nbsp; 8331&nbsp; &nbsp; &nbsp;38&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sec<br />&nbsp; 432&nbsp; 8332&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 433&nbsp; 8334&nbsp; &nbsp; &nbsp;E9 01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sbc&nbsp; &nbsp;#1<br />&nbsp; 434&nbsp; 8336&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 435&nbsp; 8338&nbsp; &nbsp; &nbsp;C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; 436&nbsp; 8339&nbsp; &nbsp; &nbsp;B1 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 437&nbsp; 833B&nbsp; &nbsp; &nbsp;E9 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sbc&nbsp; &nbsp;#0<br />&nbsp; 438&nbsp; 833D&nbsp; &nbsp; &nbsp;91 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;&#40;__stack_ptr&#41;,y<br />&nbsp; 439&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.c_end&nbsp; &nbsp;0328h,45<br />&nbsp; 440&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; 441&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.whi_bot&nbsp; 1,46<br />&nbsp; 442&nbsp; 833F&nbsp; &nbsp; &nbsp;4C 8D 82&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;jmp&nbsp; &nbsp;?TOL1<br />&nbsp; 443&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8342&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;?BOL1:&nbsp; &nbsp;&nbsp; &nbsp;.equal&nbsp; &nbsp;$<br />&nbsp; 444&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; 445&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.f_end&nbsp; &nbsp;0335h,47<br />&nbsp; 446&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8342&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;?BOF2:&nbsp; &nbsp;&nbsp; &nbsp;.equal&nbsp; &nbsp;$<br />&nbsp; 447&nbsp; 8342&nbsp; &nbsp; &nbsp;08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;php<br />&nbsp; 448&nbsp; 8343&nbsp; &nbsp; &nbsp;78&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sei<br />&nbsp; 449&nbsp; 8344&nbsp; &nbsp; &nbsp;18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; 450&nbsp; 8345&nbsp; &nbsp; &nbsp;A5 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__stack_ptr<br />&nbsp; 451&nbsp; 8347&nbsp; &nbsp; &nbsp;69 04&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;adc&nbsp; &nbsp;#.low.+?LSC2+?TSC2+0<br />&nbsp; 452&nbsp; 8349&nbsp; &nbsp; &nbsp;85 06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__stack_ptr<br />&nbsp; 453&nbsp; 834B&nbsp; &nbsp; &nbsp;A5 07&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;__stack_ptr+1<br />&nbsp; 454&nbsp; 834D&nbsp; &nbsp; &nbsp;69 00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;adc&nbsp; &nbsp;#.high.+?LSC2+?TSC2+0<br />&nbsp; 455&nbsp; 834F&nbsp; &nbsp; &nbsp;85 07&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;__stack_ptr+1<br />&nbsp; 456&nbsp; 8351&nbsp; &nbsp; &nbsp;28&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;plp<br />&nbsp; 457&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.f_return<br />&nbsp; 458&nbsp; 8352&nbsp; &nbsp; &nbsp;60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rts<br /></div>
<br />
<br />
<br />Well not very well optimized if you ask me (to say the least).
<br />CC65 is probably the best, but all those (sp),Y acesses really bugs me - why nobody had the idea to optimize them in zero page accesses instead ?
<br />
<br />And yes anyone can fix it - if only you can recompile the sources, understand them, and find any way to improve them, which sounds complex !

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri May 04, 2012 3:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Local variables on zero page work if your variables are static. Otherwise, the compiler has to use the stack in case a function calls itself.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri May 04, 2012 6:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Local variables on zero page work if your variables are static. Otherwise, the compiler has to use the stack in case a function calls itself.</div>
<br />I'd say that the average program has many more functions that don't call themselves than functions that do. The compiler could check for this and statically allocate variables for functions that are not recursive.
<br />
<br />I guess it would have to build some sort of function tree in order to tell which functions do not run at the same time, so that those can share RAM locations for their variables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri May 04, 2012 6:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I dont think I ever used a function that calls itself, neither in a game nor in a tool.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri May 04, 2012 6:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I guess it would have to build some sort of function tree</div><br />Like what I showed over <a href="http://nesdev.com/bbs/viewtopic.php?t=8434" class="postlink">here</a>?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">in order to tell which functions do not run at the same time, so that those can share RAM locations for their variables.</div><br />And for functions in multiple files, it'd have to do some sort of "whole program optimization".<br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I dont think I ever used a function that calls itself</div>
<br />I've made games that use flood fill to find connected regions of blocks in a grid that move together as a unit. I've also made games that use flood fill to find connected regions of blocks to be cleared from the grid. Flood fill is recursive.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri May 04, 2012 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I used fill algorithms in many projects, and never needed a recursive function. This does not mean that recursive functions are useless, there are probably things that easier to do with them, but I'm pretty sure that they aren't a must have - it is possible to do the same things without using them. So a C compiler without reentrant functions is certainly would be viable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri May 04, 2012 9:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Local variables on zero page work if your variables are static. Otherwise, the compiler has to use the stack in case a function calls itself.</div><br />I'd say that the average program has many more functions that don't call themselves than functions that do. The compiler could check for this and statically allocate variables for functions that are not recursive.<br /><br />I guess it would have to build some sort of function tree in order to tell which functions do not run at the same time, so that those can share RAM locations for their variables.</div><br />This would be nice indeed, however function pointers also complicate things (compiler can't know the exact pattern of calls). Usage of function pointers like that is rare however, so it'd be a very nice feature to have regardless.<br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I used fill algorithms in many projects, and never needed a recursive function. This does not mean that recursive functions are useless, there are probably things that easier to do with them, but I'm pretty sure that they aren't a must have - it is possible to do the same things without using them. So a C compiler without reentrant functions is certainly would be viable.</div>
<br />And if the compiler had some kind of attribute that could be specified on per-function basis, the user could explicitly specify what functions use recursion/are reentrant, so recursive functions could still be used.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>