<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Rank the assembly languages you know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Rank the assembly languages you know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=4661">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=4661</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Fri Dec 19, 2008 10:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Rank the assembly languages you know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />While I'm putting off a couple of projects, I thought this'd be fun.  The ill-defined criteria is basically the coolness of syntax and addressing modes.  Not counting lack of math instructions or barrel shifters that only go one bit per instruction.
<br />
<br />1. Arm 
<br />+  Lots of registers.  Return address has own register (neat).  Versatile syntax with conditional suffixes.  Block transfer instructions.  Easy to implement a jump table.
<br />
<br />-  No separate shift/rotate instructions outside Thumb mode.  
<br />
<br />2. x86 (32 bit)
<br />
<br />+  Most versatile syntax and addressing modes.
<br />
<br />-  Many commands out of date but still usable.
<br />
<br />3. 6502
<br />
<br />+  Probably the best asm for beginners.  Indexed addressing modes.  Small command set and only 0-2 operands per instruction.  Has decimal mode on other systems than the NES although I never tried it.
<br />
<br />-  Need to be clever (or just look at first party Nintendo code) to implement a jump table.  Takes a bit of mental gymnastics to write decent functionality without using too many bytes of ram.  Lacking addressing modes that would make sense (but are in 65816).
<br />
<br />4.  z80 (8080)
<br />
<br />+  Versatile for an 8-bit cpu.  Can use two 8-bit regs like a 16-bit one.
<br />
<br />-  Gameboy cpu lacks addressing modes that would make sense (can't load from memory directly into a 16-bit reg!)  Way too many shift instructions.
<br />
<br />CPUs I haven't tried programming in:  Motorola, MIPS, PowerPC, SPARC

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Dec 19, 2008 11:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />MIPS: ARM's retarded older brother with more registers

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Fri Dec 19, 2008 11:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I loved MIPS R2000 when I was back in college.  You only need 9 instructions to be turing complete (or so I think I remember)!
<br />
<br />
<br />This one is also interesting:
<br />
<br /><!-- m --><a class="postlink" href="http://bitstuff.blogspot.com/2007/02/subtract-and-branch-if-negative.html">http://bitstuff.blogspot.com/2007/02/su ... ative.html</a><!-- m -->
<br />
<br /><!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/One_instruction_set_computer">http://en.wikipedia.org/wiki/One_instru ... t_computer</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Sat Dec 20, 2008 4:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Neat.  I dare him to make Space Invaders with that.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Dec 20, 2008 11:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I don't know that many assembly languages but as far I can remember :
<br />6502 &gt; Atmel &gt; Pic &gt; C85
<br />
<br />C85 is a plain terrible assembly language, it lacks a lot of instrucitons and adressing modes that would make sense and you should find a complicated way arround that.
<br />The only beef I have with 6502 is the lack of inc A, dec A and swap instruction that would be VERY usefull, and the lack of some adressing modes for common intruction, like stx $xxxx,Y lacking, which is a shame. It's also a shame that lda $xx,Y doesn't exist (altough you usually have your tables outisde of zero page).
<br />
<br />I also like the assembly language for Atmel microprocessor (altough I haven't practiced it for a long while). You basically had a lot of registers (32) and this is very convignent. But as soon as you want to acess actual memory, you're forced to use complex instructions to do so, which is lame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Dec 20, 2008 11:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1. 6502
<br />+ Easy to use.
<br />- Isn't the 65C02.
<br />
<br />2. SPC-700
<br />+ Like 6502, with some auto-increment instructions.
<br />
<br />3. PIC18
<br />+ Indirect indexing, with auto-inc.  All instructions take the same amount time (except a few like JMP).  Instructions for working with individual bits.
<br />- Only one work register.  Just one interrupt vector at a fixed address.  Requires bankswitching to access internal registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Sat Dec 20, 2008 1:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">2. SPC-700<br />+ Like 6502, with some auto-increment instructions.<br /></div>
<br />
<br />I have to say that is not true, it is harder than 6502/65(c)816 because Most SNES Sceners/Developers have a very hard time programming the SPC-700. Except for EKid of XMSNES fame (and yourself, of course).
<br />
<br />My ASM Ranks: 
<br />
<br />the top most is the best, the bottom is the worst
<br />
<br />#1. 65(c)816 - Very good Assembly language.
<br />
<br />#2. 6502 - Same as #1, but very minimal.
<br />
<br />#3. 16/8 bit x86/x88 - Not the very best, But I do stuff to a DOS ANSI game creator named ZZT every once in a while.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 20, 2008 1:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Hamtaro126 wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">2. SPC-700<br />+ Like 6502, with some auto-increment instructions.</div><br />I have to say that is not true, it is harder than 6502/65(c)816 because Most SNES Sceners/Developers have a very hard time programming the SPC-700.</div>
<br />Might that have something to do with the unfamiliar syntax?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Dec 20, 2008 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Hamtaro126 wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">2. SPC-700<br />+ Like 6502, with some auto-increment instructions.</div><br />I have to say that is not true, it is harder than 6502/65(c)816 because Most SNES Sceners/Developers have a very hard time programming the SPC-700.</div><br />Might that have something to do with the unfamiliar syntax?</div>
<br />
<br />Either that, or loading your program onto the thing in the first place.  I had to disassemble it's little boot-loader ROM to make sense of the loading procedure.
<br />
<br />But the syntax difference is as simple as this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">mov a,#$FF<br />mov $00,a<br /><br />instead of<br /><br />lda #$FF<br />sta $00<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Dec 21, 2008 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">3. PIC18<br />+ Indirect indexing, with auto-inc.  All instructions take the same amount time (except a few like JMP).  Instructions for working with individual bits.<br />- Only one work register.  Just one interrupt vector at a fixed address.  Requires bankswitching to access internal registers.</div>
<br />
<br />Uh. PIC18 has two interrupt vectors, and I've never written a program that needs direct access to more than 384 bytes of RAM (of 3968) (as apposed to pointer-like access via the FSRs)
<br />
<br />Now PIC16 (96 bytes directly addressable of ~336) or PIC12 (16 bytes directly addressable of 256), those definitely have the downsides you're talking about.
<br />
<br />And how is W so different from A? Using X and Y for arithmetic feels on par with the PIC's directly-addressable registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Dec 21, 2008 4:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1. 65xx series
<br />
<br />1a. 6502
<br />+ Simplicity and elegance in all aspects.
<br />(other points covered by others above)
<br />
<br />1b. SPC-700
<br />As others have said, quite similar to 6502.
<br />+ More consistent assembler syntax, especially move instruction.
<br />+ Good number of 16-bit instructions that use Y and A registers as a pair.
<br />+ Ability to use 256-byte direct page as 256 registers for most instructions. So you can directly increment, add to, etc. one of these bytes, without touching any registers.
<br />- Hardly used anywhere else than SPC-700.
<br />
<br />1c. 65816
<br />+ Clean extension of 6502, doesn't lose elegance. Feels sort of like M68K.
<br />- Adjustable size of A/X/Y registers means headaches/subtle errors when calling routines that need different sizes.
<br />
<br />2. M68K
<br />+ Many registers (8 data, 8 address), none treated specially*.
<br />+ Tons of addressing modes. Not sure if any CISC has more.
<br />+ Extensive instruction set, consistent, very little limitation.
<br />- Not really used anymore, except in some ColdFire embedded processors.
<br />
<br />3. PowerPC
<br />+ Tons of registers (32 data, 32 floating-point), none treated specially**.
<br />+ Three-operand instructions, for example add r3,r4,r5 does r3 = r4 + r5. Avoids lots of copying to avoid modifying the source values. Also gives you useful things like "subtract register from immediate".
<br />+ Instructions don't set condition codes unless told to.
<br />+ Multiple sets of condition codes. So you can do three comparisons in a row, each putting the result into different condition codes, then three branches in a row that are based on the results of the comparisons. Important for pipelining.
<br />+ Subroutine call doesn't touch the stack, instead puts return address in lr register. Means leaf routines don't need to touch memory.
<br />+ rlwimi instruction. Rotates source operand by shift count, then ANDs with mask, ANDs destination with complement of mask, and ORs results together and places in destination. Allows inserting an arbitrary run of bits from source in any position in destination, all in one clock (overlapped with whatever other instructions are executing, since it only occupies one integer unit).
<br />- Not as transistor-efficient as ARM, still a heavyweight chip to manfacture.
<br />- Only used in game consoles (and embedded devices) now.
<br />- Instruction names aren't always easy to remember.
<br />
<br />3. 8085
<br />+ Good number of registers.
<br />+ Some support for 16-bit operations.
<br />+ Conditional call and return instructions.
<br />- Different instructions depending on source/destination (similar to 6502, but generally worse). Z-80 fixes the assembler syntax to be regular.
<br />- Instructions take way too many cycles.
<br />
<br />
<br />* OK, technically A7 (stack pointer) is treated slightly differently when using pre-decrement and post-increment modes when moving a byte, where it's adjusted by 2 rather than 1, to keep the stack aligned.
<br />
<br />** OK, again, r0 is treated as a zero constant in some instructions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Dec 21, 2008 8:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">3. PIC18<br />+ Indirect indexing, with auto-inc.  All instructions take the same amount time (except a few like JMP).  Instructions for working with individual bits.<br />- Only one work register.  Just one interrupt vector at a fixed address.  Requires bankswitching to access internal registers.</div><br /><br />Uh. PIC18 has two interrupt vectors, and I've never written a program that needs direct access to more than 384 bytes of RAM (of 3968) (as apposed to pointer-like access via the FSRs)<br /></div><br /><br />You're right, I had forgotten about the interrupt priority.  On Squeedo, everything but reading the UART was high priority.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Now PIC16 (96 bytes directly addressable of ~336) or PIC12 (16 bytes directly addressable of 256), those definitely have the downsides you're talking about.<br /></div><br /><br />That's what I was thinking of, because I started out with a PIC16 and later moved to PIC18.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And how is W so different from A? Using X and Y for arithmetic feels on par with the PIC's directly-addressable registers.</div>
<br />
<br />W does seem the same as A once you're used to it.  It's also nice to have MOVFF (though it's a 2-cycle instruction, IIRC).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Mon Dec 22, 2008 12:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I got the impression that Arm is like PowerPC crossed with 65xx after glancing at some PowerPC code.
<br />
<br />Forgot to mention another negative about ARM, no immediate loads &gt; #$FF.  Doesn't really matter due to the pseudo ldr reg, =imm.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Dec 22, 2008 1:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strat wrote:</div><div class="quotecontent">I got the impression that Arm is like PowerPC crossed with 65xx after glancing at some PowerPC code.<br /><br />Forgot to mention another negative about ARM, no immediate loads &gt; #$FF.  Doesn't really matter due to the pseudo ldr reg, =imm.</div>
<br />
<br />Only thing I can remember from coding on the PPC are those weird shifting instructions (RLWINM et al).. Can't say I liked it much.
<br />
<br />Well, you can load immediates &gt;0xFF without LDR on ARM, as long as it fits the rule <strong>0xYY ROL Z</strong> (or maybe it's ROR, doesn't really matter though). So, e.g. MOV R0,#0x5000 is fine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Dec 22, 2008 2:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Arm has immediate loads for big shifted numbers, and negative numbers.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>