<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Alternatives to battery save</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Alternatives to battery save</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=6590">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=6590</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Jul 22, 2010 7:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The method of splitting a 29F040 between game and save would appear to need a custom mapper that places its registers below $6000 so as to distinguish flash writes from mapper writes.<br /></div>
<br />
<br />It can be done with a 74HC139, which can be bought for maybe 10 cents, that chip could supply a chip enable for both a mapper register and WRAM.  A <a href="http://www.jameco.com/webapp/wcs/stores/servlet/ProductDisplay?langId=-1&amp;storeId=10001&amp;catalogId=10001&amp;pa=279814&amp;productId=279814&amp;CID=findchips" class="postlink">generic 62256</a> SRAM cost should be around $1.  You also want to consider assembly cost at around $.02 per IC pin (nevermind setup cost).
<br />
<br />Next step up from the 10-cent mapper is the $1 mapper, a small CPLD.  I've been wanting to make a small one in Verilog before I make the larger one later (heheh), I just haven't needed to yet.
<br />
<br />For any kinds of parts cost I estimate that (in the worse case) something will add 3 times it's value to the selling price.  Then try to figure out if it's worth it, if it adds that much value to it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Jul 22, 2010 8:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Funny idea for a password (or pass sentence rather) system would be where it uses words instead of characters for the password. So let's say the dictionary contains 256 different words so each word represents a byte. The password would be something like "retrain museum hoe domed".
<br />
<br />Easy to write down, easier to comprehend than bunch of random characters, but the dictionary takes space in ROM and entering the password is kind of PITA. The input screen could use some kind of word prediction though similar to ones used in mobile phones.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 23, 2010 6:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">What are you really hoping for? Something that's compatible with the current NES save conventions (i.e. some kind of NVRAM memory-mapped in $6000-$7fff) or a cart with a cheaper way of holding the save data? Because you seem to be getting stuck on wanting both.</div>
<br />It'd be nice to have something I can use in an emulator or on a PowerPak so that I can test the saving code. But I guess I ought to complete the SNROM+battery version of one of these projects first so that we have something to port.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 05, 2010 10:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I want the extra work RAM even if it isn't battery-backed, but I also want the save. That's why I suggested that <em>something</em> had to be mapped into $5000-$5FFF, whether it is the control register for an I2C port (for serial FRAM) or a control for write-enabling the PRG ROM (for using a 29F040 as the PRG ROM and saving back to half of that). BootGod's DB lists <a href="http://bootgod.dyndns.org:7777/search.php?ines_op=%3D%60%40%60&amp;ines=16&amp;hardware_op=OR&amp;hardware%5B%5D=24C01&amp;hardware%5B%5D=24C02&amp;field=2&amp;order=asc" class="postlink">six Japan-only games by Bandai</a> on <a href="http://nesdev.com/bandai-e.txt" class="postlink">mapper 16</a> that use an I2C-like serial EEPROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Aug 05, 2010 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I looked up digikey pricing on Microchip EEPROMs on digikey on some sizes and it seems to roughly like this (obviously not a complete list):
<br />
<br />$0.20 256 bytes
<br />$0.40 8kB
<br />$3.14 128kB (largest available)
<br />
<br />I just wonder if there is a good way to get a clock for it.  The trouble I see is that most address decoding will involve PRG/CE, which is already gated with M2 (the clock).  Not sure if that's a problem yet (obviously it's been done before).  There's probably one with an enable, I didn't check.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Aug 06, 2010 12:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This has been really interesting to consider all the possible configurations.  After talking to kevtris today about how to interface an I2C EEPROM to NES (not too bad, but the cart requires 2 latched bits in, and 1 latched bit out to the NES.  There probably is a cheap 1-bit latch, I haven't looked it up.  But that should be trivial with a CPLD, and would tie right in with the rest of the mapper.
<br />
<br />But kevtris and I both agreed that it's pretty cheap to add a battery.  I think parts cost for CR2032 + SMT battery holder could be about 60 cents.  So if the WRAM is already there, it's a decent option.
<br />
<br />EEPROM is attractive for being maintenance-free.  The batteries should be good for years at a time without an NV-controller, but I think it's dependent on the <a href="http://en.wikipedia.org/wiki/CMOS#Power:_switching_and_leakage" class="postlink">leakage current</a> of the particular SRAM.  Zelda lasted a long time (almost 20 years for my copy I think), but I imagine Nintendo was as selective as possible about the particular parts used.  If the save-data continuity matters that much to the user, they probably want a CopyNES or a transfer cable anyways.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Aug 06, 2010 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">$0.20 256 bytes<br />$0.40 8kB<br />$3.14 128kB (largest available)</div><br /><br />What quantities are you talking about, here? Microchip themselves gives quotes of 17c/29c/$2.40 for the those parts in quantities of 1k.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">how to interface an I2C EEPROM to NES (not too bad, but the cart requires 2 latched bits in, and 1 latched bit out to the NES.</div>
<br />
<br />A SPI interface should only require one latch -- or could be attached to the joypad port. (Whether that's desirable is another question.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Aug 06, 2010 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think those prices were for 100 quantity, I could have mixed them up.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A SPI interface should only require one latch -- or could be attached to the joypad port. (Whether that's desirable is another question.)</div>
<br />
<br />I haven't looked at the speeds yet, but the latched clock and data might be needed if the NES is faster than the chip is rated for.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 06, 2010 6:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A lot of these I2C parts are rated for 1.0 MHz. The NES is up to 1.8, but it'd probably actually operate it at 1/6 of that (ROL/STA loop). The CPLD could handle clocking the interface, but then someone who knows Verilog and soldering would need to handle that.
<br />
<br />I understand CPLDs are sized by how many bits of state they store and how many I/O pins they have. How much effort would it take to write a CPLD mapper in Verilog that does this:
<br /><ul><li>PRG switching equivalent to MMC1 SUROM (4 bits for PRG page number, 1 bit for 256 KiB super-bank number, 2 bits for PRG bank mode) </li><li>One switchable CHR bank at $1C00, out of 32, so that 1 KB of a 62256 CHR RAM page can be bankswitched (5 bits) </li><li>Mirroring like MMC1 (2 bits) </li><li>A latch used for I2C communication (3 bits) </li><li>Reset detection (? bits) </li><li>All registers in $5000-$500F space so as not to overlap if used in write-back-to-29F040 mode </li></ul>And about 34 I/O pins:<br /><ul><li>NES side: PRG A14-A12, A3-A0, D3-D0, /CE, R/W, M2; CHR A13-A10; CIRAM A10 (21 pins) </li><li>Internal side: PRG ROM A18-A14, /CE; WRAM /CE; CHR RAM A14-A11 out (A10 shared with CIRAM); I2C SDA, SCL (13 pins) </li></ul>
<br />For 7 more pins and 2 more bits, you could add an IRQ on tile $FF access, but let's not get ahead of ourselves because the goal of this topic is to explore a new mapper allowing easy ports from SNROM and SUROM (MMC1 + PRG RAM + CHR RAM) but supporting flash-writeback and I2C save types.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Aug 09, 2010 6:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The description helped me get started on it, thanks.
<br />
<br />So far it has pretty much been simple to implement.  This is my first practical verilog project, so most of the effort was learning the language (conclusion - extremely C-like in syntax, not bad at all).
<br />
<br />So far it's using 30 macrocells (out of 36 in this smallest CPLD).  It's not tested at all, but it does compile and synthesize.
<br />
<br />What I've come up with so far is:
<br />-PRG $8000 and $C000 are banked independently (so it supersedes any 16kb and 32kB modes).  256kB max though.
<br />-CHR-RAM Is banked, 2 banks again, at $0800-$0FFF and $1800-$1FFF, the rest is fixed.
<br />-registers at $5000-$5007
<br />-WRAM is banked
<br />
<br />Also PRG /CE (to the ROM) isn't needed, but PRG /RD is.  Since the NES provides no active-low read signal, which is no problem for SRAM, but I don't know if I trust using /CE as /RD with any random type of flashrom.  Might be OK on specific ones.  I suppose that could be a minor problem for the MMC1 flash cart idea in the other thread.  On Squeedo I just invert the PRG R/W line using a NAND gate, making it low on read to get this signal.
<br />
<br />i2c remains to be added.  Should be easy.
<br />
<br />I'm also wondering if it's worth using the on-board RAM for nametables.  Allowing nametable banking, and 4-screen mode.  I'll look into that last (and hopefully have enough I/Os to make it optional, probably not though).
<br />
<br />It definitely needs a bit more size with the PRG-ROM bankswitching, so the 'super-bank' idea sounds effective.  I think I could also double the size with no more I/Os by doing a trick where $8000 could only use even banks, and $C000 can only use odd banks.  It makes sense to me, it doubles the maximum size but also forces you to use both banks evenly (so it might take a bit of duplicate code).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 09, 2010 6:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for starting on this, Memblers.
<br />
<br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I'm also wondering if it's worth using the on-board RAM for nametables.</div><br />MMC1 style mirroring needs 2 bits of state, which means about 2 macrocells. A 4-screen mode fixed to the last 4 KiB of CHR RAM would take one more bit. Independent switching might exceed 36 macrocells.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It definitely needs a bit more size with the PRG-ROM bankswitching, so the 'super-bank' idea sounds effective.</div>
<br />But we'd still have to add some sort of reset detector to make it always start in one or the other super-bank, so that we don't power on or reset into a freshly erased sector of a 29F040 chip. Is this there, or are you relying on a 16-byte reset stub in all banks?
<br />
<br />Further steps: <ol style="list-style-type: decimal"><li>Test it </li><li>Make I2C </li><li>Make a demo of saving on both I2C and flash save types </li><li>Port it to PowerPak's FPGA </li><li>Get it working in at least one PC-based emulator </li></ol>
<br />If you get this working, I'm willing to give you some repro business by developing a game for it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Aug 09, 2010 6:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually I'm still kinda concerned about the power-on state of the CPLD.  It has to copy the config out of EEPROM into SRAM, but it gets an early start by doing this while the VCC voltage is still rising.  But I also have to regulate 3V to give the CPLD, which will add some kind of delay (not sure what).
<br />
<br />So I'm thinking either:
<br />a) it will be fine and start up in a good state
<br />b) I could tri-state the latch outputs and add pull-up resistors
<br />c) something else?
<br />
<br />I'm really not sure what will happen at startup, if the NES can possibly come alive first, or what.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue Aug 10, 2010 3:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Double posting, but the story continues..
<br />
<br />CPLD start-up should be safe, due to the NES CPU reset having a delay.  But since reset is done by the lockout chip and by charging a capacitor, how different is a toploader and famicom?  I don't know.  But definitely they should have delays built in, as I realize now it would be stupid anyways if the CPU started as soon as possible (possibly before the memory is ready, etc).
<br />
<br />I've got the reset detector figured out, it's as simple as using a capacitor charged by the M2 clock to release it from reset mode.  Though I'm getting kind of stingy with the I/Os at this point (I think the reset could share an I/O with part of the i2c if it has to, as I don't think one wouldn't ever need both at the same time).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Aug 14, 2010 9:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Triple post c-c-combo!
<br />
<br />It all fits in the CPLD, using 36 macrocells and 34 I/Os.  I'll see about making a PowerPak version of it (I'm still waiting on the Xilinx ise 9.1 download which is 2.5GB).
<br />
<br />So that fills up the chip.  Reset is in there, it resets the PRG banking latches only, but I guess with the added diode/cap/resistor circuit it would reset the banking even if the reset button is hit.  Some pirate multi-carts use the same circuit.  I think it might not be needed for power-on, because in the design software you apparently can specify a start-up state for all of the registers.  So hopefully this pin and extra circuit isn't even needed.
<br />
<br />The "superbank" bit is in there, so it can address 512kB.  That's perfect for 32-pin memories.
<br />
<br />I2C support is in, both the address and data line are bidirectional, latched I/Os for the NES to control.
<br />
<br />I looked around at flash memories available, and the SST39SF family seems to be nice and very cheap.  It is byte-programmable and uses 4kB-sized erase sectors, so I think this makes the I2C / EPROM combination a lot less appealing.  It claims 10k erase cycles minimum, but that could be extended further with some wear-leveling.
<br />
<br />If I took I2C out of the design, that would free up a couple pins.  Perhaps I could even make the PRG bankswitching 5-bits for both slots instead of 4 (so the superbank bit would no longer be needed).
<br />
<br />
<br />edit - For the SST chip I noticed the flash write endurance is 100k in another datasheet.  I think maybe the 512kB sized one is 10k.  The price difference between the sizes is negligible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Aug 15, 2010 3:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I just finished a <a href="http://pineight.com/nes/#password_save" class="postlink">demo of password generation, entry, and validation</a>.<br />Your method looks similar to what I'd have done if I were to code a password system.</div>
<br />May I ask how you encrypt the bits ? It's not clear in the doccumentation. It says it's inspired by TEA, but where can I find info about that ?
<br />
<br />If I were to do that I'll scrable the bits in a random order and EOR them with some constant to make it impossible to "guess" their order originally. Is it what you're doing ?
<br />
<br />So I guess the minimal lenght of a password of a 32 caracter set is (8/5)*(#of bytes + 1)
<br />Your case is for a # of bytes of 7 (since there is one validation byte).
<br />
<br />Also I wonder if it's possible to make the validation byte so that the "best" possible password has a meaning in english (or whatever language), but without "hard-coding" it. I've heard DQ1 and/or 2 does something like that in japanese, but because they're in japanese it's hard to verify.
<br />
<br />Finally, I think another system should be good, and that doesn't require the character set to be exactly 32 chars : You make a big number from your game variables (bit-scrambled of course) and "convert" this number into base 26 (for example, assuming you use the 26 latin letters).
<br />To decode the password, convert it back to base 2 and de-scramble the bits, with of course some validation bits that should remain constant.
<br />The base conversion itself acts like encription, so I guess it should be hard to "guess" passwords.
<br />It's however more complicated to compute the # of symbols per bits.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>