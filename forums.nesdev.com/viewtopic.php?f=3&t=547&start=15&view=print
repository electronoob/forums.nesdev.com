<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - cycle for cycle stuff</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">cycle for cycle stuff</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=547">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=547</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Feb 03, 2006 2:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't get Quietust's original comment in the first place. What he described <em>is</em> executing partial instructions, and it will handle the case of reading $2002 just after the VBL flag is cleared (as will any method which communicates the time of the memory read on the fourth instruction clock, even just read_memory( addr, timestamp + 3 )).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Fri Feb 03, 2006 2:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When someone says "executing partial instructions", I think of the ability to <em>halt the CPU in the middle of an instruction</em>. My approach is not the same - though it does emulate the individual cycles, it still must execute one full instruction at a time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Fri Feb 03, 2006 3:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />According to my diagram, would Nintendulator return $00 or $80?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Fri Feb 03, 2006 9:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It would return $00.
<br />
<br />As Q mentioned, his is cycle accurate, but execution is instruction granular, so if you tell it to execute N cycles, it likely will execute slightly fewer or slightly more, depending on where the instruction falls. In the grand scheme of things, keeping the rest of the system in-synch with this is trivial.
<br />
<br />I wrote a CPU core that could halt in the middle of an instruction. To say it was slow would be a vast understatement. It wasn't terribly useful aside from  the novelty of the idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Feb 04, 2006 3:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When someone says "executing partial instructions", I think of the ability to halt the CPU in the middle of an instruction.</div>
<br />
<br />If you're running the PPU and APU each CPU clock, then the CPU emulator <em>is</em> halting in the middle of an instruction:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int opcode = read_mem&#40; pc++ &#41;;<br />next_clock&#40;&#41;; // halts here<br />switch &#40; opcode &#41;<br />&#123;<br />case 0xAD: // LDA abs<br />&nbsp; &nbsp; int lo = read_mem&#40; pc++ &#41;;<br />&nbsp; &nbsp; run_ppu_and_apu&#40;&#41;; // halts here<br />&nbsp; &nbsp; int hi = read_mem&#40; pc++ &#41;;<br />&nbsp; &nbsp; run_ppu_and_apu&#40;&#41;; // halts here<br />&nbsp; &nbsp; a = read_mem&#40; &#40;hi &lt;&lt; 8&#41; | lo &#41;;<br />&nbsp; &nbsp; run_ppu_and_apu&#40;&#41;; // halts here<br />&nbsp; &nbsp; set_nz&#40; a &#41;;<br />&nbsp; &nbsp; break;<br />...<br />&#125;<br /></div><br /><br />What I take you to be meaning is that the CPU emulator function can <em>return</em> in the middle of an instruction, which would require something inefficient like<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">case 0xAD: // LDA abs<br />switch &#40; phase++ &#41;<br />&#123;<br />case 0: lo = read_mem&#40; pc++ &#41;; break;<br />case 1: hi = read_mem&#40; pc++ &#41;; break;<br />caes 2: a = read_mem&#40; &#40;hi &lt;&lt; 8&#41; | lo &#41;; break;<br />case 3: set_nz&#40; a &#41;; opcode = read_mem&#40; pc++ &#41;; phase = 0; break;<br />&#125;<br />break;<br /></div><br /><br />where you have to call this four times to execute a single LDA instruction. These are equivalent if you're just turning around and calling it like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">while &#40; clocks_remain-- &#41;<br />&#123;<br />&nbsp; &nbsp; run_one_cpu_clock&#40;&#41;;<br />&nbsp; &nbsp; run_ppu_and_apu&#40;&#41;;<br />&#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat Feb 04, 2006 8:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I understand what you are saying, but I prefer my method. First of all the 6502 emulator that I wrote will also be used on some of my other emulators (e.g. Atari 2600). Secondly it is easier to handle interrupts this way and I can also emulate the BRK bug (I am going for MAXIMUM accuracy here baby!). Thirdly is the simplicity of it all, as I am emulating what the NES does exactly. I also don't have the function overheads/increased .exe size from updating the PPU/APU like Nintendulator does. I have inlined all of the opcodes for maximum speed.
<br />
<br />Example;
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void OpticCodeAD&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;switch&#40;CPU.Cycle&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.Cycle++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 1:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.TMP2 = CPU.Memory&#91;CPU.PC&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.Cycle++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 2:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.TMP2 += &#40;CPU.Memory&#91;CPU.PC&#93; &lt;&lt; 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.Cycle++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 3:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.A = CPU.Memory&#91;CPU.TMP2&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.P &amp;= 0x7D;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40; !CPU.A &#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.P += 0x02;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.P += &#40;CPU.A &amp; 0x80&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.Cycle = 0;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;CPU.CC++;<br />&#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Feb 04, 2006 9:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thirdly is the simplicity of it all, as I am emulating what the NES does exactly.</div><br /><br />The NES works via electrons moving in transistors (or even more basic, if you want to go to a subatomic level). An emulator doesn't emulate this. Most work at a higher level, emulating the behavior of the CPU instructions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I also don't have the function overheads/increased .exe size from updating the PPU/APU like Nintendulator does. I have inlined all of the opcodes for maximum speed.</div>
<br />
<br />What you show above is probably slower since it adds lots of branching and function calls. But programmer intuition has never been what determines the speed of code. What does your profiler say?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat Feb 04, 2006 10:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, yeah I meant at a higher level anyway. I know that this method will make my emulator very slow due to the switch/case branching but with since I have inlined every opcode there are actually no function calls at all. As for my profiler, I don't have one, but my probation officer says that if I don't keep my nose clean, it'll be back to the state pen. for me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Sun Feb 05, 2006 9:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />blargg: technically, yes it's stopping in the middle of the instruction. as far as performance goes, there's drastic differences between the two.
<br />
<br />WdNESday: if you think about it, there is no logical difference between the two approaches. If the other parts are implemented properly, the CPU won't be able to tell the difference, and the only thing you get out of that approach is a slight cleanup in the outer loop running the CPU core. Going down that route for the purpose of personal curiousity is fine, but keep in mind that you get no technical benefit, and a slowdown of about 100x compared to the instruction-granular with cycle-accurate side effects approach.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Feb 06, 2006 6:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, for the advice. I know that it will make it slower, but I am implementing this because the core will also be used in other console/computers on other emulators. Also I like the simplicity that it involves.
<br />
<br />For example, the (NTSC) VBlank time is 2273 (.3) cc's. If we are on cycle 2272 and STA Absolute is executed then then first cycle wouldn't need any PPU drawing/fetching, but the others would. Observe;
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for&#40; int cc = 0; cc &lt; 2273; &#41;<br />&#123;<br />&nbsp; &nbsp; FetchOpcode&#40;&#41;;<br />&#125;<br /><br />for&#40; int cc = 0; cc &lt; 29393; &#41;<br />&#123;<br />&nbsp; &nbsp; FetchOpcode&#40;&#41;;<br />&nbsp; &nbsp; Draw3Pixels&#40;&#41;;<br />&#125;<br /></div><br /><br />This way, if we are in a VBlank period the PPU won't need any checking. My method ensures that there are no wasted calls to Draw3Pixels(). Also observe the following; (let's say that we are on a different console/computer)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void OpticCodeAD&#40;&#41; <br />&#123; <br />&nbsp; &nbsp;switch&#40;CPU.Cycle&#41; <br />&nbsp; &nbsp;&#123; <br />&nbsp; &nbsp; &nbsp; case 0: <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.PC++; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.Cycle++; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; <br />&nbsp; &nbsp; &nbsp; case 1: <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.TMP2 = CPU.Memory&#91;CPU.PC&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.PC++; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.Cycle++; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; <br />&nbsp; &nbsp; &nbsp; case 2: <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.TMP2 += &#40;CPU.Memory&#91;CPU.PC&#93; &lt;&lt; 8&#41;; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.PC++; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.Cycle++; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; <br />&nbsp; &nbsp; &nbsp; case 3: <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.A = CPU.Memory&#91;CPU.TMP2&#93;; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.P &amp;= 0x7D; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if&#40; !CPU.A &#41; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU.P += 0x02; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.P += &#40;CPU.A &amp; 0x80&#41;; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CPU.Cycle = 0; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; <br />&nbsp; &nbsp;&#125; <br />&nbsp; &nbsp;CPU.CC++; <br />&#125;<br /></div>
<br />
<br />Let's pretend that after case # 1 was executed there was some kind of automatic bankswitching that meant that a different high byte was fetched. This would ensure that the correct byte is fetched.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Mon Feb 06, 2006 7:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />-deleted-

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Mon Feb 06, 2006 1:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's nothing stopping instruction granular from handling the situation you mention regarding a timed bankswitch, if implemented correctly
<br />
<br />If the switch is timed, then it should be updated per-cpu-cycle like the rest of the hardware, and the memory accesses should realize that side effects will possibly invalidate the direct fetches, so the memory fetch should go through code rather than direct access.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Feb 06, 2006 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>Any</em> NES CPU emulator which includes the timestamp of memory accessess can be used as the basis for a "cycle-accurate" NES emulator. The general rule is, any number of hardware modules can be emulated on an as-needed ("catch-up") basis as long as the future effects of all but one module on others can easily be predicted in advance. This is the case for the NES, where the CPU is the only entity whose future effect can only be determined by doing the actual emulation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Tue Feb 07, 2006 4:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, today i finally finished the new cycle-for-cycle accurate 6502 emulator. I immediately hooked it up to WedNESday to test it out. I didn't bother to include any PPU/APU accesses, no memory mapping/trapping, no blitting, x1 window, as I just wanted a rough estimate of how slow the core was.
<br />
<br />Boy, nothing could prepare me for it.
<br />
<br />On my P4 2.2GHZ I had 60FPS, and full <em>30 times</em> slower than the previous core, which had 1800FPS in the same situation.
<br />
<br />Please don't say I told you so. I did listen to you guys and I always agreed with you all the way it was just that I wanted to give it a try because no one had done it before.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lord_Chile</b> [ Tue Feb 07, 2006 4:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>a question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />what is the name of Quietust emulator???? do you release it???

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>