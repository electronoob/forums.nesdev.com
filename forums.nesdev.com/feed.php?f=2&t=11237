<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=11237" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-12-12T09:34:23-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=11237</id>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2014-12-12T09:34:23-07:00</updated>
<published>2014-12-12T09:34:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=137511#p137511</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=137511#p137511"/>
<title type="html"><![CDATA[Re: Analysis on NTSC signal gen. by the PPU, including vblan]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=137511#p137511"><![CDATA[
Since this topic came up at #nesdev, and I was a bit bored, I wrote a small Python script to generate a visual representation of the PPU signal layout:<br />nes-ppu-render-layout.png<br />Here's the same image shifted right 70 pixels, so that the front porch is at the left side of the image (PPU counter 0,0 is at 70,0 in image):<br />nes-ppu-render-layout-shifted70.png<br />Key: blue = border, red = active, light gray = sync, green = colorburst, dark gray = &quot;pulse&quot; (in wiki table terminology)<br /><br />Images are based on info from: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php?title=NTSC_video&amp;oldid=9006">http://wiki.nesdev.com/w/index.php?titl ... oldid=9006</a><!-- m -->. If you notice any mistakes, lmk.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Fri Dec 12, 2014 9:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2014-05-21T15:38:53-07:00</updated>
<published>2014-05-21T15:38:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=129021#p129021</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=129021#p129021"/>
<title type="html"><![CDATA[Re: Analysis on NTSC signal gen. by the PPU, including vblan]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=129021#p129021"><![CDATA[
I updated the previous post, now including double-checked content based on tracing through an entire frame and a little more.<br /><br />Additional notes:<br /><br />- If rendering is disabled ($2001 is $00), the cycle skipping (column 0 of row 0) does not happen. Then line 0 is always 341 columns long.<br /><br />- If sprite rendering is enabled, even though background rendering is not ($2001 is $10), the skipped cycle still happens.<br /><br />- If background rendering is disabled, background color (Border) will be rendered instead of Game content where applicable. Practically these scanlines will be rendered the same way as scanline 240.<br /><br />- The 8-pix border flags do not have any effect if the corresponding rendering-enable flag is disabled. This means that $2001.1 is only checked if $2001.3 is set, and $2001.2 is only checked if $2001.4 is set. This also means that if $2001 is $06, it is the same as if $2001 was $00.<br /><br />- None of these bits change the vblank region in any manner (except for the skipped cycle).<br /><br />- The grayscale bit is always honored, regardless of the other enable-disable flags. It affects the rendering of border, even on scanlines 240-241. (The Pulse will always be generated as if grayscale was enabled, regardless of its actual state.) I assume that the de-emphasis bits are always honored too. I have not tested it though.<br /><br />Testing the different rendering enable/disable flags was done by adding an option &quot;?c=2100&quot; into the URL; where 21 stands for port $2001 and 00 stands for the value $00 to be written into that port.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Wed May 21, 2014 3:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2014-05-11T09:47:41-07:00</updated>
<published>2014-05-11T09:47:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=128654#p128654</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=128654#p128654"/>
<title type="html"><![CDATA[Analysis on NTSC signal gen. by the PPU, including vblanks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11237&amp;p=128654#p128654"><![CDATA[
I took the time and used the venerable <a href="http://www.qmtpro.com/~nes/chipimages/visual2c02/" class="postlink">Visual2C02</a> to trace through 1.2 complete frames and see what kind of signal the PPU pushes out at all times.<br /><br />Here's my results.<br /><br />First, some terminology.<br />There are twelve signals that the PPU can produce. Some of those are identical. I will call them by the name that Visual2C02 uses.<br /><br /><ul><li>vid_sync_l  and vid_sync_h:  aka. Sync and Black.</li><li>vid_burst_l and vid_burst_h:  Colorburst low and high.</li><li>vid_luma0_l and vid_luma0_h:  Signal levels equivalent to colors 0D and 00 respectively.</li><li>vid_luma1_l and vid_luma1_h:  Signal levels equivalent to colors 1D and 10 respectively.</li><li>vid_luma2_l and vid_luma2_h:  Signal levels equivalent to colors 2D and 20 respectively.</li><li>vid_luma3_l and vid_luma3_h:  Signal levels equivalent to colors 3D and 30 respectively.</li><li>vid_luma3_h is identical to vid_luma2_h.</li><li>vid_sync_h is identical to vid_luma1_l.</li></ul>Additionally, there is a vid_emph which can vary the vid_luma* signal output.<br /><br />So here's a scanline-by-scanline analysis of what the PPU produces.<br /><br /><ul><li>hpos=4: On lines 0―239, the PPU starts producing color image (or grayscale image if $2001.0 was set).</li><li>hpos=257: On lines 245―247, the PPU switches to vid_sync_h here. (Equalization pulses)</li><li>hpos=260: On lines 0―239, the PPU starts producing background color again. (As on hpos=330.)</li><li>hpos=271: On lines 0―241,   the PPU switches to vid_sync_h here. (Front porch)</li><li>hpos=280: On every line,    the PPU switches to vid_sync_l here. (Horizontal sync)</li><li>hpos=305: On lines 0―243 and 247―261, the PPU switches back to vid_sync_h here. (Begin of back porch)</li><li>hpos=309: On lines 0―243 and 247―261, the PPU starts producing colorburst signal.</li><li>hpos=324: On lines 0―243 and 247―261, the PPU switches back to vid_sync_h here. (End of back porch)</li><li>hpos=329: On lines 0―240 and 261, the PPU starts producing background color in grayscale as if $2001.0 was set. This serves as the &quot;pulse&quot; that signifies the beginning of the image, as it is always different from the vid_sync_h in back porch.</li><li>hpos=330: On lines 0―240 and 261, the PPU starts producing background color normally.</li></ul>The signal switches always happen exactly 4 half-cycles after the horizontal position (hpos) has been incremented.<br /><br />Corollaries:<br /><ul><li>On scanlines 0―241, the PPU produces color image. This means <em>242</em> lines of image. The palette background color is rendered on all of them.</li><li> On lines 242―244 and 248―261, the PPU produces long black lines (297 columns worth vid_sync_h). These black lines include the colorburst and sync as normal visible lines do, but they do not include the &quot;pulse&quot;.</li><li> On lines 245―247, the PPU produces very long sync pulses (318 columns).</li></ul><br />Colorburst signal is signal that toggles vid_burst_l and vid_burst_h after every 6 half-cycles.<br />Colors are produced as such (this is just a rehash of the information on <a href="http://wiki.nesdev.com/w/index.php/NTSC_video" class="postlink">http://wiki.nesdev.com/w/index.php/NTSC_video</a>):<br /><ul><li> For colors $00,$10,$20,$30 (i.e. $X0), only vid_lumaX_h is produced.</li><li> For colors $0D,$1D,$2D,$3D (i.e. $XD), only vid_lumaX_l is produced.</li><li> For colors $XE and $XF, only vid_luma1_l is produced (i.e. treated as $1D; X is ignored).</li><li> When grayscale is active, any color $XY is treated as if $X0, even if Y=D.</li><li> For any other color $XY, vid_lumaX_l and vid_lumaX_h are alternated every 6 half-cycles with starting phase Y relative to colorburst.</li></ul><br />Missing tests:<br /><ul><li>I did not test whether the emphasis bits affect the background color or any other signals.</li></ul><br />Source material:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Making the golden log:<br /><br />http://www.qmtpro.com/~nes/chipimages/visual2c02/<br /><br />Find &quot;vid&quot;<br />Select Post-render scanline, odd frame<br />Unclick Show sprite RAM contents<br />Unclick Animate during simulation<br />Trace these too: vid,vid_sync_l,vid_sync_h,vid_burst_l,vid_burst_h,vid_luma0_l,vid_luma0_h,vid_luma3_l,vid_luma3_h<br />Click RESET<br />Hide Chip Layout<br />Poke at 3F00: 3D (this causes SPIKE to be vid_luma3_h, BORDER to be vid_luma3_l, and GAME to be vid_luma0_h)<br />Poke at 0000: 16 * FF (ensures that game view will be rendered at color 00 rather than 3D)<br />        NEXT SCANLINE<br />After every 3 scanlines or so, CTRL-A to mark everything, and paste it into a text file.<br />Clear log AND DON'T FORGET TO CLICK &quot;Trace These Too&quot; again!<br />The simulator becomes linearly slower and slower the longer the log is, so you have to clear it periodically.<br />Note: If you have to reset, you MUST poke the palette value again!<br /><br />---<br />Signalwise summary:<br />  vid_luma0_h (Game) at x=  4 on lines 0-239<br /> vid_sync_h  (Black) at x=257 on lines 245-247<br />vid_luma3_l (Border) at x=260 on lines 0-239<br /> vid_sync_h  (Black) at x=271 on lines 0-241<br />  vid_sync_l  (Sync) at x=280 on lines 0-261<br /> vid_sync_h  (Black) at x=305 on lines 0-243, 247-261<br /> vid_burst_* (Burst) at x=309 on lines 0-243, 247-261<br /> vid_sync_h  (Black) at x=324 on lines 0-243, 247-261<br /> vid_luma3_h (Pulse) at x=329 on lines 0-240, 261-261<br />vid_luma3_l (Border) at x=330 on lines 0-240, 261-261<br />---<br />Linewise summary (each &quot;line&quot; begins at column 280 on _previous_ scanline):<br />  Line 240<br />    &#91;&#91; These six lines are manual simulation; extrapolation from next frame. &#93;&#93;<br />    row 239, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle -242<br />    row 239, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle -142<br />    row 239, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle -126<br />    row 239, column 324, half-cycle 4:   vid_sync_h  (Black)    (5 columns) - cycle -66<br />    row 239, column 329, half-cycle 4:   vid_luma3_h (Pulse)    (1 columns) - cycle -46<br />    row 239, column 330, half-cycle 4:   vid_luma3_l (Border) (282 columns) - cycle -42<br />    <br />    &#91;&#91;Simulation begins here, using the &quot;Post-render scanline, odd frame&quot; option in Visual2c02.<br />      These two first lines are garbage.&#93;&#93;<br />    row 240, column   0, half-cycle 0:   vid_sync_h  (Black)  (1.5 columns) - cycle 0<br />    row 240, column   1, half-cycle 4:   vid_luma3_l (Border) (270 columns) - cycle 6<br /><br />    row 240, column 271, half-cycle 4:   vid_sync_h  (Black)    (9 columns) - cycle 1086<br />    (341 cycles)<br />  Line 241<br />    row 240, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle 1122<br />    row 240, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle 1222<br />    row 240, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle 1238<br />    row 240, column 324, half-cycle 4:   vid_sync_h  (Black)    (5 columns) - cycle 1298<br />    row 240, column 329, half-cycle 4:   vid_luma3_h (Pulse)    (1 columns) - cycle 1318<br />    row 240, column 330, half-cycle 4:   vid_luma3_l (Border) (282 columns) - cycle 1322<br />    row 241, column 271, half-cycle 4:   vid_sync_h  (Black)    (9 columns) - cycle 2450<br />    (341 cycles)<br />  Lines 242-244<br />    row 241, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle 2486<br />    row 241, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle 2586<br />    row 241, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle 2602<br />    row 241, column 324, half-cycle 4:   vid_sync_h  (Black)  (297 columns) - cycle 2662<br />    (341 cycles)<br />  Lines 245-247<br />    row 244, column 280, half-cycle 4:   vid_sync_l  (Sync)   (318 columns) - cycle 6578<br />    row 245, column 257, half-cycle 4:   vid_sync_h  (Black)   (23 columns) - cycle 7850<br />    (341 cycles)<br />  Lines 248-261<br />    row 247, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle 10670<br />    row 247, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle 10770<br />    row 247, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle 10786<br />    row 247, column 324, half-cycle 4:   vid_sync_h  (Black)  (297 columns) - cycle 10846<br />    (341 cycles)<br />  Line 0<br />    row 261, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle 29766<br />    row 261, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle 29866<br />    row 261, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle 29882<br />    row 261, column 324, half-cycle 4:   vid_sync_h  (Black)    (5 columns) - cycle 29942<br />    row 261, column 329, half-cycle 4:   vid_luma3_h (Pulse)    (1 columns) - cycle 29962<br />    row 261, column 330, half-cycle 4:   vid_luma3_l (Border)  (14 columns) - cycle 29966<br />    row   0, column   4, half-cycle 4:   vid_luma0_h (Game)   (256 columns) - cycle 30022<br />    row   0, column 260, half-cycle 4:   vid_luma3_l (Border)  (11 columns) - cycle 31046<br />    row   0, column 271, half-cycle 4:   vid_sync_h  (Black)    (9 columns) - cycle 31090<br />    (340 cycles; column 0 was skipped)<br />  Lines 1-239<br />    row   0, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle 31126<br />    row   0, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle 31226<br />    row   0, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle 31242<br />    row   0, column 324, half-cycle 4:   vid_sync_h  (Black)    (5 columns) - cycle 31302<br />    row   0, column 329, half-cycle 4:   vid_luma3_h (Pulse)    (1 columns) - cycle 31322<br />    row   0, column 330, half-cycle 4:   vid_luma3_l (Border)  (15 columns) - cycle 31326<br />    row   1, column   4, half-cycle 4:   vid_luma0_h (Game)   (256 columns) - cycle 31386<br />    row   1, column 260, half-cycle 4:   vid_luma3_l (Border)  (11 columns) - cycle 32410<br />    row   1, column 271, half-cycle 4:   vid_sync_h  (Black)    (9 columns) - cycle 32454<br />    (341 cycles)<br />  Line 240-241<br />    row 239, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle 357122<br />    row 239, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle 357222<br />    row 239, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle 357238<br />    row 239, column 324, half-cycle 4:   vid_sync_h  (Black)    (5 columns) - cycle 357298<br />    row 239, column 329, half-cycle 4:   vid_luma3_h (Pulse)    (1 columns) - cycle 357318<br />    row 239, column 330, half-cycle 4:   vid_luma3_l (Border) (282 columns) - cycle 357322<br />    row 240, column 271, half-cycle 4:   vid_sync_h  (Black)    (9 columns) - cycle 358450<br />    (341 cycles)<br />  Lines 242-244<br />    row 241, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle<br />    row 241, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle<br />    row 241, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle<br />    row 241, column 324, half-cycle 4:   vid_sync_h  (Black)  (297 columns) - cycle<br />    (341 cycles)<br />  Lines 245-247<br />    row 244, column 280, half-cycle 4:   vid_sync_l  (Sync)   (318 columns) - cycle<br />    row 245, column 257, half-cycle 4:   vid_sync_h  (Black)   (23 columns) - cycle<br />    (341 cycles)<br />  Lines 248-261<br />    row 247, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle 368034<br />    row 247, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle 368134<br />    row 247, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle 368150<br />    row 247, column 324, half-cycle 4:   vid_sync_h  (Black)  (297 columns) - cycle 368210<br />    (341 cycles)<br />  Lines 0-239<br />    row 261, column 280, half-cycle 4:   vid_sync_l  (Sync)    (25 columns) - cycle 387130<br />    row 261, column 305, half-cycle 4:   vid_sync_h  (Black)    (4 columns) - cycle 387230<br />    row 261, column 309, half-cycle 4:   vid_burst_* (Burst)   (15 columns) - cycle 387246<br />    row 261, column 324, half-cycle 4:   vid_sync_h  (Black)    (5 columns) - cycle 387306<br />    row 261, column 329, half-cycle 4:   vid_luma3_h (Pulse)    (1 columns) - cycle 387326<br />    row 261, column 330, half-cycle 4:   vid_luma3_l (Border)  (15 columns) - cycle 387330<br />    row   0, column   4, half-cycle 4:   vid_luma0_h (Game)   (256 columns) - cycle 387390<br />    row   0, column 260, half-cycle 4:   vid_luma3_l (Border)  (11 columns) - cycle 388414<br />    row   0, column 271, half-cycle 4:   vid_sync_h  (Black)    (9 columns) - cycle 388458<br />    (341 cycles)</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Sun May 11, 2014 9:47 am</p><hr />
]]></content>
</entry>
</feed>