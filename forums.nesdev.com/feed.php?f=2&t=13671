<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=13671" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2017-06-07T10:10:40-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=13671</id>
<entry>
<author><name><![CDATA[calima]]></name></author>
<updated>2017-06-07T10:10:40-07:00</updated>
<published>2017-06-07T10:10:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197690#p197690</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197690#p197690"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197690#p197690"><![CDATA[
Added, thanks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7237">calima</a> — Wed Jun 07, 2017 10:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2017-06-07T03:57:52-07:00</updated>
<published>2017-06-07T03:57:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197669#p197669</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197669#p197669"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197669#p197669"><![CDATA[
<div class="codetitle"><b>Code:</b></div><div class="codecontent">Algo         | Ratio  | Speed | License, comments<br />------------------------------------------------<br />exomizer mem | 0.5807 | 9.4   | Free to use/modify; needs about 162 bytes of temp RAM, 4 of which need to be ZP</div><br />Speed is based upon 143492 cycles for 768 bytes extrapolated to estimated NES speeds. Assumes Not ZP based selfmodifying Next Byte routine, with all variables stored in ZP. Using indirect vector would save RAM but cost cycles, ZP based get next byte would get more speed. Data was packed in reverse with literals.<br />exomizer 'mem' mode is 446 bytes, the 'sfx' Self extracting program is 696, the RAW decoder used for mem is 189 bytes, with literal support.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Wed Jun 07, 2017 3:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[calima]]></name></author>
<updated>2017-06-07T01:36:00-07:00</updated>
<published>2017-06-07T01:36:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197666#p197666</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197666#p197666"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197666#p197666"><![CDATA[
As mentioned, the base tests were done with the first 768 bytes of the GPL (<!-- m --><a class="postlink" href="https://github.com/clbr/nes/blob/master/compression/srcdata.h">https://github.com/clbr/nes/blob/master ... /srcdata.h</a><!-- m -->). I can't post the nametable I tested, as it's a part of an upcoming MegaCat game.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7237">calima</a> — Wed Jun 07, 2017 1:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2017-06-06T22:53:30-07:00</updated>
<published>2017-06-06T22:53:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197661#p197661</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197661#p197661"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197661#p197661"><![CDATA[
Can you post your &quot;samples&quot; the things you compress to make the tests I have some other methods I would like to compare.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Tue Jun 06, 2017 10:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[calima]]></name></author>
<updated>2017-06-06T11:41:52-07:00</updated>
<published>2017-06-06T11:41:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197611#p197611</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197611#p197611"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=197611#p197611"><![CDATA[
I've made an asm version of lz4 that will probably soon be a part of cc65. Its speed has been posted on the first page, ~7x faster than the C version.<br /><br />I also made a version that unpacks to VRAM. Rough speeds for a full 1024 nametable:<br />- rle takes 0.5 frames<br />- uncompressed takes 1.3 frames<br />- lz4 takes 2.8 frames<br /><br />It's slower, but far from being an issue, as unpacking a nametable happens during a black screen anyway. The compression tends to be better than the Shiru version of RLE.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7237">calima</a> — Tue Jun 06, 2017 11:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[calima]]></name></author>
<updated>2016-01-21T05:18:39-07:00</updated>
<published>2016-01-21T05:18:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=162985#p162985</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=162985#p162985"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=162985#p162985"><![CDATA[
Added lz5hc results. It's a new variant, performs worse than LZO in both metrics, but it's liberally licensed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7237">calima</a> — Thu Jan 21, 2016 5:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TOUKO]]></name></author>
<updated>2016-01-03T09:25:27-07:00</updated>
<published>2016-01-03T09:25:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161801#p161801</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161801#p161801"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161801#p161801"><![CDATA[
if you are interested by LZ4 decompressor, you can find the 6502 implementation here :<br /><!-- m --><a class="postlink" href="http://pferrie.host22.com/misc/appleii.htm">http://pferrie.host22.com/misc/appleii.htm</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6952">TOUKO</a> — Sun Jan 03, 2016 9:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[calima]]></name></author>
<updated>2016-01-03T03:17:17-07:00</updated>
<published>2016-01-03T03:17:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161786#p161786</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161786#p161786"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161786#p161786"><![CDATA[
Guys, please keep compression theory in a separate topic. This topic's intention was to have data on existing open-source compression algorithms' performance on the NES, not to argue what is the theoretical best.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7237">calima</a> — Sun Jan 03, 2016 3:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2016-01-02T10:51:05-07:00</updated>
<published>2016-01-02T10:51:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161741#p161741</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161741#p161741"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161741#p161741"><![CDATA[
<div class="quotetitle">Sik wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I like to use a <a href="https://en.wikipedia.org/wiki/Unary_coding" class="postlink">unary code</a>, in which each bit of a control word can be 0 for a single literal symbol or 1 for part of previous run, to be fairly efficient on real data and easy to decode to a multiple of 8 bytes. LZSS in the Allegro 4 library and Game Boy Advance and Nintendo DS BIOS uses a variant of this unary code, where each bit of the control word is one way for a literal and the other way for a reference to previous data.<br /></div><br />I don't think that qualifies under the definition of unary code you linked, though... (the tokens are always 0 or 1, not a string of bits)</div><br />That's because unary coding and run-length encoding are inverses of each other. From an RLE point of view, PB8's repeat coding is a unary code.<br /><br />0: Run of 1 byte, then change byte<br />10: Run of 2 bytes, then change byte<br />110: Run of 3 bytes, then change byte<br />1110: Run of 4 bytes, then change byte<br />etc.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also what you've described applies to pretty much nearly every LZ77-based scheme out there<br /></div><br />It models the probability of a back-reference as 50%, with the other 50% for a single literal byte, with no dependence on the previous runs. This is equivalent to runs of back-references and runs of literals each having a <a href="https://en.wikipedia.org/wiki/Geometric_distribution" class="postlink">geometric distribution</a> to their lengths. Unary codes and other Golomb codes are ideal for geometric distributions, with the Golomb code's <em>M</em> parameter depending on the distribution's <em>p</em> parameter. Optimally, <em>M</em> should be close to -log(2)/log(1 - <em>p</em>), with the unary code corresponding to <em>M</em> = 1 or <em>p</em> = .5. Most schemes branded as &quot;RLE&quot;, on the other hand, treat all run lengths up to 32 or 128 or whatever as equally likely.<br /><br />Another option for coding run lengths is the <a href="https://en.wikipedia.org/wiki/Exponential-Golomb_coding" class="postlink">exp-Golomb code</a>. It replaces the unary code for the quotient with the Elias gamma code, resulting in longer codes for values 1 and 3 (runs of length 2 or 4) for shorter codes for longer runs. Exp-Golomb is ideal for <a href="https://en.wikipedia.org/wiki/Zipf's_law" class="postlink">power law (Zipf) distributions</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />(LZSS's particularity is the use of a ring buffer instead of the already decoded data, allowing for more room to reuse strings as repeated strings don't go into the buffer).<br /></div><br />Repeated strings do go into the ring buffer, at least in Allegro 4 LZSS (which is equivalent to GBA LZSS with different bit ordering). The use of a ring buffer is to allow encoding or decoding without keeping the entire uncompressed stream in RAM at once. The difference between LZSS and the format described in Ziv and Lempel's 1977 paper is that original LZ77 assumed that all back references would be followed by exactly one literal and potentially have zero length, while LZSS allows back-references to follow one another directly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jan 02, 2016 10:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2016-01-02T09:34:20-07:00</updated>
<published>2016-01-02T09:34:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161735#p161735</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161735#p161735"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161735#p161735"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I like to use a <a href="https://en.wikipedia.org/wiki/Unary_coding" class="postlink">unary code</a>, in which each bit of a control word can be 0 for a single literal symbol or 1 for part of previous run, to be fairly efficient on real data and easy to decode to a multiple of 8 bytes. LZSS in the Allegro 4 library and Game Boy Advance and Nintendo DS BIOS uses a variant of this unary code, where each bit of the control word is one way for a literal and the other way for a reference to previous data.<br /></div><br />I don't think that qualifies under the definition of unary code you linked, though... (the tokens are always 0 or 1, not a string of bits) Also what you've described applies to pretty much nearly every LZ77-based scheme out there (LZSS's particularity is the use of a ring buffer instead of the already decoded data, allowing for more room to reuse strings as repeated strings don't go into the buffer).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Sat Jan 02, 2016 9:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2015-12-28T21:49:35-07:00</updated>
<published>2015-12-28T21:49:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161458#p161458</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161458#p161458"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161458#p161458"><![CDATA[
It is true that RLE is another format, and then there is also huffed RLE (I have used for map data in one game). As tepples mentions, there are many other good ones too. Another thing you can do is to decompress data from CHR ROM into RAM; if everything is read sequentially and may even have parts of variable length, then this may speed it up even more, but you would have to disable rendering in order to use it properly, so it might be used during loading one level or something like that (if you have small enough level sizes).<br /><br />The kind of data you may compress might include:<ul><li>Graphics</li><li>Map</li><li>Text</li><li>Music</li></ul><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Mon Dec 28, 2015 9:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-12-28T08:54:38-07:00</updated>
<published>2015-12-28T08:54:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161423#p161423</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161423#p161423"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161423#p161423"><![CDATA[
<em>The Legend of Zelda: Oracle of *</em> also had the Game Boy Color's 32K of RAM (4K fixed, 4K switched) and 16K of VRAM, which is easily randomly accessible while rendering is off, to work with. For random access with little RAM, such as on an NES without extra RAM on the cartridge, you need to use a static dictionary in ROM.<br /><br /> For text, try <a href="https://pineight.com/mw/?title=Huffword" class="postlink">Huffword</a> or <a href="https://en.wikipedia.org/wiki/Byte_pair_encoding" class="postlink">byte pair</a>, with pointers to each document (e.g. each page of text or each line of dialogue). I used byte pair for <a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=11943" class="postlink">my robotfindskitten port</a>, and I was going to use Huffword for an e-book reader until the project <a href="http://forums.nesdev.com/viewtopic.php?p=10534#p10534" class="postlink">ran into serious emulator bugs</a>.<br /><br />For map data, there's either multi-layer metatiles (<em>Mega Man</em>; <em>Blaster Master</em>; <em>Sonic the Hedgehog</em>) or object coding (<em>Super Mario Bros.</em> series). <em>The Legend of Zelda</em> for NES is known for using metatiles that are a column of the screen.<br /><br />Another trick I like to use that generalizes RLE in a static-dictionary-ish way is based on a <a href="https://en.wikipedia.org/wiki/Markov_chain" class="postlink">Markov chain</a>. For each symbol, store the most common symbol that follows it, and then treat a &quot;run&quot; as a set of symbols each followed by its most common next symbol. (RLE is the special case of this where each symbol's most common next symbol is itself.) Background maps in <em>Haunted: Halloween '85</em> for NES are stored this way with vertical runs. Level maps in <em>Wrecking Ball Boy</em> for Pygame are horizontal rows of tiles that are then Markov-expanded vertically.<br /><br />It's also useful to consider how you are encoding run lengths. The best method rate-wise depends on the distribution of run lengths and literal lengths; the distribution implied by popular RLE schemes such as PackBits may not be optimal. And on the NES, you often have to break VRAM uploads into fixed-size packets. I like to use a <a href="https://en.wikipedia.org/wiki/Unary_coding" class="postlink">unary code</a>, in which each bit of a control word can be 0 for a single literal symbol or 1 for part of previous run, to be fairly efficient on real data and easy to decode to a multiple of 8 bytes. LZSS in the Allegro 4 library and Game Boy Advance and Nintendo DS BIOS uses a variant of this unary code, where each bit of the control word is one way for a literal and the other way for a reference to previous data.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Dec 28, 2015 8:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2015-12-28T08:46:16-07:00</updated>
<published>2015-12-28T08:46:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161421#p161421</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161421#p161421"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161421#p161421"><![CDATA[
I don't know if there's a good random-access compression scheme (LZ78-style) out there.  Zelda Oracles used something like that for the dungeon maps.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Mon Dec 28, 2015 8:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TOUKO]]></name></author>
<updated>2015-12-28T03:58:15-07:00</updated>
<published>2015-12-28T03:58:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161418#p161418</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161418#p161418"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161418#p161418"><![CDATA[
You have the lz4 one :<br /><!-- m --><a class="postlink" href="http://www.brutaldeluxe.fr/products/crossdevtools/lz4/">http://www.brutaldeluxe.fr/products/crossdevtools/lz4/</a><!-- m --><br /><br />It's for 65816 cpu but a 6502 version exist somewhere .<br /><br />It's a fast decompressor (real time oriented), but it have not the best ratio of course .<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6952">TOUKO</a> — Mon Dec 28, 2015 3:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[calima]]></name></author>
<updated>2015-12-28T02:06:33-07:00</updated>
<published>2015-12-28T02:06:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161415#p161415</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161415#p161415"/>
<title type="html"><![CDATA[Re: Compression benchmarks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13671&amp;p=161415#p161415"><![CDATA[
Too bad aplib's compressor is closed source.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7237">calima</a> — Mon Dec 28, 2015 2:06 am</p><hr />
]]></content>
</entry>
</feed>