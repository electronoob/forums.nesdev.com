<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Mappers 19 and 210 (N106) questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Mappers 19 and 210 (N106) questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8968">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8968</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jun 03, 2012 6:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Mappers 19 and 210 (N106) questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Two questions:
<br />
<br />1) <a href="http://tuxnes.sourceforge.net/mappers-0.80.txt" class="postlink">Firebug's mappers.txt</a> says the N106 IRQ counter occurs every scanline, while the <a href="http://wiki.nesdev.com/w/index.php/Namco_106#IRQ_Operation" class="postlink">nesdev wiki</a> says it occurs every CPU cycle.  Big difference.  Which is correct?
<br />
<br />2) Per the <a href="http://wiki.nesdev.com/w/index.php/Namco_106#IRQ_Operation" class="postlink">same nesdev wiki</a> document, what exactly does "IRQ is fired" mean?  I have to assume it means "generates an IRQ", but that doesn't tell me if it's a hardware IRQ (e.g. IRQ/BRK vector is called, etc.), an interrupt/IRQ internal to the mapper itself, nor any other details.
<br />
<br />Thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 03, 2012 8:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I assume "IRQ is fired" means that the mapper begins to pull /IRQ low until the next access to $5800.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jun 03, 2012 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry Tepples, I don't understand.  Too hardware-oriented.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Jun 03, 2012 11:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know about whether clocked on scanlines or CPU cycles.  For all I know it could be both like the RAMBO-1 where you can choose between counting scanlines or CPU cycles.  Not too unthinkable either if the N106 came first.  Because Tengen ported several Namco games over the the NES they could have designed the RAMBO-1 to support.
<br />
<br />By the looks of it if there are indeed two counting registers (15 bits total) I would imagine it does count CPU cycles.  Since it's a 15 bit counter there isn't much point to count 64,000+ scanlines.  You'd only count that high if you were looking to count CPU cycles.  But that's not to say it can't be setup to count scanlines as well, who knows.
<br />
<br />As for the 'firing' terminology it kinda confused me at first as well.  I imagine it is similar to all other IRQs.  Fired means for an IRQ to be generated, it's not very easy for a mapper to insert a BRK via hardware.  
<br />
<br />For me it's easiest to explain in hardware because that's what it is.  Basically when a IRQ gets triggered by the counter the mapper pulls the IRQ line low.  It HOLDS the line low until the CPU acknowledges the IRQ either by clearing or disabling the IRQ.  If you access (read/write) to $5000-6000 it will acknowledge the IRQ.  This will clear the IRQ and the mapper releases the IRQ line allowing it to be pulled high again.  IRQs will still be enabled, you're just clearing the individual IRQ and setting it up for the next time around.
<br />
<br />EDIT: For the record according to Disch's docs:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">IRQ Operation:<br />--------------------------<br /><br />IRQs are driven by a 15-bit CPU cycle up-counter.&nbsp; $5000 and $5800 are *direct* access to the IRQ counter<br />&#40;they are not a reload value&#41;.&nbsp; Games can also read back the real-time state of the IRQ counter by reading<br />those regs.<br /><br />When IRQs are enabled, the following occurs every CPU cycle:<br /><br />- If IRQ Counter = $7FFF<br />&nbsp; &nbsp;a&#41; Trip IRQ<br /><br />- otherwise...<br />&nbsp; &nbsp;a&#41; Increment IRQ counter by 1<br /><br />Reading/Writing $5000 or $5800 will acknowledge the pending IRQ.<br /><br /><br />Sources on the behavior of this IRQ counter vary.&nbsp; Some say that the IRQ counter wraps from $7FFF to $0000,<br />and trips an IRQ only when it wraps -- however Sangokushi 2 polls $5800, and emulating IRQs that way results<br />in the game locking up shortly after it starts &#40;once it sees that $5800 is not what it expects, it resets the<br />IRQ counter and loops&#41;<br /><br />Emulating the IRQ counter as above seems to work for every game out there -- although it probably isn't 100%<br />accurate.<br /></div><br /><br />And with firebug only stating:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; - The IRQ counter is incremented at each scanline. When it reaches<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$7FFF, an IRQ interrupt is executed, but there is no reset.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;This is still preliminary and untested, and I may be wrong on<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;this point. Splatterhouse and several other games run fine<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;without it.</div>
<br />
<br />Along with the fact it's a 15bit counter I would tend to believe it's a CPU cycle counter.  Firefly only said his data was preliminary and that games he ran worked fine without an IRQ at all since they didn't use it.  I suspect it isn't a scanline counter at all...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jun 03, 2012 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">As for the 'firing' terminology it kinda confused me at first as well.  I imagine it is similar to all other IRQs.  Fired means for an IRQ to be generated, it's not very easy for a mapper to insert a BRK via hardware.</div><br /><br />But when you say "an IRQ to be generated" are you stating that the mapper literally has a trace that goes between it and the CPU's IRQ pin?  If so, okay, then that's the behaviour I was trying to determine -- if a mapper-generated IRQ correlated with the 6502's IRQ handler (e.g. IRQ/BRK vector is jumped to, etc.).  Actually, you might answer that below...<br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">For me it's easiest to explain in hardware because that's what it is.  Basically when a IRQ gets triggered by the counter the mapper pulls the IRQ line low.  It HOLDS the line low until the CPU acknowledges the IRQ either by clearing or disabling the IRQ.  If you access (read/write) to $5000-6000 it will acknowledge the IRQ.  This will clear the IRQ and the mapper releases the IRQ line allowing it to be pulled high again.  IRQs will still be enabled, you're just clearing the individual IRQ and setting it up for the next time around.</div>
<br />
<br />...yep, you answered it.  :-)  Okay, this "mostly" makes sense; the first half does, the rest is a bit vague.
<br />
<br />How does SEI fit in to all of this?  Normally if the i bit of P (CPU status/state register) is set to 1, IRQs (not including NMI) are ignored by the CPU.  I ask because I see some mappers (like MMC3) where you can enable/disable IRQ generation using mapper registers, and I guess I don't see why that's necessary when SEI would effectively inhibit that.
<br />
<br />Apologies but I cannot buy in to the whole "hardware level" thing.  There has to be a symbiotic relationship between these things; console programmers should not be expected to know about circuitry and behaviour of hardware which holds an associated pin high/low.  Likewise, emulator authors shouldn't be expected to have any familiarity with this either.  Sorry for bitching/ranting, but when I have people asking me to explain something, the last thing I'm going to refer to is a bunch of EE-specific hullabaloo.  There has to be middle ground.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Jun 03, 2012 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">How does SEI fit in to all of this?  Normally if the i bit of P (CPU status/state register) is set to 1, IRQs (not including NMI) are ignored by the CPU.  I ask because I see some mappers (like MMC3) where you can enable/disable IRQ generation using mapper registers, and I guess I don't see why that's necessary when SEI would effectively inhibit that.</div><br /><br />Well you're on the right track.  You basically have to have IRQs enabled on the mapper and in the CPU with SEI.  I agree that they effectively do the same thing.  BUT if you disable the mapper's IRQ you can still use other IRQs such as sound.  If you disable IRQs in the CPU you'd ignore ALL IRQ's not just the ones coming from the mapper. <br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Apologies but I cannot buy in to the whole "hardware level" thing.  There has to be a symbiotic relationship between these things; console programmers should not be expected to know about circuitry and behaviour of hardware which holds an associated pin high/low.  Likewise, emulator authors shouldn't be expected to have any familiarity with this either.  Sorry for bitching/ranting, but when I have people asking me to explain something, the last thing I'm going to refer to is a bunch of EE-specific hullabaloo.  There has to be middle ground.</div>
<br />
<br />No I agree it can be explained in a programmer's perspective, I'm just not very good at it since most of my experience with these items is on a hardware level I tend to think in that manner.  I would argue though that a programmer who clearly understands the hardware can make more sense of what's happening from a programming perspective.  I realize not everyone sees it this way.  But anytime I've had issues writing assembly (for the 6502 and any other processor) it's because I'm missing how things work on a hardware level.  I'd also say that I've seen emulator authors having issues because they make things too complex by staying way from the hardware level.  MMC3 scanline counting is the predominant one that comes to mind.  Not to create more debate but to me the middle ground is understanding ALL levels <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Jun 03, 2012 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, 6502 disables interrupts when it handles an interrupt.  It has to, otherwise it would end up in an infinite recursion loop.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Jun 03, 2012 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Also, 6502 disables interrupts when it handles an interrupt.  It has to, otherwise it would end up in an infinite recursion loop.</div>
<br />
<br />Yes but to be clear the mapper's IRQ is still active after the CPU internally disables interrupts.  The IRQ handler should acknowledge/clear the IRQ on the mapper before returning from interrupt.  If you didn't as soon as the CPU came out of interrupt it would so right back again because the IRQ was never cleared on the mapper.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sun Jun 03, 2012 12:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">But when you say "an IRQ to be generated" are you stating that the mapper literally has a trace that goes between it and the CPU's IRQ pin?  If so, okay, then that's the behaviour I was trying to determine -- if a mapper-generated IRQ correlated with the 6502's IRQ handler (e.g. IRQ/BRK vector is jumped to, etc.).  Actually, you might answer that below...</div><br />Looking at the <a href="http://nesdev.com/Ntd_8bit.jpg" class="postlink">Famicom schematic</a> it is effectively the case. If anything (likely a mapper...) in the cartridge decide to pull down the IRQ line, then guess the 2A03 vectors to the IRQ vector, provided the I flag is clear.<br /><br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">How does SEI fit in to all of this?  Normally if the i bit of P (CPU status/state register) is set to 1, IRQs (not including NMI) are ignored by the CPU.  I ask because I see some mappers (like MMC3) where you can enable/disable IRQ generation using mapper registers, and I guess I don't see why that's necessary when SEI would effectively inhibit that.<br /></div><br />Because when you set the I flags ALL IRQs are disabled — including the one internal to the 2A03, that is the frame and DMC IRQs. One might want to disable mapper IRQs yet keep other sources of IRQ active. Don't know if any game use more than one source of IRQs though.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Apologies but I cannot buy in to the whole "hardware level" thing.  There has to be a symbiotic relationship between these things; console programmers should not be expected to know about circuitry and behaviour of hardware which holds an associated pin high/low.  Likewise, emulator authors shouldn't be expected to have any familiarity with this either.  Sorry for bitching/ranting, but when I have people asking me to explain something, the last thing I'm going to refer to is a bunch of EE-specific hullabaloo.  There has to be middle ground.</div>
<br />Well I guess if you ask hardware-oriented questions, you get hardware-oriented answers, but maybe you should point out what might help you more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 03, 2012 12:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">But when you say "an IRQ to be generated" are you stating that the mapper literally has a trace that goes between it and the CPU's IRQ pin?</div><br />Yes. Games using the mapper IRQ have a trace from the mapper to the /IRQ pin on the Game Pak edge connector. This includes the FDS system card and games containing MMC3/MMC6, MMC5, FME-7, or any of several other advanced ASIC mappers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If so, okay, then that's the behaviour I was trying to determine -- if a mapper-generated IRQ correlated with the 6502's IRQ handler (e.g. IRQ/BRK vector is jumped to, etc.).  Actually, you might answer that below</div><br />I thought it had already been answered for mappers in general.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I ask because I see some mappers (like MMC3) where you can enable/disable IRQ generation using mapper registers, and I guess I don't see why that's necessary when SEI would effectively inhibit that.</div>
<br />As ~J-@D!~ pointed out while I was typing this, SEI disables all interrupts. Mapper controls disable only mapper interrupts, just as $4010 disables APU DMC interrupts and $4017 disables APU frame counter interrupts.
<br />
<br />Let me try to explain what the programmer sees, whether the IRQ is fired by the APU or by the mapper:
<br />
<br />CLI sets the CPU's interrupt priority (I flag) to 0; SEI sets it to 1. When something "fires an IRQ", and the interrupt priority is 0, the CPU pushes the old priority, sets the priority to 1, and calls the interrupt service routine (ISR) that $FFFE-$FFFF points to. This ISR should check for which interrupt source caused the IRQ and acknowledge the interrupt. Acknowledging an interrupt is like hitting a snooze bar; if the program does not do this, then as soon as it RTIs back to the main program (which restores the previous priority), the CPU will call the ISR again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jun 03, 2012 12:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yep thanks guys -- got it covered at this point.  :)  Yay for answers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>_Bnu</b> [ Mon Jun 04, 2012 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Would anyone happen to know exactly what happens when a write is performed to either one of this mapper's IRQ registers? I mean, aside from acknowledging it, does it reset the IRQ counter? (I do know about the bit that enables the IRQ, but that's about it.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Jun 04, 2012 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm curious about this as well (what _Bnu asked).  I'm also curious how the mapper would know how to increment based on CPU cycles.
<br />
<br />I thought "maybe there's some kind of crystal on all the N106 boards, which is identical in frequency to the CPU, so the counter increments at the same rate?" but that doesn't seem to be the case:
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=8570">http://nesdev.com/bbs/viewtopic.php?t=8570</a><!-- m -->
<br />
<br />How does this actually work?  Meaning, how does a CPU cycle incrementing result in the N106 IRQ counter incrementing?  I didn't think there were pins to/from the cart/console that provided this sort of thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Mon Jun 04, 2012 12:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"> I didn't think there were pins to/from the cart/console that provided this sort of thing.</div>
<br />I'm pretty sure someone will ninja this reply with the schematic that shows one of the clock phases going to the cartridge.  M2?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Jun 04, 2012 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, M2.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>