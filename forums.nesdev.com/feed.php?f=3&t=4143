<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=4143" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-06-05T05:26:43-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=4143</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-06-05T05:26:43-07:00</updated>
<published>2008-06-05T05:26:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33905#p33905</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33905#p33905"/>
<title type="html"><![CDATA[Emulation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33905#p33905"><![CDATA[
See <a href="http://nesdevwiki.org/index.php/PPU_Frame_Timing" class="postlink">PPU frame timing</a> on the wiki.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Jun 05, 2008 5:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2008-06-05T03:31:11-07:00</updated>
<published>2008-06-05T03:31:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33904#p33904</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33904#p33904"/>
<title type="html"><![CDATA[Emulation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33904#p33904"><![CDATA[
I know now that there are 29780.5 clock cycles per frame with the BG enabled, and 29780.666666666666666666666666667 disabled. This is convenient because when the BG is enabled you can just run one frame for 29780 and the next for 29781, and the when the BG is disabled you can just run one frame for 29780 and the next two for 29781. However, is there a bit which the NES uses to detect how long a frame must be?<br /><br />For instance, if by cycle 0 of VBlank scanline 0 the BG is enabled then the frame is ... cycles long else ... cycles long<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Thu Jun 05, 2008 3:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2008-06-04T06:05:46-07:00</updated>
<published>2008-06-04T06:05:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33877#p33877</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33877#p33877"/>
<title type="html"><![CDATA[Emulation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33877#p33877"><![CDATA[
Oops. Seems like the emulator was firing NMI's at the <em>end</em> of VBlank rather than the start. Problem fixed now, thanks. <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Wed Jun 04, 2008 6:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2008-06-03T11:07:36-07:00</updated>
<published>2008-06-03T11:07:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33862#p33862</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33862#p33862"/>
<title type="html"><![CDATA[Emulation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33862#p33862"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">This way, the PPU is allowed to catchup, before a modification is made. Is there something wrong with this method then?<br /></div><br />No; catchup before modification is what works. In your first message, you said you do catchup <em>after</em>:<br /><br /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br />I have made the catchup afterwards, to the same effect.<br /></div></div><br /><br />No. What I meant was, when I tried to catchup after, that had the same effect. Anyway I passed all of your basic timing tests (cpu_timing_test, cpu_timing_test4, cpu_timing_test5, cpu_timing_test6), so a timing error is very unlikely? (You tell me <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />It seems to me the VRAM address doesn't equal a desirable value when the first pixel is rendered. This is probably what is causing the screen to be all shaken up. Normally a game has the VRAM address set to 0000h before rendering, and games like Adventure Island slowly but surely have their VRAM addresses higher and higher at the start of rendering.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Tue Jun 03, 2008 11:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-06-03T11:00:05-07:00</updated>
<published>2008-06-03T11:00:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33861#p33861</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33861#p33861"/>
<title type="html"><![CDATA[Emulation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33861#p33861"><![CDATA[
<div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br />This way, the PPU is allowed to catchup, before a modification is made. Is there something wrong with this method then?<br /></div><br />No; catchup before modification is what works. In your first message, you said you do catchup <em>after</em>:<br /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br />I have made the catchup afterwards, to the same effect.<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Jun 03, 2008 11:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2008-06-03T04:54:44-07:00</updated>
<published>2008-06-03T04:54:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33853#p33853</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33853#p33853"/>
<title type="html"><![CDATA[Emulation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33853#p33853"><![CDATA[
Er, averate = Average + Rate, or just a typo?  <img src="http://forums.nesdev.com/images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">__forceinline void cNES::Register2005Write&#40;&#41;<br />&#123;<br />   RenderScanline&#40;&#41;;<br /><br />   if &#40;!PPU.Latch&#41; &#123;<br />      PPU.tempAddress &amp;= 0xFFE0;<br />      PPU.tempAddress += &#40;&#40;CPU.Databus &amp; 0xF8&#41; &gt;&gt; 3&#41;;<br />      PPU.X = &#40;CPU.Databus &amp; 0x07&#41;;<br />      PPU.Latch = 1;<br />   &#125;<br />   else &#123;<br />      PPU.tempAddress &amp;= 0x0C1F;<br />      PPU.tempAddress += &#40;&#40;CPU.Databus &amp; 0xF8&#41; &lt;&lt; 2&#41;;<br />      PPU.tempAddress += &#40;&#40;CPU.Databus &amp; 0x07&#41; &lt;&lt; 12&#41;;<br />      PPU.Latch = 0;<br />   &#125;<br />&#125;</div><br /><br />This way, the PPU is allowed to catchup, before a modification is made. Is there something wrong with this method then?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Tue Jun 03, 2008 4:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-06-03T10:57:47-07:00</updated>
<published>2008-06-03T04:48:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33852#p33852</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33852#p33852"/>
<title type="html"><![CDATA[Emulation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33852#p33852"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There are (NTSC) 89342 PPU cycles per even frame. Therefore there should be 29780.666666666666666666666666667 CPU cycles per frame.<br /></div><br />Actually, an average of exactly 29780.5 CPU cycles per frame when rendering is enabled continuously (341*262 PPU clocks for first frame, 341*262-1 PPU clocks for second, etc.). The 29780+2/3 is only when rendering is disabled.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />iii. Whenever a PPU register is written to, the emulator catches up first, and then allows the modifications. I have made the catchup afterwards, to the same effect.<br /></div><br />The same effect being a jumpy, messed up screen? How do you manage to do the PPU write while the PPU is still in the state it was last write, <em>then</em> catch it up?!?<br /><br />EDIT: fixed typo in "average" above<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Jun 03, 2008 4:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2008-06-03T03:44:58-07:00</updated>
<published>2008-06-03T03:44:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33851#p33851</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33851#p33851"/>
<title type="html"><![CDATA[Emulation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4143&amp;p=33851#p33851"><![CDATA[
So now I have finally introduced a catchup method for my emulator. Instead of just catching the PPU and the APU up straight away, they are only allowed to be caught up when there is a write to a register. However, most games have the same problem, namely the screen will shudder all over the place and I think that I have tracked it down to the code switching the Background and Sprites on and off constantly. This of course makes the VRAM pointer go crazy, causing the screen to shake and all kinds of problems. I have observed this behaviour mainly in Spy Vs Spy, which constantly switches the Background and Sprites on and off all the time. But it seems to me that the game itself does this, not some emulator bug...<br /><br />I know that the timing of the code is absolutely fine, so that can't be it. So I'd like to clarify a few things first.<br /><br />i. There are (NTSC) 89342 PPU cycles per even frame. Therefore there should be 29780.666666666666666666666666667 CPU cycles per frame. (I am currently using 29781 per frame, and this makes the emulator 1 PPU cycle out, but I know that isn't the cause of my problems.)<br /><br />ii. If either the Background or the Sprites are on, then render the PPU as normal, but if both are off, then there are no PPU memory fetches and the VRAM pointer is left alone. All that happens is the colour of Background's Palette entry #0 is rendered, unless the VRAM pointer is in the 3F00-1F region, then that colour is rendered instead. Also the VBlank flag is set/cleared too.<br /><br />iii. Whenever a PPU register is written to, the emulator catches up first, and then allows the modifications. I have made the catchup afterwards, to the same effect.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Tue Jun 03, 2008 3:44 am</p><hr />
]]></content>
</entry>
</feed>