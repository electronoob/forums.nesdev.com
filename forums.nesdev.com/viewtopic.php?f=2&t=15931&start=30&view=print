<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Koei bytecode</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Koei bytecode</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=15931">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=15931</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Mon Jun 12, 2017 5:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Why not look at and extract the 16bit KOEI titles to see if they already have the above in 16bit?</div><br /><br />Apparently their early SNES titles (e.g. Romance of the Three Kingdoms II) do use the same bytecode. Because the virtual machine has no support for an address space larger than 16 bits, they have to constantly copy bytecode and data overlays into RAM, simulating a bankswitched 64K machine.<br /><br />I had a very brief look at a couple of later SNES Koei games (Uncharted Waters 2 and Genghis Khan 2) and they both look like compiler-generated 65816 code (tons of stack-relative addressing, etc.). So it looks like Koei switched to a different compiler at some point, one that produced native 65816 rather than bytecode. It's a bit interesting that the Famicom version of Genghis Khan 2 (Aoki Ookami to Shiroki Mejika: Genchou Hishi) is interpreted while the SNES version is native 65816.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Fri Jun 16, 2017 6:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm now investigating the assembly language initialization/NMI/syscall code, or &quot;BIOS&quot; as Koei <a href="https://tcrf.net/Gemfire_%28NES%29" class="postlink">apparently called it</a>. In the MMC5 games there appear to be three major versions of the BIOS: one used in Nobunaga's Ambition 2, Bandit Kings, Ishin no Arashi and Rot3K2 (with minor changes per game); one used in Uncharted Waters and L'Empereur; and a final version used in Gemfire, Genghis Khan 2 and Nobunaga's Ambition 3 (aka Lord of Darkness on the SNES and Genesis).<br /><br />The US versions of Nobunaga's Ambition 2, Bandit Kings and Rot3K2 are actually kind of hybrids between BIOS version 1 and 2: the RAM addresses they use are version 1 (a ton of variables got shuffled in and out of zero page between the versions--I guess someone did some profiling <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />) but a number of code changes from version 2 were backported in. The backported changes appear to be mainly sound related--version 1 uses the MMC5 channels exclusively for melodic sound effects, but of course those channels aren't usable on a stock NES, so they had to backport the version 2 sound engine which can share channels between BGM and effects in order to move those sound effects to the built-in APU channels.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CaH4e3</b> [ Wed Aug 02, 2017 10:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />oh, lol... accidentally I'm doing the same re work for a couple of week already, but haven't seen this topic by now...<br />I was going to write some kind of documentation too, but seems this is not needed anymore. here is a complete info already, better than I can write myself. I even got here some fixes to my custom disasm scripts...<br /><br />as a side note, I'd like to mention, KOEI's C compiler (strong evidence this is actually a C code is here <!-- m --><a class="postlink" href="https://tcrf.net/Aerobiz_Supersonic_(SNES">https://tcrf.net/Aerobiz_Supersonic_(SNES</a><!-- m -->)) has an ability to produce the native 6502 code as well as bytecode at least since 1988. not only the SNES version of uncharted waters 2 has this auto generated native code, but almost every NES title. usually, most of the native code you could see in the NES games by KOEI is autogenerated. except the interpretator itself, bios and some helpers. the rest is for sure autogenerated, maybe only with later manual polishing... looks like they wanted to make some portions of code work faster, or even did some profiling for most frequently used functions. seems they just couldn't compile all the code in native 6502 since it uses a lot more space. the game with maximum autogenerated native code is L'Empereur, almost half of scrips compiled as native code.<br /><br />if someone interested, I can provide some practical tools to decompile these scrips (ida loader+scripts). doubt I will recreate some kind of KOEI's compilator. but at least I can provide a solution to reassemble the existing code with all links and functions. with using some asm macroses, you could rewrite all bytecode in a nice looking readable and editable sourses. maybe for those who wanted to translate some japaneseonly games (secrets and unused debug already found by me lol, the main reason I started to do all this thing myself)...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Wed Aug 02, 2017 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">CaH4e3 wrote:</div><div class="quotecontent">if someone interested, I can provide some practical tools to decompile these scrips (ida loader+scripts). doubt I will recreate some kind of KOEI's compilator. but at least I can provide a solution to reassemble the existing code with all links and functions. with using some asm macroses, you could rewrite all bytecode in a nice looking readable and editable sourses. maybe for those who wanted to translate some japaneseonly games (secrets and unused debug already found by me lol, the main reason I started to do all this thing myself)...</div><br /><br />I don't own or use IDA (I've written my own extensible disassembler instead) but I'm interested in seeing your decompiler script anyway.<br /><br />Did you discover if the apparently redundant bytes in the stack frame are used for anything?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CaH4e3</b> [ Thu Aug 03, 2017 11:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />so, the scripts mostly useless for you without ida. they firmly depends on my other custom disasm scripts. but I may try to make some demo what they do and what I can do with it...<br /><br />and no, I haven't digeed so much in stack to check if there any oddities <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> i'm sure, any oddities, is just a genuine &quot;bugs&quot; or redundancy of the compiler. the bioscall always copy 22 bytes of stack in arguments buffer in any case, even if there is only one or two args (so maybe because of that they did some fast versions of bios call using only first arg to switch banks or something..)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Thu Aug 03, 2017 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">CaH4e3 wrote:</div><div class="quotecontent">so, the scripts mostly useless for you without ida. they firmly depends on my other custom disasm scripts. but I may try to make some demo what they do and what I can do with it...<br /><br />and no, I haven't digeed so much in stack to check if there any oddities <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> i'm sure, any oddities, is just a genuine &quot;bugs&quot; or redundancy of the compiler. the bioscall always copy 22 bytes of stack in arguments buffer in any case, even if there is only one or two args (so maybe because of that they did some fast versions of bios call using only first arg to switch banks or something..)</div><br /><br />Even if I can't run your scripts without IDA, I can port them to my own disassembler <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Well, I've found one use for the &quot;hole&quot; at frameptr+8. Your tip that there was also compiler-generated native code was just what I needed. Take a look at the routine at 1F/E24B in Ishin no Arashi, 1F/E37A in Rot3K2 or 1F/E2E3 in L'Empereur (the same routine exists in BKoAC and probably most/all of the games, but it's not always in the fixed bank. I guess the games that have it in the fixed bank are the ones with the most compiler-generated native code)<br /><br />The purpose of this routine seems to be to create a bytecode-compatible stack frame for a native-code function, and to clean up that stack frame when that function exits (it does some 6502 stack manipulation to wedge its cleanup code after the RTS of the &quot;wrapped&quot; function). Anyway, this wrapper routine uses the byte at frameptr+8 to store the number of bytes it has copied from $0080 to the bytecode stack, in order to restore that number of bytes back to $0080 when the wrapped native-code function exits.<br /><br />It looks like compiler-generated native code uses $0080~ as local variable storage, and each native-code function uses this wrapper to preserve its caller's local variables (if any) and to allocate stack space for the arguments it needs to pass to any functions that it calls.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CaH4e3</b> [ Fri Aug 04, 2017 10:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">Even if I can't run your scripts without IDA, I can port them to my own disassembler <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />enjoy <!-- m --><a class="postlink" href="https://pastebin.com/sMW8wLXS">https://pastebin.com/sMW8wLXS</a><!-- m --> <br />me commented some portions of code, the rest is my own or system library functions...<br /><br />all nes koei games has a full list of bitecode procedures and can be disassembled automatically using my scripts and ida <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />. but the offsets are for my own loader, they has no correlation with real offsets except lower bits...<br /><br />some opcodes I didn't reversed deeply and just nailed briefly, I took from your description (comments are given). bitfield opcodes never used in the nes bytecode (as I see), as well as the relative branches... so I just didn't care about it by now..<br /><br /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">Well, I've found one use for the &quot;hole&quot; at frameptr+8. Your tip that there was also compiler-generated native code was just what I needed. Take a look at the routine at 1F/E24B in Ishin no Arashi, 1F/E37A in Rot3K2 or 1F/E2E3 in L'Empereur (the same routine exists in BKoAC and probably most/all of the games, but it's not always in the fixed bank. I guess the games that have it in the fixed bank are the ones with the most compiler-generated native code)<br /><br />The purpose of this routine seems to be to create a bytecode-compatible stack frame for a native-code function, and to clean up that stack frame when that function exits (it does some 6502 stack manipulation to wedge its cleanup code after the RTS of the &quot;wrapped&quot; function). Anyway, this wrapper routine uses the byte at frameptr+8 to store the number of bytes it has copied from $0080 to the bytecode stack, in order to restore that number of bytes back to $0080 when the wrapped native-code function exits.<br /><br />It looks like compiler-generated native code uses $0080~ as local variable storage, and each native-code function uses this wrapper to preserve its caller's local variables (if any) and to allocate stack space for the arguments it needs to pass to any functions that it calls.</div><br /><br />this is actually a native version of the bytecode exec procedure. it is used for every native procedure start. the same way as for bytecode procedures. but instead this functions executes the real 6502 asm and then returns back to the caller routine. it does the same thing as for bytecode procedures, prepares the stack and executes the native code instead of the bytecode. it gets the same 16-bit signed value to assign the local variables buffer for procedure, but has an extra parameter byte, which is used to backup a number of vm stack bytes to 80-buffer. it will be stored in your 8-byte stack offset. but, I haven't seen any functions used any value apart from 0 here. l'empereur and uncharted waters never used this byte for sure. it's always 0. so copy to 80 buffer never used there. I doubt it used anywhere else... so this is for sure redundant leftover of some planned but never used feature of the compiler to save some stack parameters..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Fri Aug 04, 2017 8:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks to your script I see what the return address at frameptr+9 is used for, too. It isn't used by the bytecode interpreter but it is used by the native-code function call wrapper (the routine that's approximately equivalent to bytecode opcode $E9). I guess they wanted to make the stack frames identical between bytecode and native-code functions to make debugging easier.<br /><br />A funny thing about that routine is that the &quot;stack adjust amount&quot; parameter that it takes includes the return address! So even function calls with no arguments need to use a value of 2.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">this is actually a native version of the bytecode exec procedure. it is used for every native procedure start. the same way as for bytecode procedures. but instead this functions executes the real 6502 asm and then returns back to the caller routine. it does the same thing as for bytecode procedures, prepares the stack and executes the native code instead of the bytecode. it gets the same 16-bit signed value to assign the local variables buffer for procedure, but has an extra parameter byte, which is used to backup a number of vm stack bytes to 80-buffer. it will be stored in your 8-byte stack offset. but, I haven't seen any functions used any value apart from 0 here. l'empereur and uncharted waters never used this byte for sure. it's always 0. so copy to 80 buffer never used there. I doubt it used anywhere else... so this is for sure redundant leftover of some planned but never used feature of the compiler to save some stack parameters..</div><br /><br />It's actually the other way around: on function entry it copies n bytes <em>from</em> $80 <em>to</em> the stack, and on function exit it copies them from the stack back to $80.<br /><br />I thought that feature might be used for local variables that are pointers (and thus have to be in zero page) but I guess the compiler-generated native code just copies pointer variables from the stack to scratch space (e.g. $08-$14) upon use, rather than keeping them in zero page for the entirety of a function?<br /><br />I've reverse engineered the entire MMC5 BIOS, all three versions (except a couple of version-1-only syscalls that I can't figure out and might actually be incomplete/nonfunctional) Are you interested in a description or have you already done it yourself? I've also reverse engineered the sound program if anyone is interested (the one used in Mahjong Taikai, Famicom Top Management and all the MMC5 games--the first three MMC1 games have a totally different sound program which I've barely looked at)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CaH4e3</b> [ Sun Aug 06, 2017 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">It's actually the other way around: on function entry it copies n bytes <em>from</em> $80 <em>to</em> the stack, and on function exit it copies them from the stack back to $80.<br /><br />I thought that feature might be used for local variables that are pointers (and thus have to be in zero page) but I guess the compiler-generated native code just copies pointer variables from the stack to scratch space (e.g. $08-$14) upon use, rather than keeping them in zero page for the entirety of a function?</div><br />yeah, you right. but it seem just more like an attempt to have a separate set of bytecode registers for a native procedures which is overwrites those from procedural stack. if used, they may run two separate native procedures with the same set of registers... maybe for cases when some other inbetween  procedure changes it somehow... but anyway, it's never used<br /><br /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">I've reverse engineered the entire MMC5 BIOS, all three versions (except a couple of version-1-only syscalls that I can't figure out and might actually be incomplete/nonfunctional) Are you interested in a description or have you already done it yourself? I've also reverse engineered the sound program if anyone is interested (the one used in Mahjong Taikai, Famicom Top Management and all the MMC5 games--the first three MMC1 games have a totally different sound program which I've barely looked at)</div><br /><br />I nailed some functions for some games of my personal interest but maybe someone will like to see it too <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Sun Aug 06, 2017 10:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After disassembling some native-code routines in Ishin no Arashi, I understand some things I didn't understand before. In the compiler-generated native code, zero page address $06-$07 (which in the interpreter is the instruction pointer) is used as a second frame pointer instead, and contains the value frameptr - fastlocals - 256. The &quot;- 256&quot; is because the 6502 doesn't support indexed addressing with a negative index. Local variables on the stack are addressed using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&#40;$06&#41;,Y</tt> where Y = #$FE for the first (word-sized) local, #$FC for the second local, etc. I was wondering why the stack frame setup did <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">DEC $07</tt> before jumping to the wrapped code and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">INC $07</tt> after returning from it, but now I see why.<br /><br />ETA: Bandit Kings of Ancient China <em>does</em> use the &quot;fast local variables at $80&quot; feature; here's an example of a function that uses it (output from my disassembler):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">14/AAE0: 20 99 B1&nbsp; &nbsp; &nbsp; jsr CreateStackFrame<br />14/AAE3: 04 26 FF&nbsp; &nbsp; &nbsp; frame 4,-218<br />14/AAE6: A0 0B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ldy #$0B<br />14/AAE8: B1 04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda (frameptr),y<br />14/AAEA: 85 80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $80<br />14/AAEC: C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; iny<br />14/AAED: B1 04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda (frameptr),y<br />14/AAEF: 85 81&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $81<br />14/AAF1: C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; iny<br />14/AAF2: B1 04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda (frameptr),y<br />14/AAF4: 85 82&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $82<br />14/AAF6: C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; iny<br />14/AAF7: B1 04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda (frameptr),y<br />14/AAF9: 85 83&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $83<br />14/AAFB: 8A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; txa<br />14/AAFC: 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />14/AAFD: 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />14/AAFE: 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />(snip...)</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CaH4e3</b> [ Mon Aug 07, 2017 11:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">ETA: Bandit Kings of Ancient China <em>does</em> use the &quot;fast local variables at $80&quot; feature; here's an example of a function that uses it (output from my disassembler):</div><br /><br />I see native code uses it as a vars/regs as well<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BANK14:A61B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; loc_20661B:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; CODE XREF: BANK14:A64Bj<br />BANK14:A61B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; BANK14:loc_20669Cj<br />BANK14:A61B 18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; *a<br />BANK14:A61C A9 07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA&nbsp; &nbsp; &nbsp;#7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; *a<br />BANK14:A61E 65 80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ADC&nbsp; &nbsp; &nbsp;byte_80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; *a<br />BANK14:A620 85 80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA&nbsp; &nbsp; &nbsp;byte_80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; *a<br />BANK14:A622 8A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TXA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; *a<br />BANK14:A623 65 81&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ADC&nbsp; &nbsp; &nbsp;byte_81&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; *a<br />BANK14:A625 85 81&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA&nbsp; &nbsp; &nbsp;byte_81&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; *a<br />BANK14:A627<br />BANK14:A627&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; loc_206627:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; CODE XREF: BANK14:A618j<br />BANK14:A627 A1 80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA&nbsp; &nbsp; &nbsp;(byte_80,X)&nbsp; &nbsp; &nbsp;; *a<br />BANK14:A629 A0 01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDY&nbsp; &nbsp; &nbsp;#1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; *a<br />BANK14:A62B 11 80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ORA&nbsp; &nbsp; &nbsp;(byte_80),Y&nbsp; &nbsp; &nbsp;; *a<br />BANK14:A62D F0 03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ&nbsp; &nbsp; &nbsp;loc_206632&nbsp; &nbsp; &nbsp; ; *a<br />BANK14:A62F 4C 4E A6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;JMP&nbsp; &nbsp; &nbsp;loc_20664E&nbsp; &nbsp; &nbsp; ; *a<br /></div><br />it seems, most of native code may be decompiled the same way as bytecode, except maybe some optimizations... like they just unroll all bytecode with an native asm representing every single command, maybe with some opts

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Mon Aug 28, 2017 10:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Heehee... can you find the bugs in these implementations of the C library functions <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">abs&#40;&#41;</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">strlen&#40;&#41;</tt>? Hints: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stackptr+2</tt> points to the first argument on the stack, and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">left</tt> holds the (16-bit) function return value (meaning <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">left+2</tt> and so forth are effectively scratch space)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">abs:<br />&nbsp; &nbsp; ldy #2<br />&nbsp; &nbsp; lda (stackptr),y<br />&nbsp; &nbsp; sta left<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; lda (stackptr),y<br />&nbsp; &nbsp; sta left+1<br />&nbsp; &nbsp; bpl done<br />&nbsp; &nbsp; eor #$FF<br />&nbsp; &nbsp; sta left+1<br />&nbsp; &nbsp; lda left<br />&nbsp; &nbsp; eor #$FF<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc #1<br />&nbsp; &nbsp; sta left<br />done:<br />&nbsp; &nbsp; rts</div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">strlen:<br />&nbsp; &nbsp; ldy #3<br />&nbsp; &nbsp; lda (stackptr),y<br />&nbsp; &nbsp; sta left+3<br />&nbsp; &nbsp; dey<br />&nbsp; &nbsp; lda (stackptr),y<br />&nbsp; &nbsp; sta left+2<br />&nbsp; &nbsp; ldy #0<br />&nbsp; &nbsp; sty left<br />&nbsp; &nbsp; sty left+1<br />loop:<br />&nbsp; &nbsp; lda (left+2),y<br />&nbsp; &nbsp; beq done<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; bne loop<br />&nbsp; &nbsp; inc left+1<br />&nbsp; &nbsp; jmp loop<br />done:<br />&nbsp; &nbsp; sty left<br />&nbsp; &nbsp; rts</div><br /><br />I'd be surprised if the abs() bug doesn't impact game logic in at least one game, most likely in something non-obvious like AI (not all the games contain all the library functions, but the games that have abs() do call it...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CaH4e3</b> [ Mon Aug 28, 2017 3:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Abs does not increment higher nibble of negative value after inverting it. Strlen does not increment hi nibble of str pointer as well as the result. But seems they have not so much strings longer than 256 or they rarely need strlen counting...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Optiroc</b> [ Sat Feb 03, 2018 5:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I missed this thread, very interesting stuff!<br /><br />I recently reverse engineered parts of Super Robot Wars Gaiden Masōkishin, and it turns out that the game is entirely orchestrated by a bytecode interpreter. I couldn’t say if the bytecode is compiled from C, but I would guess not actually. <br /><br />The instruction set includes all the primitives to facilitate that (the expected load, store, goto, call, return, etc), but a lot of the opcodes do very specific game engine stuff. So the bytecode is maybe more likely compiled from some simple bespoke scripting language. I specifically dug into it to alter the behavior of music playback/queuing, so I’ve not looked at enough bytecode to say anything with certainty. If anyone is interested to look deeper into this I’d be happy to clean up my notes and collaborate on a deeper reverse engineering effort!

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>