<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - cycle for cycle stuff</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">cycle for cycle stuff</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=547">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=547</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>5</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun May 07, 2006 3:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you write in C, you aren't specifying the machine code that comes out; you're specifying the external side-effects that must occur when executing the code. Since the two have the same side-effects, and they are reasonably easy for a compiler to optimize and occur commonly, compilers generate the same code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Sun May 07, 2006 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">The return would cause the function to exit straight away, whilst the break would cause the program exit the switch table and then return from the function. Surely without the break is faster?</div>
<br />No, it is not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Sun May 07, 2006 7:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">The return would cause the function to exit straight away, whilst the break would cause the program exit the switch table and then return from the function. Surely without the break is faster?</div>
<br />They should have exactly the same performance on any decent compiler, because of the optimizer.  Those two programs are exactly equivalent if you convert them into a DAG representing their control flow (which the optimizer does, probably even at -O1 or -O0).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon May 08, 2006 5:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">Compile both versions and compare the binaries using an hexa editor. ^_^;;..</div>
<br />
<br />Never!
<br />
<br />I believe you guys. However, if you had a really crap compiler then I would be right <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> .

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Tue May 09, 2006 9:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Observe the following;
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Read-Modify-Write instructions &#40;ASL, LSR, ROL, ROR, INC, DEC,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SLO, SRE, RLA, RRA, ISB, DCP&#41;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; &nbsp;address&nbsp; R/W description<br />&nbsp; &nbsp; &nbsp; &nbsp;--- --------- --- ------------------------------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp; &nbsp;R&nbsp; fetch opcode, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp; &nbsp;R&nbsp; fetch low byte of address, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp; &nbsp;R&nbsp; fetch high byte of address,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;add index register X to low address byte,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; address+X* R&nbsp; read from effective address,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fix the high byte of effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 5&nbsp; address+X&nbsp; R&nbsp; re-read from effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 6&nbsp; address+X&nbsp; W&nbsp; write the value back to effective address,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and do the operation on it<br />&nbsp; &nbsp; &nbsp; &nbsp; 7&nbsp; address+X&nbsp; W&nbsp; write the new value to effective address<br /></div>
<br />
<br />When it says read from effective address would that affect the VRAM register if the address were $2007? Also is it neccessary to read, then re-read or can that be done just the once? (my concern being that some kind of mapper or external device may cause a bank switch or something)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Tue May 09, 2006 12:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />blargg tested this and it does effect the ppu registers.  so if there were 2 reads or what ever then the ppu would both reads.  i looked a 1 game and it used the ABS addressing mode for ppu registers.  perhaps thats why ?  maybe check to see what addressing mode games use to read/write the ppu registers and write to the mmc registers.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Tue May 09, 2006 6:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mattmatteh wrote:</div><div class="quotecontent">blargg tested this and it does effect the ppu registers.  so if there were 2 reads or what ever then the ppu would both reads.  i looked a 1 game and it used the ABS addressing mode for ppu registers.  perhaps thats why ?  maybe check to see what addressing mode games use to read/write the ppu registers and write to the mmc registers.<br /><br />matt</div>
<br />The CPU is either reading or writing at some address in every cycle.  That table lists the addresses, too.  If you want the most accurate emulation, you should simulate every read and every write (even the "dummy" ones that the CPU doesn't use the value of).  I don't know if there are any games that rely on that behaviour, but that's what the 6502 in the NES did.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue May 09, 2006 6:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">Observe the following;<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;...&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; address+X* R&nbsp; read from effective address,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fix the high byte of effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 5&nbsp; address+X&nbsp; R&nbsp; re-read from effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 6&nbsp; address+X&nbsp; W&nbsp; write the value back to effective address,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and do the operation on it<br />&nbsp; &nbsp; &nbsp; &nbsp; 7&nbsp; address+X&nbsp; W&nbsp; write the new value to effective address<br /></div><br /><br />When it says read from effective address would that affect the VRAM register if the address were $2007? Also is it neccessary to read, then re-read or can that be done just the once? (my concern being that some kind of mapper or external device may cause a bank switch or something)</div>
<br />Yes. Every read or write on $2007 advances the VRAM pointer, so this is advanced by 3 or 4 depending on whether index addition crosses a page boundary. And yes, if you want to emulate the bus accurately, you have to make both reads if index addition crosses a page boundary, and you have to make both writes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu May 11, 2006 11:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alright, figured I'd post about this here as well since we were discussing cooperative multithreading, etc previously in this thread.
<br />
<br />Basically, what I've found out about cooperative multithreading is that there is an implementation in Win95/NT3.51+ called Windows Fibers. On my Athlon 3500+, it is generally 10-15x slower to call SwitchToFiber(my_proc) than it is to call my_proc() directly. And it's also Win32-specific.
<br />
<br />However, I was able to write my own implementation of the library that works on any x86 target including Win32, Linux and FreeBSD (excepting maybe OSx86), and get that number down to 6-7x slower.
<br />
<br />My cothreading library creates separate stacks for each cothread, supports direct jumping or infinite call/return recursion of threads, and saves/restores everything the c/c++ ABI for win+lin+bsd specifies for each context switch (basically ebx+ebp+esi+edi, ignoring eax+ecx+edx+ST(0)-ST(7)+mm0-mm15). And context switches occur in roughly 14 opcodes, requiring no user&lt;&gt;kernel transisitons.
<br />
<br />The source to the library is here : <!-- m --><a class="postlink" href="http://byuu.cinnamonpirate.com/temp/libco_x86.asm">http://byuu.cinnamonpirate.com/temp/libco_x86.asm</a><!-- m -->
<br />
<br />And the entire package is here :
<br /><!-- m --><a class="postlink" href="http://byuu.cinnamonpirate.com/temp/libco_v03.zip">http://byuu.cinnamonpirate.com/temp/libco_v03.zip</a><!-- m -->
<br />
<br />This basically allows for exactly the kind of implementation I was talking about before, and should hopefully be very fast as well. Even though you have the overhead of switching contexts instead of just calling a subroutine, you should hopefully gain it back by not having to use a state machine (switch/case) every time you call your CPU core.
<br />
<br />So for example, the following code :
<br />main() -&gt; cpu_run() -&gt; switch(state) case OPCODE_EXEC: -&gt; exec_opcode() -&gt; switch(opcode) case 0xa9: -&gt; op_a9() -&gt; switch(opcode_cycle) case 2:
<br />Will become :
<br />main() -&gt; co_call(cpu_context) -&gt; /* we are now within case 2: */
<br />
<br />You also no longer *have* to break out of the CPU core after every opcode cycle, and you can just test the memory address, breaking only if it affects another unit (eg it is a PPU / APU read/write operation), or if a significant amount of time has passed. It also allows for more accuracy as you can trivially simulate bus hold delays now.
<br />
<br />The actual CPU core can be implemented exactly like an opcode-based core, putting the co_return() calls inside the op_read() and op_write() functions alone.
<br />
<br />So you gain more speed, more accuracy, and much cleaner code. But there are a few drawbacks to this apprach that will probably mean nobody ever uses this besides myself :
<br />
<br />1) Platform-dependance. The library is trivial to implement on any platform, but it would take a good programmer with knowledge of assembler to do it right.
<br />2) Context-switching requires flushing the pipeline/L1 cache or whatever, meaning performance will be worse on more excessively pipelined processors (such as the P4) compared to more moderate designs (Athlons, older processors ...). Basically, a lower clock multiplier will probably result in faster performance. Processors with more than 8 volatile registers could require significantly more time to save/restore the processor context.
<br />3) And this is the big one... you can't save and restore the state of threads in a platform-independant way, meaning you can't have savestates... it may be possible to save the context-buffer + stack into a savestate and restore it, but the format would change with even a minimal code change, breaking older savestates in the process. Power/reset events are still possible, one need only destroy and recreate the CPU thread.
<br />
<br />Always a tradeoff, right? I'm personally going to write a CPU+APU core, and then write the code to run them so that I have both an opcode-based, less accurate core supporting savestates, and a bus-accurate core that will not support savestates.
<br />
<br />So, ideas, comments? Would anyone else consider using something like this?
<br />
<br />-----
<br />
<br />An example opcode using cothreading :
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void op_lda_addr&#40;&#41; &#123;<br />&nbsp; aa.l = op_read&#40;regs.pc++&#41;;<br />&nbsp; aa.h = op_read&#40;regs.pc++&#41;;<br />&nbsp; cpu_io&#40;&#41;;<br />&nbsp; regs.a.l = op_read&#40;aa.w&#41;;<br />&nbsp; regs.p.n = bool&#40;regs.a.l &amp; 0x80&#41;;<br />&nbsp; regs.p.z = regs.a.l == 0;<br />&#125;<br /><br />uint op_read&#40;uint addr&#41; &#123;<br />&nbsp; add_clocks&#40;4&#41;;<br />#ifdef USE_COTHREADS<br />&nbsp; co_return&#40;&#41;; //synchronization magic!<br />#endif<br />uint r = mem_read&#40;addr&#41;;<br />&nbsp; add_clocks&#40;4&#41;;<br />&nbsp; return r;<br />&#125;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat May 20, 2006 3:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can anybody enlighten me on this;
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Relative addressing &#40;BCC, BCS, BNE, BEQ, BPL, BMI, BVC, BVS&#41;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; &nbsp;address&nbsp; R/W description<br />&nbsp; &nbsp; &nbsp; &nbsp;--- --------- --- ---------------------------------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp;PC&nbsp; &nbsp; &nbsp; R&nbsp; fetch opcode, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp;PC&nbsp; &nbsp; &nbsp; R&nbsp; fetch operand, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; &nbsp;PC&nbsp; &nbsp; &nbsp; R&nbsp; Fetch opcode of next instruction,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;If branch is taken, add operand to PCL.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Otherwise increment PC.<br />&nbsp; &nbsp; &nbsp; &nbsp; 4+&nbsp; &nbsp; PC*&nbsp; &nbsp; &nbsp;R&nbsp; Fetch opcode of next instruction.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Fix PCH. If it did not change, increment PC.<br />&nbsp; &nbsp; &nbsp; &nbsp; 5!&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp; R&nbsp; Fetch opcode of next instruction,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;increment PC.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp;Notes: The opcode fetch of the next instruction is included to<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this diagram for illustration purposes. When determining<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; real execution times, remember to subtract the last<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cycle.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * The high byte of Program Counter &#40;PCH&#41; may be invalid<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; at this time, i.e. it may be smaller or bigger by $100.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + If branch is taken, this cycle will be executed.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ! If branch occurs to different page, this cycle will be<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; executed.<br /></div>
<br />
<br />It's the only thing left that I am yet to do. It seems to me that there are way too many 'increment PC''s in there. It must check the branch condition on cycle no 2 and not 3 otherwise the minimum number of cycles required would be 3 which is not the case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat May 20, 2006 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The description looks fine to me (the following is based on what you quoted). If you read the description, several of the PC increments are conditional. The first step, fetch opcode, is performed on the last cycle of the previous instruction. The second step fetches the branch offset. The third step fetches the next instruction regardless of whether the branch is taken. If it was not taken, PC is incremented and the branch is complete.
<br />
<br />If the branch was taken, the fourth step fetches the new opcode. If no page-crossing occurred, the PC is incremented and the branch is complete. If a page-crossing did occur, then the high byte of the PC needs to be fixed and the new opcode fetched one final time in step 5, and the PC incremented.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>augnober</b> [ Sun May 21, 2006 8:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">3) And this is the big one... you can't save and restore the state of threads in a platform-independant way, meaning you can't have savestates... it may be possible to save the context-buffer + stack into a savestate and restore it, but the format would change with even a minimal code change, breaking older savestates in the process. Power/reset events are still possible, one need only destroy and recreate the CPU thread.<br /></div>
<br />Confucius says.. Platforms and emulators may come and go, but the NES will never change <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun May 21, 2006 10:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">augnober wrote:</div><div class="quotecontent">Confucius says.. Platforms and emulators may come and go, but the NES will never change 8)</div>
<br />
<br />Uhh... what?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>augnober</b> [ Mon May 22, 2006 12:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><div class="quotetitle">augnober wrote:</div><div class="quotecontent">Confucius says.. Platforms and emulators may come and go, but the NES will never change <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" /></div><br /><br />Uhh... what?</div>
<br />Sorry about that.  You'd made it sound like it wouldn't be possible to avoid savestate versioning issues.. but since the NES is static, it's more a matter of how practical it is.  My thought was that to avoid version-dependence you could be careful to only write out data which is a snapshot of the emulated NES internals (only the essentials).  All emulators would need this and only this data.  If you could find a way for that to be sufficient without making the export and import too unwieldly, there would be no platform or emulator dependency (the only platform it would depend on is the NES, which any future versions will emulate anyway).
<br />
<br />Edit: To put this in perspective, it would have been possible to save the state off a real NES back in the 80's (well, in theory anyway) and load it up in an emulator today, provided the data saved were sufficient.  Presumably this data would have been in bits and pieces with no obvious original organization, and the person who made the record would have needed to organize the data in a presentable fashion.  This could just as easily (or difficultly) be done from an emulator today.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon May 22, 2006 8:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You'd made it sound like it wouldn't be possible to avoid savestate versioning issues.. but since the NES is static, it's more a matter of how practical it is.</div>
<br />
<br />This isn't related to the NES. The reason you can't use savestates with cooperative multithreading is because you can't save the stack + context registers of each thread into a savefile with any kind of reliability that it will ever work again. Let alone on a different OS or processor.
<br />
<br />You can save the current state of the NES, but you wouldn't be able to load it. You'd have no way to set program execution to the correct point in each of the threads. I'm sure it's possible to create a semi-hybrid design that would allow savestates + partial multithreading, but it would lose the main advantages of using threads in the first place: code simplicity and possibly accuracy.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>5</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>