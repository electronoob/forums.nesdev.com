<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - C/C++ to assembly decoder</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">C/C++ to assembly decoder</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=9349">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=9349</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Sep 25, 2012 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Something bpoint linked on Twitter today which I thought was clever:<br /><br /><!-- m --><a class="postlink" href="http://assembly.ynh.io/">http://assembly.ynh.io/</a><!-- m --><br /><br />Though I cannot stand AT&amp;T syntax (has always looked like complete dogshit to me), it's still a convenient/neat tool.<br /><br />The mouseover capability is what really makes it useful, if you ask me.<br /><br />Hope this helps someone out, or at least educates folks.  :-)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 25, 2012 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wonder how hard it'd be to fork the GitHub and get it to use cc65 instead. Then the &quot;Use ARM&quot; checkbox would have to change to a select with options &quot;i386&quot;, &quot;ARM&quot;, and &quot;6502&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Tue Sep 25, 2012 7:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I wonder how hard it'd be to fork the GitHub and get it to use cc65 instead. Then the &quot;Use ARM&quot; checkbox would have to change to a select with options &quot;i386&quot;, &quot;ARM&quot;, and &quot;6502&quot;.</div><br /><br />You've seen <a href="http://i.imgur.com/2HvDa.png" class="postlink">this</a>, right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Sep 25, 2012 7:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why does someone discovering the -S switch in GCC get so much press?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Sep 25, 2012 7:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />gcc -S doesn't provide a visual and interactive way to correlate your C code with the underlying assembly code.  emacs and some other crazy editors might do this for you; whoop de doo.  Not all of us use emacs.<br /><br />Stop being a party pooper, Dwedit.  :P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 25, 2012 8:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">cpow wrote:</div><div class="quotecontent">You've seen <a href="http://i.imgur.com/2HvDa.png" class="postlink">this</a>, right?</div><br />Yeah, but this one's web based. <img src="./images/smilies/icon_wink.gif" alt=";-)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Sep 25, 2012 10:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Though I cannot stand AT&amp;T syntax (has always looked like complete dogshit to me), it's still a convenient/neat tool.</div><br />You can send him/her/them some feedback to add a checkbox for Intel output, GCC already supports it (&quot;-masm=intel&quot;).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Wed Sep 26, 2012 2:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">gcc -S doesn't provide a visual and interactive way to correlate your C code with the underlying assembly code. .... Though I cannot stand AT&amp;T syntax (has always looked like complete dogshit to me)</div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">g++ -g test.cpp &amp;&amp; objdump -t a.out | grep &quot;main$&quot; | awk '{system(&quot;objdump -d -S -M intel --start-address=0x&quot;$1&quot; a.out&quot;);}'</div><br />(remove the --start-address part if you want to show other parts of your code besides main)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Sep 26, 2012 4:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Judging by the app, GCC produces very interesting code indeed:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int a,b=0;<br /><br />for(a=0;a&lt;100;++a)<br />{<br />&nbsp;b+=10;<br />}</div><br /><br />GNU GCC :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Error: Command failed: /tmp/test467368427.c:3:1: error: expected identifier or ‘(’ before ‘for’<br />/tmp/test467368427.c:3:10: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘&lt;’ token<br />/tmp/test467368427.c:3:15: error: expected identifier or ‘(’ before ‘++’ token</div><br /><br />GNU GCC C++ <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Error: Command failed: cc1plus: warning: command line option ‘-std=c99’ is valid for C/ObjC but not for C++ &#91;enabled by default&#93;<br />/tmp/test658282124.cpp:3:1: error: expected unqualified-id before ‘for’<br />/tmp/test658282124.cpp:3:9: error: ‘a’ does not name a type<br />/tmp/test658282124.cpp:3:15: error: expected unqualified-id before ‘++’ token</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Sep 26, 2012 5:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You need to put your code in the proper scope, like a function definition, Shiru. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">for</tt> isn't supposed to compile at the global scope. Just put <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">void func&#40;&#41; {</tt> / <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">}</tt> around it and it should compile fine.<br /><br />Actually, trying out your example with optimizations on was interesting:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void func()<br />{<br />&nbsp; &nbsp; int a,b=0;<br />&nbsp; &nbsp; for(a=0;a&lt;100;++a)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; b+=10;<br />&nbsp; &nbsp; }<br />}</div><br />Produced:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; movl&nbsp; &nbsp;$100, %eax<br />.L2:<br />&nbsp; &nbsp; subl&nbsp; &nbsp;$1, %eax<br />&nbsp; &nbsp; jne&nbsp; &nbsp; .L2<br />&nbsp; &nbsp; rep<br />&nbsp; &nbsp; ret</div><br /><br />It optimizes your count-up loop into a count-down loop, since <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">a</tt> isn't used inside the loop. It also optimizes away the unused result and calculations involving <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">b</tt>. Funny it doesn't remove the entire loop for you! The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rep</tt> in there is kinda weird, but apparently that's some sort of <a href="http://mikedimmick.blogspot.ca/2008/03/what-heck-does-ret-mean.html" class="postlink">x64 branch prediction workaround</a>?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 26, 2012 9:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You've seen this, right?</div><br />My god how did you manage to have CC65 use the $xxx,X addressing mode ?<br />All my attempts to use arrays of any sort always results in slow indirect adresing, even if the index is a char type and if all optimisations are enabled.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why does someone discovering the -S switch in GCC get so much press?</div><br />I was going to say something similar.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I wonder how hard it'd be to fork the GitHub and get it to use cc65 instead. Then the &quot;Use ARM&quot; checkbox would have to change to a select with options &quot;i386&quot;, &quot;ARM&quot;, and &quot;6502&quot;.</div><br />GCC was never ported to the 6502 ^^<br />And it probably couldn't be done considering GCC was build with 32+ bit CPUs in mind from the ground up.<br />I was considering porting SDCC to the 6502 but really it's harder than it sounds.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Sep 26, 2012 10:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />rainwarrior, thanks. The resulting code is actually looking interesting.<br /><br />Bregalad, unfortunately, SDCC currently doesn't seem a good option for any practical use. It is ultra slow, and it doesn't seem to improve in near future, it has bugs, and resulting code for already supported platforms (Z80 at least) is still not very optimal. Retargetting a complier in such state will only introduce more problems.<br /><br />However, it seems that someone with good knowledge of the compiler design could make a good C compiler for a 8-bit platform in relatively short time. I recently seen a guy who developing a C compiler for 8080 for his hobbyist purposes, and it is very impressive to me that he got a quite working thing from scratch in just two weeks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Wed Sep 26, 2012 11:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could try retargetting <a href="http://llvm.org/" class="postlink">LLVM</a> for the 65xx, with <a href="http://clang.llvm.org/" class="postlink">Clang</a> as a front end. Then you'd have a modern 65xx compiler where you get a lot of things for free in terms of e.g. code optimization.<br />And it has been done for the PIC16, which is similar to the 65xx in the sense that it only has one work register, and a bunch of virtual registers (call it &quot;zeropage RAM&quot; or &quot;register file&quot; or whatever you want).<br /><br />Of course this would be quite a big task. The LLVM codebase is pretty large, and going through it and the documentation until you understand it well enough to implement your own target is not something you do in an afternoon. But neither is writing your own compiler from scratch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 26, 2012 2:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then you'd have a modern 65xx compiler where you get a lot of things for free in terms of e.g. code optimization.</div><br />My god, this sounds like a dream !!<br /><br />You are right that SDCC seems somewhat unfinished. The documentation states that the compiler is highly optimized but in reality it looks like it's not the case. Maybe the feature they talk about in the documentation are &quot;to be added&quot; ?<br /><br />But that is true with CC65 too, for what I tried to do with it, it's <em>extremely</em> suboptimal and slow.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Of course this would be quite a big task. The LLVM codebase is pretty large, and going through it and the documentation until you understand it well enough to implement your own target is not something you do in an afternoon. But neither is writing your own compiler from scratch.</div><br />Sure, if only I could find a trick so that it becomes a student project or something in the like, it would be great that way it would become my work, and it'd be way more convenient than doing it during my free time.<br /><br />Problem is that, I'm a student in Electrical Engineering and not computer science, doing a CS-related project would be strange, and the biggest problem : Nobody uses the 65xxx processors anymore, making it hard to justify such a project in a researsh point of view.<br /><br />EDIT :<br />It looks like clang is made with 32-bit or 64-bit processors in mind, just like GCC. This means it will ANYWAYS be terrible for the 6502, as code like this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">char a,b;<br />a = b+4;<br /></div><br />Will promote b to int, add 4 to it, then cast it to char again, which is NOT what you'd want to do !<br /><br />EDIT 2 :<br />A great quick benchmark for compilers is the following C code :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static char* source;<br />char* dest;<br /><br />void test() {<br />&nbsp; &nbsp;unsigned char i;<br />&nbsp; &nbsp;for(i=0; i&lt;8 ; i++) {<br />&nbsp; &nbsp; char k=1;<br />&nbsp; &nbsp;&nbsp; &nbsp;dest&#91;2*i&#93; = source&#91;i&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;dest&#91;2*i+k&#93; = 0;<br />&nbsp; &nbsp;}<br />}</div><br />it will test the following optimisations :<br />- k is loop invariant, should be affected before the for loop<br />- k is constant, it can be removed completely<br />- i&lt;8 is always true after the initialisation, therefore the for loop can be optimized in a do/while loop, with the test only at the end<br />- 2*i should be optimized using another variable, which is incremented twice on each iteration<br />- the loop should be reversed to test i against 0 (I guess...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Sep 26, 2012 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C/C++ to assembly decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The loop can't be reversed without changing the program's meaning if source and dest point into the same array. That's why C99 added <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">restrict</tt> pointers: to assure the compiler that the memory areas controlled by two pointers don't overlap, allowing it to do whatever reordering it needs.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>