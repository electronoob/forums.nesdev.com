<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - To lookup or not to lookup?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">To lookup or not to lookup?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3978">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3978</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 16, 2008 4:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>In response to <a href="http://nesdev.com/bbs/viewtopic.php?p=31703#31703" class="postlink">this post by Fx3</a>:</em>
<br />
<br />- I didn't know that tables[] would imply a speed down... <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /> Heh, living and learning.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Mon Mar 17, 2008 8:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">- I didn't know that tables[] would imply a speed down... <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /> Heh, living and learning.</div>
<br />Accessing memory is the slowest thing in modern computers (except for doing disk I/O, which is a thousand times slower than everything else).
<br />
<br />You should assume that accessing memory is really slow, unless you *just* accessed the same memory in the code above.  If you're accessing a large lookup table (i.e. hundreds of KB large) then expect it to take dozens or hundreds of cycles.  Out-of-order processors (including all x86 from Intel and AMD) can hide some of that latency from you, but often not all of it.
<br />
<br />Modern computers have 2 or 3 levels of cache in the heirarchy between the CPU and main memory, usually an L1 cache which is 32KB or 64KB, and an L2 cache which is 512KB or 1MB.  Cache lines are usually 32 or 64 bytes.  When you access memory, it brings it into L2 and L1 caches as necessary (kicking out some other piece of data that hasn't been used in a while).  What's critically important is that L1 is extremely fast (not as fast as CPU registers but close), while L2 is much slower, and main memory is a *lot* slower than L2.
<br />
<br />I don't know real numbers for modern PCs, but I can tell you that on an Xbox 360 each cache line is 128 bytes, an L1 cache hit takes around 3 to 5 cycles, an L1 cache miss (i.e. L2 cache hit) is a pipeline flush which costs around 40 cycles, and an L2 cache miss (i.e. forced to read it from main memory) takes <strong>over 600 cycles.</strong>  The worst part is the Xbox360 is not an out-of-order processor, so its CPU can not hide some of the cost automatically the way desktop PCs can... but I digress.
<br />
<br />For comparison, most arithmetic instructions cost 1-3 cycles (maybe multiplies cost like 10 cycles, and divisions cost more than that).  So large memory tables are bad, unless you can tell the CPU where to prefetch them from hundreds of cycles in advance.  Small, frequently-accessed tables are OK--they will usually be in the L1 cache.  But that cache can only hold 32KB or maybe 64KB of data, so its really important to keep your tables as small as you reasonably can.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 17, 2008 10:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent"><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">- I didn't know that tables[] would imply a speed down... <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /> Heh, living and learning.</div><br />Accessing memory is the slowest thing in modern computers (except for doing disk I/O, which is a thousand times slower than everything else).</div><br />Perhaps the mindset of pervasive lookup tables comes from the NES and other platforms using a 6502 CPU, where all addressable memory is as fast as cache.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Out-of-order processors (including all x86 from Intel and AMD) can hide some of that latency from you, but often not all of it.<br />[...]<br />The worst part is the Xbox360 is not an out-of-order processor, so its CPU can not hide some of the cost automatically the way desktop PCs can... but I digress.</div>
<br />Out-of-order execution is designed to reschedule code even when the underlying microarchitecture changes, as it did from the i486 (single issue) to the Pentium (U-V pipes) and from the Pentium to the Pentium II (4-1-1 pipes). But every Xbox 360 CPU has exactly the same cycle-for-cycle operation, and it's the compiler's job to hide latency.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Mon Mar 17, 2008 3:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Perhaps the mindset of pervasive lookup tables comes from the NES and other platforms using a 6502 CPU, where all addressable memory is as fast as cache.</div><br />Oh, it used to make sense on lots of old platforms (including early PCs, all the way through the 486 or Pentium timeframe at least).  The problem is that CPUs have been getting faster and faster every year, and RAM has not been keeping up.  So we're now at the point where accessing main memory requires many hundreds of cycles.   <img src="./images/smilies/icon_cry.gif" alt=":cry:" title="Crying or Very sad" />   Additionally, in order to make the clock speeds for CPUs higher and higher, they had to make the pipelines deeper and deeper!  So anything which causes part or all of the pipeline to be flushed (such as mispredicted branches, or the cache misses on the Xbox360 CPU) gets more and more expensive.  We're at the point where large memory tables can easily be a bottleneck, and using a bunch of simple math operations is often worth it if you can then use a way smaller table, or eliminate it entirely.  A classic example is tables for "sin" and "cos" functions.  In the era of DOOM (486) and Quake (Pentium) these were lookup tables, but no modern game uses a lookup table for something like that, it would usually miss the L1 cache and it would also pollute the caches causing more misses in other code.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Out-of-order execution is designed to reschedule code even when the underlying microarchitecture changes, as it did from the i486 (single issue) to the Pentium (U-V pipes) and from the Pentium to the Pentium II (4-1-1 pipes). But every Xbox 360 CPU has exactly the same cycle-for-cycle operation, and it's the compiler's job to hide latency.</div>
<br />I think out-of-order execution was mostly added to modern CPU designs because it makes it easier to get high performance.  The compiler can't always schedule code well, but with OOE whatever instruction-level parallelism is there can be squeezed out by the hardware.
<br />
<br />But the reason the Xbox 360 CPU doesn't have out-of-order execution actually has to do with the number of transistors needed to implement it.  With the same die size, they could either have one dual-thread, out-of-order PPC core or they could have *three* dual-thread, in-order PPC cores.  So an Xbox360 can actually run <strong>six</strong> threads at the same time in hardware (though the two hardware threads on each core have to share a pipeline and execution units, but every hardware thread can issue up to 2 instructions per 2 cycles).  It was a good tradeoff I think, even if it means the programmer has to work harder to avoid the performance penalties.  The Cell processor used in the PS3 also has a dual-thread PPC core in it, which I think is very similar to one of the in-order core used in the Xbox360.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Mar 17, 2008 8:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The problem is that CPUs have been getting faster and faster every year, and RAM has not been keeping up.</div><br />Also, with SIMD units like MMX, SSE, and AltiVec, you can't do parallel lookups, so you want to do everything via calculations if possible.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think out-of-order execution was mostly added to modern CPU designs</div><br />I think you mean a particular antique CPU design. What RISC processors have out-of-order execution, beyond trying to resolve branches as early as possible?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But the reason the Xbox 360 CPU doesn't have out-of-order execution actually has to do with the number of transistors needed to implement it.</div>
<br />Bingo, and this likely applies to any modern CPU design, where the compiler reorders things rather than the processor, since it can look ahead as far as it wants.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Tue Mar 18, 2008 2:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>In response to <a href="http://nesdev.com/bbs/viewtopic.php?p=31752#31752" class="postlink">this post</a>:</em>
<br />
<br />The later PowerPC chips are rather aggressively out of order. I believe the 970 has a reorder window of around 200 instructions. I don't think any mips or arm chips have gone down that route, but ARM is just a bit odd, and MIPS seems close to dead.
<br />
<br />The chip can usually do a better job of scheduling than the compiler, as it has a lot more information regarding what addresses everything is dealing with, so aliasing is not much of an issue.
<br />
<br />Technically the compiler can look at a lot more, but language semantics usually restrict what it can do, and it can't really look outside of the current function most of the time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Tue Mar 18, 2008 2:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think out-of-order execution was mostly added to modern CPU designs</div><br />I think you mean a particular antique CPU design. What RISC processors have out-of-order execution, beyond trying to resolve branches as early as possible?</div>
<br />I think most PowerPC chips are out-of-order... isn't the CPU of the Wii an out-of-order PPC core, for example?  IBM makes the CPUs for all of this generation of game consoles: an out-of-order PPC for the Wii, the in-order PPC for the Xbox360, and the Cell processor for the PS3.
<br />
<br />But what I meant by "modern CPU designs" was pretty much all x86-based chips made since the Pentium Pro in the mid-90's.  The Pentium II, III, M and Core 2 processors are all derived from that out-of-order architecture first featured in the Pentium Pro, which was basically RISC.  They use register renaming to a file of 40 or more internal registers, and break all of the quirky and complex x86 instructions up into simple, RISC micro-ops before executing them.  Intel and AMD, driven by the competition between them, have both been near the front of the pack in RISC chip performance for years.  <img src="./images/smilies/icon_biggrin.gif" alt=":grin:" title="Very Happy" />
<br />
<br />As for OOE, current x86 chips can have like 96 micro-ops in flight and issue 3 or more instructions every cycle, so they are able to start lots of new instructions while waiting for already-running instructions to finish, even across things like call/return boundaries.  It's hard to impossible for a compiler to match that level of performance on an in-order execution chip.  But I'd say the three cores of the 360 more than makes up for the difference!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Mar 18, 2008 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- I suggest to split up this topic, there's no relation with CHR thing. ^_^;;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Mar 18, 2008 3:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But it's awesome debate about the merits of lookup tables!
<br />
<br />On a GBA and NDS, lookup tables are king.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Mar 18, 2008 3:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But it's awesome debate about the merits of lookup tables! </div>
<br />I consider it mostly speculation. The only hard information is how fast a particular pair of algorithms execute on a particular processor, one using a table and the other calculating it all on-the-fly. The main bit of useful information is to try both versions in any hotspots of your program.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Mar 18, 2008 5:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">But it's awesome debate about the merits of lookup tables!<br /><br />On a GBA and NDS, lookup tables are king.</div>
<br />
<br />&lt;newbie&gt; Is this...
<br />
<br />unsigned char cache[0x4000];
<br />
<br />...equals to this...
<br />
<br />unsigned char *cache = malloc(0x4000); 
<br />
<br />...when accessing it like cache[0x3f00]??
<br />
<br />&lt;/newbie&gt;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nessie</b> [ Tue Mar 18, 2008 5:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent"><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">But it's awesome debate about the merits of lookup tables!<br /><br />On a GBA and NDS, lookup tables are king.</div><br /><br />&lt;newbie&gt; Is this...<br /><br />unsigned char cache[0x4000];<br /><br />...equals to this...<br /><br />unsigned char *cache = malloc(0x4000); <br /><br />...when accessing it like cache[0x3f00]??<br /><br />&lt;/newbie&gt;</div>
<br />
<br />I'm no expert so don't take my word for it, but I believe the first option uses absolute addressing (something like 0x00010000+0x4000) whereas the second would have to use a register as a pointer (esi+0x4000). So, the first option would probably be faster since it's easier to pipeline when no pointer register is involved.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Mar 18, 2008 6:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Without context, it's hard to say. Here's a more interesting comparison:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct X &#123;<br />&nbsp; &nbsp; unsigned char a &#91;0x4000&#93;;<br />&nbsp; &nbsp; unsigned char b &#91;0x4000&#93;;<br />&#125;;<br /><br />struct Y &#123;<br />&nbsp; &nbsp; unsigned char* a;<br />&nbsp; &nbsp; unsigned char* b;<br />&#125;;<br /><br />void func&#40; T* t &#41;<br />&#123;<br />&nbsp; &nbsp; t-&gt;a &#91;0x1234&#93; = 0;<br />&nbsp; &nbsp; t-&gt;a &#91;0x2345&#93; = 0;<br />&#125;</div><br />In this case, using X is probably more efficient since there are fewer memory accesses needed. All that is needed to access an element of a or b is a pointer to the X structure and an offset. Contrast that with Y where a pointer to the structure is needed, then the a or b pointer must be read from that, and finally the offset added. If you write to the array then access it again, some compilers won't be smart enough to determine that the a and b pointers didn't change, so it will re-read them before the next access; in some cases, the compiler can't prove that they won't change, so it must re-read them.<br /><br />In some cases, you can use Y and make local copies of the pointers to help the compiler prove that they don't need to be re-read, but this will use more registers so it's still not as good.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void func&#40; Y* y &#41;<br />&#123;<br />&nbsp; &nbsp; unsigned char* ya = y-&gt;a;<br />&nbsp; &nbsp; ya &#91;0x1234&#93; = 0;<br />&nbsp; &nbsp; ya &#91;0x2345&#93; = 0;<br />&#125;</div>
<br />As far as globals, I've found that many compilers generate worse code for them. As always, the only authority on efficiency is measurement of the full program. Everything else is just a source of ideas to put to the test.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 19, 2008 5:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">The chip can usually do a better job of scheduling than the compiler, as it has a lot more information regarding what addresses everything is dealing with, so aliasing is not much of an issue.<br /><br />Technically the compiler can look at a lot more, but language semantics usually restrict what it can do</div><br />C99 is supposed to help solve this by adding a new keyword <strong>restrict</strong> that specifies the semantics of a function with respect to aliasing.<br /><br /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">and it can't really look outside of the current function most of the time.</div><br />It can if the other function is in the same source code file and <strong>static</strong>. That's at least part of how it decides to consider something for inlining.<br /><br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">But what I meant by "modern CPU designs" was pretty much all x86-based chips made since the Pentium Pro in the mid-90's.</div><br />You and blargg are both right. The P6 architecture as amended is comparatively modern (even if a decade old), but the underlying 8086 bytecode is ancient.<br /><br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">They use register renaming to a file of 40 or more internal registers, and break all of the quirky and complex x86 instructions up into simple, RISC micro-ops before executing them.</div><br />On the other hand, the MIPS, PowerPC, and ARM bytecodes are designed to be decoded to micro-ops using less circuitry. That's pretty much the big difference between CISC and RISC, but at a slight cost in code density for RISC. The RISC people have made various compromises to improve code density, such as the Thumb bytecode.<br /><br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">As for OOE, current x86 chips can have like 96 micro-ops in flight and issue 3 or more instructions every cycle, so they are able to start lots of new instructions while waiting for already-running instructions to finish, even across things like call/return boundaries.</div><br />I can see how handling out-of-order across basic blocks might be a win on a system with few interrupts. But is this true of typical applications?<br /><br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">It's hard to impossible for a compiler to match that level of performance on an in-order execution chip. But I'd say the three cores of the 360 more than makes up for the difference!</div><br />That and especially the two threads per core.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The only hard information is how fast a particular pair of algorithms execute on a particular processor</div><br />What do you want to see? A space-time-accuracy comparison of CORDIC and LUT approaches to cosine calculation on a Nintendo DS, perhaps?<br /><br /><div class="quotetitle">Nessie wrote:</div><div class="quotecontent">I believe [accessing a buffer allocated statically] uses absolute addressing (something like 0x00010000+0x4000) whereas [accessing a buffer created with malloc()] would have to use a register as a pointer (esi+0x4000). So, the first option would probably be faster since it's easier to pipeline when no pointer register is involved.</div><br />On ARM CPUs such as that of the DS, an immediate quantity must be an 8-bit number rotated left by 0, 2, 4, 6, ..., 28, or 30 bits. Any other constant must be stored after the return instruction and loaded relative to the program counter. RAM is at 0x02000000 through 0x023FFFFF, and the absolute address of a statically allocated variable might be 0x0201acc4, which doesn't fit the immediate rule.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">If you write to the array then access it again, some compilers won't be smart enough to determine that the a and b pointers didn't change, so it will re-read them before the next access; in some cases, the compiler can't prove that they won't change, so it must re-read them. </div>
<br />I thought that's what the <strong>volatile</strong> keyword was for: to specify that memory won't change except across a function call, unless the keyword is present. There's also the tradeoff of rereading the address from the data section vs. rereading it from the code.
<br />
<br />Split.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Mar 19, 2008 8:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Compilers definitely generate crap code for global variables.  You can get smaller/faster code by having local variable copies of them.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>