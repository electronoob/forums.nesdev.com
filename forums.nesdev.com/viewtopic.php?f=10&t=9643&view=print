<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - collision at higher speed then 50/60Hz</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">collision at higher speed then 50/60Hz</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9643">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9643</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KennyB</b> [ Sat Dec 29, 2012 4:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>collision at higher speed then 50/60Hz</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello everybody, <br /><br />many of you will know the Pong like game tutorial over at NA. After a long break, I am now continuing those lessons by creating my own pong game. <br />I created a nice playing field where my ball bounces around. I also managed to add the functionality of increasing the speed. But here is where the problem lies. I also asked this over at NA, but it doesn't hurt to also ask here.<br /><br />I changed the ball speed to 2/3/4/5/6 to make it go faster. So instead of moving 1 pixel a time, I move 2/3/4/5/6 pixels a time. <br />But at these higher speeds, the ball will change direction before or after the &quot;walls&quot; I programmed.<br />They seem to have an offset. For the right and top wall it will change direction before it should hit the wall. And for the left and bottom wall it will change direction after it should hit the wall. (I think) I know why it does this ==&gt; If the ball is, for example, 1 pixel before the wall ==&gt; No collision ==&gt; Increase the position of the ball with 5 (speed of the ball). This means that the ball will be bounced and shown 4 pixels beyond the wall. But I don't know why the ball will change direction before hitting the right and top wall, but it will most likely have something to do with the difference in subtracting (right/top wall) and adding (left and bottom wall) the speed ?<br />So to sum up ==&gt; ball bounces on offset walls at higher speeds.<br /><br />I used the BCC and BCS instructions after a CMP. So they will branch if greater/less than (and thus register a hit, although too late/soon) <br /><br /> CheckCollisionRight:<br />  LDA boxRightX <br />  CMP #RIGHTWALL<br />  BCC CheckCollisionRightSkipper ;<span style="color: #FF0000"> if A &lt; RIGHTWALL ==&gt; Carry is set to 0 ==&gt;jump to label and skip over the direction change. If A &gt;= RIGHTWALL ==&gt; Carry = 1 ==&gt; No jump to label and run change direction code</span><br />  LDA #$00<br />  STA ballright<br />  LDA #$01<br />  STA ballleft   <br />  CheckCollisionRightSkipper:<br />  JMP CheckCollisionRightDone <br />  <br />CheckCollisionLeft:<br />  LDA boxLeftX<br />  CMP #LEFTWALL<br />  BCS CheckCollisionLeftSkipper    <span style="color: #FF0000">; if A &gt;=  RIGHTWALL ==&gt; Carry is set to 1 ==&gt;jump to label and skip over the direction change. If A &lt; RIGHTWALL ==&gt; Carry = 0 ==&gt; No jump to label and run change direction code</span><br />  LDA #$01<br />  STA ballright<br />  LDA #$00<br />  STA ballleft <br />  CheckCollisionLeftSkipper:<br />  JMP CheckCollisionLeftDone<br /><br /><br />Because I did the BCC and BCS the ball always bounces. But at the higher speeds, it often bounces to soon or to late. I'm thinking that it's impossible to eliminate this problem as it only updates at 50/60 Hz.<br />If the ball is 1 pixel before the wall in frame 1 ==&gt; no hit ==&gt; no change of direction.<br />In the next frame the ball will be 4 pixels behind the wall ==&gt; it will branch ==&gt; change direction. But it will still update the sprite for that frame and it will show it 4 pixels behind the wall. <br /><br />I was thinking of creating a loop which will update the location of the ball one pixel a time. But this probably will slow down my ball :<br />==&gt; frame 1 ==&gt; loop 1 ==&gt; 1 pixel moved <br />==&gt; frame 2 ==&gt; loop 2 ==&gt; 1 pixel moved<br />==&gt; frame 3 ==&gt; loop 3 ==&gt; 1 pixel moved<br />==&gt; frame 4 ==&gt; loop 4 ==&gt; 1 pixel moved<br />==&gt; frame 5 ==&gt; loop 5 ==&gt; 1 pixel moved<br /><br />So in the end we still need 5 frames to perform 5 loops and we move only 5 pixels ==&gt; which is exactly the same as moving 1 pixel a frame (or at a speed of 1 instead of 5).<br /><br /><br />Does anyone know a solution to this ? Or point me in the right direction ? Updating the sprite of the ball more often then 50/60 Hz is not possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 29, 2012 6:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: collision at higher speed then 50/60Hz</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want to have perfectly elastic collision response, you'll need to reflect the ball's position through the wall. For example, if there's a wall at x=16, and the position has become x=14, you need to change the position to x=18, or 2 * wall position - ball position.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Dec 29, 2012 7:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: collision at higher speed then 50/60Hz</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wrote a giant long post, but it was a waste because Tepples' solution is awesome and simple.<br /><br />One thing I will say is that your line of thinking was pretty good.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was thinking of creating a loop which will update the location of the ball one pixel a time. But this probably will slow down my ball.<br /></div><br />It doesn't need to slow down your ball.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Frame start:<br />Ball logic start:<br />&nbsp; &nbsp; &nbsp;move ball one pixel<br />&nbsp; &nbsp; &nbsp;check for wall.<br />&nbsp; &nbsp; &nbsp;move ball one pixel<br />&nbsp; &nbsp; &nbsp;check for wall.<br />&nbsp; &nbsp; &nbsp;etc. <br />Frame End:<br /></div><br />Like that.<br />Maybe something like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />&nbsp; &nbsp; ldx speed;Number of pixels ball is supposed to move this frame.<br />&nbsp; &nbsp; ;add or subtract 1 from ball's position<br />&nbsp; &nbsp; ;Do check for wall<br />&nbsp; &nbsp; dex<br />&nbsp; &nbsp; bne loop<br />;The above moves the ball if speed is zero. To fix this<br />;put a beq instruction after ldx speed, and<br />;a label to beq to after that code, so it skips<br />;it entirely when speed is zero<br /></div><br />Tepples' solution is a better method, but you're definitely showing great problem solving to think of something like the above.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 29, 2012 7:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: collision at higher speed then 50/60Hz</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://pineight.com/nes/#ruder" class="postlink">My own Pong clone</a> runs physics at 120 Hz, but that's because objects can move up to 20 pixels per frame, fast enough to have an object move &quot;through&quot; another in a single frame. Individual half-frames still use the reflection method though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KennyB</b> [ Sat Dec 29, 2012 9:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: collision at higher speed then 50/60Hz</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks guy's, <br /><br />I'm going to try both solutions to learn the advantages/disadvantages of both.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><a href="http://pineight.com/nes/#ruder" class="postlink">My own Pong clone</a> runs physics at 120 Hz, but that's because objects can move up to 20 pixels per frame, fast enough to have an object move &quot;through&quot; another in a single frame. Individual half-frames still use the reflection method though.</div><br /><br />The link on your site for the Zapruder code is not working.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 29, 2012 6:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: collision at higher speed then 50/60Hz</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">KennyB wrote:</div><div class="quotecontent">The link on your site for the Zapruder code is not working.</div><br />Fixed. Pin Eight just moved to a different provider, and a few files didn't get copied correctly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KennyB</b> [ Sun Dec 30, 2012 5:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: collision at higher speed then 50/60Hz</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">KennyB wrote:</div><div class="quotecontent">The link on your site for the Zapruder code is not working.</div><br />Fixed. Pin Eight just moved to a different provider, and a few files didn't get copied correctly.</div><br /><br />Thanks, going to take a look to see if I can learn some extra stuff. <br /><br />Thanks to everybody for the input ! I implemented the code and the balls aren't bouncing behind the walls anymore ! <br />In case anybody has the same problem or if my code is not optimal (let me know !); here is how I worked it out:<br />First I had some trouble understanding where this formula came from.<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If you want to have perfectly elastic collision response, you'll need to reflect the ball's position through the wall. For example, if there's a wall at x=16, and the position has become x=14, you need to change the position to x=18, or 2 * wall position - ball position.</div><br /><br />So I made a sketch of my playing field:<br /><img src="https://lh3.googleusercontent.com/-wkE4Y7VEtYE/UOA0Or4AvgI/AAAAAAAADb4/rAs5--qLDVQ/s600/sketch.png" alt="Image" /><br /><br />In the left it shows the situation where the ball (blue dot) is beyond my wall (because of increasing with a speed higher then 1). The solution to this is to mirror the ball around the wall as seen on sketch on the right (purple dot). This mirrored position is where the actual ball would be in case the bouncing was done correctly. <br />So I wrote down the formula:<br /><br />X_mirrored = Xwall - dx<br />X_mirrored = Xwall - (Xball-Xwall)<br />X_mirrored = Xwall - Xball + Xwall<br />X_mirrored = 2 x Xwall - Xball<br /><br />For the left wall you need to add dx, but it still gives the same end formula because dx is now (Xwall -Xball) instead of (Xball -Xwall) :<br /><br />X_mirrored = Xwall + dx<br />X_mirrored = Xwall + (Xwall -Xball)<br />X_mirrored = Xwall + Xwall - Xball<br />X_mirrored = 2 x Xwall - Xball<br /><br />So I created some code which would mirror the position of the ball in case it has gone beyond the wall:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CheckCollisionDown:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; check if the ball has hit the bottom wall<br />&nbsp; LDA boxBottomY&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Load A with the Bottom Y collison box value of the ball<br />&nbsp; CMP #BOTTOMWALL&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare it with BOTTOMWALL<br />&nbsp; BCC CheckCollisionDownSkipper &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if ball y &lt; bottom wall, still on screen, skip next section<br />&nbsp; LDA #$00&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Load A with 0<br />&nbsp; STA balldown&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Store A in ball down ==&gt; ball is not going down anymore<br />&nbsp; LDA #$01&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Load A with 1<br />&nbsp; STA ballup&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Store A in ball up ==&gt; ball is now going up ( = bounce)<br />&nbsp; LDA #BOTTOMWALL&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; load the value of the Botoom wall value<br />&nbsp; CLC&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; clear the carry (so we are sure that if the carry flag is set, it will be from the ASL and not from something else<br />&nbsp; ASL A&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Arithmetic Shift Left ==&gt; move all bit's one place to left = multiplying by two. Needed to calculate the Ymirrored position of the ball. <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; If we ASL the value 250 ==&gt; 500 ==&gt; bigger then 255 ==&gt; this means the carry flag is set (carry flag = 255)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; So the value in A is: 500-255 = 245 (A = 2 x Previous A - 255)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; if the carry flag is not set then (A = 2 x Previous A )<br />&nbsp; STA Multiplier&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; store the value of A in the multiplier so we can use it later on<br />&nbsp; BCS MirroringBottomBiggerThen255&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; If the carry is set (which means that A is bigger then 255) ==&gt; jump to label<br />&nbsp; <br />&nbsp; SEC&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set carry because: A = A - number - (1-carry)<br />&nbsp; SBC boxTopY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; subtract the box Top Y coodinate from A <br />&nbsp; STA boxTopY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; storing it back in the box Top Y coordinate<br />&nbsp; JMP MirroringDownDone&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Jump to label to skip over other code (for when carry was set)<br />&nbsp; <br />&nbsp; MirroringBottomBiggerThen255:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; label to skip to if the carry was set (and 2 x A &gt; 255<br />&nbsp; LDA #255&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; load 255 into A (if carry = set ==&gt; X mirror = 2 x Xwall - Xball ; 2 x Ywall = 255 (because carry was set) + Ywall_remainder - Xball<br />&nbsp; SEC&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set carry because: A = A - number - (1-carry)<br />&nbsp; SBC boxBottomY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; subtract the Yball coordinates from A first (otherwise we can have a value bigger then 255)<br />&nbsp; SBC #07&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; then subtract 07 to switch from boxBottom Y to boxTopY (which is main coordinate)<br />&nbsp; CLC&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; clear the carry before adding<br />&nbsp; ADC Multiplier&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Add the value in the multiplier to A (= remainder of the Ywall)<br />&nbsp; STA boxTopY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; storing it in boxTopY<br />&nbsp; MirroringDownDone:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Mirroring is done, still need to update other coordinates<br />&nbsp; LDA boxTopY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; load the location of the Y-value of the collision box top<br />&nbsp; CLC &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; clear the carry before adding<br />&nbsp; ADC #03 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Add 3<br />&nbsp; STA boxInsideRightY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; store in boxInsideRightY<br />&nbsp; ADC #01&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Add 1<br />&nbsp; STA boxInsideLeftY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Store in boxInsideLeftY<br />&nbsp; ADC #03&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Add 3<br />&nbsp; STA boxBottomY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Store in boxBottomY<br />&nbsp; <br />&nbsp; CheckCollisionDownSkipper:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; label used to skip over code<br />&nbsp; JMP CheckCollisionDownDone&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; label to jump back to after checking the collision</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>