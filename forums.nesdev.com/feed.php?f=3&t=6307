<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=6307" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-04-26T13:51:27-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=6307</id>
<entry>
<author><name><![CDATA[Hamburgler]]></name></author>
<updated>2010-04-26T13:51:27-07:00</updated>
<published>2010-04-26T13:51:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60444#p60444</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60444#p60444"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60444#p60444"><![CDATA[
This may be helpful to look at:<br /><br /><!-- m --><a class="postlink" href="http://homepage.mac.com/jorgechamorro/a2things/6502.jpg">http://homepage.mac.com/jorgechamorro/a2things/6502.jpg</a><!-- m --><br /><br />I believe the spare memory fetch goes into both the predecode register and the input latch at the same time, so it can decide what to do after the fetch.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3370">Hamburgler</a> — Mon Apr 26, 2010 1:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Petruza]]></name></author>
<updated>2010-04-26T08:15:05-07:00</updated>
<published>2010-04-26T08:15:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60418#p60418</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60418#p60418"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60418#p60418"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />...<br />#1 is right.  The LDA opcode is read twice.<br />...<br /></div><br /><br />Thanks!<br />It's clear now.<br /><br /><br /><div class="quotetitle">qeed wrote:</div><div class="quotecontent"><br />...This shouldn't really matter except for timing purposes. I don't think anyone would be crazy enough to point PC to an address of a memory mapped register...<br /></div><br /><br />Yes, I agree with you, but what if one does? I think correctly emulating the 6502's dummy reads and writes, with the extra processing time that that consumes, is still a low price to pay to have a more accurate emulator.<br />In any case, the emulator could have an optional data collecting functionality that would record statistical debugging info so I could analyze if this situation happens and how frequently.<br /><br />Does anyone know if any emulator does this sort of debug reporting?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3773">Petruza</a> — Mon Apr 26, 2010 8:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qeed]]></name></author>
<updated>2010-04-26T07:58:43-07:00</updated>
<published>2010-04-26T07:58:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60416#p60416</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60416#p60416"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60416#p60416"><![CDATA[
I am not sure of the hardware behavior myself, but most emus I see deals with it by just reading the address (pc) twice. in case of SEI, it would read PC for the opcode, then PC++ and then throw it away. This shouldn't really matter except for timing purposes. I don't think anyone would be crazy enough to point PC to an address of a memory mapped register. If they did, it would just be for testing accuracy purposes, rather than getting a game to run.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3551">qeed</a> — Mon Apr 26, 2010 7:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2010-04-26T07:57:22-07:00</updated>
<published>2010-04-26T07:57:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60415#p60415</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60415#p60415"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60415#p60415"><![CDATA[
<div class="quotetitle">Wave wrote:</div><div class="quotecontent"><br />So it's some sort of primitive pipelining?<br /></div><br />Yes.<br /><br /><div class="quotetitle">Wave wrote:</div><div class="quotecontent"><br />Does then the sorting of your operations consume less cycles if ordered a certain way?<br /></div><br /><br />No.  I just means that many instructions take 1 cycle less than they "should" because the CPU starts fetching the next opcode while it does the job for the current instruction.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />but I'm confused about which one is actually right:<br /></div><br /><br />#1 is right.  The LDA opcode is read twice.<br /><br /><br />Really the flow is like this... say you have the following code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CLC     ; 2 bytes, 2 cycles<br />ADC #5  ; 2 bytes, 2 cycles<br />STA $00  ; 2 bytes, 3 cycles<br /></div><br /><br />&lt;Speculation&gt;Fetching a byte probably takes the entire cycle, which means you can't fetch a byte and use it on the same cycle.  You can only use it on the next cycle&lt;/Speculation&gt;<br /><br />With that in mind (note this is largly more speculation on some of the finer details, but I'm pretty sure this is the basic idea):<br /><br />CLC cycle 0:<br />  - fetch the 'CLC' opcode ($18)<br />  - inc the PC<br />  - finish doing whatever the last instruction was doing (if anything)<br /><br />CLC cycle 1:<br />  - fetch the next byte 'N' in anticipation of this instruction needing it (note the processor doesn't know it's CLC at this point)<br />  - figure out that opcode $18 actually is for the CLC instruction<br /><br />ADC cycle 0 (CLC cycle '2'):<br />  - fetch the 'ADC" opcode<br />  - increment the PC<br />  - finish CLC here (C is cleared)<br /><br />ADC cycle 1:<br />  - fetch the next byte 'N' in anticipation of needing it<br />  - figure out that this opcode is ADC immediate.<br />  - inc PC because ADC immediate uses the 'N' fetched byte<br />  - (note it can't actually do the addition here because it's still fetching N)<br /><br />STA cycle 0 (ADC cycle '2'):<br />  - fetch the STA opcode:<br />  - increment the PC<br />  - finish ADC here (do the addition here)<br /><br />... etc<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Apr 26, 2010 7:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Petruza]]></name></author>
<updated>2010-04-26T07:10:53-07:00</updated>
<published>2010-04-26T07:10:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60412#p60412</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60412#p60412"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60412#p60412"><![CDATA[
<div class="quotetitle">Hamburgler wrote:</div><div class="quotecontent"><br />Each cpu cycle is broken down into two phases: an operation then a memory access, in that order. If the opcode does not have to access memory on its last cycle, it will pre-fetch the next opcode. This makes some instructions appear to be one cycle shorter than they really are.<br /><br />There's no need to re-fetch the opcode, or use it from a cache. Execution of the next opcode will begin immediately as if the two opcodes overlapped on that one cycle.<br /></div><br /><br />So I'm a bit confused now, let's see this example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SEI<br />LDA #1</div><br />So, when the PC points to the SEI instruction, the opcode byte is fetched and also the following byte is pre-fetched just in case the opcode needed an operand.<br />Then when the cpu identifies that the SEI opcode doesn't need an operand, one of the following cases would occur, but I'm confused about which one is actually right:<br /><br />1) Although the opcode of LDA was pre-fetched as if it were an operand of the previous opcode, it's discarded.<br />The PC then still points to the same byte which is read again, but this time it's considered an opcode, and the instruction interpreting cycle goes on.<br />In this case the opcode byte for LDA was read twice.<br /><br />2) The opcode byte for LDA is recognized as not being the operand of the previous instruction, so it's automatically used as the opcode for the next instruction, without reading it again from memory.<br />In this case the byte at that address is read only once.<br /><br />The difference won't matter unless reading that single byte once or twice would have different side effects, for example, if the PC happens to point to a readable memory-mapped register.<br /><br />I guess not many games, if any, direct the flow of the program to a memory-mapped register, but it is a possibility of the 6502 so it could happen.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3773">Petruza</a> — Mon Apr 26, 2010 7:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Wave]]></name></author>
<updated>2010-04-26T06:28:30-07:00</updated>
<published>2010-04-26T06:28:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60411#p60411</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60411#p60411"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60411#p60411"><![CDATA[
<div class="quotetitle">Hamburgler wrote:</div><div class="quotecontent"><br />Each cpu cycle is broken down into two phases: an operation then a memory access, in that order. If the opcode does not have to access memory on its last cycle, it will pre-fetch the next opcode. This makes some instructions appear to be one cycle shorter than they really are.<br /><br />There's no need to re-fetch the opcode, or use it from a cache. Execution of the next opcode will begin immediately as if the two opcodes overlapped on that one cycle.<br /></div><br />So it's some sort of primitive pipelining?<br />Does then the sorting of your operations consume less cycles if ordered a certain way?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4116">Wave</a> — Mon Apr 26, 2010 6:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2010-04-21T06:40:16-07:00</updated>
<published>2010-04-21T06:40:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60215#p60215</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60215#p60215"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60215#p60215"><![CDATA[
- Yes, that's the doc I used to write my CPU driver.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Wed Apr 21, 2010 6:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Hamburgler]]></name></author>
<updated>2010-04-21T05:28:21-07:00</updated>
<published>2010-04-21T05:28:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60213#p60213</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60213#p60213"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60213#p60213"><![CDATA[
Each cpu cycle is broken down into two phases: an operation then a memory access, in that order. If the opcode does not have to access memory on its last cycle, it will pre-fetch the next opcode. This makes some instructions appear to be one cycle shorter than they really are.<br /><br />There's no need to re-fetch the opcode, or use it from a cache. Execution of the next opcode will begin immediately as if the two opcodes overlapped on that one cycle.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3370">Hamburgler</a> — Wed Apr 21, 2010 5:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2010-04-20T20:05:56-07:00</updated>
<published>2010-04-20T20:05:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60208#p60208</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60208#p60208"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60208#p60208"><![CDATA[
+1 NESICIDE<br /><br />If you want details on what reads are done when, and which reads are discarded and which reads are used... they're all well documented here:<br /><br /><!-- m --><a class="postlink" href="http://nesdev.com/6502_cpu.txt">http://nesdev.com/6502_cpu.txt</a><!-- m --><br /><br />Just search the doc for "6510 Instruction Timing".  It gives cycle-by-cycle breakdowns of exactly what the CPU is doing on every cycle.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Apr 20, 2010 8:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2010-04-20T19:29:44-07:00</updated>
<published>2010-04-20T19:29:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60207#p60207</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60207#p60207"/>
<title type="html"><![CDATA[Re: 6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60207#p60207"><![CDATA[
<div class="quotetitle">Petruza wrote:</div><div class="quotecontent"><br />It's been stated that 6502 reads two bytes from the PC regardless of the operation having 1, 2 byte operands, or none at all.<br /><br />But in the case of a single byte operation, like for example, SEI, the second byte read, the supposedly 'operand' is actually the next opcode.<br /><br />What I want to know is if the 6502 in this case, when it has to read the next operand, after incrementing the PC, does actually read the byte from memory or just uses the previously cached byte.<br /><br />In the event that the byte is read from a memory-mapped register, the difference between reading once or reading twice does matter, as it may have different effects.<br /></div><br /><br />6502 doesn't have a cache so it redoes the fetch of the next opcode I believe.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Tue Apr 20, 2010 7:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Petruza]]></name></author>
<updated>2010-04-20T19:03:56-07:00</updated>
<published>2010-04-20T19:03:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60205#p60205</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60205#p60205"/>
<title type="html"><![CDATA[6502's reads in advance for single byte opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6307&amp;p=60205#p60205"><![CDATA[
It's been stated that 6502 reads two bytes from the PC regardless of the operation having 1, 2 byte operands, or none at all.<br /><br />But in the case of a single byte operation, like for example, SEI, the second byte read, the supposedly 'operand' is actually the next opcode.<br /><br />What I want to know is if the 6502 in this case, when it has to read the next operand, after incrementing the PC, does actually read the byte from memory or just uses the previously cached byte.<br /><br />In the event that the byte is read from a memory-mapped register, the difference between reading once or reading twice does matter, as it may have different effects.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3773">Petruza</a> — Tue Apr 20, 2010 7:03 pm</p><hr />
]]></content>
</entry>
</feed>