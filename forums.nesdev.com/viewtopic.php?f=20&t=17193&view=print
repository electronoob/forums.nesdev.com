<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Is a Game Boy faster than an NES?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/">https://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Is a Game Boy faster than an NES?</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/viewtopic.php?f=20&amp;t=17193">https://forums.nesdev.com/viewtopic.php?f=20&amp;t=17193</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 27, 2018 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The relative speed of the NES and Game Boy can be calculated in several ways.<br /><br />The Nintendo Entertainment System and the Super Game Boy accessory have the same 945/44 = 21.47 MHz master clock. The NTSC NES divides the master clock by 12 to make the 1.79 MHz 6502 clock. SGB divides the clock by 5 (4.30 MHz) before passing it to the Game Boy's LR35902 CPU, whose multicycle implementation in turn divides it by 4 (1.07 MHz). Thus GB effective clock rate is 3/5 (60%) of the NES clock rate, which opens the debate about whether LR35902 makes it up in work per clock.<br /><br />Stack instructions: A push and pop on LR35902 take 7 cycles total, same as 6502, but they handle 2 bytes at a time. LR35902's <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">RET</tt> is faster than 6502's <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">RTS</tt> by 2 cycles, reducing the penalty for subroutine calls. The indirect call instruction <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">JP &#40;HL&#41;</tt> takes 1 cycle, which is faster than the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">load high PHA load low PHA RTS</tt> on 6502.<br /><br />ALU instructions: LR35902's lack of a penalty cycle for &quot;implied&quot;-mode instructions helps. The Intel-style carry (as opposed to MOS/ARM-style carry) allows a fast idiom for sign-extending A: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">RLCA SUB A</tt> copies bit 7 to all bits of A. There's an 8-bit rotate in addition to the 6502's 9-bit one, an arithmetic right shift that copies old bit 7 to new bit 7 (no need for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">CMP #$80 ROR A</tt>), and a nibble swap instruction. But there's no sign flag after ALU operations, and testing bit 7 of an ALU result needs another cycle or two for a compare or bit-test instruction.<br /><br />Memory instructions: With its 2-cycle 16-bit increments and autoincrement for the pointer register HL, LR35902 is arguably faster than 6502 for sequential access to arrays, especially those larger than 256 bytes. But for random access, I've mentioned elsewhere how LR35902 lacks the 6502's rich indexed addressing modes. Thus random access to a field of a structure, such as the fields of an actor in a game, requires radical reorganization of structures in memory and more preparation in advance based on in which order the fields will be accessed. Later I'll post the seven workarounds that I discovered.<br /><br />RAM: Game Boy has more. This tilts some space-time tradeoffs; I'd be interested to read how this plays out in practice.<br /><br />C language: Making a game that runs with minor changes between PC and either NES or Game Boy often involves writing the game logic in C and only the I/O (input, audio, graphics) and systems parts of the engine in assembly. <a href="https://gist.github.com/ISSOtm/4f4d335c3fd258ad0dfc7d4d615409fd" class="postlink">ISSOtm has written thoughts about C on Game Boy</a>. Instructions that involve HL and SP allow for a larger hardware stack, reducing some of the soft-stack penalty that cc65 has to pay.<br /><br />VRAM bandwidth: GB and NTSC NES have almost the same count of cycles per scanline (114 vs. 113.667). NTSC NES has 20.5 lines of vertical blanking (assuming half of prerender is &quot;borrowed&quot;) while GB has 10. GB, however, doesn't support extending blanking to add more VRAM update time. An unrolled copy to VRAM is 6 cycles/byte on GB compared to 8 on NES. But because the GB PPU is faster relative to the CPU (4 dots on GB, 3 on NTSC NES) and narrower (160 dots vs. 256), GB also has the majority of its scanline (at least 64 cycles) open for VRAM reading and writing during horizontal blanking. This makes it practical for a loop to copy 8 bytes to VRAM after each of the 144 scanlines even without the GBC's CHR HDMA feature, or 1152 bytes per screen, so long as you take care about tearing. But nothing beats the bandwidth of having all your tiles in CHR ROM at a slight cost in flexibility, though GBC has banked CHR RAM.<br /><br />OAM DMA on Game Boy takes 160 cycles, running at 1 cycle per byte like Super NES DMA, as opposed to 514 cycles (2 per byte) on the NES. Because it doesn't pause the CPU during DMA execution, only HRAM (its counterpart to NES zero page or GBA IWRAM) is accessible, and DMA is normally done by a 10-byte subroutine in HRAM.<br /><br />Scrolling: Like the Super NES, the Game Boy lacks the oddball 30-row nametable height. This simplifies some designs for nametable update packet updates. Monochrome doesn't have attributes at all; GBC is like MMC5 EXRAM or Super NES nametables in that it has a second byte plane of attributes whose addresses parallel those of the nametable. But without special support for +32 increment, a nametable column copy loop is slightly slower than 6 cycles/byte.<br /><br />Frame rate: Both the NES and Game Boy run at close to 60 frames per second. The original green screen Game Boy (DMG) takes several refreshes to change a pixel from light to dark or vice versa. The Game Boy Pocket and Game Boy Color take fewer, but still not fast enough to make 30 Hz flicker as noticeable as it would be on SGB. This lets developers get away with engines that run on twos, on threes, or even on fours (<em>Balloon Kid</em>), for 30, 20, or 15 fps.<br /><br />I'm interested in fleshing out the arguments both ways to make them more quantitative as opposed to hand-wavey.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Tue Mar 27, 2018 9:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />From the Spectrum wars, a 3.58Mhz Z80 ~ 0.98Mhz 6502. To which the Gameboy is more Z80-/8080+ and the NES is 6502- but 4.2 vs 1.89 my money is on the NES's cpu for raw power. <br />The Z80 has higher code density making unrolling things more practical in tight memory situations, but the 6502 lets you throw down tables for little penalty. <br /><br />Another consideration is resolution, a Gameboy is 160x144 vs a Nes 256x240 so 23040 vs 61440 which means the GB has 37.5% the number of pixels to update, so in the bang per pixel I would think a GB slaughters a NES. There are no palletes which means the GB screen takes even less bytes, and faster DMA on the OAM mean you can probably get more done. <br /><br />More RAM always helps, although the Z80s lack of setting flags on load instructions makes storing 128/0 for a NegativeFlag variable mostly moot as you need to do a ld and/or to get the flags set. <br /><br />C on a Z80 makes alot more sense than on a 6502, still not a great idea, but a lot more sane.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 28, 2018 8:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I can understand &quot;bang per pixel&quot; as a metric for fillrate in software 3D, as the viewport is a larger fraction of the screen in <em>Qix</em> for Game Boy than NES and in <em>Faceball 2000</em> for Game Boy than Super NES. But in a 2D game on a machine with hardware scrolling and sprites, a lot of things scale with number of objects more than their size. So if there are 8 moving things on the screen, there still need to be 8 move calls whether they're 32x32 pixels each on a Genesis (10% of screen width) or 16x16 pixels each on a Game Boy (also 10% of screen width).<br /><br />No palettes on monochrome mean no color cycling on waterfalls and the like, meaning tile rotation through CHR RAM updates needs to make up for it.<br /><br />GB OAM DMA takes about 1.5 vblank scanlines out of 10, leaving 8.5. NES OAM DMA takes just shy of 5 vblank scanlines out of 20, leaving 15, still having more scanlines to do things. But GB has another edge in that OAM access is less buggy,[1] meaning something with only a few sprites might get away with writing them directly to OAM rather than making a display list and DMAing it in. But filling that display list is another issue, and the speed of that can depend on how the address of the source data is calculated.<br /><br /><br /><span style="font-size: 85%; line-height: normal">[1] &quot;Less buggy&quot; in that only 16-bit increment instructions write garbage to GB OAM, not just the mere act of writing beyond the first 7 bytes like on NES.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Wed Mar 28, 2018 9:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is really interesting.  I thought the GB's CPU just crawled compared to the NES', when just simply considering the GB using a Z80/8080 and looking at its clock speed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Wed Mar 28, 2018 9:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sure but a smaller screen does normally mean less on the screen. For example Mario vs Warioland. Having more things &quot;off screen&quot; lets you offload their update rate a bit. The poor display with no backlight and ghosting means you want less things moving slower anyway right?<br /><br />Another feature is the GB has mem mapped VRAM, none of this port rubbish, pure direct access. The Z80 has one glorious trick up its sleeve, the one thing it will smash a 6502 in, and that is rapidly moving blocks of data around. To the point that I'm currently investigating how to do it effectively because even on a 2Mhz Z80 is about 25% faster than a 1Mhz 6502. Granted the GB80 doesn't have the other register set, which cuts the data you can move at once in half, I would think it still beats the NES CPU + Port. Its not as fast as pure immediate speed code, but its a lot more generic and eats a lot less space which makes it more practical. You could fit the routine into the 120? bytes of HRAM, along with the initial data you want. This would allow you to get the GB80 to setup the registers and the dest SP while the OAM DMA happens, then as soon as it drops, hit with the first PUSH set, then keep going until you hit the end of Mode 2.  If only there was the 2nd set still, as you could keep it loaded for a H-BLANK update, but alas.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Wed Mar 28, 2018 11:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looking at the GB80 limits... it might work out slower than the 6502 to do the stack move vs LDA XXXX,x STA XXXX,x

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Mar 29, 2018 7:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here are ways to read or write a member of a power of two aligned data structure in RAM, as a way of compensating for the slowness (on Z80) or nonexistence (on LR35902) of indexed addressing.  They assume that a pointer to some member of the struct is already in HL.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ; 8 cycles, no extra register<br />&nbsp; ld a,$E0<br />&nbsp; and a,l<br />&nbsp; xor a,member_offset<br />&nbsp; ld l,a<br />&nbsp; ld a,&#91;hl&#93;&nbsp; ; or B, C, D, or E trashing A<br /><br />&nbsp; ; 8 cycles, extra HRAM variable to hold L of struct start<br />&nbsp; ; ergo no real benefit<br />&nbsp; ldh a,&#91;Lcur_actor_base&#93;&nbsp; ; 3<br />&nbsp; xor a,member_offset&nbsp; ; 2<br />&nbsp; ld l,a<br />&nbsp; ld a,&#91;hl&#93;&nbsp; ; or B, C, D, or E trashing A<br /><br />&nbsp; ; 6 cycles, extra register B to hold L of struct start<br />&nbsp; ld a,b<br />&nbsp; xor a,member_offset<br />&nbsp; ld l,a<br />&nbsp; ld a,&#91;hl&#93;&nbsp; ; or C, D, or E trashing A<br /><br />&nbsp; ; The next three require either the programmer or macros to keep<br />&nbsp; ; track of which member was accessed most recently.&nbsp; This makes<br />&nbsp; ; them less practical across calls or branches.<br /><br />&nbsp; ; 6 cycles, no extra register, depends on last offset<br />&nbsp; ld a,l<br />&nbsp; xor a,member_offset^last_member_offset<br />&nbsp; ld l,a<br />&nbsp; ld a,&#91;hl&#93;&nbsp; ; or B, C, D, or E trashing A<br /><br />&nbsp; ; The next two modify L in place and leave A unchanged if B, C,<br />&nbsp; ; D, or E is accessed.&nbsp; But this requires predicting in advance<br />&nbsp; ; in which order the members of a structure will be accessed<br />&nbsp; ; and having the discipline to rewrite code every time the<br />&nbsp; ; structure layout is revised to reflect new access patterns.<br />&nbsp; ; If loading into A, replace &#91;hl&#93; with &#91;hl+&#93; or &#91;hl-&#93; to make<br />&nbsp; ; last_member_offset for the next access one greater or less<br />&nbsp; ; than member_offset for this access.<br /><br />&nbsp; ; 4 cycles, differs by 1 bit from last offset<br />&nbsp; ; no extra register, A preserved<br />&nbsp; set 2,l<br />&nbsp; ld a,&#91;hl&#93;&nbsp; ; or B, C, D, or E<br /><br />&nbsp; ; 3 cycles, differs by +/-1 from last offset<br />&nbsp; ; no extra register, A preserved<br />&nbsp; inc l<br />&nbsp; ld a,&#91;hl&#93;&nbsp; ; or B, C, D, or E<br /><br />&nbsp; ; The next one assumes 256-byte slots, as if memory is laid<br />&nbsp; ; out in a 2D array.&nbsp; If this struct uses, say, xx00-xx17 of<br />&nbsp; ; pages C0-C7, other things can use xx18-xxFF of the same page.<br />&nbsp; ; This method works on machines with 8K or more of RAM, such as<br />&nbsp; ; Spectrum, MSX, Game Boy, and Master System/Game Gear, but not<br />&nbsp; ; so well on 1K RAM machines like ColecoVision and SG-1000.<br /><br />&nbsp; ; 4 cycles<br />&nbsp; ld l,member_offset<br />&nbsp; ld a,&#91;hl&#93;&nbsp; ; or B, C, D, or E<br /><br />&nbsp; ; The last one assumes copying a struct into HRAM beforehand.<br />&nbsp; ; Copying an n-byte struct into HRAM beforehand and out afterward<br />&nbsp; ; adds roughly 12*n cycles to calling methods on an instance.<br />&nbsp; ; For a struct using (say) the first 20 bytes of its 32-byte slot,<br />&nbsp; ; and eight instances in a pool, copying in and out could add up to<br />&nbsp; ; 1920 bytes or 11% of a frame.<br /><br />&nbsp; ; 3 cycles, HL not needed, register A only<br />&nbsp; ldh a,&#91;hThis+member_offset&#93;<br /></div><br /><br />Compare to 6502, where you'd stripe the struct into a set of separate<br />arrays, one for each byte, with X identifying which member's fields<br />will be accessed.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ; 4 (read) or 5 (write) cycles, no extra register, A preserved<br />&nbsp; ; Can also load into Y, or store from Y if array in direct page<br />&nbsp; lda member_array,x&nbsp; ; standard syntax<br />&nbsp; ; or<br />&nbsp; ld a,&#91;member_array+X&#93;&nbsp; ; in nocash-style pseudo-Z80 syntax<br /></div><br /><br />The striping paradigm also applies to Z80 and LR35902 to a lesser extent if you (say) store all accelerations together, all vertical velocities together, all vertical displacements together. Then you can arrange updates to your objects in a SIMD (single instruction multiple data)-style paradigm where each step has its own loop. For example, a loop to add all vertical velocities to the corresponding vertical displacement might have the pointer to velocity in DE and the pointer to displacement in HL. This arrangement, <a href="https://forums.nesdev.com/viewtopic.php?p=177520#p177520" class="postlink">preferred by adam_smasher</a>, is fine if the array is homogeneous, with all elements having the same behavior and all computations applied to all elements.<br /><br />But for (say) enemy movement in a platformer, the behaviors will differ greatly from one type of object to the next. Say an array contains data for 8 actors that can be of different subtypes, such as an enemy that walks toward the player, an enemy that flies near the top of the screen and dive bombs the player directly downward, an enemy that paces back and forth, an enemy that flies near the top and periodically swoops down toward the player, an enemy that walks in a straight line and can be turned over and picked up, or a powerup that sits still and waits for the player to collect it. All of these actor types coexist in the same actor pool. Then each loop will need an associated flag as to whether the step of computation applies to each particular object, and now you need <em>three</em> pointers, adding BC to point to this flag. That pretty much exhausts your registers. I guess you could interleave &quot;which steps should be skipped&quot; fields with data fields in these arrays.<br /><br />So if accessing fields of an element of an array of structs is slow, and adam_smasher's SIMD style paradigm doesn't apply to somewhat heterogeneous arrays, the LR35902 will have to make up for the inflexibility of its sequential-access-oriented address generator in other ways in order to keep up with a 6502.<br /><br />Which of the above methods to access fields of elements of actor pools are used most often in action games for Game Boy? Are there any I missed?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Thu Mar 29, 2018 10:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; copy the ent data in an area in the stack, leaving enough room for a few calls etc<br />LD HL,(SP+(-Offset-ValueIndex)) <br />; this then gets 2 bytes or 1 word param in to HL<br /></div>It uses 12 clocks per pair, which I guess you are converting to a 1Mhz 6502 base so 3 clocks? or NES speed 2 clocks? <br />With a copy set up cost though

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Mar 30, 2018 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After implementing a proportional font drawing routine in LR35902 assembly yesterday, I've realized that keeping local variables in registers as much as possible and carefully choosing what to spill out to HRAM does speed things up. To make this practical, I ended up writing a subroutine first as a rough pass, where locals are more eagerly spilled to HRAM as if I were coding for 6502, and then doing a second optimization pass to allocate registers. (Is that the typical work flow among Z80 or LR35902 programmers?) One advantage over the 6502 is that sequential accesses through DE or HL need not spend cycles rereading the source and destination pointers from memory all the time. The same is true of locals kept in registers. This and the lack of an &quot;internal operation&quot; cycle for what 6502 calls &quot;implied&quot; mode instructions make up for the penalty of needing to constantly <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ld</tt> things in and out of A.<br /><br />OO code is still going to be a pain though, which is why my first GB projects probably aren't going to involve situations that need OO code (such as enemy movement).<br /><br /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">LD HL,(SP+(-Offset-ValueIndex))</div></div><br />The <a href="http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html" class="postlink">instruction set reference I've been using</a> says <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LD HL,SP+rr</tt> is 12 master clocks, or 3 cycles. This isn't enough to read the instruction, the offset, and 16 bits of data from stack memory. So I'm guessing it just adds the signed 8-bit value to SP and stores the result in HL. Then another <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LD A|B|C|D|E,[HL]</tt> (2 cycles) is needed, but at least it works with BCDE and thus preserves A if that's needed. The method can also be be mixed with the HRAM copy method by <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LD HL,hThis</tt>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Sun Apr 01, 2018 2:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just when you think you find something .. denied!<br /><br />The Z80 is such a 95% cpu... it almost does things in a nice way, but it just lacks that 1 opcode.... <br /><br />I've been asking in Z80 circles and basically I just get silence. There is no good way. The best I've be given is &quot;align to 256 boundaries&quot; and Use Tables.. <br />I've also been pointing out to others how to use their CPU faster ..sigh...<br /><br />Seems there are no silver bullets nor horizons. But the Stack move trick Really does slay a 6502 <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> Just the main computer I'm doing it on only has a 2mhz Z80 which makes it only slightly faster, on a 3.5 or 4mhz Z80 it would slay...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Apr 01, 2018 9:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Essentially the problem is that of accessing elements of a 2D array with one dimension (actor ID) constant over the short term and the other dimension (actor property) not sequential. Perhaps by &quot;align to 256 boundaries&quot;, they're telling you to put the actors at $C0E0-$C01F, $C1E0-$C1FF, ..., $C7E0-$C7FF. This way actor ID can be held constant at $C0, $C1, ..., $C7, and actor property can be set to $E0, $E1, ..., $FF. But that isn't so convenient if you don't have other arrays (2D or otherwise) to fill the remaining 224 bytes of each page. (Nor would it work on a ColecoVision.)<br /><br />What exactly is this &quot;stack move trick&quot;, and does it work even when interrupts are enabled? Or would I have to first test whether LY is close to LYC before doing a move in order to avoid graphical glitches due to missing a STAT IRQ? Because if you <a href="http://blog.moertel.com/posts/2013-12-14-great-old-timey-game-programming-hack.html" class="postlink">try using a stack move on a 6809</a>, you get corruption from the return address and things your ISR pushes.<br /><br />EDIT: I've been informed that Retrocomputing Stack Exchange deems <a href="https://retrocomputing.stackexchange.com/questions/6095/why-do-c-to-z80-compilers-produce-poor-code" class="postlink">C about as bad of a fit for Z80 as for 6502</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Mon Apr 02, 2018 12:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Basically you<br /><br />Save SP<br />Load SP from SRC<br />pop AF<br />pop BC<br />pop DE<br />pop HL<br />EXX<br />pop AF<br />pop BC<br />pop DE<br />pop HL<br />Save SP to SRC<br />Set SP to DEST<br />push HL<br />push DE<br />push BC<br />push AF<br />EXX<br />push HL<br />push DE<br />push BC<br />push AF<br />SET SP from SRC<br />....<br /><br />And yes an IRQ could stuff it up. However typically you would be doing this during VBlank and hence be in the interrupt already, or do it at a point where you know you are safe from interrupts. Sadly somebody at SEGA decided that the PAUSE button should be on NMI... obviously from the Commodore School of Design ala the RESTORE key ... <br />Now the GB only has half, so not quite the bang per buck but I would expect it to still be faster. Person at the SMS forum did a badly optimised broken pop HL out (c) out (c) test and got 25% over outi to which full pop/pull would be faster again, but the SMS has &quot;port&quot; access to memory<br /><br />I think by 256 align they meant<br />00XX<br />01XX<br />02XX<br />and then you only have to mod l in a hl pair to index into an entity. This person was using PacMan hardware and probably only had 5 entities. Somebody else pointed out that the Filmation games ( ZX spectrum ) used IX/Y. I would point out that Filmation games are slow <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Mon Apr 02, 2018 12:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On SMS you can inhibit NMI from cartslot by forcing the line high, not gonna work on JP SMS or Mark III though. Game Gear has no worries in GG mode but will barf in SMS mode when someone touches Start.<br />NMI was originally reset on SC-3000, and then got repurposed as Pause on SG-1000 and later hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 02, 2018 7:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">And yes an IRQ could stuff it up. However typically you would be doing this during VBlank and hence be in the interrupt already, or do it at a point where you know you are safe from interrupts.</div><br />In a 2-player game, is the Game Boy ever safe from <a href="http://gbdev.gg8.se/wiki/articles/Serial_Data_Transfer_(Link_Cable)" class="postlink">Game Link port</a> byte completion interrupts that can happen every 1024 cycles (9 scanlines)? Are games supposed to instead poll the transfer busy flag (SC bit 7) periodically in the stack transfer loop?<br /><br /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Person at the SMS forum did a badly optimised broken pop HL out (c) out (c) test and got 25% over outi</div><br />That sounds sort of like how the Popslide library on NES works. It handles the (remote) possibility of being interrupted by 1. treating the input buffer on the stack as consumable and 2. allocating 8 unused bytes of headroom before the buffer. (An IRQ wouldn't happen in a vblank handler unless obscure music engine tricks are in use.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Mon Apr 02, 2018 7:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Is a Game Boy faster than an NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I would hope Nintendo wasn't as janky as to make pulse interrupts.. but looking at the nes.hmm... to which the interrupt is still there when you EI, as the line will still be held in the active state until you clear it. Although I'm assuming the Z80 behaves in this way, I will do a test on my 128 to confirm its behaviour. <br /><br />As you are probably going to &quot;pull&quot; from ROM as it will have the prebuilt data you need for frames and the such, any interrupt at that point is going to write to no mans land ( maybe triggering a BANK change on GB, that would be evil... ) to which you can then set a flag in RAM to trap that you have entered the IRQ while in ROM stack, and then restore back into the routine at some safe point. <br />If it was while in writing to dest, save for the last couple of bytes, it will be safe, as it will then wind back the stack value and you just continue putting the right data back over it. Unless you are in VBlank to which point you may not still be in VBlank and you need to handle said case, wait for next VBlank, move back to start of handler and go again. If it was caused by data transfer then the glitch in the frames is probably not the best, but if its the odd glitch probably better in the long run.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>