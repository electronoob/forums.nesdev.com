<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Cartridge / Memory Questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Cartridge / Memory Questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6565">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6565</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tineras</b> [ Mon Jul 05, 2010 8:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Cartridge / Memory Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have some questions on how cartridge data is loaded into CPU memory on startup.  I am using some simple test programs to make it easier for me to understand what's going on, but I still have a few questions.
<br />
<br />For example, when viewing these .nes files in a hex editor, I can see that total address space is 0x0000 to 0x6000.  It is clear that the first 16 Bytes are part of the header (with no 512B trainer).  Then it looks as if the PRG-ROM starts immediately after from 0x0010-0x400F followed by the CHR-ROM from 0x4010-0x6000.
<br />
<br />Is this correct so far?
<br />
<br />I am wondering what part of these gets placed into the CPU and PPU memory and where.  I am assuming that because it is only 8k, the PRG-ROM gets place into the CPU memory at address C000 like so:
<br />
<br />CPU C000-FFFF &lt;--- PRG-ROM 0x0010-0x400F
<br />
<br />But now I'm a little confused about the PPU memory.  The remaining memory in the hex file is only 8176 (0x6000-0x4010) Bytes.  &lt;-- What happened to the other 16 Bytes?  This is not even enough to fille the entire Pattern Tables, let alone the Name/Attribute Tables and Sprite/Image Palettes. 
<br />
<br />I can only assume that there is only a single Pattern Table or that they are smaller than 8192Bytes.  Is this true as well?
<br />
<br />I have more questions, but I'll start here so this thread isn't overwhelming.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 05, 2010 9:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Cartridge / Memory Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tineras wrote:</div><div class="quotecontent">I have some questions on how cartridge data is loaded into CPU memory on startup.</div><br />It's not actually "loaded". This word implies that there are memory transfers involved and that data is copied from to cart to some other memory, which is not the case.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For example, when viewing these .nes files in a hex editor, I can see that total address space is 0x0000 to 0x6000.  It is clear that the first 16 Bytes are part of the header (with no 512B trainer).  Then it looks as if the PRG-ROM starts immediately after from 0x0010-0x400F followed by the CHR-ROM from 0x4010-0x6000.<br /><br />Is this correct so far?</div><br />For a game with 16KB of PRG and 8KB of CHR, yes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I am wondering what part of these gets placed into the CPU and PPU memory and where.  I am assuming that because it is only 8k, the PRG-ROM gets place into the CPU memory at address C000 like so:<br /><br />CPU C000-FFFF &lt;--- PRG-ROM 0x0010-0x400F</div><br />You mean 16KB, right? It is mirrored. It's visible at $8000-$BFFF <strong>and</strong> $C000-$FFFF. Also, just to be clear, the header is not part of the PRG-ROM, it's just something made up so that emulators would know how to interpret the data that follows, but it is not present anywhere in a real cart.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">]But now I'm a little confused about the PPU memory.  The remaining memory in the hex file is only 8176 (0x6000-0x4010) Bytes.  &lt;-- What happened to the other 16 Bytes?</div><br />You must be viewing it wrong, or your file is corrupted. The size should be: 16 (header) + 16384 (PRG) + 8192 (CHR).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is not even enough to fille the entire Pattern Tables, let alone the Name/Attribute Tables and Sprite/Image Palettes.</div><br />A ROM file contains copies of the ROM chips present in a real cart. The other things you mentioned (name/attribute tables, OAM, palettes) are held in RAM chips inside the console, so it's the responsibility of the program (contained in the PRG chip) to populate that memory with meaningful data. Also, this data changes all the time as the games run, it wouldn't make sense to have it stored statically in ROM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I can only assume that there is only a single Pattern Table or that they are smaller than 8192Bytes.  Is this true as well?</div>
<br />Without mappers, the console can only see 8KB (8192 bytes) worth of pattern data. Technically, a cart could have less than that, but it would still have to be a power of 2 (such as 4096 bytes mirrored to fill the whole 8KB), not just a few bytes less, so like I said, you are either viewing the file wrong or it is corrupted.
<br />
<br />Is $6000 the number that shows up at the left of your hex editor in the last row? If so, that's the address of the first byte of that row, and if the row is 16 bytes the last one would be byte $600F. Are you sure you are not just reading it wrong?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tineras</b> [ Mon Jul 05, 2010 9:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Cartridge / Memory Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you for the quick response.  It's nice when there is a supportive community out there!  I've been working on this for a while and trying to avoid using forums so I'd be forced to learn as much as I could on my own, but today I just buckled.  Oh well.
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"> ,and if the row is 16 bytes the last one would be byte $600F. Are you sure you are not just reading it wrong?</div>
<br />
<br /> <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> Yes, I wasn't even considering the last line.  Since I posted this, I went and counted and confirmed just that!
<br />
<br />Honestly, I think I'm overcomplicating this in my head.
<br />
<br />I do have a question about SPR-RAM.  Is this also generated by the PRG-ROM and stored in CPU memory using the $4014 address?  I also noticed that it is commonly stored at address $0200.  Is this also determined by the PRG-ROM?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 05, 2010 9:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Cartridge / Memory Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tineras wrote:</div><div class="quotecontent">I do have a question about SPR-RAM.</div><br />SPR RAM is what I called OAM before. I think OAM stands for Object Attribute Memory, but both names are OK I guess, I'm just saying so that you know it is when you read it in the future.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is this also generated by the PRG-ROM and stored in CPU memory using the $4014 address?</div><br />Yes. Since sprites are always moving and changing, the game program is the one that generates the sprite data on the fly and sends it to OAM (usually through register $4014, like you mentioned).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I also noticed that it is commonly stored at address $0200.  Is this also determined by the PRG-ROM?</div>
<br />Yes. It could be anywhere in CPU memory, from $0000 to $FF00, RAM or ROM doesn't matter (although putting sprite definitions in ROM would only make sense for a static screen such as a title screen). I guess most use page 2 in order to group the RAM pages with specific purposes. Since $0000-$00FF is zero page and $0100-$01FF is the stack, it kinda makes sense that the next page has a specific purpose as well. Or Nintendo simply told everyone to use page 2.
<br />
<br />I've seen commercial games using other pages though. I can't remember which games right now, but I seem to remember them using page 2 along with some other page (5 or 7) and every frame they alternated which one got sent to OAM. I think this had something to do with their sprite cycling solution, but I didn't study it any further.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tineras</b> [ Mon Jul 05, 2010 9:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Cartridge / Memory Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tineras wrote:</div><div class="quotecontent">I do have a question about SPR-RAM.</div><br />SPR RAM is what I called OAM before. I think OAM stands for Object Attribute Memory, but both names are OK I guess, I'm just saying so that you know it is when you read it in the future.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is this also generated by the PRG-ROM and stored in CPU memory using the $4014 address?</div><br />Yes. Since sprites are always moving and changing, the game program is the one that generates the sprite data on the fly and sends it to OAM (usually through register $4014, like you mentioned).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I also noticed that it is commonly stored at address $0200.  Is this also determined by the PRG-ROM?</div><br />Yes. It could be anywhere in CPU memory, from $0000 to $FF00, RAM or ROM doesn't matter (although putting sprite definitions in ROM would only make sense for a static screen such as a title screen). I guess most use page 2 in order to group the RAM pages with specific purposes. Since $0000-$00FF is zero page and $0100-$01FF is the stack, it kinda makes sense that the next page has a specific purpose as well. Or Nintendo simply told everyone to use page 2.<br /><br />I've seen commercial games using other pages though. I can't remember which games right now, but I seem to remember them using page 2 along with some other page (5 or 7) and every frame they alternated which one got sent to OAM. I think this had something to do with their sprite cycling solution, but I didn't study it any further.</div>
<br />
<br />Thank you very much.  I think I have enough information to keep me busy for the next few hours. At least  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 05, 2010 9:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just found a game that alternates RAM pages for sprite DMA every frame: Kirby's Adventure. It alternates between pages 2 and 3.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Jul 05, 2010 10:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Kirby's adventure has WRAM, so it can get away with it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 05, 2010 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Kirby's adventure has WRAM, so it can get away with it.</div>
<br />Exactly, 256 bytes of RAM is not such a big waste for this game. But still, I fail to see the advantage in having 2 sprite pages. Does anyone know why this game needs to preserve the previous frame's sprite data?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tineras</b> [ Mon Jul 05, 2010 11:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do I understand this correctly?
<br />
<br />To use $4014:
<br />
<br />1. Clear $2003
<br />2. Load Accum with 'N' to be multiplied later
<br />3. Write Accum to $4014
<br />4. An internal operation (written by me of course) will multiply N*100 and give OAM address
<br />5. Internal operation writes 256 bytes to newly given OAM address
<br />
<br />My question is, where do the 256 bytes come from?  EDIT: Or where are they going to if I have the operation backward?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 05, 2010 11:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tineras wrote:</div><div class="quotecontent">My question is, where do the 256 bytes come from?</div>
<br />From (N * $100) to (N * $100 + $FF). The number written to $4014 specifies which page (256-byte chunk) from CPU memory gets copied to OAM. If you write 2, $0200-$02FF will be copied.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jul 05, 2010 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does anyone know why this game needs to preserve the previous frame's sprite data?</div>
<br />My speculation is to handle lagging frames - when the game slows downs instead of doing no sprite DMA, it repeats DMA with the previous frame data which is unchanged. This is speculation tough - does anyone known if KA switch buffers systematically every frame or only on complete frames ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 05, 2010 11:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That is the only thing I could think of, but that didn't seem likely, unless the game needed the NMI handler to use a constant number of cycles, but even then it would be much simpler to code a loop that wasted 513 cycles than to code the logic that switches between 2 sprite pages.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tineras</b> [ Mon Jul 05, 2010 11:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tineras wrote:</div><div class="quotecontent">My question is, where do the 256 bytes come from?</div><br />From (N * $100) to (N * $100 + $FF). The number written to $4014 specifies which page (256-byte chunk) from CPU memory gets copied to OAM. If you write 2, $0200-$02FF will be copied.</div>
<br />
<br />I get that part, but what memory am I copying to and from?
<br />
<br />1. Source Memory  (N * 100 Contents)
<br />2. Source Memory Location (N * 100)
<br />3. Destination Memory (OAM Contents)
<br />4. Destination Memory Location (OAM Location)
<br />
<br />Is this right and if so, how do I know the address of the OAM?  I see that the wiki says something about an OAMADDR, but I don't recall seeing this in any other documentation (maybe because I wasn't looking for it  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> ).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 05, 2010 11:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The <strong>source</strong> address is what is written to $4014 times 256.
<br />The <strong>destination</strong> address in OAM is the value written to $2003. Since OAM is only 256 bytes, one byte is enough to specify any part of it. If the end of OAM is reached and there are still bytes to copy, the address wraps around and goes back to 0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tineras</b> [ Mon Jul 05, 2010 12:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">The <strong>source</strong> address is what is written to $4014 times 256.<br />The <strong>destination</strong> address in OAM is the value written to $2003. Since OAM is only 256 bytes, one byte is enough to specify any part of it. If the end of OAM is reached and there are still bytes to copy, the address wraps around and goes back to 0.</div>
<br />
<br />Thank you for being patient.  This is just one of those issues that will click with me and then I'll have that "DUH!" moment.
<br />
<br />I'm trying to interpret code that I see in one of the NES files.  Lines 1 - 4 have been taken directly from there.  I added the notes and line 5 and 6.  Am I close to being correct?
<br />
<br />1. A9 80      // Load Accum with 80
<br />2. 8D 03 20 // Load $2003 with 80
<br />3. A9 02      // Load 'N' value to Accum (2 in this case)
<br />4. 8D 14 40 // Load $4014 with 'N'
<br />5. Multiply 'N' * 100 = $0200
<br />6. Contents get copied from ($0080-$017F) to ($0200-$02FF)
<br />
<br />EDIT: Out of ignorance, I may have left some important snipet of code out.
<br />
<br />EDIT 2: I may also be a bit confused about memory still too.  You said the cartridge ROM is not copied to CPU memory. Is (C000-FFFF) merely a pointer to the cartridge itself?
<br />
<br />EDIT 3: I see two places where this operation is taking place.  I originally listed the first LDA as LDA 00, when it should have been LDA 80. I have changed my values to reflect 80.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>