<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=4750" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-02-07T06:56:47-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=4750</id>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-02-07T06:56:47-07:00</updated>
<published>2009-02-07T06:56:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=43002#p43002</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=43002#p43002"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=43002#p43002"><![CDATA[
The PPU would run until it reaches the timestamp of the CPU write.  If the write occurs past the end of the frame, then the PPU would run through the full frame before the write is performed, and its timestamp would be into the next frame.<br /><br />The "spillover" would need to be retained by all subsystems to keep the frames the right length.  If a frame is (262*341*5) 446710 master cycles, then you would subtract 446710 from all of your timestamps at the end of the frame to adjust the timestamps for next frame.  You would not reset timestamps to zero because then you lose the spillover.<br /><br />Partly because of this, I arrange my frame like so:<br /><br />--------------------<br />1 'idle' scanline<br />20/70 VBlank scanlines<br />1 prerender scanline<br />240 rendered scanlines<br />--------------------<br /><br />With the idle scanline and vblank scanlines first -- this makes it easy to allow writes like the example you described.  Since the PPU is inactive for the time past the end of the frame, these writes can be allowed without disrupting rendering.  And you don't have to worry about rendering the next frame before applying the write.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sat Feb 07, 2009 6:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ens_leader]]></name></author>
<updated>2009-02-07T00:47:32-07:00</updated>
<published>2009-02-07T00:47:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42993#p42993</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42993#p42993"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42993#p42993"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Timing accuracy in an emulator is measured relatively, where one chip should execute <em>x</em> cycles for every <em>y</em> cycles of another chip. For example, the NTSC NES's PPU executes 3 cycles for each cycle of the CPU and APU. Emulators often handle this with a timestamping scheme: the CPU runs "ahead" of the other units, and any writes to PPU or APU registers are logged with a cycle count. When the CPU does anything that depends on the precise state of the PPU and APU, the emulator runs the PPU and APU to "catch up" to the number of cycles that the CPU has run. These include reading PPUSTATUS ($2002) while in range of sprite 0, or executing just before other units are expected to issue an interrupt.<br /><br />Accuracy does not depend on how many cycles of the emulated machine are executed for each cycle of the host CPU, except at one point: just before the first cycle of the "dummy" or "post-render" scanline (#240). That's when your emulator should catch up all units and then wait for DirectX (or another platform's counterpart) to make sure it's clear to send the finished pixels and samples for the frame that it just rendered.<br /><br /><span style="font-size: 75%; line-height: normal">EDIT: Disch posted while I was typing this. I'll add more:</span><br /><br />As for multiple threads, PCs have been fast enough for the past eight years that one core can handle a single NES. If you want to make your emulator thread-safe, it might be for handling multiple consoles at once, such as <a href="http://www.youtube.com/watch?v=h1vEDKr6F5Y" class="postlink">nemulator's Wii-reminiscent picker</a>.<br /></div><br /><br />What happens if the cpu master cycle is on the 2nd to last pixel in the frame and then executes an instruction that is 3 cycles and thus bleeds into the next frame? should the ppu 'ignore' that instruction and catch up and render the full frame 1/60th while missing the last two pixels? I ask this because the cpu wont always end on the last pixel of the frame because of variable opcode cycles and such.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3726">ens_leader</a> — Sat Feb 07, 2009 12:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2009-02-06T15:25:18-07:00</updated>
<published>2009-02-06T15:25:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42972#p42972</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42972#p42972"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42972#p42972"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />or is the term "interlaced" and not interleaved?  Whatever.. same difference.<br /></div><br /><br />Interlaced is the correct term here.  Reference material:<br /><br /><a href="http://en.wikipedia.org/wiki/Interlace" class="postlink">http://en.wikipedia.org/wiki/Interlace</a><br /><a href="http://www.labdv.com/leon-lab/video/interlace_en.htm" class="postlink">http://www.labdv.com/leon-lab/video/interlace_en.htm</a><br /><br />Most consoles (including many today!) use interlaced output (odd first, even second, I think -- or do I have the order reversed?).  The assumption made is that the connected device is a TV, or otherwise will do deinterlacing itself.<br /><br />Visual example of what I'm referring to:<br /><br /><a href="http://videoanimal.files.wordpress.com/2008/03/de-interlaced.png" class="postlink">http://videoanimal.files.wordpress.com/2008/03/de-interlaced.png</a><br /><a href="http://www.elurauser.com/articles/deinterlace_weave_lq.jpg" class="postlink">http://www.elurauser.com/articles/deinterlace_weave_lq.jpg</a><br /><br />It's pretty sad how much video there is on the Internet which is intended for computer monitor use, yet remains interlaced.  Most users don't seem to understand that the results look horrible.  :-(<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Feb 06, 2009 3:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-02-06T13:34:17-07:00</updated>
<published>2009-02-06T13:34:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42963#p42963</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42963#p42963"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42963#p42963"><![CDATA[
Interleaved is 30 Hz.  But progressive scan is 60 Hz.  NES outputs progressive (60 full frames every second).<br /><br />Though even in interleaved, the framerate would still sort of be 60 Hz -- it's just that you only output half the frame each time instead of the full frame each time.  Interleaved is like a tradeoff -- half the framerate for twice the vertical resolution.<br /><br />edit:<br /><br />or is the term "interlaced" and not interleaved?  Whatever.. same difference.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Fri Feb 06, 2009 1:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[JohnPublic]]></name></author>
<updated>2009-02-06T13:06:49-07:00</updated>
<published>2009-02-06T13:06:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42961#p42961</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42961#p42961"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42961#p42961"><![CDATA[
Disch -<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You'd just run the CPU until it's timestamp reaches the end of the frame, then catch up the PPU/APU/etc, output your frame of video and audio, then do the timing stuff and wait another 1/60th of a second before doing the next frame.<br /></div><br /><br />1/60th of a second? Isn't NTSC 30fps, hence wait 1/30th of a second?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3798">JohnPublic</a> — Fri Feb 06, 2009 1:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2009-01-18T23:56:27-07:00</updated>
<published>2009-01-18T23:56:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42109#p42109</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42109#p42109"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42109#p42109"><![CDATA[
Gah...<br />I was recently doing a bunch of fixed point math on the reciprocal of 3.2 (5/16), so all that was fresh on my mind as I made that post.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sun Jan 18, 2009 11:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-01-18T23:51:10-07:00</updated>
<published>2009-01-18T23:51:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42108#p42108</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42108#p42108"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42108#p42108"><![CDATA[
3.2 is fifths, not sixteenths.  :P<br /><br />But yeah... I didn't mean to imply that floating points are unreliable -- I'm just saying that for something like this where exact precision is everything, integers just seem like the better option.  Exact precision isn't something you can always get with floating points.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Jan 18, 2009 11:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2009-01-18T23:39:26-07:00</updated>
<published>2009-01-18T23:39:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42107#p42107</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42107#p42107"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42107#p42107"><![CDATA[
If the only fractions you are using with floating point numbers are 16ths, floating point math is lossless up to integer values of 1048576.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sun Jan 18, 2009 11:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-01-18T22:53:05-07:00</updated>
<published>2009-01-18T22:53:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42106#p42106</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42106#p42106"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42106#p42106"><![CDATA[
<div class="quotetitle">ens_leader wrote:</div><div class="quotecontent"><br />I was just curious why you used 5 and 15 over the other numbers for representing ppu and cpu.<br /><br />Thanks in advance<br /></div><br /><br />The NTSC ratio is 3:1.  The PAL ratio is 3.2:1 (CPU is a little slower).  To represent this in integers, rather than dealing with potentially lossy floating points, I use the following constants:<br /><br />PPU (NTSC and PAL) = 5<br />CPU (NTSC) = 15<br />CPU (PAL) = 16<br /><br />This provides the proper PPU:CPU cycle ratio for both NTSC and PAL emulation.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Jan 18, 2009 10:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ens_leader]]></name></author>
<updated>2009-01-18T22:06:31-07:00</updated>
<published>2009-01-18T22:06:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42103#p42103</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42103#p42103"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42103#p42103"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />You don't need to space out instructions evenly over time -- it has no value.  The only possible practical value it could have would be to handle joypad updates smoother, but since all games (except for one that I know of) poll joypad data once per frame, it's a moot point.<br /><br />Nobody will notice if you do all the work for a frame as quickly as the computer is capable.  What the user notices is the frames themselves.  Therefore the generally accepted approach is to do things on a frame-by-frame basis.  Rather than space out individual cycles or instructions, you just space out the frames as evenly as you can.<br /><br />I tend to recommend the tried-and-true timestamp and catch-up approach.  Keep a CPU timestamp which you update between instructions (or cycles), and keep timestamps for other systems (PPU, APU, mapper IRQ counters, etc) and use the timestamps to keep them synced up.  Generally you run the CPU ahead of everything else, then when the CPU needs to interact with the PPU, you would "catch up" the PPU by running it until its timestamp reaches the CPU's timestamp.<br /><br />You'd just run the CPU until it's timestamp reaches the end of the frame, then catch up the PPU/APU/etc, output your frame of video and audio, <em>then</em> do the timing stuff and wait another 1/60th of a second before doing the next frame.<br /><br />A properly designed timestamp and catchup system can be just as accurate as any other approach, and is far more efficient than some other approaches (though it may not be the most efficient -- these days the most efficient method would probably involve multiple threads).<br /></div><br /><br />Disch - <br /><br />I read your post on <br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=3720">http://nesdev.com/bbs/viewtopic.php?t=3720</a><!-- m --><br /><br />and I had a question regarding your "master cycles" concept.<br /><br />I noticed you used 5 for ppu and 15 for cpu. This make sense since the ppu is 3 times the speed of the cpu. What would be the benefit of using 5 and 15 instead of say 1 and 3. Wouldn't 1 and 3 be just as efficient? Or even 10 and 30 to make things even.<br /><br />I was just curious why you used 5 and 15 over the other numbers for representing ppu and cpu.<br /><br />Thanks in advance<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3726">ens_leader</a> — Sun Jan 18, 2009 10:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ens_leader]]></name></author>
<updated>2009-01-17T16:00:21-07:00</updated>
<published>2009-01-17T16:00:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42082#p42082</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42082#p42082"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42082#p42082"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />You don't need to space out instructions evenly over time -- it has no value.  The only possible practical value it could have would be to handle joypad updates smoother, but since all games (except for one that I know of) poll joypad data once per frame, it's a moot point.<br /><br />Nobody will notice if you do all the work for a frame as quickly as the computer is capable.  What the user notices is the frames themselves.  Therefore the generally accepted approach is to do things on a frame-by-frame basis.  Rather than space out individual cycles or instructions, you just space out the frames as evenly as you can.<br /><br />I tend to recommend the tried-and-true timestamp and catch-up approach.  Keep a CPU timestamp which you update between instructions (or cycles), and keep timestamps for other systems (PPU, APU, mapper IRQ counters, etc) and use the timestamps to keep them synced up.  Generally you run the CPU ahead of everything else, then when the CPU needs to interact with the PPU, you would "catch up" the PPU by running it until its timestamp reaches the CPU's timestamp.<br /><br />You'd just run the CPU until it's timestamp reaches the end of the frame, then catch up the PPU/APU/etc, output your frame of video and audio, <em>then</em> do the timing stuff and wait another 1/60th of a second before doing the next frame.<br /><br />A properly designed timestamp and catchup system can be just as accurate as any other approach, and is far more efficient than some other approaches (though it may not be the most efficient -- these days the most efficient method would probably involve multiple threads).<br /></div><br /><br />Ok that sounds very efficient to me, I will start experimenting with that.<br /><br />I would definitely like to work with threads but I want to keep my code portable (language is C) and id especially like it to work in mobile devices as well in a couple years maybe, who knows. Thanks, I'll let you know how it turns out in the coming weeks/months.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3726">ens_leader</a> — Sat Jan 17, 2009 4:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-01-17T16:00:23-07:00</updated>
<published>2009-01-17T15:53:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42080#p42080</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42080#p42080"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42080#p42080"><![CDATA[
Timing accuracy in an emulator is measured relatively, where one chip should execute <em>x</em> cycles for every <em>y</em> cycles of another chip. For example, the NTSC NES's PPU executes 3 cycles for each cycle of the CPU and APU. Emulators often handle this with a timestamping scheme: the CPU runs "ahead" of the other units, and any writes to PPU or APU registers are logged with a cycle count. When the CPU does anything that depends on the precise state of the PPU and APU, the emulator runs the PPU and APU to "catch up" to the number of cycles that the CPU has run. These include reading PPUSTATUS ($2002) while in range of sprite 0, or executing just before other units are expected to issue an interrupt.<br /><br />Accuracy does not depend on how many cycles of the emulated machine are executed for each cycle of the host CPU, except at one point: just before the first cycle of the "dummy" or "post-render" scanline (#240). That's when your emulator should catch up all units and then wait for DirectX (or another platform's counterpart) to make sure it's clear to send the finished pixels and samples for the frame that it just rendered.<br /><br /><span style="font-size: 75%; line-height: normal">EDIT: Disch posted while I was typing this. I'll add more:</span><br /><br />As for multiple threads, PCs have been fast enough for the past eight years that one core can handle a single NES. If you want to make your emulator thread-safe, it might be for handling multiple consoles at once, such as <a href="http://www.youtube.com/watch?v=h1vEDKr6F5Y" class="postlink">nemulator's Wii-reminiscent picker</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jan 17, 2009 3:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-01-17T15:45:35-07:00</updated>
<published>2009-01-17T15:45:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42078#p42078</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42078#p42078"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42078#p42078"><![CDATA[
You don't need to space out instructions evenly over time -- it has no value.  The only possible practical value it could have would be to handle joypad updates smoother, but since all games (except for one that I know of) poll joypad data once per frame, it's a moot point.<br /><br />Nobody will notice if you do all the work for a frame as quickly as the computer is capable.  What the user notices is the frames themselves.  Therefore the generally accepted approach is to do things on a frame-by-frame basis.  Rather than space out individual cycles or instructions, you just space out the frames as evenly as you can.<br /><br />I tend to recommend the tried-and-true timestamp and catch-up approach.  Keep a CPU timestamp which you update between instructions (or cycles), and keep timestamps for other systems (PPU, APU, mapper IRQ counters, etc) and use the timestamps to keep them synced up.  Generally you run the CPU ahead of everything else, then when the CPU needs to interact with the PPU, you would "catch up" the PPU by running it until its timestamp reaches the CPU's timestamp.<br /><br />You'd just run the CPU until it's timestamp reaches the end of the frame, then catch up the PPU/APU/etc, output your frame of video and audio, <em>then</em> do the timing stuff and wait another 1/60th of a second before doing the next frame.<br /><br />A properly designed timestamp and catchup system can be just as accurate as any other approach, and is far more efficient than some other approaches (though it may not be the most efficient -- these days the most efficient method would probably involve multiple threads).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sat Jan 17, 2009 3:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ens_leader]]></name></author>
<updated>2009-01-17T15:27:08-07:00</updated>
<published>2009-01-17T15:27:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42075#p42075</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42075#p42075"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42075#p42075"><![CDATA[
Timestamp vs. Countdown timer on event. Which would be more accurate and efficient then to implement? I just don't want to have to rewrite all this once I implement one solution.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3726">ens_leader</a> — Sat Jan 17, 2009 3:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-01-16T22:32:00-07:00</updated>
<published>2009-01-16T22:32:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42036#p42036</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42036#p42036"/>
<title type="html"><![CDATA[How is this method of timing?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4750&amp;p=42036#p42036"><![CDATA[
Interesting... but there are a few problems.<br /><br />1)  There's more to emulating than just the CPU, and those areas require more CPU time.  You could still make this work if this is just one thread and you do everything else in seperate threads, but you'd still have to sync them somehow.<br /><br />2)  It's opcode accurate and not cycle accurate.  So if this method is used to sync with other subsystems of the NES (like the PPU) it wouldn't be as accurate as some alternatives.  Unless you spin in a loop like this <em>per cycle</em> which I guess would work.<br /><br />3)  It's criminally inefficient.  You're effectively making the computer spin in a clock checking loop which will burn 100% CPU time.<br /><br />4)  Makes fastforward impossible.  Also might have problems with frameskip or if the emu can't run fullspeed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Fri Jan 16, 2009 10:32 pm</p><hr />
]]></content>
</entry>
</feed>