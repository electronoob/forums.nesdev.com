<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Object collisions - &quot;grouping&quot; / speed benefit</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Object collisions - &quot;grouping&quot; / speed benefit</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17296">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17296</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Apr 27, 2018 9:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay - I think my brain needs a bourbon break for a few days........  <br /><br />ME: Man!  No matter what I do I can't seem to curb the slowdown problem.  I didn't even have this much of an issue with Mystic Origins, and was a much more dense mess of spaghetti code!  I've tried bit masking and lists and every other thing I can think of, and it should DEFINITELY be more efficient than this!<br /><br />...(takes a closer look at my main loop)...<br /><br />Inside of a loop through all objects, I was handling object collisions (the entire HandleObjectCollisions routine, iterating all over again for every active object).  I had an outer loop that loops through all the objects and handles drawing and a few other things, and my collision routine was INSIDE that loop, which was in and of itself a loop through all of the objects for collision detection.  I was literally running collision detection squared.  I was cycling through ALL objects for EACH object.<br /><br />Ha.  No wonder!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Apr 27, 2018 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Concerning linked lists: it's true that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda NextItem, x</tt> + <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">tax</tt> is slower than just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">inx</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">dex</tt>, but if you have an array with gaps in it, when iterating it you have to spend some extra time checking whether each slot is occupied, while in a linked list there are no gaps to test for. For reasons like this, I think things balance out and there's hardly any overhead to linked lists, and obvious benefits for insertion and removal of elements, so I use them whenever I can when dealing with variable amounts of stuff.<br /><br />I do have a linked list for empty object slots, so new objects can be loaded faster (no need to search for an empty slot, just put new objects in the beginning of the list), but active objects also belong in linked lists, this is how they're put into groups. I use grouping mostly to control the update order, but knowing that some groups never interact with others does prevent some unnecessary iterations. My objects still have a &quot;collision response&quot; field that specifies how they interact with others, the groups by themselves don't define that.<br /><br />@JoeGtake2: Sounds like you didn't need any major refactoring after all!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Tue May 01, 2018 10:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />if your are not concerned with order (and it seems neither of you are) - a collapsed array is simpler, faster and uses less RAM. there will be a point were copying the data stored in the &quot;node&quot; will take longer than the link list relink code and adding the link to the Free list, however. Then you need to factor in the number of additions/removals per run vs the extra cost of iterating. <br />It seems a Word is being stored in the list?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">head .byte <br />Array .block<br />&nbsp; lo .fill 64 ; or however big you want it to be<br />&nbsp; hi .fill 64 <br />.bend<br /><br />init<br />&nbsp;lda #$ff<br />&nbsp;sta head ; array is empty<br />&nbsp;rts<br /><br />addAY<br />&nbsp; inc head ; move to next slot<br />&nbsp; ldx head <br />&nbsp; sta Array.lo,x ; store data<br />&nbsp; tya<br />&nbsp; sta Array.hi,x<br />&nbsp; rts<br /><br />removeX<br />&nbsp; ldy head ; get current head<br />&nbsp; lda Array.lo,y <br />&nbsp; sta Array.lo,x ; copy head over item we want to remove<br />&nbsp; lda Array.hi,y<br />&nbsp; sta Array.lo,x<br />&nbsp; dec head ; shrink array<br />&nbsp; rts<br /><br />iterate<br />&nbsp; ldx head&nbsp; &nbsp; ; get head<br />&nbsp; bmi _empty ; is empty?<br />- do stuff&nbsp; ; x holds index into array<br />&nbsp; dex<br />&nbsp; bpl -&nbsp; ; until done<br />_empty<br /></div><br />care needs to be taken when you remove while itterating, either you make a &quot;death list&quot; and delete from lower to upper. or you skip the dex if you delete &lt;= current head, or do an inx to cancel out the eventual dex depending upon your code flow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue May 01, 2018 10:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">if your are not concerned with order (and it seems neither of you are) - a collapsed array is simpler, faster and uses less RAM.</div><br />We're talking about game objects here though, and most people reserve 16 to 32 bytes of RAM for each active object, and there's no way that moving that many bytes is gonna be faster than re-linking. As for RAM usage, it's usually not hard to dedicate one byte out of the many in each object slot to indicate what the next slot is (specially if the slot is empty!).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">care needs to be taken when you remove while itterating, either you make a &quot;death list&quot; and delete from lower to upper. or you skip the dex if you delete &lt;= current head, or do an inx to cancel out the eventual dex depending upon your code flow.</div><br />And there goes the simplicity.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Wed May 02, 2018 2:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When dealing with slots, I use heaps of free slots. I usually start with an array of slots where each index has the index as the value (i.e. 0, 1, 2, 3, 4, 5,...), and set the &quot;top&quot; of the heap to the last index. When I need a free slot, I pick up the number at the top of the heap and use such number as the index to the remaining arrays. When I need to destroy an object, I just copy its index to the top of the heap. Creating / destroying is direct as I don't need to search for empty slots, but of course iterating the arrays need to test if each object instance is active or not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 02, 2018 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">na_th_an wrote:</div><div class="quotecontent">I usually start with an array of slots where each index has the index as the value (i.e. 0, 1, 2, 3, 4, 5,...), and set the &quot;top&quot; of the heap to the last index. When I need a free slot, I pick up the number at the top of the heap and use such number as the index to the remaining arrays. When I need to destroy an object, I just copy its index to the top of the heap.</div><br />And there goes the space advantage over singly linked lists! <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><br /><br />I'm not judging, everyone is encouraged to do what they feel works best for them, and the idea of managing a list of indices like you described is actually very interesting, although I personally wouldn't want the extra layer of indirection in this particular case, but calling linked lists &quot;complex&quot;, &quot;slow&quot; or &quot;wasteful&quot; in this context is just crazy, they're anything but.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Mon May 07, 2018 2:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll try linked lists in my next project, hadn't thought of them in this context and it feels so natural. Thanks for the hint!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Mon May 07, 2018 6:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I always felt that the amount of active &quot;objects&quot; in an NES game is always so small that linked lists doesn't really serve a purpose. If I have a game with eg. a potential of 10 enemies on screen at the same time, it's extremely fast to iterate through all ten slots.<br /><br />Is there any advantage to linked lists if the order of the objects doesn't matter?<br />Or maybe I should ask, why does the order of your objects matter?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon May 07, 2018 7:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The update order matters a lot when objects can affect the position or the appearance of other objects in any way. Moving platforms, for example. Anything on top of a moving platform has to move along with it, and one way to implement that is to displace the objects by the same distance that the platform moved, but in order to do that the platform has to be moved first, so its displacement it's known to the other objects.<br /><br />As for the number of active objects in an NES game, it's true that the typical game doesn't have that many, but when you use 8-way scrolling, you should be prepared to deal with a larger number of objects. Ideally you'd avoid situations with many active objects, but you should still be prepared to deal with them depending on your game's design, even if there's slowdown. There are games with tons of projectiles and items, for example, and those can add up fast.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 07, 2018 8:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Anything on top of a moving platform has to move along with it, and one way to implement that is to displace the objects by the same distance that the platform moved, but in order to do that the platform has to be moved first, so its displacement it's known to the other objects.</div><br />And one way to accomplish proper ordering is to put lifts and simple projectiles in separate object pools, which is what <em>The Curse of Possum Hollow</em> does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon May 07, 2018 8:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Which I accomplish by having separate object groups.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Mon May 07, 2018 9:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm with tepples on that one - for objects where the order matters based on grouping (as opposed to individual sorting), I think it makes perfect sense to treat moving platforms entirely as their own thing. Most likely they don't need more than a few bytes in RAM depending on how dynamic you want them to be, compared to the typical enemy character, etc, and I wouldn't want them to hog up the more &quot;generic&quot; object RAM. I'd treat bullets separately too, but it really depends on the individual game of course.<br /><br />It's not that I'm opposed to linked lists in NES development, in fact I'm a big fan of them and would really like to employ them effectively, but using them makes more sense to me in something like C code for a PC where I can use the OS to assign memory for me, and I need a list that can be very dynamic in size. For everything I've made on the NES so far, I've always used striped tables, and tried to design my game around the space I've assigned for each type of object.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Tue May 08, 2018 2:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As per the original topic, of keeping &quot;lists&quot; of entities in groups for Collision purposes, I would say LLs holding the actual entity is bad as you, in the generic engine case, may need to put the entity into multiple lists. I.e a thing wants walls and player bullets. A thing want enemies and their bullets. <br />For a specific game with an engine customised for said game, hardcore your lists and your order <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />As per LL saving memory from an alloc list if one has<br />Alloc .fill 256<br />Data .fill 256<br />vs<br />Data .fill 256<br />Next .fill 256<br />it's the same RAM usage. One fills the alloc with 0-255, and you need a head variable. You pull the index at head, and inc head to alloc, then to restore you, dec head, store index. <br />Where the LL approach saves memory is you can put multiple lists into the one larger list memory allocation, i.e you have N heads. <br /><br />My current trying to pull as much as I can and punch beyond its weight engine is using a lot of specialised DLLs and boy am I sick of debugging them XD they are trivial in C/C++ but making an optimised one in 6502 is pain.. My Kingdom for an extra register...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue May 08, 2018 5:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">My current trying to pull as much as I can and punch beyond its weight engine is using a lot of specialised DLLs and boy am I sick of debugging them XD they are trivial in C/C++ but making an optimised one in 6502 is pain.. My Kingdom for an extra register...</div><br />Your kingdom, eh? Would you give up indexed addressing modes for extra registers that can be paired to hold a whole pointer? If so, welcome to Game Boy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Tue May 08, 2018 5:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well at this point I think just having the Z of the 65CE02/4510 would really help. Also for when doing swaps. At the moment for the 4K compo I'm limited to the 6510. However I plan the make the &quot;enhanced&quot; version for the 128. Which will allow me to run most of the code in 8500, but when it comes to doing things that could really do with extra registers, such as double links patching, swapping data and maybe even hunting for values in the sort, I can switch to a full Z80 giving me IX and IY and EXX <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>