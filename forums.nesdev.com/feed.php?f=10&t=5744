<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=5744" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-11-15T04:47:46-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=5744</id>
<entry>
<author><name><![CDATA[miau]]></name></author>
<updated>2009-11-15T04:47:46-07:00</updated>
<published>2009-11-15T04:47:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52635#p52635</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52635#p52635"/>
<title type="html"><![CDATA[First Project after learing 6502 asm]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52635#p52635"><![CDATA[
Willkommen,<br />also gibt es wirklich Deutsche, die sich für die NES-Programmierung interessieren, wo doch die meisten lieber ihrem C64 treu bleiben. Schön! <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Translation:<br />Welcome,<br />so, while most Germans prefer the C64, there are some interested in NES programming after all. That's cool!<br /><br /><br />Anyway, it's a good start. The code may look messy... not as messy as my first project, mind you, so I'm in no position to complain. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />Now that you've gotten acquainted with the basics you might want to start with a fresh file and create a minimal code template (ines header, start-up routine, NMI, address vectors) for your next project. You will eventually want to separate game logic (main loop) and drawing (NMI), too.<br /><br />Some wild suggestions on what to do next:<br /><ul>- Use more sophisticated sprite movement. I.e. pressing one of the d-pad buttons doesn't change the sprite position directly, but slowly changes its speed. Speed is then added to the sprite position once per frame. (use fixed-point math for really smooth movement)<br />- Try to handle multiple sprites without making the code much bigger. (using the x/y register to loop through each sprite's variables)<br />- Draw background tiles. You may want to copy-paste code to set up the PPU from somewhere else, as that might not be a trivial task for a beginner. Using background tiles isn't as straightforward as using sprites.</ul><br />You may also want to skim through bunnyboy's <a href="http://www.nintendoage.com/faq/nerdy_nights_out.html" class="postlink">Nerdy Nights tutorials</a> over at nintendoage if you haven't already done so. They cover the basics in detail and have become quite popular among beginners.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1377">miau</a> — Sun Nov 15, 2009 4:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[chmaster]]></name></author>
<updated>2009-11-14T22:23:00-07:00</updated>
<published>2009-11-14T22:23:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52629#p52629</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52629#p52629"/>
<title type="html"><![CDATA[First Project after learing 6502 asm]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52629#p52629"><![CDATA[
Excuse me, what emulator do you use to play this game?<br /><br />I've tried Nestopia and fceuxdsp, but I don't think it's a game. All I can see is a octopus-like thing on the screen, and it can shoot bullets rightward or leftward. That's all and nothing else. Maybe I used the wrong emulator?<br /><br /><img src="http://img42.imageshack.us/img42/6206/nesrom.jpg" alt="Image" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4092">chmaster</a> — Sat Nov 14, 2009 10:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Punchy]]></name></author>
<updated>2009-11-15T03:32:32-07:00</updated>
<published>2009-11-14T18:44:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52625#p52625</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52625#p52625"/>
<title type="html"><![CDATA[First Project after learing 6502 asm]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5744&amp;p=52625#p52625"><![CDATA[
My Browser made new topics instead of Editing the old one's so pls delete the other ones.<br />At first sorry for bad English, I'm a 15 year old from Germany^^<br /><br />Hiho Guy's I register nearly one year ago , because I wanted to learn asm for the 6502.<br /><br />After 1 day or so I lost the intrest and distanced me from programming for the NES.<br /><br />Yeasterday I realy read myself into asm again and wanted to programm a little "Game" where you could move around(with an animated Sprite) and shoot.<br /><br />So I used the sourcecode of realy bad prototype of Pong(It has Marios cap as ball and no Sprite movement at all) and began to write my little "Game"<br /><br />Today I reached my goals.(I must say in my opinion it's pretty good to learn asm and code a little game in 2 days.)<br /><br />My sourcecode is pretty much a mess, <br />all the vblank NMI stuff is from the Pong  prototype and all of my code isn't realy commented and all over the place.<br /><br />So I want you to ignore my inaccuracy and rate my work (in realationship with that I learned asm yesterday) and recommend me stuff I could do next.<br /><br /><a href="http://gamers-lair.de/pong3.nes" class="postlink">Game Rom</a><br /><br />EDIT:  Like i said it's not realy a game, it's just thea first thing I did with asm. I just want some advice how to go on and maybe do a sidescroller or a shmup like Galaga. I realy ask myself how to do this whole backgroudstuff, cause I didn't realy found a tutorial in wich is explain where you have to store the tilenumber for it etc.<br /><br />I also ask myself how to do collisiondeceting with the background, and do a little game engine.<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  .inesprg 1   ; 1x 16KB PRG code<br />  .ineschr 1   ; 1x  8KB CHR data<br />  .inesmap 0   ; mapper 0 = NROM, no bank swapping<br />  .inesmir 1   ; background mirroring<br />  <br /><br />;;;;;;;;;;;;;;;<br /><br /><br />;; Variabeln<br />  .rsset $0000  <br />  <br />gamestate  .rs 1  ; Gamestatus<br />buttons1   .rs 1  ; player 1 gamepad buttons, one bit per button<br />buttons2   .rs 1  ; player 2 gamepad buttons, one bit per button<br />left       .rs 1  ; Bewegung Links<br />right      .rs 1  ; Bewegung Rechts<br />posx       .rs 1  ; Spielerposition<br />posy       .rs 1  ; -- ,, --<br />ani        .rs 1  ; Spieleranimation<br />shoot      .rs 1  ; Schuss oder nicht<br />face       .rs 1  ; Blickrichtung<br />face2      .rs 1  ; Schussrichtung<br />sposx      .rs 1  ; Schussposition<br />sani       .rs 1  ; Spieleranimation<br />sposxs     .rs 1  ; Schussstartposition<br /><br /><br /><br /><br />;; Konstanten &#40;Noch nicht benutzt&#41;<br />STATETITLE     = $00  ; Titelbildschirm<br />STATEPLAYING   = $01  ; Spielbildschirm<br />STATEGAMEOVER  = $02  ; Game Over Bildschrim<br />  <br /><br /><br /><br /><br />;; Vblank, Clearmem etc.<br />  .bank 0<br />  .org $C000 <br />RESET:<br />  SEI          ; disable IRQs<br />  CLD          ; disable decimal mode<br />  LDX #$40<br />  STX $4017    ; disable APU frame IRQ<br />  LDX #$FF<br />  TXS          ; Set up stack<br />  INX          ; now X = 0<br />  STX $2000    ; disable NMI<br />  STX $2001    ; disable rendering<br />  STX $4010    ; disable DMC IRQs<br /><br />vblankwait1:       ; First wait for vblank to make sure PPU is ready<br />  BIT $2002<br />  BPL vblankwait1<br /><br />clrmem:<br />  LDA #$00<br />  STA $0000, x<br />  STA $0100, x<br />  STA $0300, x<br />  STA $0400, x<br />  STA $0500, x<br />  STA $0600, x<br />  STA $0700, x<br />  LDA #$FE<br />  STA $0200, x<br />  INX<br />  BNE clrmem<br />   <br />vblankwait2:      ; Second wait for vblank, PPU is ready after this<br />  BIT $2002<br />  BPL vblankwait2<br /><br />;; Sprites+Palleten<br />LoadPalettes:<br />  LDA $2002             <br />  LDA #$3F<br />  STA $2006             <br />  LDA #$00<br />  STA $2006             <br />  LDX #$00              <br />LoadPalettesLoop:<br />  LDA palette, x        <br />  STA $2007             <br />  INX                   <br />  CPX #$20              <br />  BNE LoadPalettesLoop  <br />                        <br /><br />LoadSprites:<br />;;;;;; Spielecharakter<br />  LDA #$09<br />  STA $201<br />  LDA #$19<br />  STA $205<br />  LDA #$08<br />  STA $209<br />  LDA #$18<br />  STA $20D<br />  LDA #$00<br />  STA $202<br />  STA $206<br />  STA $20A<br />  STA $20E<br />  STA ani<br /><br />  <br />  <br />  <br /><br /><br />  <br /><br /><br />;; Spielerposition&#40;Start&#41;<br />  LDA #$80<br />  STA posx<br />  <br />  LDA #$30<br />  STA posy<br /><br /><br />;; Spielstatus auf Spiel &#40;später auf Titel&#41;<br />  LDA #STATEPLAYING<br />  STA gamestate<br /><br /><br />;; NMI etc.             <br />  LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />  STA $2000<br /><br />  LDA #%00011110   ; enable sprites, enable background, no clipping on left side<br />  STA $2001<br /><br />Forever:<br />  JMP Forever     ;jump back to Forever, infinite loop, waiting for NMI<br />  <br /> <br /><br />NMI:<br />  LDA #$00<br />  STA $2003       ; set the low byte &#40;00&#41; of the RAM address<br />  LDA #$02<br />  STA $4014       ; set the high byte &#40;02&#41; of the RAM address, start the transfer<br /><br />  JSR DrawScore<br /><br />  ;;This is the PPU clean up section, so rendering the next frame starts properly.<br />  LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />  STA $2000<br />  LDA #%00011110   ; enable sprites, enable background, no clipping on left side<br />  STA $2001<br />  LDA #$00        ;;tell the ppu there is no background scrolling<br />  STA $2005<br />  STA $2005<br />    <br />  ;;;all graphics updates done by here, run game engine<br /><br />;; Zu Controller Abfrage springen<br />  JSR ReadController1  ;; Controller 1<br />  JSR ReadController2  ;; Controller 2<br />  <br />GameEngine:  <br />  LDA gamestate<br />  CMP #STATETITLE<br />  BEQ EngineTitle    ;;Check ob Title<br />    <br />  LDA gamestate<br />  CMP #STATEGAMEOVER<br />  BEQ EngineGameOver  ;;-- ,, -- Game Over<br />  <br />  LDA gamestate<br />  CMP #STATEPLAYING<br />  BEQ EnginePlaying   ;; -- ,, -- Laufendes Spiel<br />GameEngineDone:  <br />  <br />  JSR UpdateSprites  ;;Sprite Updating<br /><br />  RTI             <br /> <br /> <br /> <br /> <br />;; Titel + Game Over Screen, noch nicht fertig<br />EngineTitle:<br /><br />  JMP GameEngineDone<br /><br /><br /> EngineGameOver:<br /><br />  JMP GameEngineDone<br /> <br /><br />EnginePlaying:<br /><br />  JMP GameEngineDone<br /><br />UpdateSprites:<br />  JSR Moveguy<br />  Lda shoot<br />  beq Shootdone2<br />  LDA face<br />  sta face2<br />  lda posx<br />  sta sposx<br />  sta sposxs<br />  lda #00<br />  sta shoot<br />  sta $212<br />  LDA #$0a<br />  sta $211<br />Shootdone2:<br /><br />  Leftb:<br />  LDA left<br />  BEQ Leftdone<br />  LDA posx<br />  SEC<br />  SBC #$01<br />  STA posx<br />  LDA #01 <br />  clc<br />  adc ani<br />  STA ani<br />  LDA #01<br />  STA face<br />  Leftdone:<br /><br />  Rightb:<br />  LDA right<br />  BEQ Rightdone<br />  LDA posx<br />  CLC<br />  ADC #01<br />  STA posx<br />  LDA #01 <br />  clc<br />  adc ani<br />  STA ani<br />  lda #02<br />  sta face<br />  Rightdone:<br /><br />  LDA posy<br />  STA $200<br />  LDA posx<br />  STA $203<br />  LDA posy<br />  CLC<br />  ADC #08<br />  STA $204<br />  LDA posx<br />  STA $207<br />  LDA posx<br />  SEC<br />  SBC #08<br />  STA $20b<br />  LDA posy<br />  STA $208<br />  LDA posx<br />  SEC<br />  SBC #08<br />  STA $20f<br />  LDA posy<br />  CLC<br />  ADC #08<br />  STA $20c<br /> <br /><br /><br /><br />  <br /><br /><br />  Lda #00<br />  sta left<br />  sta right<br />  <br />  Shootcompare:<br />  LDA sposxs<br />  SEC<br />  SBC sposx<br />  CMP #$50<br />  BCC ShootcompareDone<br />  CMP #$C0<br />  BCS ShootcompareDone<br />  LDA #$FE<br />  STA $212<br />  STA $211<br />  STA $213<br />  STA $214<br />  ShootcompareDone:<br />  <br /><br />  Shootright:<br />  LDA face2<br />  cmp #01<br />  BEQ ShootRightDone<br />  LDA sposx<br />  CLC<br />  ADc #02<br />  STA sposx<br />ShootRightDone:<br /><br />  Shootleft:<br />  LDA face2<br />  cmp #02<br />  BEQ ShootLeftDone<br />  LDA sposx<br />  SEC<br />  SBC #02<br />  STA sposx<br />ShootLeftDone:<br />  <br />  LDA posy<br />  STA $210<br />  LDA sposx<br />  STA $213<br /><br /><br /><br />  LDX ani<br />  CPX #08<br />  Beq Animation<br />  LDY sani<br />  clc<br />  adc #01<br />  sta sani<br /><br /><br />  <br /><br />  <br /><br /><br />  <br />  <br />  RTS<br /><br /><br />DrawScore:<br />  RTS<br /><br />Moveguy:<br /><br />CheckLeft:<br />  LDA buttons1<br />  and #%00000010<br />  Cmp #%00000010<br />  BNE CheckLeftDone<br />  LDA #$01<br />  STA left<br /> <br />CheckLeftDone:<br /><br />CheckRight:<br />  LDA buttons1<br />  and #%00000001<br />  CMP #%00000001<br />  BNE CheckRightDone<br />  LDA #$01<br />  STA right<br />CheckRightDone:<br /><br /><br />CheckShoot:<br />  LDA buttons1<br />  and #%10000000<br />  Cmp #%10000000<br />  BNE CheckShootDone<br />  LDA #$01<br />  STA shoot<br />CheckShootDone:<br />RTS<br />  <br /> <br /> <br />ReadController1:<br />  LDA #$01<br />  STA $4016<br />  LDA #$00<br />  STA $4016<br />  LDX #$08<br />ReadController1Loop:<br />  LDA $4016<br />  LSR A            <br />  ROL buttons1    <br />  DEX<br />  BNE ReadController1Loop<br />  RTS  <br /><br /><br />ReadController2:<br />  LDA #$01<br />  STA $4016<br />  LDA #$00<br />  STA $4016<br />  LDX #$08<br />ReadController2Loop:<br />  LDA $4017<br />  LSR A            <br />  ROL buttons2    <br />  DEX<br />  BNE ReadController2Loop<br />  RTS  <br /><br />Animation:<br />  LDX $205<br />  CPX #$19<br />  BNE Animation2<br /><br />  LDA #$1B<br />  STA $205<br />  LDA #$1A<br />  STA $20d<br />  LDA #00<br />  sta ani<br /><br />  RTS<br />  <br /><br /><br />Animation2:<br />  LDA #$19<br />  sta $205<br />  LDA #$18<br />  sta $20d<br />  lda #00<br />  sta ani<br />  rts<br /><br /><br />;;;;;;;;;;;;;;  <br />  <br />  <br />  <br />  .bank 1<br />  .org $E000<br />palette:<br />  .db $0f,$0f,$0f,$0F,  $0f,$0f,$0f,$0F,  $0f,$0f,$0f,$0F,  $0f,$0f,$0f,$0F   <br />  .db $0f,$06,$2a,$30,  $22,$08,$0f,$3C,  $22,$1C,$15,$14,  $22,$02,$38,$3C   <br /><br /><br /><br />  .org $FFFA     ;first of the three vectors starts here<br />  .dw NMI        ;when an NMI happens &#40;once per frame if enabled&#41; the <br />                   ;processor will jump to the label NMI:<br />  .dw RESET      ;when the processor first turns on or is reset, it will jump<br />                   ;to the label RESET:<br />  .dw 0          ;external interrupt IRQ is not used in this tutorial<br />  <br />  <br />;;;;;;;;;;;;;;  <br />  <br />  <br />  .bank 2<br />  .org $0000<br />  .incbin &quot;mario.chr&quot;   ;includes 8KB graphics file from SMB1</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3733">Punchy</a> — Sat Nov 14, 2009 6:44 pm</p><hr />
]]></content>
</entry>
</feed>