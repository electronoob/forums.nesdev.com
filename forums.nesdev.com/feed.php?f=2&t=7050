<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7050" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-10-22T06:08:17-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7050</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-10-22T06:08:17-07:00</updated>
<published>2010-10-22T06:08:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68987#p68987</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68987#p68987"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68987#p68987"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The MMC1 disable has been covered well all along. Most of the pinouts show how its /CE is connected to CHR A16.<br /></div><br />Yeah, but it was never covered in ANY MMC1 doc I've ever looked at, and no emulators ever emulated it so far, even the so called accurate ones.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Oh, my code didn't test two clocks (the code is up there to examine). For some reason I was thinking it was the pulse width. Here's some new code that verifies what you just stated:<br /></div><br />I think it's impossible to test less than 4 cycles apart (which is 6 read cycles on NTSC, a read cycles is 2 PPU clocks, so 2/3 CPU clocks). Because sprite fetches takes 2 read cycles, and dummy fetches 2 read cycles, this is 3 times faster than your test code.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Or maybe it was designed while Nintendo was still planning to make changes to PPU sprite evaluation, such as killing the dummy nametable reads in hblank to allow for 16 sprites instead of 8.<br /></div><br />Could make sense. This would break Ninja Gaiden, Castlevania II and Legend of Zelda, though.<br /><br />To make suire the MMC3 counter actually works as we suppose it does, someone would need to disconect M2 to the MMC3 chip (effectively breaking the ciruit for enabling SRAM but it doesn't matter here), and see if the counter is affected. If it triggers only a single IRQ and then stop working then we know we are on the right track. If the counter is unaffected, we are wrong, and are missing something about the counter.<br />Then, with a manual switch on the M2 line, it should be possible to know how many CPU cycles the MMC3 waits before enabling the MMC3 again (between 2 and 4, from what we know).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Oct 22, 2010 6:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-10-21T23:26:58-07:00</updated>
<published>2010-10-21T23:26:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68980#p68980</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68980#p68980"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68980#p68980"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />OK so two A12 rises 4 CPU cycles apart are valid, on NTSC this is 12 PPU cycles, that's 6 read cycles.<br /></div><br />Oh, my code didn't test <em>two</em> clocks (the code is up there to examine). For some reason I was thinking it was the pulse width. Here's some new code that verifies what you just stated:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$0F<br />sta $2006<br />lda #$FF<br />sta $2006       ; A12 = low<br />lda #$0F<br />sta $2006<br />lda #$FF<br />bit $2007       ; A12 = high; clocked<br />sta $2006       ; A12 = low<br />bit $2007       ; A12 = high; clocked</div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Dividing by 85 or 42 would be more comlplex, but this monostable things sounds even more complex to me but oh well...<br /></div><br />It's just a counter that prevents further clocking until it counts down.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It's fun how even fundamental aspects of very common mappers are badly covered... first this MMC1 WRAM enbale<br /></div><br />The MMC1 disable has been covered well all along. Most of the pinouts show how its /CE is connected to CHR A16.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Oct 21, 2010 11:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-10-21T14:50:48-07:00</updated>
<published>2010-10-21T14:50:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68973#p68973</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68973#p68973"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68973#p68973"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />why didn't they use a counter on A13 instead which would just require a divide-by 42 pre-scaler before the actual scanline counter and would work wonders in theory ? (yes there is unused pins on the chip). Maybe Nintendo just didn't know their hardware this well.<br /></div><br />Or maybe it was designed while Nintendo was still planning to make changes to PPU sprite evaluation, such as killing the dummy nametable reads in hblank to allow for 16 sprites instead of 8. I've been told Famicom back-compat in the Super Famicom PPU was dropped fairly early on, but the plans might still have been in the works during the MMC3 era. Or they were trying to save a few gates/latches in their design; a divide-by-42 counter is six extra latches whether implemented as a binary counter or as a polynomial counter.<br /><br />A 4-cycle high is 12 dots wide. The PPU A12 pulses are only 4 dots wide, or one CPU cycle and change.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Oct 21, 2010 2:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-10-21T13:47:11-07:00</updated>
<published>2010-10-21T13:47:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68972#p68972</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68972#p68972"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68972#p68972"><![CDATA[
OK so two A12 rises 4 CPU cycles apart are valid, on NTSC this is 12 PPU cycles, that's 6 read cycles. For real the line toggles every 2 read cycles, so after a clock the MMC3 apparently counts the equivalent of somewhere between 3 and 6 read cycles before enabling clocks again... complicated, but possible.<br /><br />As lidnariq says, dividing by 8 is trivial (just requires 3 flip flops) so I don't know why they didn't do it that way. Dividing by 85 or 42 would be more comlplex, but this monostable things sounds even more complex to me but oh well...<br /><br />It's fun how even fundamental aspects of very common mappers are badly covered... first this MMC1 WRAM enbale and now MMC3's counter... all in one thread. I think the nesdev communauty should make the best effort to fit those rabit holes in order to get accurate mapper emulations for homebrew games...<br /><br />With current mapper emulation, it is now possible to make a game that would pass on all emus and powerpak and fail on real HW or vice versa.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Oct 21, 2010 1:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-10-21T10:35:46-07:00</updated>
<published>2010-10-21T10:35:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68966#p68966</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68966#p68966"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68966#p68966"><![CDATA[
I found the posting from way back when <a href="http://nesdev.com/bbs/viewtopic.php?p=5822#5822" class="postlink">I tried toggling A12 quickly</a>. I realize that I could have toggled it for just 4 cycles by setting the address to say $1FFF, then reading from $2007 immediately.... nope, still gets clocked for a four-cycle high and also for a four-cycle low:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #0<br />sta $2006<br />sta $2006<br />lda #$1F<br />sta $2006<br />lda #$FF<br />sta $2006       ; A12 = high; clocked<br />lda $2007       ; A12 = low<br /><br />lda #$1F<br />sta $2006<br />lda #$FF<br />sta $2006<br />lda #$0F<br />sta $2006<br />lda #$FF<br />sta $2006       ; A12 = low<br />lda $2007       ; A12 = high; clocked</div><br /><br /><a href="http://nesdev.com/bbs/viewtopic.php?t=3452" class="postlink">Another thread about this</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Oct 21, 2010 10:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2010-10-21T10:32:24-07:00</updated>
<published>2010-10-21T10:32:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68965#p68965</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68965#p68965"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68965#p68965"><![CDATA[
Dividing by 8 is so amazingly trivial in circuits... that's clearly why they did it. To divide by 85 or 42 would have required a 6-or-7 bit counter (instead of 3) and a 3-or-4 input AND gate.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Thu Oct 21, 2010 10:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-10-21T09:38:58-07:00</updated>
<published>2010-10-21T09:38:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68961#p68961</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68961#p68961"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68961#p68961"><![CDATA[
I uploaded my test ROM and sources <a href="http://jonathan.microclub.ch/MMC1_a12/MMC1_a12.7z" class="postlink">at the same place</a> simulating the delay.<br />It works fine for most delay values but is unstable randomly for some values, which is weird.<br />Again, I can only test it on PAL because it's too thick for my topload, if someone in a NTSC country could test it (NOT on a powerpak) that'd be great.<br />PS : The ugly dash pattern is intentional, to be able to count pixels on a TV, a dash occuring every 8 pixels.<br /><br />@Memblers : That's great. Wonder why Nintendo didn't do it that way (with the 8-prescaler). This wouldn't work with BG using the right PT and sprites the left one, like Armadillo does. But is this really an issue ? Honestly Nintendo had the choice between using /RD with a 85 prescaler, A13 with a 42 prescaler or A12 with a 8 prescaler, and the took the worst option, that is A12 with a weird digital monostable inside. WTF ??<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Oct 21, 2010 9:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kevtris]]></name></author>
<updated>2010-10-21T09:37:48-07:00</updated>
<published>2010-10-21T09:37:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68960#p68960</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68960#p68960"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68960#p68960"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />kevtris, your "monostable" approach would make at least some sense.<br />It's not good to talk about a "monostable" here, because this would refer to a circuit that uses R and C componants for a delay (which is subjects to a big error or margin), but A12 clocks being blocked by another circuits who counts M2 clocks after the fitst A12 rise would be a plosible solution.<br /><br /><br /><br />I belive people made tests and clocked A12 manually with $2006 writes, and figured that each rise (at slow speed) would result in an IRQ, RIGHT ? If nobody has ever done this, then it would be about time somebody really tests this.<br />Has it been tested how many cycles exacly between A12 rises are needed to clock the counter twice ?<br /><br />This brings me another question. If Nintendo did have to use something this complicated (two counters, including one who isn't in sync) for a counter on A12, why didn't they use a counter on A13 instead which would just require a divide-by 42 pre-scaler before the actual scanline counter and would work wonders in theory ? (yes there is unused pins on the chip). Maybe Nintendo just didn't know their hardware this well.<br />Or maybe the actual circuit is different from what we imagine. As tepples says, no way to know it without decaping the chip <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />I'll try to simulate the "monostable" approach in software for my MMC1 demo. Hopefully I'll get something working.<br /></div><br /><br />"Monostable" is the proper term for this.  A monostable is any circuit that is only stable in one state, and can switch to the second "unstable" state for a predetermined amount of time.  It doesn't matter if an RC controls the time, or a counter.<br /><br />And yes, the Blargg test does the "manual A12" clocking test for his MMC3 tester program.  As for the length of the delay I don't know what it is.<br /><br />The monostable via counter on A12 is a pretty simple and elegant solution, IMO.  It uses fewer gates/flipflops than a divide by 42 on A13 would use.  <br /><br />My FPGA NES uses the method I outlined in a previous post (the delay counter, etc) for its MMC3 IRQ scanline counter and it works with every single game.  I tested every MMC3 game in the goodNES set along with some not in the set and it works properly with every one.   Even the most tricky games like klax (japanese one specifically) which fires ALOT of IRQs in a frame.  16 or so from what I recall.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=230">kevtris</a> — Thu Oct 21, 2010 9:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-10-21T09:27:28-07:00</updated>
<published>2010-10-21T09:27:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68959#p68959</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68959#p68959"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68959#p68959"><![CDATA[
I don't know if it's much help, but on my old Squeedo board back in 2005, scanline counting was one of the first things I tried.  I hooked PPU-A12 to a timer input on the PIC16/18 (no capacitor or anything else), set it to prescale by 8, and it worked perfectly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Thu Oct 21, 2010 9:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-10-21T09:01:58-07:00</updated>
<published>2010-10-21T09:01:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68957#p68957</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68957#p68957"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68957#p68957"><![CDATA[
kevtris, your "monostable" approach would make at least some sense.<br />It's not good to talk about a "monostable" here, because this would refer to a circuit that uses R and C componants for a delay (which is subjects to a big error or margin), but A12 clocks being blocked by another circuits who counts M2 clocks after the fitst A12 rise would be a plosible solution.<br /><br />Even if the internal PPU's out impedance is 100 ohm (which it normally shouldn't be that much) this correspond to a 22ns time constant filter. The short impules of a few ns should be due to asynchronous issues inside the PPU itself or something in the like. Chances are that the long lines on the NES connector already filters them a bit.<br /><br />I belive people made tests and clocked A12 manually with $2006 writes, and figured that each rise (at slow speed) would result in an IRQ, RIGHT ? If nobody has ever done this, then it would be about time somebody really tests this.<br />Has it been tested how many cycles exacly between A12 rises are needed to clock the counter twice ?<br /><br />This brings me another question. If Nintendo did have to use something this complicated (two counters, including one who isn't in sync) for a counter on A12, why didn't they use a counter on A13 instead which would just require a divide-by 42 pre-scaler before the actual scanline counter and would work wonders in theory ? (yes there is unused pins on the chip). Maybe Nintendo just didn't know their hardware this well.<br />Or maybe the actual circuit is different from what we imagine. As tepples says, no way to know it without decaping the chip <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />I'll try to simulate the "monostable" approach in software for my MMC1 demo. Hopefully I'll get something working.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Oct 21, 2010 9:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kevtris]]></name></author>
<updated>2010-10-21T08:07:54-07:00</updated>
<published>2010-10-21T08:07:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68956#p68956</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68956#p68956"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68956#p68956"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I guess the capacity is only there to filter <em>really</em> short impulses, that are significantly shorter than a PPU clock cycles. Because the internal impedance of the PPU is close to 0, the filter cutoff will be really high.<br /></div><br />Yeah, this makes more sense. Nice to have a better explanation of this. Nothing else counts the number of pulses, so glitches like this don't matter (and presumably RAM and the MMC writes somehow ignore these via some other method).<br /><br /><div class="quotetitle">kevtris wrote:</div><div class="quotecontent"><br />The capacitor is just for power supply bypassing also.<br /></div><br />It goes between ground and CHR A12, and it's only 220 pF.</div><br /><br />Oh that little ceramic one.  Yeah that's for minor pulse filtering.  Nintendo must not have synchronized the A12 input to their logic (that is, run A12 through a flipflop off M2) before using it, so thin pulses on A12 could clock the counter multiple times.  Honestly, that cap might've just been N being paranoid.  I've taken it off of many boards for fun/testing and it doesn't seem to matter... but I'm sure there's SOME  NES' where it WOULD matter, or the timing calculations say it's possible, so to be safe they included it.  Even if only 1 out of 10000 NES units would be affected, it's cheap insurance.<br /><br />on all the pirate MMC3 boards I've seen (multicarts, etc),  they don't have the capacitor on A12.  Either it was slightly redesigned with the synchronizer flipflop, or they just didn't put it on since it seems to work without it.  Also interestingly, the N made MMC3's are a 44 pin QFP while the pirate ones are all 40 pin DIP.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=230">kevtris</a> — Thu Oct 21, 2010 8:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-10-21T07:56:43-07:00</updated>
<published>2010-10-21T07:56:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68955#p68955</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68955#p68955"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68955#p68955"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I guess the capacity is only there to filter <em>really</em> short impulses, that are significantly shorter than a PPU clock cycles. Because the internal impedance of the PPU is close to 0, the filter cutoff will be really high.<br /></div><br />Yeah, this makes more sense. Nice to have a better explanation of this. Nothing else counts the number of pulses, so glitches like this don't matter (and presumably RAM and the MMC writes somehow ignore these via some other method).<br /><br /><div class="quotetitle">kevtris wrote:</div><div class="quotecontent"><br />The capacitor is just for power supply bypassing also.<br /></div><br />It goes between ground and CHR A12, and it's only 220 pF.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Oct 21, 2010 7:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kevtris]]></name></author>
<updated>2010-10-21T07:38:29-07:00</updated>
<published>2010-10-21T07:38:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68953#p68953</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68953#p68953"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68953#p68953"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I just figured how lacking the documentation of MMC3's scanline counter is. Not the functionment of the counter but of how it is clocked.<br /><br /><br /><br />Look at <a href="http://kevtris.org/mappers/2ndparty/acclaim_55741.html" class="postlink">this</a> for a proof of it. This board uses a 74HC08 chip instead of a capacitor. I guess it ANDs A12 with VCC (or itself) 3 times to delay the edges, and and it with the original. As far I know this should kill impulses of ~50ns and shorter, but have no effect on anything slower than this.<br /><br />There is really something lacking/fishy here, how comes nobody ever figured how wrong/incomplete the current theories behind the counter are ?<br /></div><br /><br /><br />that chip is not performing a delay on there.  The capacitor is just for power supply bypassing also.<br /><br />The way the MMC3 does it I'm pretty sure is it uses a counter to make a simple monostable ("pulse stretcher").  <br /><br />What you do is this:<br /><br />when A12 goes high, AND a delay counter equals zero, you feed a clock to the scanline counter, AND you set this delay counter to a non-zero value at the same time.<br /><br />each M2 you decrement your delay counter.<br /><br />the net result is this:  when A12 goes high,  the IRQ counter is clocked exactly once, and this delay is loaded, which prevents the IRQ counter being clocked more times.  each time A12 is high, this delay counter is reloaded.  So, if A12 is toggling,  the delay counter is constantly being reloaded.  When A12 is low long enough, the delay counter finally hits 0, the next time A12 goes high it will pulse the IRQ counter.<br /><br />A12 will be high and low fairly long,  alot longer than 50ns.  the PPU reads a byte every 8 21MHz clocks which is every 372ns.   The fetch cycle is 4 accesses long, so that means A12 will toggle at least every 2 accesses (2 garbage fetches, 2 sprite tile fetches) so the A12 toggle rate is thusly 16 21MHz cycles high, and 16 21MHz cycles low. <br /><br />This means that the A12 delay counter should be 3 or 4 M2 cycles long, which isn't very many at all.  For safety,  you could use 7 or 8, which gives a nice round number for a 3 bit counter (7, +1 depending on how the other logic works).<br /><br />Of course, you can actually TEST how long this is by some carefully written code on the NES that toggles A12 via 2006 or something... but I think the delay is too short to check it this way.<br /><br />So, in a nutshell that's pretty much how it has to work.  An RC delay most likely isn't accuate enough for this but might be made to work.  The internal delay counter is reliable and more importantly "free" since it's on the chip.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=230">kevtris</a> — Thu Oct 21, 2010 7:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-10-21T04:00:36-07:00</updated>
<published>2010-10-21T04:00:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68952#p68952</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68952#p68952"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68952#p68952"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />how comes nobody ever figured how wrong/incomplete the current theories behind the counter are ?<br /></div><br />Because nobody has the $$$ to decap the MMC3 the way someone did for the CIC. Therefore, the MMC3 is a black box, and any theories behind its operation are empirical.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Oct 21, 2010 4:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-10-21T03:54:22-07:00</updated>
<published>2010-10-21T03:54:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68951#p68951</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68951#p68951"/>
<title type="html"><![CDATA[MMC1 A12 demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7050&amp;p=68951#p68951"><![CDATA[
I just figured how lacking the documentation of MMC3's scanline counter is. Not the functionment of the counter but of how it is clocked.<br /><br />I always though, according to existing doccumentation, that it was simply clocked by A12's rising edges, but apparently this isn't the case else it would be clocked like 8 times per scanline (not just 1). Docs says this is due to the capacity filtering the signal.<br /><br />This fishy as hell : Since I don't see any resistor in series with it, (the resistor can't be internal to the MMC3 either, because it should be present BEFORE the capacitor to have a low-pass effect), the "internal" impedance in the PPU (which should be close to 0) should play the role of resistor for the filter... but this won't work, because this would completely screw up PPU fetches. Since the MMC3 uses A12 for bank-switching as well, having it filtered is not acceptable in any ways.<br /><br />I guess the capacity is only there to filter <em>really</em> short impulses, that are significantly shorter than a PPU clock cycles. Because the internal impedance of the PPU is close to 0, the filter cutoff will be really high. <br /><br />Look at <a href="http://kevtris.org/mappers/2ndparty/acclaim_55741.html" class="postlink">this</a> for a proof of it. This board uses a 74HC08 chip instead of a capacitor. I guess it ANDs A12 with VCC (or itself) 3 times to delay the edges, and and it with the original. As far I know this should kill impulses of ~50ns and shorter, but have no effect on anything slower than this.<br /><br />There is really something lacking/fishy here, how comes nobody ever figured how wrong/incomplete the current theories behind the counter are ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Oct 21, 2010 3:54 am</p><hr />
]]></content>
</entry>
</feed>