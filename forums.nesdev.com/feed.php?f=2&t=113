<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=113" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2004-12-23T14:58:30-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=113</id>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2004-12-23T14:58:30-07:00</updated>
<published>2004-12-23T14:58:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=113&amp;p=689#p689</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=689#p689"/>
<title type="html"><![CDATA[Pause Fucntion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=689#p689"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you want the music to keep playing during pause, you'll have to jsr to your music routine even when paused.  If you want music to stop... you'll have to silence all audio when the game is paused (otherwise you could be left with ugly hanging notes).<br /></div><br /><br />Heh, I forgot about that  <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /> Although I didn't take many things into account because that was just an example for him to go by.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />In fact... when paused, you still have to do EVERYTHING your game normally does.  The only thing that's different is you don't allow the player to move/operate... and you stop the world (and enemies) from updating.  So I'd say just keep a 'pause' value somewhere in RAM and in the NMI code (or wherever your typical frame code is)... branch over the routines that update the player and world if the game is paused.<br /></div><br /><br />I was gonna mention that he should just store a ram value and check it during certain routines to see if they can run or not, but then the example would've been too big, and I was going for something simple. And yeah thats a much better way to keep things paused, just set a value nd at certain routines just don't let them run if the value = $01 or something <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I guess the better, simpler, more structurated and more logistical thing is : <br />To have a NMI routine that upload PPU registers, SprRam, etc... from buffers, call the sound code, etc.... <br />Your main programm can just does the actual gameplay things and upload buffer to be read in a NMI.<br /></div><br /><br />That would probably work much better for him. That way he could just go into an infinite loop, but all the "necessarry" things willl occure because the NMI keeps going.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So you have to check the JoyPad in the main thing, if start if pressed you have to wait it to be released, then wait it to be pressed again, then continius gameplay (otherwise you game will pause and unpause 60 times per seconds, and I guess that's not the thing you want). All NMI thing will of couse be still enabled with and witout pausing.<br /></div><br /><br />Heh, I even left that out in my code example. Eh, it was late. Anyway, he'll defintly need to do that or the pausing will be horrible. He'll prolly need to do something like that for other keys as well (depending on the kind of game he's making).<p>Statistics: Posted by Guest — Thu Dec 23, 2004 2:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2004-12-23T10:34:06-07:00</updated>
<published>2004-12-23T10:34:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=113&amp;p=687#p687</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=687#p687"/>
<title type="html"><![CDATA[Pause Fucntion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=687#p687"><![CDATA[
I guess the better, simpler, more structurated and more logistical thing is :<br />To have a NMI routine that upload PPU registers, SprRam, etc... from buffers, call the sound code, etc....<br />Your main programm can just does the actual gameplay things and upload buffer to be read in a NMI.<br />So you have to check the JoyPad in the main thing, if start if pressed you have to wait it to be released, then wait it to be pressed again, then continius gameplay (otherwise you game will pause and unpause 60 times per seconds, and I guess that's not the thing you want). All NMI thing will of couse be still enabled with and witout pausing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Dec 23, 2004 10:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2004-12-23T10:03:55-07:00</updated>
<published>2004-12-23T10:03:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=113&amp;p=686#p686</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=686#p686"/>
<title type="html"><![CDATA[Pause Fucntion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=686#p686"><![CDATA[
If you want the music to keep playing during pause, you'll have to jsr to your music routine even when paused.  If you want music to stop... you'll have to silence all audio when the game is paused (otherwise you could be left with ugly hanging notes).<br /><br />Aside from that... any split screen effects you're doing will still need attention.  If you don't split the screen when needed, you'll get scrolling (or other graphic errors) on the display.<br /><br />Plus you'll probably still have to refresh SPR-RAM every frame ($4014 write).<br /><br />In fact... when paused, you still have to do EVERYTHING your game normally does.  The only thing that's different is you don't allow the player to move/operate... and you stop the world (and enemies) from updating.  So I'd say just keep a 'pause' value somewhere in RAM and in the NMI code (or wherever your typical frame code is)... branch over the routines that update the player and world if the game is paused.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Thu Dec 23, 2004 10:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2004-12-22T23:21:47-07:00</updated>
<published>2004-12-22T23:21:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=113&amp;p=679#p679</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=679#p679"/>
<title type="html"><![CDATA[An example]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=679#p679"><![CDATA[
It really does depend on your code structure.<br /><br />Your idea to have an infinite loop that I assume will keep looping the button check routine until start is pressed again could possibly work. <br />Note: Remember interrupts (uncluding the VBLANK NMI) will trigger no matter what your code is currently doing (althopugh it will wait for the current instruction or DMC sample load to end ).<br /><br />Example (note: this is a simplified version of something you could do, the code should be more optimized and more complete <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" />): <br /><br />-this assumes everything has been properly initiated + VBLANK NMIs = On<br />-also, I wrote this off the top of my head so there might be errors<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Main:                           ;main game loop<br />       jsr CheckButtons  ;checks the controller buttons and stores them<br />       jsr EnemyAI         ;enemy movement or whatver<br />       jsr HeroControl     ;Hero movement based upon the pushed buttons<br />       jmp Main              ;loop back<br /><br />;---------------------------------------------<br />CheckButtons:<br />      ldx #$1     <br />      stx $4016               ;write 1 to $4016<br />      dex                     <br />      stx $4016               ;write 0 to $4016<br />                                   ;strobe controller 1 port<br /><br />      lda $4016               ;A<br />      lda $4016               ;B<br />      lda $4016               ;Sel<br />      lda $4016               ;Start  <br />      and #%00000001<br />      sta StartButtonStatus  <br />      rts                    ;button checking routine &#40;checks only for St button&#41;<br />;--------------------------------------------<br /><br />EnemyAI:<br />      ldx EnemyX<br />      ldy EnemyY<br />      stx Sp2X<br />      sty Sp2Y<br />      rts                       ;EnemyAI here<br />;-------------------------------------------<br /><br />HeroControl:<br />      lda StartButtonStatus<br />      bne PauseGame            <br />      rts<br /><br />PauseGame:<br />     lda #$0<br />     sta StartButtonStatus   ;resets start button status<br /><br />     lda PPUReg1           ;load a ram coopy of $2000<br />     eor #%10000000    ;toggle nmi bit<br />     sta $2000         ;NMI = off, asssumes IRQ are turned off already<br /><br />InfiniteLoop:<br /><br />     jsr CheckButtons ;loop infinitely until St is pressed<br />     bne InfiniteLoop<br />     <br />     lda PPUReg1<br />     eor #%10000000<br />     sta $2000           ;turns NMI back on<br />     rts</div><br /><br />That's just an example, there are many other methods.<br /><br />Anyway, What are you working on (just curious)? <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><p>Statistics: Posted by Guest — Wed Dec 22, 2004 11:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2004-12-22T13:23:12-07:00</updated>
<published>2004-12-22T13:23:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=113&amp;p=676#p676</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=676#p676"/>
<title type="html"><![CDATA[Pause Fucntion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=676#p676"><![CDATA[
This all depends on your code's structure, so what are you calling "game loop".<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Dec 22, 2004 1:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2004-12-22T13:01:55-07:00</updated>
<published>2004-12-22T13:01:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=113&amp;p=675#p675</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=675#p675"/>
<title type="html"><![CDATA[Pause Fucntion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=675#p675"><![CDATA[
There's a lot of ways to do it, of course.  Normally I have my controller reading code in the NMI, so I'd put the pause loop in the main loop.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Wed Dec 22, 2004 1:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2004-12-22T04:25:34-07:00</updated>
<published>2004-12-22T04:25:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=113&amp;p=673#p673</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=673#p673"/>
<title type="html"><![CDATA[Pause Fucntion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=113&amp;p=673#p673"><![CDATA[
Hi there,<br /><br />If i wanna add a "pause" function to the game.<br />What should I do? What i am thinking about is to enter <br />an infinite loop when a button is pressed; when i press it<br />again, the game can go on again. If so, where should I put<br />this piece of code to? within the main game loop? or at some <br />interrupt routines?<br /><br />Any idea on this?<br /><br />Best Regards,<br /><br />Brian<p>Statistics: Posted by Guest — Wed Dec 22, 2004 4:25 am</p><hr />
]]></content>
</entry>
</feed>