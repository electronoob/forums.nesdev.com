<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=9755" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-10-20T18:19:44-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=9755</id>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2014-10-20T17:32:10-07:00</updated>
<published>2014-10-20T17:32:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135295#p135295</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135295#p135295"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135295#p135295"><![CDATA[
Actually, I guess that is not a limitation in this case.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Mon Oct 20, 2014 5:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[43110]]></name></author>
<updated>2014-10-20T18:19:44-07:00</updated>
<published>2014-10-20T17:11:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135294#p135294</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135294#p135294"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135294#p135294"><![CDATA[
Yes the async idea but not a multi stack implementation. I know this isn't a new idea, I think the only novel thing I did was the use of an unofficial opcode for thread safety.<br /><br />For the multi-stack setup, why would you not be able to recurse if the entire stack is preserved on the context switch?<br /><br />EDIT: clarifying which context switch I'm talking about.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6385">43110</a> — Mon Oct 20, 2014 5:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2014-10-20T15:57:23-07:00</updated>
<published>2014-10-20T15:57:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135291#p135291</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135291#p135291"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135291#p135291"><![CDATA[
Sounds like you want this idea: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?t=11075&amp;p=126450">viewtopic.php?t=11075&amp;p=126450</a><!-- l --><br />You can do a simplistic two thread setup by splitting the stack into two, and saving all the registers for a thread when you switch. (No recursion of course.)<br />So you could yield while waiting for NMI, and then force a yield when NMI hits.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Mon Oct 20, 2014 3:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[43110]]></name></author>
<updated>2014-10-20T09:56:59-07:00</updated>
<published>2014-10-20T09:56:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135279#p135279</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135279#p135279"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135279#p135279"><![CDATA[
Right, but I'm making a distinction between a multi-threading and multi-tasking. Since I'm going to have some IO bound tasks (such as map decompression, and tile uploading), I want those tasks to yield their time to other tasks during the spare time before the next NMI.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6385">43110</a> — Mon Oct 20, 2014 9:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2014-10-19T22:45:07-07:00</updated>
<published>2014-10-19T22:45:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135262#p135262</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135262#p135262"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135262#p135262"><![CDATA[
NES Games become multithreaded the instant you add interrupts.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sun Oct 19, 2014 10:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[43110]]></name></author>
<updated>2014-10-20T16:53:19-07:00</updated>
<published>2014-10-18T15:12:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135222#p135222</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135222#p135222"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=135222#p135222"><![CDATA[
<div class="quotetitle">Movax12 wrote:</div><div class="quotecontent"><br />It's easier to store and work with an address than to store a gamestate variable. You can have substates that are also addresses, and just emulate a jsr indirect in place of say a jump table. This allows for saving of an address anywhere as well for a yield kind of functionality.<br /></div><br />So I had a problem of handling multiple background tasks that wouldn't hog the main routine that executes every frame. First I tried a linked list of nmi interrupts in the stack. that was conceptually unwieldy. Next I tried a fixed task list only to realize that it was equivalent to lists of subroutines like tepples said. Recently I figured out that what I really wanted was <a href="https://en.wikipedia.org/wiki/Coroutine" class="postlink"><strong>co</strong>routines</a> and event loops, so I tried a routine that pushed an address at the bottom of the stack instead of the top like a jsr. That was closer to what I wanted, but that approach ended up with lots of house keeping code. After some tweaks I think I've got a fairly efficient pair of routines that implement the thread safe multitasking I wanted.<br /><br /><s>This could be written to that only the addresses are saved, but I&#39;m anticipating I&#39;m going to want saved pointers. I could also write this so that cpu registers are saved, but I&#39;m experimenting with a particular calling convention which reserves X and expects Y to be 0.</s><br /><br />EDIT: The code has been edited to only save addresses, and to be robust against overflowing the queue. Also the examples has been removed for space.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />sub_queue_head:             .res 1<br />sub_queue_tail:             .res 1<br /><br />.segment &quot;CODE&quot;<br /><br />sub_queue       = $0300 ; uses the low end of the page<br /><br />;;<br />; queues the top of the return stack to the event loop,<br />;   and forces the caller to rts.<br />; This will cause the rest of the caller to execute<br />;   after the whole return stack unwinds.<br />.proc yield<br />  ; clc = pre increment<br />  ; sec = post increment<br />  sec<br />  lda #$00<br />  ; increment ptr and load into A atomically<br />  ; this way nmi can safely call yield even if normal<br />  ;   processes are executing yield as well.<br />  ; isc zp is an unofficial opcode that compiles to $E7<br />  isc sub_queue_head<br />  eor #$ff<br /><br />  ; if queue is full, execute one item before pushing this.<br />  cmp sub_queue_tail<br />  bmi @queue_not_full<br />    pha<br />    jsr __execute_queued_routine<br />    pla<br />  @queue_not_full:<br /><br />  and #%00011111    ; A = (sub_queue_head++)%32<br />  tay<br />  pla<br />  sta sub_queue+192+32*0, y<br />  pla<br />  sta sub_queue+192+32*1, y<br />  rts<br />.endproc<br /><br />.proc event_loop_start<br />  lda #0<br />  sta sub_queue_head<br />  lda #32<br />  sta sub_queue_tail<br />    ;!; jmp event_loop<br />.endproc<br /><br />.proc event_loop<br />  lda #&gt;(event_loop-1)<br />  pha<br />  lda #&lt;(event_loop-1)<br />  pha<br /><br />  sec<br />  lda sub_queue_tail<br />  sbc #32<br />  ; busy loop until queue is not empty<br />  @wait_loop:<br />    cmp sub_queue_head<br />  beq @wait_loop<br />    ;!; jmp __execute_queued_routine<br />.endproc<br /><br />.proc __execute_queued_routine<br />  ; atomic increment and load needs to happen here as well<br />  ; because this can be called by yield as well.<br />  sec<br />  lda #$00<br />  isc sub_queue_tail<br />  eor #$ff<br />  <br />  and #%00011111<br />  tay<br />  lda sub_queue+192+32*1, y<br />  pha<br />  lda sub_queue+192+32*0, y<br />  pha<br />  rts<br />.endproc<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6385">43110</a> — Sat Oct 18, 2014 3:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-01-29T10:10:40-07:00</updated>
<published>2013-01-29T10:10:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107025#p107025</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107025#p107025"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107025#p107025"><![CDATA[
This &quot;list of subroutines&quot; has been used in real life as <a href="http://en.wikipedia.org/wiki/Threaded_code" class="postlink">threaded code</a> and <a href="http://en.wikipedia.org/wiki/Return-oriented_programming" class="postlink">return-oriented programming</a> and <a href="http://en.wikipedia.org/wiki/Bytecode" class="postlink">bytecode</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jan 29, 2013 10:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[slobu]]></name></author>
<updated>2013-01-29T07:15:53-07:00</updated>
<published>2013-01-29T07:15:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107019#p107019</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107019#p107019"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107019#p107019"><![CDATA[
Thanks for the replies, guys.  The idea is half-baked.  I'm thankful it got your attention.<br /><br />The main reason I was thinking about a list of sub-routines to jump to is not only for mini-games but RPG Maker use.  I could see storing the list in battery backed RAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4942">slobu</a> — Tue Jan 29, 2013 7:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LocalH]]></name></author>
<updated>2013-01-29T02:38:07-07:00</updated>
<published>2013-01-29T02:38:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107014#p107014</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107014#p107014"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=107014#p107014"><![CDATA[
<div class="quotetitle">slobu wrote:</div><div class="quotecontent"><br />Also, two separate threads could be used for split screen games wherein each player could be running a different game.<br /></div><br />This would be interesting, to see something like the Mixed Match from SNES <strong>Tetris &amp; Dr. Mario</strong>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=325">LocalH</a> — Tue Jan 29, 2013 2:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2013-01-28T14:33:27-07:00</updated>
<published>2013-01-28T14:33:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106982#p106982</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106982#p106982"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106982#p106982"><![CDATA[
It's easier to store and work with an address than to store a gamestate variable. You can have substates that are also addresses, and just emulate a jsr indirect in place of say a jump table. This allows for saving of an address anywhere as well for a yield kind of functionality.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Mon Jan 28, 2013 2:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-01-28T13:27:38-07:00</updated>
<published>2013-01-28T13:27:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106976#p106976</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106976#p106976"/>
<title type="html"><![CDATA[Re: Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106976#p106976"><![CDATA[
<div class="quotetitle">slobu wrote:</div><div class="quotecontent"><br />What if you designed a game such that each routine was given a label 0-255.  A single game would consist of a static array of 8-bit values that would prompt the game engine to jump to the coinciding routine.<br /></div><br />This is already done in a lot of games to control the current game state, but I guess you could generalize it further to individual tasks within the game state.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm not sure what terminology this would fall into.  Perhaps single-threading?  A jump table?<br /></div><br />Not sure either... A NES game would be single-threaded even without this technique, and a jump table table is just the mechanism to call the functions, but it doesn't describe the general idea at all.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Are there any advantages to this technique?<br /></div><br />Not sure. Most games already are basically a chain of different systems running one after the other, only they're executed in a hardwired order. The only advantages of shuffling the order of the tasks I can think of is completely skipping unnecessary tasks in certain parts of the game or reusing individual systems in different engines, but we can kinda do that already.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm hoping that such a method would allow multiple games of the same cart.<br /></div><br />I don't get it... You want to code some generic functions and chain them together in different ways in order to create different games?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also, two separate threads could be used for split screen games wherein each player could be running a different game.<br /></div><br />I guess so, as long as you have the RAM to keep track of both games (and they were programmed to make use of relocatable variables).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Jan 28, 2013 1:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[slobu]]></name></author>
<updated>2013-01-28T13:13:25-07:00</updated>
<published>2013-01-28T13:13:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106975#p106975</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106975#p106975"/>
<title type="html"><![CDATA[Using a task list for multi-game or simultaneus game use]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9755&amp;p=106975#p106975"><![CDATA[
What if you designed a game such that each routine was given a label 0-255.  A single game would consist of a static array of 8-bit values that would prompt the game engine to jump to the coinciding routine.<br /><br />I'm not sure what terminology this would fall into.  Perhaps single-threading?  A jump table?<br /><br />Are there any advantages to this technique?  I'm hoping that such a method would allow multiple games of the same cart.  Also, two separate threads could be used for split screen games wherein each player could be running a different game.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4942">slobu</a> — Mon Jan 28, 2013 1:13 pm</p><hr />
]]></content>
</entry>
</feed>