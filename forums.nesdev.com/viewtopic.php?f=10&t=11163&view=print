<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Text output in Kid Icarus status screen</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Text output in Kid Icarus status screen</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11163">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11163</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikaelmoizt</b> [ Sat Apr 12, 2014 12:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Text output in Kid Icarus status screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello! I hope you can bear this n00bish question  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />Ok, so I am working on a hack that involves adding text inside the pause screen in Kid Icarus. (No, not changing it. Adding text.)<br />I got everything set up for a seperated subroutine that will execute upon pressing the start button.<br /><br />The issue is that, unlike with my hack of SMB, there are no shortcuts in VRAM for text output ($0300-$03FF), it outputs all text thru $2007 instead.<br /><br />Basically, I would like to do something like this:<br /><br />LDA #$22<br />STA $2006<br />LDA #$08<br />STA $2006<br />LDA $whatever<br />STA $2007<br />RTS<br /><br />So, once the pause screen is drawn, and I try to make writes to the screen, the game crashes. (Or if I modify the code to not write to $2006, nothing at all happens)<br />I kinda know why this happens (sort of), but is there a way to fix this? Am I missing something?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Apr 12, 2014 1:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Text output in Kid Icarus status screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So if I wanted to program this myself, in a game I wrote, I'd know how to do it and could probably help you with what you've given me.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bit $2002;Only needed if the game is really strange, and doesn't double write to $2006/$2005 always<br />lda mirrorof2000;The previous value stored to $2000 which I'd hope<br />;the game has stored somewhere<br />and #%11111011;Clear this bit so writing to $2007 increments by 1, not 32<br />sta $2000;Store to the register so the value takes effect<br />sta mirrorof2000;And the mirror<br />;The above may not be necessary if you know that bit is already cleared<br /><br />lda #HIGHBYTEOFWHERETODRAWTEXT<br />sta $2006<br />lda #LOWBYTEOFWHERETODRAWTEXT<br />sta $2006<br /><br />ldy #$04;Length of text to add<br />textloop:<br />lda TEXTTOADD,y<br />sta $2007<br />bpl textloop<br /><br /><br />;Elsewhere, where the code won't run into it<br />TEXTTOADD:<br />.db 'o', 'l', 'l', 'e', 'H';Reversed to avoid a compare<br /></div><br /><br />But since this is a hack, you haven't really provided enough information to make it easy to help unless you expect us to disassemble the game to find things you've already found.<br /><br />Where/what exactly/how are you inserting? HOW does it crash? Infinite loop? Running into data? Is there free space in the rom? Are you sure where you're putting stuff is free, and is not a string of $FFs that's actually needed by the game?<br /><br />One potential issue is that what you're adding is making it so the game's NMI takes longer and ends up writing to $2007 while the game is rendering which would crash it. <br /><br />But then again, this game leads me to believe it draws its pause screen by disabling rendering because it draws it too fast for it to be done in the small vblank period. I bet you know that! I bet you've found exactly where the routine that draws the pause screen is! Why not post the relevant addresses? Help us help you.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> Another thing that might be wrong, (since you say you're trying to draw your own text AFTER the screen is drawn) is that you're trying to draw after the pause screen render routine has turned PPU rendering back on causing a similar problem to the first potential issue. That's if you're trying to hack the routine that draws it directly.<br /><br />Edit: Or, if you have no idea where the actual screen is drawn (or if you know where it is, but have simply put your code in a separate subroutine totally after that is done), the issue is almost certainly writing $2007 while rendering. The reason I guess this is because you have you have a separate routine that is run while start is pressed, which doesn't make it sound like you're hacking the draw routine directly. Because if that WERE the case, start would have already been detected to begin it, and you wouldn't need to do that.<br /><br />tl;dr: More info, please.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikaelmoizt</b> [ Sat Apr 12, 2014 3:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Text output in Kid Icarus status screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh thank you. I will look at the code you pasted.<br />Ofcourse I will share more information on this. <br />Once I get this to look anything like what I want, there is locations in code and sourcecode to be pasted here for future hacking pleasures.<br /><br />The ROM I am using is the Kid Icarus (E). <br />What I am trying to add is a &quot;peek and change&quot; kind of system where you can edit RAM values while game is running. Why? Because it looks really cool <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />I wanted the game to have the option of the &quot;debug&quot; mode rather than always enabled.<br /><br />At the start of the game, I added 2 options (more like one with possibilty to expand if there is a need). No big chore changing amount of text there.<br /><br />My starting JSR originates from $EE71 where I replaced JSR $EB39 to my own routine @ $FD20. $1FD30 in ROM file. There is a large chunk of $00 and $FF located here.<br />Also, since I replaced code, I copied what was originally @ $EE71 and put it first in my subroutine so nothing will mess up. (JSR $EB39)<br />Code near $EE71 has to do with polling and saving joypad input to zeropage locations. <br />So, every frame, this jump occurs and checks if PauseMode ($38) is active and if so, check my DebugActive flag ($6F0) is set. <br /><br />If not -&gt; Reurn and load the standard pause screen if START was pressed. Yes, this method is a bit backwards, but there is no easy way to rewrite code for &quot;what happens when START is pressed&quot; in any other place (or I just haven't found it). So technically, my routine triggers on the PauseScreen active flag rather than START was pressed.<br />Data for this screen can be found @ $E96D and is read @ $EA4B. This is where the output happens. Also, if you take a look at the code in a debugger, you can see how it becomes a bit more tricky with LDA ($08),Y. These (two) memory location seems to handle more than the pause screen too (bank number?). I haven't had the patience to find out more about this. <br /><br />If DebugActive is true -&gt; jump to a routine located @ $FD50 that will do exactly the same as above, but read data located elsewhere so that the design can be changed to make room for my system. It doesnt matter right now where it's placed in code. All I can say is that it was a timeconsuming task to alter the graphics.<br /><br />This is where I am right now. <br />After the (slightly messed up) pause screen gets loaded I now would like to print out text and values, update somehow and add a cursor for editing. There might be some need of conversion for &gt;09 values later.  <br /><br />Here is where the crash occurs when trying to write to PPU. Screen gets misaligned and everything stops. I never actually needed to deal with the PPU writes (!) and such, therefore I am a NES noob.. with many hours of experience <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />I hope this helps.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<img src="./download/file.php?id=1427" alt="KidIcaru-2.png" /><br />
			<span class="gensmall">KidIcaru-2.png [ 2.9 KiB | Viewed 351 times ]</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<img src="./download/file.php?id=1426" alt="KidIcaru-1.png" /><br />
			<span class="gensmall">KidIcaru-1.png [ 2.73 KiB | Viewed 351 times ]</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<img src="./download/file.php?id=1425" alt="KidIcaru-0.png" /><br />
			<span class="gensmall">KidIcaru-0.png [ 1.63 KiB | Viewed 351 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Apr 12, 2014 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Text output in Kid Icarus status screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Aight. So almost definitely it's crashing because you're writing to $2007 while rendering. (or... like the code you added is not in the fixed bank, but it seems like that's a thing you'd know about. I'm gonna... not check that out unless I really have to!) The deal is you can't write to $2007 at anytime. You can write to it when rendering is disabled. You can write to it for a short time after vblank begins (usually when the NMI routine fires, if NMIs are enabled). If you're aware of this, tell me so! If not, here's a plan that may or may not work because I don't have access to what you're doing.<br /><br />First, ask yourself this question: Is it possible for my pause check code (that also writes $2007) to run on a frame where I can actually see the pause screen (instead of like... black)? If yes, you're writing to $2007 during rendering, no question. Unless... the code you said was doing an identical thing (using different data) to the pause screen already disables rendering if which case I have no idea, I'd have to look at the patch.<br /><br />If yes, here's a super hacky plan to try to fix it.<br />1. I'm assuming your debug active flag currently has two states. Zero (we'll say for off), and non zero (we'll say for on).<br />2. Based on this assumption, you want to give it a third state. #$00 = off, #$01 = on, have not drawn pause screen, #$02 = on, have drawn pause screen.<br /><br />Your routine that hooks the pause screen probably looks something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JSR $EB39;Junk copied from the original EE71 <br />lda $38;check pause flag<br />beq PauseStubEnd;if zero, do nothing<br />lda $06F0;Check debugflag<br />beq PauseStubEnd<br /><br />LDA #$22<br />STA $2006<br />LDA #$08<br />STA $2006<br />LDA $whatever<br />STA $2007<br /><br />PauseStubEnd:<br />rts<br /></div><br />Of course, that means you'll end up writing to $2007 during rendering at some point. Because if this runs every frame, and rendering is not disabled every frame then...<br /><br />3. So try changing it to something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JSR $EB39;Junk copied from the original EE71 <br />ldy $06F0;Check debugflag<br />beq PauseStubEnd;If zero, do nothing<br />;If here, debug mode is active<br />lda $38;Check pause mode<br />bne PauseStubCheckDebug;if active, continue<br />;If here, debug mode is active,<br />;But the game is NOT paused<br />lda #$01<br />sta $06F0;Set debugflag to on, have not drawn pause screen<br />;We do that every time the game isn't paused<br />;So the next time the game is paused<br />;We'll know to draw the screen just once...<br />bne PauseStubEnd;bne will always branch here. Exit routine, because game is not paused. <br /><br />PauseStubCheckDebug:<br />;If here, the game is paused<br />;and debugmode is enabled.<br />;Debugmode flag is still in y<br />dey;If after subtracting 1, it's still above 0, that means it was 2.<br />bne PauseStubEnd;Which means we already drew the pause screen and shouldn't again<br />;If here, debug flag is 1. Debug is on, we're paused, but we haven't drawn the extra stuff.<br /><br />lda #$00;DISABLE RENDERING!<br />sta $2001;<br />;The reason we do the whole song and dance<br />;with the extra debug state<br />;Is that if rendering was disabled<br />;every frame, some odd things<br />;might prevent the player<br />;from seeing the screen!<br /><br />;The extra state allows us to<br />;disable it ONCE to draw<br />;and then the text will <br />;remain there without<br />;us drawing it again<br /><br />;bit $2002;Try it without first, if you're tight on space. if it still fails, try with<br />;As stated in the previous post, it's only REALLY needed in weird cases<br /><br />LDA #$22<br />STA $2006<br />LDA #$08<br />STA $2006<br />LDA $whatever<br />STA $2007<br /><br />lda #%00011110;Turn rendering back on<br />sta $2001;I think this is how Kid Icarus would have it set.<br />;If not, read the docs here to get a better value<br />;http://wiki.nesdev.com/w/index.php/PPU_registers#Mask_.28.242001.29_.3E_write<br /><br />lda #$02;Set debug mode flag<br />sta $06F0;to on, have drawn pause screen.<br />PauseStubEnd:<br />rts<br /></div><br />It's commented, but the short version is the new checks set it up so <br />1. When the game is not paused, your debug flag knows.<br />2. Thanks to the above, you can detect the first frame of being paused<br />3. When you've drawn the screen, you can detect that and not draw it again.<br /><br />Be aware! The above code is based entirely on a guess. I have not run this game through a debugger, yet. (I'll only do that if I need to, and it won't take me ALL DAY to figure out.) There are all kinds of things that could go wrong, like $EB39 returns a value in A, X, or Y or sets flags that you're destroying with your routine before it gets used after your own RTS. (which would bring it back to the next thing that would use $EB39 info.) But I assume you checked that. (If you didn't or aren't sure there's a fix for that by storing all of that to the stack, then restoring it all when you finish. It's the next thing I'd try if this doesn't work.) Also, it could be this doesn't crash, but you see nothing changed on the pause screen. Which probably means your code is drawing to the pause screen before the pause screen is fully drawn, and then it's overwritten by the actual pause screen. (Which you can easily fix by just waiting more frames to draw yours.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I haven't had the patience to find out more about this. </div><br />Err... you need to find it, or you should give up. Because reading your plan, it sounds much harder than just this.<br /><br />PS, and it's probably bad news! If you really want to make the pause screen also react to input, this method isn't really great for that. Because every time the player makes an input that would change the menu, you'd need to disable rendering which will... look weird. You'll need to figure out how this game updates the screen in the NMI if you want to draw without disabling rendering. (Could actually just do a similar check for pause inside the NMI, and draw what you need while paused.) Or use sprites for the interactive stuff, while the text stays put.<br /><br />Apologies in advance is none of that is any help. It seems like you know the obvious stuff, but I'm trying to cover all the bases here. If it ain't helpful, yeah... post a patch and I'll take a look but no guarantees if I gotta go super deep.<br /><br />Edit: Correct big whoops. Said $2000 disables rendering instead of $2001.<br />Edit2: While I'm at it, Kid Icarus shows sprites and the background on the left 8 pixels of the screen.<br />Edit3: Oh snap. And for extra safety, probably also want to set $2000 to be sure $2007 writes increment by one as stated in the previous post. I'm starting to bet there won't be room for all this in one place... I didn't add any $2000 stuff to the code in this post, though. More curious if it doesn't crash. We can go from there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikaelmoizt</b> [ Sun Apr 13, 2014 1:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Text output in Kid Icarus status screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You have no idea how helpfull your reply was to me <img src="./images/smilies/icon_cool.gif" alt="8-)" title="Cool" /><br /><br />For now, I left the DebugFlag unread and just tried to output something while in the pause screen. My edited pause screen will need some reworking, so I will save that for some rainy day.<br /><br />The text will be put out when pressing LEFT on the controller for now.<br />Since the entire screen is redrawn each time you press LEFT, it looks a little strange at the moment.<br /> <br />Now, I will work on getting some kind of interactivity into this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">@FD20<br />JSR $EB39<br />LDA $0038 ;PauseScreen Flag<br />CMP #$02 ;Is it drawn?<br />BEQ CheckJoypad<br />RTS<br /><br />CheckJoypad:<br />LDA $00F6 ;Contoller 1 button pressed<br />CMP #$02 ;Equals $02? (Left)<br />BEQ PressedLeft<br />RTS <br /><br />PressedLeft:<br />LDX #$00 ;I could have TXA,PHA here to be safe, but time will tell if something goes wrong<br />LDA #$00<br />STA $2001 ;Disable rendering<br />LDA #$20 ;PPUHI<br />STA $2006<br />LDA #$42 ;PPULOW<br />STA $2006<br /><br />GetChar:<br />LDA $textsource,X<br />STA $2007<br />INX<br />CPX #$1C ;This is just for making sure text gets printed in between the frame <br />BNE $GetChar<br /><br />LDA #$00<br />STA $2006 ;This reset needs to be made to not make the screen weird.<br />STA $2006 ;It took me a while to find that out<br />LDA #$1E<br />STA $2001 ;Turn rendering back on. Yes, Kid Icarus liked this.<br />RTS<br /></div>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<img src="./download/file.php?id=1429" alt="KidIcaru-3.png" /><br />
			<span class="gensmall">KidIcaru-3.png [ 2.47 KiB | Viewed 294 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sun Apr 13, 2014 4:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Text output in Kid Icarus status screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cool! For interactivity, you can pretty much do the same trick except in the NMI. (Which... amazingly doesn't preserve all the registers at first. But it looks like it ends up going to a jump table that does whatever behavior is needed for that frame, where at least the one I checked does preserve them.)<br /><br />(Also, wow, I branched to an RTS instead of just using RTS in my code.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> )<br /><br />Basically you do what you've planned doing now (with checking pause state/your debug flag), but don't disable rendering. After the NMI fires, you have around 2270 cycles before rendering actually starts so it's safe to write $2007.<br /><br />Now, normally, you have to worry about adding things. If what you add takes even a slightly long time, it may make it so after you return the <strong>original game's code</strong> will write to $2007 during rendering.<br /><br />But you seem to have lucked out! It seems the pause screen doesn't write to $2007 at ALL in the NMI (I checked with the debugger, because static screen alone doesn't necessarily mean anything!) So it should be relatively safe to add your own writes there while the game is paused, so long as just your own code doesn't write to $2007 after 2270 cycles. All you have to do is only update what has changed, and you'd never pass that unless you want to update a large part of the screen or something.<br /><br />Anyway, good luck!<br /><br />Edit: <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$00<br />STA $2006 ;This reset needs to be made to not make the screen weird.<br />STA $2006 ;It took me a while to find that out</div><br />Ah, yeah. I forgot about that. Writing to $2006 can also mess with the scroll. (In ways that honestly, I don't fully understand.)  I bet this would also work:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$00<br />STA $2005 <br />STA $2005<br /></div><br />(could be wrong, I haven't specifically tried these in the way you're using them)<br />You can read about the specifics of $2005/$2006 interaction here: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/The_skinny_on_NES_scrolling">http://wiki.nesdev.com/w/index.php/The_ ... _scrolling</a><!-- m --> (Which is exactly what I meant when I said I don't fully understand)<br />And about just $2005 here: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_registers#Scroll_.28.242005.29_.3E.3E_write_x2">http://wiki.nesdev.com/w/index.php/PPU_ ... E_write_x2</a><!-- m --><br /><br />I'm actually really shocked the Kid Icarus doesn't write two zeros to $2005 when the game is paused. In most games, what you did <em>would</em> break the scrolling, but the game would just fix it next frame. Kid Icarus doesn't write anything to the $2005 or $2007 while paused. Interesting.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>