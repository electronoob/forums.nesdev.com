<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Level data compression idea. 50-75% compression</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Level data compression idea. 50-75% compression</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9075">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9075</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Arkonviox</b> [ Fri Jul 06, 2012 9:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Everyone here's given me a lot of ideas to try, it's gonna take time to process (especially since I been having insomnia for the past 3 days and am ready to shut down).
<br />
<br />As for game development, the NES is new to me, I learned 6502 pretty quick, and have made a game demo before in HTML5 <!-- m --><a class="postlink" href="http://www.arkonviox.net">http://www.arkonviox.net</a><!-- m --> which I ported to flash, but I felt I needed both a challenge and something to show for my effort, and after reading up on cheetahmen I thought to myself, if they can do it, I can do it. So far it's been pretty easy but I could use all the optimization tips I can get, especially since the NES's memory is so limited and assembly is both a source of power and a nasty beast.
<br />
<br />strat: it's you mentioned sonic, ecco the dolphin uses 128x128 metatiles, which break down further and further.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jul 07, 2012 3:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I personally don't consider using metatiles as a form of compression, because your level IS made of mtatiles.
<br />
<br />It is however common to use compression on a metatile-coded maps, because even if you use for example 16x16 pixel metatiles, a totally uncompressed screen is still 16x15 = 240 bytes which is still a lot.
<br />
<br />You can use repetition of the same tiles as well as probabilities to get a high compression ratio on maps, but this is a complex subject.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Jul 07, 2012 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Does anyone else have some numbers from their own compression scheme? I'm sort of curious how other methods do.
<br />
<br />Also, I realize I can use the two free bits in an RLE length byte (which has a max value of 63) to possibly do some more tricky things, but I'll have to sleep on that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Jul 07, 2012 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For my Chu Chu Rocket compression scheme, I'm packing 125 maps (12x9 mazes with objects) into about 7800 bytes.  About 62 bytes per map on average.  The text for the level name is separate, currently uncompressed ASCII, and takes up a significant amount of space compared to the level data itself.
<br />
<br />Mazes are simply bit-packed, two bits (top and left wall) for each tile.  That's a fixed size of 27 bytes.  Objects are RLE compressed, dividing bits differently depending on what kind of tile it is, but each run of objects fits into a byte.  CD byte ends a level.
<br />
<br />Originally made this scheme for the TI83 version a long time ago, then re-used it for the NES version.
<br />
<br />One of RLE's biggest foes is a checkerboard pattern, where you place things every other tile.  So in my version of RLE used there, I use a bit to determine whether to advance one square or two squares.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Mon Oct 15, 2012 10:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Currently investigating compression and large maps.<br /><br />I'm experimenting with 4096x4096 pixel maps (eg: Dragon Warrior world maps).<br /><br />Messing around on paper and in Photoshop just looking at things.  <br /><br />First recognizing that I only need 6 bits per metatile (64 metatiles in CHR-ROM bank at a time), or 5 bits (Dragon Warrior only uses half the active BG CHR-ROM tileset for world tiles, other half for text/dialogs).<br /><br />Next is playing around with RLE length bits.  I picked a random row of 1 x 256 metatiles of 16x16 pixel size spanning the world in a average moderately complex layout (single tile runs like crossing multiple continents, rivers, a town, moats, etc, not just all water and mountains).<br /><br />Too low like 3 bits len + 5 bits value and simple 1 byte per run reads I got 40 something bytes but there was alot of:<br /><br />8 water<br />8 water<br />8 water<br />8 water<br /><br />due to the 3 bits for length.<br /><br />Changing to 6 bits length, 6 bits value gives 1.5 bytes RLE block AND allows for full CHR-ROM access instead of half, and I got it to around 36 bytes for the same 1 x 256 metatile run.  Typical compression trade off of more space wasted for the smallest cases to save more space in the largest case.  At minimum I want my RLE blocks to be nibble aligned for rapid decompression with fixed length shifts/masks, etc, for fast real time decompression.<br /><br />So with just basic RLE I'm managing about 30-40 bytes per 256 metatiles, or 1.07 screens worth of data.<br /><br />~40 bytes vs 960 per screen = ~4 % of uncompressed size.<br /><br />Shooting to have 256 x 256 of metatile data (64k) compressed to about 8k for an entire world map consisting of ~273 screens.  Thats going on the average, because there will be strips of just ocean that will take 6 bytes, and there are probably more complex strips that will take more than 60+ bytes to cancel it out.  <br /><br />I haven't written code yet to run a compression of the whole map, but I'm estimating it will be less than 8k for something like a RPG world map where there are more regions of mountains/ocean that will dwarf the rows with more details.<br /><br />Decompression should be fast enough to do on the fly from ROM straight to 15-16 metatile rows/columns to CIRAM. Just running sums until you hit the run that cooresponds to the location of the tile.  Worse case is vertical columns, where you have to unRLE 15 rows, but even then its just a tight loop summing 10-20 times per row.  1-2 scanlines of draw time per single tile when updating a 15x column seems acceptable.  If not, I'll just break the RLE into quadrants or implement some kind of skip lists to jump into the right ballpark to save some time.<br /><br />Another worse case is each of the 256 metatiles are non repeating from the previous, and youd end up with 384 bytes of RLE data, but I'll call it a &quot;level design restriction&quot; of not doing this excessively and the &quot;level editor&quot; will warn &quot;too much unique data&quot; and not allow any RLE row to be more than 256 bytes, for the sole purpose of keeping the decompression operation manageble with 8 bit instructions to keep the decompression loop small, tight, and fast.<br /><br />Any time a new row/column is needed, you either unRLE the one row from the start until you get the 16 tiles you need, or unRLE 15 rows from the start until you get each single tile you need for a column.  Only RAM required is temp vars for the running sums, etc.  The tile index would be pulled out of the RLE data, and used to immediately compute 2 real tile indices and write to CIRAM.<br /><br />This works well for most any adventure games, and platformers in most cases, but not for any kind of grid/puzzle games where you have repeating alternating patterns.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Oct 15, 2012 11:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing you might want to try is unary coded length and 6 bits value, or gamma coded length and 6 bits value. That should essentially always save space.<br /><br />If metatiles repeat or share physical tiles, you may be able to fit more than 64 distinct metatiles in 256 physical tiles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Oct 15, 2012 12:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The way Dragon Warrior 2, 3, and 4 encoded maps:<br />xxxxx... length<br />.....xxx tile number<br />(not 100% sure of the order of the bits, I'd need to look that up)<br />If tile number is 0, instead use the length as the tile number of a single tile.  Using a different set of tile numbers than the others.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Mon Oct 15, 2012 12:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If metatiles repeat or share physical tiles, you may be able to fit more than 64 distinct metatiles in 256 physical tiles.</div><br /><br />I thought about this.<br /><br />But that's a matter of just having a lookup table that maps a metatile to 4 physical tiles.  So whether it's fixed (eg: metatile 0 = phys tile {0, 1, 2, 3} or {0, 1, 16, 17} and using logic/arithmetic instructions to compute y&lt;&lt;4+x and y&lt;&lt;4+x+1, or using 2-4 ldas from a metatile to physical tile mapping table, it's going to be approximately similar in the code size/execution time.<br /><br />But this didn't have anything to do with the metatile map compression at all, which is my primary focus.  Just the series of instructions between the decompressed metatile number and how that translates to 2-4 CIRAM writes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Oct 15, 2012 12:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, pehaps it's time to make some publicity for my recently released <a href="http://www.romhacking.net/utilities/882/" class="postlink">CompressTools</a><br />I know it feels unfinished because one the last algorithm (arbitrary Static Dictionary) is so slow it'll hang up with most data, but it is still a very powerful tool so see which schemes works best to compress X data.<br /><br />Compression is a domain where it's impossible to predict if X or Y will work best without trying, the only way is to compress with X, compress with Y and tie your conclusions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Mon Oct 15, 2012 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">The way Dragon Warrior 2, 3, and 4 encoded maps:<br />xxxxx... length<br />.....xxx tile number<br />(not 100% sure of the order of the bits, I'd need to look that up)<br />If tile number is 0, instead use the length as the tile number of a single tile.  Using a different set of tile numbers than the others.</div><br /><br />Makes perfect sense.  Your 7 tiles would be the most common: water, mountain, hill, field, swamp, desert, ice, while 0 gives you up to 32 tiles for things that are unique anyway like towns, parts of castles, bridges, rivers, caves, numerous shoreline orientations, etc.<br /><br />I picked Dragon Warrior games as my baseline due to its large 2D world maps which are much much larger than your typical 1D 6-8 screen platformer levels.  And it helps that I just completed a playthrough of DW II this weekend and the complete 4096x4096 world map images are easy to find for test data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Oct 15, 2012 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The DW games smooth the shoreline after it's decompressed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Mon Oct 15, 2012 1:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">The DW games smooth the shoreline after it's decompressed.</div><br /><br />Makes sense.  The compressed data refers to metatiles.  Keeping metatiles of all possible shore combinations would consume a large amount of CHR-ROM with duplicate ocean pixel data.  Keeping the shoreline outside of the compressed map data means you can have the bare minimum 4 unique 8x8 physical tiles for the shorelines.  And it's data you don't have to store anywhere; it can be computed on the fly any time you update a row/column of tiles and see a water tile next to a non water tile. <br /><br />Otherwise there is no loss in compression efficiency since it would only have been a single byte single tile run in the RLE stream, and it occurs at a transition that breaks a contiguous RLE span anyway.<br /><br />Interesting, I'm going to have to run it at 1% frame rate and watch as this happens, both during a single row/col update while scrolling, and during an entire screen rebuild after a battle/town.  Curious if it does it on the fly as it converts metatile indices to physical tile numbers when writing to CIRAM or if it performs it as a separate pass since it would be more difficult to detect transitions in the vertical direction while decompressing RLE horizontally.  <br /><br /><s>I suppose if you buffer the new row/col in RAM you could program the PPU address registers to read out the row/col adjacent to the one decompressing &#40;n&#41; and perform continuous single LDA CIRAM reads on the tiles next to the ones you decompressing &#40;n-1&#41;.  Then while decompressing a row/col: a&#41; if the current decompressed tile to be written XOR the current CIRAM tile is water, it&#39;s a transition, amend the metatile to tile conversion to contain shore tiles, and b&#41; track the same thing when starting/ending water runs in the horizonal direction.  You have to map a metatile index to 2 or 4 CIRAM nametable tiles to begin with &#40;along with 1 attribyte byte&#41;, so it would be pretty straight forward to look for transitions and inject the appropriate shore tiles in flight.</s><br /><br />Or I'm overthinking as always... decompression of a row is the trivial case, you can detect transitions as you decompress and inject the appropriate physical indices before writing to CIRAM.  For columns, just keep the n-1 tile in the column from the previous decompression and compare the to current tile n, inject shoreline physical tiles as needed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Oct 15, 2012 2:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think it just makes it a different metatile based on whether or not the surrounding tiles are water/bridges/shoals.<br />And more metatiles doesn't necessarily mean duplicate tiles, since metatiles can share physical tiles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Mon Oct 15, 2012 2:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">I think it just makes it a different metatile based on whether or not the surrounding tiles are water/bridges/shoals.<br />And more metatiles doesn't necessarily mean duplicate tiles, since metatiles can share physical tiles.</div><br /><br />True if you have a mapping table.  For simplicity in my current train of through I'm hard coding metatiles to physical tiles the same way OAM does (metatile 0 = physical tiles {0, 1, 16, 17}<br /><br />I'm just not seeing why move the shorelines out of the RLE.  Unless all those 1 byte entries really really add up by themselves that a block of code to check and inject the shorelines really saved a few more kb.  We are talking 65k metatiles after all, and the shorelines probably do take up the most data since they far outnumber the other incompressible single instances like caves and bridges.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Mon Oct 15, 2012 7:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok so got home and looked at the map again.<br /><br />Two types of data, compressible runs, and 1 offs.  Compressible data like &quot;63 water, 13 tree, 16 mountain, 13 water&quot; compresses to almost nothing.<br /><br />Leaves 1 off data to worry about.<br /><br />Of the 1 off data, things like towns, caves, bridges are so infrequent so as to not even matter.  Rough terrain with lots of breaks and things like rivers also doesn't occur terribly often as naturally IRL terrain tends to be localized.<br /><br />The shorelines however are a significant source of 1 off tiles in every single row, potentially thousands.<br /><br />So basically just saved a few more kilobytes by having code check for adjacent tiles to be 1 land 1 water and inject a shoreline tile in flight.<br /><br />Could mean the difference between the world map nametable going from 64k to 8.1k vs 6.6k and fitting the entire world map into a single 8k bank frame along with it's other supporting data like metatile to tile tables, attributes, and other map related vars other than nametable data.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>