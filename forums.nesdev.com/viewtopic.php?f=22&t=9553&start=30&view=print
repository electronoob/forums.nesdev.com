<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Life Bar made of sprites demo</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Life Bar made of sprites demo</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=9553">http://forums.nesdev.com/viewtopic.php?f=22&amp;t=9553</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Dec 05, 2012 8:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I seem to remember that newer C standards allow the implicit int only when the word before it is a type specifier (signed, unsigned, short, long), not a storage (static, auto, register, volatile).</div><br /><br />Yeah that was a C99 thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Dec 05, 2012 9:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tried the U method tepples mentioned, unfortunately this still does not fix the bug.<br />Casting to long seems to be the only method that works, and I'm pretty sure CC65 is to blame for this.<br /><br />After all this bug does not occur when life is greater than 512 (which would cause an overflow of signed int, but not unsigned int), but occurs when life is really small and life max greater than 512.<br />I suspect this bug was not a signed/unsigned thing after all. I'm not even sure CC65 features signed multiply or divides in the first place.<br /><br />I'll try to see to trigger this bug and go step-by-step in the divide function with FCEUX and see what happen, and if I can explain the bug somehow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Dec 05, 2012 9:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wouldn't expect from a hobbyist compiler for an old CPU to strictly follow any standarts. There are many compilers that ignore various parts of standarts by one or other reason, for example... CC65 with volatile keyword, maybe? In fact I had problems with using just 'unsigned' in the past, not with CC65 though, so it is a possible problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Thu Dec 06, 2012 6:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I wouldn't expect from a hobbyist compiler for an old CPU to strictly follow any standarts. There are many compilers that ignore various parts of standarts by one or other reason, for example... CC65 with volatile keyword, maybe? In fact I had problems with using just 'unsigned' in the past, not with CC65 though, so it is a possible problem.</div><br />Integer promotions in C can be suprising at times, and IIRC if one compares signed ints to unsigned ints they would be promoted to unsigned int, and then negative values appears to be greater to positive values thanks to 2 complement. So the moral is: be careful when mixing signed and unsigned values in an expression.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jsolo</b> [ Fri Dec 07, 2012 4:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I tried the U method tepples mentioned, unfortunately this still does not fix the bug.<br />Casting to long seems to be the only method that works, and I'm pretty sure CC65 is to blame for this.<br /><br />After all this bug does not occur when life is greater than 512 (which would cause an overflow of signed int, but not unsigned int), but occurs when life is really small and life max greater than 512.<br />I suspect this bug was not a signed/unsigned thing after all. I'm not even sure CC65 features signed multiply or divides in the first place.<br /><br />I'll try to see to trigger this bug and go step-by-step in the divide function with FCEUX and see what happen, and if I can explain the bug somehow.</div><br />If I remember integer conversion rules correctly, it should perform a  uint / uint division there, as a single unsigned int should force the computation to unsigned int.<br /><br />For reference, here's the cc65 routine to perform 16x16 -&gt; 16 division. Signed division is negated appropriately and then performed on the unsigned quantities (btw, $8000 is negated, too, which seems incorrect). These built-in routines can be found at libsrc/runtime/ btw.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;---------------------------------------------------------------------------<br />; 16by16 division. Divide sreg by ptr4. Result is in sreg, remainder in ptr1<br />; (see mult-div.s from &quot;The Fridge&quot;).<br />; This is also the entry point for the signed division<br /><br />udiv16:&nbsp; &nbsp;lda&nbsp; &nbsp;#0<br />&nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;ptr1+1<br />&nbsp;&nbsp; &nbsp;ldy&nbsp; &nbsp;#16<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp; &nbsp;ptr4+1<br />&nbsp; &nbsp; &nbsp; &nbsp; beq&nbsp; &nbsp; &nbsp;udiv16by8a<br /><br />L0:&nbsp; &nbsp;asl&nbsp; &nbsp;sreg<br />&nbsp;&nbsp; &nbsp;rol&nbsp; &nbsp;sreg+1<br />&nbsp;&nbsp; &nbsp;rol&nbsp; &nbsp;a<br />&nbsp;&nbsp; &nbsp;rol&nbsp; &nbsp;ptr1+1<br /><br />&nbsp;&nbsp; &nbsp;pha<br />&nbsp;&nbsp; &nbsp;cmp&nbsp; &nbsp;ptr4<br />&nbsp;&nbsp; &nbsp;lda&nbsp; &nbsp;ptr1+1<br />&nbsp;&nbsp; &nbsp;sbc&nbsp; &nbsp;ptr4+1<br />&nbsp;&nbsp; &nbsp;bcc&nbsp; &nbsp;L1<br /><br />&nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;ptr1+1<br />&nbsp;&nbsp; &nbsp;pla<br />&nbsp;&nbsp; &nbsp;sbc&nbsp; &nbsp;ptr4<br />&nbsp;&nbsp; &nbsp;pha<br />&nbsp;&nbsp; &nbsp;inc&nbsp; &nbsp;sreg<br /><br />L1:&nbsp; &nbsp;pla<br />&nbsp;&nbsp; &nbsp;dey<br />&nbsp;&nbsp; &nbsp;bne&nbsp; &nbsp;L0<br />&nbsp;&nbsp; &nbsp;sta&nbsp; &nbsp;ptr1<br />&nbsp;&nbsp; &nbsp;rts<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Dec 07, 2012 8:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is a comment in the cc65 crt source that $8000 is improperly negated (in div.s), so that's a known issue I think (couldn't find it in external documentation though, just noticed it in the code).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Dec 07, 2012 2:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Jarhmander wrote:</div><div class="quotecontent"><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I wouldn't expect from a hobbyist compiler for an old CPU to strictly follow any standarts. There are many compilers that ignore various parts of standarts by one or other reason, for example... CC65 with volatile keyword, maybe? In fact I had problems with using just 'unsigned' in the past, not with CC65 though, so it is a possible problem.</div><br />Integer promotions in C can be suprising at times, and IIRC if one compares signed ints to unsigned ints they would be promoted to unsigned int, and then negative values appears to be greater to positive values thanks to 2 complement. So the moral is: be careful when mixing signed and unsigned values in an expression.</div><br />Gets even worse:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint8_t blah = 0x50;<br />uint8_t result = ~blah &gt;&gt; 4;</div><br />You'd think it'd store 0x0A? Except it stores 0xFA. Why? Because the ~ operator causes blah to be promoted to int =/

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jsolo</b> [ Sat Dec 08, 2012 12:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">Gets even worse:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint8_t blah = 0x50;<br />uint8_t result = ~blah &gt;&gt; 4;</div><br />You'd think it'd store 0x0A? Except it stores 0xFA. Why? Because the ~ operator causes blah to be promoted to int =/</div><br />This is confomant behavior. See 6.3.1.8 and 6.5.3.3 of ISO/IEC 9899:2011,<br />&quot;The operand of the unary + or - operator shall have arithmetic type; <strong>of the ~ operator, integer type</strong>; of the ! operator, scalar type.&quot;<br />For that example specifially, see e.g. <!-- m --><a class="postlink" href="https://www.securecoding.cert.org/confluence/display/seccode/INT02-C.+Understand+integer+conversion+rules">https://www.securecoding.cert.org/confl ... sion+rules</a><!-- m --><br /><br />Edit: Maybe I misread the quote. It probably was meant to be an example for strange C conversion rules instead of errors in CC65 <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Sat Dec 08, 2012 5:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I was talking about how C can catch you off guard regarding implicit casting =P GCC does exactly what I said, and I don't think we can argue GCC is not complaint with that stuff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Dec 09, 2012 3:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Jsolo wrote:</div><div class="quotecontent"><div class="quotetitle">Sik wrote:</div><div class="quotecontent">Gets even worse:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint8_t blah = 0x50;<br />uint8_t result = ~blah &gt;&gt; 4;</div><br />You'd think it'd store 0x0A? Except it stores 0xFA. Why? Because the ~ operator causes blah to be promoted to int =/</div><br />This is confomant behavior. See 6.3.1.8 and 6.5.3.3 of ISO/IEC 9899:2011,<br />&quot;The operand of the unary + or - operator shall have arithmetic type; <strong>of the ~ operator, integer type</strong>; of the ! operator, scalar type.&quot;</div><br />The part you quoted doesn't actually talk about signedness, or integer promotion, it talks about the type of the <em>operand</em> of the ~ operator, which has to be an integer.<br /><br />More meaningful quote would be this one:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The result of the ~ operator is the bitwise complement of its (promoted) operand (that is,<br />each bit in the result is set if and only if the corresponding bit in the converted operand is<br />not set). The integer promotions are performed on the operand, and the result has the<br />promoted type. If the promoted type is an unsigned type, the expression ~E is equivalent<br />to the maximum value representable in that type minus E.</div><br />I.e. the operand, of type uint8_t, is promoted to int.<br /><br />As for integer promotions:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If an int can represent all values of the original type (as restricted by the width, for a<br />bit-field), the value is converted to an int; otherwise, it is converted to an unsigned<br />int. These are called the integer promotions.58) All other types are unchanged by the<br />integer promotions.<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jsolo</b> [ Sun Dec 09, 2012 6:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">The part you quoted doesn't actually talk about signedness, or integer promotion, it talks about the type of the <em>operand</em> of the ~ operator, which has to be an integer.<br /></div><br />You're right, I should have quoted the other part I referred to, the usual arithmetic conversions (and integer promotion rules, too!). The C Standard can be confusing at times, especially when you're half-asleep. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> <br /><br />Concerning the original problem, it sounds awfully close to the following known bug in a 7 years old version of cc65,<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The subroutine that does divisions for longs overwrites the high byte of the divisor instead of the high byte of the result. This leads to errorneous results if the high byte of the divisor is not zero.<br /></div><br />Your program hangs with max=256, too...your cc65 version is newer than 2.10, right? <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Dec 09, 2012 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Life Bar made of sprites demo</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, Shiru's tutorials are with version 2.13.3

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>