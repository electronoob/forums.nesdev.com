<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - DISASM6 v1.4 - Nes oriented disassembler producing asm6 code</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">DISASM6 v1.4 - Nes oriented disassembler producing asm6 code</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7466">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7466</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>loopy</b> [ Fri Feb 11, 2011 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tepples is right.  Whether you enter 6, $6, $06, $0006, or $000000006, asm6 sees it as just a number.  If it's &lt;256, a ZP instruction is emitted.  I'm open to the idea of having a forced absolute address.  Any suggestions on syntax?
<br />
<br />Until something is implemented, making a macro is an easy workaround (as Dwedit already suggested)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Fri Feb 11, 2011 10:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />the most intuitive way would be if it's something like LDA $00FF it uses absolute but if it's LDA $FF then use ZP.  
<br />
<br />if it has to be some kind of special syntax, maybe quote marks? to say, "yes i really mean this!!"
<br />
<br />LDA "$00FF" 
<br />
<br />but i think being able to leave them out would make more sense.. perhaps some kind of directive to enable/disable the mode?
<br />
<br />it's not something the average programmer needs to worry about but for disassembling it would be nice to  represent all valid lines of code without resorting to hex/db/etc
<br />
<br />or maybe something like 
<br />
<br />LDA word($00FF)
<br />LDA byte($00FF)
<br />
<br />to force ZP or ABS
<br />
<br />
<br />(btw for those who missed it at the bottom of page 2 i updated the code <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 11, 2011 10:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">frantik wrote:</div><div class="quotecontent">the most intuitive way would be if it's something like LDA $00FF it uses absolute but if it's LDA $FF then use ZP.</div>
<br />Remember that unlike disassembled code, normal programs rarely (ideally, never) use explicit addresses, they use labels, so this is not an option.
<br />
<br />I'm not sure what the best solution is... Some assemblers use something like "LDA.W Variable" for this, don't they? It looks weird though, since with the 6502 this is really the only case where you'd ever want to force an addressing mode or the other. I would like this feature, but I have no idea about the best syntax.
<br />
<br />In my own programs I usually .db the opcode and then .dw the label (and put the actual instruction as a comment), or I add $800 to the address in order to use a mirror or ZP at $800-$8FF (this would definitely not be OK in a disassembly).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Fri Feb 11, 2011 11:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">frantik wrote:</div><div class="quotecontent">the most intuitive way would be if it's something like LDA $00FF it uses absolute but if it's LDA $FF then use ZP.</div><br />Remember that unlike disassembled code, normal programs rarely (ideally, never) use explicit addresses, they use labels, so this is not an option.<br /></div>
<br />
<br />yeah it would only work with explicit values not labels.. some kind of way to force word/byte seems like the next best option.. either 
<br />
<br />LDA.W  label 
<br />LDA word(label)
<br />
<br />seem to make the most sense.  i kinda like the 2nd one better myself

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Sat Feb 12, 2011 12:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you change behavior to treat $00ff to be read as ABS And $ff to be read as ZP, wouldn't that break existing compatibility with the assembler projects?
<br />
<br /> Why not a switch at the start of the source file, to tell the assembler how to treat addressing modes and labels/values. And there's already symbol mechanism for selecting high/low byte of a word or label, right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sat Feb 12, 2011 1:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Maybe an -optimizezp switch would help? or maybe something inside the assembler, assuming optimizing ZP instructions, and when it's not wanted/needed some thing like .nozpoptimize flag inside the assembler?
<br />
<br />
<br />Just my ideas, nice to see this being added! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Sat Feb 12, 2011 5:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />added initial support for fceudx data/code maps.. actually pretty cool <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />.. working on other changes too and will release the new version later

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Feb 12, 2011 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">loopy wrote:</div><div class="quotecontent">Tepples is right.  Whether you enter 6, $6, $06, $0006, or $000000006, asm6 sees it as just a number.  If it's &lt;256, a ZP instruction is emitted.  I'm open to the idea of having a forced absolute address.  Any suggestions on syntax?<br /><br />Until something is implemented, making a macro is an easy workaround (as Dwedit already suggested)</div>
<br />asm6 is trying to do code optimisation without the programmer's consent.  This is, for lack of better word, inappropriate.
<br />
<br />Let me make it crystal clear so there's no misunderstandings:
<br />
<br />* If someone types "LDA $00FF", the assembled result should be AD FF 00.
<br />* If someone types "LDA $FF", the assembled result should be A5 FF.
<br />* If someone types "label EQU $00FF" and "LDA label", the assembled result should be AD FF 00.
<br />* If someone types "label EQU $FF" and "LDA label", the assembled result should be A5 FF.
<br />
<br />This is how all classic Apple II assemblers (Merlin 8, Merlin 16, and ORCA/M) did it.  The reason it was done that way: assembly code, when written by a person, by nature should be KISS -- that is to say, the assembler should not try to do "smart things" without the programmer's prior consent.  Nobody is going to get me to bend on this one, period.  Assembly is a different beast than higher level languages.
<br />
<br />If you truly disagree with this, then there's a logical alternative: add a flag (proposals: -O (dash capital oh, a la cc/gcc), -fXXX (a la gcc), or -optimizezp (but please support -optimisezp for those of us who spell normally ;) )) which enables such optimisations.  Without the flag, it should behave like I described above.  And please be sure to explain in the README what the flag does/affects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Feb 12, 2011 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">loopy wrote:</div><div class="quotecontent">Tepples is right.  Whether you enter 6, $6, $06, $0006, or $000000006, asm6 sees it as just a number.  If it's &lt;256, a ZP instruction is emitted.  I'm open to the idea of having a forced absolute address.  Any suggestions on syntax?</div><br />A 65816-inspired suggestion:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda $00FF,d&nbsp; ; generates zero page<br />lda $00FF,b&nbsp; ; generates absolute</div><br />The reason for the names 'D' and 'B' becomes clear when you consider how these instructions operate on a 65816: address,d is an 8-bit offset from D (direct page base pointer, frozen at 0 on 6502; compare TAD instruction), and address,b is a 16-bit offset from B (data bank base pointer; compare PLB instruction). A directive would switch between ,d and ,b being the default for labels less than $100.<br /><br />And if you extend this 65816 analogy, setting the CPU type to 65816 would unlock another syntax:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda far $00FF&nbsp; ; generates long absolute</div><br />Thus 'jmp far' and 'jsr far' would become synonyms for 'jml' and 'jsl'.<br /><br />I don't like frantik's suggestion of .W, as it too closely resembles the syntax for <em>data</em> size, not <em>address</em> size, in 68K (MOVE.W) and ARM (LDRH, LDRB) assembly language.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">* If someone types "LDA $00FF", the assembled result should be AD FF 00.<br />* If someone types "LDA $FF", the assembled result should be A5 FF.<br />[...]<br />This is how all classic Apple II assemblers (Merlin 8, Merlin 16, and ORCA/M) did it.</div><br />As I understand it, the mini-assemblers in Integer BASIC, the enhanced IIe monitor, and the IIGS monitor acted this way, but only because they didn't support labels or decimal numbers. How would the assembler treat decimal labels (e.g. label EQU 120)?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">* If someone types "label EQU $00FF" and "LDA label", the assembled result should be AD FF 00.<br />* If someone types "label EQU $FF" and "LDA label", the assembled result should be A5 FF.</div>
<br />So you're choosing a data type for the label based on the length of the constant's literal value. That sort of resembles the distinction between near and far pointers on 8086. How would it treat computed labels (e.g. label EQU somebase + someoffset)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Feb 12, 2011 10:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">* If someone types "label EQU $00FF" and "LDA label", the assembled result should be AD FF 00.<br />* If someone types "label EQU $FF" and "LDA label", the assembled result should be A5 FF.</div>
<br />There are much better ways to declare variables than using EQU. I always use ENUM and DSB for that, so that rearranging them in the future doesn't require changing a shitload of EQUs. Also, I might want to access a certain variable using ZP addressing most of the time, but in a timed section of my code I might need to access it a bit slower. Your solution doesn't work for these cases.
<br />
<br />IMO, the addressing mode shouldn't be decided based on the declaration at all. Using EQU to declare variables is not considered a good practice anymore, and there might be the need to access the same variable using different addressing modes. This selection should be made on an instruction-per-instruction basis, and it should be possible to select a default behavior.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Sat Feb 12, 2011 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I don't like frantik's suggestion of .W, as it too closely resembles the syntax for <em>data</em> size, not <em>address</em> size, in 68K (MOVE.W) and ARM (LDRH, LDRB) assembly language.</div>
<br />
<br />tokumaru mentioned it :-p

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Feb 12, 2011 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Regarding how older assemblers like Merlin 8/16 and ORCA/M did it: they both differ in methodology, and it turns out my memory has failed me once again.  People aren't going to like the Merlin 8/16 method, believe me (and I don't approve of it either, but it's how it worked).  I'll document both for everyone's sake.
<br />
<br />Merlin 8/16 (quoting the manual):
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is no difference in syntax for zero page and absolute modes.  The assembler automatically uses zero page mode when appropriate.  Merlin 8/16 provides the ability to force non-zero page addressing.  The way to do this is to add anything except D in Merlin 8, or L in Merlin 16, to the end of the opcode.  Example:<br /><br />LDA $10 assembles as zero page (2 bytes: A5 10)<br /><br />while,<br /><br />LDA: $10 assembles as non-zero page (3 bytes: AD 10 00)<br /><br /><br />Also, in the indexed indirect modes, only a zero page expression is allowed, and the assembler will give an error message if the "expr" does not evaluate to a zero page address.<br /><br />...<br /><br />Merlin 8/16 will decide the legality of the addressing mode for any given opcode.</div>
<br />
<br />Be sure to note the colon in "LDA:" above.  You could literally say "LDAX $10" and accomplish the same thing.  When the manual says "add anything", they mean "add any character of your choice".  Yup, you read that correctly.  And please don't start aspie'ing over what the assembler would do with something like "LDA:" (is that a label or an opcode, etc...).  The simple answer is: Don't Do That(tm).
<br />
<br />I'll provide ORCA/M details later, I'll need to go down to the garage and dig through boxes to find the manual.  Expect me to edit this post once I find it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Sat Feb 12, 2011 3:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i generally agree with koitsu that if a label is defined as a word, it should be treated as a word...
<br />
<br />Label_00FF =  $00FF
<br />enum $A0
<br />   Label_00A0 .word 0000
<br />enum
<br />Label_00C0 EQU $00C0
<br />
<br />all of the above should be treated as non-ZP 
<br />
<br />
<br />if that's not possible, something like this makes sense to me, but it's not really asm friendly
<br />
<br />LDA word(label)
<br />LDA byte($00FF)
<br />
<br />or maybe just 
<br />
<br />LDA .word label 
<br />
<br />
<br />btw i might make sense to split the topic since most of the discussion is about asm6, no dasm6 <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Sat Feb 12, 2011 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">LDA word(label)<br />LDA byte($00FF) </div>
<br />
<br /> Ouu :3  I like that
<br />
<br /> Reminds me of lda high(label or address or whatever) or lda low( same ) in PCEAS (NESASM too, right?). Looks more natural than appending .b or.w which is more 68k style of assembler syntax.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Sun Feb 13, 2011 12:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />released <a href="http://swiftlytilting.com/downloads/dasm6-1.2.zip" class="postlink">v1.2</a> which adds support for FCEUDX code/data logs and  user definable labels. 
<br />
<br />i guess now i have to start looking into how to handle mappers :\
<br />
<br />
<br />to define labels use the format
<br />
<br />label = $0000
<br />
<br />comments starting with a semicolon and invalid lines are ignored.  Decimal (no modifier), hex ($) and binary (%) supported

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>