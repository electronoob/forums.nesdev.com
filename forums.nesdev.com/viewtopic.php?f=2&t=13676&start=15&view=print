<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES Programming Blog</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES Programming Blog</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13676">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13676</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Tue Dec 29, 2015 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">PRG bankswitching ?</div><br />Maybe with MMC3.<br /><br />And, I plan to add a DMC music/sfx example.<br /><br />And, I want to do a much better SMB3/Metroid bi-directional platformer with better physics.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Wed Dec 30, 2015 8:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mikejmoffitt wrote:</div><div class="quotecontent">Your blog made front-page on Hacker News!</div><br /><br /><a href="https://news.ycombinator.com/item?id=10803039" class="postlink">link</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Thu Jan 14, 2016 11:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mikejmoffitt wrote:</div><div class="quotecontent">Your blog made front-page on Hacker News!<br /><br />Do you have any plans on discussing PRG bankswitching techniques from a C context?</div><br /><br />Done.<br /><br /><!-- m --><a class="postlink" href="http://nesdoug.com/2016/01/15/24-mmc3-bank-switching-irqs/">http://nesdoug.com/2016/01/15/24-mmc3-b ... hing-irqs/</a><!-- m --><br /><br /><br />Any more requests?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jan 15, 2016 5:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are some problems with the example:<br /><br />- You should save/restore registers in your IRQ handler. But in fact when writing IRQ handlers in C, this is not enough, because the C runtime library's (fairly large) state should also be saved. In your example you got lucky (without &quot;-Oi&quot; switch the program doesn't work). In addition some of the runtime library routines are not reentrant. See <!-- m --><a class="postlink" href="http://www.cc65.org/faq.php#IntHandlers">http://www.cc65.org/faq.php#IntHandlers</a><!-- m --><br /><br />- Your example is placing the runtime library code in one of the switchable banks (&quot;CODE&quot;). If any code is placed in one of the other switchable banks (e.g. &quot;CODE1&quot;), and the compiler emits a call to the runtime library routines, you'll get a crash. It'd be better to place the runtime library stuff in the fixed bank, which you can do by simply calling the fixed segment &quot;CODE&quot;. (NOTE: In this case the &quot;-Oi&quot; switch and the simplicity of the example causes there to be no runtime library code emitted in the ROM, but this is not something that can be relied on.)<br /><br />These are kind of annoying problems, because your program might appear to work fine without taking them into consideration, and then stop working one day when the code is modified. Thus, careful testing is needed to make sure that everything works as it should.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Fri Jan 15, 2016 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the response. I hadn't considered the C runtime library being in a non-fixed bank. I'll have to change the example code.<br /><br />So far, I've only made small technical demos with MMC3. So, I haven't run into any errors...that will certainly happen with more complex code.<br /><br />Oh, and I see from the link you posted...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I do usually suggest to think about writing the interrupt handler completely in assembler</div>.<br /><br />I was hoping to write the IRQ code in C, so people could read it more easily. But, I guess it should probably be written in ASM, for stability. Otherwise, I would have to copy all the zeropage C variables, at the start of the IRQ and replace them at the end of the IRQ.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jan 15, 2016 9:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I was hoping to write the IRQ code in C, so people could read it more easily. But, I guess it should probably be written in ASM, for stability. Otherwise, I would have to copy all the zeropage C variables, at the start of the IRQ and replace them at the end of the IRQ.</div><br />Yeah. An additional problem with IRQ handlers written in C is that you can't rely on the timing of the C code very much.<br /><br />...<br /><br />(Random idea: It would be possible to provide a sort of a generic IRQ handler (written in assembly) for the common tasks like setting the scroll and switching the CHR bank. Then one could simply set some variables e.g. scroll and the new CHR bank from C code, and maybe some bitflags to indicate what values were set. Assembly code would then pick up the values and take care of the rest. Might be a reasonable idea for a game engine, but maybe not so good for a tutorial.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Fri Jan 15, 2016 11:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It occurred to me, that all of my example codes in my tutorial will have problems if the logic runs longer than 1 frame...Here's what they all do...<br /><br />BIG MAIN LOOP {<br />  -wait for NMI-flag<br />  -then update the PPU<br />  -then set the scroll<br />  -then logic<br />}<br /><br />NMI {<br /> -set NMI-flag<br />}<br /><br />This runs fine for short games / demos. And, allowed me to write nearly everything in C.<br /><br />but, if the logic ran too long, it might be outside of the next V-blank by the time it starts updating the PPU and setting the scroll, etc. --misaligning the screen every time lag happens.<br /><br />How would you guys address this problem? Would you have the PPU update, Sprite update, set scroll stuff in the NMI handler? And maybe music (because laggy music is annoying).<br /><br />What if I put a test for the NMI-flag at the end of the MAIN() loop, and if it has already been set, reset it to zero, so that it waits for yet another NMI to occur before. The screen will never misalign, but lag would be more frequent (maybe.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 15, 2016 1:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />if &quot;set NMI flag&quot; means you increment a counter, and &quot;wait for NMI flag&quot; means you read the counter and spin until it changes, then there should be no problem with scroll corruption or anything; a long frame should just result in slowdown.<br /><br />My own recommendation is:<br /><br />1. Put all PPU updates in NMI handler.<br />2. Guarantee that the PPU updates can't run longer than vblank.<br />3. Create a variable that controls whether the PPU update happens (i.e. &quot;update ready&quot;). Item 1 should only run when a new set of updates are ready.<br />4. Run music in NMI handler too, this means that music is not subject to slowdown.<br /><br />If you have a scroll split, or other raster effect timings to make, ideally these should also be done in the NMI handler, or in an IRQ that's set up by the NMI handler. Basically the idea is that the NMI has reliable timing (at least until it gets to the music), and the main thread does not. The main thread prepares a frame worth of updates (taking as long as it needs), then uses that variable (item 3) to signal the NMI thread to send it to the PPU.<br /><br />I would even go as far as to leave the NMI on always, so that music can play smoothly during screen transitions, etc. Because NMI PPU updates only happen on request, you can do stuff like load nametables in the main thread safely. (Also, only ever turn rendering on or off in the NMI handler, so you never get a partial screen.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Jan 24, 2016 12:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I added a tutorial on 'Importing a MIDI file to Famitracker'...because I still can't find much information on this subject, I made up my own technique. My method is very specific to the program REAPER that I prefer to use. If anyone has a better method, please let me know - or any specifics on how to do this with any other software, thanks.<br /><br /><!-- m --><a class="postlink" href="http://nesdoug.com/2016/01/24/25-importing-a-midi-to-famitracker/">http://nesdoug.com/2016/01/24/25-import ... mitracker/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bavi_H</b> [ Sun Jan 31, 2016 1:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: FamiTracker 0.4.2's MIDI import</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I added a tutorial on 'Importing a MIDI file to Famitracker' [...] If anyone has a better method, please let me know - or any specifics on how to do this with any other software, thanks.</div>When you record form a keyboard, I agree it's a good idea to quantize the notes. I also agree keeping the MIDI channels monophonic is a requirement to get meaningful results in the FamiTracker import.<br /><br />I don't use Reaper, so I'm not sure how Reaper's &quot;project tempo&quot; and &quot;MIDI track tempo&quot; interact. Can you tell more about why you set the project tempo to 12 BPM before recording, then later set the project tempo to 100 BPM and the MIDI track tempo to 125 BPM? In my import tests, I didn't need to modify the MIDI file tempo, but I did modify the MIDI file resolution (MIDI ticks per quarter note).<br /><br />I took a look at FamiTracker 0.4.2's MIDI import source code. There are some flaws and limitations in the MIDI import, so there's never really going to be an easy way to use it. Here are some explanations of the flaws and limitations and alternative ideas I've come up to work around them until a better MIDI import process is found.<br /><br /><span style="font-size: 120%; line-height: normal"><strong>Terminology notes</strong></span><br /><br />MIDI file ticks and module ticks are different concepts. For clarity, I call them &quot;MIDI ticks&quot; and &quot;module ticks&quot;.<br /><br /><ul>In a MIDI file, the MIDI tick is the smallest time unit you can use to specify the position of an event. The MIDI file resolution is the number of MIDI ticks per quarter note the MIDI file uses, for example 240 MIDI ticks per quarter note or 960 MIDI ticks per quarter note or other values.<br /><br />In a module file, the smallest time unit you can enter notes with is a row, but effects like arpeggios work on smaller units of module ticks. The module Speed value sets the size of a row in module ticks.</ul><br />Also, MIDI file tempo (quarter notes per minute) and module Tempo (double-dozen module ticks per minute) are different concepts.<br /><br /><ul>When the module Speed value is the default 6 and a &quot;beat&quot; is 4 rows, then the module Tempo value happens to be in beats per minute. Otherwise, the module Tempo value is really in double-dozen module ticks per minute, and you have to calculate what module Tempo value to set to get the &quot;real tempo&quot; you want. Additionally, the FamiTracker status bar shows a &quot;real tempo&quot; value in beats per minute by using the &quot;Row highlight, 1st&quot; value in the toolbar as the size of a beat in rows.</ul><br /><span style="font-size: 120%; line-height: normal"><strong>FamiTracker 0.4.2 MIDI import flaws, limitations, and workarounds</strong></span><br /><br />In the MIDI protocol, there are two alternative ways to specify the end of a note: use a Note Off event or use a Note On event with velocity zero. Unfortunately, FamiTracker's MIDI import incorrectly considers a Note On event with velocity zero as a normal Note On event.<br /><br /><ul>If you are using a MIDI editor that specifies the end of notes using a Note On event with velocity zero, here is one way to work around that. Drag the end of each note up to the beginning of the next note, so there are no gaps between the notes. During the import, the end of the each note will be converted as a new note, but then get overwritten by the beginning of the next note.</ul><br />In every MIDI file track, FamiTracker removes any silent part before the first note. In other words, each track is shifted so its first note begins at row 0.<br /><br /><ul>If your MIDI file tracks have first notes that begin at different times, try one of these options:<br /><br /><ul><li>Convert the MIDI file to format 0. This creates a MIDI file with everything in one track.<br /><br /><li>In each track that has a delayed start, put a dummy note so that all tracks have a note at the same starting point. After the import, erase the dummy notes in the module.</li></ul></li></ul><br />FamiTracker converts a note's position from MIDI ticks into module rows by considering each module row as 24 MIDI ticks in size.<br /><br /><ul>One way to control the MIDI note size to module row size conversion is to use a MIDI editor that lets you change the MIDI file resolution (MIDI ticks per quarter note). As a typical suggestion, if you want a quarter note to be 4 rows, you would change the MIDI file resolution to 96 MIDI ticks per quarter note.</ul><br />FamiTracker incorrectly sets the number of frames in the song to 1 less frame than needed.<br /><br /><ul>After the import, increase the Frames value by 1 to show the last imported frame.</ul><br />FamiTracker sets the module Speed and Tempo to strange values.<br /><br /><ul>If you set the MIDI file quarter note to be 4 rows, then I recommend changing the Speed to 6 and changing the Tempo to the same tempo value the MIDI file uses (in quarter notes per minute).</ul><br />FamiTracker creates a strange instrument.<br /><br /><ul>Delete the strange instrument and create new instruments for each channel.</ul><br />FamiTracker ignores Note Off events in the MIDI file.<br /><br /><ul>Depending on the final instrument you use, each note will continue sounding up to the start of the next note. If you don't want that, you'll need to manually create note cuts or releases, or use an instrument with a volume that fades out.</ul><br /><span style="font-size: 120%; line-height: normal"><strong>MIDI editor Sekaiju</strong></span><br /><br /><a href="http://openmidiproject.osdn.jp/Sekaiju_en.html" class="postlink">Sekaiju</a> is a MIDI editor for Windows you can use to convert a MIDI file to format 0 and change its resolution.<br /><br />Sekaiju defaults to Japanese. To change to English:<br /><br /><ul>1. Go to the (S) menu and choose Language.<br />2. Set &quot;User Interface&quot; to English and &quot;Text Encoding&quot; to &quot;1252-Western Latin-1 [recommended]&quot;. (Or if you know you want to interpret the text in a MIDI file using another encoding, choose the encoding you want.)<br />3. Restart Sekaiju.</ul><br />After you open a MIDI file in Sekaiju, here's how to convert the format and resolution:<br /><br /><ul>1. Go to the File menu and choose Property.<br />2. In the SMF Format section, choose SMF Format 0.<br />3. In the Time Mode Resolution section, &quot;TPQN Base (recommended)&quot; should already be selected. My default suggestion is to change the Resolution value to 96 Ticks / Quarter Note.</ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>russellsprouts</b> [ Mon Feb 01, 2016 12:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the tutorials, Doug. I'm developing in assembly and on Linux (which requires liberal use of Wine to run a lot of the tools), but your sample code was exactly what I needed to get started. I ended up only using your HelloWorld example as a base for my code, but I've read the whole series and it's been very helpful. Keep up the good work!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Feb 01, 2016 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can you tell more about why you set the project tempo to 12 BPM before recording, then later set the project tempo to 100 BPM and the MIDI track tempo to 125 BPM?</div><br /><br />I'm still working on ways to import MIDI to Famitracker. My first tests, with BPM at 120 in Reaper, import with WAY too many ticks per note. So, I did a few tests, recording with BPM (in Reaper) set to 12 (while I play the notes at 120 BPM) gets it very close to what I want. With 5 ticks per note in Famitracker. Changing the project BPM to 100 and then forcing the MIDI track to 125 (125/100 = 5/4)...imports with 4 ticks per note.<br /><br />Obviously, this isn't ideal, and needa refined.<br /><br />The famitracker file will still need LOTS of editing (adding note ends, volume column, etc).<br /><br />Thanks for the input, Bavi_H.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Feb 01, 2016 2:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@russellsprouts<br /><br />Thanks for the positive comments. BTW, there's an error in my button pressing code, I'll update as soon as I get a chance (maybe next week). Sorry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bavi_H</b> [ Mon Feb 01, 2016 7:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">My first tests, with BPM at 120 in Reaper, import with WAY too many ticks per note. So, I did a few tests, recording with BPM (in Reaper) set to 12 (while I play the notes at 120 BPM) gets it very close to what I want. With 5 ticks per note in Famitracker. Changing the project BPM to 100 and then forcing the MIDI track to 125 (125/100 = 5/4)...imports with 4 ticks per note.</div><br />To make sure we're talking about the same thing, perhaps you mean &quot;rows&quot; instead of &quot;ticks&quot;? (That is, your 1st test yielded many rows per note, 2nd test 5 rows per note, and 3rd test 4 rows per note?) In FamiTracker and other trackers, rows are what you see on the screen -- each line is a row. Ticks are sub-units of a row that you hear when you use arpeggios and other effects commands in the last three character columns of each channel. (In FamiTracker, go to the Help menu and choose &quot;Effect table&quot; to see the effects commands.)<br /><br />[Note: Everywhere else in my comments here, I'm saying &quot;module ticks&quot; to mean ticks in FamiTracker and &quot;MIDI ticks&quot; to mean ticks in a MIDI file, because these two kinds of ticks do not correspond to each other.]<br /><br />In your screenshot of Reaper's &quot;MIDI item properties&quot; box, it says &quot;Ticks per quarter note: 960&quot;. This suggests Reaper is making a MIDI file with 960 MIDI ticks per quarter note, so that would mean a quarter note in the MIDI file would import into FamiTracker as 40 rows.<br /><br />I can understand setting the tempo to 12 BPM, pressing the record button, then playing along with a 120 BPM metronome. In that case, you're basically recording notes 1/10 of the size -- 10 &quot;played&quot; quarter notes (96 MIDI ticks each) fit into 1 &quot;Reaper&quot; quarter note (960 MIDI ticks). But I think that should import into FamiTracker as 4 rows per &quot;played&quot; quarter note. So I don't understand why it imported as 5 rows per &quot;played&quot; quarter note for you.<br /><br />However, instead of playing around with tempos further trying to understand that, it might be easier to change the MIDI ticks per quarter note. I took a look at the Reaper manual, and it looks like you can change MIDI ticks per quarter note as follows:<br /><br />1. Go to the Options menu and choose Preferences.<br />2. Go to the category Media and the sub-category MIDI.<br />3. Change the value for &quot;Ticks per quarter note for new MIDI items&quot;.<br /><br />To make a quarter note in the MIDI file become 4 rows in FamiTracker, set Reaper to use 96 MIDI ticks per quarter note.<br /><br />If you want a different relationship between MIDI quarter notes and FamiTracker rows, figure out the correct MIDI ticks per quarter note to use based on this fact: during the import, FamiTracker considers each row to be 24 MIDI ticks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Feb 01, 2016 7:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks again. I'll give it a try.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>