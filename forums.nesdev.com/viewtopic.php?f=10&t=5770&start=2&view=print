<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Questions about scrolling and sprites on (S)NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Questions about scrolling and sprites on (S)NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=5770">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=5770</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 25, 2009 10:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Questions about scrolling and sprites on (S)NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AndiNo wrote:</div><div class="quotecontent">Do I have to "render" multiple sprites to get one big image on the screen? That's what I currently do, but it's somewhat strange.</div><br />This is how it happens. It may seem strange if you are doing it in a hardcoded way (manually setting up all the sprites of a particular object), but usually programmers implement a sprite system. For each possible frame of a character there is a list of the necessary sprites to draw it. It's just a series of .db or .dw statements that represent things like "this frame needs 4 sprites; the first one is at coordinates (4, 5) and uses tile $78; the second is at coordinates (12, <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" /> and uses tile $79 (...)". The coordinates are usually relative to the position of the object/character being drawn. This means that the sprite system can draw any frame of any character if you point it to the correct list.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What I've read up to now is still a bit unclear to me, however it sounded like I have to substitute rows of tiles on the screen while moving/scrolling the map. I managed to get the background scrolling, but of course it always wrapped at the end of the screen. What is the proper way to do this?</div>
<br />So you noticed it wraps around, right? All you have to do is redraw that part that wraps, before it wraps. What you have to do is constantly overwrite the parts that are off screen with new data before they are back on screen (due to wrapping). Players won't notice the background is wrapping, because you drew new tiles over the old ones.
<br />
<br />When scrolling horizontally you have to draw columns of tiles, and when scrolling vertically you have to draw rows of tiles. The size of the drawing area that is off screen makes a difference. The NES has only 2 built in Name Tables, which you can arrange as a 512x240 (vertical mirroring) or 256x480 (horizontal mirroring) area, so it's hard to scroll vertically and horizontally without some visible glitches (like Bregalad said), because you always lack an off screen area either vertically or horizontally.
<br />
<br />There are ways to avoid these glitches, even though many games just make them appear at the top and/or bottom 8 scanlines in hopes that TVs will not display those scanlines (which is not always the case). some very famous games like SMB3 or Kirby have the glitches very visible at the sides. The SNES has a drawing area big enough for this not to be a problem there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AndiNo</b> [ Wed Nov 25, 2009 2:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, that were some really helpful answers!
<br />I will try to implement these metasprites. From there animations shouldn't be too hard to do.
<br />I will have to take a more detailed look at scrolling though when I have the time. Your posts were good hints as to what I have to look at.
<br />If I have any questions I will come back... I didn't expect the "homebrew" scene to be so active <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 25, 2009 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AndiNo wrote:</div><div class="quotecontent">I will try to implement these metasprites. From there animations shouldn't be too hard to do.</div><br />You can think of animations as collections of metasprites, much like metasprites are collections of sprites. For animations, you have to specify the duration of each frame, and some other details such as if the animation loops or stays in the last frame when it finishes, things like that, but depending on the needs of your game of course.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I will have to take a more detailed look at scrolling though when I have the time.</div>
<br />It helps if you create a "camera" object that is not much different from other game objects. It has a position within the level and dimensions, like any regular object. By keeping track of how much it moves, you can tell when you need a new column or row of tiles. Using the direction of that movement and the dimensions of the camera you can tell where to read the tiles from (in the level map) and where to write them to (in VRAM).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AndiNo</b> [ Thu Nov 26, 2009 12:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for your reply! However I have to say I already have some experience with "2D side scrollers". I have already implemented such a game engine in C++ with SDL on the computer, so I just have to get used to this stuff again, and of course I have to understand how the SNES works (in those parts).
<br />I will do some research and come back here if there is something I don't understand. Thanks for your help so far!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AndiNo</b> [ Fri Nov 27, 2009 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Back again! I also have some questions at hand and hope you don't mind giving me advice again <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />1. My game is coming along nicely, however I've run into some hardware-specific problems. After expanding my code I now experience quite some lagging and flickering of my sprites. I assume this is due too much code being executed (execution is taking too long). Is there anything I can do about this (except reducing running code of course) ?
<br />
<br />2. From what I understood the system runs constantly at 60 FPS, so I have a set amount of time per frame. Is that the time between the vertical blanks? Concerning the code being executed, if it takes longer than the given time I have per frame, does the SNES just draw the current status of the game while the code is still performing in the background?
<br />
<br />3. Whenever a gameobject is destroyed, its sprite remains at the last given position on the screen. Thus I reset all SNES-sprites at the beginning of each frame so they are not visible anymore. Is there any other way to do that? And what can I do to make a specific sprite really invisible (not just giving them position 0,0)?
<br />
<br />Thanks in advance again! I'm looking forward to getting a small game done! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 27, 2009 6:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I understand that you are familiar with how games work, and your biggest problem is implementing what you already know in an old gaming console. Having made that transition myself I do believe I can help you out a bit.
<br />
<br />I'll try to answer what I can, but since I don't know much about the SNES itself (it's not among the consoles I have programmed for), I'll leave anything too specific for other people to answer.
<br />
<br /><div class="quotetitle">AndiNo wrote:</div><div class="quotecontent">After expanding my code I now experience quite some lagging and flickering of my sprites. I assume this is due too much code being executed (execution is taking too long).</div><br />Hard to know without knowing more about how you coded it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is that the time between the vertical blanks?</div><br />Yeah, usually you use the time between vertical blanks to calculate all the game logic and generate the data you need to update the video, and vertical blank is the time when you do all the video updates, using the data you calculated earlier.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Concerning the code being executed, if it takes longer than the given time I have per frame, does the SNES just draw the current status of the game while the code is still performing in the background?</div><br />It depends on how you code the game. Your program should be able to tell when a frame wasn't enough time to calculate everything, in which case you don't perform video updates, or else you'd get a corrupt frame (this might be what's causing the problem you described before).<br /><br />When playing games you can often see that when there are too many objects on screen at once the games lag. Usually, you don't do any video updates when a lag frame is detected, because you don't want to use partially processed data or anything like that, so you just keep calculating the game logic until it's done, and hopefully by the next VBlank everything will be ready. Because of this players get the impression that the things are in "slow motion".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Whenever a gameobject is destroyed, its sprite remains at the last given position on the screen. Thus I reset all SNES-sprites at the beginning of each frame so they are not visible anymore. Is there any other way to do that?</div><br />Why don't you make the object's destructor place the sprites it was using off screen? In most NES games, the sprites are usually all reset (put off screen) to be reused by the objects as necessary every frame, but this is partially done because of sprite cycling as well, so I'm not sure if this is common on SNES games. Genesis/MD games seem to do it like in the NES though.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And what can I do to make a specific sprite really invisible (not just giving them position 0,0)?</div>
<br />What's so bad about placing the sprites off screen? I don't know if the SNES has any means of making individual sprites invisible, but none of the other consoles I know do. The closest thing to actually disabling sprites I've already seen is in the video chip used by the MSX (and a shitload of other machines): if you put one sprite at a certain Y coordinate, all the sprites after that are ignored. This is useful, but doesn't allow you disable individual sprites.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Nov 28, 2009 3:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You should probably separate software sprites from hardware sprites (I don't know if you arlready do).
<br />OAM memory ($200-$2ff) should be cleared at the start of every frame so all sprites are below the screen (Y position $f0).
<br />Then whenever you need to show a metasprite, call a routine that mazes it into memory for you, by adding relative H/V positions to the main sprite position and coping other attributes to OAM. Having a system that allows to switch the palette and flip the sprite at least horizontally is a nice plus. I could share my OAM engine if you want.
<br />
<br />For the SNES I'm pretty sure it's almost exactly the same, exept you have 2 OAM buffers, and that X/Y pos have more than 8 bits (so you can scroll them correctly at last). You'd still want to place a sprite below the screen to hide it.
<br />
<br />And BTW the C64 has a way to actually disable sprites, and you usually have to play tricks with it to do OAM cycling to be able to show more than 8 sprites on the screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AndiNo</b> [ Sat Nov 28, 2009 4:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I can write down what things I do in every frame, maybe that would make things a bit clearer. Besides that I have to say I'm not programming in assembler but in C (using the SNES SDK). I've read many posts which state that C is subordinate to assembler on the SNES, do you think that could be the (main) reason for my game running slowly?
<br />btw: Is there a way to measure the time left before the vblank happens? And I read you can set the SNES clock from 2.68 to 3.xx MHz. I tried that as I guessed it could possibly make the CPU faster, but the flickering was worse - maybe I did something wrong or am assuming wrong things.
<br />
<br />What can I do if ALL frames take more than one vblank to be completed? I changed my program so that it waits for vblank before drawing stuff and the flickering was gone, however it runs slow now (as you said).
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Why don't you make the object's destructor place the sprites it was using off screen?</div>I don't because I currently only save HOW MANY sprites are in use, not where. I would have to implement some intelligence that assigns sprite numbers to objects, however that seems to be a bit complicated. I will look into that.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">What's so bad about placing the sprites off screen?</div>Nothing, but I should have asked slightly different, as Bregalad wrote what I wanted to know <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> So putting sprites at a given position makes the SNES not render them is what I understand.
<br />
<br />@Bregalad
<br />Thanks for your proposal but I think that won't be helpful to me as I'm using C, not assembler. However I implemented metasprites and wanted to test them when the flickering problem got in my way <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Nov 28, 2009 10:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AndiNo wrote:</div><div class="quotecontent">I can write down what things I do in every frame, maybe that would make things a bit clearer. Besides that I have to say I'm not programming in assembler but in C (using the SNES SDK). I've read many posts which state that C is subordinate to assembler on the SNES, do you think that could be the (main) reason for my game running slowly?</div><br />C isn't necessarily slow. Compilers are slow because there isn't much of a market for compilers targeting 6502 family ISA because microcontrollers are either PIC or ARM nowadays. Also, use of data types too big for the CPU and operations that the CPU doesn't support natively is slow, such as multiplication, division, data-dependent rotation, or array-of-structure memory organization. C just hides that for you by making everything look like a PDP-11 from the programmer's perspective.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">btw: Is there a way to measure the time left before the vblank happens?</div><br />The Super NES has a scanline counter, doesn't it?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And I read you can set the SNES clock from 2.68 to 3.xx MHz. I tried that as I guessed it could possibly make the CPU faster, but the flickering was worse</div><br />A lot of games OC the Super NES CPU to 3.6 MHz. This became more common as the faster ROMs needed for 3.6 MHz operation dropped in price.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What can I do if ALL frames take more than one vblank to be completed?</div><br />You could always go the Micronics route of reducing the frame rate to 30 or 20 fps. A lot of Game Boy monochrome games like Pokemon ran at 30 fps to compensate for the original model's slow LCD, and it still doesn't look <em>that</em> bad on a Super Game Boy.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't because I currently only save HOW MANY sprites are in use, not where.</div><br />If the first 16 sprites are in use, and this number drops to 13, kill 13 through 15. It should be simpler on the Super NES than on the NES because you don't have to worry as much about cycling, sprite 0 hit detection, or huge metasprites.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">What's so bad about placing the sprites off screen?</div>Nothing, but I should have asked slightly different, as Bregalad wrote what I wanted to know <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> So putting sprites at a given position makes the SNES not render them is what I understand.</div>
<br />As long as they're <em>vertically</em> offscreen. Otherwise, they might contribute to the 100% overdraw limit per scanline.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 28, 2009 10:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AndiNo wrote:</div><div class="quotecontent">I'm not programming in assembler but in C</div><br />This makes a big difference I guess. C programs are never as fast as hand-coded assembly on these old processors. I wouldn't be surprised if a complex game with scrolling, many sprites and so on couldn't handle all its logic in a single frame.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">btw: Is there a way to measure the time left before the vblank happens?</div><br />In the NES we usually change something on the display, such as the monochrome bit, at the exact moment the frame calculations are over. I'm sure the SNES has something you can change mid-frame for a visual indication of how much time you have left. Of course that if your logic takes over one full frame, you'll see one frame without the visual indication and the next one will have it, because the first frame doesn't have any free time at all.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What can I do if ALL frames take more than one vblank to be completed?</div><br />If you don't want to code it in assembly or optimize the hell out of it, embrace your new frame rate of 30 frames per second. It will not look as smooth, but if you move your objects twice as much they will appear to be moving at the same speed as before.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't because I currently only save HOW MANY sprites are in use, not where.</div><br />Well, then I don't know how your sprite system works. You have to know which sprites you used if you want to move them, animate them and so on, don't you?<br /><br />If the sprite remains after an object is destroyed this means the sprite was somehow hardwired to that particular object, and to me this means there must be some variable responsible for this link. Personally I prefer to not hardcode sprites, like I explain below.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I would have to implement some intelligence that assigns sprite numbers to objects, however that seems to be a bit complicated. I will look into that.</div>
<br />Most games I studied (on the NES and Genesis/MD) completely reassign the sprites every frame. AFAIK, this is the most "professional" way to handle sprites.
<br />
<br />In my (NES) game, every frame I loop through all the active objects so that each on can do their thing (move, shoot, whatever). When they are done, they draw themselves by calling the sprite rendering routine. This routine gets a pointer to the meta-sprite to use from the object's RAM (which could be anything the object put there, but usually the character animation routine maintains this value so that it points to the current animation frame) and uses the object's position to process the meta-sprite information and generate all the individual sprites necessary.
<br />
<br />After all hardware sprites have been written, I put the remaining ones (the ones I didn't use) off screen, so that they are not displayed.
<br />
<br />With this technique the objects don't know which hardware sprites were used, but they don't have to, because they are completely redrawn every frame. Also, once they are destroyed, they simply won't call the drawing routine anymore and will be 100% gone.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sat Nov 28, 2009 11:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />About CPU Speed and SNES. The SNES CPU generally runs at 3.58mhz on Internal Operation Cycles like Register access. On cycles that access external memory like ROM, RAM, or SNES registers the speed of the bus changes. There is no way to make RAM access faster but if you use FastROM and enable it with the appropriate register, Banks above $80 will be accessed at FastROM speed giving some speed boost.
<br />
<br />But it sounds to me like you need to figure out what all you have going on and see where you are spending too much time. FastROM can give you a small boost but you can't depend on that. Also contrary to what people may think or tell you, the SNES is pretty much never going to run 3.58mhz because your game will have to access memory that takes more cycles so your CPU reguardless of FastROM will be running between 2.68mhz and 3.58mhz and with usage of FastROM the average speed just gets to be a bit higher which is nice.
<br />
<br />About sprites, I would agree that you should keep a counter of how many sprites you are using and when the number from the last frame to the new frame goes down you should set the range of previously used but now unused sprites to have a Y position below the screen. It's fast and to the point making the sprites out of the way. Don't set sprites to 0, it's better practice to set them below the screen. NTSC SNES normally runs for 224 lines of active video though to be safe you could always just set all the sprites to Y = 240.
<br />
<br />If you want to always run at 30FPS you will need your NMI handler to count how many Vertical Blanks have happened since the previous video frame update. When two have happened it would be time to reset the counter and quickly update the video in the VBLANK time remaining. This would ensure you maintain 30FPS at maximum and reduce the slowdown effect of too much processing. 
<br />
<br />About flickering, this could happen if you are out of time in VBLANK. If you run out the remaining transfers will be ignored or corrupted. You need to be very efficient with your VBLANK time. Flickering normally will only happen if you have too many sprites on the same scanline and you are cycling the sprite order. If you are not then sprites over 34 (total 8x8 units) simply aren't drawn. SNES has registers that let you change sprite priority without changing the software order you put sprites together with. But if you layer sprites for a reason you will need to do it in software or check things atleast.
<br />
<br />As far as what code you are executing you should make sure that VBLANK time is first spent doing any video updates. Nothing should come before this. It's the only time you get to change the video frame. If your processing isn't complete yet you just simply don't update the video at all and resume processing and hopefully you will be ready next time around. Other than that you just need to make choices about how you process each game frame. You only have whatever VBLANK time remains plus all active scanlines' time (minus WRAM refresh and HDMA if using it) to process all your game logic and prepare the video update for the next VBLANK. Perhaps something in your design just eats up way too much time.
<br />
<br />tokumaru, I'm not so sure that C is the problem for his speed. It may be partly responsible but even C code can be wasteful of cpu time due to how it is written not just because it is C and not ASM. Going 30FPS certainly is an easy way to gain alot more processing time though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AndiNo</b> [ Sat Nov 28, 2009 12:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Big thanks guys, your posts make for a VERY interesting read! I already gained some new insight in the whole SNES-tech. I will revise my code to find the slowdowns, I guess I assumed too much power when writing the code (coding for todays PCs has its impact on me <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> ).
<br />Then only one thing remains: Could you (like tepples partially did) write a short summary of which operations are costly CPU-time-wise? i.e. is comparing two numbers more expensive than adding etc... I think this would prove to be a help when revising the code - of course only if it makes a difference and not only my code is written badly <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 28, 2009 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AndiNo wrote:</div><div class="quotecontent">Could you (like tepples partially did) write a short summary of which operations are costly CPU-time-wise?</div>
<br />The only individual thing I can think of that tepples didn't mention is floating-point numbers. Don't use them, stick to integers and use fixed-point if you really need fractional values.
<br />
<br />I guess it's obvious that most of the time is spent in loops, so you should try to optimize/avoid those as much as possible. If you are modifying only a few elements of an array, modify each one explicitly instead of using a loop.
<br />
<br />Also, don't bother clearing values that will be overwritten (like I mentioned I do in my sprite system, I just place off screen the sprites that weren't used, instead of clearing them all before rendering any sprites).
<br />
<br />I'll let you know if I think of anything else.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sat Nov 28, 2009 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I can't think of anything else to avoid other than the usual don't be wasteful. Every bit of code you do will take time and when that code is executed in the game loop you need to be as quick as possible while still getting all the tasks done. Outside of the game loop you don't need to worry as much. But you should really think about how many operations are involved in whatever C code you write as with C it's very easy to write a small amount of code that results in a lot of operations taking alot of cpu time.
<br />
<br />But I think that a game, even an action game, is possible to program in C for SNES and get good results without slowdown if you are efficient. But that's just my opinion as I have never personally written a SNES game in C but I'd bet others have.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Nov 28, 2009 2:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I think it is possible to merge C and assembly ? If so it should be possible to write speed dependant parts (VRAM updates, controller reading, communication with SPC, sprite mazing, ...) in assembly and the game engine in C.
<br />
<br />Oh and be sure to use shifts instead of multiplications when you can.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>