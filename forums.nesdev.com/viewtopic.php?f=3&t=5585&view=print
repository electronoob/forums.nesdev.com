<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Speeding up my graphics routine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Speeding up my graphics routine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=5585">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=5585</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Undubbed</b> [ Tue Sep 22, 2009 9:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Speeding up my graphics routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems that the demo mode for donkey does in fact come up but my graphics routine is apparently super super slow so it takes like a minute to get up.My graphics are probably like around 5 frames a second going by how slow donkey kong is moving.
<br />
<br />Don't know how I'm gonna make it faster but hey I've gotten this far eh.
<br />
<br />GlowCode, a profiler that I got is telling me that my graphics function is taking up 97% of the program time soooooo I think I know what to focus on here. 
<br />
<br />And 98% of my UpdateGraphics function is taken from within the function itself so it seems like the main culprit is stretch_blit(). Though I'm pretty sure the real problem is in my UpdateBackGround() function and how the Buffer BITMAP gets blitted.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void Video::UpdateGraphics&#40;&#41; &#123;<br /><br />&nbsp; &nbsp;UpdateBackGround&#40;&#41;; // Buffer comes from this function<br /><br />// just to show how many times this function got called<br />&nbsp; &nbsp;textprintf_centre_ex&#40;Buffer, font, 75, 0, makecol&#40;100,100,100&#41;, -1, &quot;Update Graphics: %i&quot;, count&#41;; <br />&nbsp; &nbsp;stretch_blit&#40;Buffer, screen, 0, 0, Buffer-&gt;w, Buffer-&gt;h, 0, 0, SCREEN_W, SCREEN_H&#41;;<br />&nbsp; &nbsp;count++;<br /><br />&#125;</div><br /><br />now here's my background graphics routine. Now don't laugh, this just might be the most newbie, unoptimized crap you've ever seen....<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void Video::UpdateBackGround&#40;&#41; &#123;<br /><br />&nbsp; &nbsp;<br />&nbsp; &nbsp;int NTval = 0;&nbsp; &nbsp;// The value of the current NameTable address<br />&nbsp; &nbsp;int PTaddr = 0; // Pattern table address<br />&nbsp; &nbsp;int ATaddr = 0; // The Attribute Table address<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;int PalleteVal = 0;<br />&nbsp; &nbsp;int COLOR = 0;&nbsp; &nbsp;// Current color of the pixel<br />&nbsp; &nbsp;int y = 0; // For use with the PutPixel function<br /><br />&nbsp; &nbsp;// For blitting the Pattern Table onto the Background buffer<br />&nbsp; &nbsp;int TileX = 0;<br />&nbsp; &nbsp;int TileY = 0;<br /><br />&nbsp; &nbsp;int NTstart = NameTableAddr;<br />&nbsp; &nbsp;int NTend = NameTableAddr + 0x3C0;<br /><br />&nbsp; &nbsp;int bit = 7; // used for getting the first 2 bits of Color Index<br /><br /><br />&nbsp; &nbsp;&nbsp; &nbsp;// MAKING OF THE BACKGROUND<br />&nbsp; &nbsp;&nbsp; &nbsp;// 1&#41; Find the current Name Table Value, Pattern Table address, Attribute Table address, and the current<br />&nbsp; &nbsp;&nbsp; &nbsp;//&nbsp; &nbsp; Attribute Table byte<br />&nbsp; &nbsp;&nbsp; &nbsp;// 2&#41; Assemble all the 16 bytes of Pattern Table values to make one tile<br />&nbsp; &nbsp;&nbsp; &nbsp;// 3&#41; Figure out first 2 bits for Color Index<br />&nbsp; &nbsp;&nbsp; &nbsp;// 4&#41; Minus the bit variable for the next loop<br />&nbsp; &nbsp;&nbsp; &nbsp;// 5&#41; Get last 2 bits from the Attribute Table. ATquadrant&#91;&#93; is a map used as a look-up table<br />&nbsp; &nbsp;&nbsp; &nbsp;//&nbsp; &nbsp; to see in which quadrant the Name Table byte is in<br />&nbsp; &nbsp;&nbsp; &nbsp;// 6&#41; Get the Pallete value determined by the ColorIndex number which points to where<br />&nbsp; &nbsp;&nbsp; &nbsp;//&nbsp; &nbsp; in the Pallete table that color is<br />&nbsp; &nbsp;&nbsp; &nbsp;// 7&#41; Find the color using the color from the int array look up table Color&#91;0x40&#93;<br />&nbsp; &nbsp;&nbsp; &nbsp;// 8&#41; Plot that one pixel in the appropriate spot in the PatternTable BITMAP<br />&nbsp; &nbsp;&nbsp; &nbsp;// 9&#41; Loop the x variable until the x coordinate reaches 8. Then up the y coordinate by one<br />&nbsp; &nbsp;&nbsp; &nbsp;// 10&#41; Loop the PTbyte until all pixels have filled the tile<br />&nbsp; &nbsp;&nbsp; &nbsp;// 11&#41; Now we have a Tile!<br />&nbsp; &nbsp;&nbsp; &nbsp;// 12&#41; blit that tile&#40;PatternTable&#41; onto the BGbuffer BITMAP&#40;256 x 240&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;// 13&#41; up the TileX coordinate by 8 to make room for the next tile<br />&nbsp; &nbsp;&nbsp; &nbsp;// 14&#41; Loop back up to the 'addr' for loop&#40;the very top loop&#41; and move on to the next tile<br />&nbsp; &nbsp;&nbsp; &nbsp;// 15&#41; rinse and repeat until all tiles are placed<br />&nbsp; &nbsp;&nbsp; &nbsp;// 16&#41; FINALY: blit the fully tiled BGbuffer BITMAP onto the Buffer BITMAP <br /><br />&nbsp; &nbsp;// Looping the current selected NameTable from beginning to end<br />&nbsp; &nbsp;for &#40;int addr = NTstart; addr &lt; NTend; addr++&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;NTval = VideoMem-&gt;GetValue&#40;addr&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;PTaddr = &#40;NTval*0x10&#41; + ScreenPTA;<br />&nbsp; &nbsp;&nbsp; &nbsp;ATaddr = FindATaddr&#40;addr&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;ATbyte = VideoMem-&gt;GetValue&#40;ATaddr&#41;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;// Getting all the values needed to make one tile from the Pattern Table called<br />&nbsp; &nbsp;&nbsp; &nbsp;// from the value in the current Name Table byte.<br />&nbsp; &nbsp;&nbsp; &nbsp;for &#40;int PToffset = 0; PToffset &lt; 16; PToffset++&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PTpixels&#91;PToffset&#93; = VideoMem-&gt;GetValue&#40;PTaddr+PToffset&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;for &#40;int PTbyte = 0; PTbyte &lt; 8; PTbyte++&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for &#40;int x = 0; x &lt; 8; x++&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;0, PTpixels&#91;PTbyte&#93;.test&#40;bit&#41;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;1, PTpixels&#91;PTbyte+8&#93;.test&#40;bit&#41;&#41;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bit--;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;bit &lt; 0&#41; bit = 7;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;switch&#40;ATquadrant&#91;addr&#93;&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 0: <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;2, ATbyte.test&#40;0&#41;&#41;; <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;3, ATbyte.test&#40;1&#41;&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 1: <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;2, ATbyte.test&#40;2&#41;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;3, ATbyte.test&#40;3&#41;&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 2:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;2, ATbyte.test&#40;4&#41;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;3, ATbyte.test&#40;5&#41;&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 3:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;2, ATbyte.test&#40;6&#41;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;3, ATbyte.test&#40;7&#41;&#41;; break;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;switch&#40;ColorIndex.to_ulong&#40;&#41;&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 0: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F00&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 1: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F01&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 2: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F02&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 3: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F03&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 4: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F04&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 5: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F05&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 6: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F06&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 7: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F07&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 8: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F08&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 9: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F09&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 10: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0A&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 11: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0B&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 12: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0C&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 13: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0D&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 14: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0E&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 15: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0F&#41;; break;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for &#40;int col = 0; col &lt; 0x40; col++&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;PalleteVal == col&#41; &#123;COLOR = Color&#91;col&#93;; break;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;putpixel&#40;PatternTable, x, y, COLOR&#41;;<br /><br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;y++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;y == 8&#41; y = 0;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;stretch_blit&#40;PatternTable, BGbuffer, 0, 0, PatternTable-&gt;w, PatternTable-&gt;h, TileX, TileY, 8, 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;TileX += 8;<br />&nbsp; &nbsp;&nbsp; &nbsp;if &#40;TileX == 256&#41; &#123;TileY += 8; TileX = 0;&#125;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;blit&#40;BGbuffer, Buffer, 0, 0, 0, 0, 256, 240&#41;;<br />&nbsp; &nbsp; <br /><br />&#125;</div>
<br />
<br />Anyone that's using allegro, please help me at least somewhat optimize this mess cause I really have no idea here sadly <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Sep 22, 2009 10:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Speeding up my graphics routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Undubbed wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">putpixel&#40;PatternTable, x, y, COLOR&#41;;<br /></div><br /></div>
<br />There's your biggest problem. Calling putpixel for every single pixel you're drawing -- not good, as putpixel will do a lot of unnecessary work like calculating the pixel position and so on. Instead retrieve a pointer to the bitmap contents and modify it manually. I'm not sure how to do this in Allegro but you probably have to "lock" the bitmap to get the pointer. Then to move in X direction you usually just do pointer++ and to move in Y direction pointer += width and so on.
<br />
<br />Good luck <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Sep 22, 2009 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />With Allegro there are "inline" versions of putpixel which are ALOT faster. However to use them you must know the color depth you are running in. Look them up in the allegro.txt file.
<br />
<br />Another thing you should think about is the PatternTables. In alot of games CHR-ROM is used meaning that Pattern Tables never change. Therefore it makes sense on ROM loading to convert the CHR-ROM into a faster to use format, some sort of cache. For CHR-RAM games you can still do this and it still makes sense but you have to keep track of when you need to update the tile's decoded/cached data because the game updated the pattern.
<br />
<br />Other than that it's just basic optimization to avoid doing unneeded calculations. The graphics part of your emulator will probably always take the majority of calculation time though so don't like that fool you. The CPU really shouldn't take that much. Maybe sound could compete with graphics but I doubt it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Undubbed</b> [ Tue Sep 22, 2009 12:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks guys I'll look into those for sure, but it turns out that a certain part of the code is causing the slowdown for some reason. 
<br />
<br />GlowCode shows it's a std::map that's taking about 80%+ of my UpdateBackground function. So I took this switch away just to see what happens. ATquadrant[] is the std::map btw. ATbyte and ColorIndex are std::bitset
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">switch&#40;ATquadrant&#91;addr&#93;&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 0: <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;2, ATbyte.test&#40;0&#41;&#41;; <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;3, ATbyte.test&#40;1&#41;&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 1: <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;2, ATbyte.test&#40;2&#41;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;3, ATbyte.test&#40;3&#41;&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 2:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;2, ATbyte.test&#40;4&#41;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;3, ATbyte.test&#40;5&#41;&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 3:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;2, ATbyte.test&#40;6&#41;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex.set&#40;3, ATbyte.test&#40;7&#41;&#41;; break;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;</div>
<br />
<br />And it shot up SIGNIFICANTLY. But that's not saying much cause it's still kinda slow. probably 15 or 20 FPS I think.
<br />
<br />Seems like the problem is using a std::map as a lookup table.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qeed</b> [ Tue Sep 22, 2009 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want the best speed, do away with the abstractions like std::map, std::bitset or whatever, and do manipulations by raw array/bitwise operation by hand. Casting char pointers to long or even long long pointers when copying will also help. How you do timing is also one of the biggest contributor to speed, like doing it cycle based run cpu one cycle, then run the ppu, that will be veryyyyy slow. Probably using the catch up timing method is one of the best speedups I can recommend, if you are not doing that already. Also, take a look into decoding the chr rom before hand or decoding the chr ram upon writes to the pattern tables, since drawing takes place alot more often then updating, that way you dont have to decode everything again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Sep 22, 2009 12:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The obvious optimization that comes to mind is moving the switch() above this loop which should work because "addr" doesn't change in the loop.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; for &#40;int PTbyte = 0; PTbyte &lt; 8; PTbyte++&#41; &#123; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for &#40;int x = 0; x &lt; 8; x++&#41; &#123; </div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Undubbed</b> [ Tue Sep 22, 2009 12:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">The obvious optimization that comes to mind is moving the switch() above this loop which should work because "addr" doesn't change in the loop.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; for &#40;int PTbyte = 0; PTbyte &lt; 8; PTbyte++&#41; &#123; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for &#40;int x = 0; x &lt; 8; x++&#41; &#123; </div></div>
<br />
<br />WHOA! Holy crap, you're right! FPS shot up quite a bit cause of that.
<br />
<br />And I'll certainly be trying to find a different way than using the abstractions.
<br />
<br />Man, what would I do without you guys?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Sep 22, 2009 2:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qeed wrote:</div><div class="quotecontent">How you do timing is also one of the biggest contributor to speed, like doing it cycle based run cpu one cycle, then run the ppu, that will be veryyyyy slow. Probably using the catch up timing method is one of the best speedups I can recommend, if you are not doing that already. </div>
<br />
<br />"Very slow" is subjective. On any half decent PC system there is no reason not to do this or even more accurate timing. Really on any modern system (say 2ghz) you should be able to handle running a cpu cycle then ppu cycles to catch up. The whole catch up method you mention is probably better but as I recall the main benefit or rather the drawback to doing cpu cycle then puu cycle is on older CPUs cache was small and access to RAM was quite slow. Nowdays caches are much bigger, RAM is much faster. 
<br />
<br />All I'm saying is that this approach is not really that slow at all. It was the method I used and it never performed slow on any of my PCs I tried it on except for a Pentium 266mhz laptop I tried it on for amusement.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qeed</b> [ Tue Sep 22, 2009 3:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I should've said slow relative on other timing methods. Sorry if I wasn't clear. Yeah, per cycle isn't that bad of an option anymore, i get ~200 fps here with a cycle based emu 2.0 ghz pentium core, though it can probably be alot more if I used a properly optimized emu, ie, not mine <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 22, 2009 4:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">Really on any modern system (say 2ghz) you should be able to handle running a cpu cycle then ppu cycles to catch up.</div><br />At that point, the bottleneck becomes switching among 12 threads, each <a href="http://www.youtube.com/watch?v=KgZx7JA8DZE" class="postlink">emulating an NES in a file chooser</a> reminiscent of <a href="http://www.youtube.com/watch?v=uNuLr58YE4c&amp;feature=related" class="postlink">old PS1 demo discs</a> or the Wii Menu. Or between your NES and your post-processing filter (e.g. hq3x or TV emulation). Or between your NES and your video encoder if you're recording in DivX (.avi) or Theora (.ogg) format.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The whole catch up method you mention is probably better but as I recall the main benefit or rather the drawback to doing cpu cycle then puu cycle is on older CPUs cache was small and access to RAM was quite slow. Nowdays caches are much bigger</div>
<br />Register files on x86 are still small: ax bx cx dx si di bp sp, unless you go for a 64-bit executable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Sep 22, 2009 7:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Register files on x86 are still small: ax bx cx dx si di bp sp, unless you go for a 64-bit executable.</div>
<br />
<br />Err, what?  <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/X86#32-bit">http://en.wikipedia.org/wiki/X86#32-bit</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Mednafen</b> [ Wed Sep 23, 2009 3:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Regarding qeed's suggestion of typecasting a single-byte pointer to a multi-byte pointer and dereferencing it for faster memory access, you need to be aware of alignment.  x86 handles misaligned multi-byte memory access in hardware with a reasonable performance penalty, but some other architectures like SPARC(like you care about that ;b) and ARM(maybe newer support it?) do not(at all, or with good performance).  malloc(), calloc(), new, and new[] should return memory aligned to the greatest multi-byte unit addressable by the CPU(ignoring some larger FP types on some archs, and SIMD types), unless your compiler or libc is doing something stupid, and refer to your compiler's manual for directives to align variables themselves.
<br />
<br />Also, using generic C types: long(especially long, considering differences in certain 64-bit ABIs...)/int(relatively safe, unless you're compiling with 16-bit DOS compilers)/short/char(char's generally safe, if you always explicitly define signedness, such as "signed char" and "unsigned char") can be unsafe in practice(I won't bring up really arcane architectures that will warp your mind).  I prefer using uint32_t, int16_t, int8_t, uint8_t, etc. as defined in the header file inttypes.h(though older versions of MSVC are missing it IIRC).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Sep 23, 2009 5:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Register files on x86 are still small: ax bx cx dx si di bp sp, unless you go for a 64-bit executable.</div><br />Err, what?  <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/X86#32-bit">http://en.wikipedia.org/wiki/X86#32-bit</a><!-- m --></div>
<br />So I forgot the 'E' in front of each name. Forgive me; all the asm I do is for 6502 and occasionally ARM. But my point is that x86 doesn't have R8 through R15 of x86-64.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Undubbed</b> [ Tue Sep 29, 2009 4:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm sure a lot of the techniques I used from you guys made it faster, but it was still slow. Then I just found out that running the program under debugging makes the program much slower :/. So I tried using the EXE outside the IDE and now it's running at more than perfect speed <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I feel like such a n00b sometimes.
<br />
<br />Updated routine just for closure:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void Video::UpdateBackGround&#40;&#41; &#123;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;int NTval = 0;&nbsp; &nbsp;// The value of the current NameTable address<br />&nbsp; &nbsp;int PTaddr = 0; // Pattern table address<br />&nbsp; &nbsp;int ATaddr = 0; // The Attribute Table address<br />&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; unsigned int PalleteVal = 0;<br />&nbsp; &nbsp;int COLOR = 0;&nbsp; &nbsp;// Current color of the pixel<br />&nbsp; &nbsp;int y = 0; // For use with the PutPixel function<br /><br />&nbsp; &nbsp;// For blitting the Pattern Table onto the Background buffer<br />&nbsp; &nbsp;int TileX = 0;<br />&nbsp; &nbsp;int TileY = 0;<br /><br />&nbsp; &nbsp;int NTstart = NameTableAddr;<br />&nbsp; &nbsp;int NTend = NameTableAddr + 0x3C0;<br /><br />&nbsp; &nbsp;int bit = 0x80; // used for getting the first 2 bits of Color Index<br /><br />&nbsp; &nbsp;// Looping the current selected NameTable from beginning to end<br />&nbsp; &nbsp;for &#40;int addr = NTstart; addr &lt; NTend; addr++&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;NTval = VideoMem-&gt;GetValue&#40;addr&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;ATaddr = FindATaddr&#40;addr&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;ATbyte = VideoMem-&gt;GetValue&#40;ATaddr&#41;;<br /><br />&nbsp; &nbsp; &nbsp; // preventing tiles from being needlessly rendered<br />&nbsp; &nbsp;&nbsp; &nbsp;if &#40;NTval == NTchange&#91;addr - NTstart&#93;&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;ATbyte == ATchange&#91;ATaddr - NTend&#93;&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;TileX += 8;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;TileX == 256&#41; &#123;TileY += 8; TileX = 0;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;continue;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else ATchange&#91;ATaddr - NTend&#93; = ATbyte;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;else &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;NTchange&#91;addr-NTstart&#93; = NTval;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;ATbyte != ATchange&#91;ATaddr-NTend&#93;&#41; ATchange&#91;ATaddr - NTend&#93; = ATbyte;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;PTaddr = &#40;&#40;NTval*0x10&#41; + ScreenPTA&#41; &gt;&gt; 4;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;switch&#40;ATquadrant&#91;addr&#93;&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 0: <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = ATbyte &amp; 0x01 ? ColorIndex | 0x04 : ColorIndex &amp; &#40;~0x04&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = ATbyte &amp; 0x02 ? ColorIndex | 0x08 : ColorIndex &amp; &#40;~0x08&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 1: <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = ATbyte &amp; 0x04 ? ColorIndex | 0x04 : ColorIndex &amp; &#40;~0x04&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = ATbyte &amp; 0x08 ? ColorIndex | 0x08 : ColorIndex &amp; &#40;~0x08&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 2:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = ATbyte &amp; 0x10 ? ColorIndex | 0x04 : ColorIndex &amp; &#40;~0x04&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = ATbyte &amp; 0x20 ? ColorIndex | 0x08 : ColorIndex &amp; &#40;~0x08&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 3:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = ATbyte &amp; 0x40 ? ColorIndex | 0x04 : ColorIndex &amp; &#40;~0x04&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = ATbyte &amp; 0x80 ? ColorIndex | 0x08 : ColorIndex &amp; &#40;~0x08&#41;; break;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;for &#40;int PTbyte = 0; PTbyte &lt; 8; PTbyte++&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for &#40;int x = 0; x &lt; 8; x++&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = PatternTable&#91;PTaddr&#93;&#91;PTbyte&#93; &amp; bit ? ColorIndex | 0x01 : ColorIndex &amp; &#40;~0x01&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ColorIndex = PatternTable&#91;PTaddr&#93;&#91;PTbyte+8&#93; &amp; bit ? ColorIndex | 0x02 : ColorIndex &amp; &#40;~0x02&#41;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bit &gt;&gt;= 1; // bit/2<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;bit &lt; 1&#41; bit = 0x80;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;switch&#40;ColorIndex&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 0: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F00&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 1: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F01&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 2: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F02&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 3: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F03&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 4: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F04&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 5: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F05&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 6: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F06&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 7: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F07&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 8: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F08&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 9: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F09&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 10: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0A&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 11: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0B&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 12: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0C&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 13: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0D&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 14: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0E&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case 15: PalleteVal = VideoMem-&gt;GetValue&#40;0x3F0F&#41;; break;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for &#40;int col = 0; col &lt; 0x40; col++&#41; &#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;PalleteVal == col&#41; &#123;COLOR = Color&#91;col&#93;; break;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;_putpixel16&#40;PTbmp, x, y, COLOR&#41;;<br /><br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;y++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if &#40;y == 8&#41; y = 0;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;stretch_blit&#40;PTbmp, BGbuffer, 0, 0, PTbmp-&gt;w, PTbmp-&gt;h, TileX, TileY, 8, 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;TileX += 8;<br />&nbsp; &nbsp;&nbsp; &nbsp;if &#40;TileX == 256&#41; &#123;TileY += 8; TileX = 0;&#125;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;blit&#40;BGbuffer, Buffer, 0, 0, 0, 0, 256, 240&#41;;<br />&nbsp; &nbsp; <br /><br />&#125;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ehguacho</b> [ Fri May 21, 2010 5:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thanks Undubbed for your routine. hope it'll helpful for me!

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>