<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=3682" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-03-22T20:23:00-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=3682</id>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2014-03-22T20:23:00-07:00</updated>
<published>2014-03-22T20:23:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127092#p127092</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127092#p127092"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127092#p127092"><![CDATA[
I mentioned unrolled loops because obviously it would be faster (and of limited utility). Also, I tried to showcase a useful example, but it turns out that even when getting rid of the last cpy (by putting a 0 byte after the identity table, a bit of a hack) it is as fast as the following with the same number of stores in the loop:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    ldx #0<br />    clc<br />:   lda #$FF<br />    sta OAMbuff,x<br />    sta OAMbuff+4,x<br />    txa<br />    acd #8<br />    tax<br />    bcc :-</div><br />32 iterations, 21 cycles for the loop. Bad example, then. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Sat Mar 22, 2014 8:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-03-22T15:45:18-07:00</updated>
<published>2014-03-22T15:45:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127085#p127085</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127085#p127085"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127085#p127085"><![CDATA[
Jarhmander's code can start the clear at any X position, not just 0, which allows using it to clear the rest of the sprites after the ones that are already displayed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Mar 22, 2014 3:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-03-22T14:56:16-07:00</updated>
<published>2014-03-22T14:56:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127083#p127083</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127083#p127083"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127083#p127083"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />[...]the fastest one without using unofficial opcodes and without total unrolling<br /></div><br />Who said total unrolling was required ?<br />What you're doing is 2 loop iteration in one, in which you gain roughly 50% of the speed you gain in total unrolling.<br />If you make 4 loop iteration in one, you gain 75% of the speed you gain in total unrolling.<br />There's really no point in going anything further than that...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;...&#93; blah blah initialization<br />_loop<br />sta $200,Y<br />sta $240,Y<br />sta $280,Y<br />sta $2c0,Y<br />dey<br />dey<br />dey<br />dey<br />bne _loop<br /></div><br />If this isn't fast enough then some other part of your code has a major problem.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Mar 22, 2014 2:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2014-03-22T18:29:50-07:00</updated>
<published>2014-03-22T13:35:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127081#p127081</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127081#p127081"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=127081#p127081"><![CDATA[
I revive this old thread with some recent thinkings about the use of the identity table by tokumaru (1st post in thread, also <a href="http://wiki.nesdev.com/w/index.php/Synthetic_Instructions#X.2FY_as_Operand" class="postlink">see here</a>).<br /><br />Basically, you can do these operations:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">((X or Y) ± cst) &#91;OP A&#93; → A<br />(X ± cst) → Y<br />(Y ± cst) → X</div><br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">cst</tt> is an unsigned constant that you want to add/substract to X or Y;<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">[OP A]</tt> is some optional ALU operation with A; obviously, if OP is <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">cmp</tt>, A isn't affected.<br /><br />The restriction is that the addition/substraction of X/Y with the constant must not overflow/underflow; otherwise the result is undefined. If one want (((X or Y) ± cst) &amp; 0xFF) and never have undefined result, they'll need an identity table twice the size, or it could be done in hardware with a non-inverting tri-state buffer that connects A0-A8 to D0-D8, output would be enabled with reads into a memory area of interest.<br /><br />As you might have guessed, these pseudo-instructions use absolute indexed addressing, and the arithmetics are constant offsets added to the identity table address. Undefined results happen simply when the accesses goes out of the table. Assuming the table is page-aligned, when a constant is <em>added</em> to X or Y, it takes 4 cycles, whereas with the substractive case, it takes 5 cycles because of the page crossing.<br /><br />Some examples of use: (idt is the identity table)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    ldy idt+4,X     ; Y = X + 4<br /><br />    cmp idt-1,Y     ; Compare A with Y - 1, Y is != 0<br /><br />    adc idx+3,X     ; ADC A with X+3</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">HideSprites:    ; Make all sprites in OAM invisible (in next sprite DMA)<br />                ; Could be modified to hide some sprites only<br />    lda #$FF<br />    ldx #0<br />:   ldy idt+4,x<br />    sta OAMbuff,x<br />    ldx idt+4,y<br />    sta OAMbuff,y <br />    cpy #$FC<br />    bne :-<br />    rts</div>It's possible that the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">HideSprite</tt> routine above is the fastest one without using unofficial opcodes and without total unrolling (and without clearing a bit in $2001, you fools!). There's very little unrolling here, just what's necessary so it works.<br /><br />EDIT: fixed (enhanced) code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Sat Mar 22, 2014 1:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2013-01-26T19:19:50-07:00</updated>
<published>2013-01-26T19:19:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106849#p106849</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106849#p106849"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106849#p106849"><![CDATA[
Flipping the MSB seems the best way to deal with comparing to a constant (pre flipped). But otherwise I would refer to the link tepples posted a few post back. It has a method using N and V flags that avoids using a temp variable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Sat Jan 26, 2013 7:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2013-01-26T16:31:39-07:00</updated>
<published>2013-01-26T16:31:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106844#p106844</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106844#p106844"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106844#p106844"><![CDATA[
This trick was mentioned in the old Allegro documentation: to convert signed samples to unsigned, you just had to flip the MSB. What this does is shift the range (so e.g. -0x80~0x7F gets shifted to 0x00~0xFF - it's equivalent to adding 0x80 to all values).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Sat Jan 26, 2013 4:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2013-01-24T14:33:41-07:00</updated>
<published>2013-01-24T14:33:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106715#p106715</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106715#p106715"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106715#p106715"><![CDATA[
I don't know if it's really a trick, or if it's been mentioned. When comparing signed values, you can just flip the negative bits and compare them as you would any other value.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda val1<br />eor #$80<br />cmp #&lt;The value you'd compare against, pre-xord $80&gt;<br /></div><br /><br />Or against a variable:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda val1<br />eor #$80<br />sta temp<br />lda val2<br />eor #$80<br />cmp temp<br /></div><br /><br />You guys could probably figure out something faster for the 2nd code <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Thu Jan 24, 2013 2:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2013-01-24T03:04:44-07:00</updated>
<published>2013-01-24T03:04:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106697#p106697</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106697#p106697"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106697#p106697"><![CDATA[
Dunno if this is clever enough for this topic, but here's something basic I only just now thought of. Often I find myself adding an 8 bit number to a 16 bit number like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda low16<br />   clc<br />   adc low8<br />   sta low16<br />   <br />   lda high16;3 (assuming zero page)<br />   adc #$00;2<br />   sta high16;3<br /></div><br />when this would work since the high byte is always 0.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda low16<br />   clc<br />   adc low8<br />   sta low16<br />   <br />   bcc skip;2/3 <br />   inc high16;5 (assuming zero page)<br />skip:<br /></div><br />Saves two bytes and a (couple) cycles.  <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> I might make it a macro.<br /><br />Edit: Ah yeah... but you could gain time on a page cross. It'd be rare, though<br />Edit2: Wait, no, you wouldn't gain time. Because when the branch is taken the inc isn't run.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Thu Jan 24, 2013 3:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-01-21T14:53:22-07:00</updated>
<published>2013-01-21T14:53:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106602#p106602</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106602#p106602"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106602#p106602"><![CDATA[
I just discovered an <a href="http://www.6502.org/tutorials/compare_beyond.html" class="postlink">article about doing tricks with CMP</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jan 21, 2013 2:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-01-21T02:05:17-07:00</updated>
<published>2013-01-21T02:05:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106562#p106562</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106562#p106562"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106562#p106562"><![CDATA[
Ah, how many times I did the good old<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$0<br />rol A</div><br />trick to have A = 0 if there is no carry and A = 1 if there is carry.<br /><br />Also, if you want to act on a simple flag, usually I use the carry but sometimes comes where you have to use an ADC or CMP instruction that will affect the flag (and overwrite it). I came with an elegant solution :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;...&#93;<br /> ror Temp    ;Our flag in bit 7 of temp (we don't care about what value was stored in temp)<br />&#91;...&#93;<br />adc #wathever   ;Carry is affected<br /><br />&#91;...&#93;<br />bit Temp        ;Test the flag<br />bpl _flag_is_clear<br /><br />&#91;....&#93;<br />asl Temp       ;If anyhow the flag should be restored to the carry<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Jan 21, 2013 2:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2013-01-20T20:24:26-07:00</updated>
<published>2013-01-20T20:24:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106557#p106557</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106557#p106557"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106557#p106557"><![CDATA[
Flipping bit 0 on non-zp variable if carry is set (9 bytes, constant 12 cycles) (clears carry):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        ; Flip direction if carry was set <br />        lda #0                          ;2<br />        rol a                           ;2<br />        eor Bat_Direction               ;4<br />        sta Bat_Direction               ;4</div><br />To flip bit 7, change &quot;rol&quot; into &quot;ror&quot;.<br />To change flipping into setting, change eor into ora.<br /><br />Flipping bit 0 on non-zp variable if carry is CLEAR (11 bytes, constant 14 cycles) (clears carry):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        ; Flip direction if carry was clear<br />        lda #0                          ;2<br />        rol a                           ;2<br />        eor #1                          ;2<br />        eor Bat_Direction               ;4<br />        sta Bat_Direction               ;4</div><br />To flip bit 7, change &quot;rol&quot; into &quot;ror&quot; and #1 into #$80.<br />To change flipping into setting, change the second eor into ora.<br /><br />Flipping any bit on non-zp variable if carry is set (12 bytes, constant 14 cycles) (doesn't change carry):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        ; Flip direction if carry was set<br />        lda Bat_Direction               ;4   <br />         bcc *+4                        ;3   <br />         bcc *+6                        ;3   <br />         eor #2                         ;-2+2   (flip bit 1)<br />        sta Bat_Direction               ;4</div><br />To flip if carry is clear, change both bcc into bcs.<br />To change flipping into setting, change eor into ora.<br />To change flipping into clearing, change eor into and and invert the constant.<br /><br />To transfer the carry flag into any particular bit on a non-zp variable (15 bytes, constant 15 cycles) (doesn't change carry):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        lda Bat_Direction               ;4   <br />         bcc @clear                     ;3<br />         ora #2                         ;-1+2<br />         bne @ok                        ;3 :: 11 so far<br />@clear:  and #(255-2)                   ;2<br />         nop                            ;2 :: 11 so far<br />@ok:    sta Bat_Direction               ;4   </div><br />To invert the flag, change the bcc into bcs.<br /><br />Subtract 2 bytes and 2 cycles from each example if your variable is in zeropage.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Sun Jan 20, 2013 8:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-01-20T10:23:57-07:00</updated>
<published>2013-01-20T10:23:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106542#p106542</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106542#p106542"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106542#p106542"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It takes 6 or 5.<br /></div><br />I meant, 6 bytes (instead of 8 in your variant).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Jan 20, 2013 10:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-01-20T10:17:39-07:00</updated>
<published>2013-01-20T10:17:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106541#p106541</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106541#p106541"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106541#p106541"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Only takes 6<br /></div><br />Taking 6 or 5 cycles is fine in some cases, and I do this a lot in Thwaite for velocity modifications based on TV system because Thwaite doesn't do any raster effects other than a split on some fairly static screens to switch to the bank with font tiles. If you're trying to do something in constant time, on the other hand, you need to eliminate all time variability. Extending it to constant time would likewise take 8 bytes and 8 cycles:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  ; CMP goes here<br />  lda #value_if_clear<br />  bcc +<br />+<br />  bcc +<br />  lda #value_if_set<br />+<br /></div><br /><br />EDIT: clarify intent for the record<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jan 20, 2013 10:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-01-20T10:14:01-07:00</updated>
<published>2013-01-20T10:14:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106540#p106540</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106540#p106540"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106540#p106540"><![CDATA[
Wow, this is cool ! But it takes 8 bytes, while my variant :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  lda #value 1<br />  bcc +<br />  lda #value 2<br />+<br /></div><br />Only takes 6. Also it is 5/6 cycles, not constant, but almost.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Jan 20, 2013 10:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-01-20T10:11:16-07:00</updated>
<published>2013-01-20T10:11:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106539#p106539</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106539#p106539"/>
<title type="html"><![CDATA[Re: 6502 ASM trick]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3682&amp;p=106539#p106539"><![CDATA[
To set A to one of two arbitrary constant values based on carry in eight cycles, do something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; CMP goes here<br />lda #$FF<br />adc #$00<br />; here, A = $00 if C was true else $FF; C unchanged<br />and #value_if_set ^ value_if_clear<br />; here, A = $00 if C was true else the bitwise difference<br />eor #value_if_set<br /></div><br />All this requires is that the value if carry is set and the exclusive OR of the two values, or (with a small change) the value if carry is set and the difference of the values, be known.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jan 20, 2013 10:11 am</p><hr />
]]></content>
</entry>
</feed>