<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 6502 coding style.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">6502 coding style.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16887">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16887</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Mon Jan 01, 2018 5:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This seemed like a sufficiently inconsequential topic I decided it didn't really belong in the technical forum. I'm trying to come up with a better way to indent my 6502 code so it helps guide the eye and communicate more meaning. I've decided in the context of ca65 to adopt the following simple rules:<br /><br />-Any time a new scope is introduced, or at least the appearance of one (such as a macro), increase the tab level by 4 spaces.<br /><br />-Any time a new scope is removed, decrease the tab level by 4 spaces.<br /><br />-Any code between a label and a branch is also to be indented by 4 spaces.<br /><br />-The root scope is to be indented by 4 spaces (everything, directives, .res, code, data, etc.)<br /><br />Here's an example of a routine from my current project formatted using these rules. I think I like this, and I'm considering writing a script to just go through my whole codebase and make it all pretty like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ;****************************************************************<br />&nbsp; &nbsp; ;This routine kills all entities that are not the player entity.<br />&nbsp; &nbsp; ;****************************************************************<br />&nbsp; &nbsp; .proc entity_kill_all_but_player<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; lda player_entity_index<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #ENTITY_NULL<br />&nbsp; &nbsp; &nbsp; &nbsp; beq :++<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx #(MAX_ENTITIES-1)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; next_entity:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cpx player_entity_index<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; beq :+<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; entity_clear_flag #ENTITY_FLAG_ALIVE_CLEAR<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bpl next_entity<br />&nbsp; &nbsp; &nbsp; &nbsp; :<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />&nbsp; &nbsp; .endproc<br /><br /></div><br /><br />Anyone else care to share thoughts on 6502 coding style?<br /><br />*edit* It occurred to me the above rules might be tricky to iron out with a script, as there are cases I didn't address such as branching past a jmp instruction in order to achieve a longer branch.<br /><br />Previously my rule was to only indent when new scopes are introduced. I might just have to settle for that alone, for simplicity's sake.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Jan 01, 2018 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">-The root scope is to be indented by 4 spaces (everything, directives, .res, code, data, etc.)<br /></div>Why? Equivalently, what goes into the &quot;no indent&quot; group?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Mon Jan 01, 2018 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tend to use a similar indenting style, but slightly less strict. (I sometimes indent sections even without a new scope or label if it helps readability, and sometimes don't indent a loop of it's already really readable)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Jan 01, 2018 6:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">-The root scope is to be indented by 4 spaces (everything, directives, .res, code, data, etc.)<br /></div>Why? Equivalently, what goes into the &quot;no indent&quot; group?</div><br />I don't think I have any code in the &quot;no indent&quot; group, but I think I sometimes put global data or allocations without indent, constant definitions, some compile-time asserts, etc.<br /><br />As for why, I think having a single indent for most code makes it easy to spot the label where they begin. Could be that I'm just used to this from C/C++ style anyway.<br /><br />Some old assemblers I've used required all non-label lines to start with tab or space. The expected style there was flat, not using indents for structure, but it at least distinguishes labels from code very clearly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Jan 01, 2018 7:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sure, I put labels, and by extension outermost .proc and .scope uses, in the &quot;no indent&quot; group. And blocks of documentation.<br /><br />But GradualGames seems to have put <em>nothing</em> in the &quot;no indent&quot; group

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Jan 01, 2018 7:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, I misinterpreted where the left edge of the text was in his example.<br /><br />Though I suppose that reminds me a little of Java style where everything is in a class so it's common for all the member functions to have an extra layer of indent. (Or similarly python class style where indents are mandatory.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Mon Jan 01, 2018 9:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Mine is similar regarding indentation.  I've seen people indent only one  space for a loop or condition, and it just looks sloppy, like they did a poor job of lining things up when they meant to.  Three or four works much better.  I do like to put at least two spaces between words though, to make the separation stand out better when there are labels with an underscore character in them.<br /><br />Apparently an assembler that's common on this forum requires labels to be on their own lines with no code on the same line.  I sure don't like that requirement.<br /><br />I try to use vertical alignment for maximum benefit in visual factoring.  For example, even if grouped labels for EQUates or variables are of different lengths, vertically align the directives that follow them, so<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">TIMER: DFS 4<br />PHI_ACCUM: DFS 2<br />INC_RATE: DFS 2<br />THRESH_INC: DFS 2<br />ALT_TM: DFS 2<br />ALT_INTERVAL: DFS 2<br />PORTA_REC: DFS 1</div><br />becomes:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">TIMER:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DFS&nbsp; 4&nbsp; &nbsp; ; &lt;comments&gt;<br />PHI_ACCUM:&nbsp; &nbsp; &nbsp;DFS&nbsp; 2&nbsp; &nbsp; ; &lt;comments&gt;<br />INC_RATE:&nbsp; &nbsp; &nbsp; DFS&nbsp; 2&nbsp; &nbsp; ; &lt;comments&gt;<br />THRESH_INC:&nbsp; &nbsp; DFS&nbsp; 2&nbsp; &nbsp; ; &lt;comments&gt;<br />ALT_TM:&nbsp; &nbsp; &nbsp; &nbsp; DFS&nbsp; 2&nbsp; &nbsp; ; &lt;comments&gt;<br />ALT_INTERVAL:&nbsp; DFS&nbsp; 2&nbsp; &nbsp; ; &lt;comments&gt;<br />PORTA_REC:&nbsp; &nbsp; &nbsp;DFS&nbsp; 1&nbsp; &nbsp; ; &lt;comments&gt;</div><br />which is much more readable.  (&quot;DFS&quot; in the C32 assembler stands for &quot;DeFine Storage,&quot; ie, a RAM variable, allotting as many bytes to it as the number following the &quot;DFS&quot; says.)<br /><br />An hour-long <a href="https://www.youtube.com/watch?v=EXY78gPMvl0" class="postlink">video</a> about the oberon language has a couple of quotes I really liked (at around 36 minutes into in, give or take):<br /><ul><li>Programs must not be regarded as code for computers, but as literature for humans.</li><li>Reducing size and complexity is the triumph.</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TOUKO</b> [ Tue Jan 02, 2018 3:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anyone else care to share thoughts on 6502 coding style?</div><br />I do more or less the same than you,a good indentation is for me the way to go for a really redable 6502 code .<br />Even better with colored syntax for differentiating for exemple opcodes and macros(and the other stuffs) .<br />I use notepad++ with the dina font .<br /><!-- m --><a class="postlink" href="https://www.dafont.com/pt/dina.font">https://www.dafont.com/pt/dina.font</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pubby</b> [ Tue Jan 02, 2018 6:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I barely indent at all and dislike seeing assembly code indented.<br /><br />To separate code I use blank spaces. To clarify code I use comments.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Jan 02, 2018 9:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pubby wrote:</div><div class="quotecontent">I barely indent at all and dislike seeing assembly code indented.</div><br />Same here. The typical IF/ELSE/FOR/WHILE structures don't always translate well to assembly, since you have the freedom to branch/jump anywhere, and it makes little sense to write slower programs for the sole purpose of creating artificially delimited blocks of logic that look pretty.<br /><br />I don't like using extra spaces or tabs to create visually aligned columns either. I see those extra characters as junk that doesn't have any meaning in the source code, and if I later decide to change a symbol's name by searching and replacing in all files, I could easily break the alignments if the new names have different lengths.<br /><br />I am very obsessed about styling code though, and I think that consistency is important across all files of a project. I try to break up my code into short blocks of logic, each with its own comment describing what it does. I only add line-by-line comments to really complex code. I use one blank line to separate blocks of code. Labels also have one blank line above and below. Every file ends with a line break (this is necessary for Notepad++  to properly highlight the last line of code).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Jan 02, 2018 12:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">pubby wrote:</div><div class="quotecontent">I barely indent at all and dislike seeing assembly code indented.</div><br />Same here. The typical IF/ELSE/FOR/WHILE structures don't always translate well to assembly, since you have the freedom to branch/jump anywhere, and it makes little sense to write slower programs for the sole purpose of creating artificially delimited blocks of logic that look pretty.</div><br />This is nothing at all to do with writing &quot;slower&quot; programs. You can still branch anywhere you want with indented code, you just can't express its structure with indentation. It's a visual guide to the existing structure, not the structure itself.<br /><br />It's also a matter of how often you need to do something. Branching over a block of code (i.e. simple &quot;if&quot;) is the most common case by far, and that is perfectly expressed by indents. You don't have to throw that away just because you occasionally might need something more complicated. There are alternative ways to indent things that don't have explicit nesting structure.<br /><br />C/C++/etc. have things like goto and exceptions that do things that indents can't adequately designate, but there's really very little problem using them in the midst of otherwise indented code if you're careful about it. The indentation is just there to add potential redundant information, not take away possibilities.<br /><br />(Python is an exception to that, though, where indents are a mandatory/functional part of the code structure. It's one of the things I dislike about it as a language, actually. In that case the indentation really does force those structures on the code... but it's also a scripting language not usually expected to be high performance.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Tue Jan 02, 2018 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't use indented code in assembly language, although I leave blank lines to group parts of the code, as well as adding more comments in assembly codes than I tend to use in C codes.<br /><br />The structure doesn't match that of structured programming languages anyways; many kind of jumps and stuff may be used which is difference from FOR/WHILE/IF/etc, including double-returns, coroutines, RTS trick, and whatever else may be suitable for the program being written.<br /><br />Assembly language programming is for programming for a specific computer (and software that emulates that computer), and optimizations can be put in which is specific for that computer and which is difference to what a C compiler would put in. C programming is for being portable to many kind of computer, and the compiler should have optimizations, to know what is suitable for whatever computer it is being compiled on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Jan 02, 2018 3:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">This is nothing at all to do with writing &quot;slower&quot; programs.</div><br />It is if you need extra branches and jumps to make your code conform to a completely hierarchical structure, instead of writing faster &quot;spaghetti code&quot;.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can still branch anywhere you want with indented code, you just can't express its structure with indentation.</div><br />Exactly. What's the point of indenting then if it won't represent the actual structure of the program? You say that &quot;unindentable code&quot; is only needed occasionally, but I think I do it a lot. Functions with multiple entry points, multi-purpose RTSs, program flow control through stack manipulation, and so on, are things I do pretty often. My main loops also tend to be fairly big, because inlining things is faster than making lots of function calls, and maintaining the indentation of such long routines is a pain, and large sections of code end up too far from the left edge of the document.<br /><br />I like to take all sorts of little opportunities for optimization that make little sense in indented/high-level form, so instead of constantly scratching my head figuring how to align every piece of code, I use blank lines and comments to isolate independent tasks and make them easily recognizable.<br /><br />Just the other day I wrote a function that needed to do something twice before returning, so instead of wasting time and space with a loop or a separate function I did this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Function:<br /><br />&nbsp; ;(bunch of code)<br /><br />&nbsp; ;load an argument and do something<br />&nbsp; lda #01<br />&nbsp; jsr DoSomething<br /><br />&nbsp; ;load another argument and do something<br />&nbsp; lda #02<br /><br />DoSomething:<br /><br />&nbsp; ;(bunch of code)<br /><br />&nbsp; rts</div><br />DoSomething is a separate function but it's also the end of Function. I don't know if I should write DoSomething as a separate function and leave Function without an end, or keep one function inside the other and increase the indentation of the inner function, even though it isn't used exclusively as a function... I'd probably leave it as part of Function without any extra indentation, but whatever I do won't correctly represent the hierarchy of this code, so I prefer not to deal with these dilemmas (which takes time and would inevitably lead to inconsistencies in my code), and make the most of the freedom that assembly provides without any guilt.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Jan 02, 2018 4:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, I do optimizations like that too, but I don't really consider it much of a problem to decide how to indent anything? Just a snap decision, not something I have to think hard about?<br /><br />The basic rule is, if there's a loop or a conditonal thing that's cleanly encapsulated, I indent it to show this. Makes it really easy to scan visually to the end of it. If it doesnt have clear structure I probably leave it mostly flat. Like if I have a branch instruciton, the indent usually shows me immediately where the branch goes without having to read anything else.<br /><br />That's most of the point of the indentation style, being able to skim past the indented stuff without reading it. A converse rule of thumb is: if this is code you have to know about / read on the way past, don't indent it. The indents are there to show you what you can skip.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Tue Jan 02, 2018 11:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 coding style.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've written myself a set of macros to:<br /><ul><li>make source code more clear</li><li>make myself more productive </li><li>get fewer bugs</li><li>make the code more maintainable</li></ul><br />and it would be crazy not to use indentation with it.  In most cases, there is absolutely no penalty at all in the resulting machine code, and in fact looking at it, you wouldn't be able to tell if the structure macros were used in the source code or not.  Here's a basic example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; CMP&nbsp; #14<br />&nbsp; &nbsp; &nbsp; &nbsp; IF_EQ&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; clear enough that it really needs no comments<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;actions&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;actions&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;actions&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; END_IF</div><br />the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">IF_EQ</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">END_IF</tt> assembles a BNE to the end of the section, two bytes, exactly the same as you would do by hand.  Note the absence of labels.  I have several kinds of these program structures, with explanations and source code for doing them with the C32 assembler, at <!-- m --><a class="postlink" href="http://wilsonminesco.com/StructureMacros/">http://wilsonminesco.com/StructureMacros/</a><!-- m --> .<br /><br />You can of course get much more complex, and nest program structures as well.  As things get more complex, the value of the structures and indenting increases.  Before I did this, proofreading complex source code involved printing it on fanfold paper and laying the long strip out on the floor and drawing arrows showing where all the branches branched to.  It got ridiculous.  Spaghetti.  That problem doesn't happen with the macros and accompanying indentation.  If you still want to use a label and jump into the middle of a program structure, you can, and I do on rare occasion.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>