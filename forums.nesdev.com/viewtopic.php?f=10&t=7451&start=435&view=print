<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>30</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sat Dec 31, 2011 2:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If I have <span style="color: yellow">00001111</span> in the accumulator... how could I check the bit value of the ones?  Like how would I say check the value of bit #2?  Is there a faster way to do this than
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ror a<br />&nbsp; &nbsp; ror a<br />&nbsp; &nbsp; and #$01<br />&nbsp; &nbsp; beq +<br />&nbsp; &nbsp; &nbsp; ;code for a value of 1<br />&nbsp; &nbsp; +<br />&nbsp; &nbsp; &nbsp; ;code for a value of 0<br /></div>
<br />Does that even work?  I think it does.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Dec 31, 2011 2:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How about just "AND #$04" to check bit 00000100?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sat Dec 31, 2011 2:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">How about just "AND #$04" to check bit 00000100?</div>
<br />
<br />But the result wouldn't be a 1 or a zero...  But, beq only focuses on a 0.  So... is that right?
<br />
<br />edit: That's brilliant! Thanks Dwedit! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />   Have a happy new year! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Dec 31, 2011 5:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">But the result wouldn't be a 1 or a zero...  But, beq only focuses on a 0.  So... is that right?</div>
<br />As you probably have realized, if the result is not 0 you know that the bit is set. If you wanted to copy any bit to the carry flag (sometimes we do that when rearranging bits) you could use an AND followed by a CMP:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;;copy bit 2 to the carry flag<br />&nbsp; &nbsp;and #%00000100<br />&nbsp; &nbsp;cmp #%00000100</div>
<br />Then you can shift the bit into some variable using ROR or ROL, or do whatever else you want with it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Jan 04, 2012 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru<span style="color: white">,</span> <a href="http://nesdev.com/bbs/viewtopic.php?t=7451&amp;postdays=0&amp;postorder=asc&amp;start=360" class="postlink">on page 25</a><span style="color: white">,</span> wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">How do I know if the something IS water? <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />  How do I check the tile number?</div><br />One of the ideas we had consisted in <span style="color: violet">using 1 bit to select between water or air for the empty tiles, and 3 bits for the type of the solid tiles.</span> In this case it would be easy to know if something is water, but since you decided to use the tile index...<br /><br />Well, your <strong>screenArray</strong> only has the basic collision info, it doesn't say which tiles each block uses. The only way is to make <strong>screenArray</strong> hold <span style="color: orange">the index of the metatiles instead of the collision info</span>. That way, whenever you wanted to test for collisions, you'd have to get the metatile index at the position you want and use that to fetch the collision info from a table. With the same index you can easily access the tile indexes too. It's a bit more indirect, but that's not too bad.</div>
<br />
<br />
<br />The last part has me confused. If <strong>screenArray</strong> held "<span style="color: orange">the index of the metatiles instead of the collision info</span>" would that destroy our  library and collision files?  That would be terrible!  My sister has done so many of them so far.  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> 
<br />
<br />That first thing you mentioned about "<span style="color: violet">using 1 bit to select between water or air for the empty tiles, and 3 bits for the type of the solid tiles.</span>"  Since we have two extra bits could we set one of them to select between water or air for the empty tiles by itself (without the 3 bits for the solid type tiles)?   Then wouldn't it be much easier to know if something is water?   <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Jan 12, 2012 5:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">But the result wouldn't be a 1 or a zero...  But, beq only focuses on a 0.  So... is that right?</div><br />As you probably have realized, if the result is not 0 you know that the bit is set. If you wanted to copy any bit to the carry flag (sometimes we do that when rearranging bits) you could use an AND followed by a CMP:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;;copy bit 2 to the carry flag<br />&nbsp; &nbsp;and #%00000100<br />&nbsp; &nbsp;cmp #%00000100</div><br />Then you can shift the bit into some variable using ROR or ROL, or do whatever else you want with it.</div>
<br />
<br /> <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  This is good... and it works because
<br /><span style="color: green">a)The AND puts 4 into the accumulator...</span>
<br /><span style="color: yellow">b)then... the CMP puts (Accumulator - Memory) in the Accumulator?</span>
<br /><span style="color: orange">c)so now the Accumulator has a 0. Does that 0 clear the Carry flag?</span>
<br /><span style="color: red">d) ...I dont know why this works...Could you help me please?</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jan 12, 2012 6:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><span style="color: green">a)The AND puts 4 into the accumulator...</span></div><br />No, it ANDs whatever is in the accumulator with 4, the result will only be 4 if bit 2 was set in the original value, otherwise it will be 0.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><span style="color: yellow">b)then... the CMP puts (Accumulator - Memory) in the Accumulator?</span></div>
<br />No, CMP does not change the value of the accumulator. It does calculate A - 4, but the result is not stored anywhere. What matters to us is the value of the carry after this subtraction: if the accumulator is 4, the subtraction will "succeed" (i.e. there will be no underflow) and the carry will be set. If the accumulator is 0, the subtraction will cause an underflow, clearing the carry. This causes the carry to become whatever bit 2 was in the first place, so we have effectively "copied" bit 2 into the carry flag.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Jan 12, 2012 7:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tokumaru covered CMP, but here's a little more explanation on what AND and the other bitwise operators (hey, why not?) do, and why what Dwedit suggested works:
<br />
<br />AND (like ORA and EOR) at a basic level gives an output of 1 bit from 2 input bits. Order doesn't matter in any of them, so there are three cases. 
<br />
<br />1. Both bits are 0.
<br />2. Both bits are 1
<br />3. 1 bit is 1, and the other is 0.
<br />
<br />AND gives an output of 1 if both input bits were 1. (if input bit 1 is 1 [true] AND input bit 2 is 1 [true], the result is true.) See how it got its name? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />So, AND will only return 1 in case 2, otherwise it gives 0.
<br />
<br />ORA gives an output of 1 if either input bit is one. (If input bit 1 is 1 [true] OR  input bit 2 is 1[true], the result is true.) See how it got its name?
<br />
<br />So ORA will return 1 in every case except case 1. It will return 0 in case 1.
<br />
<br />EOR (Exclusive OR) gives an output of 1 if EXACTLY one of the input bits is 1. (If input 1 and ONLY input is 1 [true], the result is true. If input 2 and ONLY input 2 is 1[true], the result is true)
<br />
<br />So EOR will return 1 only in case 3, otherwise it gives 0. 
<br />
<br />Now, at a basic level they work one bit at a time. The instructions work a byte at a time with corresponding bits in a byte.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp;#%00000000<br />&nbsp; &nbsp; &nbsp; &nbsp;^^^^^^^^<br />&nbsp; &nbsp; &nbsp; &nbsp;||||||||<br />BIT#:&nbsp; 76543210<br />&nbsp; &nbsp; &nbsp;#%00000000<br /></div>
<br />They check and return the result of bits 7 in each byte, and while that check is happening what's in bits 6-0 doesn't matter. Then it does bits 6, and while that check is happening what's in bits 7 and 5-0 doesn't matter. Etc.
<br />
<br />AND is useful for checking the status of a specific bit, because by definition of AND, a bit with a 0 in either byte will return 0.
<br />
<br />So if you AND with a number that has 7 bits as 0, the result of those seve  bits will be 0. That means the bit you left 1 in the AND determines whether the accumulator is 0, or non-0.
<br />
<br />Another use for AND is clearing a bit (setting it to 0). #%01111111 will clear the leftmost bit without changing the others. The 0 is guaranteed to clear the high bit because the 0 means both bits CAN'T be 1, and the 7 ones guarantee the other bits won't change.
<br />
<br />EOR is useful for toggling a bit (0-&gt;1 or 1-&gt;0). This is because a 0 in an EOR is guaranteed to not change the bit it is being EOR'd with, while a 1 in an EOR is guaranteed TO change the bit it is being EOR'd with.
<br />
<br />ORA is useful for setting a bit to 1. This is a because a 1 is guaranteed to give a result of 1, while a 0 will never change the bit you are ORA'ing with.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sun Jan 15, 2012 4:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tokumaru, thank you so much for helping me with this! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">if the accumulator is 4, the subtraction will "succeed" (i.e. there will be no underflow) and the carry will be set.</div><br />No underflow?  So water will not flow under the subtraction and that sets the carry? (trying to get you to teach me more about "underflow" - im interested)  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />----<br />tried to make this easier to read... for me at least... just added colors <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Tokumaru covered CMP, but here's a little more explanation on what AND and the other bitwise operators (hey, why not?) do, and why what Dwedit suggested works:<br /><br />AND (like ORA and EOR) at a basic level gives an output of 1 bit from 2 input bits. Order doesn't matter in any of them, so there are three cases. <br /><br /><span style="color: violet">1</span>. Both bits are <span style="color: red">0</span>.<br /><span style="color: cyan">2</span>. Both bits are <span style="color: green">1</span><br /><span style="color: blue">3</span>. 1 bit is <span style="color: green">1</span>, and the other is <span style="color: red">0</span>.<br /><br />AND gives an output of <span style="color: green">1</span> if both input bits were <span style="color: green">1</span>. (if input bit 1 is <span style="color: green">1</span> [true] AND input bit 2 is <span style="color: green">1</span> [true], the result is <span style="color: green">true</span>.) See how it got its name? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />So, AND will only return <span style="color: green">1</span> in case <span style="color: cyan">2</span>, otherwise it gives <span style="color: red">0</span>.<br /><br />ORA gives an output of <span style="color: green">1</span> if either input bit is one. (If input bit 1 is <span style="color: green">1</span> [true] OR  input bit 2 is <span style="color: green">1</span>[true], the result is <span style="color: green">true</span>.) See how it got its name?<br /><br />So ORA will return <span style="color: green">1</span> in every case except case <span style="color: violet">1</span>. It will return <span style="color: red">0</span> in case <span style="color: violet">1</span>.<br /><br />EOR (Exclusive OR) gives an output of <span style="color: green">1</span> if EXACTLY one of the input bits is <span style="color: green">1</span>. (If input 1 and ONLY input is <span style="color: green">1</span> [true], the result is <span style="color: green">true</span>. If input 2 and ONLY input 2 is <span style="color: green">1</span>[true], the result is <span style="color: green">true</span>)<br /><br />So EOR will return <span style="color: green">1</span> only in case <span style="color: blue">3</span>, otherwise it gives <span style="color: red">0</span>. <br /><br />Now, at a basic level they work one bit at a time. The instructions work a byte at a time with corresponding bits in a byte.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp;#%00000000<br />&nbsp; &nbsp; &nbsp; &nbsp;^^^^^^^^<br />&nbsp; &nbsp; &nbsp; &nbsp;||||||||<br />BIT#:&nbsp; 76543210<br />&nbsp; &nbsp; &nbsp;#%00000000<br /></div><br />They check and return the result of bits 7 in each byte, and while that check is happening what's in bits 6-0 doesn't matter. Then it does bits 6, and while that check is happening what's in bits 7 and 5-0 doesn't matter. Etc.<br /><br />AND is useful for checking the status of a specific bit, because by definition of AND, a bit with a <span style="color: red">0</span> in either byte will return <span style="color: red">0</span>.<br /><br />So if you AND with a number that has 7 bits as <span style="color: red">0</span>, the result of those seve  bits will be <span style="color: red">0</span>. That means the bit you left <span style="color: green">1</span> in the AND determines whether the accumulator is <span style="color: red">0</span>, or <span style="color: green">non-0</span>.<br /><br />Another use for AND is clearing a bit (setting it to <span style="color: red">0</span>). #%01111111 will clear the leftmost bit without changing the others. The <span style="color: red">0</span> is guaranteed to clear the high bit because the 0 means both bits CAN'T be <span style="color: green">1</span>, and the 7 ones guarantee the other bits won't change.<br /><br />EOR is useful for toggling a bit (<span style="color: red">0</span>-&gt;<span style="color: green">1</span> or <span style="color: green">1</span>-&gt;<span style="color: red">0</span>). This is because a 0 in an EOR is guaranteed to not change the bit it is being EOR'd with, while a 1 in an EOR is guaranteed TO change the bit it is being EOR'd with.<br /><br />ORA is useful for setting a bit to 1. This is a because a 1 is guaranteed to give a result of <span style="color: green">1</span>, while a 0 will never change the bit you are ORA'ing with.</div>
<br />Kasumi, thanks for helping us!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  The logic surrounding your cases is interesting. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  : )  There are shortcuts or cycles that can be saved, right?  I have tried to think of one, but I can't think of anything...  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sun Jan 15, 2012 11:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">No underflow?</div><br />You know how sbc works, right? <br />Let's assume the carry is set before the sbc. Let's assume we're working with unsigned numbers. (#$FF = 255. Signed would mean #$FF = -1)<br />So this<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; sbc foo<br /></div><br />will subtract foo from the accumulator. If the accumulator ends up as a larger number than what you started with (example: 0 - 1 = 255), the carry is cleared. That's underflow. If there was no underflow, the carry stays set.<br /><br />(Overflow is the term for addition when you end up with a number lower than what you started with [example: 255+1 = 0])<br /><br />CMP does nearly the exact same thing as SBC, except for two things:<br />1. CMP doesn't care about the carry flag's status before it's run. It could be cleared and an extra one would not be subtracted.<br />2. CMP doesn't store the result of the subtraction in the accumulator. A never changes.<br /><br />CMP (or even SBC) works to compare numbers because cmping a larger number guarantees the carry will be clear, and vice versa. Think: If you subtract a larger number from a smaller number you will always pass 0. (And wrap to #$FF on the 6502.)<br />If the number you subtract is the same, the carry stays sets and the zero flag is set because the result is 0.<br /><br />What tokumaru was suggesting works because anything cmp'd with 0 that is not 0 gives a result that is not 0. And anything that is not zero clears the 0 flag.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda byte<br />and #%00010000;This guarantees the accumulator is either <br />;#%00000000 &#40;beq would branch&#41;<br />;or <br />;#%00010000 &#40;bne would branch&#41;<br /><br />;If you cmp #%00010000, it actually reverses that for reasons that should be clear given the above explanations.<br />cmp #%00010000<br />;if the accumulator has #%00000000 bne would branch. #%00000000 - #%00010000 is not 0.<br />if the accumulator has #%00010000 beq would branch. #%00010000 - #%00010000 is 0<br /></div><br /><br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">There are shortcuts or cycles that can be saved, right?  I have tried to think of one, but I can't think of anything...  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /></div>
<br />Optimization is my favorite business, but it's a tricky, possibly dangerous one that's always specific to what you want to do. Get your code to work first, then make it fast. 
<br />
<br />Quick tips: 
<br />Even though I just typed a book describing it, avoid cmping to reverse the 0 flag. <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> If you just use the other branch, you can avoid the cmp which always makes sense to me.
<br />
<br />You shouldn't ever have to and #%10000000 to check that bit because bpl and bmi already check that highest bit when it's loaded
<br />
<br />BIT puts the highest two bits (marked X) #%XXYYYYYY into flags you can branch on, but only for variables stored in a static place.
<br />
<br />Because of that I always place the two things the need to be checked most often in those bits when I write data formats.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 15, 2012 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know Kasumi already explained a lot but I still want to say a few things.
<br />
<br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">No underflow?  So water will not flow under the subtraction and that sets the carry? (trying to get you to teach me more about "underflow" - im interested)  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />An overflow is when the result is too large to be represented by the accumulator, and an underflow is when it's too small. <br /><br />For unsigned numbers, an overflow is when an addition results in a number larger than 255, and an underflow is when the result of a subtraction is less than 0. For signed numbers, an overflow means an addition with a result larger than 127 and an underflow is a subtraction with a result of less than -128.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Because of that I always place the two things the need to be checked most often in those bits when I write data formats.</div>
<br />I often put my flags in the top 2 bits as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Feb 01, 2012 7:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you Kasumi and tokumaru! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> 
<br />
<br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">First disable rendering... by writing the relevant bits to $2000</div>
<br />How do I disable rendering?  <a href="http://wiki.nesdev.com/w/index.php/PPU_registers#Controller_.28.242000.29_.3E_write" class="postlink">The 7th bit of $2000</a> starts or stops an NMI from running at the start of vertical blanking.  Does that somehow disable rendering?  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Feb 01, 2012 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">First disable rendering... by writing the relevant bits to $2000</div><br />How do I disable rendering?  <a href="http://wiki.nesdev.com/w/index.php/PPU_registers#Controller_.28.242000.29_.3E_write" class="postlink">The 7th bit of $2000</a> starts or stops an NMI from running at the start of vertical blanking.  Does that somehow disable rendering?  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div>
<br />Kasumi probably meant $2001, where bits 3 and 4 enable or disable background and sprite rendering. To disable rendering you have to clear both bits.
<br />
<br />Bit 7 of $2000 controls whether NMIs fire or not when VBlank starts, but the rendering process isn't affected at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Feb 01, 2012 8:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tokumaru, thank you so much! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Feb 02, 2012 2:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru<span style="color: orange">, from <a href="http://nesdev.com/bbs/viewtopic.php?p=85297#85297" class="postlink">page 27</a>,</span> wrote:</div><div class="quotecontent">Do you want to use different data for each level or something like that? If that's the case, then the answer is the indirect indexed addressing mode (i.e. <strong>LDA ($XX), Y</strong>). With that addressing mode you use pointers to define the tables that will be read, and you can alter the pointers as much as you want.<br /><br />For example, you could have a different name for each collision table (or whatever table you want), and then make a table with all the addresses:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MetatileCollisionAdresses:<br />&nbsp; &nbsp;.dw MetatileCollisionLevel1, MetatileCollisionLevel2, MetatileCollisionLevel3</div><br />Then you can read the address for the current level and put it in a pointer using the level's index</div><br />When you say <strong>level's index</strong> that could be 1 for level1 and 2 for level2 right?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda LevelIndex ;get the level's index<br />&nbsp; &nbsp;asl ;multiply by 2 because each address is 2 bytes<br />&nbsp; &nbsp;tax ;use that as an index into the table of addresses<br />&nbsp; &nbsp;lda MetatileCollisionAdresses+0, x ;copy the low byte<br />&nbsp; &nbsp;sta MetatileCollision+0<br />&nbsp; &nbsp;lda MetatileCollisionAdresses+1, x ;copy the high byte<br />&nbsp; &nbsp;sta MetatileCollision+1</div><br /></div><br />MetatileCollision isnt set up for an address of 2 bytes...  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then you can use indirect indexed addressing to read the data, instead of what we had before. The only real difference is that now you'll have to use Y as your index register, because this addressing mode doesn't work with X:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;;get collision information <br />&nbsp; &nbsp;lda &#40;MetatileCollision&#41;, y</div><br /></div>
<br />
<br />I'm attempting to use this, for the first time, it's kind of confusing and kind of something to learn from.  Hope it becomes less of the former and more of the latter; it will. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>30</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>