<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NMI handling and is there a delay or not?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NMI handling and is there a delay or not?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1926">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1926</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kinopio</b> [ Tue Aug 22, 2006 7:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NMI handling and is there a delay or not?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I hope that this isn't already answered somwhere else but the search function seems to not be working. 
<br />
<br />I'm making an NES emulator just for fun. It's using a catch-up design with timestamps and can catch-up other components in the middle of a CPU instruction. It can run many simple demos and games and passes many test roms. No sound yet.  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />  So only CPU, PPU and simple mappers are emulated.
<br />
<br />Before starting to add more things I wanted to design a system to handle everything that can interrupt the CPU's normal execution like NMI, IRQ, DMA, DMC etc. But I ran into trouble almost directly with just trying to get NMI working correctly. I use Blargg's vbl_nmi_timing test roms for testing and I pass tests #1-#4, but not the last three. In test #5 nmi_supression I either get error #3 or #4.
<br />
<br />I made a diagram for these tests. I hope it makes some sense and that it's correct:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; read 0x2002&nbsp; &nbsp; &nbsp;| write 0x2000 <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | returns | sets |&nbsp; &nbsp; &nbsp;| disable NMI<br />ppu clock | vbl as&nbsp; | vbl&nbsp; | NMI | NMI<br /><br />-4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; yes&nbsp; &nbsp;no<br />-3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; yes&nbsp; &nbsp;no<br />-2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; yes&nbsp; &nbsp;no<br />-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; no&nbsp; &nbsp; no&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBlank suppressed<br />0 &#40;VBlank&#41;&nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; no&nbsp; &nbsp; no&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;-Why?<br />1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; no&nbsp; &nbsp; no&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;-Why?<br />2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; yes&nbsp; &nbsp;yes<br />3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; yes&nbsp; &nbsp;yes<br />4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; yes&nbsp; &nbsp;yes<br /></div>
<br />
<br />
<br />
<br />Now some questions:
<br />
<br />1. Is vblank flag set before or after the first cycle in vblank? Or where exactly is cycle 0 from the diagram?
<br />
<br />2. NMI is edge-triggered right? Then why is NMI suppressed on cycle 0 and 1? The condition for NMI (Vblank and NMI) is true before both.
<br />If there is no delay between condition and NMI it should be generated on these cycles shouldn't it? It seems to me that this edge must last for 3 PPU-clocks to be generated or is it one CPU-clock to accommodate for PAL where one CPU-clock is 3.2 PPU-clocks not 3? Maybe it need to last this long to filter out electrical interference.
<br />
<br />3. Am I right if I say that PPU generates NMI with no delay but the CPU
<br />need at least one extra cycel to catch it? <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> 
<br />
<br />4. Could someone please describe how NMIs are generated and how the CPU handles them. Very detailed and low-level would be nice. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> 
<br />
<br />
<br />Maybe I'm just stupid or NMI suppression on cycle 0 and 1 are just special cases.
<br />
<br />Finally I'm wondering if someone have come up with a nice, simple and fast way of dealing with things that can interrupt the CPU in a catch-up emulator?
<br />
<br />Any help is much appreciated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Aug 23, 2006 10:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice diagram! I compared it to the readme with the VBL/NMI tests and it looks to be correct. All my tests validate only CPU behavior, and I don't have the equipment to easily test what's actually going on at the hardware level. It's be really nice to know when the /NMI line to the CPU is actually asserted, since the tests leave several possibilities open. At the very least, it'd give a concrete explanation for the behavior and probably help predict other behavior that hasn't been tested yet.
<br />
<br />1. Since reading the VBL flag near the time it's set affects its behavior, the idea of it being set at a definite time seems to be an imaginary concept, sort of a NES quantum mechanics! Since the only way to find the value of the VBL flag is to read from $2002 (even if we hook external hardware to the NES internals), I don't know any way to get a better answer.
<br />
<br />2. The NMI input on the 6502 is edge-triggered, so once it's been asserted for some minimum amount of time, the interrupt will occur within an instruction or two. A hardware test would help for the suppression cases to see whether the PPU is never asserting /NMI, or whether it's asserting it for a very short amount of time and isn't being latched by the 6502. I'm not sure whether /NMI is either sampled every CPU clock and latched if asserted, or connected directly to a flip-flop and trips it even with an assertion just a few tens of nanoseconds wide.
<br />
<br />3. The 6502 uses a pipeline and the last clock of each instruction is always overlapped with the first clock of the next instruction (fetching its opcode). This means that for an interrupt to occur immediately after the current instruction, IRQ or NMI must be asserted sometime <em>before</em> the last clock of the current instruction, otherwise the overlapped first clock of the next instruction will have already begun. This introduces apparent one-instruction delays in interrupt handling (even when changing the flags with instructions like CLI, which I might have a test ROM for in a few days).
<br />
<br />All this interrupt handling, delays, suppression, etc. is still unclear to me and I hope we some day come up with an absolutely clear description of and explanation for the behavior.
<br />
<br />As for implementing this efficiently in a catch-up emulator, you basically need a CPU emulator that can efficiently stop at a given time, and can have this stop time changed during an emulation run. A simple way to handle this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int end_time; // time to stop at; set to 0 to stop CPU immediately<br />int cpu_time; // current time<br /><br />void emulate_cpu&#40;&#41;<br />&#123;<br />&nbsp; &nbsp; while &#40; cpu_time &lt; end_time &#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; int opcode = read_mem&#40; pc &#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; &#125;<br />&#125;</div>
<br />
<br />You'd set end_time to the earliest CPU-altering event that can occur (i.e. the next NMI, or next IRQ if it's sooner) and then emulate the CPU. During this, whenever the CPU does something that could alter the earliest CPU-altering event (i.e. enables NMI, adjusts when IRQ will occur), adjust end_time appropriately. There are some fine points I haven't worked out yet, like when an interrupt will occur just after the current instruction, but the instruction itself disables the interrupt source and causes end_time to be changed, even though the interrupt should still occur since it was latched at the last clock of the instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Aug 24, 2006 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">All this interrupt handling, delays, suppression, etc. is still unclear to me and I hope we some day come up with an absolutely clear description of and explanation for the behavior.</div>
<br />
<br />I've studied this very extensively on the SNES hardware, and all descriptions I've seen indicate NMI and IRQ work the same way as on the NES.
<br />The advantage I have with the SNES is being able to step by the smallest slice of time and repeatedly test. Along with my emulator, I can tell <em>exactly</em> what clock position resulted in what behavior. I've tested all interations between enabling and disabling interrupts before and after they occur, retriggering interrupts, reading the interrupt status bits, etc quit exhaustfully.
<br />
<br />I believe I have very clear explanations of how this works. If you're willing to write the documentation, then catch me on AIM sometime and I will explain it to you in as much detail as you like. I think I can even explain the reasons behind nearly all of the behavior. In short, I believe it is due to bus hold delays, but we can go over that in more detail later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kinopio</b> [ Fri Aug 25, 2006 12:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for your reply Blargg.
<br />
<br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">All my tests validate only CPU behavior, and I don't have the equipment to easily test what's actually going on at the hardware level. It's be really nice to know when the /NMI line to the CPU is actually asserted, since the tests leave several possibilities open. At the very least, it'd give a concrete explanation for the behavior and probably help predict other behavior that hasn't been tested yet.<br /></div><br /><br />Does this mean that even if an emulator passes your tests it can<br />still have wrong timing (very small)? Correct CPU behavior and<br />timing should be enough for even the most timing sensitive games<br />shouldn't it? <br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">This introduces apparent one-instruction delays in interrupt handling (even when changing the flags with instructions like CLI, which I might have a test ROM for in a few days).<br /></div>
<br />
<br />Yeah! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />More tests for my emulator to fail on. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />
<br />I love your tests Blargg they are invaluable to emulator makers.
<br />Keep 'em coming!
<br />
<br />Your example for handling interrupts is very similar to my current design.
<br />But as you point out it is a bit tricky to determine when and if the interrupt should be executed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kinopio</b> [ Fri Aug 25, 2006 12:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That sounds very interesting byuu. 
<br />
<br />Do you think you could explain why NMI is suppressed on PPU-cycle
<br />0 and 1 in my diagram? Is it because of the CPU's pipeline and bus hold delays?
<br />
<br />What exactly do you mean by bus hold delays by the way? Is it the
<br />two-phase thingy the CPU uses to do reads and writes? Where writes
<br />are made at the end of a cycle and reads in the middle?  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> 
<br />
<br />How do you emulate this and is it even necessary in an emulator
<br />where a more high-level approach often is used?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Aug 26, 2006 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does this mean that even if an emulator passes your tests it can still have wrong timing (very small)? Correct CPU behavior and timing should be enough for even the most timing sensitive games shouldn't it?</div>
<br />
<br />I mean that a test ROM can only test those things that actually matter (affect the result). The benefit to knowing what exactly is happening in hardware is that it offers a simple explanation of why things work the way they do, and can make further testing easier. Knowing exactly what's happening isn't necessary for perfect emulation, though, since the behavior is all that matters, and that can be determined by running code on the 6502 and noting the results.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>