<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 6502 ASM trick</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">6502 ASM trick</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sun Apr 13, 2008 2:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Speaking of 6502 tricks, I just figured out how many times I had to do 4 consecutive ASL A or LSR A, so I just made 2 routine that does them and return, and call them, saving one byte everytime this trick is used. I was able to save about 30 bytes doing that, which is great.</div>
<br />
<br />I was thinking about a trick to do divisions by 16/multiplications by 16. If you wanted to save about 3 cycles, you could do something like this:
<br />
<br /> ldx SomeVariable
<br /> lda Table,x
<br />
<br />Table:
<br /> .db $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
<br />
<br />That would be good for needing to multiply 4-bit values by 16. But you could make a 256-byte table that holds those values every $10 bytes, so you could multiply 4-bit values by 16 and save 3 cycles. The same could be applied for dividing, but it would pretty much require a 256-byte table. while it's a huge waste of ROM, it may end up saving you a scanline or two from the very frequent divisions/multiplications of 16.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Apr 14, 2008 1:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">That identity thing is a bit fun, it's true it allows easy and fast operations with index registers (adding, substract, and even and, or etc..)</div>
<br />Hey, I just thought of another very good use for the identity table:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx identity, y</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldy identity, x</div>
<br />
<br />These work like TYX and TXY, which obviously don't exist. I was just coding my game and felt the need to do a TYX, when I noticed this could in fact be done with the table. Seriously, for anyone that still thinks that this table is not worth the 256 bytes it uses: It really increases the functionality of X and Y, usually saving RAM that would be used as temporary storage, and saving ROM that would be used by the extra code needed to perform the same tasks. This table makes me feel like I gained a lot of new opcodes. =) If you can spare a bit of ROM, you really should use this table.
<br />
<br />EDIT: I'm almost creating some macros named like the pseudo-opcodes resulting from the functionality provided by this table... It'd be like <strong>legal</strong> undocumented opcodes! =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Apr 14, 2008 10:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />These work like TYX and TXY, which obviously don't exist. I was just coding my game and felt the need to do a TYX, when I noticed this could in fact be done with the table. Seriously, for anyone that still thinks that this table is not worth the 256 bytes it uses: It really increases the functionality of X and Y, usually saving RAM that would be used as temporary storage, and saving ROM that would be used by the extra code needed to perform the same tasks. This table makes me feel like I gained a lot of new opcodes. =) If you can spare a bit of ROM, you really should use this table.<br /></div>
<br />Well, you need a couple of temporary storage variables ANYWAY whathever you're going to do. I remember having lot of headaches to stick with only 4 temporary variables, and whenever I need more I use different named half-general purpose variables.
<br />Also, even if it could save a couple of byte in the code at a couple of places, I guess it would be very rare to actually save 256 bytes that way. You'll do it only if you have unrolled loop with use of this table inside of something like that. So memory-wise, this isn't a good solution, but time-wise or easy-to-use wise, maybe it is.
<br />
<br />Also, TXA/TAY and TYA/TAX takes 1 less byte than ldx Identity,Y and ldy Identity,X, and take the exact same time so I don't know why you'd want to do this. And yeah it overwrites A, but usually in a single loop/iteration you affect X and Y to a single usage so I don't see much the trick. The only reson it would be really usefull is if you use an instruction like rol $xx,X which can't be done with Y, and then sta [$xx],Y which can't be done with X, but you want the same "index", and you don't want to overwrite A in the process, so yeah in that case it's usefull, but that's not really frequent.
<br />
<br />Honnestly, with 256 bytes you can have a very large additional level in your game or a new music with 3 tracks, wich are much better usage than a stupid identity table.
<br />
<br />@Celius : Yeah your idea should be great for the other guys that want really fast code, however it's not great for me who want to save bytes, even if that slow the process a little. Using your trick uses 5 bytes instead of 4, or even instead of 3 if you have a subroutine that does 4 ASL and RTS (I do, and as mentionned above I use it above 25 times in the whole code).
<br />And if you want the equivalent table for LSR, you could have an assembler place a byte with $00, $01, $02, etc... all 16 bytes and manage to have 15 very small subroutine that takes 15 bytes or less intervealed in here. Such things that a routine that polls $2002 and return, or write to the mapper while avoidinc bus conflicts, etc... I'm pretty sure a complete game engine would have 15 routines that takes 15 bytes or less.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Mon Apr 14, 2008 10:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i just recently discovered the BIT trick:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Sub1:&nbsp; &nbsp;ldx #00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; .db $2C<br />Sub2:&nbsp; &nbsp;ldx #07<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; .db $2C<br />Sub3:&nbsp; &nbsp;ldx #11<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; stx somewhere<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ; go about business<br /></div>
<br />
<br />its not terribly useful, but has its moments.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Fri Apr 13, 2012 2:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can't resist bumping this old thread to mention I've found a use for combining BIT and the identity table.
<br />
<br />I kind of really miss the bit immediate instruction available on the 65C02. There's quite a few cases where I'd like to test certain bits in a byte with a bitwise AND without destroying the contents of the accumulator:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda mapFlags,X<br />bit #FLAG1+FLAG2<br />beq :+<br />jsr DoSomething<br />:<br />bit #FLAG5+FLAG6<br />beq :+<br />jsr DoSomeOtherThing<br />:<br /></div><br /><br />But even though the bit immediate instruction is not there, it could be emulated with BIT absolute and an identity table, using 1 more byte and 2 more cycles:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda mapFlags,X<br />bit Identity+FLAG1+FLAG2<br />beq :+<br />jsr DoSomething<br />:<br />bit Identity+FLAG5+FLAG6<br />beq :+<br />jsr DoSomeOtherThing<br />:<br /></div>
<br />
<br />A more optimized way would of course be to reserve a few zeropage bytes for the combinations you really need to test, but that's not as generic. Though with a powerful enough macroassembler, I guess you could have a BIT immediate macro that employs the identity table as a safe fallback, but uses zeropage locations for the most popular combinations. :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Apr 15, 2012 7:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If your doing 65816 in 16-bit mode, it would need to be a hiROM cart either at a $40-$7d bank or a $80-$ed bank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Mon Apr 16, 2012 1:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">The same could be applied for dividing, but it would pretty much require a 256-byte table. while it's a huge waste of ROM, it may end up saving you a scanline or two from the very frequent divisions/multiplications of 16.</div>
<br />
<br />
<br />Here's the code I use to divide 12-bit numbers by 16 with an 8-bit quotient (n = $000 to $FFF):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;&nbsp; &nbsp;assume Y holds &quot;n&quot; lsb, X holds &quot;n&quot; msb, A will have result<br />&nbsp; &nbsp;lda m16tbl_hi, Y<br />&nbsp; &nbsp;ora m16tbl_lo, X<br /></div><br /><br />and the tables:<br /><br /><strong>m16tbl_hi</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00<br />01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01<br />02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02<br />03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03<br />04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04<br />05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05<br />06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06<br />07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07<br />08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08<br />09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09<br />0A 0A 0A 0A 0A 0A 0A 0A 0A 0A 0A 0A 0A 0A 0A 0A<br />0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B<br />0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C<br />0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D<br />0E 0E 0E 0E 0E 0E 0E 0E 0E 0E 0E 0E 0E 0E 0E 0E<br />0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F<br /></div><br /><br /><strong>m16tbl_lo</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br />00 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0<br /></div>
<br />
<br />I think it can be extended to work with 16-bit numbers by using X to index into m16tbl_hi for the high byte. I haven't verified it though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Apr 16, 2012 10:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You know Baramos it was a great idea to revive this thread.
<br />How many times I've had to do something like
<br />
<br />pha
<br />and #$xx
<br />...blah blah
<br />pla
<br />...blah blah
<br />
<br />when the BIT instruction would have been better but couldn't be used because there is no BIT immediate !
<br />Without going as far as having a 256 byte identity table, simply use .db with the constant you need (this is a single byte table...)
<br />Since you'd usually do the bit instruction with only a single bit set, and that bit 7 can be directly tested with the N flag, a 7-byte table should be enough for anything (in fact only 6 will be necessary - I'll explain below) :
<br />.db $01, $02, $04, $08, $10, $20, $40
<br />
<br />
<br />Also I've found another trick which is so simple but worth mentionning. If you load a value in A, the only bit you can "quickly" test is the 7th one, with the N flag.
<br />But if you use the ASL A instruction then you can "quickly" then C=7th bit and N=6th bit, so you can quickly test 2 bits without using AND or BIT instructions ! Pretty useful !
<br />
<br />Another very simple, but clever thing is to keep that in mind : If you made a subroutine that you're only going to call once in your code, then replace it by a macro. You'll save a 6 cycles and 4 bytes (assuming there were no branch instructions around the call). This make the code as structured as if it was a subroutine and you can always change back to a subroutine if you are going to call it somewhere else.
<br />
<br />Finally, how many times you call a subroutine and you need more than 3 bytes of arguments ? (more than what A, X and Y can handle) ?
<br />Well the solution to that comes from SMB disassembly...
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr MyRoutine<br />&nbsp; &nbsp;.dw Pointer1, Pointer2&nbsp; &nbsp;;4 bytes arguments<br /><br />MyRoutine<br />&nbsp; &nbsp;jsr GetArguments<br />&nbsp; .....<br />&nbsp; &nbsp;rts<br /><br />GetArguments<br />&nbsp; &nbsp;tsx<br />&nbsp; &nbsp;lda $103,X&nbsp; &nbsp; &nbsp;;Get return adress from the stack<br />&nbsp; &nbsp;sta PtrL<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #$04&nbsp; &nbsp; &nbsp;;Add 4 to return adress<br />&nbsp; &nbsp;sta $103,X<br />&nbsp; &nbsp;lda $104,X<br />&nbsp; &nbsp;sta PtrH<br />&nbsp; &nbsp;adc #$00<br />&nbsp; &nbsp;sta $104,X<br />&nbsp; &nbsp;ldy #$04&nbsp; &nbsp; &nbsp; &nbsp;;Copy arguments to Temp variables<br />-&nbsp; lda &#91;Ptr&#93;,Y&nbsp; &nbsp; &nbsp;;We should not forget the adress in the stack is return adress -1 !<br />&nbsp; &nbsp;sta Temp-1,Y<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;bne -<br />&nbsp; &nbsp;rts<br /></div><br /><br />Sure the GetArgument routine can be pretty long and bit, but in the end, it will save you possibly hundred of times to do something like :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda #BlahBlah<br />&nbsp; &nbsp; sta Temp<br />&nbsp; &nbsp; lda #BlahBlah<br />&nbsp; &nbsp; ldy #BlahBlah<br />&nbsp; &nbsp; ldx #Blah<br />&nbsp; &nbsp; jsr Routine<br /></div>
<br />So this saves aproximately 6 bytes for each call, with can end up a lot if this is done frequently.
<br />
<br />My GetArguments routine is 32 bytes, so if you use this trick more than 10 or so times it's definitely a gain.
<br />However you can't use variable arguments unless you place your code in RAM (which ends up being unpractical on the NES as you'll have to copy it here).
<br />
<br />I wonder if there is any way to improve this argument thing to save even more bytes, I have some feeling that it is possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Apr 16, 2012 11:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">when the BIT instruction would have been better but couldn't be used because there is no BIT immediate ! </div>
<br />
<br />The special case where you want to BIT #$80, #$40, #$20, etc should be doable without destroying A:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda foobar<br />bmi bit7_set<br />cmp #$40&nbsp; ; we know that bit 7 wasn't set<br />bcs bit6_set<br />cmp #$20<br />bcs bit5_set<br />; and so on<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Tue Apr 24, 2012 10:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />However you can't use variable arguments unless you place your code in RAM (which ends up being unpractical on the NES as you'll have to copy it here).<br /><br />I wonder if there is any way to improve this argument thing to save even more bytes, I have some feeling that it is possible.</div>
<br />
<br />Coincidentally there's a similar discussion (inlining paramters) on
<br />AtariAge. 
<br />
<br />Don't know if I'd call it an improvement but I have used code something
<br />like this.
<br />The list is zero terminated the code consumes a pair of zeros and outputs
<br />a single zero, an unpaired zero terminates the list.
<br />the first two bytes are the address of the target routine.
<br />it only deals with the least significant byte of the return address so the 
<br />parameter list can't srtraddle a page boundary. 
<br />Pointer needs to be inialized to zero.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GET_PARAMETERS<br />&nbsp;pla<br />&nbsp;tay<br />&nbsp;pla<br />&nbsp;pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; put the high byte back<br />&nbsp;sta pointer+1<br />&nbsp;ldx #$00<br />&nbsp;beq SKIP<br />LOOP <br />&nbsp;sta parameters,x<br />&nbsp;inx<br />SKIP<br />&nbsp;iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; pointing one short first pass here fixes that <br />&nbsp;lda &#40;pointer&#41;,y <br />&nbsp;bne LOOP&nbsp; &nbsp; &nbsp;<br />&nbsp;iny<br />&nbsp;lda &#40;pointer&#41;,y <br />&nbsp;beq LOOP&nbsp; &nbsp; &nbsp;<br /><br />&nbsp;dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; fix the return address guess we can't return to a<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; break&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp;tya <br />&nbsp;pha <br />&nbsp;jmp &#40;parameters&#41;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>krzysiobal</b> [ Thu Apr 26, 2012 6:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How to check if a number at mem_ptr is a power of 2?
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx mem_ptr<br />dex<br />txa<br />and mem_ptr<br />be power_of_two<br />;it is not a power of two<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Apr 26, 2012 8:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">krzysiobal wrote:</div><div class="quotecontent">How to check if a number at mem_ptr is a power of 2?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx mem_ptr<br />dex<br />txa<br />and mem_ptr<br />be power_of_two<br />;it is not a power of two<br /></div></div>
<br />As long as mem_ptr is not 0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Apr 27, 2012 12:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well you could say that 2^(-infitine) = 0, therfore 0 is a power of two
<br />but it's a bit cheating.
<br />
<br />@bogax : I think your approach is interesting.
<br />I like the idea of using pla instructions cleverly to retrieve the return adress !
<br />However, in many cases you'll need more than a single subroutine which uses the "advanced argument" system.
<br />Therefore of course you do not want to copy ALL the argument fetching code in ALL the routines that uses the system, or else it will waste a lot of space, killing the idea of this advanced argument system.
<br />
<br />This is why in my example, the called routine starts by calling itself the argument fetching routine, which reads 3 bytes ahead in the stack (it ignores it's own return address and goes to the return address before that).
<br />
<br />And yet I am still sure there is a way to improve it...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Fri Apr 27, 2012 9:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">@bogax : I think your approach is interesting.<br />I like the idea of using pla instructions cleverly to retrieve the return adress !<br />However, in many cases you'll need more than a single subroutine which uses the "advanced argument" system.<br />Therefore of course you do not want to copy ALL the argument fetching code in ALL the routines that uses the system, or else it will waste a lot of space, killing the idea of this advanced argument system.<br /><br />This is why in my example, the called routine starts by calling itself the argument fetching routine, which reads 3 bytes ahead in the stack (it ignores it's own return address and goes to the return address before that).<br /><br />And yet I am still sure there is a way to improve it...</div>
<br />
<br />I'm not sure I understand your objection.
<br />Rather than JSR to a routine that then JSRs to the argument fetching
<br />code you just JSR to the argument fetching code supplying it with
<br />the address of the routine you want to JSR to as a parameter
<br />which the argument fetch code then jumps to.
<br />You shouldn't need to duplicate the argument fetch code, but you
<br />have to include the argument fetch routine address in each JSR
<br />to a routine that uses the argument fetching code (while saving
<br />a JSR to the argumewnt fetch code in each of those routines)
<br />And while it may save a little messing with the stack, it  costs
<br />25 cycles or so.
<br />Like I said, I'm not sure it's any improvement 
<br />but it will fetch a variable number of arguments.
<br />Perhaps it would make more sense to do something closer to
<br />your code, but pass it the number of arguments.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Apr 28, 2012 2:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry - my bad - I didn't think hard enough.
<br />
<br />I haven't decided really if "my" (really Nintendo's) solution or yours solution is better.
<br />I should take the time to analyze of much bytes each solution saves.
<br />
<br />Anyway I think your solution is very elegant, while mine would need a "jsr FetchArguments" at the start of every routine which needs arguments - so I think your solution is probably better.
<br />
<br />
<br />I wonder if there should be a wiki page about 6502 asm optimisations, as it might be easier to find info from a wiki page than from a thread that is eventually going to be at the 432nd page even if the forums are fully preserved.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>