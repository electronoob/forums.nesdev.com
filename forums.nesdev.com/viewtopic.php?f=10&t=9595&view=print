<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How to do multiple things at once?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How to do multiple things at once?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9595">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9595</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Dec 09, 2012 5:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How do games (on any system) do multiple things at once? For example, take a simple stage in Super Mario Bros. Many things are happening at the same time: Mario is moving/jumping around, multiple enemies are walking around, and music is playing. But most systems (including the NES's 6502) have only a single (and slow, by modern standards) processor, so this must be a fa√ßade of some sort. How are all these actors/events synchronized?<br /><br />My thought is that perhaps there's a main loop that computes and updates only the next immediate state/action/position for each actor/event, and then loops again. Like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">main() {<br />&nbsp; while(true) {<br />&nbsp; &nbsp; updateMario();<br />&nbsp; &nbsp; updateEnemy1();<br />&nbsp; &nbsp; updateEnemy2();<br />&nbsp; &nbsp; updateEnemy3();<br />&nbsp; &nbsp; updateMusic();<br />&nbsp; }<br />}</div><br /><br />And here's another question that's almost the same as the last, but not really relevant to the NES: How does an operating system implement having separate processes and threads, and how does it stop one process or thread that is stuck in an infinite loop from freezing the whole system?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Dec 09, 2012 6:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">My thought is that perhaps there's a main loop that computes and updates only the next immediate state/action/position for each actor/event, and then loops again.</div><br />That's exactly it. Each object (and by object I mean not only game objects, but any entity that takes part in the functioning of the program) gets a chance to update its state, taking into consideration whatever data it deems necessary (i.e. some objects observe the states of other objects in order to make their decisions). Really, it's all just about computing the next step.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How does an operating system implement having separate processes and threads, and how does it stop one process or thread that is stuck in an infinite loop from freezing the whole system?</div><br />Can't help you much with that... =P I did have some classes about this in college, but they were very superficial and theoretical.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Dec 09, 2012 6:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Operating systems use an interrupt to &quot;preempt&quot; an application, saving all registers and loading those of the next task. Each application has its own stack and heap, and in fact, each executes in a separate bank of RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Dec 09, 2012 6:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's exactly it. Each object (and by object I mean not only game objects, but any entity that takes part in the functioning of the program) gets a chance to update its state, taking into consideration whatever data it deems necessary (i.e. some objects observe the states of other objects in order to make their decisions). Really, it's all just about computing the next step.</div><br />Getting that right makes me feel better. In theory then, if I ran SMB instruction by instruction, I should see each object move one at a time, right?<br /><br />The next question then is how things are organized so that the game doesn't go fast when there's few objects on screen, and then slow when there's many, but instead at a constant rate. I suppose that one counts cycles, and makes sure that the cycles always add up to a certain number? This must be tricky to do when branching is included. Do modern games do something different?, because this seems awfully complicated.<br /><br />And how does one choose what number to count to? Too low and the game's too fast, too high and the game's too slow, but the number must still be high enough for the whole update loop to run.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Dec 09, 2012 6:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Games wait for vblank.  Then they don't care how few objects there are on the screen.  You only get a problem with slowdown when there are too many objects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sun Dec 09, 2012 6:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Regarding the initial OS question, it's basically some sort of timer IRQ that get the CPU out of the current process, save the context of the current process and then execute some kernel code to know which process to run next (a scheduler). My description is severely over-simplified as the details get pretty complex but you get the basic picture.<br /><br />EDIT: ninja'd by tepples.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Dec 09, 2012 6:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Games wait for vblank.  Then they don't care how few objects there are on the screen.  You only get a problem with slowdown when there are too many objects.</div><br />1) VBlank happens 60 times per second in NTSC, and 50 times per second in PAL, right?<br />2) How do you &quot;wait&quot; for it? How long is a single cycle?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Dec 09, 2012 6:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Once again, interrupts.<br />On the NES, there are several ways to actually write the code, but here's one of them:<br /><br />NMI:   (this runs when vblank happens)<br />...<br /> inc vblanked  (change the number to something that's not 0)<br />...<br /><br />WaitForVblank:  (this runs when the code wants to wait for vblank)<br /> lda #0<br /> sta vblanked  (set the number to 0)<br />waitloop:<br /> lda vblanked<br /> beq waitloop  (repeatedly check if the number has changed from 0 to something else)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Dec 09, 2012 6:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">1) VBlank happens 60 times per second in NTSC, and 50 times per second in PAL, right?</div><br />Yes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) How do you &quot;wait&quot; for it? How long is a single cycle?</div><br />The PPU generates an NMI interrupt every time VBlank starts. You just have to wait for that to happen. The simplest way to do this is to prepare an NMI handler that changes a flag (it can be as simple as <strong>INC VBlankFlag; RTI</strong>). Then, after the processing of all game objects, make a loop that waits for this flag to change before looping back and processing all game objects again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Dec 09, 2012 6:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your question about avoiding infinite loops shows that you're thinking in terms of &quot;cooperative&quot; software, where the OS waits for it to say it's done. Interrupts provide the opposite: a way for something hardware (not software) to forcefully stop the current code and execute something else. With threads, the thing interrupting is a timer, so that the OS can regularly switch to another thread and give them each a slice of time. So it ends up looking like your example where each thing runs for a bit at a time, but without having to arrange for exactly where the switch occurs. It's less predictable, but less work and more reliable since you can't forget to allow the switch.<br /><br />There's even a <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=1292" class="postlink">NES multithreading demo</a> that implements multiple threads using the timer interrupt approach above, if you want to see the rudiments of how this works in an OS. The two threads move objects at different speeds across the screen, each one an infinite loop acting as if it's the only thing running on the NES, using a plain delay loop to set the object's movement speed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Dec 09, 2012 6:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes.</div><br />Okay.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The PPU generates an NMI interrupt every time VBlank starts. You just have to wait for that to happen. The simplest way to do this is to prepare an NMI handler that changes a flag (it can be as simple as INC VBlankFlag; RTI). Then, after the processing of all game objects, make a loop that waits for this flag to change before looping back and processing all game objects again.</div><br />How does the PPU know when to generate an interrupt? Do NTSC and PAL NES's have different hardware? The NES doesn't read something from the television, does it?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">With threads, the thing interrupting is a timer, so that the OS can regularly switch to another thread and give them each a slice of time. So it ends up looking like your example where each thing runs for a bit at a time, but without having to arrange for exactly where the switch occurs.</div><br />Okay, so I was somewhat right about threads too. I was thinking that perhaps the OS lets process/thread A run for x ms, then process/thread B for x ms, then the OS itself for x ms (so the user can close programs, start new ones, etc), then looping on this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Dec 09, 2012 6:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's even a NES multithreading demo that implements multiple threads using the timer interrupt approach above, if you want to see the rudiments of how this works in an OS. The two threads move objects at different speeds across the screen, each one an infinite loop acting as if it's the only thing running on the NES, using a plain delay loop to set the object's movement speed.</div><br />Thank you! I will definitely look at this.<br /><br />Also, going back to my Mario example, there must also be a spawnEnemies() event/object, that spawns an enemy at a given location depending on Mario's X and Y, and a despawnEnemies() event/object, that despawns an enemy depending on Mario's X and Y? And in SMB3, where you can go backwards and forwards through the stage, it must also remember whether the enemy is dead (so don't spawn it again).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Dec 09, 2012 6:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The PPU's job is to make a TV picture out of what it sees in its memory.<br />It's making 240 visible scanlines of picture, and 26 lines of Vblank between the frames.  (there's also some horizontal and vertical sync pulses in there too)<br />It knows which scanline it's processing, and what it's doing.  When it finishes drawing the 240 lines of picture, it starts making vblank for the TV.  One scanline later it generates a non-maskable interrupt (NMI).<br />That's the interrupt that the game uses.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sun Dec 09, 2012 7:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">In theory then, if I ran SMB instruction by instruction, I should see each object move one at a time, right?</div><br />That would be true if the game only had enough cycle time to update one object's state per frame.  I'm not sure but I believe SMB has ample time to update the state of all objects per frame.  Since the CPU's execution of instructions is only marginally tied to the PPU's &quot;execution&quot; of a frame, the answer to your question is no.  Updating mario's position, for example, updates a value in CPU RAM.  That value in RAM is calculated by the &quot;mario object&quot; &quot;task&quot; [code related to mario's behavior], then the CPU updates the OAM shadow copy in RAM.  Then during VBLANK the CPU initiates sprite DMA to copy the sprite positions [including mario's updated position] to the PPU.  Then the PPU, while rendering the next frame, will display mario in his changed state.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Dec 09, 2012 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do multiple things at once?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The PPU's job is to make a TV picture out of what it sees in its memory.<br />It's making 240 visible scanlines of picture, and 26 lines of Vblank between the frames. (there's also some horizontal and vertical sync pulses in there too)<br />It knows which scanline it's processing, and what it's doing. When it finishes drawing the 240 lines of picture, it starts making vblank for the TV. One scanline later it generates a non-maskable interrupt (NMI).<br />That's the interrupt that the game uses.</div><br />I don't understand.<br /><br />What's the difference between a vblank and a frame? I thought that both happened 60 or 50 times per second.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The PPU generates an NMI interrupt every time VBlank starts. You just have to wait for that to happen. The simplest way to do this is to prepare an NMI handler that changes a flag (it can be as simple as INC VBlankFlag; RTI). Then, after the processing of all game objects, make a loop that waits for this flag to change before looping back and processing all game objects again.</div><br />So, the loop basically looks like this?:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">main() {<br />&nbsp; while(true) {<br />&nbsp; &nbsp; updateMario();<br />&nbsp; &nbsp; updateEnemy1();<br />&nbsp; &nbsp; updateEnemy2();<br />&nbsp; &nbsp; updateEnemy3();<br />&nbsp; &nbsp; updateMusic();<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; waitForVBlank();<br />&nbsp; &nbsp; resetVBlankCounter();<br />&nbsp; &nbsp; writePictureToTV();<br />&nbsp; }<br />}</div><br /><br />How does writePictureToTV() work though? Does the PPU do that automatically?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>