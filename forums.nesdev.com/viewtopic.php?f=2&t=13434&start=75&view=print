<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How do I do in CA65 things I do in ASM6?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How do I do in CA65 things I do in ASM6?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 14, 2015 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">(I don't even have a GitHub account)</div><br />I just tried to sign up and found out that someone had already done it using my email address somehow, and I'm pretty sure it wasn't me. The account appears to have never been used, so I stole it for me and created a new issue.<br /><br />Anyway, if this macro behavior is by design (which would be pretty weird), at least it would be good to have confirmation on this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 14, 2015 3:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />BTW, I have another dilemma in my hands right now, regarding subroutines. This isn't as much of a headache as the previous problems, but I'd still like your input on this.<br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.proc</tt> is cool and all, but it has a serious problem that prevent me from using it for some of my subroutines. Since using .proc is equivalent to defining a label and immediately starting a scope with the same name, this means that all the code for the subroutine must be AFTER its entry point. However, sometimes I optimize loops by branching to labels BEFORE the subroutine's entry point, like in my &quot;Wait16Cycles&quot; subroutine (BTW, the 6 cycles from the jsr count as part of the first 16 cycles):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">WasteTime: ;&lt;- This is not an entry point!<br /><br />&nbsp; &nbsp;;waste time (11 cycles)<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;nop<br />&nbsp; &nbsp;nop<br /><br />Wait16Cycles:<br /><br />&nbsp; &nbsp;;decrement the counter (2 cycles)<br />&nbsp; &nbsp;dex<br /><br />&nbsp; &nbsp;;decide between wasting more time (3 cycles) or returning (2 cycles)<br />&nbsp; &nbsp;bne WasteTime<br /><br />&nbsp; &nbsp;;return (6 cycles)<br />&nbsp; &nbsp;rts</div><br />In some cases you can design the subroutine differently and branch to after the rts, or find another way to have the entry point at the very top, but in some cases, you really do need the entry point in the middle, or multiple entry points.<br /><br />What I'm currently doing is this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.scope Wait16Cycles<br /><br />WasteTime:<br /><br />&nbsp; &nbsp;;waste time (11 cycles)<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;nop<br />&nbsp; &nbsp;nop<br /><br />Entry:<br /><br />&nbsp; &nbsp;;decrement the counter (2 cycles)<br />&nbsp; &nbsp;dex<br /><br />&nbsp; &nbsp;;decide between wasting more time (3 cycles) or returning (2 cycles)<br />&nbsp; &nbsp;bne WasteTime<br /><br />&nbsp; &nbsp;;return (6 cycles)<br />&nbsp; &nbsp;rts<br /><br />&nbsp; &nbsp;.endscope<br /><br />&nbsp; &nbsp;Wait16Cycles = Wait16Cycles::Entry</div><br />Which is not exactly pretty, but works. I also have to create global aliases in the end for any additional entry points and for scratchpad variables defined inside the subroutine's scope if code on the outside ever uses them for passing arguments to the subroutine.<br /><br />What do you guys think about this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Nov 14, 2015 4:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Eh, I generally only ever used scope to solve name conflict issues that already existed when trying to modify stuff I'd already written. For new code I don't tend to need scope at all, and only occasionally want to use proc, though I make heavy use of local labels (@/:).<br /><br />Like, it's a useful feature when I need it, but I don't go out of my way to put everything in its own scope, etc. If proc isn't really appropriate for the way you use your subroutines, why use it at all for those ones? You're going out of your way to put a simple inside a scope, and then doing more work to take it out of that scope at the end.<br /><br />Hmm, actually I'm wondering, do you know about <a href="http://cc65.github.io/doc/ca65.html#ss6.4" class="postlink">local labels</a>? They're basically the reason I don't really find much need for scope/proc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 14, 2015 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">do you know about <a href="http://cc65.github.io/doc/ca65.html#ss6.4" class="postlink">local labels</a>?</div><br />I do, and I make heavy use of them, but they don't solve everything. Unmanned labels make the code unreadable and harder to maintain when used for larger branches/jumps, so I only use them for very localized stuff. Cheap local labels are good, but when you have multiple (global) entry points, access to cheap local labels becomes limited within the subroutine. To solve these cases I'd still need aliases, so instead of going all Frankenstein and coding each subroutine using a different methodology, I though it was better to go with the solution that works for all cases and be consistent. I find it easier to program if I decide on a single style because I start coding in that style without giving much thought to it, while using different styles depending on the situation would require more analysis each time.<br /><br />Scopes seemed like a good way to isolate the subroutines, except that since you can't forward-reference scopes, You need these kinds of aliases to make the subroutine and the parts of it that need to be accessed from the outside visible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Nov 14, 2015 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Which is not exactly pretty, but works. I also have to create global aliases in the end for any additional entry points and for scratchpad variables defined inside the subroutine's scope if code on the outside ever uses them for passing arguments to the subroutine.</div><br />Depending on your exact use case, you may be able to use something like this for &quot;.proc with an entry point in the middle&quot;:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.scope foo<br />&nbsp; &nbsp; nop<br />&nbsp; &nbsp; nop<br /><br />::foo:<br />&nbsp; &nbsp; nop<br />&nbsp; &nbsp; nop<br />&nbsp; &nbsp; rts<br />.endscope<br />bar := foo ; Just showing that &quot;foo&quot; is available in global scope now.<br /></div><br />There's no way to reference the parent scope though (only global scope), so this won't work the same as .proc with nested scopes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 14, 2015 7:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, I don't know why I didn't think of that, considering that I have created labels like that in other situations. Thanks for the idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 26, 2015 5:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just found another very bizarre bug: <!-- m --><a class="postlink" href="https://github.com/cc65/cc65/issues/235">https://github.com/cc65/cc65/issues/235</a><!-- m --><br /><br />I was using symbols to keep track of what macros were doing, but everything broke when I started using those macros inside scopes... Turns out that expressions don't look for symbols in outer scopes. In this particular case, it seems I can make the symbols global and access them with ::, but that definitely sounds like a bug to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 26, 2015 7:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It doesn't know that you aren't going to redefine (and shadow) <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Symbol</tt> later in the same scope. Perhaps a better rule would be the one fo-fo suggested in a reply: use in a constant expression forbids shadowing of the same variable name later in any enclosing scope.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 26, 2015 7:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">It doesn't know that you aren't going to redefine (and shadow) <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Symbol</tt> later in the same scope.</div><br />Yeah, I figured that much. It looks pretty inconsistent though, when you reference it just fine in a instruction and in the next line it fails as part of an expression. I understand WHY it happens, but it's weird.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Perhaps a better rule would be the one fo-fo suggested in a reply: use in a constant expression forbids shadowing of the same variable name later in any enclosing scope.</div><br />Yeah, that would probably be the best way to handle this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 26, 2015 8:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">It doesn't know that you aren't going to redefine (and shadow) <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Symbol</tt> later in the same scope.</div><br />Yeah, I figured that much. It looks pretty inconsistent though, when you reference it just fine in a instruction</div><br />Expressions can be evaluated later, even up to link time, so long as the expression is not in a context that theoretically has a way of producing a variable number of bytes. This means no conditional assembly (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.if</tt> argument), no variable repetition (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.repeat</tt> argument), and no variable length binary to decimal conversion (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.sprintf</tt> argument).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 27, 2015 1:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Quick update on my variable declaration issues: I completely stopped mucking around with overlapping segments, dummy segments, and all that crap, because I though my macros were weird as fuck, and my config file wasn't exactly pretty either. I could barely understand them after a while. Turns out I could do everything I wanted simply by marking the start of the segments with labels, calculating all offsets with numeric variables, and creating variables by adding the offsets to the marker labels. Now I have a better understanding of what can and can't be done in a single-pass assembler, so I was able to plan things better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sat Nov 28, 2015 9:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I was using symbols to keep track of what macros were doing...it seems I can make the symbols global and access them with ::, but that definitely sounds like a bug to me.</div><br /><br />Not sure if this was mentioned exactly: You can create scopes that are for your macro and related macros, like: <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.scope mysupermacrovars<br />&nbsp; &nbsp; foo .set 0<br />&nbsp; &nbsp; bar .set 1<br />.endscope<br /><br />.macro mysupermacro<br /><br />&nbsp; .if mysupermacrovars::foo <br />&nbsp; &nbsp; &nbsp; &nbsp;; do this<br />&nbsp; &nbsp;.endif<br /><br />.endmacro<br /></div><br /><br />Anything that is not explicitly scoped will be inside the same scope as where the macro was called/expanded from.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Nov 30, 2015 6:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I got the hang of how scopes work now. My main problem was figuring out the details of the kind of structure I wanted my program to adhere to, and in the process I kept thinking about all the things I would ever want to do, borrowing ideas from high-level programming languages and object-oriented programming. I love all the freedom you have when coding in ASM, but if you don't create a set of rules to make everything consistent, you can get lost pretty easily when working on bigger projects.<br /><br />Sometimes a specific solution looks so clean and concise, almost perfect, but then you think of that one case where something will go wrong if you do it that way, so you gotta go back to the drawing board. I'm all set now though, and I'm pretty comfortable with ca65 now after having played a bit with it and understanding what it can and can't do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 10, 2017 12:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's been a couple years since I started this thread, and since I'm much more familiar with ca65 now than I was back then, I decided to revisit some of the ideas presented here.<br /><br />The one thing I have in mind right now is how to automatically align the end portion of a PRG-ROM bank to the end of the bank, so that interrupt vectors, reset stub, trampoline routines, etc. are placed at the same position in every bank (simulating a fixed bank on mappers that don't have one) without wasting any space or needing manual tweaking of addresses or padding.<br /><br />So far I've been using <a href="https://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434&amp;start=15#p158283" class="postlink">rainwarrior's suggestion</a> of using two segments and padding the first one according to how much I've used of both, pushing the second one up. The main problem with this is that the amount of used space can only be calculated based on the relative distance between two labels, so the whole bank must be assembled as a single module.<br /><br />Then there was <a href="https://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434&amp;start=15#p158354" class="postlink">this post from thefox</a>, which I didn't understand at the time, but now I realize I can use a similar trick to have the linker automatically pad the lower part of the bank:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY {<br />&nbsp; &nbsp;# this outputs the upper part and calculates its size<br />&nbsp; &nbsp;FIXED: start = $0000, size = $8000, file = &quot;fixed.bin&quot;, fill = no, define = yes;<br />&nbsp; &nbsp;# this provides the correct PC for the upper part<br />&nbsp; &nbsp;DUMMY: start = $10000 - __FIXED_LAST__, size = $8000, file = &quot;&quot;, fill = no;<br />&nbsp; &nbsp;# this outputs the lower portion and pads it as necessary<br />&nbsp; &nbsp;BANK: start = $8000, size = $8000 - __FIXED_LAST__, file = &quot;bank.bin&quot;, fill = yes;<br />}</div><div class="codetitle"><b>Code:</b></div><div class="codecontent">SEGMENTS {<br />&nbsp; &nbsp;BANK: load = BANK, run = BANK, type = ro;<br />&nbsp; &nbsp;FIXED: load = FIXED, run = DUMMY, type = ro;<br />}</div><br />This works fine, the only catch is that since the fixed area has to be output first so we know its size, we have to output the two parts to separate files and concatenate them later (using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">copy /b</tt> or whatever) to put everything in the correct order. Of course I would rather have the assembler output the final ROM directly, instead of dealing with 32 temporary files for 16 PRG-ROM banks, so I decided to run this by you guys to see if there's anything I'm missing, or if this is indeed as close as it gets to &quot;automatic right justifying&quot;.<br /><br />I still don't understand why we can't use the symbols created by <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">define = yes</tt> in the SEGMENTS section... That would definitely make things easier.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>