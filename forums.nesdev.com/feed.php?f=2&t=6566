<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=6566" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-07-30T15:48:58-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=6566</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-07-30T15:48:58-07:00</updated>
<published>2010-07-30T15:48:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65207#p65207</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65207#p65207"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65207#p65207"><![CDATA[
It's too bad DEC doesn't support stack-indexed addressing on the 65816 (unless I'm missing something).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jul 30, 2010 3:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2010-07-30T14:42:04-07:00</updated>
<published>2010-07-30T14:42:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65204#p65204</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65204#p65204"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65204#p65204"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> ....<br />   sec<br />   sbc #$01<br />   bne _loop<br />   .... ;end of loop<br /></div><br /></div><br /><br />Use DEA instead of SEC/SBC on 65C02/65C816/HuC6280 <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Fri Jul 30, 2010 2:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-07-30T14:34:59-07:00</updated>
<published>2010-07-30T14:34:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65202#p65202</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65202#p65202"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65202#p65202"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I tend to not like loops, especially using loops within loops. Lack of index registers, extra cpu calculation, all the txa:clc:adc:tax-ing. Loops within loops are even harder becuase your already using both index regs for one loop, what are you going to use for the other loop?<br /></div><br />Use a ZP variable for the outer loop and index registers for inner loop.<br /><br />Another cool thing to do is something like that :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  lda #$06<br />_loop<br />  pha<br />  ..... ; complex code comes here<br />   pla<br />   sec<br />   sbc #$01<br />   bne _loop<br />   .... ;end of loop<br /></div><br />it avoid using index registers nor ZP adress, and you can still use the stack as another temporary storage in your loop. The only con is that it's a bit slow and you can't acess your counter inside the loop easily.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Jul 30, 2010 2:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2010-07-30T13:36:50-07:00</updated>
<published>2010-07-30T13:36:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65194#p65194</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65194#p65194"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65194#p65194"><![CDATA[
Either save one of the index registers on the stack if you can, or use a DP variable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Fri Jul 30, 2010 1:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-07-30T13:30:03-07:00</updated>
<published>2010-07-30T13:30:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65192#p65192</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65192#p65192"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65192#p65192"><![CDATA[
I tend to not like loops, especially using loops within loops.  Lack of index registers, extra cpu calculation, all the txa:clc:adc:tax-ing.  Loops within loops are even harder becuase your already using both index regs for one loop, what are you going to use for the other loop?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Fri Jul 30, 2010 1:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-07-30T11:04:36-07:00</updated>
<published>2010-07-30T11:04:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65184#p65184</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65184#p65184"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65184#p65184"><![CDATA[
Unless you know the routine contributes significantly to overall time, yeah, use loops when they're more convenient, or when unrolling would make the routine large. Sometimes though a .repeat is more useful, because you can do complex expressions involving the index. Since discovering ca65's .repeat, I've been using it more.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jul 30, 2010 11:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2010-07-30T10:14:56-07:00</updated>
<published>2010-07-30T10:14:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65179#p65179</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65179#p65179"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65179#p65179"><![CDATA[
Here's just an example taken from something I wrote recently. I didn't want to wait for $4018 to become ready so I used the NES-style joypad reading method, and I wanted to get all the buttons:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    sep      #$20<br />   ; Read joypad1<br />   lda      #1<br />   sta      $4016<br />   stz      joyData<br />   stz      joyData+1<br />   lda      #0<br />   sta      $4016<br />   ldx      #12<br />-:<br />   lda      $4016<br />   lsr      a<br />   rep      #$20<br />   rol      joyData<br />   sep      #$20<br />   dex<br />   bne      -<br />   <br />   rep      #$20<br />   lda      joyData<br />   tax<br />   eor      joyMask<br />   stx      joyMask<br />   and      joyMask<br />   sta      joyData<br />   sep      #$20<br />   lda      joyMask+1<br />   and      #$D<br />   sta      joyMask+1      ; don't block Select<br /></div><br />Using 8-bit operations would've been faster in some places, but I prefer to be in 16-bit mode when I'm operating on 16-bit data.<br /><br />As far as loops go, I tend to favor them unless I absolutely need the extra speed. If I need it to copy more/less data I can just change the loop counter instead of having to add or remove instructions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Fri Jul 30, 2010 10:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-07-30T09:49:21-07:00</updated>
<published>2010-07-30T09:49:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65176#p65176</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65176#p65176"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65176#p65176"><![CDATA[
I've always thought if it feels natural to change modes, then you probably should.<br /><br />Likewise, when I find a loop annoying to program, I write it unlooped.  If I find unrolling a loop taking too long, I loop it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Fri Jul 30, 2010 9:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2010-07-30T03:43:50-07:00</updated>
<published>2010-07-30T03:43:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65157#p65157</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65157#p65157"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65157#p65157"><![CDATA[
I didn't mean I forgot which immediate to use. I forgot to add the instruction altogether.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Fri Jul 30, 2010 3:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-07-30T03:29:37-07:00</updated>
<published>2010-07-30T03:29:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65156#p65156</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65156#p65156"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65156#p65156"><![CDATA[
Let your assembler remember for you:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro a16<br />    .A16 ; tell assembler new size of A<br />    rep #$20<br />.endmacro<br /><br />.macro ai16<br />    .A16<br />    .I16<br />    rep #$30<br />.endmacro<br /><br />etc.</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jul 30, 2010 3:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2010-07-30T02:46:11-07:00</updated>
<published>2010-07-30T02:46:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65155#p65155</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65155#p65155"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65155#p65155"><![CDATA[
I tend to use REP/SEP a lot to change the accumulator size. At first I'd often forget some of them, which would result in incorrect object code from the assembler. But now it's such a habit of mine that I rarely get mismatches on the M-flag. I prefer to do 16-bit operations as much as possible when I'm working on 16-bit data.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Fri Jul 30, 2010 2:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-07-30T02:33:18-07:00</updated>
<published>2010-07-30T02:33:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65154#p65154</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65154#p65154"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65154#p65154"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />[...] I usually have the accumulator in 8-bit mode, and index in 16-bit mode.  When I need to write to a single register I use the accumulator.  If I need to write to 2 back to back registers like $2116 &amp; $2117, I use X or Y.<br /></div><br />Yeah, same I use for all my SNES code except short sections where a 16-bit A or 8-bit X/Y significantly speeds things up or reduces tedium. I try to avoid switching size because it's so likely to cause mismatches with routines and subtle bugs. I could have every routine set the register size on entry and restore on exit, but that'd be tedious and inefficient. I can't really imagine any other way, given how many 8-bit quantities you have to deal with regularly (partly because the hardware registers so often deal in 8-bit quantities).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jul 30, 2010 2:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-07-29T17:09:26-07:00</updated>
<published>2010-07-29T17:09:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65136#p65136</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65136#p65136"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65136#p65136"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />What if you already programmed the game efficiently to begin with so optimization isn't required?<br /></div><br />Then not enough attention will be put toward making the game fun. Sure, optimization can be job 1 in a port, where you've already refined the design of the game itself. But when one is designing and implementing a game from whole cloth, design and balance compete with code efficiency. See the lead of <a href="http://wiki.nesdev.com/w/index.php/Limitations" class="postlink">a wiki article about NES limitations</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Jul 29, 2010 5:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-07-29T12:27:54-07:00</updated>
<published>2010-07-29T12:27:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65120#p65120</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65120#p65120"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65120#p65120"><![CDATA[
There's plenty more than 200 #$FF's at the end of the SMW cartridge, but I guess they just didn't know how much memory they had left until they were done.<br /><br />A strategy I use, is during v-blank I usually have the accumulator in 8-bit mode, and index in 16-bit mode.  When I need to write to a single register I use the accumulator.  If I need to write to 2 back to back registers like $2116 &amp; $2117, I use X or Y.  That saves memory, development time and speed all at the same time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Thu Jul 29, 2010 12:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[smkd]]></name></author>
<updated>2010-07-29T11:38:19-07:00</updated>
<published>2010-07-29T11:38:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65118#p65118</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65118#p65118"/>
<title type="html"><![CDATA[Modularity/File Size vs. Efficiency]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6566&amp;p=65118#p65118"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I'm the kind that optimizes a lot while planning, so I usually don't have to tweak the code much. A side effect of that is that it takes longer for me to see results compared to someone that codes things the straightforward way to optimize later.<br /></div><br /><br />I aim to do this too, unless it's a very complicated routine that would benefit from a simpler implementation first and then gradually optimising it.  I'd want the simplest / straightforward code when debugging it.<br /><br /><div class="quotetitle">psychopathicteen wrote:</div><div class="quotecontent"><br />What if you already programmed the game efficiently to begin with so optimization isn't required?<br /></div><br /><br />-with optimised code involving heavy macro use and loop unrolling, it'd be code size that holds the programmer back if they're trying to fit it on a small ROM.<br />-producing the most efficient loops and such the first time around isn't a reasonable expectation for complicated code.  If the optimal code is not the easiest to debug then a commerical developer wouldn't be expected to do it.  Not if they have to produce and debug many pages of code every day.  No one is going to write near perfect code in the first attempt either.  That, and having limited time to review previously written code would probably account for mediocre code in plenty of SNES games.<br /><br />The drawstatusbar in SMW is a poor example since it only runs once a frame and the speed difference / size difference is tiny.  The same sort of loop is used several times throughout the game and it's mainly once-a-frame stuff.  It adds up to over 200 bytes which isn't much, but if many routines are kept compact then the savings will add up fast.  Definitely more than '5 bytes', and that 200+ byte figure is just for a the few times the DMA loop thing got used.  Original SMW isn't pressured for vblank time either, so using slower but more compact code was not a big deal.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3295">smkd</a> — Thu Jul 29, 2010 11:38 am</p><hr />
]]></content>
</entry>
</feed>