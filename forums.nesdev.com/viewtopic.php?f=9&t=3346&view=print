<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - In-Hardware Pixel Changing Possible?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">In-Hardware Pixel Changing Possible?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=3346">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=3346</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Thu May 03, 2007 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>In-Hardware Pixel Changing Possible?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I read that if PPU rendering was off, the palette address chosen by $2006 would determine the color to be rendered on screen, and the color could be changed on screen by $2007.  Would it be possible to do something similar, with PPU rendering and $2006 set to a palette address, and have hardware inside a cartridge changing the PPU data bus?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu May 03, 2007 4:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Maybe if there's a way to take over the CPU bus and write to the PPU registers (when phase2 clock is low, would that be possible?).  The palette memory is internal to the PPU, so AFAIK the PPU doesn't touch the data bus while the screen is off.
<br />
<br />I was thinking if you have to increment the address to change the color, then you'll be cycling through color #0 which would end up drawing bars on the screen.  But I guess that's no problem if color #0 is always changing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Thu May 03, 2007 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Maybe if there's a way to take over the CPU bus and write to the PPU registers (when phase2 clock is low, would that be possible?).</div>
<br />
<br />I don't think it would be possible for hardware to update the PPU registers quickly enough.  The CPU R/W signal is output only, so I don't think hardware inside the cartridge could directly force a write signal to the CPU.  Maybe the CPU bus could be hijacked at that instruction-fetching cycle to force a STA $2007, but since STA takes 4 CPU cycles, that's 12 PPU cycles, so STA would be too slow to update individual pixels.  Perhaps someone could test a program that sets a palette address at $2006 and have hardware fix a value at the PPU data bus to check if the PPU does anything with it while rendering is off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu May 03, 2007 5:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The PPU reads the color value from internal palette RAM, so it seems the only way to change this is to write to palette RAM normally or change the PPU address via $2006 or $2007. Doesn't seem workable to me. The MMC5's method seems the only available, where you feed it customized data for each tile and attribute read.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WhoaMan</b> [ Fri May 04, 2007 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>what about if....</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />what about if you do this... though it probably wont work cause i thought of it. hehe
<br />
<br />set all internal vram locations to $00, init PPU to show the background using $2000, and then toggle a latch in the cart to pull the read signal for the VRAM high to disable its output
<br />
<br />on the cartridge, have a programable chip output certain values when certain addresses are shown on the bus. 
<br />
<br />examble:
<br />$2000 = $01
<br />$3f00 - $3f03 = current color you want on screen
<br />
<br />$0000-$000f = pattern of colors 1 and 2 alternating:
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />
<br />
<br />$0010-$001f = pattern of colors 1 and 2 alternating as in previous tile, but with color 0 in the top left position:
<br />02121212
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />12121212
<br />
<br />
<br />by monitoring the switch between colors 0,1, and 2, you can increse one of two counters when the colors change. one counter should count from 0 to 255 and the other should count from 0 to 239. when the first counter reachs 256, increase the second counter by one and reset the first counter. this should give you an X,Y location on the screen. when color 0 shows on the address bus, reset both counts to 0,0
<br />
<br />now, depending on where the X,Y location is, we can pull the color information for a given pixel from out own VRAM located on the cart and spit that info out when locations $3f00 - $3f03 are read by the PPU

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WhoaMan</b> [ Fri May 04, 2007 3:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />hrm. after re-reading blarggs post... that wouldnt work. hehe

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri May 04, 2007 6:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>IF</em> you could externally provide data for $3F00-$3FFF (which you cannot, to my best knowledge), you could just disable PPU rendering then feed the data as you please each time the PPU read $3F00.
<br />
<br /><strong>EDIT:</strong> clarified feasibility of approach.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Mednafen</b> [ Fri May 04, 2007 6:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What happens to the CPU bus when a KIL/JAM undocumented opcode is executed?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Sat May 05, 2007 6:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems that you can't really feed individual pixels to the PPU without modifying the NES.  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> I did think about some ideas for a mapper to enhance the graphical abilities of the NES.
<br /><ul><li>Every 8x8 pixels would have its own attributes, similar to the MMC5.  But unlike the MMC5, these extra attributes would fit for all 4 nametable spaces to be used.</li><li>Attribute flickering to create illusions of different colors, something similar is mentioned in <a href="http://nesdev.com/NES%20hardware%20development%20guide.txt" class="postlink">Brad Taylor's hardware guide</a></li><li>Selecting CHR banks with specific BG tiles <em>and</em> sprites</li><li>Support for both CHR ROM and CHR RAM</li><li>Maybe around 32-64KB of dual-ported ExRAM for an extra OAM copy, extra nametables, extra tile attributes, scratch RAM for some special effects, and CHR RAM.  The ExRAM would be specified at certain points in the 2A03's memory map and would be able to be written directly by the program.</li><li>Individual BG <em>tiles</em> would have the ability to have higher priority than certain sprites rather than sprites having lower priority than the whole BG.  This would be handled by a mapper evaluating a copy of OAM in extra RAM inside the cartridge for every scanline, similar to how the PPU itself evaluates its own internal OAM.  The mapper would determine whether the sprite pixels on a high-priority BG tiles should be displayed or not.  If it shouldn't, the mapper would blank out those sprite pixels when the pattern data for its sprite is fetched by the PPU.</li><li>OAM cycling and setting up sprite layers with the extra OAM copy inside the cart</li><li>More versatile priority settings for sprites (under whole BG, under high-priority BG tiles, and on top of BG)</li><li>BG and sprite tile modifications, including pixel replacement (for example, changing pixels that are color 2 to those of color 1), pixel masks, tile pasting, tile flipping, and tile shifting.  Pixel replacement, tile flipping, and tile shifting would be applied as the PPU fetches the pattern data, or could be used to draw new tiles to CHR RAM.</li><li>For pixel masks, pixels of affected tiles, affected section of the whole BG, or affected section of the screen covered by the mask would turn to a certain pixel.</li><li>For tile pasting, certain tiles could also be pasted onto other tiles to draw new tiles to CHR RAM.</li><li>For tile shifting, tiles can shift either independently or along with other tiles.  This could be used to fake parallax scrolling.  </li><li>With another processor inside the cartridge, memory could be sent to ExRAM by DMA ordered by the program.</li><li>Fill mode like the MMC5 would be supported as an extra nametable</li><li>Nametable mirroring would be very versatile, with the ability to use the NES's usual internal nametables, the in-cartridge nametables, fill mode, and CHR ROM banks to assign each of the NES's 4 nametable spaces.</li><li>Multiple vertical screen splits similar to the MMC5's single vertical screen split, with the tile limitations in mind, but with the ability to use different nametables</li><li>Support in attribute tile data for specifying animating banks</li><li>Support for automatic nametable mirroring changes, attribute changes, effect changes, and animation changes at individual pixels on a scanline.</li><li>Special pre-programmed IRQs (spIRQs) specified for changing the scroll <em>or</em> a single palette color at a scanline.  The IRQs would go to somewhere pre-specified by the mapper.  Here would be example code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;For changing the scroll...&#40;equations are based on the Everynes site&#41;<br />setupstuff: ;somewhere in the program<br />&nbsp;lda horiz<br />&nbsp;sta horizvalue ;mapper register for the horizontal scroll value<br />&nbsp;lda vert<br />&nbsp;sta vertvalue ;mapper register for the vertical scroll value<br />&nbsp;lda screenoff<br />&nbsp;sta turnoffvalue ;mapper register for the PPU off value<br />&nbsp;lda pal<br />&nbsp;sta paltoupdate ;mapper register for the palette to update<br />&nbsp;lda color<br />&nbsp;sta colortouse; mapper register for the color to update palette with<br />&nbsp;lda ppumaskltemp<br />&nbsp;sta turnonvalue ;mapper register for the PPU turn on value<br />&nbsp;lda ppuctrltemp<br />&nbsp;sta ctrlvalue ;mapper register to store state of PPUCTRL<br />scrollirq: ;at specific area in memory map, $4100 for example<br />&nbsp;pha <br />&nbsp;bit $2002 ;reset flip-flop<br />&nbsp;sta $2006 ;hijack data bus with 4&#40;horizvalue/256&#41; + 8&#40;vertvalue/240&#41; + 4&#40;ctrlvalue AND 7Fh&#41;<br />&nbsp;sta $2005 ;hijack data bus with &#40;vertvalue MOD 240&#41; AND C7h<br />&nbsp;sta $2005 ;hijack data bus with horizvalue AND 7h<br />&nbsp;sta $2006 ;hijack data bus with &#40;horizvalue AND F8h&#41;/8 + 4&#40;&#40;Y MOD 240&#41; AND 38h&#41;<br />&nbsp;pla<br />&nbsp;rti<br />scrollirqfine: ;scanline after scrollirq, $4112 for example<br />&nbsp;pha<br />&nbsp;bit $2002 ;reset flip-flop<br />&nbsp;sta $2005 ;hijack data bus with horizvalue<br />&nbsp;pla<br />&nbsp;rti<br />updateonecolor: ;$411B for example<br />&nbsp;pha<br />&nbsp;bit $2002 ;reset flip-flop<br />&nbsp;sta $2001 ;hijack data bus with turnoffvalue<br />&nbsp;sta $2006 ;hijack data bus with $3F<br />&nbsp;sta $2006 ;hijack data bus with paltoupdate<br />&nbsp;sta $2007 ;hijack data bus with colortouse<br />&nbsp;sta $2006 ;hijack data bus with 4&#40;horizvalue/256&#41; + 8&#40;vertvalue/240&#41;<br />&nbsp;sta $2006 ;hijack data bus with &#40;horizvalue AND F8h&#41;/8 + 4&#40;&#40;Y MOD 240&#41;<br />&nbsp;sta $2001 ;hijack data bus with turnonvalue<br />&nbsp;pla<br />&nbsp;rti<br /></div></li></ul>
<br />All of this (not including normal mapper features) would probably need at least some RAM, some logic chips, a small ROM chip, and a processor (faster than the NES PPU).  Does anybody know about how much such a mapper would cost?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>loopy</b> [ Sat May 05, 2007 7:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat May 05, 2007 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strangenesfreak wrote:</div><div class="quotecontent">It seems that you can't really feed individual pixels to the PPU without modifying the NES.  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> I did think about some ideas for a mapper to enhance the graphical abilities of the NES.</div><br />A lot of your changes (dual ported VRAM, tile priority, cutout window, parallax scrolling, scroll splits, etc.) sound like features of the Game Boy Advance video hardware. So why not just take a GBA motherboard and run its video output through a video encoder that feeds 8x1 pixel slivers in red, green, blue, or gray to the PPU, and use the CPU just to read the controllers and copy audio out to the DAC at $4011?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">All of this (not including normal mapper features) would probably need at least some RAM</div><br />GBA has 32 KiB of IWRAM, 256 KiB of slower EWRAM, and 96 KiB of memory-mapped pseudo-dual-ported VRAM. The video translation would need a frame buffer of roughly 10 KiB to even out the scan rate difference between the NES and GBA.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">some logic chips</div><br />Dunno.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">a small ROM chip</div><br />8 KiB.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and a processor (faster than the NES PPU)</div><br />Would ARM7TDMI work?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">as the mapper would have to do a lot of complex work</div><br />You know, like running the game.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does anybody know about how much such a mapper would cost?</div>
<br />Nintendo was able to sell Game Boy Player for $50.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dvdmth</b> [ Sun May 06, 2007 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't try to overdo PPU enhancements.  No matter what features you want to implement, you must take into account the PPU's limitations that can never be overcome, most notably regarding the palette (the original topic here).
<br />
<br />My personal idea for PPU enhancement would have 16-bit nametable entries.  The lower 12 bits would contain the tile ID, bits 12-13 would have the color attribute, and bits 14-15 would have H/V flip control (H-Flip would be implemented by reversing the bit order of pattern fetches, while V-Flip would involve a simple XOR of CHR A0-A2 during pattern fetches).
<br />
<br />I'd also like to see VRAM updating through DMA.  This will require special RAM in the cart that would contain the VRAM update buffer.  The game would write to this buffer during its normal frame execution, then when VBlank comes, it would write to a mapper register to start DMA.  The mapper would then block CPU access to the special RAM as it parses the buffer and updates VRAM.  (The 2KB of VRAM in the PPU would be unused, with all VRAM cart-loaded so the PPU bus doesn't need to be utilized.)
<br />
<br />Those are the two main enhancements I'd like to see personally.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Sun May 06, 2007 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">A lot of your changes (dual ported VRAM, tile priority, cutout window, parallax scrolling, scroll splits, etc.) sound like features of the Game Boy Advance video hardware. So why not just take a GBA motherboard and run its video output through a video encoder that feeds 8x1 pixel slivers in red, green, blue, or gray to the PPU, and use the CPU just to read the controllers and copy audio out to the DAC at $4011?</div><br />I guess those 8x1 pixel silvers would sort of work, though the (probably needed) flickering between shades of red, green, and blue might be a bit noticible.<br /><div class="quotetitle">loopy wrote:</div><div class="quotecontent">This is exactly why I'm anxious for the PowerPak ... all kinds of potential for making your own hardware enhancements.</div><br />I guess I kind of forgot about the PowerPak there.  I can't wait to see what kinds of projects and games people can do with the PowerPak.   <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><div class="quotetitle">dvdmth wrote:</div><div class="quotecontent">Don't try to overdo PPU enhancements. No matter what features you want to implement, you must take into account the PPU's limitations that can never be overcome, most notably regarding the palette (the original topic here). </div><br />Yeah, I could see how too many PPU enhacements could make the graphics look way too ahead of its time for the NES and look more like for a newer system.<br /><div class="quotetitle">dvdmth wrote:</div><div class="quotecontent">I'd also like to see VRAM updating through DMA. This will require special RAM in the cart that would contain the VRAM update buffer. The game would write to this buffer during its normal frame execution, then when VBlank comes, it would write to a mapper register to start DMA. The mapper would then block CPU access to the special RAM as it parses the buffer and updates VRAM. (The 2KB of VRAM in the PPU would be unused, with all VRAM cart-loaded so the PPU bus doesn't need to be utilized.) </div>
<br />This would be great for quickly making huge nametable updates, like for large animations, huge bosses, etc.  It could possibly allow for very large moving BG-rendered objects while on a regular BG (instead of a black screen like most NES games with moving BG bosses) without using too much of the CPU's time.  Faking large layers could also be possible with tiles pre-drawn for the effect without using too much time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun May 06, 2007 11:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My personal idea for PPU enhancement would have 16-bit nametable entries. The lower 12 bits would contain the tile ID, bits 12-13 would have the color attribute, and bits 14-15 would have H/V flip control (H-Flip would be implemented by reversing the bit order of pattern fetches, while V-Flip would involve a simple XOR of CHR A0-A2 during pattern fetches).<br /></div><br />That's somewhat similar to the MMC5 exgraphics mode, exept it doesn't have tile flipping (at least it's not known to have it). Vertical flipping could defintiely be done pretty much simply in hardware.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'd also like to see VRAM updating through DMA. This will require special RAM in the cart that would contain the VRAM update buffer. The game would write to this buffer during its normal frame execution, then when VBlank comes, it would write to a mapper register to start DMA. The mapper would then block CPU access to the special RAM as it parses the buffer and updates VRAM. (The 2KB of VRAM in the PPU would be unused, with all VRAM cart-loaded so the PPU bus doesn't need to be utilized.) </div>
<br />Do it as you describe is impossible, because no mapper can halt the CPU. If that would be possible, you wouldn't even need to use any other RAM than the internal one.
<br />Actually one possible thing would be to have a mapper that maps some RAM on your cartridge to the CPU bus, then switch it to the PPU bus, and alternate between 2 banks (one would be PPU and the other CPU, and both swappable). This would be tedious to design, not to mention routing.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>