<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=10886" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-01-13T03:21:33-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=10886</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-01-13T03:21:33-07:00</updated>
<published>2014-01-13T03:21:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10886&amp;p=123744#p123744</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10886&amp;p=123744#p123744"/>
<title type="html"><![CDATA[Re: Techniques for dealing with OAM and priority]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10886&amp;p=123744#p123744"><![CDATA[
You could classify games in several categories :<br />1) Priority doesn't matter (e.g. Mario, Gradius, Tetris, Mega Man, Castlevania, Dragon Warrior, etc, etc...)<br />2) Priority does matter (Double Dragon, 3D WorldRunner, etc, etc...)<br /><br />1) Would just display the sprites in any order, but varying through so that all sprites are visible when there is more than 8 they'll flicker but at least they won't disappear completely.<br /><br />2) There is several ways of doing this. In my own game engine, I start by sorting the objects depending on their Y by bubble sort. I use a stable sort for the MSB and non-stable sort for LSB, so that objects which are close to each other will flicker while objects with are far to each other have their correct priority.<br /><br />There is also several cases where priority would not matter, but it still would for one particular sprites. Typically if you use sprite #0 hit, you want it to be sprite #0. Then it gets complicated, but there is always a workaround.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Jan 13, 2014 3:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[sampsonk]]></name></author>
<updated>2014-01-13T00:31:50-07:00</updated>
<published>2014-01-13T00:31:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10886&amp;p=123737#p123737</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10886&amp;p=123737#p123737"/>
<title type="html"><![CDATA[Techniques for dealing with OAM and priority]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10886&amp;p=123737#p123737"><![CDATA[
What kind of techniques do other folks / commercial games use for allocating OAM entries and dealing with inter-sprite priority?  The most straightforward general way I can think of would be to create a binary tree or ordered linked list to keep the sprites (or metasprites) in order, then render everything to in-memory OAM on every frame by traversing the list in order.  This seems expensive though, and largely unnecessary -- depending on the type of game, priorities may not change all the time, and it would be more efficient to modify the existing data than to move large blocks around.  Is it common for games to only bother keeping track of priorities if the sprites actually overlap?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3777">sampsonk</a> — Mon Jan 13, 2014 12:31 am</p><hr />
]]></content>
</entry>
</feed>