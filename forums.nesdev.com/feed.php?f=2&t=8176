<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=8176" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-10-04T19:57:02-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=8176</id>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2011-10-04T19:57:02-07:00</updated>
<published>2011-10-04T19:57:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84680#p84680</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84680#p84680"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84680#p84680"><![CDATA[
I ultimately agree with the assessment that both should be considered as options rather than right or wrong.<br /><br />In testing, I actually find a purpose for clearing RAM. I'm looking through this huge list of variables in the RAM viewer on FCE, and for one specific byte. I can easily distinguish it when I see a bunch of zeroes surrounding a chunk of non-zero values. The (mostly) non-zero values are the RAM I'm writing to when the zero values are unused.<br /><br />I would just say that before you say that you're done with your initialization routines, really go over them. I would even go to the point of noting all the ranges of RAM a particular "module" uses, and using breakpoints or something in FCEUXD to make sure that every byte in that range is initialized appropriately (can you do this with CDL files?).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Tue Oct 04, 2011 7:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-10-03T07:56:57-07:00</updated>
<published>2011-10-03T07:56:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84626#p84626</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84626#p84626"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84626#p84626"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">at least it will "bug" consistently.<br /></div><br />But that's exactly the part I disagree with... It's not consistent, because depending on the order things happen in your program, the same code can "bug" or not.</div><br />Surely it's <em>more</em> consistent though than depending on a semi-random value from power-on/reset?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't think there's a perfect solution for this, it's just my personal opinion that clearing RAM makes certain bugs harder to catch.<br /></div><br />I agree there's really no perfect solution, but personally I feel clearing is the lesser of two evils. For a perfect solution we would need a higher level language, something that has a way of actually defining modules, forces the programmer to initialize the module variables, etc.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />You said "semi-random" which gave me an idea: fill the entire overlay segment with CRC16 pseudorandom numbers (<a href="http://www.6502.org/source/integers/crc-more.html" class="postlink">66 cycles per byte cleared</a>) before starting each module in debug builds.<br /></div><br />Or just fill it with DEADBEEF or something, that ought to catch most of the bugs, especially if the release build clears to 0 instead (and thus usually behaves differently from the debug version in case there's a bug).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Mon Oct 03, 2011 7:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-10-03T05:47:38-07:00</updated>
<published>2011-10-03T05:47:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84621#p84621</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84621#p84621"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84621#p84621"><![CDATA[
By "CRC" I meant use the CRC itself as your PRNG. Set it up with a fixed seed that can be changed from day to day, but then feed zeroes into the loop and use the low byte as your PRNG.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />IMO not clearing RAM is fine on boot up, just don't write your code to expect it to be either, never guess anything.<br /></div><br />But how do you know you're not expecting predictable values by accident?<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />If your RAM isn't initialized, you'll have a harder time to see if there's overflows in some values though during development if you have something corrupting something 1 byte away because a loop runs one too many times.<br /></div><br />Buffer overflows like that are one reason that I wrote <a href="http://nesdev.com/bbs/viewtopic.php?t=6197" class="postlink">shuffle</a>. (The other was to detect <a href="http://nesdev.com/bbs/viewtopic.php?t=6046" class="postlink">leaked betas</a>.) If you're shuffling the order of your big arrays in VRAM, and the misbehavior changes after you change the shuffle seed, you know it's a buffer overflow.<br /><br />Split because this clearing vs. not clearing "holy war" had taken over the original topic about MMC1 setup.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Oct 03, 2011 5:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-10-02T22:31:09-07:00</updated>
<published>2011-10-02T22:31:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84612#p84612</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84612#p84612"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84612#p84612"><![CDATA[
I myself write my code to not care about start up and test each code so even if it's not initiated, will still work. Although I still clear everything to 0 on start up in the 2KB of RAM inside the console. Although some stuff you of course need to be initiated to something, like controller values to run a move program for some reason. Or the position of something. IMO not clearing RAM is fine on boot up, just don't write your code to expect it to be either, never guess anything. If your RAM isn't initialized, you'll have a harder time to see if there's overflows in some values though during development if you have something corrupting something 1 byte away because a loop runs one too many times.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Sun Oct 02, 2011 10:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-10-02T22:34:56-07:00</updated>
<published>2011-10-02T22:28:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84611#p84611</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84611#p84611"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84611#p84611"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />In other words, you divide BSS into a "main" portion shared among modules and an "overlay" portion per module.<br /></div><br />Exactly! When you have only 2KB of RAM to work with, sometimes you have to max it out by using portions of it for more than one purpose. Although in my case it's mostly the "main engine" vs. "everything else"... =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That might be another place where people work differently. Some people do various kinds of integration testing earlier than others.<br /></div><br />Fair enough. I usually have my program jump right into the part I'm testing though. I would hate to go through title screens and menus every time I assembled/compiled the game to test something related to the gameplay.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You said "semi-random" which gave me an idea: fill the entire overlay segment with CRC16 pseudorandom numbers (<a href="http://www.6502.org/source/integers/crc-more.html" class="postlink">66 cycles per byte cleared</a>) before starting each module in debug builds.<br /></div><br />I have used the PRNG of the game to fill the memory before, but there must be a better way to do this. I guess I could write some code to fill the overlay area with random values, but there's one thing that bugs me: Ideally, the values would be different every time the game is assembled, in order to avoid "lucky" values, but once bugs are found, I'd like to generate the same values that caused them, in order to properly debug the issue. I'm not sure what to do about that... Manually change the seed from time to time? With the CRC the values would change once I attempted to fix the bug...<br /><br />EDIT: I guess I could use the CRC as the seed so that each build would generate different fill values, and if a bug is found I'd manually force that CRC as the seed until the bug is fixed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Oct 02, 2011 10:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-10-02T20:44:01-07:00</updated>
<published>2011-10-02T20:44:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84604#p84604</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84604#p84604"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84604#p84604"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />For example, say that in my game I reuse some RAM for the normal gameplay and for bonus levels, since they don't run at the same time.<br /></div><br />In other words, you divide BSS into a "main" portion shared among modules and an "overlay" portion per module. One might make sure the entire "overlay" portion is set to something predictable when switching between "modules". That's sort of how calloc() works in C (and how malloc() works in hardened implementations of the standard library): it clears all dynamically allocated memory.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />at the start of development we hardly go through the normal progression of the game<br /></div><br />That might be another place where people work differently. Some people do various kinds of integration testing earlier than others.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I imagine that in a lot of cases the buggy code could run after some other part of the program already modified the RAM, leaving it in a semi-random state.<br /></div><br />You said "semi-random" which gave me an idea: fill the entire overlay segment with CRC16 pseudorandom numbers (<a href="http://www.6502.org/source/integers/crc-more.html" class="postlink">66 cycles per byte cleared</a>) before starting each module in debug builds.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Oct 02, 2011 8:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-10-02T20:31:19-07:00</updated>
<published>2011-10-02T20:31:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84602#p84602</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84602#p84602"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84602#p84602"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />at least it will "bug" consistently.<br /></div><br />But that's exactly the part I disagree with... It's not consistent, because depending on the order things happen in your program, the same code can "bug" or not.<br /><br />For example, say that in my game I reuse some RAM for the normal gameplay and for bonus levels, since they don't run at the same time. If I clear the memory and start the first level, the level might play well even if it doesn't initialize a certain byte. But then comes the bonus stage, and changes that specific byte to something else. When the second level starts, it might glitch up because of that different byte. And that might be hard to catch, because at the start of development we hardly go through the normal progression of the game, so you typically won't run a normal level after a bonus level. This is a bug you'll only see late in development, which will make it harder to locate because you programmed that part long ago.<br /><br />About the diagnostic messages, they are certainly useful if the buggy code is the first to use the problematic RAM locations, but I imagine that in a lot of cases the buggy code could run after some other part of the program already modified the RAM, leaving it in a semi-random state.<br /><br />I don't think there's a perfect solution for this, it's just my personal opinion that clearing RAM makes certain bugs harder to catch. That's just the way I work, and I'm OK if others work differently. What bothers me is when certain things are presented as "truths", instead of "options".<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Oct 02, 2011 8:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-10-02T17:52:08-07:00</updated>
<published>2011-10-02T17:52:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84593#p84593</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84593#p84593"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84593#p84593"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I don't know if many commercial games clear the whole memory on start up, but I still think that just makes eventual bugs harder to detect. Most games are composed of "modules" that run one after the other (title screen, menus, main gameplay, bonus gameplay, etc), and each of those requires some cleaning up and initialization. By clearing the whole memory on reset you are just cutting some slack for the first few modules that run, because even if they forget to initialize some variables they might still work. However, if you run these same modules later in the game they might not function correctly.<br /><br />So I'd just rather make sure that each module cleans everything up for itself, to make sure it will work well no matter when it runs. If they are defective in some way, I'll probably notice it right the first time they run and fix the problem right away.<br /></div><br />I disagree. It might be OK to not clear the entire memory for the debug version of the game (in fact, I added diagnostic messages to NintendulatorDX when uninitialized RAM is read to detect these type of things), but for the release version it's better to clear it, so that if/when there are bugs, at least it will "bug" consistently.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Sun Oct 02, 2011 5:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-10-02T11:35:03-07:00</updated>
<published>2011-10-02T11:35:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84589#p84589</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84589#p84589"/>
<title type="html"><![CDATA[To clear or not to clear (2011-10)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8176&amp;p=84589#p84589"><![CDATA[
<div class="quotetitle">In <a href="http://nesdev.com/bbs/viewtopic.php?p=84587#84587" class="postlink">this post about detecting resets</a>, Bregalad wrote:</div><div class="quotecontent"><br />Note that those games does not clear the memory so this technique works.<br /></div><br />One thing doesn't exclude the other though... they could just check for the signature bytes <strong>before</strong> clearing the memory.<br /><br />I don't know if many commercial games clear the whole memory on start up, but I still think that just makes eventual bugs harder to detect. Most games are composed of "modules" that run one after the other (title screen, menus, main gameplay, bonus gameplay, etc), and each of those requires some cleaning up and initialization. By clearing the whole memory on reset you are just cutting some slack for the first few modules that run, because even if they forget to initialize some variables they might still work. However, if you run these same modules later in the game they might not function correctly.<br /><br />So I'd just rather make sure that each module cleans everything up for itself, to make sure it will work well no matter when it runs. If they are defective in some way, I'll probably notice it right the first time they run and fix the problem right away.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Oct 02, 2011 11:35 am</p><hr />
]]></content>
</entry>
</feed>