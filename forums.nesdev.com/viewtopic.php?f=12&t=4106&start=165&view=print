<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SPC7110 Reverse Engineering Project</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SPC7110 Reverse Engineering Project</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>12</strong> of <strong>21</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jolly_codger</b> [ Sat Jun 28, 2008 5:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bit 20
<br />complete mess. (:
<br />surprisingly works.
<br />
<br />Bit 21
<br />Testing only when the above 2 bits predicted a hit, then the PROB floats between 0x25 and 0x11.
<br />Unless someone makes 'big boss evil' logic to make it work, this path ends here. (yay!)
<br />
<br />Final 'brute force' version (1-20)
<br /><!-- m --><a class="postlink" href="http://www.mediafire.com/?ngbbmrxbgls">http://www.mediafire.com/?ngbbmrxbgls</a><!-- m -->
<br />
<br />On to fresh ground. When brain recovers.
<br />
<br />
<br />
<br />EDIT:
<br />(Andreas Naive core)
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Bit 17<br /><br /><br />&#40;MPS hit&#41;<br />&nbsp; PREDICT &lt;&lt;= 1;<br />&nbsp; PREDICT |= 1;<br /><br />&#40;LPS hit&#41;<br />&nbsp; PREDICT &lt;&lt;= 1;<br />&nbsp; PREDICT |= 0;<br /><br />&#40;After&#41;<br />// MPS &lt;--&gt; LPS<br />if&#40; BIT&#40;PREDICT,8&#41; == 0 &#41;<br />&#123;<br />&nbsp; MPS_INDEX&#91; CONTEXT_MPS &#93; ^= 1;<br /><br />&nbsp; // This is unknown, possibly useful<br />&nbsp; //PREDICT ^= 1;<br />&#125;<br /></div><br /><br /><br />EDIT:<br />This is interesting. <br /><br />17 = No problem.<br />18 = PROB is not correct.<br /><br />Another context bit..?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0<br />CODE = 34 | CUTOFF = 37 &#40;37,6C,80&#41; | PROB = 00&nbsp; | MPS = 0 &#40;1,0&#41; | HIGH = 91<br />A6068626 / 80800582<br /><br /><br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0<br />CODE = 3F | CUTOFF = 37 &#40;37,6C,80&#41; | PROB = 00&nbsp; | MPS = 0 &#40;0,1&#41; | HIGH = 91<br />bits_correct = 17 | out=01 | decode=07<br />A607EF60 / 808007D0<br /><br /><br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0<br />CODE = 41 | CUTOFF = 37 &#40;37,6C,80&#41; | PROB = 00&nbsp; | MPS = 0 &#40;0,1&#41; | HIGH = 91<br />bits_correct = 17 | out=01 | decode=09<br />A608271C / 8080091E<br /><br />&#40;..&#41;<br /><br /><br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0<br />CODE = 7A | CUTOFF = 37 &#40;37,6C,80&#41; | PROB = 00&nbsp; | MPS = 0 &#40;0,1&#41; | HIGH = 91<br />bits_correct = 17 | out=01 | decode=35<br />A60F5E64 / 80803597<br /><br /><br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />00000000&nbsp; &nbsp;10000000&nbsp; &nbsp;00000000<br />0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;0<br />CODE = 80 | CUTOFF = 37 &#40;37,6C,80&#41; | PROB = 00&nbsp; | MPS = 0 &#40;0,1&#41; | HIGH = 91<br />A6100000 / 80804000<br /></div>
<br />
<br />Now I'm more confused.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Mon Jun 30, 2008 11:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems i'm today just too tired to do anything productive, so i thought i would better share my current state of mind with you:
<br />
<br />1) At this point, i don't think there is more than 8 PROB contexts (not sure if the MPS use more than 8, however), as i saw an example that apparently disproved my previous hypothesis (that the previous bits in the same nibble were used to decide the context) in the bit #18. It's just i'm unable to see clearly how the PROB/MPS evolution works.
<br />
<br />2) It's clear from the data (and from the work of jolly_codger) that those previous bits in the nibble have an important role in the decision of how to evolve the PROB/MPS values.
<br />
<br />3) Due to the fact that there are (at least) 8 contexts the data we currently have is somewhat limited... the 8 first output bits are trivial; the 8 following ones are still easy ones and, when the fun starts (in the third byte), the data begin to become sparse, so after some (few) bits, we can not even guarantee which are the "real" PROB and MPS. Not sure if you understand what i mean...
<br />
<br />4) I know we can not do this at this point, but i though i would share my thoughts about how to use at this point a possible/future interface allowing us to do custom tests (as it's possible we will need it anyway...): better than just getting compressed-uncompressed pairs as we have been doing with neviksti/caitsith2 interfaces, i would find more valuable at this point to recover the MPS/PROB evolution of a single example for lots (hundreds if possible) of output bits (indeed, i'm not sure if this would be doable with the possible interfaces you have been discussing above, so i would like to hear opinions). The idea to recover that stream of MPS &amp; PROB comes from the observation that, apparently, using the pair of 8-bits variables i have been using (value and cutoff) it seems we can reproduce the decompression just with the "proper" MPS &amp; PROB. So we could recover them in a inductive way:
<br />
<br />Let's suppose that, at a given point, we are going to output the i-th output bit and we have been able to recover all the previous MPS &amp; PROB. That mean that we can exactly reproduce the state of the 2 internal variables (value and cutoff) just at the point when we should output the next bit (the i-th one). Then, if we change the "value" state variable, we could get, going backward, a compressed stream with the same bits until the (i-1)-th, the same "cutoff" state variable and a "value" selected at our choice. That way, by a simple biyection procedure, we could recover the MPS and PROB in at most 9 steps (by example, by constructing the stream that would have a 0 in the "value" variable when going to output the i-th bit, we would know which value MPS have by only looking at the i-th output bit for that input stream); indeed, we would need less than 9 if we do some guesses about the values of PROB (by example, that it only have the values 0x5a, 0x25, 0x11, ...) but, at this point, i would prefer to not guess anything at all.
<br />
<br />
<br />Well, i just needed some rambling... Does this make sense for anyone else? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jolly_codger</b> [ Mon Jun 30, 2008 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's some twisted logic.
<br />
<br />Bits 17-18.
<br />
<br />
<br />bits_correct = # bits output so far
<br />LASTMPS ~ last output data
<br />MPS_INDEX ~ CONTEXT_INDEX (same functionality)
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Before hit,miss predictor<br /><br />&nbsp; if&#40; bits_correct==16 &#41;<br />&nbsp; &#123;<br />&nbsp; &nbsp; // MPS &lt;--&gt; LPS<br />&nbsp; &nbsp; //if&#40; BIT&#40;PREDICT,15&#41; == 0 &#41;<br />&nbsp; &nbsp; if&#40; BIT&#40;LASTMPS,15&#41; == 1 &#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; MPS_INDEX&#91; CONTEXT_MPS &#93; ^= 1;<br />&nbsp; &nbsp; &nbsp; MPS ^= 1;<br /><br />&nbsp; &nbsp; &nbsp; //PROB_INDEX&#91; CONTEXT_PROB &#93;++;<br />&nbsp; &nbsp; &nbsp; //PROB = PROB_INDEX&#91; CONTEXT_PROB &#93;;<br />&nbsp; &nbsp; &nbsp; //CUTOFF = HIGH - PROB_TABLE&#91; PROB &#93;;<br />&nbsp; &nbsp; &nbsp; //PREDICT ^= 1;<br />&nbsp; &nbsp; &#125;<br />&nbsp; &#125;<br /><br /><br />&nbsp; if&#40; bits_correct==17 &#41;<br />&nbsp; &#123;<br />&nbsp; &nbsp; if&#40; BIT&#40;LASTMPS,15&#41; == 1 &#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; bool flip_mps = false;<br /><br />&nbsp; &nbsp; &nbsp; if&#40; BIT&#40;LASTMPS,16&#41;==1 &amp;&amp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BIT&#40;LASTMPS,8&#41;==0 &amp;&amp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BIT&#40;LASTMPS,7&#41;==1 &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; flip_mps = true;<br /><br />&nbsp; &nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; if&#40; BIT&#40;LASTMPS,16&#41;==0 &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; flip_mps = true;<br /><br /><br />&nbsp; &nbsp; &nbsp; if&#40; flip_mps &#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; printf&#40; &quot; &amp;_1 &quot; &#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; MPS_INDEX&#91; CONTEXT_MPS &#93; ^= 1;<br />&nbsp; &nbsp; &nbsp; &nbsp; MPS ^= 1;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; //PROB_INDEX&#91; CONTEXT_PROB &#93;++;<br />&nbsp; &nbsp; &nbsp; &nbsp; //PROB = PROB_INDEX&#91; CONTEXT_PROB &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; //CUTOFF = HIGH - PROB_TABLE&#91; PROB &#93;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; //PREDICT ^= 1;<br />&nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; else<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; bool flip_mps = false;<br /><br />&nbsp; &nbsp; &nbsp; if&#40; BIT&#40;LASTMPS,16&#41;==1 &amp;&amp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BIT&#40;LASTMPS,8&#41;==0 &amp;&amp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BIT&#40;LASTMPS,7&#41;==1 &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; flip_mps = true;<br /><br /><br />&nbsp; &nbsp; &nbsp; if&#40; flip_mps &#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; printf&#40; &quot; &amp;_2 &quot; &#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; MPS_INDEX&#91; CONTEXT_MPS &#93; ^= 1;<br />&nbsp; &nbsp; &nbsp; &nbsp; MPS ^= 1;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; //PROB_INDEX&#91; CONTEXT_PROB &#93;++;<br />&nbsp; &nbsp; &nbsp; &nbsp; //PROB = PROB_INDEX&#91; CONTEXT_PROB &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; //CUTOFF = HIGH - PROB_TABLE&#91; PROB &#93;;<br />&nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &#125;<br /><br /><br />&nbsp; &nbsp; if&#40; BIT&#40;LASTMPS,16&#41; == 1 &amp;&amp;<br />&nbsp; &nbsp; &nbsp; &nbsp; BIT&#40;LASTMPS,15&#41; == BIT&#40;LASTMPS,7&#41; &#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; if&#40; PROB==2 &#41; PROB=0;<br />&nbsp; &nbsp; &nbsp; else if&#40; PROB==0 &#41; PROB=2;<br /><br />&nbsp; &nbsp; &nbsp; //PROB_INDEX&#91; CONTEXT_PROB &#93;++;<br />&nbsp; &nbsp; &nbsp; //PROB = PROB_INDEX&#91; CONTEXT_PROB &#93;;<br />&nbsp; &nbsp; &nbsp; CUTOFF = HIGH - PROB_TABLE&#91; PROB &#93;;<br />&nbsp; &nbsp; &#125;<br />&nbsp; &#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Jun 30, 2008 5:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">Well, i just needed some rambling... Does this make sense for anyone else? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />Yes it makes sense.<br />However at times I'm worried that I'm not using the word 'context' correctly, and therefore may be misunderstanding some of what you are saying.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">1) At this point, i don't think there is more than 8 PROB contexts (not sure if the MPS use more than 8, however), as i saw an example that apparently disproved my previous hypothesis (that the previous bits in the same nibble were used to decide the context) in the bit #18. It's just i'm unable to see clearly how the PROB/MPS evolution works.</div><br />To make sure I'm using the terminology correctly:<br />It appears each bit in the decompressed bytes have their own 'context'.  Each context tracks the current probability of getting a LPS for a given 'surrounding' (for lack of a better word).<br />Or are you using context in the sense I used the word 'surrounding'? (well, since you said eight, unless there is something new/big you found, I assume I'm understanding correctly)<br /><br />If so, what is your feeling for what "surroundings" matter for each context?<br /><br />I haven't been able to figure out the PROB evolution either, but noticed that it appears to depend on the bit two bytes ago.  (there were some probability values with bit17 that seem to require knowledge of this)<br /><br />So I'm thinking something along this line at the moment, where OUT is a list of the last decompressed data bits (LSB last) is:<br />index_bitplane0 = BIT(out,15)<br />index_bitplane1 = BIT(out,15) + 2*BIT(out,0)<br />index_bitplane2 = BIT(out,15) + 2*BIT(out,0) + 4*BIT(out,1)<br />index_bitplane3 = BIT(out,15) + 2*BIT(out,0) + 4*BIT(out,1) + 8*BIT(out,2)<br />index_bitplane4 = BIT(out,15)<br />index_bitplane5 = BIT(out,15) + 2*BIT(out,0)<br />index_bitplane6 = BIT(out,15) + 2*BIT(out,0) + 4*BIT(out,1)<br />index_bitplane7 = BIT(out,15) + 2*BIT(out,0) + 4*BIT(out,1) + 8*BIT(out,2)<br /><br />Which of course can be written redundantly using the simpler:<br />index = 16*(bit# % 8) + BIT(out,15) + 2*BIT(out,0) + 4*BIT(out,1) + 8*BIT(out,2)<br /><br /><br />Actually, when the bit two bytes ago is zero, the probability seems to continue evolution normally.  I haven't tested this extensively yet.<br /><br />It's almost as if when the "surroundings" can finally depend on that bit, it somehow tries to "fill in" the probabilities for those 'surroundings' based on what was seen already.  I haven't been able to figure out a simple  means of how it fills in such a table yet, so this may be off base.  But it can't be denied that the probabilities for these 'new' surroundings are non-$5A starter values.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">3) Due to the fact that there are (at least) 8 contexts the data we currently have is somewhat limited... the 8 first output bits are trivial; the 8 following ones are still easy ones and, when the fun starts (in the third byte), the data begin to become sparse, so after some (few) bits, we can not even guarantee which are the "real" PROB and MPS. Not sure if you understand what i mean...</div>
<br />Yeah, I understand.  But as I'm still pondering on the bit16, bit17, I can usually still figure out PROB (and definitely mps) for most of the really weird cases.
<br />
<br />Maybe Caitsith can use his other cartridges to get us an extra nibble or two.  Actually, Caitsith, could you run some tests to get more data for the "a bunch of zeros first" data?  If we can see the prob evolve all the way to 1, then we'll finally know the rest of those table values which could help in interpretting other data.
<br />
<br />
<br />Also, I finally figured out an exploit to allow access to all the SF3 registers and DRAM from a program running on the copier.  This means we can conceivably record much larger chunks at a time (say ~ 1 MB instead of 32kBytes).
<br />
<br />
<br />Andreas,
<br />I like your plans for the custom data setup.  Unfortuantely, we seem distant from that possibility at the moment.  Kammedo apparently has time and money to throw into it, but his equipment is failing.  I wish him the best, but to help move things along quicker I ordered another SPC7110 cartridge and some parts today.  I'll start with the somewhat dubious FIFO mod as that is easiest.  If that doesn't work I guess we'll look into getting a small PCB made... I hope it doesn't come to that though, as even with a PCB there will be a lot of wire connections to the cartridge, and as Caitsith can attest, by the time you have that many wires something is bound to be a bit flaky.  One step at a time I guess, but we'll get there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Jul 01, 2008 12:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">To make sure I'm using the terminology correctly:<br />It appears each bit in the decompressed bytes have their own 'context'. Each context tracks the current probability of getting a LPS for a given 'surrounding' (for lack of a better word).<br />Or are you using context in the sense I used the word 'surrounding'? (well, since you said eight, unless there is something new/big you found, I assume I'm understanding correctly)<br /><br />If so, what is your feeling for what "surroundings" matter for each context? </div><br /><br />At this point, my guess is that we are tracking 8 PROB values (one per bitplane, which i called contexts), but the evolution of MPS and maybe PROB seems to depend on surrounding bits/pixels. <br /><br />The surrounding bits that seems to matter are the previous bits in the same nibble and apparently the previous bits for the same bitplane. If you look at jolly_codger code, you see that the bits in the same nibble than the previous bits in the bitplane appear in the expresions, but that could be perfectly an artifact due to the way of expressing the evolution, so i'm not sure if those bits are needed.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">index = 16*(bit# % <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" /> + BIT(out,15) + 2*BIT(out,0) + 4*BIT(out,1) + 8*BIT(out,2) </div><br /><br />I believe i used this same thing some days ago (one of the many i tried), but i discarded it. I saw an example where bit #18 (the 3rd bit for bitplane #1) had PROB = 0x11 with the previous 2 bits in the bitplane = MPS, while the previous bits to those three (i mean, the bits for bitplane #0) were 1,1 and 0. Right now i'm supposing we are only tracking 8 PROB values, so my index now ranges from 0 to 7 only<br /><br />I have tried another schemes which works till reaching the 18th bit, but all begins to get more convoluted at that point.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Andreas,<br />I like your plans for the custom data setup. Unfortuantely, we seem distant from that possibility at the moment. Kammedo apparently has time and money to throw into it, but his equipment is failing. I wish him the best, but to help move things along quicker I ordered another SPC7110 cartridge and some parts today. I'll start with the somewhat dubious FIFO mod as that is easiest. If that doesn't work I guess we'll look into getting a small PCB made... I hope it doesn't come to that though, as even with a PCB there will be a lot of wire connections to the cartridge, and as Caitsith can attest, by the time you have that many wires something is bound to be a bit flaky. One step at a time I guess, but we'll get there.</div><br /><br />I understand the difficulty of it; I didn't want that to pressure anyone, but i thought it would be useful for everyone to understand where are the limits of the current interfaces. At this point, when i advance in the stream, i'm continuosly fearing i'm "looking through the cracks", using your words, so i'm feeling uneasy. I'm thinking in dedicating some time to automatize the reconstruction of the MPS/PROB evolution tree (by making a program to reconstruct automatically as much as possible and, when reaching the last nodes of the tree we can build with the current data, trying to generate automatically .loc files by searching appropriate data in the ROMs to continue the reconstruction when possible).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">SPL4 and MDH based tests are now possible. SPL4 mirrors its data rom at banks 0x10, 0x20, 0x30, 0x80, 0x90, 0xA0, and 0xB0, MDH mirrors its datarom to 0x20, 0x80, and 0xA0. Banks 0x40-0x7F, and 0xC0-0xFF decompress as all 0. I can run tests for all 3 games. Neviksti can only run tests for FEoEZ.</div>
<br />
<br />Ummm, if i didn't missed anything, in feoez you could use, by example, the address 0x900000 instead of 0x100000 and so on for the full [0,0x3fffff] and [0x800000, 0xbf0000] ranges, but that is not possible for SPL4 and MDH as they are using banks in the 2 ranges. Is this right? If so, what happens with the unused banks in the ranges [0x00-0x3f] and [0x80,0xbf]?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Tue Jul 01, 2008 1:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">Andreas,<br />I like your plans for the custom data setup.  Unfortuantely, we seem distant from that possibility at the moment.  Kammedo apparently has time and money to throw into it, but his equipment is failing.  I wish him the best, but to help move things along quicker I ordered another SPC7110 cartridge and some parts today.  I'll start with the somewhat dubious FIFO mod as that is easiest.  If that doesn't work I guess we'll look into getting a small PCB made... I hope it doesn't come to that though, as even with a PCB there will be a lot of wire connections to the cartridge, and as Caitsith can attest, by the time you have that many wires something is bound to be a bit flaky.  One step at a time I guess, but we'll get there.</div>
<br />
<br />Sorry guys, been busy with all the other stuff (and life, in the spare time). 
<br />
<br />Considering the fact that I have not too much soldering experience (but some), and considering we want to make it "quick and dirty but still clever" - wouldn't it be much quicker, cheaper and faster to just
<br />
<br />a) buy a 4 MB eprom for U2, a smaller prog eprom for U1 + flasher 
<br />b) flash a suitable test table + test data + test program on the roms
<br />c) solder them to a feoez cart
<br />
<br />I think I should be able to buy the roms and flasher together either from a shop or from ebay. If so, please name the parts that you think would be more suitable and ill get them asap.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jul 01, 2008 2:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">At this point, my guess is that we are tracking 8 PROB values (one per bitplane, which i called contexts), but the evolution of MPS and maybe PROB seems to depend on surrounding bits/pixels.</div><br />But because they depend on the surroundings, and those evolve separately, aren't we tracking 1 PROB to bitplane0, 2 for bitplane1, 4 for bitplane2, etc (30 in total)?<br /><br />That's why I'm worried I'm misunderstanding the terminology (or your code ideas) here.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">I understand the difficulty of it; I didn't want that to pressure anyone, but i thought it would be useful for everyone to understand where are the limits of the current interfaces.</div><br />No worries.  I understand.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Sorry guys, been busy with all the other stuff (and life, in the spare time). <br /><br />Considering the fact that I have not too much soldering experience (but some), and considering we want to make it "quick and dirty but still clever" - wouldn't it be much quicker, cheaper and faster to just<br /><br />a) buy a 4 MB eprom for U2, a smaller prog eprom for U1 + flasher <br />b) flash a suitable test table + test data + test program on the roms<br />c) solder them to a feoez cart<br /><br />I think I should be able to buy the roms and flasher together either from a shop or from ebay. If so, please name the parts that you think would be more suitable and ill get them asap.</div>
<br />Sometimes straightforward is best.  If you feel that is the best way to go for you, then go for it.  Any means of running custom data is better than none <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />If you don't have the means to erase EPROM, I'd suggest getting flash chips (which will probably end of having to be smaller in size) instead so you can rewrite everything.
<br />
<br />How do we get the test results out in that setup? Is the idea to write to flash directly from the SNES, and you remove the chip and read it out with your programmer?
<br />
<br />If you are still planning on using the game doctor, and saving test results that way, then you don't need U1 (actually, you don't want U1 as it will cause bus clashes with the SF7).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Jul 01, 2008 2:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But because they depend on the surroundings, and those evolve separately, aren't we tracking 1 PROB to bitplane0, 2 for bitplane1, 4 for bitplane2, etc (30 in total)?<br /><br />That's why I'm worried I'm misunderstanding the terminology (or your code ideas) here. </div>
<br />
<br />No. I think you caught it. But those were just my thoughts last saturday. Now i'm not so sure, so i'm wondering if we are only tracking 1 PROB per bitplane, but the surrounding bits are used to determine the evolution of that PROB value.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Tue Jul 01, 2008 4:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent"><br />If you don't have the means to erase EPROM, I'd suggest getting flash chips (which will probably end of having to be smaller in size) instead so you can rewrite everything.<br /><br />How do we get the test results out in that setup? Is the idea to write to flash directly from the SNES, and you remove the chip and read it out with your programmer?<br /><br />If you are still planning on using the game doctor, and saving test results that way, then you don't need U1 (actually, you don't want U1 as it will cause bus clashes with the SF7).</div>
<br />
<br />Well, I was thinking about displaying the results on-screen, and to write a testing rom that lets you select the entry on a table, etc, so there it would be needed to only burn the data once on the EEPROM.
<br />Also, it could have a "export" function that copies the data to SRAM, and from there you could dump it easily. How does that sound?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jul 01, 2008 10:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Well, I was thinking about displaying the results on-screen,</div><br />I would <em><span style="text-decoration: underline">strongly</span></em> suggest against that.  This will greatly limit our access to data.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">and to write a testing rom that lets you select the entry on a table, etc, so there it would be needed to only burn the data once on the EEPROM.</div><br />Because of the type of data we need, we will almost assuredly need to make a couple tests.  Hopefully it will be very few, and we will try to keep the tests few for you... but I strongly suggest using a ZIF (zero insertion force) socket for U2 so that you can easily remove, reprogram, and reinsert your EEPROM.<br /><br />And while it is completely up to you,  I'd fix up the SF7 to get everything working instead of trying to change U1.  Both because the SF7 can be used for dumping the data, and because given past experience, we're bound to need to (because of bugs) or want to (because of new data analysis) change the SNES code.<br /><br />These are just suggestions.  At the moment you are the only one close to the capability of dumping custom data, so don't let me derail you if you are all set on a particular path.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Also, it could have a "export" function that copies the data to SRAM, and from there you could dump it easily. How does that sound?</div>
<br />That would work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Tue Jul 01, 2008 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">And while it is completely up to you,  I'd fix up the SF7 to get everything working instead of trying to change U1.  Both because the SF7 can be used for dumping the data, and because given past experience, we're bound to need to (because of bugs) or want to (because of new data analysis) change the SNES code.<br /><br />These are just suggestions.  At the moment you are the only one close to the capability of dumping custom data, so don't let me derail you if you are all set on a particular path.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Also, it could have a "export" function that copies the data to SRAM, and from there you could dump it easily. How does that sound?</div><br />That would work.</div>
<br />
<br />I am open to any suggestion which isnt maybe "totally" complicated. 
<br />I dont have any practical experience with electronic parts, so I would need 
<br />some help on that side (as in which parts to buy, help to settle up circuitrys and such). 
<br />
<br />Speaking of which : what kind of EPROM would you suggest (if there is one suggestable on the fly). I am still retained to just "bridge" the pin 1 straight over the GDSF internal. But maybe I should just give it a try and see what happens?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jul 01, 2008 12:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In that case let's see if we can get everything working on your SF7.  We should really check that first, because if it won't work it really complicates getting data out with your system and we'll have to come up with other ideas.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Tue Jul 01, 2008 10:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">In that case let's see if we can get everything working on your SF7.  We should really check that first, because if it won't work it really complicates getting data out with your system and we'll have to come up with other ideas.</div>
<br />
<br />I would give it a try <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Wed Jul 02, 2008 10:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">I dont have any practical experience with electronic parts, so I would need <br />some help on that side (as in which parts to buy, help to settle up circuitrys and such).</div><br />Okay, then the straightforward approach probably is the best.<br />This of course still requires the cart to work with the SF7.  But to look ahead a bit...<br /><br />What equipment do you have?<br />Do you already have stuff for soldering and desoldering parts?<br />Do you already have an EPROM, EEPROM, or FLASH programmer?<br /> <br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Speaking of which : what kind of EPROM would you suggest (if there is one suggestable on the fly).</div>
<br />I would suggest FLASH or EEPROM to make erasing and reprogramming much easier.  FLASH is cheaper, so I'd go with that.  Also, to make it so you can remove the part with ease and put as little strain on the wires as possible, I'd suggest a ZIF (zero insertion force) DIP socket.
<br />
<br />Assuming you already have the tools for soldering and desoldering, but need everything else, then I'd suggest the following:
<br />
<br />from digikey.com:
<br />CAT28F020LI-12-ND
<br />FLASH, 2Mbit (256k x 8), 32pin DIP, 5V 
<br />~ $10
<br />
<br />A304-ND
<br />32pin ZIF DIP socket
<br />~ $10
<br />
<br />from EBay:
<br />On Ebay I searched for 28F020 (after you press search, click "search title and description" checkbox and search again) and saw lots of programmers for ~$40.  You need a working parallel port though.  The USB models cost more, ~ $80.
<br />
<br />
<br />
<br />Instructions:
<br />Here's the datasheet for the FLASH component
<br /><!-- m --><a class="postlink" href="http://www.catsemi.com/datasheets/28F020.pdf">http://www.catsemi.com/datasheets/28F020.pdf</a><!-- m -->
<br />
<br />1] cut trace to /OE pin of U2 and wire that pin to Vcc.
<br />2] Using your pinout, connect up the address pins of the ROM to the ZIF socket which will hold the 28F020.  Remember that because the ROM is in 8 bit mode, D15 on the ROM -&gt; A0 on the 28F020 socket, A0 of ROM -&gt; A1 on 28F020 socket, A2 ROM -&gt; A3 on 28F020 socket, etc.
<br />3] Attach D0-D7 of the ROM to appropriate pins on the socket.
<br />3] /WR on 28F020 socket, tie to Vcc
<br />4] wire from U2 /OE output on SPC7110 -&gt; /OE on 28F020 socket
<br />5] Tie /CS pin of 28F020 socket to ground.
<br />6] Attach Vcc and Gnd (Vss) pins of 28F020 socket to Vcc and Gnd respectively.
<br />7] According to the data sheet, you can tie Vpp to Vcc or GND (whatever is most convenient for you).
<br />
<br />That's it!
<br />Program the chip with your programmer, put it in the socket, and wala... we can run custom decompressions. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />To make soldering all those wires a bit easier, you can use a common trick that cartridge hackers use... the pin spacing of the surface mount ROM chips on your board should match the spacing of wires on a ribbon cable such as an unused IDE cable you might have laying around.  See step 3 here for pictures:
<br /><!-- m --><a class="postlink" href="http://snesdev.romhack.de/sf2.htm">http://snesdev.romhack.de/sf2.htm</a><!-- m -->
<br />Note that if you do this, many of the wires will not actually be used.
<br />
<br />If you find it easier to remove U2 all together, then step one can be avoided (but then be very <em>very</em> careful not to accidentally pull off the pads on the PCB, they are fragile without a chip on them and can't support much force on a wire attached to them).
<br />
<br />If you have any questions, just let us know.
<br />
<br />EDIT: In case it matters to you, comparitively it shouldn't be that hard to remove all the wires later and fix up that one trace if you want the cartridge to work again after we're all done with testing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>caitsith2</b> [ Thu Jul 03, 2008 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When we do get a means to do custom decompressions, make sure the first 8 bytes are 0102040810204080 and the last 8 are FEFDFBF7EFDFBF7F.  This is so that one has a consistent means of making sure the cartridge is present.
<br />
<br />Also for number of zero before nibble location testing, one can do the following.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">db 0102040810204080 <br /><br />;Table Definition &#40;Up to 256 from this offset.&#41;<br />dw 0000<br />dw addr1<br />dw 0000<br />dw addr2<br />db 0000<br />dw addr3<br />dw 0000<br />dw addr4<br />db 0000<br />dw addr5<br />dw 0000<br />dw addr6<br />db 0000<br />dw addr7<br />dw 0000<br />dw addr8<br /><br />;Distance from Offset definition.<br />addr8:<br />db 00<br />addr6:<br />db 00<br />addr4:<br />db 00<br />addr2:<br />db 00<br />db FF<br />addr7:<br />db 00<br />addr5:<br />db 00<br />addr3:<br />db 00<br />addr1:<br />db 0F<br /><br />org 3FFF8<br />db FEFDFBF7EFDFBF7F<br /></div><br /><br />What you do have to remember is that the next byte in the compressed stream will cut a bit into the existing definitions, but thats fine, if what we are looking for is ramping up the distance before first nibble.<br />[/code]

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>12</strong> of <strong>21</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>