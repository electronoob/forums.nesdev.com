<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=5299" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-06-19T16:33:23-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=5299</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-06-19T16:33:23-07:00</updated>
<published>2009-06-19T16:33:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48123#p48123</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48123#p48123"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48123#p48123"><![CDATA[
The more I investigated it, the more I thought "Blast Processing" was the name of Sonic 2's engine, like "Build" or "id Tech 3" or "RAGE" engines.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Jun 19, 2009 4:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2009-06-19T13:59:00-07:00</updated>
<published>2009-06-19T13:59:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48117#p48117</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48117#p48117"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48117#p48117"><![CDATA[
<div class="quotetitle">LocalH wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">"Overrated"? That's what Nintendo fanboys said about Sega's "Blast Processing" engine that powered Sonic the Hedgehog 2 for Sega Genesis. But if you want to make a game that moves as fast as Sonic 2. you might have to extend vblank.<br /></div><br />"Blast Processing" is DMA to VRAM, that's it.</div><br /><br /> What!? I've never heard Blast Processing referred to as that. That would mean the SNES has Blast Processing x8 <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> There's no hidden meaning. It was marketing term to tell people the system as a whole was pretty fast, instead of bogging down people with technical details. It's more effective that way. People buy into that shite all the time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Fri Jun 19, 2009 1:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LocalH]]></name></author>
<updated>2009-06-19T11:05:00-07:00</updated>
<published>2009-06-19T11:05:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48107#p48107</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48107#p48107"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48107#p48107"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />"Overrated"? That's what Nintendo fanboys said about Sega's "Blast Processing" engine that powered Sonic the Hedgehog 2 for Sega Genesis. But if you want to make a game that moves as fast as Sonic 2. you might have to extend vblank.<br /></div><br />"Blast Processing" is DMA to VRAM, that's it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=325">LocalH</a> — Fri Jun 19, 2009 11:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2009-06-17T16:01:54-07:00</updated>
<published>2009-06-17T16:01:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48069#p48069</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48069#p48069"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48069#p48069"><![CDATA[
That's why they needed a mapper that could take unmapped CHR-RAM  sections of VRAM (for patterns) and map it into CPU address range so you don't have to do everything in vblank. I guess large_rom+MMC3/5 was cheap enough not warrant it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Wed Jun 17, 2009 4:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-06-16T18:15:29-07:00</updated>
<published>2009-06-16T18:15:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48053#p48053</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48053#p48053"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48053#p48053"><![CDATA[
The NES with 8 KB CHR RAM has enough CHR RAM for 128 8x16 sprite tiles. This is in theory enough to double-buffer all 64 sprites on the screen. The limitation is VRAM bandwidth. Animate a main character slightly bigger than Super Mario (five 8x16 tiles, including extra space for oversized feet) at 12 fps (Disney cel animation frame rate), and that's 1 tile per frame. I've calculated that one can comfortably fit five 32-byte copies plus OAM DMA into NTSC vblank, so copying two rows, two columns, and 1/5 of the main character leaves no time left for copying anything else, like animated backgrounds or enemy sprite animations or the palette.<br /><br />"Overrated"? That's what Nintendo fanboys said about Sega's "Blast Processing" engine that powered Sonic the Hedgehog 2 for Sega Genesis. But if you want to make a game that moves as fast as Sonic 2. you might have to extend vblank.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jun 16, 2009 6:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-06-16T13:05:37-07:00</updated>
<published>2009-06-16T13:05:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48049#p48049</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48049#p48049"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48049#p48049"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Small updates aren't enough when you want to animate your main character with them. The main character is usually the greatest tile user, so it is a big advantage to have his patterns be dynamic.<br /></div><br />This is 100% correct. The player is more likely to notice details on the main character than on random enemies, so it must be designed with care.<br /><br />However, by using double-buffering techniques, if updating the frame each odd frames is enough, you could go ahead without using Battletoads techniques. Or if you are writing a RPG where the main character is 16x16 pixels. Else, yeah go the battletoads way.<br />Again do like you wan't I just think personally that forced blanking is overrated and should be avoided unless absolutely necessary, but that don't mean you can't use it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jun 16, 2009 1:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-06-16T12:59:50-07:00</updated>
<published>2009-06-16T12:59:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48048#p48048</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48048#p48048"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48048#p48048"><![CDATA[
Small updates aren't enough when you want to animate your main character with them. The main character is usually the greatest tile user, so it is a big advantage to have his patterns be dynamic. That makes it possible for him to have many more frames than usually possible, and even makes room for other sprites.<br /><br />I too have my reservations when it comes to forced blanking, but in this case I was thinking: since I'll spend quite a few scanlines doing nothing, I might as well use that time to update tiles.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Jun 16, 2009 12:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-06-16T12:46:51-07:00</updated>
<published>2009-06-16T12:46:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48047#p48047</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48047#p48047"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48047#p48047"><![CDATA[
If you do want to update a significant chunk of pattern tables, usually you could do it 4 tiles at a time and split the update in small parts. If you can't then go the Battletoads way, but only if you can't do something else. My opinion is that artificial VBlank is overrated on this forum, but that's just my opinion.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jun 16, 2009 12:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-06-16T12:35:14-07:00</updated>
<published>2009-06-16T12:35:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48046#p48046</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48046#p48046"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48046#p48046"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />my pesonal advice would be to avoid artificial VBlank for a part of the screen if you can.<br /></div><br />I understand why that's advisable. Playing by the rules surely is much safer than trying to bend them.<br /><br />But balancing what we want is tough. If you want to animate parts of the pattern tables you either need a mapper that can switch it in small chunks or you have to use CHR-RAM. Since I want the carts for my games to be easy to make, I should avoid complex mappers, meaning that the only way is the Battletoads way.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />"Normal" PPU updates of up to 2 rows or 2 colomns or one row + one columns, with corresponding attributes updates and sprite DMA are possible with completely rolled loops, and more is possible with unrolled loops.<br /></div><br />I agree that regular VBlank should be enough for the basic tasks, but if you want to update a significant chunk of the pattern tables you need extended VBlank.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Jun 16, 2009 12:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-06-16T12:42:05-07:00</updated>
<published>2009-06-16T12:10:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48045#p48045</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48045#p48045"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48045#p48045"><![CDATA[
I don't understand most of your monologue, but my pesonal advice would be to avoid artificial VBlank for a part of the screen if you can.<br />"Normal" PPU updates of up to 2 rows or 2 colomns or one row + one columns, with corresponding attributes updates and sprite DMA are possible with completely rolled loops, and more is possible with unrolled loops.<br /><br />The only way this really won't be enough is if you want to do a lot of CHR-RAM updates. If you use CHR-ROM you definitely want to use blank pattern instead.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jun 16, 2009 12:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-06-16T11:10:25-07:00</updated>
<published>2009-06-16T11:10:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48044#p48044</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48044#p48044"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48044#p48044"><![CDATA[
Heh, this is just one more try of my never ending quest for a nice clean bar at the top of the screen that will hide vertical scrolling glitches. The 2 possible approaches are:<br /><br /><strong>1. Disable rendering during VBlank and enable it back a few scanlines (the bar's height) after the frame has started.</strong><br /><br /><strong>Strong points:</strong> since rendering is off, more data can be sent to VRAM; can be done with any mapper and it doesn't matter if CHR is ROM or RAM;<br /><br /><strong>Weak points:</strong> will alter the dot crawl pattern; must use hacky $2005/$2006 writes to set the scroll; enabling/disabling sprites during rendering is very timing-sensitive, and glitches may happen; needs timed code or IRQs that don't rely on rendering;<br /><br /><strong>2. Select transparent patterns for the whole pattern table, so that although rendering is enabled, only the background color will be rendered. After a few scanlines, the actual patterns to be used for the frame are switched in.</strong><br /><br /><strong>Strong points:</strong> doesn't mess with the regular PPU behavior; mapper IRQs can eliminate the need for timed code;<br /><br /><strong>Weak points:</strong> requires a mapper with CHR bankswitching; wastes CHR by holding blank tiles; the time it takes to bankswitch patterns depends on the mapper, so the overall timing has to be adjusted accordingly;<br /><br />So, I've played with both techniques but there is always a point where one of their flaws gets in my way. So I'm currently experimenting with a variation of the first technique. This variation is supposed to fix the dot crawl issue.<br /><br />I don't know the details because I don't understand much about video signals, but if rendering is disabled by the time rendering starts, the image looks different than usual. It has something to do with an extra PPU cycle at the end of the pre-render scanline. This affects how jagged some lines look and things like that.<br /><br />Some people don't mind the difference, but I'd prefer to have the normal type of dot crawl, which is why I was trying a variation of the first technique, where sprite rendering would be on at the start of the frame (the backgorund doesn't need to be enabled).<br /><br />Thing is that disabling sprites during rendering can have very undesirable results, as <a href="http://nesdev.com/bbs/viewtopic.php?t=4647" class="postlink">tepples and blargg recently discovered</a>. This topic was my attempt to get others' impressions on this technique, but it appears nobody was really interested. I don't blame them, I've been insisting on this border thing for too long already!<br /><br />Anyway, if anyone wants to know the result, through tests on my NES I found out that if sprites are disabled and enabled at the very end of the scanlines, no sprite corruption seems to happen. So it appears I will be able to have the border I always wanted with no side effects. But I'm too tired of this already, and if eventually side effects do show up I'll just accept the different dot crawl.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Jun 16, 2009 11:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Cybergoth]]></name></author>
<updated>2009-06-15T04:13:52-07:00</updated>
<published>2009-06-15T04:13:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48019#p48019</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48019#p48019"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48019#p48019"><![CDATA[
Being a total noob in NES programming I have a hard time following your explanations, could you possibly post your code example? <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1032">Cybergoth</a> — Mon Jun 15, 2009 4:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-06-14T14:14:55-07:00</updated>
<published>2009-06-14T14:14:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48009#p48009</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48009#p48009"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=48009#p48009"><![CDATA[
Yeah, all hell breaks loose if sprites are disabled during rendering, as discovered by tepples and blargg. Back to the drawing board, I guess. Maybe I should just consider sticking to the alternate dot crawl, as that would solve all my problems.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Jun 14, 2009 2:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-06-14T02:25:48-07:00</updated>
<published>2009-06-14T02:25:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=47979#p47979</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=47979#p47979"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=47979#p47979"><![CDATA[
I made a test ROM and this technique seems to work the same across the emulators I tested without any timing discrepancies. I just have to test it on my NES to make sure it works. I'll do it tomorrow because the sun is already rising and I have to get some sleep.<br /><br />I used the same sprite test I used on my previous test ROM, and all groups were correctly rendered. Only FCEUXD showed some glitches during the very first scanline, but based on previous experiments I know it does show sprite garbage up there quite often, even though it's impossible for sprites to actually show up there, so it's probably a bug of the emulator, which is quite dated.<br /><br />I want to have rendering enabled by the time the frame starts because I don't want to alter the dot crawl pattern. I do not mind the different pattern on static pictures, in fact I think it even looks better in this case, but depending on the kind of movement the dot crawl can look pretty weird and not constant.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Jun 14, 2009 2:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-06-13T12:00:19-07:00</updated>
<published>2009-06-13T12:00:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=47959#p47959</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=47959#p47959"/>
<title type="html"><![CDATA[Extra blanking time, again]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5299&amp;p=47959#p47959"><![CDATA[
Hey everyone, I just had an idea for that whole issue of blanking the top scanlines that I'd like to validate with you guys. Should I decide to actually disable rendering during the first few scanlines of a frame, what would the procedure be to not mess with the 341/340 cycles pattern of the pre-render scanline?<br /><br />If I keep only sprites enabled as the frame starts, will the 340/341 pattern still occur? If so, would it be OK to then disable the sprites during the first rendered scanline (since they don't show up there anyway) and after the blank scanlines enable both sprites and background again?<br /><br />Do you see anything wrong with this approach? What about that bug tepples discovered with his game that had something to do with the exact moment when sprites were disabled?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Jun 13, 2009 12:00 pm</p><hr />
]]></content>
</entry>
</feed>