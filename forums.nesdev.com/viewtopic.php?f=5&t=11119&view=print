<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Recompiling assembly language to C</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Recompiling assembly language to C</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11119">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11119</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 25, 2014 8:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's a principle in software engineering: <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" class="postlink">Don't Repeat Yourself</a>. By this, Hunt and Thomas mean &quot;Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&quot; But unfortunately, technical and political obstacles inherent in certain platforms don't always make this easy.<br /><br />Some time ago, I wrote a proof-of-concept implementation of <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10701" class="postlink">6502 assembly language as ca65 macros</a> that output <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.byte</tt> statements. I intended for this to lead to an assembler that emits SPC700 opcodes, so that I can share music sequence interpretation code between NES and Super NES versions of a music engine. And blargg <a href="http://forums.nesdev.com/viewtopic.php?p=121690#p121690" class="postlink">delivered</a>, first by making a Sony-syntax assembler as a macro pack, then by adding a layer of 65C02-to-Sony preprocessor macros on top of that.<br /><br />Today I noticed that Leushenko of Programming Puzzles &amp; Code Golf Stack Exchange implemented something along the same lines: an <a href="http://codegolf.stackexchange.com/a/24709" class="postlink">x86-to-C assembler as a set of C preprocessor macros</a>. In theory, this would help with porting old PC games that use assembly language subroutines to modern ARM-based platforms. And doing something similar for 6502 would allow sharing game logic code between NES and PC versions of a game.<br /><br />Very polyglot. Such portability. Wow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Mar 25, 2014 9:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds like static recompilation all over again, but with C code instead of ASM output.<br />I was reading about static recompilation once, and the thing that stood out the most was the optimization of deferring flag calculation until you actually need its value.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cyc</b> [ Wed Mar 26, 2014 10:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">And doing something similar for 6502 would allow sharing game logic code between NES and PC versions of a game.</div><br />this remind me of <a href="http://benlo.com/microchess/index.html#8080" class="postlink">Microchess C Emulation</a><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Download the Microchess C Emulation, which includes Microchess for the Kim-1 with 6502 to C macros and an exe file for playing Microchess on a PC as created by Bill Forster.</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Mar 26, 2014 10:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />While it's usually always possible to translate source code from a language to another automatically, the result will usually suck and be unusable, just like machine translation of a human language.<br /><br />I don't really get the point, if you want to get high quality source code that is understandable and maintenable to some extent you'll have to translate manually anyways. And if you don't want this, why translate in the 1st place ? It's probably much easier / makes more sense to interpret the 1st language in a source code written in the 2nd language.<br /><br />PS : What I said doesn't apply to high level langauge -&gt; assembly/binary translation which is compilation, but applies to all other kind of translations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 26, 2014 11:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Manual translation violates Don't Repeat Yourself. It allows bugs to exist in the logic of one version but not in another. And there's no way to efficiently propagate changes from the original to a manual translation.<br /><br />Are you claiming that you would prefer to embed a 6502 interpreter in a PC version, or an interpreter for some other language in both the PC version and the NES version? The overhead of an interpreter has a runtime speed or electric power cost (which may or may not be negligible).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Mar 26, 2014 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Translation of assembly to C could be done manually without potentially changing any of the logic or introducing bugs if the C compiler for the target CPU can be controlled in such a way to produce an identical binary file(s).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Mar 26, 2014 11:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm kind of amused at the idea of throwing a C compiler—which theoretically has a code optimizer that's all about fixing code to be fast instead of understandable—and repurposing it to do static recompilation.<br /><br />I'm a little concerned that older ISAs with their paucity of first-class registers, and with having to emulate smaller register sizes, won't translate well; theoretically this is something currently fixed with hardware-level register renaming instead of a higher-level software solution.<br /><br />The Microchess example is a good data point for this purpose, though: e.g. the STRATGY function was 55 lines of 6502 and approximately 110 bytes, becomes 185 lines of x86_64 and approximately 680 bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Wed Mar 26, 2014 2:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Are you claiming that you would prefer to embed a 6502 interpreter in a PC version, or an interpreter for some other language in both the PC version and the NES version?</div>I would prefer to just make the PC version include an emulator (and possibly enhancements too, dealing with graphics, input, music, and save files), and then the ROM image can be transferred to run on any other computers with an emulator, and on EEPROM cartridges.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Mar 26, 2014 2:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Manual translation violates Don't Repeat Yourself. It allows bugs to exist the logic of one version but not in another.</div><br />What about tossing the version in the older language ?<br /><br />When I translated GBAMusRiper from Java to C++ as I've realized a year after I made the wrong choice of a language, I tossed the old Java version. I was able to make the code more elegant and add some functionalities while translating, too.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are you claiming that you would prefer to embed a 6502 interpreter in a PC version, or an interpreter for some other language in both the PC version and the NES version? The overhead of an interpreter has a runtime speed or electric power cost (which may or may not be negligible).</div><br />Wow it depends so much on the application you can't have general rules about this kind of stuff.<br /><br />I'd say the only general rule when it comes to computer science is that there is no general rule <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br />I hate people saying stuff like &quot;you should NEVER use break or continue&quot; or &quot;you should never program in assembly&quot; or whatever. It just depends on what you want to do and what are your goals. Just know what you're doing and think like a grow up man with common sense, instead of blindly following rules other random people made (if those people are famous, it's even one more reason NOT to follow them blindly).<br /><br />If you're targeting two platforms with different CPUs, and want to maintain the code on both at the same time, assembly is probably a terrible choice. But if you already coded in 6502 assembly and refuse to translate to something else, then an interpreter is definitely the best solution.<br />The resulting code probably won't be significantly less per formant that a horrible decompilation and recompiled zombie C code, but writing an interpreter is much more elegant.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Mar 26, 2014 3:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For porting an old assembly program to a new architecture that outclasses it, this is a fine solution. It's probably about the same complexity as an emulator to write, but by doing the transcode statically you get to trade code size for a more efficient emulation, especially if you've got a good optimizing compiler to feed it into.<br /><br />I don't think I'd want to use this to cross develop NES + PC though. I am currently working on an NES game by writing it in C++ for PC with the NES limitations in mind, then manually porting the code to NES assembly once I have finished iterating on the C++ version. I find it insanely easier to make iterations and changes to C++ code vs assembly, so I think there would be a lot lost by doing primary development in assembly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 26, 2014 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I am currently working on an NES game by writing it in C++ for PC with the NES limitations in mind</div><br />And I've done so in Python, both for subroutines and for main. Mr. Podunkian did it for <em>STREEMERZ</em>, with thefox completing the port.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">then manually porting the code to NES assembly once I have finished iterating on the C++ version.</div><br />The problem with this sort of <a href="https://en.wikipedia.org/wiki/Waterfall_model" class="postlink">waterfall model</a> comes when you think you've &quot;finished iterating&quot; but you think of changes to make after you've made progress on the port. Unless you abandon the original C++ version entirely, you have to maintain them in parallel.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Mar 27, 2014 12:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For porting an old assembly program to a new architecture that outclasses it, this is a fine solution. It's probably about the same complexity as an emulator to write, but by doing the transcode statically you get to trade code size for a more efficient emulation, especially if you've got a good optimizing compiler to feed it into.</div><br />Even the best optimizing compilers are designed to work with &quot;normal&quot; code. Decompiled assembly code is going to look like a huge mess (with statements like a = , x =, y = and so on for emulating the corresponding 6502 instructions), and the optimizing compiler isn't likely to find the corresponding assembly code again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Mar 27, 2014 6:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Recompiling assembly language to C</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I mean that an optimizer run on what is essentially an &quot;unrolled&quot; emulation of a program should perform significantly better than the equivalent emulator. Whether or not the compiler can do optimizations has nothing to do with &quot;normal&quot; code, machine generated code can optimize well or poorly, and the generator can be tuned to create well-optimizing code if you know enough about the compiler it's going to feed.<br /><br />I actually maintained a code generator in this way on my last job; it was an interesting experience. Occasionally you do get unlucky and your first approach generates worst-case code for the compiler, but you can fix this if you're paying attention. A lot of the time you get to watch large chunks of generated code just evaporate in the optimization step.<br /><br />There is not really any hope of recovering the original assembly via a normal compiler, but why would you be compiling back to 6502? My statement about efficiency was not a comparison to well crafted assembly.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>