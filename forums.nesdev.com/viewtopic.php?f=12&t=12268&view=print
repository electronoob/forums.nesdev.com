<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 16bit table indexing problem</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">16bit table indexing problem</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12268">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12268</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>9</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sat Jan 17, 2015 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have no idea why, but a code I am trying to make doesn't work. I think there is a problem with me loading values from a table using a 16bit accumulator, because the first value I'm loading is $FFFF and beq-ing it, and for some reason, it thinks it is 0 and branches when it is not supposed to. (Either that, or my code is just really messed up.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> ) I tried setting up the table like .DB $FF,$FF,$00,$00 (and so on) because WLA said I couldn't do .DB $FFFF,$0000.<br /><br />Here's my code:<div class="attachtitle">Attachment:</div><div class="attachcontent">
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=2478">Metasprite Demo.rar</a> [222.56 KiB]
			</span><br />
			<span class="gensmall">Downloaded 26 times</span>
		

		<br />
	</div><br />The code is just the metasprite one I had made, but I tried to make it work with 16bit values. A sprite still appears on the screen, but only because I have it set to using hioam.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Jan 17, 2015 3:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You want <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.dw $ffff,$0000</tt>, by the way.  That means &quot;define word&quot;, and a word on 65816 is 16-bit.  <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.dw</tt> means define-word, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.db</tt> means define-byte.<br /><br />I wouldn't be surprised if <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.db $ff,$ff</tt> caused the assembler to generate odd code when using 16-bit lda/etc. statements that reference them.  Did you generate an assembly listing (I explained how to do this <a href="http://forums.nesdev.com/viewtopic.php?p=139168#p139168" class="postlink">in another thread recently</a> -- the procedure is the same but use wla-65816.exe for assembling of course) and see if the code being generated is what you expect?<br /><br />P.S. -- No I haven't looked at the source.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sat Jan 17, 2015 4:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I fixed the table, but sadly, it still doesn't work  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />. Also, about the assembly listing, do you create it by writing -i between wla and the filename? Will it work with the wla.bat file?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Jan 17, 2015 4:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">I fixed the table, but sadly, it still doesn't work  :(. Also, about the assembly listing, do you create it by writing -i between wla and the filename? Will it work with the wla.bat file?</div><br />You have to use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-i</tt> as a flag to both the assembler <strong>and</strong> the linker.  And of course it will work in a batch file -- there's nothing different about one of those compared to, say, doing it manually.  I.e.:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">wla-65816 -i -o %1.asm %1.obj<br />wlalink -i -vr temp.prj %1.fig<br /></div><br /><br />(Who uses FIG files in this day and age?!?  Good lord, talk about an uncommon ROM format even back in the 90s...)<br /><br />Also, could you at least give some relevant code bits/lines (and please reference the filename) where something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$ffff / beq {label}</tt> is actually branching?  (It should not -- ever.  <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$ffff</tt> would guarantee the zero flag in the CPU is not set, thus the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">beq</tt> would never happen).  I have a feeling the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda</tt> statement you're using is actually loading a zero value from somewhere you're not expecting it, hence why the branch works.<br /><br />There are 7 assembly-related files in this RAR, so being more specific would be quite helpful.  I assume you know because you've run this through a debugger (ex. Geiger's SNES9x build with debugging) to see what the behaviour is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sat Jan 17, 2015 5:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oops...  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> MetaspriteTest.asm is the main file, which jumps to Metasprite. (don't worry about all the other files.) The part where it jumps to Metasprite is under &quot;InfiniteLoop&quot; and the table is right near the end of MetaspriteTest. You're going to have to change .db to .dw and combine the two bytes together.<br /><br />Don't hesitate to ask any questions. I appreciate you trying to help me.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(Who uses FIG files in this day and age?!? Good lord, talk about an uncommon ROM format even back in the 90s...)</div><br />The .bat file.  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />  (I've honestly never heard of .fig files before.)<br /><br />Edit: I just looked up and downloaded Snes9x debugger and wow does it look useful. (I currently use bsnes debugger)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Jan 17, 2015 5:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I finally got it to assemble and link (I haven't bothered running it yet).<br /><br />Wow, these listing files are absolute utter garbage.  I don't even know what to say about this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;=== Include MemoryMap, VectorTable, HeaderInfo ===<br />$78&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.INCLUDE &quot;Header.inc&quot;<br />$18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />$FB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;=== Include Library Routines &amp; Macros ===<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .INCLUDE &quot;LoadGraphics.asm&quot;<br />$C2 $38&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.INCLUDE &quot;InitSNES2.asm&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .INCLUDE &quot;2input.asm&quot;<br />$A9 $80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.INCLUDE &quot;Sprites.asm&quot;<br />$A9 $A0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.INCLUDE &quot;Metasprite.asm&quot;<br />$A9 $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />$A9 $90&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;==============================================================================<br />$8D $21 $21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; main<br />$8D $21 $21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;==============================================================================<br />$A2 $FF $1F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />$8D $21 $21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.DEFINE MapX&nbsp; &nbsp;&nbsp; &nbsp;$18<br />$8D $21 $21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.DEFINE MapY&nbsp; &nbsp;&nbsp; &nbsp;$1A<br />$A9 $01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.DEFINE XPosition&nbsp; &nbsp;$1C<br />$A9 $01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.DEFINE YPosition&nbsp; &nbsp;$1E<br />$9A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />$A9 $01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.BANK 0 SLOT 0<br />$A9 $01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.ORG 0<br />$A2 $24 $92&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.SECTION &quot;WalkerCode&quot;<br /></div><br /><br />This doesn't even make any sense no matter how you try to interpret it.  All I've managed to determine is this: the assembler and/or linker (I don't know which) is outputting actual bytes that correlate with code of the actual program, but the lines it outputs do not correlate with the actual bytes shown -- e.g. assembler directives/pseudo-ops end up getting intermixed with actual assembly code.<br /><br />For example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$78&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.INCLUDE &quot;Header.inc&quot;<br />$18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />$FB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;=== Include Library Routines &amp; Macros ===<br /></div><br /><br />$78 is sei, $18 is clc, $FB is xce.  These are the first 3 instructions in InitSNES2.asm, so what the hell are they doing interspersed/intermixed with directives in MetaspriteTest.asm?  I also noticed that each .asm file gets its own .lst file, except those ALSO look wrong!  What this means is that this thing is designed completely wrong when it comes to use of .INCLUDE directives -- i.e. listing files cannot be reliably generated with this assembler.<br /><br />Plain and simple: this assembler is a piece of shit.  Who uses this thing?!  Good god.  It's no wonder nobody can get any programming done if the tools are in this kind of shape.  x816 for DOS worked better than this.<br /><br />I can tell this whole thing is solely focused around UNIX development environments, and reliance on actual GNU Makefiles.  You know how I know that?  Because there, you wouldn't be using .INCLUDE -- you'd have your Makefile reference every individual assembly file, and call wla-65816 on each one individually (i.e. 7 assembly files, 7 calls to wla-65816).  I'm going to modify your wla.bat (heavily) to do this, to work around the obvious brokenness with listing file generation.<br /><br />Consider me disgusted.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sat Jan 17, 2015 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Plain and simple: this assembler is a piece of shit.  Who uses this thing?!  Good god.  It's no wonder nobody can get any programming done if the tools are in this kind of shape.  x816 for DOS worked better than this.</div><br />Are you referring to WLADX? What do you use then? Also, If I remember, the.bat file came with SNESstarterkit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jan 17, 2015 6:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I can tell this whole thing is solely focused around UNIX development environments, and reliance on actual GNU Makefiles.</div><br />You don't need UNIX to run GNU makefiles. They run just fine in MSYS, a port of Bash, GNU Make, and GNU Coreutils to Windows.<br /><br />One advantage of setting up a makefile (compared to a batch file that just reassembles everything all the time) is that if you change (say) an image file, Make will reconvert it to tiles, recompress it, reassemble the one source code file that contains an <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.incbin</tt> referencing the compressed tiles, and relink it. In large, complicated projects, this can save a lot of CPU and disk time over reconverting, recompressing, and reassembling everything in your project. This in turn means less time spent between Ctrl+R and the emulator opening, especially on an Atom netbook, though you can still force a full rebuild (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">make clean &amp;&amp; make</tt>).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You know how I know that?  Because there, you wouldn't be using .INCLUDE -- you'd have your Makefile reference every individual assembly file, and call wla-65816 on each one individually (i.e. 7 assembly files, 7 calls to wla-65816).</div><br />The ca65 toolchain does the same thing, with ca65 generating .o files that ld65 combines into an executable .sfc, .nes, or whatever.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Jan 17, 2015 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not going to tell someone to install MSYS or Cygwin or other environments just to make a SNES ROM, Tepples.  It's completely unnecessary and overkill.  You should know better than to try and go that route with me.  ;-)<br /><br />My point stands: listing files with WLA DX are worthless if .INCLUDE is used anywhere.<br /><br />I should note I tried separating this project up into how it &quot;should&quot; be done (using the project file correctly, assembling things as libraries, etc. then putting it all together during link-time) but gave up after repeatedly banging my head against a wall with this error message from the assembler: INTERNAL_PASS_1: A section must be open before any code/data can be accepted.  (The file in question only contained code within .SECTION and .ENDS blocks (I even moved the macros into their own), so the message make no sense).  The documentation is just as abysmal as it was the last time I looked at it (months ago).<br /><br />I guess I'll say fuck listing files for now and I'll just go look at the thing in a real-time debugger and focus on the real problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Sat Jan 17, 2015 6:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I'm not going to tell someone to install MSYS or Cygwin or other environments just to make a SNES ROM, Tepples.  It's completely unnecessary and overkill.  You should know better than to try and go that route with me.  <img src="./images/smilies/icon_wink.gif" alt=";-)" title="Wink" /></div><br />To be fair, you don't need any of those to use make (you just don't get *nix commands, but if your makefile doesn't use them then that doesn't matter - yes, that'd make sense with SNES development since you'll be using uncommon tools anyway). MinGW already comes with its own make (no, MSYS isn't needed), so one really could just take the make from MinGW (literally just one exe) and use that.<br /><br />I guess one may want to distribute make on its own instead of telling people to get MinGW, but that'd work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sat Jan 17, 2015 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Espozo, are you still using the super old version of WLA DX, or have you managed to compile the latest one?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sat Jan 17, 2015 7:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I honestly have no idea how to compile it. (If someone could post it already compiled in a rar, I would <strong>greatly</strong> appreciate it.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Jan 17, 2015 7:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, I haven't really sifted through the entire program/code to figure out what all is going on here, but let's talk about the code and what it's actually doing.  First, MetaspriteTest.asm has this around label InfiniteLoop.  Apologies for formatting mistakes, as this code uses hard tabs rather than spaces (but not consistently):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">InfiniteLoop:<br /><br />&nbsp; &nbsp;WAI<br /><br />&nbsp; &nbsp;ldy #$00<br />&nbsp; &nbsp;ldx #MetaspriteTable<br />&nbsp; &nbsp;jsr start_metasprite<br /><br />...<br /><br />MetaspriteTable:<br />&nbsp; &nbsp;.DB $FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$10,$00,$00,$00,$00,$00,$00<br /></div><br /><br />This code gets turned into the below, effectively due to run-time register sizes and so on:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; wai<br />&nbsp; ldy #$0000<br />&nbsp; ldx #$8405<br />&nbsp; jsr $820e<br /></div><br /><br />In the debugger (this took me a bit to do).  Best place to set an exec breakpoint is at $8312.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Disassembly:<br />$00/8311 CB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WAI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:0000 X:0000 Y:0000 P:envmxdIZC<br />$00/8312 A0 00 00&nbsp; &nbsp; LDY #$0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:0000 X:0000 Y:0000 P:envmxdIZC<br />$00/8315 A2 05 84&nbsp; &nbsp; LDX #$8405&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:0000 X:0000 Y:0000 P:envmxdIZC<br />$00/8318 20 0E 82&nbsp; &nbsp; JSR $820E&nbsp; &#91;$00:820E&#93;&nbsp; &nbsp;A:0000 X:0000 Y:0000 P:envmxdIZC<br /></div><br /><br />$8405 happens to be the 16-bit address (pre-calculated during assembly-time) of the memory location of MetaspriteTable.  Let's start by asking: is that the correct address?  Let's find out.  And of course SNES9x won't let me copy/paste the Hex Editor portion... wonderful, so I get to type all of this in manually:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">008400 8D 10 21 28 60 FF FF 00 00 00 00 00 00 FF FF 00<br />008410 10 00 00 00 00 00 00 FF FF FF FF FF FF FF FF FF<br />008420 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF<br /></div><br /><br />That looks correct.  So with that in mind, let's go look at start_metasprite and see what it's doing with the X register.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">start_metasprite:<br />&nbsp; &nbsp;php<br />&nbsp; &nbsp;rep #$10<br />&nbsp; &nbsp;sep #$30<br /><br />build_metasprite:<br />&nbsp; &nbsp;lda $0000,x<br />&nbsp; &nbsp;beq metasprite_done<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;lda $0000,x<br />&nbsp; &nbsp;clc<br /></div><br /><br />Initially this look right, but I can already see multiple catastrophic bugs given the assumptions of the programmer vs. what the processor will do.  Let's see what the real-time debugger has to say:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SNES reset.<br />$00/823C 78&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:0000 X:0000 Y:0000 P:EnvMXdIZC<br />$00/8312 A0 00 00&nbsp; &nbsp; LDY #$0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00FF X:0000 Y:1000 P:envMxdiZC<br />$00/8315 A2 05 84&nbsp; &nbsp; LDX #$8405&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00FF X:0000 Y:0000 P:envMxdiZC<br />$00/8318 20 0E 82&nbsp; &nbsp; JSR $820E&nbsp; &#91;$00:820E&#93;&nbsp; &nbsp;A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/820E 08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PHP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/820F C2 10&nbsp; &nbsp; &nbsp; &nbsp;REP #$10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/8211 E2 30&nbsp; &nbsp; &nbsp; &nbsp;SEP #$30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/8213 B5 00&nbsp; &nbsp; &nbsp; &nbsp;LDA $00,x&nbsp; &#91;$00:0005&#93;&nbsp; &nbsp;A:00FF X:0005 Y:0000 P:eNvMXdizC<br />$00/8215 F0 23&nbsp; &nbsp; &nbsp; &nbsp;BEQ $23&nbsp; &nbsp; &#91;$823A&#93;&nbsp; &nbsp; &nbsp; A:0000 X:0005 Y:0000 P:envMXdiZC<br /></div><br /><br />Your REP/SEP are in the wrong order.  By doing REP #$10 / SEP #$30, you are setting 16-bit indexes, then setting 8-bit accumulator and 8-bit indexes.  There are two ways to solve this, but one is wrong and the other is right.  These are your options:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; rep #$30&nbsp; &nbsp;; A=16, X/Y=16<br />&nbsp; sep #$20&nbsp; ; A=8<br /></div><br /><br />Or:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; sep #$30&nbsp; ; A=8, X/Y=16<br />&nbsp; rep #$10&nbsp; ; X/Y=16<br /></div><br /><br />Guess which one is the correct way?  The first one.  The 2nd one will introduce a horrible bug: you'll lose the upper byte of the X/Y index registers -- it'll be zeroed.  This happens on the 65816 and ONLY with the index registers.  You can swap between 16-bit and 8-bit accumulator without the full 16-bit contents being affected, but with indexes, upon going to 8-bit you lose the upper byte.  In fact, that's happening with your code already.  Look closely at the contents of X:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$00/8211 E2 30&nbsp; &nbsp; &nbsp; &nbsp;SEP #$30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/8213 B5 00&nbsp; &nbsp; &nbsp; &nbsp;LDA $00,x&nbsp; &#91;$00:0005&#93;&nbsp; &nbsp;A:00FF X:0005 Y:0000 P:eNvMXdizC<br /></div><br /><br />See how it goes from $8405 to $0005, all because you set 8-bit indexes?<br /><br />So let's go with REP #$30 / SEP #$20 and see how things look after that:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$00/8318 20 0E 82&nbsp; &nbsp; JSR $820E&nbsp; &#91;$00:820E&#93;&nbsp; &nbsp;A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/820E 08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PHP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/820F C2 30&nbsp; &nbsp; &nbsp; &nbsp;REP #$30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/8211 E2 20&nbsp; &nbsp; &nbsp; &nbsp;SEP #$20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00FF X:8405 Y:0000 P:eNvmxdizC<br />$00/8213 B5 00&nbsp; &nbsp; &nbsp; &nbsp;LDA $00,x&nbsp; &#91;$00:8405&#93;&nbsp; &nbsp;A:00FF X:8405 Y:0000 P:eNvMxdizC<br />$00/8215 F0 23&nbsp; &nbsp; &nbsp; &nbsp;BEQ $23&nbsp; &nbsp; &#91;$823A&#93;&nbsp; &nbsp; &nbsp; A:00FF X:8405 Y:0000 P:eNvMxdizC<br /></div><br /><br />Much better.<br /><br />I should also point out here: you <strong>should not</strong> be using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.dw $ffff,...</tt> like we discussed earlier.  You are using an 8-bit accumulator, not a 16-bit accumulator (despite what you said earlier).  And your build_metasprite routine is coded to use 8-bit accumulators as well.  If you were to turn on 16-bit accumulator, your routine would break (look closely at where you're storing the results in SpriteBuf1 and what hard-coded math you're using there!).<br /><br />I hope this has been a lesson in why having an assembler that generates proper/decent listings is VERY IMPORTANT.  The fact WLA DX can't do this sanely/correctly is ridiculous.<br /><br />I see other bugs in this program though, depending on how intelligent WLA DX is about knowing about addressing modes and banks, and when those crop up you're going to be crying big tears.  Case in point: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda $0000,x</tt> right now is getting assembled into $b5 $00 (LDA directpage,X) because your MetaspriteTable data happens to be within the same bank as your the code that's running (in bank $00).<br /><br />Eventually you're going to have to break outside of that (dealing with multiple banks); for example if MetaspriteTable was in a different bank (say bank $01 or $81 (same thing in this memory mode)), then the above code would be wrong and manifest itself by misbehaving in real-time: you'd be loading the wrong data: it'd be coming from bank $00 (where direct page is hard-coded to live) rather than where B was.  In other words:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; rep #$10<br />&nbsp; ldx #MetaspriteTable<br />&nbsp; sep #$20<br />&nbsp; lda #$01<br />&nbsp; pha<br />&nbsp; plb<br />&nbsp; lda $0000,x<br /></div><br /><br />WLA DX may end up screwing you by optimising <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda $0000,x</tt> into $b5 $00 (LDA directpage,X), rather than $ad $00 $00 (LDA absolute,X).  The former would get you whatever bytes happened to be in bank $00 address $0000 + X, the latter would get you whatever bytes happened to be in bank $01 address $0000 + X.<br /><br />The only way to &quot;force&quot; the assembler into knowing this is to use the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.w</tt> modifier, i.e.:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda.w $0000,x<br /></div><br /><br />Which will ALWAYS assemble to the 16-bit absolute address + opcode ($ad $00 $00).<br /><br />Alternately you could use full 24-bit addressing (&quot;long addressing&quot;) on all of your stuff that's not explicitly in direct page, through the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.l</tt> (dot-ELL) modifier.  Be aware that 24-bit addressing takes up 1 more byte, and takes 1 more cycle than absolute.  This added cycle can add up real fast when doing loops, which is why before many loops you'll find people changing what B points to and then using absolute addressing.<br /><br />Food for thought.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Jan 17, 2015 7:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why are people bothering to discuss compiling WLA DX?  The binaries are already available per the home page:<br /><br /><!-- m --><a class="postlink" href="http://www.villehelin.com/wla.html">http://www.villehelin.com/wla.html</a><!-- m --><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Binaries (UNSUPPORTED):<br /><br />Win32 (<a href="http://www.villehelin.com/wla-win32.html" class="postlink">link</a>)</div><br />Go ahead and get the ones labelled version 9.5 / 02-Nov-2013.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sat Jan 17, 2015 8:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16bit table indexing problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />...eh?<br /><br />I was sure I got it from there...<br /><br />...but I misremembered.  I'm using Neviksti's SNES starter kit, which is not the same as that one tutorial that said to download WLA DX separately.  The starter kit includes binaries from 2003.<br /><br />Okay, that straightens that out, at least on my end.  Sorry, Espozo.<br /><br />And yes, I will probably end up switching to ca65, mostly because it has Super FX support.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>9</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>