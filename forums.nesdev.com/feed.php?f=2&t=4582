<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=4582" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-11-27T20:50:16-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=4582</id>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2008-11-27T20:50:16-07:00</updated>
<published>2008-11-27T20:50:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40361#p40361</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40361#p40361"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40361#p40361"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />I was looking over the extend MML player for the PCE CD system. I'm totally into writing my own non standard MML engine (I've done trackers and such in the past). You're idea looks similar to the MML design. Is that what you're trying to go for?<br /></div><br />Absolutely.<br /><br /><br />I'm really surprised you dug this.<br /><br />To be more precise, I want to do eventually a 'replacement' of PPMCK (I don't know how to name it) in fully-commented C++ code using the Boost library (Regexes!). Linux lacks chiptune tools so it is an effort toward it. Basically it will be like PPMCK but with patterns and instruments support, then when sometime I have a hell lot of time I'll do a separate portable GUI for it (a MML IDE + piano roll and such -- much useless to talk about it). If I'm ever able to do this a day I'll of course ask here suggestions and help <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />Since I may look like a do-nothing-but-lurking guy, I can show something I did with your help (the BOARD <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> ), it was a fast test at making something with the NES, and since I'm more interested to music I tried to do an NSF, because it is simple. <a href="http://jarhmander.home.googlepages.com/thensf2.nsf" class="postlink">http://jarhmander.home.googlepages.com/thensf2.nsf</a> yeah the last 2 songs are a bit f***ed up because of my cheap transpose routine, and the nsf is 4288 bytes but it would be much smaller if I put the song data in the first bank, I just tried to do a nsf like regular ones and tested 'bankswitching' (Song data is only 64 bytes and the tiny music engine is like 120 bytes or so).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Thu Nov 27, 2008 8:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sivak]]></name></author>
<updated>2008-11-27T19:21:23-07:00</updated>
<published>2008-11-27T19:21:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40359#p40359</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40359#p40359"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40359#p40359"><![CDATA[
I don't know much about coding music engines, but if you get anything good I'd be interested.<br /><br />The one I have now certainly works, though there are some effects it could have to be even better.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3374">Sivak</a> — Thu Nov 27, 2008 7:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2008-11-26T15:11:47-07:00</updated>
<published>2008-11-26T15:11:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40334#p40334</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40334#p40334"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40334#p40334"><![CDATA[
I was looking over the extend MML player for the PCE CD system. I'm totally into writing my own non standard MML engine (I've done trackers and such in the past). You're idea looks similar to the MML design. Is that what you're trying to go for?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Wed Nov 26, 2008 3:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2008-11-17T21:59:12-07:00</updated>
<published>2008-11-17T21:59:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40172#p40172</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40172#p40172"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40172#p40172"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br /><em>Edit:</em> Maybe it would have helped (me) if I have read your original post &lt;_&lt;<br /></div><br />Thanks for doing that, but even here it's not enough  <img src="http://forums.nesdev.com/images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> <br />Then I see I have to be very explicit.....................<br /><br />Let's say for a very very random example that I want my music engine to use both APU and MMC5 sounds. Since I did not have written this sound engine unfortunately, I can only post some piece of code that would likely be in and that would help you follow my idea...<br /><br />So, let's say again that I want my music engine to use both APU and MMC5 sounds. So we define a table of only 2 elements which contains the two addresses of the command tables that belongs to the 2 channel groups<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ch_group_table:<br />     .dw APU_command_table, MMC5_command_table</div><br />when calling the play routine a zero page pointer get initialized to one of these value, always the last one.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">     ...<br />    ldy #1<br />    sty current_channel_group<br />    lda ch_group_table+1,y<br />    sta command_zptr+1<br />    lda ch_group_table,y<br />    sta command_zptr<br /></div><br />And of course when a channel is "waiting" (waiting for further NMI to fetch commands) you change the pointer according to what channel you're processing.<br /><br />Then, when selecting a command, you remove the 'flag part' and you just call with the index in a:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   processing flag&#40;s&#41; and clean a with an AND...<br />   ...<br />   jsr select_command<br />...<br />...<br />select_command:<br />    asl     ;a must be &gt;0<br />    tay <br />    dey <br />    lda &#40;command_zptr&#41;,y <br />    pha <br />    dey <br />    lda &#40;command_zptr&#41;,y <br />    pha <br />    rts</div><br />(tthat why, oh yeah, why I use that indirection, and why interleaved addresses are impossible). And if using the technique abusively you can just assign a command table for each channel used, but that would be a bit extreme (That however doesn't implies new subroutines, you can point a pointer to a subroutine used in another command table, so reusing the same command) <br /><br />All this is rather a fast and short draft, but I expect that you get the main idea behind this... Because a music engine is kind of a state machine, and you can likely predict the next state, so rather wasting time testing what it is, it is fast to jump to what the "opcode" "mean" using a look up table... if not, it's like a convetionnal if(cond) {action}else if(cond) {action}else if(cond).... which is rather inefficient, but maybe it's the only approach here... <br /><br />I do not want at the first place suggestions, I want feedbacks, remarks, like "Well this is kinda heavy, too slow, but you do have extensibility" or "A good NES music engine takes xyz scanlines or less to execute, so maybe using self modifying code that would be fast..." I don't know! but please, you do have a sound engine, you could have and idea, I really want to do something based on this but before doing this, I just wanna know if I'm just a jackass.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Mon Nov 17, 2008 9:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2008-11-16T22:00:18-07:00</updated>
<published>2008-11-16T22:00:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40122#p40122</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40122#p40122"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40122#p40122"><![CDATA[
<div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent"><br />I talked about table of commands, which mean pointer to table of pointer to subroutine, that is, I just can't interleve addresses with indirect indexed addressing.<br /></div><br /><br /> The NMOS version of the 65x doesn't have JMP [table,x]. That's on the CMOS version and other variants. If you want a subroutine table, you're going to have to manually do it. They're many ways to do it, but as I said it has to be done manually - so interleaving the table still applies.<br /><br /><br /><em>Edit:</em> Maybe it would have helped (me) if I have read your original post &lt;_&lt;<br /><br /> Hehe. What Celius said is correct. Looking at you're code example, it benefits from interleaving the table since you're pushing each part on the stack for a jsr (rts). I don't see the problem. Plus, you have access to over 128 elements (not that you didn't before if you used a BCC opcode after the shift, to choose which array to read from(upper or lower 128 halves).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Sun Nov 16, 2008 10:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2008-11-16T21:04:00-07:00</updated>
<published>2008-11-16T21:04:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40121#p40121</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40121#p40121"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40121#p40121"><![CDATA[
I'm sorry, I don't <em>quite</em> understand the problem with interleaving the data. Are you saying there's only one pointer which points to the table, and that for interleaved you'd need two?<br /><br />Also, I'm getting the hint that I really need to get on learning C  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> . I have no clue what that string of C means, and I guess it's a pretty universal language, so I better get on it. Though I understand lots of things in C, as I've learned some already(If, Then statements, etc.). I don't know enough to program in it, though.<br /><br />Oh, if you do have a flag byte system, you'll find yourself probably wanting more than just 8 different commands. I'm going to add a "Loop this peice X times" command which will save me a huge amount of bytage. And my triangle wave routine isn't space efficient at all, as I have to switch to silence when I want the tone to end. This is not good for when I have a bunch of notes in a row that are the same pitch, because if I play them without silencing them for a moment at the end of each note, you'll just hear one solid tone without beats. So I have to fix that still, too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Sun Nov 16, 2008 9:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2008-11-16T19:47:50-07:00</updated>
<published>2008-11-16T19:47:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40120#p40120</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40120#p40120"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40120#p40120"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />I'd suggest using interleaved data for this. So instead of having an array of pointers structured like this:<br /><br />.db LowAddress, HighAddress, LowAddress2, HighAddress2, etc.<br /><br />You'd have it structured like:<br /><br />HighAdds:<br /> .db HighAddress, HighAddress2, HighAddress3, etc.<br />LowAdds:<br /> .db LowAddress, LowAddress2, LowAddress3, etc.<br /><br />That way, you wouldn't have to do any shifting, and you could have 256 addresses instead of 128. So you could go:<br /><br />lda HighAdds,x<br />pha<br />lda LowAdds,x<br />pha<br /><br />Or whatever. Though I think it's switched around.<br /></div>You missed something, which of course I realized it was not clear in my post. I talked about table of commands, which mean pointer to table of pointer to subroutine, that is, I just can't interleve addresses with indirect indexed addressing. Talking in C terms, it is not <strong>void (*command_table[])(void)</strong> but rather <strong>void (*command_table[][])(void)</strong><span style="color: #808080">(I just didn't put size to arrays because it would be irrevelant)</span>, which it means that I have to deal with another indirection. That table will be probably useless with only APU sounds unless I separate each channel into its own command table, but I suspect it would be unoptimised. As for your flag system, well I'm free to let the highest bit tell if the command is an index or a flag block. I can even create a command that take the following parameter as an index into a array of instruments (that will set up any "macro" needed for that channel) and the funny thing about my idea is that I can hardly imagine a situation where a command would be more than 1 byte long, and having more than 1 byte for parameter, except if I put a (useless?) poke command, like in PPMCK.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Sun Nov 16, 2008 7:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2008-11-16T18:08:40-07:00</updated>
<published>2008-11-16T18:08:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40117#p40117</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40117#p40117"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40117#p40117"><![CDATA[
I'd suggest using interleaved data for this. So instead of having an array of pointers structured like this:<br /><br />.db LowAddress, HighAddress, LowAddress2, HighAddress2, etc.<br /><br />You'd have it structured like:<br /><br />HighAdds:<br /> .db HighAddress, HighAddress2, HighAddress3, etc.<br />LowAdds:<br /> .db LowAddress, LowAddress2, LowAddress3, etc.<br /><br />That way, you wouldn't have to do any shifting, and you could have 256 addresses instead of 128. So you could go:<br /><br />lda HighAdds,x<br />pha<br />lda LowAdds,x<br />pha<br /><br />Or whatever. Though I think it's switched around.<br /><br />For my music engine, I have 16 command flags, like you were saying. I have the most commonly used in the first 7 bits of the command bytes. If bit 0 of the first command byte is 1, then that means I'll be using the less common features, which are in the second command byte. If it's 0, that means I'm only using the most common commands, saving me one byte. But I have things like Select Note, Select Volume Envelope, Select Areggio envelope, Change length, etc. in the first byte. Instead of having a byte say if a note is on or off, I have Silence as one of the notes that you can select. The notes are all selected with an 8-bit value from a table. Silence is one of these values. For the square wave, I can get away with putting $000 in the pitch definition, but for the triangle wave, I have to silence it when $000 is the selected pitch, because the sound is audible otherwise.<br /><br />Anyways, I'd go with a flag system. That way you can squeeze 8 commands into one byte. When using a byte per command, you'll find yourself eating a ton of space up. Even with using the flag system, music can take up a lot of space, unfortunately.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Sun Nov 16, 2008 6:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2008-11-16T16:30:21-07:00</updated>
<published>2008-11-16T16:30:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40114#p40114</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40114#p40114"/>
<title type="html"><![CDATA[Thoughts on doing a (NES) music engine...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4582&amp;p=40114#p40114"><![CDATA[
I thought about a music engine where commands read from music data are rather idexes in a pointer-to-subroutines table ( no, I know there's no indirect jsr, but <a href="http://nesdev.com/bbs/viewtopic.php?p=39320#39320" class="postlink">using this technique will just do the job</a> ). Of course using 8-bit indexes will limit the number of pointers to 128, yet it's a lot. There is alway the possibility to reduce the number of possible pointers and use upper bits of this index as special flags (note on/off, portamento on/off ?? anyway), and using table of commands for each group of channels, and maybe for te ease of the programmer, using a routine like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">select_command:<br />    asl<br />    tay<br />    dey<br />    lda &#40;PTR_COMMAND_TABLE&#41;,y<br />    pha<br />    dey<br />    lda &#40;PTR_COMMAND_TABLE&#41;,y<br />    pha<br />    rts<br /></div><br />... so the table looks like this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">.dw routine1-1, routine2-1, routine3-1, etc</div><br />Index 0 would be prohibited, so that could be used for a special command instead... I lke the idea here, because there will be not a lot of branches, so the routine will be faster than a regular one if using lot of different commands, but selecting the command will cause a bit of overhead of course... expanding it is easy, too, as you have to update the table and add a routine, and for switch channels, you just have to prepare the pointer in routine(s) that specify how much NMI to wait before fetching other commands...<br /><br />What do you think? Will this technique be efficient?<br /><br /><span style="font-size: 75%; line-height: normal">Am I stupid?</span><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Sun Nov 16, 2008 4:30 pm</p><hr />
]]></content>
</entry>
</feed>