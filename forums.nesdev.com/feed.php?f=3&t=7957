<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=7957" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-08-14T11:03:45-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=7957</id>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-07-14T15:58:51-07:00</updated>
<published>2011-07-14T15:58:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81539#p81539</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81539#p81539"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81539#p81539"><![CDATA[
I am now working on a proper low-pass filter which has a much more recognizable frequency response shape (like <a href="http://sagura.com/img/Filter.GIF" class="postlink">this</a>).<br /><br />And just to make it clear.  Even though the resulting audio from the output of the smoothing filter sounded a bit better (i.e. less aliased) smoothing FIR filters are generally a horrible idea for audio output. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" />  But it was still fun to try out. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Thu Jul 14, 2011 3:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-07-12T21:09:48-07:00</updated>
<published>2011-07-12T21:09:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81484#p81484</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81484#p81484"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81484#p81484"><![CDATA[
Cool, but how do you interpret it? <br /><br />Both axes are in decibels? Is Y in amplitude or power?<br /><br />X is pretty confusing. If X is frequency and 10^0 is the sample rate, then there's really poor roll off way beyond the sample rate... I don't get how there could be much power (only harmonics?) above f/32.<br /><br /><br />As for another LPF I guess going for accuracy you could approximate the response of the passive filters in the audio path. I know we had a thread on this but I'm not sure what the results were.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Tue Jul 12, 2011 9:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-08-14T11:03:45-07:00</updated>
<published>2011-07-12T17:53:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81474#p81474</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81474#p81474"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81474#p81474"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />So has anybody calculated the response of this filter?<br /></div><br />In case you're still interested, <a href="http://dl.dropbox.com/u/36237540/ma_fir_filter_freq_resp.png" class="postlink">here</a> is the frequency response of various orders of smoothing FIR filters with all coeffs = (1/N+1) where N is the order of the filter.  It is essentially showing a slight attenuation across the entire frequency range - which makes sense.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Tue Jul 12, 2011 5:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-07-12T01:48:30-07:00</updated>
<published>2011-07-12T01:48:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81447#p81447</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81447#p81447"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81447#p81447"><![CDATA[
Hmm...while we're on the subject...if I were to create a proper low-pass filter what would be the best cutoff frequency and number of taps to use for the NES? Any suggestions?<br /><br />Thanks!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Tue Jul 12, 2011 1:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-07-12T01:36:48-07:00</updated>
<published>2011-07-12T01:36:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81446#p81446</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81446#p81446"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81446#p81446"><![CDATA[
Well it's definitely a LPF, just a crazy one. Each sample can change 1/32 at most so logically it must reject 1789772/32 = 55.9 kHz at least. If the difference is audible then it's probably lower than that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Tue Jul 12, 2011 1:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-07-11T20:57:17-07:00</updated>
<published>2011-07-11T20:57:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81436#p81436</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81436#p81436"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81436#p81436"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />So has anybody calculated the response of this filter?<br /></div><br />I have not analyzed the impulse response of this filter.....all I know is that it does sound better on all the games I've tried.  So that's good enough for me. Lol. Really all the filter is doing is "smoothing" out the waveform - it's not specifically a low/high/band-pass specific type of FIR filter.  It's a just a smoothing FIR function. Maybe one day I will add a proper low-pass filter...but right now I'm not sure I care enough to bother with it since this filter seems to work just fine.<br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />It's a 32-tap FIR where every coefficient is 0.03125?<br /></div><br />Yes, technically speaking it is a "31st-order, 32-tap Moving Average FIR Filter" where each tap has an equal "tap-weight" (i.e. coefficient) of 1/32 (or 0.03125).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Mon Jul 11, 2011 8:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-07-24T21:23:39-07:00</updated>
<published>2011-07-11T10:13:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81408#p81408</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81408#p81408"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81408#p81408"><![CDATA[
Here is a re-recording of Dr.Mario, but now with the 32-sample, running average.<br /><br />&gt;&gt; 0:00-2:13 = intro music and demo playing (all channels)<br />&gt;&gt; 2:13-2:36 = new game menu (all channels)<br />&gt;&gt; 2:39-2:50 = new game menu (pulse 1 only)<br />&gt;&gt; 2:50-3:04 = new game menu (pulse 2 only)<br />&gt;&gt; 3:04-3:19 = new game menu (triangle only)<br />&gt;&gt; 3:20-3:35 = new game menu (noise only)<br />&gt;&gt; 3:35-3:53 = new game menu (dmc only)<br />&gt;&gt; 3:54-4:58 = game play (all channels)<br /><br /><a href="http://dl.dropbox.com/u/36237540/2011_07_11_drmario_various_channels.wav" class="postlink">http://dl.dropbox.com/u/36237540/2011_07_11_drmario_various_channels.wav</a><br /><br />Tepples, does the noise problem you mentioned sound any better in this version than the previous version?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Mon Jul 11, 2011 10:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-07-11T09:56:05-07:00</updated>
<published>2011-07-11T09:56:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81404#p81404</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81404#p81404"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81404#p81404"><![CDATA[
So has anybody calculated the response of this filter? It's a 32-tap FIR where every coefficient is 0.03125?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Mon Jul 11, 2011 9:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-07-11T09:07:03-07:00</updated>
<published>2011-07-11T09:07:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81400#p81400</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81400#p81400"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81400#p81400"><![CDATA[
Awesome! Thanks tepples! <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Mon Jul 11, 2011 9:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-07-11T05:38:12-07:00</updated>
<published>2011-07-11T05:38:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81390#p81390</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81390#p81390"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81390#p81390"><![CDATA[
Yeah, much of the aliasing is gone in the average-filtered version. Good job.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jul 11, 2011 5:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-07-24T21:23:13-07:00</updated>
<published>2011-07-10T21:49:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81382#p81382</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81382#p81382"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81382#p81382"><![CDATA[
So how about a running average of the mixer output?  Would that make sense?  I tested it out and here are two recordings from SMB1 (triangle channel only).<br /><br />No averaging (original implemenation described in previous post):<br /><a href="http://dl.dropbox.com/u/36237540/2011_07_10_smb1_level1song_triangle_noavg.wav" class="postlink">http://dl.dropbox.com/u/36237540/2011_07_10_smb1_level1song_triangle_noavg.wav</a><br /><br />Running average of last 32 samples:<br /><a href="http://dl.dropbox.com/u/36237540/2011_07_10_smb1_level1song_triangle_runavg.wav" class="postlink">http://dl.dropbox.com/u/36237540/2011_07_10_smb1_level1song_triangle_runavg.wav</a><br /><br />Which one do you guys think sounds better?  Personally, the running average sounds less "buzzier" than the non-averaged, which I think is a positive improvement.<br /><br />Pz!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Sun Jul 10, 2011 9:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-07-10T17:33:53-07:00</updated>
<published>2011-07-10T17:33:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81374#p81374</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81374#p81374"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81374#p81374"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Let me rephrase: The APU generates a sample on every CPU cycle, or 315/176*1000000 = 1789773 Hz. This means at a 48000 Hz output, the APU generates 315/176*1000000/48000 = 37.3 samples. How do you turn the 37.3 samples that the APU makes into one sample that you send to the AC'97 codec?<br /></div><br />(Apologies for the lateness of my reply.)<br /><br />I honestly never really thought about this before because what I have now always just "seemed" to work/sound OK.  But now that I've actually taken a few minutes to think about how I have it set up - it's pretty kludgy. Haha.<br /><br /><strong>Hardware Layout</strong><br />------------------------------------------------------------------------------------<br />In order for my APU to write samples out to the AC97 codec I need to cross a clock domain.  That is, I need to transfer data from the 1.79MHz clock domain to the 12.288MHz AC97 domain.  Since these two clock domains are completely asynchronous from one another the typical solution in FPGA design is to insert a bisynchronous FIFO/RAM in between the 2 clock domains (otherwise you will get all sorts of insane timing errors).  I use the RAM method.<br /><br />The RAM block is a simple dual-port, that is, one side of the RAM is write-only (the APU side), while the other side is read-only (the AC97 side).  The write-side is synchronous to the 1.79MHz clock while the read-side is sync to the 12.288MHz clock.  Additionally, I simply tie the RAM's address lines to all zeros and only ever read/write from/to a single RAM address (this is not as big a waste as it seems because these internal FPGA RAMs are very small and plentiful).  Essentially, I create a single bisynchronous register to use between the APU and AC97 clock domains.<br /><br /><br /><strong>Sampling Control</strong><br />------------------------------------------------------------------------------------<br />On each CPU cycle the current 16-bit value on the output of the APU's mixer is written into the bisync RAM register.  There is no handshaking/waiting or communication to the AC97 controller.  The bisync register is just updated every CPU cycle with the current mixer output without fail.<br /><br />On the AC97 side of the bisync register (i.e. the read side) it is a bit more complex. The AC97 codec (i.e. the actual chip on the board) has a serial data input interface to receive audio samples.  The 16-bit audio samples are shifted out 1 bit at a time by the AC97 *controller* (i.e. the HDL AC97 control module that resides in the FPGA and sends data to the codec chip).<br /><br />However, it's actually much more complex than that because AC97 codecs utilize a communication protocol based on "slots" and "frames".  That is to say, you can't just shift out the 16-bit audio sample all by itself and then move on to shifting out the next sample.  What really happens is for every two 16-bit samples (2 samples needed for stereo audio) that is sent to the codec you must send 13 "slots".  These 13 slots make up one frame (one stereo sample) including all codec control overhead.<br /><br />Each AC97 "frame" is 256 clock cycles and is organized as follows:<br /><br />- 16 cycles for Slot 0 (16 bits)<br />- 20 cycles each for slots 1-12 (20 bits each)<br /><br />(Just FYI, slots 2&amp;3 hold the left/right 16-bit audio samples with 4 bits of 0 appended to the end in order to fill up the 20-bit slot. Also, I simply copy the mono APU mixer output to both the left/right channels.  All other slots are just codec control overhead.)<br /><br />The total frame time is therefore [16 + 12*20 = 256 cycles]. With a bit-clock frequency of 12.288 MHz, the frame frequency is 48,000Hz (12.288MHz/256). This results in a frame period of 20.83us (48kHz^-1).<br />------------------------------------------------------------------------------------<br /><br />Well, that was probably more than you ever wanted to know about my APU works. Haha.  But it did help me to actually type out how it all works.  I can already see where there are some issues.<br /><br />So to answer tepples question about how I turn 37.3 (i.e. 20.83us/(1.79MHz^-1)) samples into 1 AC97 sample...the answer is...uh, I don't do anything.  LMAO.  And, yes, I know that's very bad and stupid, but when I originally wrote my codec interface I just implemented the absolute simplest method possible to get data out to the codec without consider what havoc I might be causing.  <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":-P" title="Razz" />  Hehe. I was much too eager to get working on the fun stuff!<br /><br />Would like to hear anybody's thoughts on this implementation and how I might make it better.  Tepples, I think your sample averaging would be helpful, along with an APU-to-AC97 "handshake" in between each audio sample...or something like that.  I really appreciate your post. You really made me stop and think about the mess I'm actually making in my audio output.  LOL<br /><br /><div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />I'm not trying to hijack this thread, but my method is just to keep track of the APU-generated samples between each sound-card-needed sample and do a simple average of the APU-generated samples to get the sound-card-needed sample. That's probably not the best way, but it sounds alright. What is "the best way"?<br /></div><br />You aren't hijacking the thread - what you said was completely on-topic.  In fact, I think I might just implement what you have implemented (basically what tepples suggested) in software and recreate it in hardware.  Should be pretty easy and it's about a 100x better than what I have now. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":-P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Sun Jul 10, 2011 5:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2011-07-10T10:14:52-07:00</updated>
<published>2011-07-10T10:14:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81364#p81364</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81364#p81364"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81364#p81364"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I suspect jwdonal is just point-sampling, which will produce noticeable artifacts with high square or noise frequencies.<br /></div><br />That's nearest neighbor interpolation, isn't it?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Sun Jul 10, 2011 10:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-07-10T09:10:31-07:00</updated>
<published>2011-07-10T09:10:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81361#p81361</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81361#p81361"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81361#p81361"><![CDATA[
<div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />my method is just to keep track of the APU-generated samples between each sound-card-needed sample and do a simple average of the APU-generated samples to get the sound-card-needed sample.<br /></div><br />That's a box filter or mean filter, and it's an OK first approximation. I suspect jwdonal is just point-sampling, which will produce noticeable artifacts with high square or noise frequencies.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That's probably not the best way, but it sounds alright.  What is "the best way"?<br /></div><br />Probably blargg's blip-buf library, which resamples stepwise functions like those generated by the APU using "band-limited synthesis".<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jul 10, 2011 9:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2011-07-10T07:56:08-07:00</updated>
<published>2011-07-10T07:56:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81358#p81358</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81358#p81358"/>
<title type="html"><![CDATA[APU Triangle Popping Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7957&amp;p=81358#p81358"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Let me rephrase: The APU generates a sample on every CPU cycle, or 315/176*1000000 = 1789773 Hz. This means at a 48000 Hz output, the APU generates 315/176*1000000/48000 = 37.3 samples. How do you turn the 37.3 samples that the APU makes into one sample that you send to the AC'97 codec?<br /></div><br /><br />I'm not trying to hijack this thread, but my method is just to keep track of the APU-generated samples between each sound-card-needed sample and do a simple average of the APU-generated samples to get the sound-card-needed sample.  That's probably not the best way, but it sounds alright.  What is "the best way"?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Sun Jul 10, 2011 7:56 am</p><hr />
]]></content>
</entry>
</feed>