<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES Programming Tutorial : Sprite</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES Programming Tutorial : Sprite</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=15647">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=15647</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FARID</b> [ Sat Mar 11, 2017 11:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NES Programming Tutorial : Sprite</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;NES Programming Tutorial<br />;Level 7 : Sprite<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;Constants<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;Variables<br />L_byte&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= $0000<br />H_byte&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= $0001<br />bg_X_pos&nbsp; &nbsp; &nbsp; &nbsp;= $0002<br />bg_Y_pos&nbsp; &nbsp; &nbsp; &nbsp;= $0003<br />NMI_index&nbsp; &nbsp; &nbsp; = $0004<br /><br />sprite_Y&nbsp; &nbsp; &nbsp; &nbsp;= $0200<br />sprite_tile&nbsp; &nbsp; = $0201<br />sprite_att&nbsp; &nbsp; &nbsp;= $0202<br />sprite_X&nbsp; &nbsp; &nbsp; &nbsp;= $0203<br /><br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;iNES header data (16bytes)<br />;32KB PRG + 8KB CHR + NROM-256 + Vertical Mirroring<br />&nbsp; .db $4E,$45,$53,$1A,$02,$01,$01,$00<br />&nbsp; .db $00,$00,$00,$00,$00,$00,$00,$00<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;PRG codes $8000 ~ $FFFF (32KB)<br />&nbsp; .base $8000<br /><br />RESET:<br />&nbsp; &nbsp;SEI<br />&nbsp; &nbsp;CLD<br /><br />;Turn off NMI and rendering<br />&nbsp; &nbsp;LDA #%00000000<br />&nbsp; &nbsp;STA $2000<br />&nbsp; &nbsp;LDA #%00000000<br />&nbsp; &nbsp;STA $2001<br /><br />;PPU warm up<br />&nbsp; &nbsp;LDA $2002<br />vBlank_wait1:<br />&nbsp; &nbsp;BIT $2002<br />&nbsp; &nbsp;BPL vBlank_wait1<br />vBlank_wait2:<br />&nbsp; &nbsp;BIT $2002<br />&nbsp; &nbsp;BPL vBlank_wait2<br /><br />;Clear RAM<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;LDX #$00<br />clear_loop:<br />&nbsp; &nbsp;STA $0000, X<br />&nbsp; &nbsp;STA $0100, X<br />&nbsp; &nbsp;STA $0200, X<br />&nbsp; &nbsp;STA $0300, X<br />&nbsp; &nbsp;STA $0400, X<br />&nbsp; &nbsp;STA $0500, X<br />&nbsp; &nbsp;STA $0600, X<br />&nbsp; &nbsp;STA $0700, X<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$00<br />&nbsp; &nbsp;BNE clear_loop<br /><br />;Name table + Attribute<br />&nbsp; &nbsp;LDA $2002<br />&nbsp; &nbsp;LDA #$20<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #&lt;nam_att<br />&nbsp; &nbsp;STA L_byte<br />&nbsp; &nbsp;LDA #&gt;nam_att<br />&nbsp; &nbsp;STA H_byte<br />&nbsp; &nbsp;LDX #$00<br />&nbsp; &nbsp;LDY #$00<br />nam_loop:<br />&nbsp; &nbsp;LDA ($00), Y<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INY<br />&nbsp; &nbsp;CPY #$00<br />&nbsp; &nbsp;BNE nam_loop<br />&nbsp; &nbsp;INC H_byte<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$04<br />&nbsp; &nbsp;BNE nam_loop<br /><br />;Name table + Attribute 2<br />&nbsp; &nbsp;LDA $2002<br />&nbsp; &nbsp;LDA #$24<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #&lt;nam_att_2<br />&nbsp; &nbsp;STA L_byte<br />&nbsp; &nbsp;LDA #&gt;nam_att_2<br />&nbsp; &nbsp;STA H_byte<br />&nbsp; &nbsp;LDX #$00<br />&nbsp; &nbsp;LDY #$00<br />nam_loop_2:<br />&nbsp; &nbsp;LDA ($00), Y<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INY<br />&nbsp; &nbsp;CPY #$00<br />&nbsp; &nbsp;BNE nam_loop_2<br />&nbsp; &nbsp;INC H_byte<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$04<br />&nbsp; &nbsp;BNE nam_loop_2<br /><br />;Background color setup<br />&nbsp; &nbsp;LDA $2002<br />&nbsp; &nbsp;LDA #$3F<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDX #$00<br />bg_pal_loop:<br />&nbsp; &nbsp;LDA bg_pal, X<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$10<br />&nbsp; &nbsp;BNE bg_pal_loop<br /><br />;Sprites color setup<br />&nbsp; &nbsp;LDA $2002<br />&nbsp; &nbsp;LDA #$3F<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$10<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDX #$00<br />spt_pal_loop:<br />&nbsp; &nbsp;LDA spt_pal, X<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$10<br />&nbsp; &nbsp;BNE spt_pal_loop<br />&nbsp; <br />;Sprites data to ram<br />LoadSprites:<br />&nbsp; &nbsp;LDX #$00<br />LoadSpritesLoop:<br />&nbsp; &nbsp;LDA sprites, X<br />&nbsp; &nbsp;STA $0200, X<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$04<br />&nbsp; &nbsp;BNE LoadSpritesLoop<br />&nbsp; <br />;Reset Scroll<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2005<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2005<br />&nbsp; &nbsp;<br />;Turn on NMI and rendering<br />&nbsp; &nbsp;LDA #%10001000<br />&nbsp; &nbsp;STA $2000<br />&nbsp; &nbsp;LDA #%00011010<br />&nbsp; &nbsp;STA $2001<br /><br />;Infinite loop<br />Forever:<br /><br />;Move background<br />&nbsp; &nbsp;JSR vblank_wait<br />&nbsp; &nbsp;INC bg_X_pos<br />&nbsp; &nbsp;LDA bg_X_pos<br />&nbsp; &nbsp;STA $2005<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2005<br /><br />;Give effect to sprite<br />&nbsp; &nbsp;INC sprite_Y<br />&nbsp; &nbsp;<br />;Sprites data to OAM<br />&nbsp; &nbsp;JSR vblank_wait<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2003<br />&nbsp; &nbsp;LDA sprite_Y<br />&nbsp; &nbsp;STA $2004<br />&nbsp; &nbsp;LDA sprite_tile<br />&nbsp; &nbsp;STA $2004<br />&nbsp; &nbsp;LDA sprite_att<br />&nbsp; &nbsp;STA $2004<br />&nbsp; &nbsp;LDA sprite_X<br />&nbsp; &nbsp;STA $2004<br /><br />&nbsp; &nbsp;JMP Forever<br />;---------------------------;<br />vblank_wait:<br />&nbsp; &nbsp;LDA NMI_index<br />not_yet:<br />&nbsp; &nbsp;CMP NMI_index<br />&nbsp; &nbsp;BEQ not_yet<br />&nbsp; &nbsp;RTS&nbsp; &nbsp;<br />;---------------------------;<br />NMI:<br />&nbsp; &nbsp;INC NMI_index<br />&nbsp; &nbsp;RTI<br />;---------------------------; <br />IRQ:<br />&nbsp; &nbsp;RTI<br />;---------------------------;<br />nam_att:<br />&nbsp; .incbin &quot;mario_bg.nam&quot;<br /><br />nam_att_2:<br />&nbsp; .incbin &quot;mario_bg_2.nam&quot;<br /><br />bg_pal:<br />&nbsp; .incbin &quot;mario_bg.pal&quot;<br />&nbsp;<br />spt_pal:<br />&nbsp; .incbin &quot;mario_spt.pal&quot;<br /><br />sprites:<br />&nbsp; .db $80,$65,%00000000,$80<br />;---------------------------;&nbsp; <br />&nbsp; .pad $FFFA,$FF&nbsp; <br />;Vectors<br />&nbsp; .org $FFFA<br />&nbsp; .dw NMI<br />&nbsp; .dw RESET<br />&nbsp; .dw IRQ<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;CHR data $0000 ~ $1FFF (8KB)<br />&nbsp; .base $0000<br />&nbsp; .incbin &quot;mario_bg.chr&quot;<br />&nbsp; .incbin &quot;mario_spt.chr&quot;<br />&nbsp; .pad $2000,$FF<br /></div><br /><br />Output :<br /><br /><img src="http://s8.picofile.com/file/8289766092/19.PNG" alt="Image" /><br /><br /><br />Explanation :<br /><br />* Enable NMI, use left pattern table for background, use right pattern table for sprites<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #%10001000<br />&nbsp; &nbsp;STA $2000</div><br /><br />* Show background, show sprites<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #%00011010<br />&nbsp; &nbsp;STA $2001</div><br /><br />* The data of sprites tiles is stored in the PPU memory from $0000 to $0FFF (4KB)<br /><br />* The data of sprites color is stored in the PPU memory from $3F10 to $3F1F (16Bytes)<br /><br />* Extract those data from &quot;Super Mario Bros. (W) [!].nes&quot; and save them as : mario_spt.chr, mario_spt.pal<br /><br />* Attach them to the source code<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">spt_pal:<br />&nbsp; .incbin &quot;mario_spt.pal&quot;</div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .incbin &quot;mario_spt.chr&quot;</div><br /><br />* The codes of ;Sprites color setup actually transfers a total of 16 bytes (= 10 bytes in hex) data of sprites color to PPU memory ($3F10 ~ $3F1F)<br /><br />* Each tile of sprite need 4 byte-info to be able to appear on the screen<br /><br />* Y coordinate of the sprite on the screen<br /><br />* One byte for tile number from sprites pattern table<br /><br />* One byte for the attribute of the sprite, this byte is bit wise<br /><br />* X coordinate of the sprite on the screen<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sprites:<br />&nbsp; .db $80,$65,%00000000,$80</div><br /><br />* With this code we take those 4 bytes and save them into ram<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Sprites data to ram<br />LoadSprites:<br />&nbsp; &nbsp;LDX #$00<br />LoadSpritesLoop:<br />&nbsp; &nbsp;LDA sprites, X<br />&nbsp; &nbsp;STA $0200, X<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$04<br />&nbsp; &nbsp;BNE LoadSpritesLoop</div><br /><br />* OAM is a special memory for holding sprites info, it has its own memory space starting from $00 to $FF (256bytes)<br /><br />* To show a sprite on the screen you have to write its 4byte-info to OAM memory<br /><br />* Every sprite needs 4 bytes of info, right? So OAM can hold up to 64 sprites at the same time<br /><br />* We can't write directly to OAM memory, we have to use ports : $2003 and $2004<br /><br />* With $2003 we declare what address of OAM want to write, then we use $2004 to write the desired value to that address<br /><br />* Each time we write a value to $2004, the OAM address is automatically adjusted to the next address, so we don't need to declare the OAM address again<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Give effect to sprite<br />&nbsp; &nbsp;INC sprite_Y<br />&nbsp; &nbsp;<br />;Sprites data to OAM<br />&nbsp; &nbsp;JSR vblank_wait<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2003<br />&nbsp; &nbsp;LDA sprite_Y<br />&nbsp; &nbsp;STA $2004<br />&nbsp; &nbsp;LDA sprite_tile<br />&nbsp; &nbsp;STA $2004<br />&nbsp; &nbsp;LDA sprite_att<br />&nbsp; &nbsp;STA $2004<br />&nbsp; &nbsp;LDA sprite_X<br />&nbsp; &nbsp;STA $2004</div><br /><br />* In the game engine we increase the Y coordinate of the sprite and it seems that sprite is falling<br /><br />* Need more info about sprites and OAM memory? then read this : <a href="https://wiki.nesdev.com/w/index.php/PPU_OAM" class="postlink">PPU OAM</a><br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />Exercise :<br /><br />Make another sprite on the screen.<br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />Files :<br />asm6.exe<br />Assembler.bat<br />Game.asm<br />name.exe<br />Bg_Editor.bat<br />alleg42.dll<br />mario_bg.nam<br />mario_bg_2.nam<br />mario_bg.pal<br />mario_spt.pal<br />mario_bg.chr<br />mario_spt.chr<br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />Former Level : <a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=15653" class="postlink">NES Programming Tutorial : Move Background</a><br />Next Level : <a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=15646" class="postlink">NES Programming Tutorial : Multiple Sprites</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>