<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Reimplementing 6502 syntax in ca65</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Reimplementing 6502 syntax in ca65</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10701">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10701</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 18, 2013 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The ca65 assembler comes with a setting for no mnemonics (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.setcpu &quot;none&quot;</tt>) and a rich macro system. I plan to use this to reimplement 6502 instruction syntax the hard way, making each instruction a macro that outputs .byte and .word instructions. You might wonder why one would try this, given that ca65 already supports the 6502. I intend for it to act as an example of how ca65 would be adapted to other instruction sets, such as Z80, GBZ80, SPC700, and MC68000, without a recompile. Or 6502/65816 using x86-style mnemonics (hello nocash) or SPC700 or MC68000 using 6502-style mnemonics (<a href="http://forums.nesdev.com/viewtopic.php?p=86282#p86282" class="postlink">hi byuu</a>).<br /><br />I started the project yesterday, and I've already got the ALU block (%xxxxxx01) done along with bits and pieces of the control block (%xxxxxx00) and the unofficial RMW+ALU combined block (%xxxxxx11). The biggest hurdle I've found so far is in branches, to determine whether the distance to a future label is more than 129 bytes. The long branch macro pack that comes with ca65 just punts on the issue, making all forward branches long.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Nov 18, 2013 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ca65 normally chokes on branches that are too far. It is one-pass, so I don't think you can do much about that.<br /><br />I was interested in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.feature ubiquitous_idents</tt> documented here: <!-- m --><a class="postlink" href="http://www.cc65.org/snapshot-doc/ca65-11.html#ss11.42">http://www.cc65.org/snapshot-doc/ca65-11.html#ss11.42</a><!-- m --><br /><br />It says it allows overloading, but it seems to do the same thing as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.setcpu &quot;none&quot;</tt><br />For your goal, maybe it is worth looking at the C source?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Nov 18, 2013 12:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ASM6 was a three-pass assembler just because of the variable lengths of instructions.  Variable length instructions screw over any assembler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Nov 18, 2013 1:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, that certainly is meta Tepples <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I can see how with such a system in place you could develop a very tightly integrated HLA package.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 18, 2013 1:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">ca65 normally chokes on branches that are too far.</div><br />So if I'm coding a branch's signed relative operand as a .byte, how do I express to ca65 that it is a branch so that it can choke only when too far instead of choking with &quot;Constant expression expected&quot; on every forward branch? Remember that the branch opcodes in one or more of the CPUs that I plan to support aren't necessarily the same values as on a 6502. For example, how would I tell ca65 to range-check forward BBC and BBS (in the x3 column of the <a href="http://wiki.superfamicom.org/snes/show/SPC700+Reference#opcode_matrix_by_jwdonal_17" class="postlink">SPC700 opcode matrix</a>) branches?<br /><br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">I can see how with such a system in place you could develop a very tightly integrated HLA package.</div><br />That's sort of what Movax12's <a href="http://forums.nesdev.com/viewtopic.php?p=98965#p98965" class="postlink">IF macro package</a> is supposed to do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Nov 18, 2013 1:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tepples, if I understand you right, you want to encode a signed byte containing the difference between two addresses, and want an error when the difference can't be represented in a signed byte. If so, can you just put a .if that checks this condition? As I remember, ca65 allows almost anything in a .if, and its evaluation is deferred until link time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 18, 2013 2:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Tepples, if I understand you right, you want to encode a signed byte containing the difference between two addresses, and want an error when the difference can't be represented in a signed byte.</div><br />Correct. An explicit check with .if works for backward references, but not for forward references. As far as I can tell, the only forward references that get range-checked in this way are the branch instructions of the assembler's predefined instruction sets.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As I remember, ca65 allows almost anything in a .if, and its evaluation is deferred until link time.</div><br />I thought .if required a constant expression. From the manual:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">An expression used in the .IF command cannot reference a symbol defined later, because the decision about the .IF must be made at the point when it is read.</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Nov 18, 2013 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Tepples, if I understand you right, you want to encode a signed byte containing the difference between two addresses, and want an error when the difference can't be represented in a signed byte.</div><br />Correct. An explicit check with .if works for backward references, but not for forward references. As far as I can tell, the only forward references that get range-checked in this way are the branch instructions of the assembler's predefined instruction sets.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As I remember, ca65 allows almost anything in a .if, and its evaluation is deferred until link time.</div><br />I thought .if required a constant expression. From the manual:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">An expression used in the .IF command cannot reference a symbol defined later, because the decision about the .IF must be made at the point when it is read.</div></div><br />Try using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.assert</tt>. If needed, its evaluation will be deferred until link time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Nov 18, 2013 3:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes; if you are looking to output friendly errors, rather than solve forward branching, you can do so with an .assert statement.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Nov 18, 2013 3:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm having a lapse because I'm not imagining the problem with this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.byte target-*<br />...<br />target:</div><br />That encodes the branch offset, then you use an assert to verify that it's in range.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Nov 18, 2013 4:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think that should work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 18, 2013 5:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks Movax12 and blargg. This is what I came up with so far for branches:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro NONE02_branch inst, target<br />&nbsp; .local distance<br />&nbsp; distance = (target) - (* + 2)<br />&nbsp; .assert distance &gt;= -128 &amp;&amp; distance &lt;= 127, error, &quot;branch out of range&quot;<br />&nbsp; .byte inst, &lt;distance<br />.endmacro<br /><br />.macro bpl target<br />&nbsp; NONE02_branch $10, {target}<br />.endmacro<br /><br />.macro bmi target<br />&nbsp; NONE02_branch $30, {target}<br />.endmacro<br /></div><br /><br />Right now I'm 25% of the way through the opcode matrix. I'll upload it for all of you to bang on once I reach ISC $FFFF,x.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Nov 18, 2013 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was considering doing this with my macro code, since I like to represent code like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda foo+$10,x<br /></div><br />as:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda foo&#91; $10 + x&#93;<br /></div><br /><br />So I would be interested to know what the performance ends up being like when building a large project. I might look into doing the same thing. Or borrowing your code, tepples. I felt this would be better implemented in source code as an alternative branch of ca65, but if performance is okay, there is no need.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 18, 2013 8:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sun++</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I started this project for at least two reasons.<br /><br />One is that I wanted to see what other 8- and 16-bit assembly languages would look like in 6502 drag. I have an idea of how to do 68K, and it starts by renaming D0-D7 to A-H and A0-A7 to Z-S. This preserves Y (A1) and X (A2) as performing indexing-related operations, and S is conveniently the stack pointer.<br /><br />The other is that I'm following up on my <a href="http://forums.nesdev.com/viewtopic.php?p=86287#p86287" class="postlink">promise from two years ago</a>. I didn't want to have to require people who build on my libraries to install both ca65 and bass for Super NES projects, and I thought there'd be resistance to implementing other 8- and 16-bit CPUs' assembly languages directly in the source code of ca65. I found a bunch of mentions of a Sunplus CPU whose instruction set is &quot;proprietary and confidential&quot;. SPC doesn't stand for &quot;<a href="http://forums.nesdev.com/viewtopic.php?p=105324#p105324" class="postlink">Sunplus</a> chip&quot;, does it? Did Sony and Sunplus collaborate?

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=965">ca65none.s.zip</a> [3.28 KiB]
			</span><br />
			<span class="gensmall">Downloaded 34 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Nov 18, 2013 9:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reimplementing 6502 syntax in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, this is going to be real. I had taken a stab a while back at gb-z80 but got hung up on the foundation macros. I hope we can get gb-z80 and spc-700 into this. No more assembler cocktail.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro nop<br />&nbsp; .byte $EA&nbsp; ; If it's in the game, it's in the game.<br />.endmacro</div><br />Took me a moment. When I was little and saw $EA in disassemblies on the Apple //, I thought it was because it was an EA game and they plastered their initials in unused areas of memory.<br /><br />EDIT: gave this a try and it assembled its test opcodes so well I had to try it on my library code and a test. After lots of fixes it assembled it as-is and ran fine. It looks like the only issue was that variables in the .zp segment used absolute addressing. I'm seeing whether there is a way to determine this in a macro.<br /><br />A few places needed an additional .const condition to avoid trying to compare a non-constant.<br /><br />Many places needed @ prefixes on the .local symbols (you'd think that .local was enough), otherwise they broke @ symbols in the using code. I only changed those needed to compile my code, so there are more (I tried a global search-and-replace, but got some weird errors so backed off).<br /><br />Very impressed!

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> Partly fixed, removed opcode tests so it was usable in real code</span><br />
		
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=966">ca65none.s.zip</a> [2.16 KiB]
			</span><br />
			<span class="gensmall">Downloaded 27 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>