<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=12160" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-12-25T18:59:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=12160</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-12-25T18:59:15-07:00</updated>
<published>2014-12-25T18:59:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138045#p138045</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138045#p138045"/>
<title type="html"><![CDATA[Re: A question about sprites]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138045#p138045"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />OAM DMA always takes exactly 513 or 514 cycles.<br /></div><br />Might be obvious, but it doesn't hurt to say: this doesn't include the write to $2003 and the write to $4014, which have to be taken in consideration when you're planning how to use your <br />VBlank time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Dec 25, 2014 6:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-12-25T14:55:59-07:00</updated>
<published>2014-12-25T14:55:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138037#p138037</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138037#p138037"/>
<title type="html"><![CDATA[Re: A question about sprites]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138037#p138037"><![CDATA[
OAM DMA always takes exactly 513 or 514 cycles. (Unless it collides with a DPCM DMA, in which case that steals an extra 2 cycles per byte in needs to read)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Thu Dec 25, 2014 2:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Tsutarja]]></name></author>
<updated>2014-12-25T14:50:40-07:00</updated>
<published>2014-12-25T14:50:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138036#p138036</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138036#p138036"/>
<title type="html"><![CDATA[Re: A question about sprites]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=138036#p138036"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Most games completely rewrite the OAM every frame, instead of allocating specific OAM positions for each object. If you randomize the order in which the objects are drawn every frame, you'll get some flickering when 64 hardware sprites aren't enough but no object will disappear completely for several frames. You can certainly create a priority system, where some objects are processed first and never get left out.<br /><br />My current approach is to randomize the order in which I process (and, consequently, draw) the objects, and I implement 2 sprite priorities: high priority sprites are drawn from index 0 and up, while low priority ones are drawn from index 63 down. High priority sprites are allowed to overwrite low priority ones if the both end up meeting in the middle. high priority sprites should be kept to a minimum, otherwise they could easily make low priority sprites permanently invisible. I use this only for very specific cases, such explosions that must be in front of another object or things like that.<br /></div><br /><br />Okay thanks.<br />One more question: How long does it take to copy the OAM from the given address when using OAMDMA ($4014)?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6724">Tsutarja</a> — Thu Dec 25, 2014 2:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-12-22T10:17:05-07:00</updated>
<published>2014-12-22T10:17:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137944#p137944</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137944#p137944"/>
<title type="html"><![CDATA[Re: A question about sprites]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137944#p137944"><![CDATA[
<div class="quotetitle">Tsutarja wrote:</div><div class="quotecontent"><br />should I keep the maximum amount of hardware sprites the object can use reserved for it to prevent parts of it disappearing if something else spawns?<br /></div><br />That won't keep it from disappearing, and will make disappearance of other sprites more likely.<br /><br />To keep something from disappearing just make sure it is drawn first (i.e. appears earlier in the sprite list).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Dec 22, 2014 10:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-12-22T05:13:46-07:00</updated>
<published>2014-12-22T05:13:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137938#p137938</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137938#p137938"/>
<title type="html"><![CDATA[Re: A question about sprites]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137938#p137938"><![CDATA[
Most games completely rewrite the OAM every frame, instead of allocating specific OAM positions for each object. If you randomize the order in which the objects are drawn every frame, you'll get some flickering when 64 hardware sprites aren't enough but no object will disappear completely for several frames. You can certainly create a priority system, where some objects are processed first and never get left out.<br /><br />My current approach is to randomize the order in which I process (and, consequently, draw) the objects, and I implement 2 sprite priorities: high priority sprites are drawn from index 0 and up, while low priority ones are drawn from index 63 down. High priority sprites are allowed to overwrite low priority ones if the both end up meeting in the middle. high priority sprites should be kept to a minimum, otherwise they could easily make low priority sprites permanently invisible. I use this only for very specific cases, such explosions that must be in front of another object or things like that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Dec 22, 2014 5:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Tsutarja]]></name></author>
<updated>2014-12-22T03:32:09-07:00</updated>
<published>2014-12-22T03:32:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137937#p137937</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137937#p137937"/>
<title type="html"><![CDATA[A question about sprites]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12160&amp;p=137937#p137937"><![CDATA[
Since the amount of hardware sprites required to build a meta sprite may change depending on the sprite of the animation, should I keep the maximum amount of hardware sprites the object can use reserved for it to prevent parts of it disappearing if something else spawns?<br /><br />For example, in Metroid, Waver's sprite requires 4 hardware sprites most of the time. However the last animation sprite could fit in 2 hardware sprites and would free 2 hardware sprites for something else. But when the Waver's animation returns to use 4 hardware sprites, parts of it would probably disappear if something else has occupied the 2 hardware sprites it freed when changing to the sprite that only uses 2 hardware sprites.<br /><br />So, should I keep the sprites reserved for the object or free them for something else? Also, if I render &quot;blank&quot; sprite on screen, would it affect to the 8 sprites per scanline limit since it's completely transparent?<br /><br />Any other ideas or suggestions regarding this matter are very welcome.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6724">Tsutarja</a> — Mon Dec 22, 2014 3:32 am</p><hr />
]]></content>
</entry>
</feed>