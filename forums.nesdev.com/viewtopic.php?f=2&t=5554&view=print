<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - About meta-meta sprite, my current idea</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">About meta-meta sprite, my current idea</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5554">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5554</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Tue Sep 08, 2009 8:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>About meta-meta sprite, my current idea</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I read in other threads how people make their sprites.  It seems a lot of people goes with an approach like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">mySprite:&nbsp; &nbsp;<br />&nbsp; &nbsp;.byte $03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Number of hardware tile<br />&nbsp; &nbsp;.byte $0F, $2A, %01000000, $00 <br />&nbsp; &nbsp;.byte $0F, $29, %01000000, $08 <br />&nbsp; &nbsp;.byte $0F, $29, %01000000, $10 <br /></div><br /><br />This approach is quite simple since it's exactly the same structure as the OAM.  My only issue with it was on how to flip the sprite.  From what I saw and I could be wrong, you would need your sprite to be a specific ratio, for example 3x3, to be able to flip them.  If not, doesn't work well.<br /><br />In the case of my mega man sprite, it didn't cut it.  Some sprites like the face overlay cannot be flipped that way since the is only one sprite and some parts of mega man repeats often so if you just copy/paste.. That will duplicate data for nothing.<br /><br />So I came up with a simple idea of meta-meta sprite. What it means is one animation frame can be composed of more than one meta-sprite of any shape, it doesn't matter much. But I still had the problem on "how" to flip that darn things.<br /><br />At first I came out with the idea of duplicating the complete data. Not very good and take too much space. Then, after talking with Tokumaru, one idea came to me: why not just add an extra byte to my tile definition? Instead of 4 bytes, let's put 5 of them. The last byte will be the flipped X location.  This mean when you want to flip the X location, you just need to EOR the attribute byte for horizontal position and load the approriate X location only. There is only one if condition to check the direction of the sprite, that's it. <br /><br />The data looks like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">megamanStandStillAnim:&nbsp; &nbsp;; tentative structure<br />&nbsp; &nbsp;.byte $02 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; anim frame count <br />&nbsp; &nbsp;.word megamanStillFrame1&nbsp; &nbsp;<br />&nbsp; &nbsp;.word megamanStillFrame2&nbsp; <br /><br />megamanStillFrame1:&nbsp; &nbsp; &nbsp;; Meta-meta sprite<br />&nbsp; &nbsp;.byte $60&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; How many frame &#40;not used yet&#41;<br />&nbsp; &nbsp;.byte $03&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; how many meta-sprite to load<br />&nbsp; &nbsp;.word megamanStillMSprite&nbsp; &nbsp;&nbsp; &nbsp;; Meta sprite<br />&nbsp; &nbsp;.word megamanStillLegMSprite&nbsp; &nbsp;<br />&nbsp; &nbsp;.word megamanStillEyeOpenMSprite <br /><br />megamanStillFrame2:&nbsp; &nbsp; &nbsp; ; Meta-meta sprite<br />&nbsp; &nbsp;.byte $20&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;; How many frame<br />&nbsp; &nbsp;.byte $03&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;; how many meta-sprite to load<br />&nbsp; &nbsp;.word megamanStillMSprite&nbsp; &nbsp;&nbsp; &nbsp;; Meta sprite<br />&nbsp; &nbsp;.word megamanStillLegMSprite&nbsp; &nbsp; <br />&nbsp; &nbsp;.word megamanStillEyeClosedMSprite <br /><br />&nbsp; &nbsp; &nbsp; &nbsp;; Hero facing right, stand still, leg not included&nbsp; &nbsp;<br />megamanStillMSprite:<br />&nbsp; &nbsp;.byte $07 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;; Number of attributes required for this meta-sprite<br />&nbsp; &nbsp;.byte $00, $0B, %01000000, $08 , $18&nbsp; &nbsp; ; Head top 1<br />&nbsp; &nbsp;.byte $00, $0A, %01000000, $10 , $10 &nbsp; &nbsp;; Head top 2<br />&nbsp; &nbsp;.byte $00, $09, %01000000, $18 , $08 &nbsp; &nbsp;; Head top 3<br />&nbsp; &nbsp;.byte $08, $1B, %01000000, $08 , $18&nbsp; &nbsp; ; face/torso 1<br />&nbsp; &nbsp;.byte $08, $1A, %01000000, $10 , $10 &nbsp; &nbsp;; face/torso 2<br />&nbsp; &nbsp;.byte $08, $19, %01000000, $18 , $08 &nbsp; &nbsp;; face/torso 3<br />&nbsp; &nbsp;.byte $0F, $2B, %01000000, $08 , $18 &nbsp; &nbsp;; Torso/feet 1<br /><br />&nbsp; &nbsp;; Not moving leg for stand still<br />megamanStillLegMSprite:&nbsp; &nbsp;<br />&nbsp; &nbsp;.byte $02&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Number of attributes required for this meta-sprite<br />&nbsp; &nbsp;.byte $0F, $2A, %01000000, $10 , $10&nbsp; &nbsp; &nbsp;; Torso/feet 2<br />&nbsp; &nbsp;.byte $0F, $29, %01000000, $18 , $08&nbsp; &nbsp; &nbsp;; Torso/feet 3&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;; Stand still face overlay: eyes open<br />megamanStillEyeOpenMSprite:<br />&nbsp; &nbsp;.byte $01<br />&nbsp; &nbsp;.byte $06, $00, %01000001, $11 , $0F&nbsp; &nbsp; &nbsp;; face overlay: eye opens <br /><br />&nbsp; &nbsp;; Stand still face overlay: eye closed<br />megamanStillEyeClosedMSprite:<br />&nbsp; &nbsp;.byte $01<br />&nbsp; &nbsp;.byte $06, $20, %01000001, $11 , $0F&nbsp; &nbsp; &nbsp;; face overlay: eye closed<br /></div>
<br />
<br />So the bytes are:
<br />- byte 0 is the Y location
<br />- Byte 1 is the hardware tile number
<br />- Byte 2 is the attribute byte
<br />- Byte 3 is the X location in it's original location
<br />- Byte 4 is the X location in it's inverted location
<br />
<br />Anybody uses a system like this? For now, it seems to be working well and the cost in data is not big. If I would have duplicated the data, it would have cost maybe 360 bytes for all frames (not shown here). By adding 1 extra byte per line, it cost 90 bytes. That's a 75% save in size.
<br />
<br />Any other ideas on the subject will be appreciated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 08, 2009 9:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To flip a sprite horizontally, exclusive-or attribute 3 with $FF and attribute 2 with $40.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 08, 2009 4:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">To flip a sprite horizontally, exclusive-or attribute 3 with $FF</div>
<br />I don't think it can be that simple, because these coordinates are signed. The problem is that we need more than 8 bits in order to know if the resulting coordinate is still inside the screen, but we don't have a 9th bit stored as part of the sprite's attributes, we have to copy it from the 8th.
<br />
<br />For a while I did all of this, generating a high byte for each relative coordinate by cloning bit 7 before adding them to the object's coordinates, but it was pretty slow.
<br />
<br />Now I use number $80 as the center, $00 is 128 pixels to the left and $ff is 127 pixels to the right (same happens vertically) so that the relative coordinate is always positive. since it's always positive, the high byte will always be equal to the flipping mask ($00 when not flipped, $ff when flipped), so I don't have to calculate it.
<br />
<br />Of course, before looping through the sprites, I have to subtract $80 from the center coordinate so that an $80 in a sprite definition has in fact the effect that $00 would.
<br />
<br />To tell the routine I want to flip sprites I give it a mask in the accumulator, with the flipping bits at the correct position so that they can be EOR'ed to each sprite's attributes quickly.
<br />
<br />Here is the basic structure of my sprite routine (I omitted checks for availability of sprite slots and such, as that's not relevant):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Subtract camera's coordinates from object's coordinates to find central point;<br /><br />If flipped horizontally<br />&nbsp; &nbsp; Subtract $86 from the X coordinate of central point;<br />&nbsp; &nbsp; Set horizontal flipping mask to $ff;<br />Else<br />&nbsp; &nbsp; Subtract $80 from the X coordinate of central point;<br />&nbsp; &nbsp; Set horizontal flipping mask to $00;<br />End if;<br /><br />If flipped vertically<br />&nbsp; &nbsp; Subtract $8f from the Y coordinate of central point;<br />&nbsp; &nbsp; Set vertical flipping mask to $ff;<br />Else<br />&nbsp; &nbsp; Subtract $81 from the Y coordinate of central point;<br />&nbsp; &nbsp; Set vertical flipping mask to $00;<br />end if;<br /><br />Repeat for each sprite<br />&nbsp; &nbsp; Add the central X coordinate to &#40;relative X coordinate EOR horizontal mask&#41;, using mask as the high byte;<br />&nbsp; &nbsp; If the high byte of the result is not 0, skip this sprite;<br /><br />&nbsp; &nbsp; Add the central Y coordinate to &#40;relative Y coordinate EOR vertical mask&#41;, using mask as high byte;<br />&nbsp; &nbsp; If the high byte of the result is not 0, skip this sprite;<br /><br />&nbsp; &nbsp; Copy the pattern index;<br /><br />&nbsp; &nbsp; Copy and modify &#40;with EOR command&#41; the attributes of the sprite;<br />End repeat;</div>
<br />
<br />The value $86 is subtracted from the vertical coordinate to compensate for the width of the sprite, which is 8 pixels, and the fact that we'll be using 1's complement when inverting the coordinates. The value $81 is subtracted from the Y coordinate to compensate for the vertical delay of 1 pixel, and $8f is used to compensate for the height of 16 pixels and the use of 1's complement.
<br />
<br />I admit I haven't tested it very much, because I just replaced my old routine with this, and my sprites aren't exactly complex yet (mostly boxes). But it apparently works well, and I don't spend nearly as much time on each sprite as I used to, although it needs a little more time to initially find the correct central point.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Tue Sep 08, 2009 9:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@Tepples:
<br />
<br />Basically, you have to put your sprite in the middle of the screen for the origin so you can flip it with EOR #$FF.  Is it what you mean?
<br />
<br />The way I'm working now is that my origin is at (0,0).  This is maybe an old habit from dos and reading old graphic programing book.  My current logic for flipping the sprite is like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;if not opposite direction<br />&nbsp; &nbsp; &nbsp; Use attribute byte &quot;as is&quot;<br />&nbsp; &nbsp; &nbsp; Load normal X attribute<br />&nbsp; &nbsp; &nbsp; Add sprite location to it<br />&nbsp; &nbsp; &nbsp; Skip next byte<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp; &nbsp; EOR attribute with bit mask #%01000000<br />&nbsp; &nbsp; &nbsp; Skip next byte<br />&nbsp; &nbsp; &nbsp; Load inverted X attribute<br />&nbsp; &nbsp; &nbsp; Add sprite location to it<br />&nbsp; &nbsp; end if<br /></div>
<br />
<br />This is over simplified since the coding is not finished but basically the only logic is to know when to use one X attribute over the other. It seems quite easy to use. I don't know yet the pitfalls about using it a (0,0) origin system and adding that extra byte but I will know soon I guess.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Sep 09, 2009 5:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The instruction EOR #$FF always does A = -A - 1. So if X = 0, then EOR #$FF produces -1. If X = 11, then EOR #$FF produces -12.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 09, 2009 7:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> <br />This approach is quite simple since it's exactly the same structure as the OAM. My only issue with it was on how to flip the sprite. From what I saw and I could be wrong, you would need your sprite to be a specific ratio, for example 3x3, to be able to flip them. If not, doesn't work well.</div>
<br />Sorry, this is wrong, I use exactly the format you posted in my game and I can flip size of any size horizontally.
<br />If not flipped :
<br /> X Pos = Global X Pos + Sprite X Pos
<br />If flipped :
<br /> X Pos = Golbal X Pos - Sprite X Pos -7
<br />
<br />The -7 was needed for me so that a sprite at position 0 will be exactly flipped and won't move, so it'll be the center of the sprite. If it bothers you you'll have to live with position 4 being the center, which I consider annoying.
<br />
<br />However it's true this system is limited : I'm currently desining a big boss, and because a lot of it is the same for many frames, it would end up wasting a ridiculous amount of ROM. So I split it in two object and one just follow the other so I don't have to repeat the same data over and over, only pointers for a half of the boss would be identical. This give me a second advantage when it comes to priorities, but it's only applicable to my game engine.
<br />
<br />So yeah 1 enemy = 1 sprite is limited, which may or may not be acceptable depending on your game's complexity.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Wed Sep 09, 2009 7:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The 1 sprite = 1 thing was too limited for mega man from my point of view. For now the meta-meta sprite concept is working fine and the extra byte seems not to be a big impact yet.  If it does become one at a later stage, I will see how to overcome that issue.
<br />
<br />I still want to see if there is other ways of doing sprite flipping.  The more I see ways of doing it, the more I can learn new way to approach the issue.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 09, 2009 8:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Banshaku, I agree that it should be possible to flip sprites without the need for an extra coordinate. If you take some time alone with pencil and paper you should figure something out that works for you.
<br />
<br />My scheme works fine for me, the only weird thing I had to do was push the origin back so that the coordinates were always positive.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 09, 2009 8:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well it depends how you deal with coordinates.
<br />My approach is to always make it center, but Celius said he found it makes more sense to have the origin topleft of the sprite, and after all he is right : The origin of the screen is it's topleft, and the origin of each hardware sprite is it's topleft as well, and that on all systems I know. I still won't rewrite my whole game engine just for that.
<br />
<br />And you should probably get rid of this extra byte. In the long run you'll waste a lot of space just because your were too lazy to think of a proper solution. Either way you handle your coordinates (center or topleft) you can come up with a better way of doing it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Sep 09, 2009 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I find the the extra byte for flipped X to be kind of clever, actually it seems pretty obvious but I didn't think of it, and haven't seen it mentioned before this thread.  Most of the time I'm more concerned about speed than ROM space.  Hell, 512kB is like $2, and I'd bet 1 or 2 MBytes could be had for that or cheaper if it was designed for cost (mostly by using more modern packaging instead of DIP).
<br />
<br />I wouldn't want my program's "worst-case scenario" code timing to get any worse if I can avoid it.  NES won't be getting any faster, but ROMs are always getting larger/cheaper.
<br />
<br />Ultimately for the best speed I guess it'd come down to duplicating the animations, but that is a bit extreme (especially if you have a lot of animation frames).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 09, 2009 2:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I find the the extra byte for flipped X to be kind of clever, actually it seems pretty obvious but I didn't think of it, and haven't seen it mentioned before this thread.</div><br />I agree it's pretty clever. But there are ways to do actual flipping that are not any slower, so I'd still prefer those.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Most of the time I'm more concerned about speed than ROM space.</div><br />Me too. I often make small look-up tables for things that could be easily, but slowly, calculated with shifts and stuff. It even makes the logic look simpler in the end.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ultimately for the best speed I guess it'd come down to duplicating the animations, but that is a bit extreme (especially if you have a lot of animation frames).</div>
<br />Another option is to make 4 sprite-drawing loops, and pick one of them depending on the combination of flips. Each routine would add or subtract the coordinates and modify the flipping bits as necessary without having to check for flipping every time or even relying on too many preset variables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Sep 09, 2009 2:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Ultimately for the best speed I guess it'd come down to duplicating the animations, but that is a bit extreme (especially if you have a lot of animation frames).</div><br />Another option is to make 4 sprite-drawing loops, and pick one of them depending on the combination of flips. Each routine would add or subtract the coordinates and modify the flipping bits as necessary without having to check for flipping every time or even relying on too many preset variables.</div>
<br />
<br />Ah, now that's the smart way of doing it!  The same routine (basically), doing a fundamentally different thing, but taking roughly the same amount of time for each case, is the kind of routine that I can easily appreciate. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Wed Sep 09, 2009 7:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@Tepples:
<br />
<br />Thanks for the comment.  I still don't "get it" how I could use it with my current system with the origin at the top left but at the least now I know what it does.
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">My scheme works fine for me, the only weird thing I had to do was push the origin back so that the coordinates were always positive.</div><br /><br />Since my origin is at the top left and I don't use signed values (I don't think it's the case in your scheme), I don't have any strange thing yet. I will know more once I start using it in the engine, which should be soon.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">but Celius said he found it makes more sense to have the origin topleft of the sprite, and after all he is right : The origin of the screen is it's topleft, and the origin of each hardware sprite is it's topleft as well, and that on all systems I know. I still won't rewrite my whole game engine just for that.</div><br /><br />This is how I approached my sprites from the beginning. In dos in mode 13h (320x200), the origin was at the top left too so this was just natural for me to try it that way.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">And you should probably get rid of this extra byte. In the long run you'll waste a lot of space just because your were too lazy to think of a proper solution. Either way you handle your coordinates (center or topleft) you can come up with a better way of doing it.</div><br /><br />Sorry to sound rude but I think it' doesn't sound like constructive criticism to me to call something "lazy" without understanding why it was done that way in the first place.    It's like if I was saying that it was lazy for your boss sprite to duplicate the data that you said yourself will take a ridiculous amount of rom.  I know why you may do that and it's because you had to make a compromise with the way your current system is implemented. You cannot just change your game to all support meta-meta sprite suddenly without some big re-factoring.  There's nothing wrong with that since it only happens for boss scenario.<br /><br />I always say that there is no good or wrong way to do something: it's all depend on the problem you're trying to solve in the first place. There is more than one way to achieve your goal based on your current constraints.<br /><br />The reason of the 5th byte is simple.  I was going to duplicate all the sprite at the beginning. Since space is not as much an issue anymore (where not in 1983 after all), I made a compromise of bigger size against complexity of the drawing routine.  I was happy with it since the code was simpler.  But after talking to Tokumaru, I realized that since it's a side scroller and only the attribute data and the X coordinate change, 50% of the data was duplicated.  <br /><br />Since I already started with the meta-meta sprite thing and Tokumaru was talking about EORing data, I realized that I could just easily EOR the attribute based on the direction and if I would have that extra X for the opposite direction, that would make my routine very simple: just take the right X based on the direction.  <br /><br />By adding the extra X to the data, I made a 75% save on data compared to duplicating the complete set. And the logic for flipping is so simple that the impact on performance is small.  If I'm that worried about it, I can make 2 routine and save a pointer to the current routine to use for that meta-sprite based on the current direction. This way, the only time I check when to switch method is when the sprite change direction.<br /><br />So for now I wouldn't call it lazy. I think it's a good compromise for making the logic a lot simpler.  I just went with the <a href="http://en.wikipedia.org/wiki/KISS_principle" class="postlink">KISS principle</a>.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I find the the extra byte for flipped X to be kind of clever, actually it seems pretty obvious but I didn't think of it, and haven't seen it mentioned before this thread. </div><br /><br />When I realized about it I was like "doh!, why I didn't think about that sooner?".  Like you said, I didn't saw it mentioned on the board, same thing about meta-meta sprite so I thought that I should talk about it to share my current experience with that approach. This way we can all talk about it and see the pro and cons. The pro is the simplicity, at the cost of an extra byte.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I wouldn't want my program's "worst-case scenario" code timing to get any worse if I can avoid it.  NES won't be getting any faster, but ROMs are always getting larger/cheaper.</div><br /><br />Yep. We should stop worrying about saving space, unless the project as this requirement. For me, I stopped to worry about that already. It doesn't mean that I don't try to get my data smaller when possible thought.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Ultimately for the best speed I guess it'd come down to duplicating the animations, but that is a bit extreme (especially if you have a lot of animation frames).</div>
<br />
<br />This is what I was going to do. The meta-meta sprite was a way to reduce data because of my current approach. Now with that extra byte, I have almost the same advantage as duplicating the complete data. Like mentioned above, if I'm worried about speed, just make 2 routines and save the pointer for the routine used for the current direction.
<br />
<br />Edit:
<br />
<br />I still think about saving space since that 5th byte thing saved 75% for my frames.
<br />
<br />As for the pointer for the right direction.. Maybe it's complicate things for nothing.  The right loop in the show animation frame method, like Tokumaru said, is maybe better and simpler in the first place.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 10, 2009 9:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">@Tepples:<br /><br />Thanks for the comment.  I still don't "get it" how I could use it with my current system with the origin at the top left but at the least now I know what it does.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">My scheme works fine for me, the only weird thing I had to do was push the origin back so that the coordinates were always positive.</div><br /><br />Since my origin is at the top left and I don't use signed values (I don't think it's the case in your scheme)</div>
<br />For each frame of animation, store one more than the highest X coordinate in the sprite. So if you have a 24-pixel-wide sprite, with x=0, 8, and 16, you store 17.
<br />
<br />For a not flipped sprite:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda #$00<br />&nbsp; sta flip_attr2_xor<br />&nbsp; sta flip_attr3_xor<br />&nbsp; sta flip_attr3_add<br /></div><br />For a flipped sprite:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda #$40<br />&nbsp; sta flip_attr2_xor<br />&nbsp; lda #$FF<br />&nbsp; sta flip_attr3_xor<br />&nbsp; lda spriteWidthMinusSeven<br />&nbsp; sta flip_attr3_add<br /></div>
<br />In your rendering loop, you EOR all attribute 2 with flip_attr2_xor, and you EOR all attribute 3 with flip_attr3_xor and then ADC flip_attr3_add. The EOR turns the values $00, $08, $10 into $FF, $F7, $EF, and then adding 17 turns the values into $10,$08,$00.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Sep 10, 2009 3:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />"A picture is worth a thousand words": if I see an example, I can understand it right away since I'm a visual guy.   I will give it a try during lunch today and see how if goes with my current sprite data.  It does require a little bit more processing compared to the extra byte but one adc is not the end of the world.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>