<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=4737" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-01-14T09:26:43-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=4737</id>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2009-01-14T09:26:43-07:00</updated>
<published>2009-01-14T09:26:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41936#p41936</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41936#p41936"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41936#p41936"><![CDATA[
Or just do linking the stupid TASM way:<br />Use an assembler which can export labels<br />First delete all export files<br />Assemble each source file separately to get its exports<br />Then assemble each source file for real, now that all exports are available.<br />This of course assumes the assembler will generate exports in the event of an error.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Wed Jan 14, 2009 9:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-01-14T09:03:22-07:00</updated>
<published>2009-01-14T09:03:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41935#p41935</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41935#p41935"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41935#p41935"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I don't quite like this idea as it limits the target routines to 256 pre-defined routine<br /></div><br />You could treat each bank as a <a href="http://en.wikipedia.org/wiki/Modular_programming" class="postlink">module</a>, where banks present a well-defined interface to other banks. For example, the sound engine might present about three entry points: startMusic, startSoundEffect, and runSound.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jan 14, 2009 9:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-14T07:45:22-07:00</updated>
<published>2009-01-14T07:45:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41929#p41929</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41929#p41929"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41929#p41929"><![CDATA[
I don't quite like this idea as it limits the target routines to 256 pre-defined routine and that would be annoying to deal with (altough workable).<br />And since you'd have to get data from the lockup table I bet it wouldn't even be faster.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Jan 14, 2009 7:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-01-14T05:12:46-07:00</updated>
<published>2009-01-14T05:12:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41925#p41925</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41925#p41925"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41925#p41925"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Plus if you go through a jump table and use single byte parameters instead of full three-byte addresses then there's no need adjust the stack on return.<br /></div><br />This is a very interesting idea, and that would take 4 bytes per call instead of the normal 3 which is better than the 6 I needed in my version.<br />However, BRK will put the actual return adress instead of -1 as JSR does.</div><br />The disassembler in the Apple IIGS BIOS always disassembled BRK as a two-byte opcode: BRK $23, BRK $AB, etc. You could use this byte to look up the address and bank of the target routine in a table.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jan 14, 2009 5:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-14T02:49:00-07:00</updated>
<published>2009-01-14T02:49:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41916#p41916</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41916#p41916"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41916#p41916"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You could always use BRK instead of JSR to invoke these "remote" functions. I mean presumably you're not going to be using DMC IRQs in a 32k switching environment anyway, so why not just hijack the interrupt vector for something a little more useful? Plus if you go through a jump table and use single byte parameters instead of full three-byte addresses then there's no need adjust the stack on return.<br /></div><br />This is a very interesting idea, and that would take 4 bytes per call instead of the normal 3 which is better than the 6 I needed in my version.<br />However, BRK will put the actual return adress instead of -1 as JSR does. I would still need to add 1 to it before returning, unless I can make with a 2-byte agrument, but how could I ? I need the full adress of the target routine and the bank number. I could have it pre-loaded in A, but I would need to waste one byte for lda immediate. Altough it's not that bad, because you'll be able to switch faster that way if no adjustement to the return adress is done.<br /><br />I'm going to try this out.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Jan 14, 2009 2:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-01-13T17:14:57-07:00</updated>
<published>2009-01-13T17:14:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41887#p41887</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41887#p41887"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41887#p41887"><![CDATA[
The enhanced Apple IIe had to fit a 20 KB BIOS+BASIC into the same space as the Apple II Plus's 12 KB BIOS+BASIC. So it was bankswitched, and a lot of routines would load a syscall number and jump to a dispatcher. The dispatcher would switch in the alternate bank, set up the address of the routine on the stack based on the syscall number, and RTS to the routine. Then the routine would "far return" by jumping to the other side of the dispatcher.<br /><br />The 65C816-based Apple IIGS did something similar, with a routine at $00/F89C that would switch from emulation mode to native mode, look up an address in the jump table, call it, and switch back to emulation mode. If you have a IIGS or emulator handy, start looking for "9C F8" in the ROM to learn more.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jan 13, 2009 5:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2009-01-13T17:11:45-07:00</updated>
<published>2009-01-13T17:11:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41886#p41886</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41886#p41886"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41886#p41886"><![CDATA[
You could always use BRK instead of JSR to invoke these "remote" functions. I mean presumably you're not going to be using DMC IRQs in a 32k switching environment anyway, so why not just hijack the interrupt vector for something a little more useful? Plus if you go through a jump table and use single byte parameters instead of full three-byte addresses then there's no need adjust the stack on return.<br /><br />Then again precisely what bank-switching scheme you end up using probably doesn't make much difference in the long run. I mean I appreciate nice generic systems and clever hacks as much as the next guy, but if you're switching frequently enough or have enough entry points for it to be an issue then you've probably got bigger problems to worry about.<br />Not that I've ever attempted a large project on a bank-switched machine, but in the long run I suspect you'll pretty much always end up painstakingly laying out the subsystems and their associated data in such a way as to minimize transitions and reduce bank spill.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Tue Jan 13, 2009 5:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2009-01-13T13:36:28-07:00</updated>
<published>2009-01-13T13:36:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41862#p41862</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41862#p41862"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41862#p41862"><![CDATA[
I can confirm that the FF7 chinese pirate game puts a bunch of code into RAM.  I'd assume it probably uses 32K bankswitching.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Jan 13, 2009 1:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-13T12:48:56-07:00</updated>
<published>2009-01-13T12:48:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41857#p41857</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41857#p41857"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41857#p41857"><![CDATA[
Banskwitching from RAM sounds fine, but after the bankswitching, where to jump ? You could hold the destination adress in XY, but eventually in your code you'll doing to do bilions of times :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #:SomeRoutine<br />ldx #&lt;SomeRoutine<br />ldy #&gt;SomeRoutine<br />jmp RAMBankswitch</div><br />Instaed of doing billions of time<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr LongJSR<br />.dw SomeRoutine<br />.db :SomeRoutine</div><br />Not only it saves 3 bytes each time, but also it makes it the routine in question be able to just rts so that the flow of the programm continues normally. In the above case, it would have to "jump" back into the main programm by itself, and then it's not callable from another point and loses the advantage of subroutines !<br />I like the fact that a rubroutine will do a "rts" and that any needed bankswitching is automatic to return to the main programm.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jan 13, 2009 12:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2009-01-13T12:21:57-07:00</updated>
<published>2009-01-13T12:21:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41854#p41854</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41854#p41854"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41854#p41854"><![CDATA[
What I generally do is have my bankswitching code in RAM.  Though it's just fine to have a small copy in every bank, since you may need the vectors in every bank anyways.  256 or 512 bytes wasted out of each 32kB bank doesn't amount to a lot, considering how much easier it makes it.<br /><br />Squeedo uses 32kB banks, and by necessity it has to start in the last bank, so I put pull-up resistors on it.  You probably wouldn't need to do that.<br /><br />For the reset at least you could easily just use 16 bytes at $FFF0 to config it and jump to the real startup bank.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I have no idea how commercial games handled this (I haven't even looked in them at all), but I guess it would be really great if you could jsr to a routine in another bank just as easily as if it were in the same bank (in the view of the main code). By tricking the stack a little this is possible to do, and I made it so it would be as much ROM efficient as possible.<br /></div><br />I believe some Atari 2600 games did something like that, JSR to switch banks.  But there were a lot fewer control signals on the cart edge of that system, kind of odd for making add-ons (very unlike the NES).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Tue Jan 13, 2009 12:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-13T12:10:56-07:00</updated>
<published>2009-01-13T12:10:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41852#p41852</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41852#p41852"/>
<title type="html"><![CDATA[Mapper 7 32kb Switching kernel]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4737&amp;p=41852#p41852"><![CDATA[
I was bored this afternoon and I decided to do some experiment on how to build a mapper 7 setup (also valuable on any mapper that allow full 32kb switching at the same time like MMC1 or MMC5)<br /><br />The problem comes from the 32kb bankswitching. It can be quite troublesome, because as code is often executed from ROM, when writing to a register in order to do banswitching, this will immediately bring us in the new bank without having the time to jump somewhere safe, and this could be quite a hard task to handle.<br />Fortunately, if you put a string of bytes that is the same in all banks to do this, you can jsr to a bankswitching routine which is the exactly the same in all banks. Or you could have a routine in RAM that changes the adress of the ROM while it's not used, but you'd still have to come with one RESET; NMI and IRQ routine per bank.<br /><br />I have no idea how commercial games handled this (I haven't even looked in them at all), but I guess it would be really great if you could jsr to a routine in another bank just as easily as if it were in the same bank (in the view of the main code). By tricking the stack a little this is possible to do, and I made it so it would be as much ROM efficient as possible.<br /><br />So I have a tiny kernel of about 100 bytes which you will be able to put in all PRGROM banks, and that kernel handles interrupts and bankswitching.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">_Table<br />   .db $00, $01, $02, $03<br />   .db $04, $05, $06, $07<br /><br />_Reset<br />   sei<br />   cld<br />__   lda #:Start<br />   sta _b+1.w      ;Bankswitch start bank in<br />   sta LastBank.w<br />   jmp Start      ;Go to actual rest code<br /><br />_NMI<br />   pha               ;NMI interrup<br />   txa<br />   pha<br />   tya<br />   pha<br />   lda LastBank.w<br />   pha<br />   lda #:NMI         ;Save state and get bank for actual code<br />   tay<br />   sta _Table.w,Y<br />   jmp NMI          ;Jump to actual interrupt code<br /><br />_IRQ                ;Same as above<br />   pha<br />   txa<br />   pha<br />   tya<br />   pha<br />   lda LastBank.w<br />   pha<br />   lda #:IRQ<br />   tay<br />   sta _Table.w,Y<br />   jmp IRQ<br /><br />_endInt<br />   pla                 ;Restore state<br />   jsr _MapperWrite<br />   pla<br />   tay<br />   pla<br />   tax<br />   pla<br />   rti<br /><br />_LongJSR                  ;This jsr to any routine in any bank easily<br />   pla<br />   sta PointerL<br />   clc<br />   adc #$03<br />   tay<br />   pla<br />   sta PointerH   ;Get pointer where return adress is<br />   adc #$00      ;and add 3 to it<br />   pha<br />   tya<br />   pha<br /><br />   lda LastBank.w<br />   pha         ;Push old bank number<br />   lda #&gt;&#40;_MapperReturn-1&#41;<br />   pha<br />   lda #&lt;&#40;_MapperReturn-1&#41;<br />   pha         ;Return adress to restore old bank<br /><br />/*   ldy #$02          ;VERSION N°1<br />   lda &#40;Pointer&#41;,Y<br />   pha<br />   dey<br />   lda &#40;Pointer&#41;,Y<br />   pha<br />   ldy #$03<br />   lda &#40;Pointer&#41;,Y<br />   tay<br />   sta _Table.w,Y      ;Bankswitch the bank we want<br />   sta LastBank<br />   rts      */<br /><br />   ldy #$01             ;VERSION N°2<br />   lda &#40;Pointer&#41;,Y<br />   sta JumpPtrL.w<br />   iny<br />   lda &#40;Pointer&#41;,Y<br />   sta JumpPtrH.w<br />   iny<br />   lda &#40;Pointer&#41;,Y<br />   tay<br />   sta _Table.w,Y      ;Could be sta &#40;Pointer&#41;,Y but this will still<br />   sta LastBank.w      ;cause potential conflicts on real hardware !<br />   jmp &#40;JumpPtr&#41;<br /><br />_MapperReturn<br />   pla                      ;When RTS, automatically return there<br />_MapperWrite<br />   sta LastBank.w<br />   tay<br />   sta _Table.w,Y<br />   rts<br /></div><br />If you wanted to do call a routine normally you'll do that :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr Routine</div><br /><br />And with that kernel, all you have to change if the routine is not in the same bank is :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr Longjsr<br />.dw Routine<br />.db :Routine   &#40;the : is for getting bank number in WLA, I don't know how other assemblers handles this&#41;.</div><br />In fact there is 2 versions of it, the normal (uncommented) version, and a slightly faster version (that is commented) that uses rts insead of jmp (indirect), but you'll have to add a -1 after the .dw<br />And I use now parenthesis for indirection as dish suggested so that it is compatible with 65816 syntax.<br /><br />The kernel will automatically save the old bank, bankswitch the new bank, and resume the old before returning after the .db statement to continue the code normally. That way you can do many subroutine calls from all banks to all banks very easily. The only drawback is that it will take more stack space and more CPU time but you get nothing for noting. Also, it's impossible to pass arguments with the A or Y registers, only X could be used, and that applies for both input and output arguments which is a shame.<br /><br />According to WLA doccumentation, it does supports multiple labels with the same name if and only if they are at the same adress. By wroting this I could verify this is not true, no matter what I try duplicate labels at the same adress are not supported. However, I evnetually did a trick to not have to get rid of labels and get everything manutally.<br />You could just copy/pase the code and add numbers after labels for each bank but this is ugly and if you want to change the kernel it will be troublesome to go changing in each bank.<br />So I just use local labels, and afterthat, I use .export directive so that they are available to the rest of the programm. I get warnings for exporting many times the same label, but not any errors so this comiles fine  <img src="http://forums.nesdev.com/images/smilies/icon_cool.gif" alt="8)" title="Cool" /> <br /><br />In order to make the Longjsr as transparent as possible I'd liked to have a macro under WLA that would automatically call Longjsr if the caller is not in the same bank as the called, and just a normal jsr otherwise.<br />Unfortunately I can't get it to work, I keep getting errors. I have the following macro, if anyone has the solution what is wrong please tell me :<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />.macro jsl args label<br />__;This is a dummy label<br />.ifneq  :label :_b;Check if the argument has the same bank as the dummy label<br />jsr LongJSR<br />.dw label;If not, use the LongJSR routine from the kernel<br />.db :label<br />.else<br />jsr Label;If so, just jsr normally<br />.endif<br />.endm<br /></div><br /><br />Let me know if you like the kernel and what could be improved.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jan 13, 2009 12:10 pm</p><hr />
]]></content>
</entry>
</feed>