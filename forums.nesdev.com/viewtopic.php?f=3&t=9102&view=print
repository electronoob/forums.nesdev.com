<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 085.txt updated with full VRC7 audio details</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">085.txt updated with full VRC7 audio details</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=9102">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=9102</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Jul 16, 2012 7:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>085.txt updated with full VRC7 audio details</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey everyone.
<br />
<br />Those of you who have tried to tackle VRC7 emulation surely have noticed the disturbing lack of [clear] documentation.  Open source emulators are available, but they all seem to be written in an extremely obfuscated and confusing manner, with few (or no) comments as to what the code is actually doing.
<br />
<br />So like most people I had always just used existing emulators.  But where's the fun in that?  Isn't the point of writing your own emulator to write the emulator yourself?
<br />
<br />So I made a little pet project over the weekend (and today) to sit down and dissect VRC7 audio, and document it in my style (ie:  try to actually be something you can read and understand).
<br />
<br />
<br />
<br />I am offering that documentation here.  In part to share, but also in part to get help proofreading.
<br />
<br />If you find anything particularly difficult to understand, please let me know.  Or if you can spot inaccuracies/errors, please point those out as well.
<br />
<br />I have written my own VRC7 emulator based on these notes and it sounds extremely close to the recordings.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">----------------------------------------------------------------------------<br />----------------------------------------------------------------------------<br />-----&nbsp; VRC7 Sound&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -------------------------------------------------<br />----------------------------------------------------------------------------<br />----------------------------------------------------------------------------<br /><br />VRC7 has additional sound channels!&nbsp; It is a slightly dumbed down version of the YM2413 &#40;aka OPLL&#41;.&nbsp; There<br />are only 6 harmony channels and no rhythmic channels.<br /><br />Strap yourself in.&nbsp; FM-Synth is a beast.<br /><br /><br />---------------------------------------------<br />Disclaimers:<br />---------------------------------------------<br /><br />Information here is pieced together from the Yamaha YM2413 Application Manual &#40;&quot;YM2413.pdf&quot;&#41;, and Mitsutaka<br />Okazaki's &quot;emu2413.c&quot; emulator.&nbsp; Anyone whose looked at those sources know they are not the easiest things<br />to comprehend without prior experience with FM synth, so here I attempt to explain things in a more<br />traditional form.<br /><br />I don't really care about YM2413 &#40;I hate FM synth... I find it extremely ugly&#41;, so I only cover items on the<br />VRC7 here &#40;ie: no rhythmic information&#41;.&nbsp; If you want details about a full YM2413, you'll have to look elsewhere.<br /><br />I am NOT confident about this information being 100% accurate.&nbsp; I made every effort to be as accurate as<br />possible, and my implementation based on the below info sounds *very close* to recordings of the real thing,<br />but I do hear some subtle differences.&nbsp; I graciously welcome any corrections anyone can offer.<br /><br />Bitwidths of various counters are kind of an educated guess.&nbsp; With the exception of the phase accumulator,<br />which is the only counter whose size is hinted at in the documentation... so I'm fairly certain it is in<br />fact 18 bits wide.<br /><br />I mention the use of various lookup tables.&nbsp; I do not know if these lookup tables actually exist on the<br />hardware, or if the values are calculated at runtime.&nbsp; Likewise the actual size of these lookup tables is<br />entirely unknown to me.&nbsp; You can choose your own size in your implementation.<br /><br /><br />---------------------------------------------<br />FM-Synth basics &amp; other fundamental concepts:<br />---------------------------------------------<br /><br />The basic idea of FM-Synth is you have 2 sine waves &#40;aka, &quot;slots&quot;&#41;, a &quot;modulator&quot; and a &quot;carrier&quot;.&nbsp; The<br />output of the carrier is what you actually hear.&nbsp; The output of the modulator alters the frequency of the<br />carrier, effectively acting like a supersonic vibrato.&nbsp; This bends and twists the carrier's waveform into<br />a myriad of different shapes, producing all kinds of different sounds.<br /><br />Each of the 6 channels have 2 slots &#40;a Carrier and a Modulator&#41;.&nbsp; Each slot behaves independently and has<br />its own settings and counters.&nbsp; Note that I will refer to &quot;slots&quot; often in these docs.&nbsp; Do not confuse<br />a slot for the whole channel.<br /><br />&quot;ADSR&quot; stands for Attack/Decay/Sustain/Release.&nbsp; These represent 4 phases of amplitude &#40;volume&#41; changes in<br />synthesized audio.&nbsp; This is a common technique in all synth audio &#40;not just FM-Synth&#41;.<br />&nbsp; &nbsp; - Attack is when the tone begins, and you have a rapid increase in volume, increasing to *above* the<br />&nbsp; &nbsp; &nbsp; &nbsp; desired output level.<br />&nbsp; &nbsp; - Decay is when attack has reached its maximum, and the volume starts to decline to the desired<br />&nbsp; &nbsp;&nbsp; &nbsp; output level.<br />&nbsp; &nbsp;- Sustain is when the volume has reached the desired level.&nbsp; It holds the volume at that level for as<br />&nbsp; &nbsp;&nbsp; &nbsp; long as the tone is to be played.&nbsp; Although sometimes the volume might slowly drop.<br />&nbsp; &nbsp;- Release is when the tone is done, and volume gradually decreases until it's completely silent.<br /><br />&quot;Key on&quot; / &quot;Key off&quot; represents the entry and exit into ADSR.&nbsp; You can think of it like a piano or a keyboard...<br />when you &quot;key on&quot;, you are pressing a key, and when you &quot;key off&quot; you are releasing a key.&nbsp; Effectively,<br />this means that when you key on, you enter &quot;Attack&quot;, and when you key off, you enter &quot;Release&quot;.<br /><br /><br /><br />---------------------------------------------<br />Volume and Attenuation:<br />---------------------------------------------<br /><br />VRC7 doesn't really have a concept of an output volume.&nbsp; Instead, it does everything with &quot;attenuation&quot;,<br />which is basically the opposite of volume.&nbsp; Attenuation is like a forced reduction -- so high attenuation<br />means low output.&nbsp; Zero attenuation means the output is as high as possible.<br /><br />All attenuation levels are expressed in decibels &#40;dB&#41;, which is a logarithmic &#40;non-linear&#41; scale.&nbsp; VRC7's<br />threshhold or maximum attenuation is 48 dB.&nbsp; This means that at 48 dB, output is zero.<br /><br />Note that even though dB are non-linear, you can still work with them as if they were linear.&nbsp; That is, <br />10dB + 10dB is still 20dB.&nbsp; The only thing is that when converted to linear units, 20dB is MUCH<br />MUCH more than 2x 10dB.<br /><br />Since VRC7 handles all its output levels in terms of dB, this means you will only need to convert from<br />dB to linear units in exactly one place:&nbsp; when determining the linear output of the &quot;slot&quot;.<br /><br />Converting dB &lt;-&gt; Linear can be accomplished with the below formulas:<br /><br />&nbsp; &nbsp; dB&nbsp; &nbsp; &nbsp;= -20 * log10&#40; Linear &#41; * scale&nbsp; &nbsp; &nbsp; &#40;if Linear = 0, dB = +inf&#41;<br />&nbsp; &nbsp; Linear = 10 ^ &#40;dB / -20 / scale&#41;<br /><br />'scale' is an optional factor you can use to scale up dB so that they're in an easier to use base.<br /><br />I recommend using &#40;1&lt;&lt;23&#41;/48 for a scale &#40;this would mean that 1&lt;&lt;23 would represent 48 dB&#41;.&nbsp; This will<br />make envelope calculations much easier &#40;see Envelope Generation section for details&#41;.<br /><br />Remember the threshhold is 48 dB.&nbsp; So if you have 48 dB or higher, Linear=0.<br /><br /><br />---------------------------------------------<br />Clock rate:<br />---------------------------------------------<br /><br />VRC7 has its own oscillator to drive the clock rate.&nbsp; It's clocked at 3.6 MHz &#40;exactly 2x the NTSC<br />NES CPU clock rate&#41;, but those clocks are divided by 72, effectively making the rate at which each individual<br />unit is clocked 49715.90909 Hz.<br /><br />I find it very likely that clocking each individual unit is done serially across the 72 cycles, but the<br />effect that detail has on the generated audio is tiny to the point of being insignificant.<br /><br />To think of this in terms of CPU cycles, you could say that all units are clocked once every 36 CPU<br />cycles on NTSC.&nbsp; However, this is techncially inaccurate, as the NES clock does not drive the VRC7.<br />And on PAL systems, the clock rate doesn't sync up like that.<br /><br />---------------------------------------------<br />Registers:<br />---------------------------------------------<br /><br />Register descriptions to follow.&nbsp; Details as to what each field actually does will not be covered here<br />but will be explained in future sections.<br /><br /><br />&nbsp; $9010:&nbsp; &#91;..AA AAAA&#93;<br />&nbsp; &nbsp; A = Address for use with $9030<br />&nbsp; &nbsp;<br />&nbsp; $9030:&nbsp; &#91;DDDD DDDD&#93;&nbsp; --&nbsp; data port<br />&nbsp; &nbsp; &nbsp; R:00-R:07&nbsp; -&gt;&nbsp; Custom instrument settings &#40;see below&#41;<br />&nbsp; &nbsp;&nbsp; <br />&nbsp; &nbsp;&nbsp; R:1x:&nbsp; &#91;FFFF FFFF&#93; &#40;where x=0-5, selecting the channel&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; F = low 8 bits of F-Num &#40;frequency control&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <br />&nbsp; &nbsp;&nbsp; R:2x:&nbsp; &#91;..SK BBBF&#93; &#40;where x=0-5, selecting the channel&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; F = high bit of F-Num<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; B = Block select &#40;or octave&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; K = Key on&nbsp; &#40;1=key on, 0=key off&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; S = Sustain On &#40;poorly named, has no impact on Sustain mode -- actually affects Release&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <br />&nbsp; &nbsp;&nbsp; R:3x:&nbsp; &#91;IIII VVVV&#93;<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; I = Instrument select<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; V = 'Volume' &#40;poorly named, it's more like &quot;Carrier Base Attenuation Level&quot;&#41;<br /><br />&nbsp; &#40;regs R:1x, 2x, and 3x apply to both Carrier and Modulator<br />&nbsp; &nbsp;regs R:0x apply differently to each&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#41;<br />&nbsp; &nbsp;<br /><br />&nbsp; R:00: &#91;AFPK MMMM&#93;&nbsp; &nbsp; &#40;applies to Modulator&#41;<br />&nbsp; R:01: &#91;AFPK MMMM&#93;&nbsp; &nbsp; &#40;applies to Carrier&#41;<br />&nbsp; &nbsp; &nbsp; A = Enable Amplitude Modulation &#40;AM&#41;<br />&nbsp; &nbsp;&nbsp; F = Enable Frequency Modulation &#40;FM&#41;<br />&nbsp; &nbsp;&nbsp; P = Disable Percussive Mode&nbsp; &#40;0=percussive, 1=normal&#41;<br />&nbsp; &nbsp;&nbsp; K = Key Scale Rate &#40;KSR&#41;<br />&nbsp; &nbsp;&nbsp; M = 'MULTI' Freqency multiplier<br />&nbsp; &nbsp;&nbsp; <br />&nbsp; R:02:&nbsp; &#91;KKLL LLLL&#93;<br />&nbsp; &nbsp; &nbsp; K = Modulator Key Scale Level &#40;KSL&#41;<br />&nbsp; &nbsp;&nbsp; L = Modulator base attenuation level<br /><br />&nbsp; R:03:&nbsp; &#91;KK.C MFFF&#93;<br />&nbsp; &nbsp; &nbsp; K = Carrier Key Scale Level &#40;KSL&#41;<br />&nbsp; &nbsp;&nbsp; C = Carrier rectify sine wave&nbsp; &#40;0=full sine wave,&nbsp; 1=half sine wave&#41;<br />&nbsp; &nbsp;&nbsp; M = Modulator rectify sine wave<br />&nbsp; &nbsp;&nbsp; F = Modulator Feedback level<br />&nbsp; &nbsp;<br />&nbsp; R:04:&nbsp; &#91;AAAA DDDD&#93;&nbsp; &nbsp;&#40;Modulator&#41;<br />&nbsp; R:05:&nbsp; &#91;AAAA DDDD&#93;&nbsp; &nbsp;&#40;Carrier&#41;<br />&nbsp; &nbsp; &nbsp; A = Attack Rate<br />&nbsp; &nbsp;&nbsp; D = Decay Rate<br />&nbsp; &nbsp;&nbsp; <br />&nbsp; R:06:&nbsp; &#91;SSSS RRRR&#93;&nbsp; &nbsp;&#40;Modulator&#41;<br />&nbsp; R:07:&nbsp; &#91;SSSS RRRR&#93;&nbsp; &nbsp;&#40;Carrier&#41;<br />&nbsp; &nbsp; &nbsp; S = Sustain Level<br />&nbsp; &nbsp;&nbsp; R = Release Rate<br />&nbsp; &nbsp;<br />There are 16 selectable instruments &#40;selected via R:3x&#41;.&nbsp; Instrument 0 is configurable via regs<br />R:00 through R:07.&nbsp; The other instruments are fixed at the below values:<br />&nbsp; <br />&nbsp; &nbsp; 0x03,0x21,0x04,0x06,0x8D,0xF2,0x42,0x17&nbsp; // instrument 1<br />&nbsp; &nbsp; 0x13,0x41,0x05,0x0E,0x99,0x96,0x63,0x12&nbsp; // instrument 2<br />&nbsp; &nbsp; 0x31,0x11,0x10,0x0A,0xF0,0x9C,0x32,0x02&nbsp; // instrument 3<br />&nbsp; &nbsp; 0x21,0x61,0x1D,0x07,0x9F,0x64,0x20,0x27&nbsp; // instrument 4<br />&nbsp; &nbsp; 0x22,0x21,0x1E,0x06,0xF0,0x76,0x08,0x28&nbsp; // instrument 5<br />&nbsp; &nbsp; 0x02,0x01,0x06,0x00,0xF0,0xF2,0x03,0x95&nbsp; // instrument 6<br />&nbsp; &nbsp; 0x21,0x61,0x1C,0x07,0x82,0x81,0x16,0x07&nbsp; // instrument 7<br />&nbsp; &nbsp; 0x23,0x21,0x1A,0x17,0xEF,0x82,0x25,0x15&nbsp; // instrument 8<br />&nbsp; &nbsp; 0x25,0x11,0x1F,0x00,0x86,0x41,0x20,0x11&nbsp; // instrument 9<br />&nbsp; &nbsp; 0x85,0x01,0x1F,0x0F,0xE4,0xA2,0x11,0x12&nbsp; // instrument A<br />&nbsp; &nbsp; 0x07,0xC1,0x2B,0x45,0xB4,0xF1,0x24,0xF4&nbsp; // instrument B<br />&nbsp; &nbsp; 0x61,0x23,0x11,0x06,0x96,0x96,0x13,0x16&nbsp; // instrument C<br />&nbsp; &nbsp; 0x01,0x02,0xD3,0x05,0x82,0xA2,0x31,0x51&nbsp; // instrument D<br />&nbsp; &nbsp; 0x61,0x22,0x0D,0x02,0xC3,0x7F,0x24,0x05&nbsp; // instrument E<br />&nbsp; &nbsp; 0x21,0x62,0x0E,0x00,0xA1,0xA0,0x44,0x17&nbsp; // instrument F<br />&nbsp; &nbsp;<br /><br />**** SIDE NOTE ****<br />Writing to Regs R:00 through R:07 do NOT seem to have an immediate effect on channels using<br />instrument 0.&nbsp; Lagrange Point &#40;Track 2 of the NSF&#41; will write to these regs while a channel<br />using instrument 0 is still keyed on and audible, resulting in an ugly and very noticable<br />&quot;blurp&quot; noise at the end of a note.&nbsp; This is not heard on the real hardware, so instrument<br />data must be cached somehow.&nbsp; Perhaps it only takes effect when the channel is keyed on,<br />or when R:3x is written to?&nbsp; Don't know exactly.<br /><br /><br /><br /><br />---------------------------------------------<br />Phase / Frequency Calculation:<br />---------------------------------------------<br /><br />Each slot has an 18-bit up counter which determines the current phase &#40;position in the sine wave&#41;.<br />Each clock, this counter is incremented:<br />&nbsp; &nbsp; phase += F * &#40;1 &lt;&lt; B&#41; * M * V / 2<br /><br />where:<br />&nbsp; &nbsp; F = 9-bit F-num of the channel<br />&nbsp; &nbsp;B = 3-bit Block of the channel<br />&nbsp; &nbsp;M = see below<br />&nbsp; &nbsp;V = vibrato &#40;FM&#41; output<br /><br />R:00 or R:01 specify a 4 bit 'MULTI' value.&nbsp; That MULTI value is run through the below LUT to get 'M':<br /><br />&nbsp; &nbsp; MULTI:&nbsp; 0&nbsp; &nbsp;1&nbsp; &nbsp;2&nbsp; &nbsp;3&nbsp; &nbsp;4&nbsp; &nbsp;5&nbsp; &nbsp;6&nbsp; &nbsp;7&nbsp; &nbsp;8&nbsp; &nbsp;9&nbsp; &nbsp;A&nbsp; &nbsp;B&nbsp; &nbsp;C&nbsp; &nbsp;D&nbsp; &nbsp;E&nbsp; &nbsp;F&nbsp; &nbsp;&#40;hex&#41;<br />&nbsp; &nbsp; M:&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp;2&nbsp; &nbsp;4&nbsp; &nbsp;6&nbsp; &nbsp;8&nbsp; 10&nbsp; 12&nbsp; 14&nbsp; 16&nbsp; 18&nbsp; 20&nbsp; 20&nbsp; 24&nbsp; 24&nbsp; 30&nbsp; 30&nbsp; &nbsp;&#40;dec&#41;<br />&nbsp; &nbsp;<br />If FM is enabled for the slot &#40;see R:00 or R:01 for the enable bit&#41;, 'V' is the output of the<br />FM unit.&nbsp; See AM/FM section for details.<br /><br />If FM is disabled, 'V' = 1<br /><br /><br />Another 'phase_secondary' value is used to actually generate the phase:<br /><br />&nbsp; &nbsp; phase_secondary = phase + adj<br />&nbsp; &nbsp;<br />For the Carrier:<br />&nbsp;adj = the output of the Modulator.&nbsp; Note that slot output is 20-bits wide, but the phase is only 18<br />&nbsp;bits wide... this means that the high 2 bits of the modulator output are effectively dropped.<br /><br />For the Modulator:<br />&nbsp;R:03 has a 3-bit 'F' value specifying the feedback level.<br />&nbsp;if F=0:&nbsp; &nbsp; &nbsp;adj = 0<br />&nbsp;otherwise:&nbsp; adj = previous_output_of_modulator &gt;&gt; &#40;8 - F&#41;<br />&nbsp;<br />&nbsp;<br /><br />The bits of the phase_secondary value are extracted and used to generate the sine wave:<br /><br />&nbsp; phase_secondary:&nbsp; &#91;RI IIII III. .... ....&#93;<br />&nbsp; &nbsp; R:&nbsp; rectification bit<br />&nbsp; &nbsp;I:&nbsp; index to half-sine lookup table<br />&nbsp; &nbsp;&nbsp; &nbsp;** 'I' may be more or less bits depending on how big your half-sine lookup table is **<br /><br />'R' determines what to do with output after it's been converted to a linear level.&nbsp; See next section<br />for details of this bit, and details of the half-sine table.<br /><br /><br />---------------------------------------------<br />Attenuation / Output calculation:<br />---------------------------------------------<br /><br />The attenuation level determines the slot output on each clock.&nbsp; Attenuation level is determined<br />as follows:<br /><br />&nbsp; TOTAL = half_sine_table&#91;I&#93; + base + key_scale + envelope + AM<br /><br />&nbsp; <br />half_sine_table&#91;I&#93;:<br />--------------<br />The half-sine table mentioned in the previous section does not actually hold the output of the sine<br />function.&nbsp; Rather, it holds the attenuation level of the sine function.&nbsp; Example:<br /><br />sin&#40;pi/2&#41; = 1&nbsp; &nbsp;~~~&gt;&nbsp; I='0100 0000'&nbsp; ~~~&gt;&nbsp; half_sine_table&#91; I &#93; = 0 dB<br />sin&#40;0&#41; = 0&nbsp; &nbsp; &nbsp; ~~~&gt;&nbsp; I='0000 0000'&nbsp; ~~~&gt;&nbsp; half_sine_table&#91; I &#93; = +inf dB<br /><br />This table is effectively:<br />&nbsp; half_sine_table&#91;I&#93; = Convert_Linear_To_dB&#40;&nbsp; &nbsp;sin&#40; pi * I / &#40;1 &lt;&lt; bitwidth_of_I&#41; &#41;&nbsp; &nbsp;&#41;<br /><br />&nbsp; <br />&nbsp; <br />base:<br />--------------<br />For Modulator:&nbsp; base = &#40;0.75 * L&#41;, where L is the 6-bit base level &#40;see register R:02&#41;<br />For Carrier:&nbsp; &nbsp; base = &#40;3.00 * L&#41;, where L is the 4-bit 'volume' &#40;see register R:3x&#41;<br /><br /><br /><br />key_scale:<br />--------------<br />Key Scale Level, 'K', is a 2-bit value &#40;see regs R:02, R:03&#41; that adds attenuation as the pitch<br />of the tone increases &#40;ie:&nbsp; higher pitches = quieter&#41;.<br /><br />If K=0:&nbsp; key_scale=0<br />Otherwise:<br />&nbsp; F = high 4 bits of the current F-Num<br />&nbsp; B = 3-bit Block &#40;Octave&#41;<br />&nbsp; A = table&#91; F &#93; - 6 * &#40;7-B&#41;<br /><br />&nbsp; if A &lt; 0:&nbsp; &nbsp;key_scale = 0<br />&nbsp; otherwise:&nbsp; key_scale = A &gt;&gt; &#40;3-K&#41;<br />&nbsp; <br />table:<br />&nbsp; &nbsp;F:&nbsp; &nbsp; &nbsp;$0&nbsp; &nbsp; &nbsp;$1&nbsp; &nbsp; &nbsp;$2&nbsp; &nbsp; &nbsp;$3&nbsp; &nbsp; &nbsp;$4&nbsp; &nbsp; &nbsp;$5&nbsp; &nbsp; &nbsp;$6&nbsp; &nbsp; &nbsp;$7&nbsp; &nbsp; &nbsp;$8&nbsp; &nbsp; &nbsp;$9&nbsp; &nbsp; &nbsp;$A&nbsp; &nbsp; &nbsp;$B&nbsp; &nbsp; &nbsp;$C&nbsp; &nbsp; &nbsp;$D&nbsp; &nbsp; &nbsp;$E&nbsp; &nbsp; &nbsp;$F<br />&nbsp; &nbsp;A:&nbsp; &nbsp; &nbsp;0.00&nbsp; 18.00&nbsp; 24.00&nbsp; 27.75&nbsp; 30.00&nbsp; 32.25&nbsp; 33.75&nbsp; 35.25&nbsp; 36.00&nbsp; 37.50&nbsp; 38.25&nbsp; 39.00&nbsp; 39.75&nbsp; 40.50&nbsp; 41.25&nbsp; 42.00<br />&nbsp;<br />&nbsp;<br />envelope:<br />--------------<br />Output of the envelope generator.&nbsp; See Envelope Generation section for details.<br /><br /><br />AM:<br />--------------<br />If Amplitude modulation is enabled for the slot &#40;see R:00, R:01&#41;, AM is the output of the amplitude<br />modulation unit.&nbsp; Otherwise, AM=0.<br /><br />See AM/FM section for details.<br /><br /><br /><br /><br />Finally... after all that, we have our 'TOTAL'.&nbsp; This is the total attenuation for the slot.<br /><br />1&#41; This attenutation is then converted to linear units to get the preliminary output.&nbsp; This is<br />scaled up to a 20-bit value<br /><br />2&#41; If the high bit &#40;'R'&#41; of the 18-bit 'phase_secondary' value &#40;see previous section&#41; is set, this<br />means we are in the negative portion of the sine wave, which means output needs to be negated.<br />However, if we are rectifying to a half sine wave &#40;see R:03&#41;, output is zero'd instead.<br /><br />3&#41; Output is then run through a filter which averages this output with the previous clock's output<br /><br />4&#41; The result is the FINAL, actual output.<br /><br />Pseudo-code to clarify:<br /><br />&nbsp; &nbsp;total = half_sine_table&#91;I&#93; + base + key_scale + envelope + AM<br />&nbsp; &nbsp;prevoutput = output<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;// 1&#41;<br />&nbsp; &nbsp;output = convert_dB_to_Linear&#40; total &#41; * &#40;1&lt;&lt;20&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;// 2&#41;<br />&nbsp; &nbsp;if R:<br />&nbsp; &nbsp; &nbsp; if&nbsp; halfsine:&nbsp; output = 0<br />&nbsp; &nbsp;&nbsp; else:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; output = -output<br />&nbsp; &nbsp;&nbsp; <br />&nbsp; &nbsp;// 3&#41;<br />&nbsp; &nbsp; &nbsp; FINAL = &#40;output + prevoutput&#41; / 2<br />&nbsp; &nbsp;&nbsp; <br />&nbsp; &nbsp;&nbsp; <br />'FINAL' is what the slot actually outputs.&nbsp; This is a 20-bit value.&nbsp; The modulator's output will<br />be sent to the carrier, and the carrier's output will be audible &#40;though you will want to scale it<br />down... 20-bit audio is crazy loud when ouputting 16-bit samples&#41;.<br /><br />'FINAL' is also the value used when calculating the modulator's feedback &#40;see prev section&#41;.<br /><br /><br /><br />---------------------------------------------<br />Envelope Generation:<br />---------------------------------------------<br /><br />Each slot has a 23-bit up counter &#40;hereon 'EGC'&#41; for envelope generation, very similar to the<br />18-bit phase counter.&nbsp; It determines the output of the envelope generator... which adds attenuation<br />to the output &#40;see previous section&#41;.<br /><br /><br />The envelope generator operates as an ADSR unit.&nbsp; When the channel is keyed on, both the Carrier<br />and the Modulator enter the Attack Phase.&nbsp; When keyed off, they enter Release phase.<br /><br />When the ADSR unit completes a full ADSR cycle, it enters a 5th 'Idle' phase.<br /><br />EGC is incremented every clock.&nbsp; The value by which it's incremented depends on which phase of ADSR<br />we're in.&nbsp; Those rates are then adjusted by a 'Key Scale Rate' factor &#40;see R:00, R:01&#41;.<br /><br />EGC also serves as the direct output of the envelope generator &#40;except in the Attack phase&#41;.<br />When EGC=0, output is 0 dB, and whdn EGC=&#40;1&lt;&lt;23&#41;, output is 48 dB.&nbsp; Because of this, I<br />recommend scaling all units in your emulator to work with dB in this &#40;1&lt;&lt;23&#41;/48 base.&nbsp; Doing<br />so results in minimal unit conversion.<br /><br />Formula for determining the rate to increase EGC:<br />&nbsp; &nbsp;BF&nbsp; &nbsp;= &#40;3-bit Channel Block &lt;&lt; 1&#41; + high bit of F-Num... forming a 4-bit value<br />&nbsp; &nbsp;K&nbsp; &nbsp; = Key Scale Rate bit &#40;see R:00, R:01&#41;<br />&nbsp; &nbsp;if K:&nbsp; &nbsp; &nbsp; &nbsp; KB = BF<br />&nbsp; &nbsp;otherwise:&nbsp; &nbsp;KB = BF &gt;&gt; 2<br /><br />&nbsp; &nbsp;R&nbsp; &nbsp; = base rate &#40;see subsections below&#41;<br />&nbsp; &nbsp;RKS&nbsp; = R*4 + KB<br />&nbsp; &nbsp;RH&nbsp; &nbsp;= RKS &gt;&gt; 2&nbsp; &nbsp;&#40;if RH &gt; 15, use RH=15&#41;<br />&nbsp; &nbsp;RL&nbsp; &nbsp;= RKS &amp; 3<br />&nbsp; &nbsp;<br />&nbsp;<br />The subsections below will provide a value for R, then will use RH and RL to determine<br />the rate by which EGC is incremented.<br /><br />Note that if R=0, then EGC is not incremented at all.<br /><br />Attack:<br />-------<br />&nbsp; &nbsp;R = slot attack rate &#40;4-bits as written to R:04, R:05&#41;<br />&nbsp; &nbsp;EGC += &#40;12 * &#40;RL+4&#41;&#41; &lt;&lt; RH<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;Once EGC wraps, reset EGC to zero and enter Decay phase<br />&nbsp; &nbsp;<br />Decay:<br />-------<br />&nbsp; &nbsp;R = slot decay rate &#40;4-bits as written to R:04, R:05&#41;<br />&nbsp; &nbsp;EGC += &#40;RL+4&#41; &lt;&lt; &#40;RH-1&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;Once output level reaches the slot sustain level &#40;see R:06, R:07&#41;, set EGC to the sustain<br />&nbsp; &nbsp;level &#40;do not reset it to 0!&#41;, and enter Sustain phase.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;The sustain level is &#40;3 dB * L&#41;, where L is the 4-bit value written to the register.<br />&nbsp; &nbsp;This means you enter Sustain when EGC &gt;= &#40;3 * L * &#40;1&lt;&lt;23&#41; / 48&#41;<br />&nbsp; &nbsp;<br />Sustain:<br />-------<br />&nbsp; &nbsp;If slot is percussive &#40;see R:00, R:01&#41;:&nbsp; R = slot RELEASE rate &#40;R:06, R:07, low bits&#41;<br />&nbsp; &nbsp;otherwise:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;R = 0<br />&nbsp; &nbsp;EGC += &#40;RL+4&#41; &lt;&lt; &#40;RH-1&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;When EGC reaches &#40;1&lt;&lt;23&#41;, output is fixed at 48 dB and enter Idle phase<br />&nbsp; &nbsp;<br />Release:<br />-------<br />&nbsp; &nbsp;If channel has &quot;Sustain On&quot; set &#40;see R:2x&#41;,&nbsp; R = 5<br />&nbsp; &nbsp;otherwise, if slot is percussive:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; R = slot release rate &#40;R:06, R:07&#41;<br />&nbsp; &nbsp;otherwise:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;R = 7<br />&nbsp; &nbsp;EGC += &#40;RL+4&#41; &lt;&lt; &#40;RH-1&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;When EGC reaches &#40;1&lt;&lt;23&#41;, output is fixed at 48 dB and enter Idle phase<br />&nbsp; &nbsp;<br />Idle:<br />-------<br />&nbsp; &nbsp;R=0<br />&nbsp; &nbsp;EGC not incremented<br />&nbsp; &nbsp;Output fixed at 48 dB<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />As previously mentioned, the output of the envelope generator is EGC, except in Attack phase.<br />In Attack, the actual rate of attack is logarithmic &#40;it also decreases attenuation, rather than<br />increasing it&#41;.<br /><br />&nbsp; &nbsp;attack_output = 48 dB - &#40;48 dB * ln&#40;EGC&#41; / ln&#40;1&lt;&lt;23&#41;&#41;<br />&nbsp; &nbsp;&#40;ln = natural log&#41;<br /><br />&nbsp; &nbsp;<br />---------------------------------------------<br />Key On / Key Off:<br />---------------------------------------------<br /><br />R:2x has the Key On bit for the channel.&nbsp; This bit only has an impact when its state transitions.<br />Upon transition, do the following for both Carrier and Modulator:<br /><br />When being set &#40;0-&gt;1&#41;:&nbsp; &nbsp;&#40;key on&#41;<br />&nbsp; &nbsp;- Reset EGC to zero<br />&nbsp; &nbsp;- Reset 18-bit phase counter to zero<br />&nbsp; &nbsp;- Enter Attack phase<br />&nbsp; &nbsp;<br />When being clear &#40;1-&gt;0&#41;:&nbsp; &#40;key off&#41;<br />&nbsp; &nbsp;- If currently in attack, EGC must be set to the current output level<br />&nbsp; &nbsp;- Enter Release phase<br /><br />&nbsp; &nbsp;<br />---------------------------------------------<br />AM/FM:<br />---------------------------------------------<br /><br />There is one AM unit and one FM unit.&nbsp; The output of these units are shared across all slots.<br /><br />Both units have a 20-bit counter that is increased by 'rate' every clock.<br /><br />&nbsp; sinx = sin&#40;2 * pi * counter / &#40;1&lt;&lt;20&#41;&#41;<br /><br />AM unit:<br />&nbsp; 'rate' = 78<br />&nbsp; AM_output = &#40;1.0 + sinx&#41; * 0.6 dB&nbsp; &nbsp;&#40;emu2413 uses 1.2 dB instead of 0.6, but that sounds way too steep to me&#41;<br />&nbsp; <br />&nbsp; See the &quot;Attenuation / Output calculation&quot; section for how this output is applied<br /><br />&nbsp; <br />FM unit:<br />&nbsp; 'rate' = 105<br />&nbsp; FM_output = 2 ^ &#40;13.75 / 1200 * sinx&#41;<br />&nbsp; &nbsp; &#40;note:&nbsp; '^' is exponent, not xor&#41;<br />&nbsp; &nbsp;<br />&nbsp; See the &quot;Phase / Frequency Calculation&quot; section for how this output is applied</div>
<br />
<br />
<br />edited with some corrections.
<br />edited again with some minor additions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Jul 16, 2012 10:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good notes. I'm curious, is there anything in there that differs from Okazaki's implementation? (On first read, everything seems pretty familiar from the Yamaha chip manual.)
<br />
<br />Does it really divide the clocks? I thought it had an external oscillator for its clocks. (The external oscillator is also based on the NTSC standard frequency, so for practical purposes it may not matter.)
<br />
<br />Might be worth noting also that this patch set is not perfect. (It's pretty good, but not quite there; I have a VRC7 test recording that demonstrates this: <a href="http://dl.dropbox.com/u/883356/vrc7_patch_test.flac" class="postlink">http://dl.dropbox.com/u/883356/vrc7_patch_test.flac</a>)
<br />
<br />I've personally been planning to attempt to write a more accurate VRC7 emulator, and also to finally nail down the minor differences in our fixed patch set, but I've had a few other projects come up in between so I haven't gotten around to it yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Jul 16, 2012 10:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not much of a sound buff but I glanced over it.  Looks good from a basic understanding point, I appreciate how well you break things down and explain them on a level that can be understood.
<br />
<br />Not sure when the time will come, but I'm sure at some point it'll make some good use of this reference.  Thanks, and keep up the awesome work!
<br />
<br />As an aside, how do you typically do your mapper research?  Reading many of your documents it almost seems you had to have done some hardware testing to learn what you explain.  However I'd guess that you don't play around with hardware much and you're actually emulating the mapper and making visual/audio comparisons to the emu and NES playing the original game.  Just curious...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jul 17, 2012 1:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Good notes. I'm curious, is there anything in there that differs from Okazaki's implementation?</div><br /><br />Thanks.<br /><br />AM depth is the only thing that comes to mind.  And I think the instruments/patch table might also differ (this one came from a posting on nesdev a long time ago... from either Q or Kevtris, I forget who).<br /><br />I did cross-reference his implementation with the Yamaha technical doc, but he seemed to be spot on about everything (even if it didn't look like it at first).  So this largely ended up being a translation of his work.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does it really divide the clocks? I thought it had an external oscillator for its clocks.</div><br /><br />Ah!  I think you're right.  That's clearly listed as a component in the technical doc.  Then that means the VRC7 would maintain its pitch if run on a PAL system... interesting.<br /><br />Good catch.  I'll make that change.  Thanks!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Might be worth noting also that this patch set is not perfect.</div><br /><br />Yeah.  Like I said I've heard subtle differences between my implementation and actual recordings.  If you know which are wrong and can correct them, that'd be sweet.<br /><br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">I appreciate how well you break things down and explain them on a level that can be understood. </div><br /><br />Thanks.  That's kind of what I go for.  The docs I write are meant to be a sort of guide for emu developers.  After having to decipher these workings, I felt it would be worth it to share my notes so that other people can benefit from it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As an aside, how do you typically do your mapper research?</div>
<br />
<br />It's mostly compiled from various other sources with some experimentation in my own emulator.  I haven't had the chance to test on actual hardware until recently (but not with VRC7 -- I don't have access to any VRC7 hardware).
<br />
<br />The mapper docs started as just personal notes that I was compiling for my emu.  I decided to clean them up and release them publicly because the info was so scattered and hard to find (and sometimes not in English), and thought people might appreciate a big compilation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jul 17, 2012 2:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Neato, thanks for documenting the chip so well. That sound chip scared me. Much harder than Sunsoft 5B.
<br />
<br />Do you happen to have the C/C++ source for your emulation of it handy?
<br />I'm somewhat interested in implementing it in my usual style (separate thread and all that), but it'll have to be on the back-burner for a while.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jul 17, 2012 2:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you happen to have the C/C++ source for your emulation of it handy? </div>
<br />
<br />Yes:
<br />
<br />header: <!-- m --><a class="postlink" href="http://codepad.org/7U4OhpcD">http://codepad.org/7U4OhpcD</a><!-- m -->
<br />source: <!-- m --><a class="postlink" href="http://codepad.org/aAQjWXwJ">http://codepad.org/aAQjWXwJ</a><!-- m -->
<br />
<br />It's state based, though.  I didn't go with a separate thread for audio.
<br />
<br />
<br />EDIT:  just noticed a typo.  You enter sustain when EGC is &gt;= the sustain level, not &lt;=.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Grapeshot</b> [ Wed Jul 18, 2012 1:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the information on the envelope implementation; it's substantially better than what I have been able to find and should let me get rid of a lot of unnecessary floating point calculations in my emulator.
<br />
<br />The instrument table you've listed is the same one that FCEUX uses.
<br />
<br />There is some better information on bit widths for the logsin table on the chip and the attenuation values out there, since Yamaha used the same basic operator design in the OPL2 chip as well as the YM2612 in the Genesis.
<br />
<br />Here's the actual contents of the logsin and attenuation to output tables for the OPL2:
<br />
<br /><a href="https://docs.google.com/document/pub?id=18IGx18NQY_Q1PJVZ-bHywao9bhsDoAqoIn1rIm42nwo" class="postlink">https://docs.google.com/document/pub?id=18IGx18NQY_Q1PJVZ-bHywao9bhsDoAqoIn1rIm42nwo</a>
<br />
<br />And here's the reference on SpritesMinded for the YM2612 which lists the acual bit widths of the attenuation and envelope tables among other things not relevant to this chip.
<br />
<br /><!-- m --><a class="postlink" href="http://gendev.spritesmind.net/forum/viewtopic.php?t=386">http://gendev.spritesmind.net/forum/viewtopic.php?t=386</a><!-- m -->
<br />
<br />The one thing that every implementation so far including mine doesn't seem to get right is the DAC. The real output depends heavily on the reconstruction filter and amplifier used because it's an impulse train DAC and not sample-and-hold like most sound chips.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Jul 18, 2012 8:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, thanks Grapeshot.  Very cool stuff!  I had a suspicion that the sine table only went up to sin(pi/2), that seems to confirm it.
<br />
<br />I'll definitely play around with this this week and update the doc.
<br />
<br />Thanks again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Wed Jul 18, 2012 9:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wrote a program to test VRC7 audio <a href="http://nesdev.com/bbs/viewtopic.php?t=9098" class="postlink">(message)</a>; will this help a bit? Perhaps you can compare the output of real hardware with emulator for figure out of similarity?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Jul 18, 2012 10:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I saw it, but without real VRC7 hardware to test on, there's little I can do with it  =(

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jul 18, 2012 1:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a VRC7 cart but I haven't felt up to trying to socket it. Does anyone know the pinout of the mask ROM? Is it a Sharp LH534? If so, looks like a total rewire. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />
<br />
<br />I wrote a small test program that worked via hotswap (that's how I made that patch set comparison recording).
<br />
<br />I also have a copyNES and have built a Famicom-&gt;NES adapter so I can test the patches via the VRC7 tuner program, which is probably the easiest way to do it, though at the moment it's a bit buggy for me. It's open source though, so I should be able to fix the problem, and can probably add new tests to it.
<br />
<br />I've also been considering a test that could be done via hotswap, like zzo38's program, but it has to fit into RAM. (Also zzo38, trying your .NES file in FCEUX it does not seem to work; a row of green and white letters/numbers displays, but the controller doesn't seem to do anything.) Hotswap tests are nice because anyone with a famicom + powerpak + adapter can try them.
<br />
<br />Anyhow, I'm in the middle of other things and have been putting it off; maybe I can get to it in a week or two.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jul 18, 2012 1:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I haven't read it all yet but there is something that bothers me...
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">VRC7 has its own oscillator to drive the clock rate.  It's clocked at 3.6 MHz (exactly 2x the NTSC <br /> NES CPU clock rate)<br />[...] <br /> To think of this in terms of CPU cycles, you could say that all units are clocked once every 36 CPU <br /> cycles on NTSC.  However, this is techncially inaccurate, as the NES clock does not drive the VRC7. <br /> And on PAL systems, the clock rate doesn't sync up like that.</div>
<br />
<br />Does the VRC7 really have <em>its own</em> oscillator ?
<br />If this is the case then it's certainly not <em>exactly</em> 2x the NES CPU clock rate.
<br />I'm sorry but both of these statements can't be true at the same time  <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jul 18, 2012 1:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes it has its own oscillator. (It's be blue blob in the top left corner, I believe: <a href="http://bootgod.dyndns.org:7777/profile.php?id=3643" class="postlink">http://bootgod.dyndns.org:7777/profile.php?id=3643</a>)
<br />
<br />It's true within the accuracy of the oscillator. It's a standard NTSC frequency oscillator, and the NES also runs on a standard NTSC frequency. So, they are running at the same/2x frequency to a certain level of accuracy, though they are not synchronized.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jul 18, 2012 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The VRC7 is actually using what's called a ceramic resonator, which is less precise and less stable (about 0.1%-0.5%) than a conventional crystal (≈10ppm). They have to have used to be cheaper, too, because I'm having trouble coming up with reasons why one would use them any more. (Reduced part count, maybe?)
<br />
<br />This level of precision turns out to be comparable to humans' Just Noticeable Difference for pitch (5cents = 0.3%) 
<br />
<br />Come to think of it, this might be a reason why the Lagrange Point soundtrack doesn't use the APU for anything but drums.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jul 18, 2012 2:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's an interesting point. I didn't realize it wasn't a crystal oscillator. Though, the 2A03 does not have a whole lot of precision in pitches to begin with, and the LP soundtrack is full of detuned-unison stuff anyway. That small an innacuracy of pitch might be immaterial. Similar case how the VRC6 saw uses an unusual division by 7 in its frequency, making it impossible to precisely tune against the other channels. Or the FDS/N163 using linear instead of reciprocal frequencies, etc. Precision tuning doesn't really happen much on the Famicom/NES.
<br />
<br />There are several games that don't really mix expansion sound with the 2A03 very much. Probably sometimes they just find it convenient to keep 2A03 channels open for SFX, but the resistors that balance the volume of the 2A03 and expansion audio tend to vary quite noticeably as well from cart to cart, which I think is more of a problem than the pitch.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>