<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Starting Out</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Starting Out</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1283">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1283</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Tue Mar 28, 2006 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The MMC1 is actually loaded through a serial port, so writing 11111111 would reset the mapper.</div><br /><br />That I knew/read, but didn't mention. I didn't realize it was serialized. So then, writing 00000001, 00000000, 00000001, 00000001, 00000000 would end up with:<br /><br />00000001<br />00000010<br />00000101<br />00001011<br />00010110 &lt;- final result<br /><br />Interesting.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's about right.</div>
<br />
<br />About? What'd I miss?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 28, 2006 11:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The MMC1 is actually loaded through a serial port</div><br />So then, writing 00000001, 00000000, 00000001, 00000001, 00000000 would end up with:<br /><br />00000001<br />00000010<br />00000101<br />00001011<br />00010110 &lt;- final result</div><br />Almost. The port is little endian. Writing 1, 0, 1, 1, 0 will end up with<br />10000<br />01000<br />10100<br />11010<br />01101 &lt;- final result<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's about right.</div><br />About? What'd I miss?</div>
<br />Given that I myself have no way of buying NES development hardware, I can't test my answers on hardware before posting them as I do on gbadev.org, so I use weasel words to let people know that I haven't completely verified the behavior.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Mar 28, 2006 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Before worrying about medium-complexity mappers like MMC1, perhaps you should get more familiar with more basic mappers like 0, 2, 3.
<br />
<br />Having existing experience with other mappers and other aspects of the NES will make understanding MMC1 much easier.  But for now, I'd say "don't worry about it".
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What ranges in the CPU address range are mapped and which ones are real?</div>
<br />
<br />"Real" is a subjective term.  EVERY address gets mapped to somewhere (unless it gets mapped to nowhere -- like if it's unused).  Where it gets mapped to depends on the address itself.  $0000-1FFF get routed to system RAM, $2000-3FFF get routed to PPU registers, $4000-40FF (roughly) get routed to CPU (and pAPU -- since the pAPU is part of the CPU) registers, and $41FF-FFFF typically goes to the cartridge, however not all of that is used by the cartridge.
<br />
<br />$0000-07FF isn't a special case or anything.  The RAM doesn't really exist at that address -- but rather that address is mapped to the RAM.  (I hope that doesn't confuse you even more).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Tue Mar 28, 2006 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent">No, but running them in parallel a) is interesting b) can run faster.</div><br />It's likely to be slower if you use real OS threads.  The context-switching and synchronization overhead would kill performance if you were switching every couple simulated cycles.<br /><br />I suggest you think in terms of several simulated tasks which you switch between using co-operative multitasking (i.e. "green threads".  NT-based Windows offers some Win32 API functions for "fibers" which do this, but I would ignore those and do your own context-switching.  As far as the OS is concerned, run your code in a single process/thread.  That keeps things nice and deterministic.  If you really want to, you could arrange to run image filters (HQ3X, Super 2xSAI, etc) of the previously-rendered frame in a separate thread.  But I think that is truly a waste of effort, especially for something as simple as the NES.<br /><br />The key realization for efficiently simulating multiple parallel hardware tasks (e.g. a CPU, a PPU and an APU) is that you DON'T have to simulate them in lock-step.  You just need to make sure that side effects from one task onto another, are observed in the correct order and at the correct (simulated) times.  So each task can have its own idea of its own "current time" in some absolute sense.  In other words, a cycle counter.<br /><br />For example, you can let the simulation of the CPU "run ahead" of the simulation of the PPU, and when the CPU tries to write to a PPU address, you would switch tasks and simulate the PPU for a while until it "catches up" to where the CPU is.  Then you would perform the write, and carry on.  Another possibility (since the write is a one-directional effect) is to just remember (in a timestamped circular buffer, for example) the fact that a certain value was written to a PPU port at a certain time, and continue simulating the CPU.  You wouldn't need to stop and switch to the PPU unless the CPU tried to *read* from a PPU register---in which case you'd need the PPU to "catch up" before you do the read, to ensure the correct value is available.<br /><br />Note that unless you write (at least some parts of) your emulator in assembly code, things like context-switching are difficult.  There are several emulators that simulate a pair of chips (say, a CPU and a sound chip) by having the CPU always stay "ahead of" the sound chip, and periodically the CPU emulation loop will call a function which simulates the sound chip until it catches up.<br /><br />Which reminds me: whichever task you are simulating, you probably want to pause it every so often and let the other tasks run (i.e. simulate the CPU for a limited number of cycles, then stop).  There are several reasons you might want to do this---one reason is to stop precisely at (or shortly before) the known time when a timer interrupt is going to occur.  Another reason is to make sure that you don't run out of audio samples to send to the sound card.  Etc.<br /><br />Disclaimer: I have never written a complete emulator before, but I've given a lot of thought to how an efficient-but-accurate emulator could be written for the SNES.  The SNES has a CPU and a sound chip which run on completely independent clocks.  But I think the same ideas could be applied to the NES (and may even be overkill).  I hope these ideas are useful to you.<br /><br />EDIT: Let me quote blargg from this other thread <a href="http://nesdev.com/bbs/viewtopic.php?p=9201#9201" class="postlink">http://nesdev.com/bbs/viewtopic.php?p=9201#9201</a>, for he puts it more succinctly than I:<br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Any NES CPU emulator which includes the timestamp of memory accessess can be used as the basis for a "cycle-accurate" NES emulator. The general rule is, any number of hardware modules can be emulated on an as-needed ("catch-up") basis as long as the future effects of all but one module on others can easily be predicted in advance. This is the case for the NES, where the CPU is the only entity whose future effect can only be determined by doing the actual emulation.</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Tue Mar 28, 2006 8:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I appreciate your reply and will definitely refer back to it when the time comes. For now I am writing this all in a single thread, but before I can even get to the real code writing portion of it, I need to understand how it all works. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I'm getting there. I'd guess I understand about 30% of it now, 40% of it simply stuff I just need to read and re-read up on, and another 30% I need to continue asking about.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>