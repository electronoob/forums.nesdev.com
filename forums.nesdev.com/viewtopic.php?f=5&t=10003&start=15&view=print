<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - improvised code vs engine code</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">improvised code vs engine code</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10003">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10003</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Apr 11, 2013 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: improvised code vs engine code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Writing code that is easy to maintain is a worthwhile goal whether or not you're going to reuse it after the current project. Modularity is a principle that can often result in maintainable, well structured code.<br /><br />However, knowing how to properly modularize a system usually comes with experience. You can (and should) plan for it as you're going in, but if you haven't written this kind of system before you will inevitably leave some critical things out in your first pass anyway. Over the length of your project you will rework, revise, and hack that system to get what you need out of it.<br /><br />In my opinion, game engine building should be an iterative process, where each iteration is the production of a single game. Finish and release a game first, then review its code. Extract anything you think is worth keeping to begin your next game project, and if there are systems that you can refactor or rewrite in a better way now that you've seen the final state/needs of the first project, this is now a good time to do that. Continue from here to finish your second game. As you repeat this process, the code you retain should become easier to work with, more generically applicable, more elegant, and you might get to something worth calling an &quot;engine&quot;.<br /><br />For the hobbyist, I think you should just focus on finishing your game. Think a little about your engine while you're between games, planning. Just making a good first game is a hard enough problem without dragging yourself down worrying about whether or not you can reuse any of this code for the next ten games you want to (and may never) make. No matter how much mess you happen to make getting the first game finished, at the end I guarantee you will have left over much code and/or experience that you can build from for your next game; you don't need to worry about that up front.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Tue Apr 16, 2013 7:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: improvised code vs engine code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't hesitate to hard-code certain aspects of my games if I am certain there is only one of something, for example, like a main character. In my new game, there is a hard-coded main character and a hard coded familiar, because I know that is how it will be. But, I'm re-using the sound-engine from Nomolos. However, I recently re-wrote it to use structures of arrays rather than arrays of structures (thanks Tepples). I also ended up re-writing a lot of other stuff that I might have re-used from Nomolos, and found my fluency in 6502 went up quite dramatically from the last time around (probably largely due to using structures of arrays it really shows how idiomatic this is for 6502 when you get used to it). I think I'm with Shiru on this one. Each game is so unique you're going to end up re-writing a lot, and 6502 is so flexible your fluency will probably multiply from one game to the next. So...modularize what you can, but don't worry too much about making a super ultimate generic game engine that you'll never have to touch ever again. Especially because as you add more and more layers of abstraction and indirection, this usually implies at least some overhead, which on a constrained system like the NES just isn't worth it, to me. Abstractions are so hard to get right. When applied to a new problem, they often leak and you have to hack them anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Apr 17, 2013 10:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: improvised code vs engine code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">I don't hesitate to hard-code certain aspects of my games if I am certain there is only one of something, for example, like a main character. In my new game, there is a hard-coded main character and a hard coded familiar, because I know that is how it will be. But, I'm re-using the sound-engine from Nomolos. However, I recently re-wrote it to use structures of arrays rather than arrays of structures (thanks Tepples). I also ended up re-writing a lot of other stuff that I might have re-used from Nomolos, and found my fluency in 6502 went up quite dramatically from the last time around (probably largely due to using structures of arrays it really shows how idiomatic this is for 6502 when you get used to it). I think I'm with Shiru on this one. Each game is so unique you're going to end up re-writing a lot, and 6502 is so flexible your fluency will probably multiply from one game to the next. So...modularize what you can, but don't worry too much about making a super ultimate generic game engine that you'll never have to touch ever again. Especially because as you add more and more layers of abstraction and indirection, this usually implies at least some overhead, which on a constrained system like the NES just isn't worth it, to me. Abstractions are so hard to get right. When applied to a new problem, they often leak and you have to hack them anyway.</div><br /><br />Couldn't agree more about the structure of arrays vs. array of structures thing. I think Tokumaru introduced this concept to me as &quot;interleaving&quot; data. My code is so much more efficient now that I handle things this way. I actually did the same thing, where I went back and turned everything in my project to structures of arrays, because it has that much of an impact on performance.<br /><br />But yeah, pretty much unless you're releasing some sort of NES game maker program with a nice GUI where anyone can make a game with no programming skills, you should be able to hardcode certain things into your engine for the sake of your time and system performance. I'd say if there's more than like 3 of a given thing you're handling throughout your game (music, levels, enemies), you'd probably want to create something to handle it generically. Otherwise, you might consider hard coding it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>