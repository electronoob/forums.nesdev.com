<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=1283" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-03-28T20:45:00-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=1283</id>
<entry>
<author><name><![CDATA[FreakSoftware]]></name></author>
<updated>2006-03-28T20:45:00-07:00</updated>
<published>2006-03-28T20:45:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11278#p11278</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11278#p11278"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11278#p11278"><![CDATA[
I appreciate your reply and will definitely refer back to it when the time comes. For now I am writing this all in a single thread, but before I can even get to the real code writing portion of it, I need to understand how it all works. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I'm getting there. I'd guess I understand about 30% of it now, 40% of it simply stuff I just need to read and re-read up on, and another 30% I need to continue asking about.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=369">FreakSoftware</a> — Tue Mar 28, 2006 8:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mozz]]></name></author>
<updated>2006-03-28T14:49:35-07:00</updated>
<published>2006-03-28T14:49:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11266#p11266</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11266#p11266"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11266#p11266"><![CDATA[
<div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent"><br />No, but running them in parallel a) is interesting b) can run faster.<br /></div><br />It's likely to be slower if you use real OS threads.  The context-switching and synchronization overhead would kill performance if you were switching every couple simulated cycles.<br /><br />I suggest you think in terms of several simulated tasks which you switch between using co-operative multitasking (i.e. "green threads".  NT-based Windows offers some Win32 API functions for "fibers" which do this, but I would ignore those and do your own context-switching.  As far as the OS is concerned, run your code in a single process/thread.  That keeps things nice and deterministic.  If you really want to, you could arrange to run image filters (HQ3X, Super 2xSAI, etc) of the previously-rendered frame in a separate thread.  But I think that is truly a waste of effort, especially for something as simple as the NES.<br /><br />The key realization for efficiently simulating multiple parallel hardware tasks (e.g. a CPU, a PPU and an APU) is that you DON'T have to simulate them in lock-step.  You just need to make sure that side effects from one task onto another, are observed in the correct order and at the correct (simulated) times.  So each task can have its own idea of its own "current time" in some absolute sense.  In other words, a cycle counter.<br /><br />For example, you can let the simulation of the CPU "run ahead" of the simulation of the PPU, and when the CPU tries to write to a PPU address, you would switch tasks and simulate the PPU for a while until it "catches up" to where the CPU is.  Then you would perform the write, and carry on.  Another possibility (since the write is a one-directional effect) is to just remember (in a timestamped circular buffer, for example) the fact that a certain value was written to a PPU port at a certain time, and continue simulating the CPU.  You wouldn't need to stop and switch to the PPU unless the CPU tried to *read* from a PPU register---in which case you'd need the PPU to "catch up" before you do the read, to ensure the correct value is available.<br /><br />Note that unless you write (at least some parts of) your emulator in assembly code, things like context-switching are difficult.  There are several emulators that simulate a pair of chips (say, a CPU and a sound chip) by having the CPU always stay "ahead of" the sound chip, and periodically the CPU emulation loop will call a function which simulates the sound chip until it catches up.<br /><br />Which reminds me: whichever task you are simulating, you probably want to pause it every so often and let the other tasks run (i.e. simulate the CPU for a limited number of cycles, then stop).  There are several reasons you might want to do this---one reason is to stop precisely at (or shortly before) the known time when a timer interrupt is going to occur.  Another reason is to make sure that you don't run out of audio samples to send to the sound card.  Etc.<br /><br />Disclaimer: I have never written a complete emulator before, but I've given a lot of thought to how an efficient-but-accurate emulator could be written for the SNES.  The SNES has a CPU and a sound chip which run on completely independent clocks.  But I think the same ideas could be applied to the NES (and may even be overkill).  I hope these ideas are useful to you.<br /><br />EDIT: Let me quote blargg from this other thread <a href="http://nesdev.com/bbs/viewtopic.php?p=9201#9201" class="postlink">http://nesdev.com/bbs/viewtopic.php?p=9201#9201</a>, for he puts it more succinctly than I:<br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />Any NES CPU emulator which includes the timestamp of memory accessess can be used as the basis for a "cycle-accurate" NES emulator. The general rule is, any number of hardware modules can be emulated on an as-needed ("catch-up") basis as long as the future effects of all but one module on others can easily be predicted in advance. This is the case for the NES, where the CPU is the only entity whose future effect can only be determined by doing the actual emulation.<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=330">mozz</a> — Tue Mar 28, 2006 2:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-03-28T12:56:32-07:00</updated>
<published>2006-03-28T12:56:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11264#p11264</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11264#p11264"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11264#p11264"><![CDATA[
Before worrying about medium-complexity mappers like MMC1, perhaps you should get more familiar with more basic mappers like 0, 2, 3.<br /><br />Having existing experience with other mappers and other aspects of the NES will make understanding MMC1 much easier.  But for now, I'd say "don't worry about it".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />What ranges in the CPU address range are mapped and which ones are real?<br /></div><br /><br />"Real" is a subjective term.  EVERY address gets mapped to somewhere (unless it gets mapped to nowhere -- like if it's unused).  Where it gets mapped to depends on the address itself.  $0000-1FFF get routed to system RAM, $2000-3FFF get routed to PPU registers, $4000-40FF (roughly) get routed to CPU (and pAPU -- since the pAPU is part of the CPU) registers, and $41FF-FFFF typically goes to the cartridge, however not all of that is used by the cartridge.<br /><br />$0000-07FF isn't a special case or anything.  The RAM doesn't really exist at that address -- but rather that address is mapped to the RAM.  (I hope that doesn't confuse you even more).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Mar 28, 2006 12:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-03-28T11:42:40-07:00</updated>
<published>2006-03-28T11:42:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11263#p11263</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11263#p11263"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11263#p11263"><![CDATA[
<div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The MMC1 is actually loaded through a serial port<br /></div><br />So then, writing 00000001, 00000000, 00000001, 00000001, 00000000 would end up with:<br /><br />00000001<br />00000010<br />00000101<br />00001011<br />00010110 &lt;- final result</div><br />Almost. The port is little endian. Writing 1, 0, 1, 1, 0 will end up with<br />10000<br />01000<br />10100<br />11010<br />01101 &lt;- final result<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's about right.<br /></div><br />About? What'd I miss?</div><br />Given that I myself have no way of buying NES development hardware, I can't test my answers on hardware before posting them as I do on gbadev.org, so I use weasel words to let people know that I haven't completely verified the behavior.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Mar 28, 2006 11:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FreakSoftware]]></name></author>
<updated>2006-03-28T11:33:56-07:00</updated>
<published>2006-03-28T11:33:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11262#p11262</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11262#p11262"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11262#p11262"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />The MMC1 is actually loaded through a serial port, so writing 11111111 would reset the mapper.<br /></div><br /><br />That I knew/read, but didn't mention. I didn't realize it was serialized. So then, writing 00000001, 00000000, 00000001, 00000001, 00000000 would end up with:<br /><br />00000001<br />00000010<br />00000101<br />00001011<br />00010110 &lt;- final result<br /><br />Interesting.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That's about right.<br /></div><br /><br />About? What'd I miss?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=369">FreakSoftware</a> — Tue Mar 28, 2006 11:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-03-28T08:19:34-07:00</updated>
<published>2006-03-28T08:19:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11261#p11261</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11261#p11261"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11261#p11261"><![CDATA[
<div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent"><br />Continuing on MMC1 registers... If I understand this correctly, writing to $8000-$FFFF writes to the actual registers in the MMC, but reading from those address reads from the select ROM banks defined by the bits in the registers?  <img src="http://forums.nesdev.com/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /><br /></div><br />Correct. Consider the CPU's read/write flag to be like another address bit in some cases.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So for example if we have Register 0 as 00001100, then a) writing 11111111 to $A234 would actually write 11111111 to register 0, but b) reading from $A234 would read from address $2234 of the low 16 KB PRGROM bank?<br /></div><br />Almost. The MMC1 is actually loaded through a serial port, so writing 11111111 would reset the mapper. If you want to write 11111 to register 0, then write 00000001 00000001 00000001 00000001 00000001, or 00011111 00001111 00000111 00000011 00000001, etc. (Bits 6 to 1 don't matter.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />What ranges in the CPU address range are mapped and which ones are real? Is only $0000 to $07FF real? $2000-$2007 are mapped to PPU registers, $4000 to $401F is kind of sketchy so I don't know about them, but then from $4020 to $10000 it's all mapped somehow onto the cartridge?<br /></div><br />That's about right.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Mar 28, 2006 8:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FreakSoftware]]></name></author>
<updated>2006-03-28T01:04:00-07:00</updated>
<published>2006-03-28T01:04:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11253#p11253</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11253#p11253"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11253#p11253"><![CDATA[
Continuing on MMC1 registers... If I understand this correctly, writing to $8000-$FFFF writes to the actual registers in the MMC, but reading from those address reads from the select ROM banks defined by the bits in the registers?  <img src="http://forums.nesdev.com/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> <br /><br />So for example if we have Register 0 as 00001100, then a) writing 11111111 to $A234 would actually write 11111111 to register 0, but b) reading from $A234 would read from address $2234 of the low 16 KB PRGROM bank? <br /><br />What ranges in the CPU address range are mapped and which ones are real? Is only $0000 to $07FF real? $2000-$2007 are mapped to PPU registers, $4000 to $401F is kind of sketchy so I don't know about them, but then from $4020 to $10000 it's all mapped somehow onto the cartridge?<br /><br />Addresses lower than $2000 only use the least significant 11 bits, addresses from $2000 to $3FFF use the least significant 3 bits... <br /><br />Yeah, I don't get the memory mapping. I'm doing my best sorry <br /><br />A diagram would help. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=369">FreakSoftware</a> — Tue Mar 28, 2006 1:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FreakSoftware]]></name></author>
<updated>2006-03-27T22:24:25-07:00</updated>
<published>2006-03-27T22:24:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11250#p11250</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11250#p11250"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11250#p11250"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br /><div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent">Is "one-screen mirroring" just a typical game like Mario Brothers would be?<br /></div><br /><br />No.  One screen mirroring is typically for games which want to have a 4-way scrolling screen AND a stationary status bar of some sort.  Examples of this are Conflict, Battletoads, RC Pro Am, etc.<br /><br />Such games that use 1-screen in this manner can reserve the second nametable to hold nothing but the status bar... and have the scrolling map on its own nametable.  This way the map will never overlap the status bar in the nametable as the screen scrolls.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't quite follow how you can write to a register via an address range. Can someone explain that, or is the above simply misleading?<br /></div><br /><br />It's the same concept of mirroring.</div><br /><br />Oh so they literally mean that every one of those address writes to the same register. That's crazy.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />On MMC1, when you write in the $8000-FFFF range, only bits 13-15 are significant for determining which of the 4 MMC1 regs you're writing to (well really only 13 and 14, since bit 15 is always 1).<br /><br />ie: writing to $9213 is the same as writing to $8000 because when you mask out bits 13-15 (address &amp; 0xE000), you get the same value ($8000)<br /><br />If it helps to think of it this way... you could say that $8001-9FFF are all mirrors of $8000, etc.  (but only when writing)<br /></div></div><br /><br />See, now that's a beautiful explanation! You should describe everything in that way so I don't have to ask <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Be back later.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=369">FreakSoftware</a> — Mon Mar 27, 2006 10:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-03-27T14:42:25-07:00</updated>
<published>2006-03-27T14:42:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11245#p11245</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11245#p11245"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11245#p11245"><![CDATA[
<div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent"><br />Is "one-screen mirroring" just a typical game like Mario Brothers would be?<br /></div><br /><br />No.  One screen mirroring is typically for games which want to have a 4-way scrolling screen AND a stationary status bar of some sort.  Examples of this are Conflict, Battletoads, RC Pro Am, etc.<br /><br />Such games that use 1-screen in this manner can reserve the second nametable to hold nothing but the status bar... and have the scrolling map on its own nametable.  This way the map will never overlap the status bar in the nametable as the screen scrolls.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't quite follow how you can write to a register via an address range. Can someone explain that, or is the above simply misleading?<br /></div><br /><br />It's the same concept of mirroring.<br /><br />The same reason the CPU address $3726 is the same as $2006.  Within a certain range, only certain address bits are used.<br /><br />On MMC1, when you write in the $8000-FFFF range, only bits 13-15 are significant for determining which of the 4 MMC1 regs you're writing to (well really only 13 and 14, since bit 15 is always 1).<br /><br />ie: writing to $9213 is the same as writing to $8000 because when you mask out bits 13-15 (address &amp; 0xE000), you get the same value ($8000)<br /><br />If it helps to think of it this way... you could say that $8001-9FFF are all mirrors of $8000, etc.  (but only when writing)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Mar 27, 2006 2:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FreakSoftware]]></name></author>
<updated>2006-03-27T14:10:54-07:00</updated>
<published>2006-03-27T14:10:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11244#p11244</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11244#p11244"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11244#p11244"><![CDATA[
<div class="quotetitle">hap wrote:</div><div class="quotecontent"><br />You don't need to create multithreaded software to simulate components running in parallel;<br /></div><br /><br />No, but running them in parallel a) is interesting b) can run faster.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />and A): The same way cable tv broadcasting does, by outputting high voltage 'blacker than black' synchronisation and screen transition pulses to let the television screen know when the beam must retrace.<br /></div><br /><br />So the signal source just says "VBlank now" and then goes from there. Ok.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=369">FreakSoftware</a> — Mon Mar 27, 2006 2:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hap]]></name></author>
<updated>2006-03-27T14:04:50-07:00</updated>
<published>2006-03-27T14:04:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11243#p11243</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11243#p11243"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11243#p11243"><![CDATA[
You don't need to create multithreaded software to simulate components running in parallel; a 'catch-up' implementation is sufficient, that has been described on these forums before; run the PPU to catch up with the CPU at each write or read of any PPU register, and at vblank.<br /><br />and A): The same way cable tv broadcasting does, by outputting high voltage 'blacker than black' synchronisation and screen transition pulses to let the television screen know when the beam must retrace.<br /><br />*edit* that question about MMC1 registers, I suggest you to do some reading on the subject of 'memory mapped I/O'..<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=115">hap</a> — Mon Mar 27, 2006 2:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FreakSoftware]]></name></author>
<updated>2006-03-27T14:03:45-07:00</updated>
<published>2006-03-27T14:03:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11242#p11242</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11242#p11242"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11242#p11242"><![CDATA[
Is "one-screen mirroring" just a typical game like Mario Brothers would be?<br /><br />A document describing MMC1 says that the chip has four registers:<br />   Register 0 (reg0) - written to via $8000-$9FFF<br />   Register 1 (reg1) - written to via $A000-$BFFF<br />   Register 2 (reg2) - written to via $C000-$DFFF<br />   Register 3 (reg3) - written to via $E000-$FFFF<br /><br />I don't quite follow how you can write to a register via an address range. Can someone explain that, or is the above simply misleading?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=369">FreakSoftware</a> — Mon Mar 27, 2006 2:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FreakSoftware]]></name></author>
<updated>2006-03-27T13:26:21-07:00</updated>
<published>2006-03-27T13:26:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11241#p11241</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11241#p11241"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11241#p11241"><![CDATA[
<div class="quotetitle">teaguecl wrote:</div><div class="quotecontent"><br />FreakSW,<br />Glad to see another NES enthusiast join the community.  You have a somewhat unique perspective on this since you are starting from scratch.  I was thinking maybe you could help us out by testing our wiki out <a href="http://nesdevwiki.ath.cx/index.php/Main_Page" class="postlink">http://nesdevwiki.ath.cx/index.php/Main_Page</a><br /></div><br /><br />Oh believe me, I am. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />There's a lot of details, but nothing really explains how it works from the top down in a high level sense and that's one thing I'm trying to put together.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=369">FreakSoftware</a> — Mon Mar 27, 2006 1:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[teaguecl]]></name></author>
<updated>2006-03-27T12:48:52-07:00</updated>
<published>2006-03-27T12:48:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11239#p11239</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11239#p11239"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11239#p11239"><![CDATA[
FreakSW,<br />Glad to see another NES enthusiast join the community.  You have a somewhat unique perspective on this since you are starting from scratch.  I was thinking maybe you could help us out by testing our wiki out <a href="http://nesdevwiki.ath.cx/index.php/Main_Page" class="postlink">http://nesdevwiki.ath.cx/index.php/Main_Page</a><br /><br />This is intended to be the collection of all NES technical info we know about.  Theoretically you should be able to implement an emulator from scratch using info from the wiki.  Of course we're not there yet, but you are in a good position to let us know what is missing or confusing.  Regardless, it's a good reference for someone in your position, and it's difficult to find (not linked from main page).  Good luck!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=29">teaguecl</a> — Mon Mar 27, 2006 12:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FreakSoftware]]></name></author>
<updated>2006-03-27T10:55:23-07:00</updated>
<published>2006-03-27T10:55:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11234#p11234</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11234#p11234"/>
<title type="html"><![CDATA[Starting Out]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1283&amp;p=11234#p11234"><![CDATA[
<div class="quotetitle">hap wrote:</div><div class="quotecontent"><br />I don't think it's a good approach to use an existing 6502 emulator, as it's the core and will make it hard for you to understand how it works. If you won't write your own CPU emulator, at least do some reading on the subject, and you'll see your general lack of understanding isn't as bad as you thought it was.<br /></div><br /><br />I'm well aware of how processors in general work (I made one in VDHL and Verilog) as well as assembly (80806 for a class), I just don't think I need to know the specifics of the 6502 right now. I do plan to write the core eventually.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Now all of these map to the CPU's memory, not the PPU's right? The PPU's memory is physical?<br /></div><br />CHR is always mapped to the PPU memory area $0000-$1fff. It can also be mapped to the PPU nametable area, with specific mappers, you can worry about that later.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This quick overview would be the behaviour of an emulator with a scanline based renderer. Is that what you meant ? On the other hand, a real NES behaves differently; every component runs in parallel<br /></div><br /><br />Of course. I was actually playing with the idea of running separate components in threads just to see if it would work pretty well (I'm looking to emulate more complicated hardware later on, and being able to take advantage of multiple cores would be a big boost). Though I think I'll just get it working in a single thread for now. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />A few more questions:<br /><br />A) How does the NES hardware vsync itself with the TV? Or does it work the other way around? hsync?<br /><br />B) bah... I'll ask more later, I have to go.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=369">FreakSoftware</a> — Mon Mar 27, 2006 10:55 am</p><hr />
]]></content>
</entry>
</feed>