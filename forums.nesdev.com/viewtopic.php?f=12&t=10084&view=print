<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Writing to SRAM on retail carts</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Writing to SRAM on retail carts</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10084">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10084</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DNSDies</b> [ Wed May 08, 2013 3:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a save file from an emulator I'd like to transfer to a retail cart, but I don't have a SRAM writer.<br /><br />What I do have is a super everdrive, a GQ-4X Programmer, and a Teensy 2.0.<br /><br />How do I go about doing this?<br />Also, can I possibly use my teensy to do SRAM backups in preparation for battery replacements?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed May 08, 2013 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you disable the CIC on your SNES, you can hotswap the flash cart to the retail cart, save the SRAM into internal RAM, hotswap the retail cart out while you swap the battery, then hotswap it back in and rewrite. Tricky since a crash on the SNES would mess the process up.<br /><br />With the Teensy you can hook it to the controller port, run a bootloader from the flash cart (which I assume you can program from your PC), hotswap to the retail cart, and read/write SRAM from the PC via the Teensy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Wed May 08, 2013 7:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How well does hot swapping work on the SNES though? I recall someone mentioning having DMA transfers going tends to reduce the chance of a crash. <br /><br />Either way there is no ready to go way to do what you want with the materials you have on hand. Older style Copiers like the Game Doctor SF can do what you want though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed May 08, 2013 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hotswapping works reliably for me, yes, using 64K DMAs to make the CPU unlikely to crash. The only tricky parts are disabling the CIC (lift one pin) with a soldering iron and hooking the Teensy to the controller port. Agreed that unless you want to do some significant SNES stuff, a copier that can do this directly or sending the boards to someone who can makes more sense (remove them from cart cases and pay maybe $10 to send several cart boards round-trip, at least in the USA).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Wed May 08, 2013 9:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could build an awful contraption like I did for an N64 when I had to give four copies of Super Smash Bros 64 the same fully unlocked save file:<br /><br /><img src="http://mikejmoffitt.com/img/n65whut.JPG" alt="Image" /><br /><img src="http://mikejmoffitt.com/img/n64whut.JPG" alt="Image" /><br /><br />However, this worked by playing both carts from a fresh state and progressing through them identically, so there weren't conflicts between the two (potentially mismatched) sets of SRAM data lines being merged into the one. <br /><br />I guess you could do something like that but disable SRAM reading on one cartridge temporarily? unfortunately I don't know if that 's a reasonable thing, since without knowing better I'd expect it to be bidirectional and not have specific lines for reading and writing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Thu May 09, 2013 1:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Hotswapping works reliably for me, yes, using 64K DMAs to make the CPU unlikely to crash.</div><br />Interesting way to misuse DMA for hotswapping. A different way is to store up to 8x12 bytes of program code in the DMA registers at 4300h-437Fh, and let the CPU execute that code, doing that should be absolutely stable and make it impossible to crash the CPU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu May 09, 2013 6:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Have you tested and confirmed that?<br /><br />I currently use the 64K DMA trick to avoid CPU crashes, and it's somewhat unreliable. About a 25% failure rate.<br /><br />I mean the theory is sound, but code executing out of WRAM shouldn't crash when you swap carts either, and yet it does.<br /><br />If this really works, I sure would have liked to have known about it before dumping 750 cartridges using the DMA trick <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu May 09, 2013 6:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Putting a cart in with those big caps puts quite a surge on the power supply.  That's probably what causes it to crash somewhat often.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu May 09, 2013 5:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, DMA registers work. I first put the program that flashes the screen for a while, then runs the serial bootloader out of WRAM, but WRAM was apparently getting corrupted when I inserted/removed cartridge. So I rewrote the serial bootloader to fit entirely into DMA registers and it seems uncrashable/uncorruptible. It was a tad tricky to break the code into 12-byte chunks (with branches to the next) and get the timing right. The bootloader checks for a 3-byte header and does a checksum on received data, so there's no way it can get tricked by insertions while it's reading the controller port for data. It barely fit.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Receives data as 57600-bps serial on controller port 2<br />; Waits for 256-byte block beginning with $DC $4B $D2<br />; Writes it to 0-$FF in memory (zero-page)<br />; Verifies checksum in fourth byte (see code at end for preparing block and checksum)<br />; If all check out, starts executing at $0004, otherwise resumes waiting for header<br /><br />; The following must be run before code is executed:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; sep #$30&nbsp; &nbsp; ; make A, X, and Y 8 bits<br /><br />; It works in emulation or native mode.<br />; The code below must be copied to DMA registers and executed from them (JMP $4300)<br /><br />4300:A2 00&nbsp; &nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; X = bytes received<br />4302:A9 01&nbsp; &nbsp; LDA #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; A = mask<br />4304:2C 17 40 BIT $4017&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Wait for start bit<br />4307:F0 FB&nbsp; &nbsp; BEQ $4304<br />4309:80 05&nbsp; &nbsp; BRA $4310<br />430B:FF FF FF FF FF<br />4310:A9 01&nbsp; &nbsp; LDA #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; A = initial delay to middle of start bit<br />4312:A0 FF&nbsp; &nbsp; LDY #$FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Y = received bits<br />4314:3A&nbsp; &nbsp; &nbsp; &nbsp;DEC A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Delay A*30<br />4315:D0 FD&nbsp; &nbsp; BNE $4314<br />4317:A9 01&nbsp; &nbsp; LDA #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; A = mask<br />4319:80 05&nbsp; &nbsp; BRA $4320<br />431B:FF FF FF FF FF<br />4320:2D 17 40 AND $4017&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Read in middle of bit<br />4323:49 FF&nbsp; &nbsp; EOR #$FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; un-invert<br />4325:C9 FF&nbsp; &nbsp; CMP #$FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; carry = bit<br />4327:98&nbsp; &nbsp; &nbsp; &nbsp;TYA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Rotate into bits received<br />4328:6A&nbsp; &nbsp; &nbsp; &nbsp;ROR<br />4329:80&nbsp; &nbsp; &nbsp; &nbsp;BRA $4330<br />432B:FF FF FF FF FF<br />4330:95 00&nbsp; &nbsp; STA $00,X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Store byte (also acts as delay)<br />4332:90 0C&nbsp; &nbsp; BCC $4340&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Done with byte if start bit was shifted out<br />4334:A8&nbsp; &nbsp; &nbsp; &nbsp;TAY<br />4335:95 00&nbsp; &nbsp; STA $00,X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; delay<br />4337:EB&nbsp; &nbsp; &nbsp; &nbsp;XBA<br />4338:A9 04&nbsp; &nbsp; LDA #$04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; delay between bits<br />433A:80 D8&nbsp; &nbsp; BRA $4314<br />433C:FF FF FF D8<br />4340:E0 03&nbsp; &nbsp; CPX #$03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; First 3 bytes are signature<br />4342:B0 0C&nbsp; &nbsp; BCS $4350<br />4344:7D 77 43 ADC $4376,X&nbsp; &nbsp; &nbsp; &nbsp;; Add negated correct byte, =0 if correct<br />4347:D0 B7&nbsp; &nbsp; BNE $4300<br />4349:80 05&nbsp; &nbsp; BRA $4350<br />434B:FF FF FF FF FF<br />4350:A9 07&nbsp; &nbsp; LDA #$07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; delay until middle of stop bit<br />4352:3A&nbsp; &nbsp; &nbsp; &nbsp;DEC A<br />4353:D0 FD&nbsp; &nbsp; BNE $4352<br />4355:E8&nbsp; &nbsp; &nbsp; &nbsp;INX<br />4356:D0 AA&nbsp; &nbsp; BNE $4302&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; more bytes<br />4358:80 06&nbsp; &nbsp; BRA $4360<br />435A:FF FF FF FF FF FF<br />4360:8A&nbsp; &nbsp; &nbsp; &nbsp;TXA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Calculate checksum (XOR and add)<br />4361:55 00&nbsp; &nbsp; EOR $00,X<br />4363:0A&nbsp; &nbsp; &nbsp; &nbsp;ASL<br />4364:69 99&nbsp; &nbsp; ADC #$99<br />4366:E8&nbsp; &nbsp; &nbsp; &nbsp;INX<br />4367:D0 F8&nbsp; &nbsp; BNE $4361<br />4369:80 05&nbsp; &nbsp; BRA $4370<br />436B:FF FF FF FF FF<br />4370:AA&nbsp; &nbsp; &nbsp; &nbsp;TAX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; if CRC != 0, go back and wait for new block<br />4371:D0 8D&nbsp; &nbsp; BNE $4300<br />4373:4C 04 00 JMP $0004&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Run the program!<br />4376:24 B5 2E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; negated header bytes<br /><br />/* Converts 256-byte block of user code (beginning at offset 4)<br />into 256-byte program block ready to send to boot loader */<br />enum { boot_block_offset = 4 };<br />enum { boot_block_size = 0x100 };<br />static void make_boot_block( unsigned char block &#91;boot_block_size&#93; )<br />{<br />&nbsp; &nbsp; int i, crc = 0;<br />&nbsp; &nbsp; for ( i = boot_block_size - 1; i &gt;= boot_block_offset - 1; i-- )<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; crc += 0x100 - 0x99;<br />&nbsp; &nbsp; &nbsp; &nbsp; crc = (crc &lt;&lt; 7 &amp; 0x80) | (crc &gt;&gt; 1 &amp; 0x7F);<br />&nbsp; &nbsp; &nbsp; &nbsp; crc ^= block &#91;i&#93;;<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; block &#91;0&#93;&nbsp; = 0xDC;<br />&nbsp; &nbsp; block &#91;1&#93;&nbsp; = 0x4B;<br />&nbsp; &nbsp; block &#91;2&#93;&nbsp; = 0xD2;<br />&nbsp; &nbsp; block &#91;3&#93; ^= crc ^ 0xCB;<br />}</div><br /><br />EDIT: scope shows cartridge data bus quiet while executing above code out of DMA registers, so this does look like it will be uncrashable. Now to examine the +5V rail droop due to the cart's capacitors charging when hotswapped.<br /><br />Nope, am not seeing any power dips on cartridge insertion. Also after doing all this scoping while code was running, it hadn't crashed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ziggy587</b> [ Thu May 09, 2013 8:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The programmer that is used for the Super Flash Cart from Tototek will allow you to write to the SRAM on retail carts.<br /><br /><!-- m --><a class="postlink" href="http://tototek.com/store/index.php?main_page=product_info&amp;cPath=1_8_11&amp;products_id=39">http://tototek.com/store/index.php?main ... ucts_id=39</a><!-- m --><br /><br />You can buy the programmer separately for only $20 (scroll down to bottom of page) but the catch is you need an EPP parallel port for it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qwertymodo</b> [ Thu May 09, 2013 11:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm currently working on a Teensy++ based cart reader, should be a fun project.<br /><br />I really should finish that hardware re-spin of the controller-port serial connection too... so many projects, so little time.  No, wait, that's not true... so many projects, so *much* time... so much Netflix &gt;_&lt;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri May 10, 2013 9:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qwertymodo wrote:</div><div class="quotecontent">so many projects, so *much* time... so much Netflix &gt;_&lt;</div><br />Just ask yourself which you'd like to have done in a year: watch Netflix a lot yet still only watched a tiny fraction of what's available, or completed several projects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri May 10, 2013 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If a game project involves creating an original setting, one may need to watch Netflix to get inspiration.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qwertymodo</b> [ Fri May 10, 2013 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle">qwertymodo wrote:</div><div class="quotecontent">so many projects, so *much* time... so much Netflix &gt;_&lt;</div><br />Just ask yourself which you'd like to have done in a year: watch Netflix a lot yet still only watched a tiny fraction of what's available, or completed several projects.</div><br />To be fair, I tend to work on my projects *while* watching Netflix.  And really, Netflix isn't so much the problem as my ADD is, I have so many half-completed projects that I just got distracted by a new idea and set aside...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ramsis</b> [ Sat May 11, 2013 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Writing to SRAM on retail carts</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">A different way is to store up to 8x12 bytes of program code in the DMA registers at 4300h-437Fh, and let the CPU execute that code, doing that should be absolutely stable and make it impossible to crash the CPU.</div><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Thanks, DMA registers work. I first put the program that flashes the screen for a while, then runs the serial bootloader out of WRAM, but WRAM was apparently getting corrupted when I inserted/removed cartridge. So I rewrote the serial bootloader to fit entirely into DMA registers and it seems uncrashable/uncorruptible. It was a tad tricky to break the code into 12-byte chunks (with branches to the next) and get the timing right. The bootloader checks for a 3-byte header and does a checksum on received data, so there's no way it can get tricked by insertions while it's reading the controller port for data. It barely fit.</div><br />Executing code that's sitting on DMA registers! <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> This is <em>insanely</em> cool. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Thinking of it (and reading nocash's docs again), I guess that implementing an &quot;SPC was played&quot; flag in the PowerPak firmware might be possible after all ... I'm definitely going to try! <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> <br /><br />Thanks a lot, nocash &amp; blargg! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>