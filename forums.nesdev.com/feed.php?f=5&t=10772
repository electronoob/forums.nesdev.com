<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=10772" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-12-11T08:28:35-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=10772</id>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2013-12-11T08:28:35-07:00</updated>
<published>2013-12-11T08:28:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122275#p122275</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122275#p122275"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122275#p122275"><![CDATA[
C99 is C, but C is not C99. I don't understand why you think it's odd to distinguish features that belong to C99. There are many C99 features not supported by very widely used and actively developed compilers. Not even GCC implements all of C99.<br /><br /><a href="https://en.wikipedia.org/wiki/C99#Implementations" class="postlink">https://en.wikipedia.org/wiki/C99#Implementations</a><br /><br />In the case of inline, it was a widely used compiler specific extension before C99.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Wed Dec 11, 2013 8:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-12-11T07:53:23-07:00</updated>
<published>2013-12-11T07:53:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122273#p122273</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122273#p122273"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122273#p122273"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />Inline is technically a C99 extension, but it's commonly supported by C compilers.<br /></div><br />C99 <em>is</em> C. C11 is C too. I'm not sure what you meant. Is it that features in a newly published C language standard tend to go unsupported for a long time in compilers that aren't the latest version or aren't among the most widely used?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Dec 11, 2013 7:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2013-12-11T07:21:13-07:00</updated>
<published>2013-12-11T07:21:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122271#p122271</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122271#p122271"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122271#p122271"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">char int2hex(int v)<br />{<br />    return &quot;0123456789ABCDEF&quot;&#91;v &amp; 0xF&#93;;<br />}</div><br /></div><br />This is amazing. Should be made in a macro, though, using a function for this sounds wasteful (since most recent C compiler are able to reduce multiple instance of string literals).</div><br /><br />I'd recommend using the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">inline</tt> keyword instead, since macros tend to defeat all kinds of compile time safety checks. A function this short has a high probabiltiy of getting automatically inlined by a compiler with optimizations on, anyway. (Inline is technically a C99 extension, but it's commonly supported by C compilers.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Wed Dec 11, 2013 7:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-12-11T03:00:25-07:00</updated>
<published>2013-12-11T03:00:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122261#p122261</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122261#p122261"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122261#p122261"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Well, but you still use assembly, don't you?<br /></div><br />To tell the truth not really, I haven't coded anything for the NES for more than 1 year, and that's the main place where assembly is useful.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">char int2hex(int v)<br />{<br />    return &quot;0123456789ABCDEF&quot;&#91;v &amp; 0xF&#93;;<br />}</div><br /></div><br />This is amazing. Should be made in a macro, though, using a function for this sounds wasteful (since most recent C compiler are able to reduce multiple instance of string literals).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you could detail some concrete situations in C that you think its semantics are screwed up with, I'm sure people can either confirm that it's screwed up, or show better ways.<br /></div><br />What I means is that the array / pointer confusion IS confusing. As I already said I've programmed in C for 5 years or so, I read a couple of books and website about the confusion, and I was STILL confused.<br /><br />This can be a strenght in some situations and weakness in others, I guess. If you deal with complex data types, it will soon make you become mad, although typedef helps a lot.<br />If in addition to this pointer/array stuff, you have to use qualifiers (such as const, static, volatile, etc...) you'll surely become mad. If you are declaring an array of pointers to array of strings, and you want that array to lie in ROM, what yould you write ?? (I take this example because that actually happened to me in practice, I just had different set of strings where each set is a different array, and I have pointers to all sets in another array)<br /><br />const char*** x;<br />const char **const x[];<br />const char*const *const*const x;<br />const char **x[len];<br />const char *const x[len1][len2];<br /><br />In the end thanks god gcc will issue warnings if you mess up.<br /><br />Well the reciepe I came with is to to :<br />1) describe it in english naturally what you want to do<br />2) Then each time you encounter &quot;pointer to array of&quot;, you remove the &quot;array of&quot; part, because a pointer to an array is simply a pointer<br />3) Write the declaration backwards in C<br /><br />So in this case I'm declaring an<br /><br />array of constant pointers to an array of constant strings.<br /><br />A string is a pointer to array of constant chars, so the full type is :<br /><br />an array of constant pointers to array of constant pointers to array of constant chars<br /><br />which becomes :<br />array of constant pointers to <s>array of</s> constant pointer to <s>array of</s> constant char<br /><br />So the answer is that it should be written :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const char *const *const x&#91;&#93;;<br /></div><br />Or at least I belive so. I would never be 100% sure it's correct though, because this stuff is just way too confusing to be intuitive. The only const that makes this array lay in ROM is the last one (the first one in the description of the data type), so if you forget the others it's not much an issue (you'll just get a compiler warning).<br /><br />With a typedef it'd be more intuitive :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef const char* string_t;<br />const string_t *const x&#91;&#93;;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Dec 11, 2013 3:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-12-10T19:08:24-07:00</updated>
<published>2013-12-10T19:08:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122254#p122254</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122254#p122254"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122254#p122254"><![CDATA[
I use assembly because I haven't had a chance to learn uc65 yet, and not a lot of effort has been put into optimization in compilers of mainstream languages that target 6502.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 10, 2013 7:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-12-10T18:49:33-07:00</updated>
<published>2013-12-10T18:49:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122253#p122253</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122253#p122253"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122253#p122253"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Yes, and higher level languages were invented for a reason.<br /></div><br />Well, but you still use assembly, don't you?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Dec 10, 2013 6:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2013-12-10T18:18:59-07:00</updated>
<published>2013-12-10T18:18:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122252#p122252</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122252#p122252"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122252#p122252"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Jarhmander wrote:</div><div class="quotecontent">Here's a<strong>n obfuscated</strong> function that convert the 4 LSBs of an int into its hex representation:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">char int2hex(int v)<br />{<br />    return (v &amp; 0xF) &#91;&quot;0123456789ABCDEF&quot;&#93;;<br />}<br /></div><br /></div><br />FTFY <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />Or the art of combining oddities of C into a useful obf*ckated function. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Tue Dec 10, 2013 6:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-12-10T17:52:52-07:00</updated>
<published>2013-12-10T17:52:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122250#p122250</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122250#p122250"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122250#p122250"><![CDATA[
<div class="quotetitle">Jarhmander wrote:</div><div class="quotecontent"><br />Here's a<strong>n obfuscated</strong> function that convert the 4 LSBs of an int into its hex representation:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">char int2hex(int v)<br />{<br />    return (v &amp; 0xF) &#91;&quot;0123456789ABCDEF&quot;&#93;;<br />}<br /></div><br /></div><br />FTFY <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Dec 10, 2013 5:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2013-12-10T16:41:13-07:00</updated>
<published>2013-12-10T16:41:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122246#p122246</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122246#p122246"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122246#p122246"><![CDATA[
On the topic of screwed up things, I have a slightly interesting thing to say about indexing. blargg said that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">A[i]</tt> is the same as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">*&#40;&#40;A&#41;+&#40;i&#41;&#41;</tt> which is fundamentally true; 'A' decays to a pointer, you add an offset (int) to it, yielding another pointer, and then you dereference. Note that addition is commutative: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">*&#40;i + A&#41;</tt> is the same as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">*&#40;A + i&#41;</tt>, and so is <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">i[A]</tt>.<br /><br />Yes, try this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int foo&#91;&#93; = {1, 2, 3, 4};<br /><br />printf(&quot;%d&quot;, 2&#91;foo&#93;);<br />std::cout &lt;&lt; 2&#91;foo&#93;; // C++<br /></div><br />it actually print &quot;3&quot;, whether you choose a conforming C or C++ compiler.<br /><br />Note also that a string literal evaluate to an array which decays into a pointer, so you can index a string literal.<br /><br />Here's a function that convert the 4 LSBs of an int into its hex representation:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">char int2hex(int v)<br />{<br />    return &quot;0123456789ABCDEF&quot;&#91;v &amp; 0xF&#93;;<br />}<br /></div><br /><br />But, except of making fun of your programmer friends (ex: what does <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">printf&#40;&quot;%d&quot;, 2[&quot;ABC&quot;]&#41;</tt> display?), all of the above have no purpose except obfuscating code. I sometime use the string indexing &quot;trick&quot; though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Tue Dec 10, 2013 4:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-12-10T16:05:28-07:00</updated>
<published>2013-12-10T16:05:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122245#p122245</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122245#p122245"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122245#p122245"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I wasn't able because I was placing the brackets at the wrong place, so it's my bad for saying you can't typedef arrays.<br /></div><br />I didn't notice you mention of typedefs. I generally use the typedef first to show that a pointer to an array is trivial to declare (unless you consider typedef cheating heh).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />In my opinion the concepters of the C language did 2 major errors :<br />1) Allow arguments of function to be arrays. They should either forbid it (like they do for return types), or make it pass arrays by value (with the mention VERY BAD IDEA added to it), but at least it would be consistent with the language scementics.<br /></div><br />Yes. I think the main reason was that they didn't want to do array copying, so they tried to make it kind of work for naive programmers. &quot;Oh hey, this function takes an array, I pass one here, I use it in the function, all's well.&quot; But then when machines became big and passing arrays by value might be useful, this silent translation to the function really taking a pointer is a hindrance and confuses new programmers. &quot;No, it does take an array, see. That's not a pointer.&quot;<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />2) Don't differenciate the &quot;pointer to int&quot; type and &quot;pointer to int array&quot; type. In the vast majority of cases pointers point to arrays. Adding to the fact that pointer and array notation is interchangeable to a certain extent, and that they also did error 1, it really creates a confusing mess.<br /></div><br />This is one of C's central strengths IMO. It gives you unhindered pointers, and makes arrays work as merely a pointer to the first element. This way a pointer to an array element isn't burdened with bounds garbage or other hindrances, and you get the same indexing features on an array or a pointer to some subset, or a pointer to some raw memory the OS hands you. Where you want it, you can have a true pointer to the array (the only realy purpose is type checking).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The more I do computer science the more I feel like assembly is at the same time the absolute worst language when it comes for maintainability and productivity, but the only one who isn't completely f**** up in its scementics.<br /></div><br />If you could detail some concrete situations in C that you think its semantics are screwed up with, I'm sure people can either confirm that it's screwed up, or show better ways. For example, using typedef for a pointer to an array to avoid the slightly contrived declaration syntax.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Dec 10, 2013 4:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2013-12-10T15:24:03-07:00</updated>
<published>2013-12-10T15:24:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122240#p122240</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122240#p122240"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122240#p122240"><![CDATA[
I forgot about this technique:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int doop( unsigned char (&amp;a)&#91;57&#93; )<br />{<br />    return sizeof(a); // it's 57<br />}</div><br /><br />This is a way to use an array type as a function parameter in C++. It's a bit ugly and kinda non-obvious, but it gets you back your array-size type safety if you need it. Note this is a reference to an array, so you are working with the original array, not a copy.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Tue Dec 10, 2013 3:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-12-10T15:18:20-07:00</updated>
<published>2013-12-10T15:18:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122237#p122237</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122237#p122237"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122237#p122237"><![CDATA[
Yes, and higher level languages were invented for a reason.<br />Also you can choose how many bits your variables are by choosing the # of registers / memory slots you use.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Dec 10, 2013 3:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-12-10T15:13:24-07:00</updated>
<published>2013-12-10T15:13:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122236#p122236</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122236#p122236"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122236#p122236"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I didn't know about the typeless B language, that's a fun think to know (not that I would progamm using this though).<br /></div><br />Isn't assembly like that though? All you have is numbers, and it's up to you to construct other things with them.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Dec 10, 2013 3:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-12-10T14:31:11-07:00</updated>
<published>2013-12-10T14:31:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122233#p122233</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122233#p122233"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122233#p122233"><![CDATA[
I didn't know about the typeless B language, that's a fun think to know (not that I would progamm using this though).<br /><br />blargg, what you say is basically compatible with what I said, which is good news.<br />However you were able to typedef an array. I wasn't able because I was placing the brackets at the wrong place, so it's my bad for saying you can't typedef arrays.<br /><br />So I think most of the confusion is cleared up a bit. In my opinion the concepters of the C language did 2 major errors :<br />1) Allow arguments of function to be arrays. They should either forbid it (like they do for return types), or make it pass arrays by value (with the mention VERY BAD IDEA added to it), but at least it would be consistent with the language scementics.<br />2) Don't differenciate the &quot;pointer to int&quot; type and &quot;pointer to int array&quot; type. In the vast majority of cases pointers point to arrays. Adding to the fact that pointer and array notation is interchangeable to a certain extent, and that they also did error 1, it really creates a confusing mess.<br /><br />So in the end your pointer to an array has to be declared as a pointer, and your pointer to a bidirectional array has to be declared with this funky &quot;pointer to array&quot; type with parenthesis. How lame.<br /><br />The more I do computer science the more I feel like assembly is at the same time the absolute worst language when it comes for maintainability and productivity, but the only one who isn't completely f**** up in its scementics.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Dec 10, 2013 2:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-12-10T13:41:00-07:00</updated>
<published>2013-12-10T13:41:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122231#p122231</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122231#p122231"/>
<title type="html"><![CDATA[Re: C language array / pointer confusion]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10772&amp;p=122231#p122231"><![CDATA[
Perhaps the misunderstanding is one of exactly when decay happens and why.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 10, 2013 1:41 pm</p><hr />
]]></content>
</entry>
</feed>