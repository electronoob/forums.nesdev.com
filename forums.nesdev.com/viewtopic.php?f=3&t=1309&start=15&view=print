<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - C/C++ speed differences</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">C/C++ speed differences</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1309">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1309</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Sat Apr 01, 2006 11:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the detailed analysis, mozz.
<br />
<br />You mentioned the importance of a good optimizing compiler with more intricate C++ constructs. Is gcc (specifically, the newer versions of MinGW) considered good at optimizing code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Mon Apr 03, 2006 5:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Josh wrote:</div><div class="quotecontent">Thanks for the detailed analysis, mozz.<br /><br />You mentioned the importance of a good optimizing compiler with more intricate C++ constructs. Is gcc (specifically, the newer versions of MinGW) considered good at optimizing code?</div><br />Hmm, I don't know.  Its been a few years since I used C++ for anything real.  A recent gcc with mingw is what I would use though--I don't like Microsoft's C++ compiler very much and Intel's tries to be like Microsoft's.  And gcc is free which is very cool.<br /><br />I think gcc and g++ use the same back end, so the question is, if you use a certain C++ construct, will the front end and/or the optimizer parts, be able to turn it into something equivalent to what the C compiler would have produced on morally equivalent C code?  When you inline a method, that is as good as using a macro in C.  Most uses of templates are probably safe.  I'm not sure how well it handles things like partial specialization--you're making the compiler work at it a bit, but it probably comes up with good code.  RTTI and exceptions I would just avoid.<br /><br />Traditionally gcc is not the best at optimizing on x86 (where the Microsoft compiler might produce 10% faster code, and the Intel compiler might produce slightly faster--though larger--code than Microsoft's).  They've been improving the optimizer in gcc/g++ over the last few years, but optimizing well for x86 is challenging because x86 has so few general registers, and modern x86 CPUs are pretty complicated to compensate for this.  For non-x86 chips (especially popular ones like PPC and Sparc), I would guess that gcc is probably as good as anything else.<br /><br />If you are worried about a certain feature, keep in mind you can get the compiler to spit out an assembly listing and then look at it and see if there's any obvious suckitude in it.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />  This is easiest if you can isolate the thing you want to check into a tiny program by itself---then you can write an equivalent tiny program in C and compare the two listings and see if the C++ compiler did a comparatively bad job or not.<br /><br />In the end its not worth worrying about too much.  I would use C++, use gcc and just avoid doing anything excessively bad like using virtual methods for every bytecode dispatch or every emulated memory access.<br /><div class="quotetitle">babbling mozz wrote:</div><div class="quotecontent">Now, if you have a good optimizing C++ compiler, you can even use more advanced C++ features---such as templates and partial template specialization---without taking a performance hit. However, if your compiler is not so good at optimizing, then those features will start to cost you. </div>
<br />As far as this bit goes -- my wild-ass guess is that g++ does a good enough job at optimizing templates.  You can probably use them with impunity and not get penalized.  At least as good as any other C++ compiler I can think of---the Microsoft compiler was weak in that area a few years ago (it would choke on certain complex template things in the STL, for example).  Maybe they have improved it, but I don't know.  I haven't used Microsoft's compiler for a few years.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Mon Apr 03, 2006 9:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">I think gcc and g++ use the same back end, so the question is, if you use a certain C++ construct, will the front end and/or the optimizer parts, be able to turn it into something equivalent to what the C compiler would have produced on morally equivalent C code?  When you inline a method, that is as good as using a macro in C.</div><br />g++ and gcc are essentially identical. g++ just invokes gcc with some silent options. Everything you get with gcc you get with g++.<br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">Most uses of templates are probably safe.  I'm not sure how well it handles things like partial specialization--you're making the compiler work at it a bit, but it probably comes up with good code.</div><br />The concepts of partial specialization and template code that is deemed "difficult" for the compiler to digest are really ones that are a step or few abstracted from the mechanics of code optimization. The idea behind template metaprogramming and other similar techniques is to shift work from the run-time to the compile-time phase. Ten years ago when C was the staple, we would shift work from the run-time to the preprocessing phase. Ten years before that, we'd make a lookup table <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />, which was effectively shifting program A's runtime to some infrequently run program B.<br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">RTTI and exceptions I would just avoid.</div><br />Exceptions are difficult to work with, and not very well supported in C++. They are hard to use effectively in real-time systems, but are often very useful in data-processing tools; offline converters and such. They're hard to retrofit into systems; it's similar to taking a legacy codebase and attempting to make it const-correct. If it's done from the start, things fall into place, but once the architecture is laid, there's a cascade of irritating changes that need to be made throughout the entire system. Best to just rewrite it. (or stay away from exceptions altogether <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />The last handheld game project i worked on shipped with RTTI enabled. It wasn't used heavily, and what it was used for could have been done in other ways, but judicious use of it can be extremely helpful. It's one of those spooky handwavy features that people stay away from in general and its negatives get amplified in the absence of application; sort of like your first experience with source control tools automatically merging check-in conflicts.<br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">Traditionally gcc is not the best at optimizing on x86 (where the Microsoft compiler might produce 10% faster code, and the Intel compiler might produce slightly faster--though larger--code than Microsoft's).  They've been improving the optimizer in gcc/g++ over the last few years, but optimizing well for x86 is challenging because x86 has so few general registers, and modern x86 CPUs are pretty complicated to compensate for this.  For non-x86 chips (especially popular ones like PPC and Sparc), I would guess that gcc is probably as good as anything else.</div><br />gcc has been inferior in my tests (admittedly a few years ago) on x86 architectures; the last rev i worked with was 2.9x. I'm not sure how the new 3.x and 4.x codelines fare, but i would expect them to be somewhat better. The problem does seem to be the excruciatingly small register file on x86.<br />In my experience, gcc really shines on RISC architectures. Our first PSP title built on a relatively expensive commercial compiler. After we shipped, i spent a couple of days getting it building under the run-of-the-mill port of gcc 3.3 that comes along with the SDK. To my amazement, i got an instant 15-20% performance improvement-- just from a recompile. This project was pretty standard C++ with heavy use of the STL. gcc's code generation was *much* better than the other guys. My faith in gcc was restored, tenfold.<br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">If you are worried about a certain feature, keep in mind you can get the compiler to spit out an assembly listing and then look at it and see if there's any obvious suckitude in it.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />  This is easiest if you can isolate the thing you want to check into a tiny program by itself---then you can write an equivalent tiny program in C and compare the two listings and see if the C++ compiler did a comparatively bad job or not.</div><br />Of course, this gets harder as time goes on and current-gen architectures become less dependent on cpu instruction counts and more dependent on cache behavior, bus bandwith, and pipelining. Reading the asm can be misleading sometime.<br />Tangentially, does anyone know of any good, free cache profiling tools for Windows/x86, other than vtune? Sadly, valgrind is only available on linux.<br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">As far as this bit goes -- my wild-ass guess is that g++ does a good enough job at optimizing templates.  You can probably use them with impunity and not get penalized.  At least as good as any other C++ compiler I can think of---the Microsoft compiler was weak in that area a few years ago (it would choke on certain complex template things in the STL, for example).  Maybe they have improved it, but I don't know.  I haven't used Microsoft's compiler for a few years.</div>
<br />.NET 2003 seems much better than vc6. gcc's standards compliance is excellent at this point. Templates are a great tool for your C++ toolbox. As with any well-honed tool, improper use will result in disaster. You can easily bloat your codespace by using them without discipline, and you probably want to stay away from reading your ROM images in byte-by-byte and jamming them into a std::vector... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Apr 03, 2006 10:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm not sure how well it handles things like partial specialization--you're making the compiler work at it a bit, but it probably comes up with good code.</div><br /><br />Partial specialization is a compile-time thing; it would be pretty difficult for a compiler to implement it in a way that generated any run-time structures at all. Same for templates entirely (and one of the two reasons for templates existing, the other being type-safety).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As far as this bit goes -- my wild-ass guess is that g++ does a good enough job at optimizing templates. You can probably use them with impunity and not get penalized.</div>
<br />
<br />Don't muddle the language feature with the STL library (sorry if this seems critical of you, I just hear the "templates are slow, C++ is slow" kind of babble too often). There isn't any such thing as optimizing templates; the only optimization a compiler does is on code. A template is not code; it generates code, and by very strict rules. If a compiler's template machinery isn't broken, it will generate the same intermediate code as any other non-broken compiler's template machinery. The STL, on the other hand, is a library of templates for algorithms and data structures. The interface of the STL is standardized, but the implementation is up to the compiler, and each compiler's is usually different. I've used a lot of bad STL implementations over the years, but this has nothing to do with the language feature of templates, so on these compilers I've always been able to write my own class and function templates without any overhead as compared to hand-crafted code. Language features in general have no unnecessary costs, even on bad compilers, while the standard library implementation on a bad compiler can be horrendously inefficient and bloated.
<br />
<br />The "embedded C++" people couldn't make this distinction (and on other fronts too) and needlessly eliminated features that can be used to make to smaller, faster programs, due to the ability to implement better designs for the same cost. In general, every language feature is an automated form of some equivalent hand-crafted code, and like any automaton, can make a mess if you send it off making a bunch of unnecessary things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Tue Apr 04, 2006 6:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The issue with templates is that excessive use of them can hide huge amounts of complexity that effectively hamstring the optimizer. They also tend to increase compile times -- there's a library here that doubles the compile time of any project it's included in, and drags the runtime speed without optimization down to about 3 fps. It's been known to devour babies.
<br />
<br />That said, templates are a really wonderful tool, for the reasons you mentioned.
<br />
<br />baisoku: you are not *quite* correct, gcc and g++ are merely compiler drivers, choosing which of cc1 and cc1plus to run. cc1plus is, of course, the C++ compiler, and has a completely different frontend. The machine specific backend is identical between the two, but language semantics differ enough now that there are some subtle differences in the code generation for nominally identical chunks of code.
<br />
<br />What ends up confounding compilers is usually excessively inlined functions (a prime source of debug pain, since inlining is usually disabled without -O1 at the very least) and excessive reliance on dead code elimination and constant propogation. The language semantics will get in your way at times as well if you're trying to pass extended types around (such as vectors)
<br />
<br />Exceptions are the spawn of satan, but when you *need* them, implementing them any other way is even worse.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>laughy</b> [ Tue Apr 18, 2006 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Although speed is important, the presence of clean, manageable code is worth a lot of points in my book. My emulator is pretty object oriented, and new features, bug fixes, etc. are a snap. It is still <em>very</em> fast. Frankly I think nes emulators should tend towards improving the emulation experience (graphic filtering, features, GUI, etc.) for the user, since a decent computer will run any nes emulator out there anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Apr 18, 2006 7:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">laughy wrote:</div><div class="quotecontent">since a decent computer will run any nes emulator out there anyway.</div>
<br />"Decent computers" are too large to fit in one's pocket. Emulation speed freaks can still target handheld platforms such as Nintendo DS, PSP, Windows Mobile, J2ME phones, and the like.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Wed Apr 19, 2006 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">Exceptions are the spawn of satan, but when you *need* them, implementing them any other way is even worse.</div>
<br />Damn right.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>