<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Formatting 16-bit number as decimal?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Formatting 16-bit number as decimal?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6262">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6262</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Apr 04, 2010 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Formatting 16-bit number as decimal?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So far, the easiest algorithm I can think of is to subtract 10000 repeatedly, then subtract 1000 repeatedly, then 100, then 10, etc.  But what's the best way?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Apr 04, 2010 9:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had a program for the 6809 that did that, but it didn't do 10000 and it was not 6502 so sorry man <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />
<br />
<br />
<br />I am curios to this, too, though XD

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Apr 04, 2010 9:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Depends on your definition of "best". I've found your approach the simplest as well. Just set up a table of the 16-bit values and loop through.
<br />
<br />Here's the version written for clarity and simplicity (that means little attempt at optimization, as that wasn't a stated goal):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">binary:&nbsp; .res 2 ; 16-bit unsigned input value<br />decimal: .res 5 ; output decimal digits, one per byte, natural order<br /><br />; Converts 16-bit binary to 5-digit decimal.<br />bin_to_dec:<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #0<br />@digit:<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy #0<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; Just compare first time through loop<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp @compare<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />@increment:<br />&nbsp; &nbsp; &nbsp; &nbsp; iny<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ; Subtract weight from binary<br />&nbsp; &nbsp; &nbsp; &nbsp; sec<br />&nbsp; &nbsp; &nbsp; &nbsp; lda binary<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc lsb,x<br />&nbsp; &nbsp; &nbsp; &nbsp; sta binary<br />&nbsp; &nbsp; &nbsp; &nbsp; lda binary+1<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc msb,x<br />&nbsp; &nbsp; &nbsp; &nbsp; sta binary+1<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />@compare:<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Compare binary to digit weight<br />&nbsp; &nbsp; &nbsp; &nbsp; sec<br />&nbsp; &nbsp; &nbsp; &nbsp; lda binary<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc lsb,x<br />&nbsp; &nbsp; &nbsp; &nbsp; lda binary+1<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc msb,x<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; Increment digit if binary &gt;= weight<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs @increment<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; sty decimal,x<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #5<br />&nbsp; &nbsp; &nbsp; &nbsp; bne @digit<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />lsb:&nbsp; &nbsp; .byte &lt;10000,&lt;1000,&lt;100,&lt;10,&lt;1<br />msb:&nbsp; &nbsp; .byte &gt;10000,&gt;1000,&gt;100,&gt;10,&gt;1</div><br /><br />Here's a variation that's a little more compact and faster, as it merges the compare and subtract; it's still not meant for speed, since there are far faster algorithms:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bin_to_dec:<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #0<br />@digit: <br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta decimal,x<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; jmp @subtract<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />@increment:<br />&nbsp; &nbsp; &nbsp; &nbsp; inc decimal,x<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; Commit new value<br />&nbsp; &nbsp; &nbsp; &nbsp; sta binary+1<br />&nbsp; &nbsp; &nbsp; &nbsp; sty binary<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />@subtract:<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Subtract digit weight from binary, but don't commit<br />&nbsp; &nbsp; &nbsp; &nbsp; sec<br />&nbsp; &nbsp; &nbsp; &nbsp; lda binary<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc lsb,x<br />&nbsp; &nbsp; &nbsp; &nbsp; tay<br />&nbsp; &nbsp; &nbsp; &nbsp; lda binary+1<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc msb,x<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; Loop if subtraction didn't wrap binary around<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs @increment<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #5<br />&nbsp; &nbsp; &nbsp; &nbsp; bne @digit<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />lsb:&nbsp; &nbsp; .byte &lt;10000,&lt;1000,&lt;100,&lt;10,&lt;1<br />msb:&nbsp; &nbsp; .byte &gt;10000,&gt;1000,&gt;100,&gt;10,&gt;1</div>
<br />
<br />Both routines have been decently tested with edge-case values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 05, 2010 4:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's a bit faster to subtract off 40000, 20000, 10000, 8000, 4000, 2000, 1000, 800, 400, 200, 100, 80, 40, 20, 10 to form each bit. It ends up looking a lot like a division routine. On the wiki, see Programming guide &gt; Programming Libraries &gt; <a href="http://wiki.nesdev.com/w/index.php/16-bit_BCD" class="postlink">Binary to decimal</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Apr 05, 2010 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, well, if it's Binary to Decimal you're looking for:
<br />
<br /><!-- m --><a class="postlink" href="http://the_bott.webs.com/BinToDec.asm">http://the_bott.webs.com/BinToDec.asm</a><!-- m -->
<br />
<br />This method I came up with takes about 263 cycles to convert a 16-bit binary number to decimal format, putting each decimal digit in a separate byte. I've got separate methods for 8 bits, 16 bits, and 24 bits. The 24 bit conversion only takes around 460 cycles or something like that.
<br />
<br />Another good thing about this method is it takes the exact same amount of time every time, since there is no looping. So there's no "Well this could take 42 cycles or 10,000" type of thing.
<br />
<br />Oh, and I was thinking maybe this method should also be posted on the wiki? It takes up a bit more space but I haven't seen a faster method (aside from pre-converting all possible values and putting them in a table, but I'm talking about a realistic/practical approach).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 05, 2010 8:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The method I use in Concentration Room takes about 84 cycles for an 8-bit number, and it doesn't use huge lookup tables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Apr 05, 2010 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, well that's really good then. Mine takes 118, which I still think is good, but it's not as good as 84 obviously. And the fact that it takes more space makes your method preferable in that case. But actually, the 8-bit bin-to-dec routine doesn't use very large look-up tables. It uses the same tables that the other 16 and 24 bit routines use, but only a fraction of them.  Once you get into the 16 and 24 bit tables though, those are what take up a lot of space.
<br />
<br />Thanks for putting it up! It's just good to have multiple methods up, just so people can choose one to fit the need for speed or space.
<br />
<br />Also, not to be nitpicky, but I notice the link says "HexToDecimal.8". That's the name of the 8-bit routine, and the names of the other routines are HexToDecimal.16, and HexToDecimal.24. So the link text is just a little misleading, it should say something like "Celius' HexToDecimal routines" or something. It's not that important though. Thanks again!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Apr 05, 2010 11:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Celius, it's interesting how yours are branchless in order to be constant-time.
<br />
<br />If you want fastest, <a href="http://nesdev.com/bbs/viewtopic.php?t=2099" class="postlink">we beat that to death a few years ago</a>, with one that at worst does 8-bit in 56 clocks, 16-bit in 208 clocks, and 24-bit in 430 clocks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Apr 06, 2010 9:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, those are some pretty impressive numbers! Well, okay, I officially surrender; mine is not the fastest!
<br />
<br />But hey, my numbers are relatively close (okay, for the 8-bit not really, for 16-bit sort of, and for 24-bit yes). I like my method anyways, and I guess it could be improved by adding some branches for certain ranges of values, like if the hex value is less than $8000, I only need to process 3 of the hex digits and not 4. This could save a fair bit of time (though it would add cycles if all code was executed with no branches). Having a constant time isn't really necessary for BinToDec routines, usually because people perform them during game logic and not somewhere with time-sensitive code. But I understand how my method works, and I often have trouble following other methods. That's mainly why I'll continue using mine, simply because using code you don't understand is never a good idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Apr 06, 2010 10:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"> That's mainly why I'll continue using mine, simply because using code you don't understand is never a good idea.</div>I disagree; as long as you understand how to <em>use</em> a piece of code, you don't need to understand how it works. Otherwise you may suffer from a <a href="http://en.wikipedia.org/wiki/Not_Invented_Here" class="postlink">"not invented here"</a> syndrome.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Apr 06, 2010 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />+1 @ blargg
<br />
<br />Nothing at all wrong with using a black box as long as you use it properly.
<br />
<br />I think the problem here is that the code provided was more of an example and not really a usable block of code and/or it's being used improperly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Apr 06, 2010 11:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm fine with people using black boxes as long as they understand how to properly interface with them, but personally, I don't use them. At least not in assembly, where it's harder to modularize code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Apr 06, 2010 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I don't use [black boxes]. At least not in assembly, where it's harder to modularize code.</div>
<br />Sound code appears to have become fairly modularized. As I understand it, an NES sound engine presents four methods (start_sound_effect, start_song, update_sound, and stop_song), two of which are now defined by the NSF spec.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Apr 06, 2010 12:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess when I think about it I use black boxes all the time in stuff like Visual Basic or languages that come with predefined classes and whatnot. In those instances, it's good to not have to re-invent the text box or multiplication routines. I guess it's okay, but there's something that bugs me about saying you don't ever need to understand how code works, you just need to understand how to use it. I'd think encouraging understanding of code makes people better programmers, and encouraging people to just drag and drop routines made by other people together without understanding how they work doesn't allow that to happen. I'm sure that's beside the point though. But with something like the NES, these predefined routines can't just pull local variables out of the mysterious void that is RAM; you have to specify what RAM the routines are going to use, and therefore, you should understand how the code works at least to a small degree.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Apr 06, 2010 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To be honest, I use a few pieces of codes I don't understand, the first that comes to mind is the code computing a square root, that I found on 6502.org, I don't understand it at all but it works fine for me (I use it to compute the distance between an enemy and the player on the screen).
<br />
<br />I also use a RNG code and sorting algorithm made by other people, I think I understand them at least partially.
<br />
<br />The only binary -&gt; BCD conversion method I understand is the substract 10^x method so the day I need it I will probably do that method even if it's slower. The day you need to convert dozen of numbers each frame you'll have to worry about the speed of the routine, but even in an RPG this isn't going to be the case.
<br />
<br />If you want to be real fast tough, you can use the method they did in Rad Racer : One LUT for each numbers which ends up in a total ~30 cycles for a 8-bit number, at the cost of crazy ROM space.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>