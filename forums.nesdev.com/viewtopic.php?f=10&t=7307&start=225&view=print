<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hello World</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hello World</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7307">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7307</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>16</strong> of <strong>18</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 03, 2011 5:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In SEGMENTS, use type=bss instead of type=rw for any RAM segment. For segments of type bss, the linker won't try to (uselessly) put initial values for the segment into the ROM file.</div><br />Why is it useless though? Isn't data stored there? I don't see why it should be any different from the CODE segment.</div><br />Data is stored in RAM, but the only reason you'd ever want to also store it in ROM is if you plan to copy it to RAM at the start of the program, such as a small piece of code related to bank switching. Here are the traditional definitions of the segments: <ul><li>CODE: stored in ROM, used in ROM </li><li>RODATA: stored in ROM, used in ROM. Primary difference from CODE is that some architectures such as 65816 and 8086 allow for a separate program bank and data bank. </li><li>DATA: stored in ROM, copied to RAM in init code (which isn't written automatically for you), used in RAM </li><li>BSS: stored nowhere, cleared to zero* in init code, used in RAM </li><li>ZEROPAGE: like BSS but in $0000-$00FF </li></ul><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">However, running the debugger, it seems to be alternating between $0002 and $FFFF. I don't know why.</div><br />What values end up in $FFFA through $FFFF? There should be three addresses (in the typical reverse byte order of the 6502); do they point anywhere familiar?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Edit: I forgot to change the number of PRG banks in the header back to 1. Doing that, it runs code that I wrote. I think I made an error in the code though, because it isn't doing the addition that I wanted it to do.<br /><br />Edit Edit: It seems to be interrupting every so often, and then returning to the wrong address. Ideas as to why?</div>
<br />Where do $FFFA-$FFFB and $FFFE-$FFFF point? Are you pushing or pulling anything in your NMI and IRQ handlers?
<br />
<br />
<br /><span style="font-size: 84%; line-height: normal">* Yes, tokumaru, ca65 was originally intended to support a C compiler, and the C language does specify clearing uninitialized variables in the init code. In pure assembly language programs, one can use an alternate convention that each is responsible for clearing its own memory.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sat Dec 03, 2011 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Where do $FFFA-$FFFB and $FFFE-$FFFF point? Are you pushing or pulling anything in your NMI and IRQ handlers? </div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What values end up in $FFFA through $FFFF? There should be three addresses (in the typical reverse byte order of the 6502); do they point anywhere familiar?</div>
<br />The vectors point to an RTI, init code, and RTI, respectively. No, they only point to an NMI. At those locations are indeed the routines.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;VECTORS&quot;<br />;-------------------------------------------------------------------------------<br /><br />.addr nmi, reset, irq<br />;-------------------------------------------------------------------------------<br /><br />.code<br />;-------------------------------------------------------------------------------<br /><br />.proc nmi<br />&nbsp; &nbsp;rti<br />.endproc<br />;-------------------------------------------------------------------------------<br /><br />; Inits everything.<br />.proc reset<br />&nbsp; &nbsp;; Clears the flags.<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;cli<br />&nbsp; &nbsp;clv<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;; Sets the stack pointer.<br />&nbsp; &nbsp;ldx #$FF<br />&nbsp; &nbsp;txs<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jmp main<br />.endproc<br />;-------------------------------------------------------------------------------<br /><br />.proc irq<br />&nbsp; &nbsp;rti<br />.endproc<br />;-------------------------------------------------------------------------------<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 03, 2011 2:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Having IRQ pointing at an RTI will generally work. But in the NMI handler, you'll usually want to set a variable to notify the main program that a vertical blank has begun. So that I don't have to push and pull A, I just have it do <strong>inc nmis</strong>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Dec 03, 2011 7:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Having IRQ pointing at an RTI will generally work.</div>
<br />Depends on the definition of "work". If the IRQ doesn't get acknowledged automatically somehow (most of them don't), it'll result in an infinite loop. In a debug build the best way to handle the IRQ might be to display a fatal error message. However, if an unexpected IRQ happens in an program, you've got worse problems on your hands...
<br />
<br />All I'm saying is people should understand that the RTI in the IRQ routine doesn't really accomplish that much more than having the IRQ vector point to $0000 (for example).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sat Dec 03, 2011 7:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Having IRQ pointing at an RTI will generally work. But in the NMI handler, you'll usually want to set a variable to notify the main program that a vertical blank has begun. So that I don't have to push and pull A, I just have it do inc nmis.</div>
<br />What and where is "nmis"? Does it simply count how many NMIs there's been? Is that all that needs fixed?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Dec 03, 2011 8:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">What and where is "nmis"?</div><br />It's a variable anywhere in RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does it simply count how many NMIs there's been?</div><br />Yes. If you keep NMIs always enabled, you can wait for the next VBlank with code like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda nmis<br />WaitVBlank:<br />&nbsp; &nbsp;cmp nmis<br />&nbsp; &nbsp;beq WaitVBlank</div><br />The loop basically waits for the variable to change. This works well in most cases, it's only bad if you have raster effects near the top of the screen (like status bars) and you can't guarantee that frame calculations will never spill into the next frame.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is that all that needs fixed?</div>
<br />Can't tell without seeing what else your program does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sat Dec 03, 2011 8:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The loop basically waits for the variable to change. This works well in most cases, it's only bad if you have raster effects near the top of the screen (like status bars) and you can't guarantee that frame calculations will never spill into the next frame. </div>
<br />But where should this loop be located? in the reset code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Dec 03, 2011 9:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">But where should this loop be located?</div><br />Wherever a wait for VBlank is necessary. The typical structure of a game loop is: 1. update the game world using controller input and A.I.; 2. wait for VBlank; 3. update VRAM using data computed last frame; 4. update the audio; 5. go back to 1;<br /><br />The wait for VBlank not only makes sure that the VRAM updates will take place during VBlank, but it also syncs the game frames to the refresh rate of the console, effectively making the game run at a steady pace.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">in the reset code?</div>
<br />No, this has nothing to do with the reset.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Dec 04, 2011 1:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Wherever a wait for VBlank is necessary. The typical structure of a game loop is: 1. update the game world using controller input and A.I.; 2. wait for VBlank; 3. update VRAM using data computed last frame; 4. update the audio; 5. go back to 1;</div><br />How do I know when "wherever" is (for the vblank)?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The wait for VBlank not only makes sure that the VRAM updates will take place during VBlank, but it also syncs the game frames to the refresh rate of the console, effectively making the game run at a steady pace.</div><br />So, this is my next step: Trying to display something on screen, preferably the numbers that I've successfully calculated.<br /><br />I set the disable interrupt flag for the moment so I could test my math routines. They work! I successfully computed "14 9 7 + -". So, I want to ask, what kind of structuring do people usually use for procedures and macros? The couple routines I made so far are stack-based on the zero page. Is that feasible for a full program? What do NES games usually do? Does it depend whether it's a slow-paced RPG or a quick-paced action/adventure game?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">CODE: stored in ROM, used in ROM<br />RODATA: stored in ROM, used in ROM. Primary difference from CODE is that some architectures such as 65816 and 8086 allow for a separate program bank and data bank.<br />DATA: stored in ROM, copied to RAM in init code (which isn't written automatically for you), used in RAM<br />BSS: stored nowhere, cleared to zero* in init code, used in RAM<br />ZEROPAGE: like BSS but in $0000-$00FF</div>
<br />I see now that my understanding of the bss segment was wrong, though it makes sense now; It's simpler to simply remember how many null bytes to reserve in RAM instead of actually storing all of them in ROM.
<br />
<br />Also, the zeropage can't have initial values? It's limited like the bss segment?
<br />
<br />* * *
<br />
<br />A couple of other thoughts:
<br />
<br />1) FCEUX's debugger does something it shouldn't. When scrolling up, it scrolls up by byte, instead of instruction. Bytes that are part of multi-byte instructions are misrepresented as their own instructions until one scrolls up far enough so the program realizes that it's part of another instruction.
<br />
<br />2) How/where are palettes stored? They're not stored in .chr files, are they? Is there an editor for them (palettes)?
<br />
<br />3) I had something else that I was going to say, but I can't remember now. =/
<br />
<br />* * *
<br />
<br />One last thing: I want to thank everybody who's been so patient and helpful in answering my questions. You've been indispensable so far.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Dec 04, 2011 6:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Wherever a wait for VBlank is necessary. The typical structure of a game loop is: 1. update the game world using controller input and A.I.; 2. wait for VBlank; 3. update VRAM using data computed last frame; 4. update the audio; 5. go back to 1;</div><br />How do I know when "wherever" is (for the vblank)?</div><br />After the reset code finishes and the background is copied into the nametables, you start the game loop.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, the zeropage can't have initial values? It's limited like the bss segment?</div><br />Correct. If you want initial values there you'll have to copy them yourself.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1) FCEUX's debugger does something it shouldn't. When scrolling up, it scrolls up by byte, instead of instruction. Bytes that are part of multi-byte instructions are misrepresented as their own instructions until one scrolls up far enough so the program realizes that it's part of another instruction.</div><br />How would you predict how many bytes to scroll up? 6502 bytecode makes no self-synchronizing guarantee, unlike code in popular RISC architectures such as MIPS and ARM where every instruction is 16 or 32 bits long.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) How/where are palettes stored? They're not stored in .chr files, are they? Is there an editor for them (palettes)?</div>
<br />A palette is just a list of 32 bytes, ordinarily stored in PRG ROM and copied to $3F00 during vertical blanking. Some NES-specific tile editors have NES-specific palette editors, but some other tile editors have palette editors more suitable for an RGB system (PC, SNES, GBA) than for a hue-lightness system like that of the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Dec 04, 2011 8:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">How do I know when "wherever" is (for the vblank)?</div><br />There are many things you can't (or shouldn't) do outside of VBlank, such as turning rendering on and off, writing to VRAM, setting the scroll, and so on. Before doing those things, you should wait for VBlank. In the game loop, you typically wait for VBlank once and then perform all the tasks you couldn't before.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So, I want to ask, what kind of structuring do people usually use for procedures and macros? The couple routines I made so far are stack-based on the zero page. Is that feasible for a full program? What do NES games usually do? Does it depend whether it's a slow-paced RPG or a quick-paced action/adventure game?</div><br />I think you'll have to find your own style. Everyone's coding style is different, and although we could all tell you how we do things so that you can pick the way you prefer, I believe this would confuse you more than it would help! =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When scrolling up, it scrolls up by byte, instead of instruction.</div><br />It has no way to know the exact instructions you used in the source code, since it can only see the resulting binary, which can be interpreted in many ways. Scrolling by byte allows you to align the disassembly correctly, which is better than if it tried to guess the instructions and guessed wrong. For example, the command LDA $03A9 assembles to $AD $A9 $03, and LDA #$03 assembles to $A9 $03. When scrolling up, should FCEUX scroll 2 bytes (and see LDA #$03) or 3 bytes (and see LDA $03A9)? It doesn't know, both are valid instructions.<br /><br />You could ague that it could search for the longest instruction in order to avoid interpreting operands as opcodes, but even then there will be problems. Say that I have a table whose last byte is $AD, followed by the LDA #$03 instruction. The disassembler will think it's a LDA $03A9 instruction, which is not the case.<br /><br />So trust me, it's better that it scrolls 1 byte at a time. Is it annoying that we see a bunch of garbage instructions before we see what we actually coded? Yes, but it would be far more annoying if the disassembler guessed wrong and we couldn't see what we actually coded at all.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How/where are palettes stored? They're not stored in .chr files, are they? Is there an editor for them (palettes)?</div>
<br />Depends on the programmer. Simple programs usually just have a list of 32 bytes representing all the colors, but more complex games might have smaller palettes that can be arranged differently.
<br />
<br />Again, this is dependent on the coding style. The only important thing is that the colors are written to PPU address $3F00 during VBlank. Where the colors come from is completely dependent on game's architecture.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Dec 04, 2011 9:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">FinalBurn wrote:</div><div class="quotecontent">When scrolling up, it scrolls up by byte, instead of instruction.</div><br />It has no way to know the exact instructions you used in the source code, since it can only see the resulting binary</div>
<br />Can't a debugging emulator see the starting addresses of previously executed instructions (from the Code/Data Logger) and use those as alignment anchors?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Dec 04, 2011 10:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm pretty sure that there are workarounds (by "workarounds" I mean imperfect solutions that will still break under certain conditions), but is it really worth the trouble?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Dec 04, 2011 8:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">After the reset code finishes and the background is copied into the nametables, you start the game loop.</div><br />Okay. Also, a question: So, if I permanently disable interrupts by setting the flag, I won't be able to update the screen, right?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How would you predict how many bytes to scroll up? 6502 bytecode makes no self-synchronizing guarantee, unlike code in popular RISC architectures such as MIPS and ARM where every instruction is 16 or 32 bits long.</div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It has no way to know the exact instructions you used in the source code, since it can only see the resulting binary, which can be interpreted in many ways. Scrolling by byte allows you to align the disassembly correctly, which is better than if it tried to guess the instructions and guessed wrong. For example, the command LDA $03A9 assembles to $AD $A9 $03, and LDA #$03 assembles to $A9 $03. When scrolling up, should FCEUX scroll 2 bytes (and see LDA #$03) or 3 bytes (and see LDA $03A9)? It doesn't know, both are valid instructions. <br /><br />You could ague that it could search for the longest instruction in order to avoid interpreting operands as opcodes, but even then there will be problems. Say that I have a table whose last byte is $AD, followed by the LDA #$03 instruction. The disassembler will think it's a LDA $03A9 instruction, which is not the case. <br /><br />So trust me, it's better that it scrolls 1 byte at a time. Is it annoying that we see a bunch of garbage instructions before we see what we actually coded? Yes, but it would be far more annoying if the disassembler guessed wrong and we couldn't see what we actually coded at all. </div><br />Ack, I suppose that you're right. There's no way for the program to know whether something is code or data.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think you'll have to find your own style. Everyone's coding style is different, and although we could all tell you how we do things so that you can pick the way you prefer, I believe this would confuse you more than it would help! =)</div><br />I'm not sure that a description of the structure would confuse me. I'm quite a bit more experienced than some kiddie programmer.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A palette is just a list of 32 bytes, ordinarily stored in PRG ROM and copied to $3F00 during vertical blanking. Some NES-specific tile editors have NES-specific palette editors, but some other tile editors have palette editors more suitable for an RGB system (PC, SNES, GBA) than for a hue-lightness system like that of the NES.</div>
<br />What tile editor do you recommend? Are they any good NES-specific ones? I've used TileMolester and yychr, but each lacks capabilities that the other has, so neither is The One Tile Editor to Rule Them All.
<br />
<br />I really don't want to write my own, yet the limited choices and capabilities is annoying...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Dec 04, 2011 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">After the reset code finishes and the background is copied into the nametables, you start the game loop.</div><br />Okay. Also, a question: So, if I permanently disable interrupts by setting the flag, I won't be able to update the screen, right?</div><br />Not exactly. The vertical blank interrupt is an NMI, and NMI comes through whether the interrupt priority level is 0 or 1. SEI blocks only IRQ. You have to block NMI at the source, and bit 7 of PPUCTRL ($2000) controls the source. As long as bit 7 of PPUCTRL is turned on (LDA #$80 STA PPUCTRL), the following will work:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; $FFFA points here<br />.proc nmi<br />&nbsp; inc nmis<br />&nbsp; rti<br />.endproc<br /><br />; your game loop calls this just before shoving stuff into VRAM<br />.proc wait4vbl<br />&nbsp; lda nmis<br />loop:<br />&nbsp; cmp nmis<br />&nbsp; beq loop<br />&nbsp; rts<br />.endproc<br /></div><br />This .proc might confuse you. But it's just a way to hide the labels defined inside the .proc from view outside the .proc, so that multiple subroutines can share the same names for internal labels. For example, the symbol inside wait4vbl ends up called wait4vbl::loop, and other subroutines won't be defining symbols that start with "wait4vbl::".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm quite a bit more experienced than some kiddie programmer.</div><br />In what other language or for what other platform have you made a video game? Perhaps I could help explain things with analogies to that platform.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What tile editor do you recommend? Are they any good NES-specific ones? I've used TileMolester and yychr, but each lacks capabilities that the other has, so neither is The One Tile Editor to Rule Them All.</div>
<br />I just use GIMP to make my tile sheets and then run a Python program to convert .png to .chr.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>16</strong> of <strong>18</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>