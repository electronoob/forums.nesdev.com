<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Infinite Loop question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Infinite Loop question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7919">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7919</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Tue Jun 28, 2011 10:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Infinite Loop question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey there <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> 
<br />I'm (very) new to programming for the 6502, but I do have a little experience in programming.  I've been following the Nerdy Nights tutorials and I'm pretty far into it, but in every example file in the tutorial, there's a section that looks like:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Forever:<br />&nbsp; JMP Forever</div>
<br />Now, I know this is just an infinite loop, but the tutorial never explains what it's there for.  What would you ever need an infinite loop for?  Wouldn't it just crash the game?
<br />And does the code under labels get executed every frame, or only when it jumps to that label?
<br />Another question, why are the sprites/backgrounds defined at the very bottom of the code, but then used before that?  Wouldn't you need to load the graphics before you can use them, or does the order of the code not matter in assembly?
<br />
<br />Sorry for all the questions, but assembly seems to be a lot different (to me at least) from other programming languages and it has me all confused <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> 
<br />Any help is appreciated, and expect more questions <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue Jun 28, 2011 11:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It could be the "end" of the program, if there is nothing left to do.  More likely, it's using the NMI to run more code once per frame.  In some games like Super Mario Bros, an infinite JMP loop actually is the main loop - it's interrupt-driven.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Wed Jun 29, 2011 12:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Infinite Loop question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Canite wrote:</div><div class="quotecontent">Hey there <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br />I'm (very) new to programming for the 6502, but I do have a little experience in programming.  I've been following the Nerdy Nights tutorials and I'm pretty far into it, but in every example file in the tutorial, there's a section that looks like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Forever:<br />&nbsp; JMP Forever</div><br />Now, I know this is just an infinite loop, but the tutorial never explains what it's there for.  What would you ever need an infinite loop for?  </div>
<br />
<br />I can't venture a guess about Nerdy Nights except to say I frequently
<br />do that as a place holder for a break in Kowalski's emulator.
<br />
<br />Can't remember now why I thought it was a good idea <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 29, 2011 4:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Infinite Loop question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Canite wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">Forever:<br />&nbsp; JMP Forever</div><br />Now, I know this is just an infinite loop, but the tutorial never explains what it's there for.  What would you ever need an infinite loop for?  Wouldn't it just crash the game?</div><br />In a tech demo that just makes a still image, you <em>want</em> it to crash so that you can see the result clearly.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And does the code under labels get executed every frame, or only when it jumps to that label?</div><br />Code gets executed only when it gets jumped to. But the NMI handler gets jumped to every frame once you turn on NMI generation in the PPU.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Another question, why are the sprites/backgrounds defined at the very bottom of the code, but then used before that?  Wouldn't you need to load the graphics before you can use them, or does the order of the code not matter in assembly?</div>
<br />In assembly language, a part that appears "earlier" in the program can read data and call subroutines/functions/methods that appear "later" in the program or vice versa.
<br />
<br />But NES games have two different chips: one for the program (PRG) and one for graphics tiles (CHR). Some games use a separate CHR ROM; others use CHR RAM and copy the tiles from PRG ROM to CHR RAM at runtime. <a href="http://wiki.nesdev.com/w/index.php/CHR-ROM_vs_CHR-RAM" class="postlink">Each method has its benefits</a>. The iNES file format specifies that in games using CHR ROM, all PRG ROM data comes before CHR ROM data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jun 29, 2011 10:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Canite wrote:</div><div class="quotecontent">Now, I know this is just an infinite loop, but the tutorial never explains what it's there for.  What would you ever need an infinite loop for?  Wouldn't it just crash the game?</div><br />In the Nerdy Nights tutorials, except for the initial setup, the whole program runs in the NMI handler. This means that even though the main program is stuck in that infinite loop, the NMI handler is still executed every frame. As long as the whole logic is in the NMI (which is the case with these tutorials), the program will work. This is not recommended for actual games, even though some famous NES games do handle their logic that way (SMB, for example).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And does the code under labels get executed every frame, or only when it jumps to that label?</div><br />Only the code under the label pointed by the NMI vector will be executed every frame (if NMIs are enabled), other labels must be explicitly called/jumped to.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Another question, why are the sprites/backgrounds defined at the very bottom of the code, but then used before that?  Wouldn't you need to load the graphics before you can use them, or does the order of the code not matter in assembly?</div>
<br />The place where the data is stored in the ROM has nothing to do with when it's used. What matters is when the code that uses that data is executed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Jun 29, 2011 10:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do you see the .org $FFFA? That's you're "vectors." They are used to tell the micro what to do when stuff happens on it's IRQ,Reset,NMI pins. When the chips gets turned on and reset, it goees to the point that the RESET vector point. Every frame when it's turned on, the NMI is triggered and it goes to where the NMI points. Same with IRQ, but IRQ's are triggered for other events like scanlines.
<br />
<br />That's how RESET only runs once a program, but NMI happens many times.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 11:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awesome, thanks for all the detailed answers.
<br />So, if you don't want to use the NMI handler as the main logic for an actual game, how would it be structured?  Would you have a label, say MainGameLoop:, then have all of the code that runs the program in there, then at the bottom have it jmp MainGameLoop ?
<br />If you do it this way, do you want to have all the PPU setup and graphics loading before the main game loop, or will that code still be executed if its below the loop, even though its jumping back?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Jun 29, 2011 11:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think the main way is to put all the PPU logic like changine the background and sprite loading into VBlank. Then you loop the loop for the main engine until the NMI is done, like so:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">RESET:<br />Start up, do stuff here.<br />ReadyLoop:<br />LDA Frame ;Frame is a RAM variable that just counts the frames.<br />Loop:<br />CMP Frame<br />BEQ Loop ;Is the same, so NMI hasn't run and changed the variable.<br />;Game logic here<br />JMP ReadyLoop ;Go back to wait for NMI to execute and be over.<br /><br /><br />NMI:<br />PHA<br />;NMI Stuff here<br />INC Frame ;Tell game engine NMI has ran<br />PLA<br />RTI ;Return<br /></div>
<br />
<br />Does this make sense?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 1:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">&lt;snip&gt;<br />Does this make sense?</div>
<br />
<br />Almost <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> 
<br />Why do you have a ReadyLoop along with the normal loop and don't you need to make it jmp to the Loop after the ReadyLoop?
<br />Also, when you RTI (return from interrupt, I think?) where does it return you to?
<br />Also, what do PHA and PLA do?  Is there anywhere I can find a list of instructions and their uses?
<br />
<br />And one more question.. when NMI is enabled, when does it interrupt and jump to the NMI label?  Is it at a certain point, like the beginning of the Vblank or something?  I also don't have a very good understanding of Vblank and what happens/when/what you're supposed to do during Vblank, so any information on that would be appreciated <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Jun 29, 2011 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">I think the main way is to put all the PPU logic like changine the background and sprite loading into VBlank. Then you loop the loop for the main engine until the NMI is done, like so:<br /></div>
<br />There were some bugs/unneeded stuff, fixed code below:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">RESET:<br />Start up, do stuff here.<br />ReadyLoop:<br />LDA Frame ;Frame is a RAM variable that just counts the frames.<br />Loop:<br />CMP Frame<br />BEQ Loop ; Loop as long as &quot;Frame&quot; hasn't changed<br />;Game logic here<br />JMP ReadyLoop ;Go back to wait for NMI to execute and be over.<br /><br /><br />NMI:<br />; Don't need to PLA/PHA since we're not modifying A.<br />; Of course register need to be saved if A/X/Y are modified in here.<br />;NMI Stuff here<br />INC Frame ;Tell game engine NMI has ran<br />RTI ;Return<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Jun 29, 2011 3:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ReadyLoop is pretty much getting ready to wait for the next INC of Frame to jump, so it's just the name I named it to get ready to loop until the next frame, which it knows happened because Frame won't match with A.
<br />
<br />RTI brings you back to where the program was before the NMI happened, which is in the loop waiting for the next frame.
<br />
<br />PHA and PLA are PusH A and PuLl A from the stack, if you change A in the NMI, you need to save it, so I saved it there in the NMI, since NMI doesn't save the registers, just the processor status, so you need to save those manually with PHA in the beginning and PLA at the end.
<br />
<br />NMI is the VBlank trigger, and it goes to the NMI label because that's what you tell it to do from the vector. It can go to any label, it's probably best though to call the NMI label NMI so you don't confuse it with some other intterupt like IRQ.
<br />
<br />And the fox did make that one change, but at the same time, every NMI you have to LDA $2002 to "acknowledge" the NMI, or else weird things will happen if you don't and mess with the PPU and it can get stuck and cause havok, because it'll keep NMI'ing. But anyway, you'll LDA $2002 in the beginning of each NMI, So you need to PHA before that in the beginning of the NMI, LDA $2002 after, and then PLA before the RTI for that loop I showed you to work.
<br />
<br />And on a side note: You edit the screen/palette and upload sprites in VBlank, so it's important not to do any game engine stuff like move enemies there, you do that during the frame in the main logic loop. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Hope this makes some sense.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 3:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok cool, that makes sense.
<br />One last question (for now <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> ), normally in other languages I would use brackets {} to signify the start and end of a section of code, how do you know where the start/end of a section (I mean section of code under a label) is?
<br />Like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">RESET: <br />;Start up, do stuff here. <br />ReadyLoop: ; Is this included in the RESET label?<br />LDA Frame<br />Loop: ; Is the code under this label executed when you jump to ReadyLoop?<br />CMP Frame <br />BNE Loop <br />;Game logic here <br />JMP ReadyLoop<br />; How does it know this is where the Loop label ends?<br /><br />NMI: <br />PHA <br />;NMI Stuff here <br />INC Frame<br />PLA <br />RTI ;Return </div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Jun 29, 2011 3:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I leave a lot of space, about 3-5 lines, between sections of code. For subroutines, like reading the controller and screen uploading programs, I have a file for each one and put them all in between the main engine and the NMI, since they're subroutines and not needed in the beginning, so it seems most logical for me. Like this:
<br />
<br />
<br />RESET:
<br />;Reset junk
<br />JMP LoopEngine
<br />
<br />
<br />.include "ReadControllers.asm"
<br />.include "UploadScreen.asm"
<br />.include "UploadPalettes.asm"
<br />
<br />
<br />
<br />
<br />NMI:
<br />NMI stuff
<br />RTI
<br />
<br />
<br />All the includes are not the main engine, but subroutines it uses, so I just include them after inbetween the main engine and the NMI. You can put them in the beginning or after the NMI, as long as you don't include them in middle of other program, haha. You can do stuff like this too:
<br />
<br />;//////////////////////////////////////////////
<br />;Comment line, this code does X
<br />;//////////////////////////////////////////////
<br />
<br />Or anything like that. I don't do that much though. I may label some pointers, but that's it. I rarely do any labeling of my code. It gets tedious when it changes so much and nothing in my code is ever set in stone until it's done.
<br />
<br />Loop: ;This loop is for X

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 29, 2011 3:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Labels denote only the start of a block of code. You have to keep track of the end yourself, either by indentation, by leaving a blank line (as 3gengames mentioned), or by syntax highlighting branch instructions.
<br />
<br />In ca65 there are the .proc and .endproc keywords to mark the start and end of a subroutine (and create a new namespace for labels used inside the subroutine), but .endproc doesn't automatically insert the RTS instruction at the end.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Canite</b> [ Wed Jun 29, 2011 4:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So there is no <em>real</em> end to the code under a label?
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MyLabel:<br />;code<br /><br /><br /><br />; lots of spaces<br /><br /><br />LDA #$00 ; this is still inside MyLabel?<br /></div><br />And in the example code you gave, 3gengames, would I have to do this?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ReadyLoop:<br />LDA Frame<br />JMP Loop ; jump to Loop? or will it go there automatically?<br />Loop:<br />CMP Frame<br />BNE Loop<br />JMP ReadyLoop<br />;blah blah</div>
<br />Otherwise, where am I supposed to jump to the Loop?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>