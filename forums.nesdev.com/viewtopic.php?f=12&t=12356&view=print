<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Main principles of creating an &quot;object&quot;</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Main principles of creating an &quot;object&quot;</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12356">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12356</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 08, 2015 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, I think I'm at the point where I can ask this question. What I mean are what are the steps to creating an object like gnawty from DKC? There are many things I can think of, like actually programming the object (how it walks and attacks, and this of course includes collision detection,) looking to see if anything shares the objects palette, looking for an empty vram slot, keeping track of where it is in vram and updating the tiles, (you would have to make an animation engine) and actually making it through a metasprite making routine and other things. (this would probably go last.) I'd just like to know a good way to link everything together. I also kind of wonder how you would have multiple objects on screen at once and not interfere with the other objects. I mean like having an x and y position for every object and maybe a general purpose register for a timer and whatnot. I guess you could set it up like a sprite buffer or something like that, but how would you remember what registers go to what object? Grr...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Feb 08, 2015 6:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Let's say that in your game, each object has an &quot;x_position&quot; register, a &quot;y_position&quot; register, and a &quot;metasprite_data_address&quot; register.  You can define each of them with an 8-bit address.<br /><br />x_position = $00<br />y_position = $02<br />metasprite_data_address = $04<br /><br />If you set the Direct Page to $0200 like this:<br /><br />lda #$0200<br />tcd<br /><br />Your object controlling code would work, except it will read and write from $0200, $0202 and $0204, instead of $00, $02 and $04.  You can have multiple sets of identical registers by changing the Direct Page.  You can do this:<br /><br />lda #$0200<br />tcd<br />do &quot;object A&quot; stuff here<br />lda #$0280<br />tcd<br />do &quot;object B&quot; stuff here<br />lda #$0300<br />tcd<br />do &quot;object C&quot; stuff here

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>whicker</b> [ Sun Feb 08, 2015 6:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">but how would you remember what registers go to what object?</div><br /><br />I think what you're getting at is, how do you manage these objects?<br /><br />With a list.<br />Then you stop caring about what position it is in the list, just that it is in there somewhere.<br /><br /><br />So you'd have a method to 1) clear the entire list, 2) add an object to the list (or signal an error if it's full, or silently overwrite the oldest entry, or the last slot, or whatever). And 3) a method to remove the object from the list (mark the item in the list as unused).<br /><br />When it comes time to process the list, additional code would look at first of all what kind of thing is in this slot, with something like value 0 meaning skip and look immediately at the next slot as it's not used. or value 1 could be goon enemy, and value 2 could be bird enemy, value 3 is an explosion that animates for a specific series of frames, etc.<br /><br />Based on that &quot;kind of enemy&quot; variable, call the code that processes it using a jump table with kind of enemy as the index (or more easily with a series of comparisons and conditional branches (if equal to that value branch here)), that code process the enemy logic, then have it return back so the next item in the list can be processed, until everything in the list has been looked at, then move on.<br /><br />When calling the object handling code, you would need to pass it a memory address pointer (in a register, on the call stack, or in a specific fixed memory location, or another index) to the memory area in this list that the object handling code can modify and reference. So things like the X position, Y position, internal-state, name (if it matters), and anything else you can think of are referenced offset off of this memory pointer. (let's say internal state is a word at my_memory_pointer+6).<br /><br /><br /><br />As to how long the object list is, or how many variables need to be in each slot in the list, that's totally dependent on the worst case of what the game design demands. Also it would be wise for debug code for complain that the list is too small, to catch the errors during play testing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 08, 2015 7:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I remember koitsu saying that the ca65 assembler always has the index register set to 0, so I won't have to worry about that now. I'm wondering if maybe you would need to have a table in ram that would store different things for each objects like:<br /><br />Object 1:<br /><br />x_position = $00<br />y_position = $02<br />metasprite_data_address = $04<br /><br />Object 2:<br /><br />x_position = $06<br />y_position = $07<br />metasprite_data_address = $08<br /><br />Object 3:<br /><br />x_position = $0A<br />y_position = $0C<br />metasprite_data_address = $0D<br /><br />etc...<br /><br />I guess whenever you spawn a new object by looking at a table when scrolling (which I think someone explained to me how, but I don't remember...) you would have an incrementing pointer so you don't just write to the first object every time. I was wondering how you would tell what each object was by its slot in the table, but I guess you could have an &quot;object identification&quot; byte, (or bytes) that would say what each object is, like if it's a Koopa or a Goomba or something like that. How many slots for objects do you think I should have? I'd say you could have 128 because this grantees you have at least the same number of objects as sprites, but this would be very circumstantial but if every object somehow only used 1 sprite, they could all still show.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Feb 08, 2015 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't write SNES code, most of the logic involved would be the same no matter the system, so I'll share some of the information I find important.<br /><br />Like whicker said, you should maintain a list (or an array) of objects. How many bytes per object is up to you, and depends on how much state you want to keep track of. Each object has a type, a position, physics data, graphics pointers, counters, and so on, so be sure to pick a size that will comfortably hold all the data you need. Keep in mind that if only a couple of objects (such as bosses) are overly complex and need significantly more RAM, you can have it occupy more than one object slot, instead of making each slot huge and hardly use the space most of the time. Not such a big problem on the SNES, which has quite a bit of RAM, but still.<br /><br />Whenever you need to load a new object, be it from a list of objects in ROM or a dynamic object (like an explosion), just look for an empty slot (scan the list looking for an invalid object type, which acts as a flag to indicate that the slot is free) and put it there. Set its type, position and anything else necessary to get the object started. Similarly, when the object is done, just have it overwrite its type with the &quot;empty&quot; flag and the slot is free again.<br /><br />To process the objects, scan the object list every frame, and whenever you find a valid object type, use that to jump to the object's AI routine. A jump table would be the best option here. Accessing the chunk of RAM reserved for each slot can be done in different ways. On the NES, we can use indirect (a pointer indicates the beginning of the RAM chunk) or indexed (the X register indicates which slot is being used, and the attributes are interleaved) addressing, and I'm sure the SNES provides even more ways for you to do that. There's not a single right way to do it, so use what makes you more comfortable.<br /><br />The important thing is that the AI routine always manipulates the chunk of RAM that belong the current object. This will allow your objects to work from whatever slot they're loaded in. You can also write functions that can be reused for several objects. This is useful for physics, metasprite rendering, and all sorts of tasks that are common for many objects. Just call these functions from within the object's AI code and they'll also work on the appropriate chunk of RAM.<br /><br />About interactions between objects: most of them need to interact with the player, so it makes sense to put the player at a know position in the list (the first position is a good candidate), so you can have the other objects call functions like &quot;TestCollisionWithPlayer&quot; and these routines know where to find the player. Object management gets a little more complicated when more objects have to interact with each other. In this case, it helps to have separate lists of objects: one for projectiles, another for enemies, and so on, depending on which groups interact with which. This will allow enemies to call a &quot;TestCollisionWithProjectile&quot; routine that will scan only the list of projectiles looking for a hit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Feb 08, 2015 7:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">How many slots for objects do you think I should have? I'd say you could have 128 because this grantees you have at least the same number of objects as sprites</div><br />I think 128 is overkill, and there's no way in hell you'd be able to update 128 objects with physics and collisions and keep the game running at 60fps. The exception would be a bullet hell shooter, but in most other cases you won't get anywhere near to 128 active objects. You'll be scanning this list quite frequently, so making it exceedingly long might still impact performance even if you're not using most of it most of the time.<br /><br />You could build a couple of linked lists to help you manage the main object list (I do this in my NES projects). One of them lists empty slots and the other lists slots in use. This makes loading objects faster (no need to scan the list, just claim the first unused slot and remove if from the list of unused slots). Processing objects is also faster, because you only need to check the slots that are listed as used, instead of checking them all and looking at the object type.<br /><br />If you do decide to have as many object slots as 128, I'd say it's essential that you have these linked lists to help you manage them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 08, 2015 8:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you say &quot;linked list&quot; do you mean a list that that says what slots in the list are used and what aren't? Couldn't you just have it to where you check to see if the &quot;object identification&quot; byte in each slot is 0, meaning that the slot is empty and you can just jump to the next one? Also, I am planning on making a run and gun game (which I will never finish) and I want 128 objects for the worst possible scenario. I really think there could be something like 128 of something like explosions and the game wouldn't slow down too much, if at all, because all you would need to do is animate the explosion every couple of frames and build the metasprite. You wouldn't have to do collision detection or any real programming aside from knowing when to update vram and when to &quot;kill&quot; the object.<br /><br />You know, about bosses taking up extra slots, I think DKC actually does something like this, because if you move Very Gnawty in a place he wasn't designed to be in, he plays his hopping animation, but he doesn't even move and he doesn't take damage either. I guess that the bytes that control his movement and health meter are being used for something else or other, so he is effectively messed up. Other bosses act in a similar manner.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Feb 08, 2015 8:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">When you say &quot;linked list&quot; do you mean a list that that says what slots in the list are used and what aren't?</div><br />Yes. A liked list is a list where each element points to the next. For example, a variable would indicate that slot 35 is the first free slot. Then, inside slot 35, you'd find the index of the next free slot, and so on, until the last free slot, that has an invalid index signaling its the last.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Couldn't you just have it to where you check to see if the &quot;object identification&quot; byte in each slot is 0, meaning that the slot is empty and you can just jump to the next one?</div><br />Sure you could, but when you have 128 slots this might start to have an impact on the performance of the game. Each time you load a new object (which will happen as the player or the enemies fire their guns or the level scrolls), you'll have to scan the list looking for a free slot, and this could happen multiple times in the same frame. With a linked list you can just look at the variable that indicates the first free slot and you immediately know you can use the slot it indicates. To remove it from the list (since you'll be using it), all you have to do is read the index of the second free slot (which is stored somewhere in the slot you just claimed) and store it in the variable that indicates the first free slot. This means you're gonna make use of the first free slot and the second free slot becomes the first. This is really quick and you don't have to do any scanning.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You wouldn't have to do collision detection or any real programming aside from knowing when to update vram and when to &quot;kill&quot; the object.</div><br />I guess that &quot;dumb&quot; objects like these could coexist in large numbers, as long as you don't animate them all at the same time. I still doubt you'll ever reach 128 though. =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 08, 2015 9:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If checking to see if a byte is 0 or not is such a big burden, how would you have it to where you go where depending on what the &quot;identification&quot; byte is? I doubt you would check a single byte 256 times just to find out where to go. I guess you could load the &quot;identification&quot; byte into y, and jump to a location specified by a table that is being indexed by y? Would this work, because it appears to make sense but I've never tried this before, so I don't have a clue.<br /><br />Could you have something like this and have each name be a value that says where to jump to?<br /><br />dw #nothing,#goomba,#koopa,etc...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I guess that &quot;dumb&quot; objects like these could coexist in large numbers, as long as you don't animate them all at the same time. I still doubt you'll ever reach 128 though. =)</div><br />Well see... <img src="./images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" /> (there's probably going to be plenty of overdraw problems, but that's a different story.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Feb 08, 2015 9:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is the instruction &quot;jsr (abs,x).&quot;<br /><br />The 128 slots thing, I had trouble with that.  I find dp slots more convenient than index slots, except that the direct page has to be in bank 0, and you're limited to 8kB.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Feb 08, 2015 10:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">I think I remember koitsu saying that the ca65 assembler always has the index register set to 0, so I won't have to worry about that now.</div><br />I'm not sure what you're referring to here.  Index registers (X and Y) are set to whatever you set them to (via ldx/ldy).  On power-on/reset the CPU sets them to 0.  But none of that has to do with the assembler.  Can you shed some light on this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Feb 08, 2015 10:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">If checking to see if a byte is 0 or not is such a big burden</div><br />It normally isn't, but if you do it several hundred times per frame then it may start to become a problem.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">how would you have it to where you go where depending on what the &quot;identification&quot; byte is? I doubt you would check a single byte 256 times just to find out where to go. I guess you could load the &quot;identification&quot; byte into y, and jump to a location specified by a table that is being indexed by y?</div><br />That's the general idea behind a jump table, but I'm not sure about the 65816 specifics, since I'm a 6502 guy! =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">dw #nothing,#goomba,#koopa,etc...</div><br />Sure, that's the idea. You don't need the # because these are not immediate values, but addresses. Also, you don't need to declare an address for the null/nothing object, you can start from the first valid object and read the table using <strong>JumpTable-2, y</strong> instead if <strong>JumpTable, y</strong>. Sounds like a stupid optimization, but why waste space you don't have to? =)<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">There is the instruction &quot;jsr (abs,x).&quot;</div><br />This is perfect for a jump table! Just use <strong>jsr (JumpTable-2, x)</strong> and you won't need to waste any bytes because of the null object.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 08, 2015 10:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I think I remember koitsu saying that the ca65 assembler always has the index register set to 0, so I won't have to worry about that now.I'm not sure what you're referring to here.  Index registers (X and Y) are set to whatever you set them to (via ldx/ldy).  On power-on/reset the CPU sets them to 0.  But none of that has to do with the assembler.  Can you shed some light on this?</div><br />Just forget what I said completely, as I don't have a clue as to what I'm talking about. <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is the instruction &quot;jsr (abs,x).&quot;</div><br />Well, yeah. I thought that that was the only way you could do it. This is how you'd write it correct?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldy&nbsp; ObjectIdentificationRegister<br />jsr&nbsp; (would a # go here?)ObjectIdentificationTable,y</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Feb 08, 2015 10:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think you mean direct page - ca65 is apparently 6502-oriented, and doesn't know that the zero page can be relocated on a 65816...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 08, 2015 10:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Main principles of creating an &quot;object&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />yeah... You're right. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>