<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - YCPU: an imaginary 16-bit processor.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">YCPU: an imaginary 16-bit processor.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Mar 10, 2014 2:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent">I thought that there might be cases where a program would need to determine which interrupt to call at run-time. Is this not the case, even in modern operating systems? (Not that this is what I'm targeting, mind you).<br /></div>Modern x86+ (pentium 3, athlon xp, and newer, I think?) machines just have a simple <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SYSENTER</tt> / <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SYSEXIT</tt> instructions, and in software use the contents of the registers to decide which system call to use.<br /><br />The goofy thing with the older <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">INT</tt> instructions was that this implementation lost 1KiB of RAM to hold a lookup table of instructions, of which most weren't even used. Can you think of <em>exactly</em> 256 different things someone would want to do? Looking at Ralf Brown's list, 16 of the 256 are for hardware interrupts, and maybe another 16-32 are useful syscall entry points. Each of those 256 entry points have anywhere from 0 (e.g. int E1-EFh, all of which are used only by IBM BASICA) to 100ish (int 21h) subfunctions.<br /><br />I don't really see an advantage of the 8086 software interrupt system. In practice, you still ended up with horrific messy hierarchies of subclassed syscalls, and the only real advantage was that you could rely on &quot;Anything DOS is int 21h, anything video is int 10h, anything disk is int 13h, &amp;c&quot; and put your own stuff somewhere else knowing you <em>probably</em> wouldn't step on anything. But with modern more planned things (e.g. linux), <em>everything</em> was just under int 80h (until someone pointed out this causes horrific cache misses, and they replaced it with linux-gate).<br /><br />Between only &quot;syscall table that dispatches based on register&quot; vs &quot;syscall table that dispatches based on immediate argument&quot; the latter is clearly better: the former consumes a register that you could use for parameters.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Mon Mar 10, 2014 2:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent">Joe, I've added a preliminary memory paging specification. Under this spec, the processor has 16 pages of on-chip memory, but the MMU can page in memory from a device on the bus - which could be an additional memory chip with 256mw of memory (2^16 4kw pages). However, the processor itself - and the active process running on it - are limited to a flat $10000 address space. A kernel that is aware of additional memory or slow storage could provide interrupts to a process that would switch out pages on demand.</div>Why are you giving the CPU internal RAM when it could just as easily map external RAM directly? The speed hit from copying between internal and external RAM will discourage developers from using it. (In fact, it sounds like you're trying to reinvent the cache. Any particular reason you're doing things this way instead of using a more typical cache design?)<br /><br />Why are there separate &quot;RAM&quot; and &quot;ROM&quot; address spaces? Why does the &quot;hardware device&quot; page mechanism allocate a space the same size as the maximum amount of RAM to every hardware device? A clever system designer will probably use that function of the MMU to allow more than your limit of 2^16 pages of RAM by placing a few &quot;devices&quot; that are just more RAM. Is that the intended use?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Mon Mar 10, 2014 4:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Joe, I'm going to rewrite the memory management specification to explain that 'switching' a page into the address page is an instantaneous procedure. There is no need to copy external memory to internal memory - the MMU switches in an external memory/rom page, and work on it with no additional latency.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why are you giving the CPU internal RAM when it could just as easily map external RAM directly?</div><br />I'm giving the CPU 16kw of internal memory so the processor has something to work with (a) before polling the bus, or (b) should there be no extra memory on the bus. So it's not a cache, per se - just a minimal amount of 'starter memory'.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why are there separate &quot;RAM&quot; and &quot;ROM&quot; address spaces?</div><br />There's not separate address space for memory and rom and devices and so on - the only address space is the $10000 words that are currently loaded. The 'T' bits in the MMU allow the processor to switch pages of the 'rom' (like a BIOS) into a page of active address space, but doing so would switch out whatever else was in that space.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why does the &quot;hardware device&quot; page mechanism allocate a space the same size as the maximum amount of RAM to every hardware device?</div>The maximum number of pages a device can have is 2^16 - but it could have less. For example, a hypothetical PPU device might have only 16kw of memory, and when selecting a page from that device, it would ignore all but the lower two bits of the page index selection word (I suppose the device itself would have to decide what - if any - page to expose to the MMU based on the page select index).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A clever system designer will probably use that function of the MMU to allow more than your limit of 2^16 pages of RAM by placing a few &quot;devices&quot; that are just more RAM. Is that the intended use?</div><br />Absolutely - and the OS writer would have to poll the system at start-up to determine what memory is available to use, and where it is on the hardware bus.<br /><br />I'm adamant about keeping the $10000 address space. The MMU exists to extend this so that multiple processes can run, each with their own active memory - and if the OS supports it, each process can access even more memory by requesting that the OS switch in additional pages.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">=========================&#91; 1.F. Memory Management &#93;=============================<br />(Possible edit to Version 0.1e)<br />As the processor has a 16-bit address bus, it can only address $10000 words of<br />memory at a time. When the 'Memory Paging' status bit is clear, this address<br />space is filled with the processor's internal $10000 kw of memory.<br /><br />When the 'Memory Paging' status bit is set, the processor's integrated memory<br />management unit (MMU) is activated. The MMU divides the processor's address<br />space into 16 pages of 4 kilowords each, and allows each individual page to be<br />moved in memory, or switched with a page of address space from a hardware<br />device.<br /><br />There is no additional latency incurred by accessing address space mapped to a<br />page of memory in an external device unless the external device is intrinsically<br />slower than the internal memory (an inexpensive but slow memory device might<br />incur some additional latency, for example).<br /><br />Each of the currently loaded 16 x 4 kiloword pages in address space are<br />described by 2 words:<br /><br />WORD 0 (flags)<br />FEDC BA98 7654 3210<br />SWE. TT.. hhhh hhhh<br />&nbsp; &nbsp; S - Supervisor only, 1: User mode accesses to this page cause a page fault.<br />&nbsp; &nbsp; W - Write protect, 1: writing to this page cause a page fault.<br />&nbsp; &nbsp; E - Execute protect, 1: executing on this page cause a page fault.<br />&nbsp; &nbsp; T - Page type:<br />&nbsp; &nbsp; &nbsp; &nbsp; 00: Use processor internal memory page with index = (word 1 &amp; 0x000F)<br />&nbsp; &nbsp; &nbsp; &nbsp; 01: Use blank page, reads/executes are 0x0000, writes fail silently.<br />&nbsp; &nbsp; &nbsp; &nbsp; 10: Use hardware page, device = h, page index = (word 1)<br />&nbsp; &nbsp; &nbsp; &nbsp; 11: Use processor ROM, page index = (word 1)<br /><br />WORD 1 (index)<br />FEDC BA98 7654 3210<br />iiii iiii iiii iiii<br />&nbsp; &nbsp; i - Index of device page mapped to this address page.</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Mon Mar 10, 2014 5:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Writing to memory management registers might need to be a privileged operation so that the kernel can virtualize the address space, translating between page numbers that the application sees and physical page numbers that the hardware sees.</div>Agreed. Now I need to determine how to access the MMU. I'm considering a privileged opcode.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'd also recommend having a seventeenth page that replaces one of the pages in supervisor mode, so that the user process can see the full 64 Kwords.</div> I don't understand what you mean here - do you mean that the supervisor would have its own special page? For what purpose?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And what's this &quot;processor memory page&quot; and &quot;hardware page&quot;? Is it that there's a fast 64 Kword memory in the CPU package and a slower, larger memory accessed through 36-bit &quot;hardware page&quot; (8 bits h, 16 bits i, 12 bits address)?</div>I did a very poor job describing this, obviously. There's only a $10000 address space, but pages from hardware devices can be switched into this address space. Hardware device pages are not (necessarily) any slower than the internal memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Mar 10, 2014 5:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent">I'm giving the CPU 16kw of internal memory so the processor has something to work with (a) before polling the bus, or (b) should there be no extra memory on the bus. So it's not a cache, per se - just a minimal amount of 'starter memory'.<br /></div>Where are these 16 KiW of RAM in physical address? If you bank them out using the MMU, how do you get them back? <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The 'T' bits in the MMU allow the processor to switch pages of the 'rom' (like a BIOS) into a page of active address space, but doing so would switch out whatever else was in that space.<br /></div>Effectively, the TT bits increase the address space from 16 bits to 18, where the 17th and 18th bits mean &quot;physical address range for ROM or MMIO or blank instead of RAM&quot;. Why bother specifying that it's memory, but it's <em>read-only</em> memory?<br />On x86, each PCI slot gets its own MMIO range of 64 KiB up to 256 MiB, for use with MMIO (instead of PMIO, which is only 256 bytes). But the physical addresses for the peripheral I/O is shared with physical addresses for RAM:e.g.:<div class="codetitle"><b>Code:</b></div><div class="codecontent">$ cat /proc/iomem <br />&#91;...&#93;<br />00100000-8974afff : System RAM<br />&#91;...&#93;<br />dfa00000-feafffff : PCI Bus 0000:00<br />&nbsp; e0000000-efffffff : 0000:00:02.0<br />&nbsp; f0000000-f03fffff : 0000:00:02.0<br />&nbsp; f0400000-f041ffff : 0000:00:19.0<br />&nbsp; &nbsp; f0400000-f041ffff : e1000e<br />&nbsp; f0420000-f042ffff : 0000:00:14.0<br />&nbsp; &nbsp; f0420000-f042ffff : xhci_hcd<br />&nbsp; f0430000-f0433fff : 0000:00:1b.0<br />&nbsp; &nbsp; f0430000-f0433fff : ICH HD audio<br />&nbsp; f0435000-f04350ff : 0000:00:1f.3<br />&nbsp; f0436000-f04367ff : 0000:00:1f.2<br />&nbsp; &nbsp; f0436000-f04367ff : ahci<br />&nbsp; f0437000-f04373ff : 0000:00:1d.0<br />&nbsp; &nbsp; f0437000-f04373ff : ehci_hcd<br />&nbsp; f0438000-f04383ff : 0000:00:1a.0<br />&nbsp; &nbsp; f0438000-f04383ff : ehci_hcd<br />&#91;...&#93;<br /></div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm adamant about keeping the $10000 address space. The MMU exists to extend this so that multiple processes can run, each with their own active memory - and if the OS supports it, each process can access even more memory by requesting that the OS switch in additional pages.<br /></div>I think there's some confusion here, between logical addresses (the 64 KiW) and physical addresses (256 MiW to 1 GiW depending on exactly what the TT bits mean)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Mon Mar 10, 2014 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I'm getting where the confusion is coming from. I know very little about hardware - and thus I'm not familiar with how 'physical address space' works. Again, my only real exploration of a processor/memory is the NES 6502 + a Mapper. It's no surprise, then, that my design of the YCPU's memory manager is very similar to how a MMC3 might be said to 'manage' memory pages.<br /><br />If the NES had 65k of memory (and no I/O registers mapped in this space), and had a mapper that could switch out any 4kb bank of memory in the address space with a bank of rom --- this is closer to what I'm thinking. The TT bits select whether the specified bank is located in internal memory, internal rom, an external device, or is blank. The internal memory has its own address space. So does each external device. But the devices don't 'know' anything about address space. They only know that they offer X pages of memory that can be switched into the address space of the processor. <br /><br />I'm going to start calling my pages 'banks' - I know this won't clear up the current confusion, but it might help in the future.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">When the 'Memory Banking' status bit is set, the processor's integrated memory<br />management unit (MMU) is activated. The MMU divides the processor's address<br />space into 16 banks of 4 kilowords each, and allows each individual bank to be<br />filled with a bank of memory from internal memory, internal rom, a bank of<br />memory from a hardware device on the bus, or a blank bank.<br /><br />The MMU has 32 words of memory internally that describe which banks are loaded<br />into memory. The MMU memory is accessed with the MMR and MMW instructions, which<br />allow values to be read from and written into the MMU.<br /><br />The syntax for these instructions is:<br /><br />&nbsp; &nbsp; MMW r2,r0&nbsp; &nbsp; &nbsp; ; write the value of r0 into MMU memory word at address = r2.<br />&nbsp; &nbsp; MMR r2,r1&nbsp; &nbsp; &nbsp; ; read the value of MMU memory word at address = r2 into r1.<br />&nbsp; &nbsp; <br />MMU Bit Pattern<br />&nbsp; &nbsp; FEDC BA98 7654 3210 <br />&nbsp; &nbsp; iiii irrr WOOO OOOO<br />&nbsp; &nbsp; &nbsp; &nbsp; O = Opcode<br />&nbsp; &nbsp; &nbsp; &nbsp; W = 1: write to MMU word i, 0: read from MMU word i<br />&nbsp; &nbsp; &nbsp; &nbsp; r = Source/Dest register<br />&nbsp; &nbsp; &nbsp; &nbsp; i = index of MMU word to read from/write to (0-31)</div><br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Where are these 16 KiW of RAM in physical address? If you bank them out using the MMU, how do you get them back? </div>Initially, the 64 KiW of internal memory are mapped into the entire physical address space. To restore the entire internal memory to the address space, you would do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; LOD r0,#$0000&nbsp; &nbsp; &nbsp; &nbsp;; r0 = $00 (used for mmu word 1/page idx &amp; loop counter)<br />&nbsp; &nbsp; LOD r1,r0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; r1 = $00 (used for mmu word 0/flags)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;flags are: SWE. TT.. hhhh hhhh<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S, W, E are all disabled.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TT = 00, choosing banks from internal memory<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h is only used for TT = 10<br />&nbsp; &nbsp; LOD r2,#$0001&nbsp; &nbsp; &nbsp; &nbsp;; r2 = $01 (used for increment - I need an inc opcode!)<br />Loop:<br />&nbsp; &nbsp; MMW r0,r0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write word 0 of the current MMU bank<br />&nbsp; &nbsp; ADD r0,r2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; equivalent to INC r0<br />&nbsp; &nbsp; MMW r0,r1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write word 1 of the current MMU bank<br />&nbsp; &nbsp; ADD r0, r2<br />&nbsp; &nbsp; CMP r0,#$0020&nbsp; &nbsp; &nbsp; &nbsp;; loop until we write 20 words (2w per bank, 10 banks)<br />&nbsp; &nbsp; BNE Loop</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Mar 10, 2014 6:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent"> I know very little about hardware - and thus I'm not familiar with how 'physical address space' works. Again, my only real exploration of a processor/memory is the NES 6502 + a Mapper. It's no surprise, then, that my design of the YCPU's memory manager is very similar to how a MMC3 might be said to 'manage' memory pages.<br /></div>So, on some level, an MMU is &quot;nothing&quot; more than a small bit of really fast memory that converts a few bits of address into more bits of address. The former is the &quot;logical&quot; address, and is what the CPU sees. The latter is the &quot;physical&quot; address, and is what the signals on the physical board would look like.<br /><br />Alternatively, &quot;logical&quot; addresses are what the NES sees. &quot;Physical&quot; addresses are what the ROM sees.<br /><div class="quotetitle">pops wrote:</div><div class="quotecontent">Initially, the 64 KiW of internal memory are mapped into the entire physical address space. To restore the entire internal memory to the address space, you would do this:<br /></div>Ok, so to translate your asm, the internal memory are mapped to the bottom 64 KiW of physical addresses (since you're using the 32 bit dword 0x00000000 and incrementing for it)<br /><div class="quotetitle">pops wrote:</div><div class="quotecontent">    CMP r0,#$0020       ; loop until we write 20 words (2w per bank, 10 banks)<br /></div>Your comment should probably be either &quot;$20 words, $10 banks&quot; or &quot;32 words, 16 banks&quot;<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">    LOD r2,#$0001       ; r2 = $01 (used for increment - I need an inc opcode!)<br /></div>One of the neat things I think I saw in the MSP430 instruction set is a set of hardwired registers with the values 0,1,2,4,8,16,32 and -1.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Mon Mar 10, 2014 7:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To extend upon what Tepples said, here's a diagram explaining one possible way your MMU could operate.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +--------------+<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Virtual addr |<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FEDCBA9876543210<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VVVVvvvvvvvvvvvv<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \&nbsp; /\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;||&nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; |<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;||&nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; |<br />+--------------+ |&nbsp; &nbsp; &nbsp; &nbsp; |<br />|&nbsp; &nbsp;MMU&nbsp; &nbsp; &nbsp; &nbsp; | |&nbsp; &nbsp; &nbsp; &nbsp; |<br />FEDCBA9876543210 |&nbsp; &nbsp; &nbsp; &nbsp; |<br />iiiiiiiiiiiiiiii |&nbsp; &nbsp; &nbsp; &nbsp; |<br />\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; / |&nbsp; &nbsp; &nbsp; &nbsp; |<br />/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \<br />iiiiiiiiiiiiiiiivvvvvvvvvvvv<br />| 28-bit physical address&nbsp; |<br />+--------------------------+</div><br /><br />This MMU uses the high four bits of the virtual address to determine which page you want. It then uses the page index programmed for that page as the high 16 bits of the physical address, and passes the low 12 bits of the virtual address to the low 12 bits of the physical address.<br /><br />Let's say I program MMU page 0x1 to point to 0xABCD, and then the CPU tries to access (virtual) address 0x1234. The CPU will be accessing physical address 0xABCD234.<br /><br />Others have suggested that the bits you label &quot;T&quot; and &quot;h&quot; would be used to add even more bits to the physical address space. In this way, RAM, ROM, and peripherals would be located at different 30-bit physical addresses, and you would need to program the MMU with the correct values to access them from a 16-bit virtual address.<br /><br />Also, one thing has bothered me: if your CPU starts up with everything mapped to (empty) RAM, what will execute?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Tue Mar 11, 2014 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />With all the latest additions, I feel comfortable incrementing the version of the document to 0.2. I've updated the <a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072&amp;p=126375#p126375" class="postlink">first post of this thread</a> to the latest version of the specification. The specification is now 40kb in size, up from only 9kb in the initial draft. I've had a lot of fun fleshing it out, and I know there's a lot of work left to do. I'm very thankful to everyone who has provided feedback, pointed out my misunderstandings and errors or the document's ambiguities.<br /><br />Thanks to Lidnariq, Joe, and Tepples for taking the time to explain virtual memory and physical addresses. I think I finally understand the concept - and I've modified my MMU spec to better fit what you're talking about. Physical address space is now 33 bits, with the 33rd bit selecting internal/external memory. The lower 12 bits select a word in a page, and the remaining 20 bits select a page within the specified memory. I've updated the memory management section of the spec to reflect these updates.<br /><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">I notice you can tell it to shift out zero bits. What happens in these cases?<br />Does LSR still always clear the negative flag if no bits are shifted out?<br />If ROL is used shifting nothing, will the carry flag copy the low bit (low four bits of the result of (16-0) is 0)?<br />If ROR is used shifting nothing, will the carry flag copy the high bit (low four bits of the result of (0-1) is 15)?</div>I've clarified all of these: on a zero bit shift, there is no operation, and no flags are changed. Thanks!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, one thing has bothered me: if your CPU starts up with everything mapped to (empty) RAM, what will execute?</div>That question has occurred to me as well. I suppose the easy answer would be to have the processor load a small ROM program which would POST and then look for bootable devices on the hardware bus. This would require that the MMU enable bit be set by the processor's boot routine.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">I don't really see an advantage of the 8086 software interrupt system.</div>I find that I agree with you. I'm reducing the size of the interrupt vector table to 16 entries, which includes just one 'software interrupt' vector, which is always called on SWI.<br /><br />I've also added at least basic descriptions for the remaining instructions that have not yet been fleshed out.<br /><br />I'm certain that it's only hubris to assume that anyone else would ever make use of this specification in their own project. That said, I want to make certain that should anyone ever want to build on it or use it in any way, that use should be unencumbered by any ambiguity as to copyright. With this in mind, it's my intention to release this specification to the public domain, as specified in <!-- m --><a class="postlink" href="http://creativecommons.org/publicdomain/">http://creativecommons.org/publicdomain/</a><!-- m -->.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 11, 2014 10:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tiny licensing nit: I'd recommend Creative Commons Zero (<a href="http://creativecommons.org/choose/zero/" class="postlink">about</a>, <a href="http://creativecommons.org/publicdomain/zero/1.0/" class="postlink">deed</a>), which works even in countries whose copyright law lacks a concept of &quot;donation of a work to the public domain&quot; or &quot;willful abandonment of copyright&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Tue Mar 11, 2014 4:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The new ADI/SBI instruction is very good idea. I suppose INC/DEC are then assembler macros for ADI/SBI?<br /><br /><div class="quotetitle">pops wrote:</div><div class="quotecontent">I've clarified all of these: on a zero bit shift, there is no operation, and no flags are changed. Thanks!</div>It is good that you clarified it, although I disagree with that specification. It would be simpler to implement (no special cases), and more useful, to do something like this:<ul><li>All bit shifts, with a shift count of zero, affect the negative and zero flag.</li><li>ASL, ASR, LSL, and LSR, with a shift count of zero, clear the carry flag.</li><li>RNL and RNR with a shift count of zero, do not affect the carry flag.</li><li>Not sure about ROL and ROR; perhaps they also should not affect the carry flag if the shift count is zero (like RNL and RNR).</li></ul><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm certain that it's only hubris to assume that anyone else would ever make use of this specification in their own project. That said, I want to make certain that should anyone ever want to build on it or use it in any way, that use should be unencumbered by any ambiguity as to copyright. With this in mind, it's my intention to release this specification to the public domain, as specified in <!-- m --><a class="postlink" href="http://creativecommons.org/publicdomain/">http://creativecommons.org/publicdomain/</a><!-- m -->.</div>I agree absolutely with this (although as tepples has stated, you may need CC0 instead).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed Mar 12, 2014 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're going to have the MMU built in the chip, I still don't understand why you can't have the registers have their own selectable bank, since there's not going to be an absolute addressing mode.  You can probably use two banks for program counter, to avoid the need of a long jump instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Mar 12, 2014 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I still don't understand why you can't have the registers have their own selectable bank, since there's not going to be an absolute addressing mode.<br /></div>How would you get the bank containing the MMU registers back if you banked it out? You'd either need a fixed bank, special instructions to address them, or a special instruction for &quot;restore the MMU bank&quot;. But if you were to do the last, you may as well make it uniform.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed Mar 12, 2014 3:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I thought the MMU registers were part of the register set.  I guess I read it wrong.<br /><br />EDIT:<br /><br />Nope, I read it correctly.  The MMU registers are separate from the logical memory space.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">The MMU has 32 words of memory internally that describe which banks are loaded<br />into memory. The MMU memory is accessed with the MMR and MMW instructions, which<br />allow values to be read from and written into the MMU.<br /><br />The syntax for these instructions is:<br /><br />&nbsp; &nbsp; MMW $00,r0&nbsp; &nbsp; &nbsp; ; write the value of r0 into MMU memory word $00.<br />&nbsp; &nbsp; MMR $1F,r1&nbsp; &nbsp; &nbsp; ; read the value of MMU memory word $1F into r1</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Mar 12, 2014 4:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What do you mean by &quot;have their own selectable bank&quot;, then?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>