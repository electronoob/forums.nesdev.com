<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=3715" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-02-11T16:20:04-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=3715</id>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2008-02-11T16:20:04-07:00</updated>
<published>2008-02-11T16:20:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=30783#p30783</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=30783#p30783"/>
<title type="html"><![CDATA[PPU Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=30783#p30783"><![CDATA[
Assuming the hardware accuracy, what PPU cycle does the background rendering start? I mean, the first pixel is rendered.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Mon Feb 11, 2008 4:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2007-11-19T14:31:15-07:00</updated>
<published>2007-11-19T14:31:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28499#p28499</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28499#p28499"/>
<title type="html"><![CDATA[PPU Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28499#p28499"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />Care to enumerate the various levels of PPU accuracy? You can render the entire screen at once, which causes glitches for most games. You can render one scanline at a time, which works well for a majority of NES software. What does rendering one pixel at a time mean? Nintendulator accuracy, with all the internal shift registers and memory reads at specific times, or something less demanding? And is there something beyond this too (assuming Nintendulator isn't perfect)?<br /></div><br /><br />That's what I mean, 'Nintendulator' accuracy (or whatever is better), and let's not call it that. NES accuracy is better.<br /><br />(Please let's not turn this into an 'what is meant by accuracy' debate blargg)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Mon Nov 19, 2007 2:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-11-19T13:48:38-07:00</updated>
<published>2007-11-19T13:48:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28496#p28496</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28496#p28496"/>
<title type="html"><![CDATA[PPU Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28496#p28496"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />You can render one scanline at a time, which works well for a majority of NES software. What does rendering one pixel at a time mean? Nintendulator accuracy, with all the internal shift registers and memory reads at specific times, or something less demanding?<br /></div><br />There is a "catch-up method" that's pixel-accurate in the sense of Nintendulator but more cache friendly. Let the PPU lag several scanlines behind the CPU most of the time. Whenever the CPU writes to the PPU, the emulator should "catch up" the PPU, that is, render all pixels between where the PPU was and where it is. Whenever the CPU reads a PPU register on a scanline that could affect the output of that register (for example, a $2002 read with sprite 0 or a line with 8 or more sprites in the way), "catch up" the PPU.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And is there something beyond this too (assuming Nintendulator isn't perfect)?<br /></div><br />Nintendulator emulates an RGB PPU like the one in a PlayChoice, which lacks the color encoding artifacts that Blaster Master and some other games use to create the illusion of more colors. Nestopia emulates an NTSC PPU, but Nintendulator doesn't include this.<br /><br />My advice: Make one to throw away. That is, implement scanline rendering first. Once you get Balloon Fight and Super Mario Bros. halfway working, you should know more about the issues.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Nov 19, 2007 1:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-11-19T13:32:55-07:00</updated>
<published>2007-11-19T13:32:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28495#p28495</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28495#p28495"/>
<title type="html"><![CDATA[PPU Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28495#p28495"><![CDATA[
Care to enumerate the various levels of PPU accuracy? You can render the entire screen at once, which causes glitches for most games. You can render one scanline at a time, which works well for a majority of NES software. What does rendering one pixel at a time mean? Nintendulator accuracy, with all the internal shift registers and memory reads at specific times, or something less demanding? And is there something beyond this too (assuming Nintendulator isn't perfect)?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Nov 19, 2007 1:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2007-11-19T11:05:49-07:00</updated>
<published>2007-11-19T11:05:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28485#p28485</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28485#p28485"/>
<title type="html"><![CDATA[Re: PPU Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28485#p28485"><![CDATA[
<div class="quotetitle">NESmongoose wrote:</div><div class="quotecontent"><br />Also, i've seen people talking about scanline rendering and tile rendering. Am I right that scanline rendering is the method I talked about above and tile based rendering is the method where graphics are output to the screen a tile at a time?<br /><br />If this is the case, i'm guessing that the scanline approach will result in more accurate emulation due to register and memory values changing between lines etc?<br /></div><br /><br />Stop right there and go straight for cycle/pixel accuracy. You would go for it if you knew that it has become the standard for all new NES emulators.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Mon Nov 19, 2007 11:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-11-19T07:01:14-07:00</updated>
<published>2007-11-19T07:01:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28478#p28478</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28478#p28478"/>
<title type="html"><![CDATA[Re: PPU Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28478#p28478"><![CDATA[
<div class="quotetitle">NESmongoose wrote:</div><div class="quotecontent"><br />Also, i've seen people talking about scanline rendering and tile rendering. Am I right that scanline rendering is the method I talked about above and tile based rendering is the method where graphics are output to the screen a tile at a time?<br /><br />If this is the case, i'm guessing that the scanline approach will result in more accurate emulation due to register and memory values changing between lines etc?<br /></div><br />Correct. But for a few games, you'll need to simulate the effect of the CPU changing PPU or mapper registers in the middle of the scanline.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Nov 19, 2007 7:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[NESmongoose]]></name></author>
<updated>2007-11-19T06:57:47-07:00</updated>
<published>2007-11-19T06:57:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28477#p28477</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28477#p28477"/>
<title type="html"><![CDATA[PPU Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3715&amp;p=28477#p28477"><![CDATA[
Hi.<br /><br />I'm currently attempting to implement the PPU unit and was hoping that I could get some feedback on the method I am planning to attempt.<br /><br />I have a CPU which executes for a certain number of cycles and then deals with any cyclic tasks that need dealing with, before beginning the execution of instructions again.<br /><br />After reading posts on this board, it seems like it might be a good idea to have it so that if enough CPU cycles have passed for a scanline to be output, get the PPU to build up the next scanline and output it to the display?<br /><br />If this method worked out ok, I guess for background rendering i'd need to<br /><br />* grab all the pattern table information relevant to the current line, convert the layers obtained into 2 bit color form<br /><br />* grab the colour values for the relevant line from the attribute table<br /><br />* Output this to the display using the relevant palette entries.<br /><br />For sprite rendering I think it'd work in a similar way, substituting OAM for the attribute table.<br /><br />Also, i've seen people talking about scanline rendering and tile rendering. Am I right that scanline rendering is the method I talked about above and tile based rendering is the method where graphics are output to the screen a tile at a time?<br /><br />If this is the case, i'm guessing that the scanline approach will result in more accurate emulation due to register and memory values changing between lines etc?<br /><br />Sorry if this seems a bit unreadable. Hopefully it makes some sense.<br /><br /><br />Thank you very much.<br /><br /> <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3421">NESmongoose</a> — Mon Nov 19, 2007 6:57 am</p><hr />
]]></content>
</entry>
</feed>