<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES to NSF</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES to NSF</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=6627">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=6627</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jp48</b> [ Tue Jul 20, 2010 11:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NES to NSF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi all,
<br />
<br />I write music (chipnoise) using only NESASM, I've tried to find a good method to convert NES-files to NSF, found NES2NSF but only Japanese version which doesn't work as I'm not able to edit the config file. Any other methods, the programs are simple, usual iNES-header, .org to $8000, lots of LDA's and STA's, a simple Vblank routine for timing.
<br />
<br />Any tips are highly appreciated !
<br />
<br />-Jukka

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Gil-Galad</b> [ Wed Jul 21, 2010 12:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Let me guess, you want to rip the NSF out of your ROM?
<br />
<br />NES2NSF is not really a conversion utility. As it says in the readme, it's a NSF compilation utility. It's purpose is to take a large NES/FC ROM image and split it into specified sized bank files (it also removes the iNES header for you). It also has a detection method based on the config file settings to detect writes to $4015. Also a setting to prepend a NSF header or not to prepend a NSF header. Sounds great in theory, but it has a bug when splitting 8K banks, they are split incorrectly. It also has a copy of a NSF header with some default settings for the NSF spec which you need to edit with a hex editor. Btw, you can edit that config file. All you do is change the numbers at the top that kind of resemble bits. Some of them can be larger than a 0 or 1. Anyways, you don't need to use this utility. It's buggy and it's not really effective anymore, as far as I'm concerned. I use a different file splitter now days.
<br />
<br />If you're making a ROM that is mapper 0, 16K or 32K. All you need do is load up a emulator (FCEU mod) and dump $8000 - $FFFF from the memory viewer (after snapping at a write break point to $4000 - $4008). If you made a ROM that has a origin of $C000, then you dump $C000 - $FFFF (make sure you change the load address). Using this method gives you a completely stripped file. After that, prepend a NSF header to it and fill out the NSF spec information via a hex editor.
<br />
<br />If you want more details, I have a document that shows you how to rip NSFs. <a href="http://gilgalad.arc-nova.org/intro.html" class="postlink">NSF Ripper Guide</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jp48</b> [ Wed Jul 21, 2010 1:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, exactly, I write music using only NESASM, always mapper 0, always 16k or 32k, always starting from $8000, ROM (NES) which I need to convert/rip to NSF-format. As I make the programs that generate the ROM's I also know exact addresses, just trying to find a simple way to dump/convert the APU registers (and vblank timers) to NSF. Thanks of information regarding NES2NSF, it doesn't work and probably it is useless for me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Jul 21, 2010 1:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're writing the stuff yourself, and you know the INIT/PLAY address, you can just take your 32k of PRG, and slap a valid NSF header on it, and it should work.
<br />
<br />An NSF file is a NES rom basically.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Gil-Galad</b> [ Wed Jul 21, 2010 1:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure how you wrote your music driver. However, most games have a JSR to the music driver in the NMI code. That will be your play address.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jp48</b> [ Wed Jul 21, 2010 2:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dwedit: thanks of the info, NSF-header seems the best way, I will try it !
<br />
<br />Gil-Galad: As I only compose music, no games, graphics or anything else,
<br />just an iNes header and bunch of LDA/STA directly to APU registers, timing with VBlanks. Simple but works for me, especially with NES as the sound world is extremely rich with it.
<br />
<br />Here's a small example:
<br />
<br /><!-- m --><a class="postlink" href="ftp://ftp.untergrund.net/users/pxtr/nes/nes071910-1.nes">ftp://ftp.untergrund.net/users/pxtr/nes/nes071910-1.nes</a><!-- m -->
<br />
<br />
<br />Thanks !
<br />
<br />-J

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Jul 21, 2010 4:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />haha, fun-sounding stuff.
<br />
<br />You might need to start using a new timing system in your code, depending on what you're doing.  The INIT address can only be called once and I think a lot of NSF players might freak out if you never return from it.  Plus they definitely won't let you do timing by reading any registers or using the NMI interrupt.  In your case you may want to make the init address blank by pointing it to an RTS instruction (unless you are doing anything to initialze something).  Use it though if you want more than one song per NSF.
<br />
<br />The PLAY address just gets called every vblank.  So you need to make your program run 1 frames-worth of code, then hit an RTS (including times it just waits and does nothing).  you can use this as an NES ROM by putting a JSR to your routine in the NMI handler.  (and have the main code sit in an infinite JMP loop while the NMIs happen, don't enable NMIs before going into the infinite loop though).
<br />
<br />In the .NES ROM, in it's most basic form your NMI would simply be 
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:<br />&nbsp;jsr play<br />&nbsp;rti<br /></div>
<br />
<br />Let me know if you need that explained better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jul 21, 2010 8:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've long maintained that we need a NES music format that <em>is</em> and iNES file, with certain restrictions, and a simple protocol for selecting the song in a PPU-less player. It ensures there are no (meaningful) restrictions on what the music can do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Jul 21, 2010 8:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I've long maintained that we need a NES music format that <em>is</em> an iNES file, with certain restrictions, and a simple protocol for selecting the song in a PPU-less player. It ensures there are no (meaningful) restrictions on what the music can do.</div>
<br />I agree. Do you have any ideas for specification?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jp48</b> [ Thu Jul 22, 2010 3:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm always happy when this stuff makes people laugh, that it sounds fun !
<br />At least it sounds fun for me !
<br />
<br />That's true, I took a closer look to NSF, no way that I could convert this directly to NSF, header was quickly done but I'm deliberately avoiding any interrupt-driven players/formats/etc., I operate several different console "platforms", my first task is find a way to do VBlank, after that there are no restrictions what I write to sound chip registers.  And this doesn't seem to work in conversion, anyway thanks, it seems someone (Blargg) is taking another direction which sounds very very interesting !
<br />
<br />-J
<br />
<br />
<br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">haha, fun-sounding stuff.<br /><br />You might need to start using a new timing system in your code, depending on what you're doing.  The INIT address can only be called once and I think a lot of NSF players might freak out if you never return from it.  Plus they definitely won't let you do timing by reading any registers or using the NMI interrupt.  In your case you may want to make the init address blank by pointing it to an RTS instruction (unless you are doing anything to initialze something).  Use it though if you want more than one song per NSF.<br /><br />The PLAY address just gets called every vblank.  So you need to make your program run 1 frames-worth of code, then hit an RTS (including times it just waits and does nothing).  you can use this as an NES ROM by putting a JSR to your routine in the NMI handler.  (and have the main code sit in an infinite JMP loop while the NMIs happen, don't enable NMIs before going into the infinite loop though).<br /><br />In the .NES ROM, in it's most basic form your NMI would simply be <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:<br />&nbsp;jsr play<br />&nbsp;rti<br /></div><br /><br />Let me know if you need that explained better.</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jp48</b> [ Thu Jul 22, 2010 3:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I've long maintained that we need a NES music format that <em>is</em> and iNES file, with certain restrictions, and a simple protocol for selecting the song in a PPU-less player. It ensures there are no (meaningful) restrictions on what the music can do.</div>
<br />
<br />Yes, this is very interesting, PPU-less player, a simple protocol (although in my case I'm especially interested of meaningless restrictions  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> .

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jp48</b> [ Thu Jul 22, 2010 3:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I've long maintained that we need a NES music format that <em>is</em> an iNES file, with certain restrictions, and a simple protocol for selecting the song in a PPU-less player. It ensures there are no (meaningful) restrictions on what the music can do.</div><br />I agree. Do you have any ideas for specification?</div>
<br />
<br />One possible approach could be something like csound score format, simple text files, time/durations wouldn't  be beats, perhaps frames (or even seconds), pitch 8+3 bits (not note names etc, you wouldn't be restricted to any particular temperament), rest would be direct writing to registers so that the full potential of NES APU would be in total control of composer. I should mention here that I'm classically trained composer which of course restrict my thinking, also I'm just starting the discussion of possible formats, it is too hot here Kitee (terveisiä Pohjois-Karjalasta sinne Tampereelle) that I could think as clearly as usually (well, it is not much better in Winter either...).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Jul 25, 2010 12:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I've long maintained that we need a NES music format that <em>is</em> and iNES file, with certain restrictions, and a simple protocol for selecting the song in a PPU-less player. It ensures there are no (meaningful) restrictions on what the music can do.</div>
<br />
<br />What the NSF format is lacking, is the IRQ.  I was missing out on the end-of-sample DPCM IRQ that my speech synth uses - I was able to add $4015 polling code and have it work that way, though.
<br />
<br />I don't know if there is a way to totally escape using the PPU, at the very least you need to disable/enable the NMI.  Though for jp48's case I guess the NMI could just be an RTI instruciton.
<br />
<br />Is there anything different that would make an expansion incompatible with NSF?  Maybe if it could be spec'ed that the NES is allowed to never return from the INIT routine.  What you could also add to the NSF header is an address for where a standard bootup/player code stub is to be loaded (and maybe you could specify what version of this code, for future cases).
<br />
<br />I guess if it never returns from INIT also, there is the problem of regaining control to change tracks.  Might need the NMI for this.. seems kinda complicated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Jul 25, 2010 12:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You reset the CPU when you change tracks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Jul 25, 2010 4:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, the basic idea is that an iNES music file is a totally standard iNES ROM whose reset handler reads the track number to play, etc. from zero-page bytes. This way an emulator doesn't need any special handling, other than doctoring the initial values of those zero-page locations before powering up the emulated NES. To change tracks, you repeat the above process. So you never need to know anything about how the music code works, where its routines are, etc. and the music code has full flexibility in how it works, and what mapper it uses. This of course would supplement NSF, rather than replace it, since NSF works fine for most music.
<br />
<br />That covers the essential functionality. You could also have the info strings at the beginning of PRG data, so that they are always at offset $10 in the file. And you could have some way of plugging in a NES-based UI, so that it can be booted standalone on a NES. Perhaps the reset code would check for a signature in zero-page; if not present, it jumps to an area where the NES-based front-end can be plugged in, and also specifies routines similar to NSF for changing the track while running.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>