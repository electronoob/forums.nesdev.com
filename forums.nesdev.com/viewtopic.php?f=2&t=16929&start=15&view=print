<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sprite data caching or reuse?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sprite data caching or reuse?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16929">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16929</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">For each object, do you have a register holding the palette bits?</div><br /><br />Yup! It's assigned when the object spawns. An object can actually &quot;claim&quot; up to three palettes.<br /><br />Futhermore, in the animation data for each object, for each frame, each individual sprite has 2 bits to tell what palette that sprite uses. However, because of my dynamic palette allocation it becomes a bit tricky, because even if the animation data says that the first four sprites all use palette 0, it might be that the game scene was pretty crowded when this object spawned so it was assigned palette 3.<br /><br />That means I have to translate the &quot;frame palette&quot; to &quot;actual palette&quot; on the fly as the sprites are being plotted out.<br /><br />But as Kasumi pointed out, for objects that only use one palette (which is MOST objects), that lookup logic can be greatly simplified. I don't mind if bosses and the like are a little more expensive to draw.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Jan 12, 2018 1:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I actually think that &quot;data shifted right&quot; thing I posted is a great idea. Maybe not for your game, but I'm happy with it even an hour later.  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> <br /><br />One other thing: If an object does use say two palettes, you could split it into two metasprites. It adds... two bytes for the extra address? And probably not the much overhead. May only save if your objects are biggish, though.<br /><br />Edit: To be more clear, split it into two metasprites and change SPRpalette after the first is rendered. You could even create a routine that handles anything that'd need to switch to avoid the hit of the second subroutine call/return.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 1:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I actually think that &quot;data shifted right&quot; thing I posted is a great idea. Maybe not for your game, but I'm happy with it even an hour later.  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> </div><br /><br />I already use some similar techniques for packing some of my animation data pretty tight. Who needs the background priority flag anyways?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">One other thing: If an object does use say two palettes, you could split it into two metasprites. It adds... two bytes for the extra address? And probably not the much overhead. May only save if your objects are biggish, though.</div><br /><br />You could, but it would complicate a lot of internal logic, so I'm trying to avoid it. It's already possible by writing a custom drawing routine for the object, but I really don't wanna bake support for it into the standard drawing path.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Jan 12, 2018 3:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can organize the metasprite data into color groups.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Sat Jan 13, 2018 7:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alright, I've been hard at work incorporating in some of the suggestions I've gotten, which saw me about 10% faster rendering. I also managed to implement caching, which cut the rendering time in half again.<br /><br />My caching technique is this: <br /><br />Every frame the Sprite RAM is shuffled, but it's shuffled so that metasprites still have all their child sprites grouped together. The shuffling process also updates sprite pointers for all objects to their new locations. I use some macros and loop unrolling to ensure that this shuffling is fast.<br /><br />When it's time to draw an object, the object knows that what it plotted down in the Sprite RAM the previous frame is still there, and it can skip on a lot of things unless they have changed. If nothing except the object's position has changed since last frame, then a fast drawing replacement routine is invoked that adjusts all child sprites x/y and then calls it a day. Even if the metasprite is a non-rectangular form it's maintained perfectly. If any of the sprites positions produces a carry it's removed as it likely went off-screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Jan 13, 2018 9:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One potential issue. (Rare case, and probably an acceptable loss but still.)<br /><br />What if the screen scrolls right, then scrolls left? Scroll right, some sprites move offscreen due to carry change, scroll left, those sprites should be back on screen. Is that case covered?<br /><br />I'm not clear, is this two pages of RAM (one for cache, one for not?) or just one?<br /><br />Can objects have a variable number of sprites? (Some frames take 12, some take 8)Edit: To ask a more specific question. For the frames that take 8 sprites, are 12 child slots still needed for the object?<br /><br />Does the halved time include the added time for the actual shuffle? I assume half on average, is your worst case much worse? (Though I guess it wouldn't be.)<br /><br />Sorry for all the questions, but sounds brilliant. If it uses one page of sprite RAM, I'm all in. if it's two pages of sprite RAM, I'm half in.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jan 13, 2018 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What happens when an object that has moved partially off screen and had some of its sprites removed moves back on screen? Does it still trigger the &quot;fast mode&quot; where the existing sprites are moved (causing parts of the object to be missing) or does it know it has to generate the missing sprites again?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Sat Jan 13, 2018 9:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">What if the screen scrolls right, then scrolls left? Scroll right, some sprites move offscreen due to carry change, scroll left, those sprites should be back on screen. Is that case covered?</div><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">What happens when an object that has moved partially off screen and had some of its sprites removed moves back on screen? Does it still trigger the &quot;fast mode&quot; where the existing sprites are moved (causing parts of the object to be missing) or does it know it has to generate the missing sprites again?</div><br /><br />I was thinking about the exact same issue, trying to come up with a way that doesn't overly complicate things, but, I think I'll solve it by never allowing the use of the fast drawing replacement routine for objects that are either being clipped by the edge of the screen or that was clipped (or outside) the screen on the previous frame. Too much special logic going on there to account for in the caching mechanism.<br /><br />I might refine it later to narrow down, since in theory there is nothing wrong with &quot;clipping away&quot; sprites just as long as no sprites need to reappear.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I'm not clear, is this two pages of RAM (one for cache, one for not?) or just one?</div><br /><br />I'm just using one page of RAM, it's being shuffled &quot;in place&quot;. If I used two pages of RAM I'd have to waste time copying over the values I wanted to reuse, and I'd be spending a lot more memory, so that solution would be subpar.<br /><br />By cleverly using LDA/STA and LDX/STX in combination we can shuffle around the RAM &quot;in place&quot; without any performance penalties for not having a shadow copy.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Can objects have a variable number of sprites? (Some frames take 12, some take 8)Edit: To ask a more specific question. For the frames that take 8 sprites, are 12 child slots still needed for the object?</div><br /><br />Right now I'm just giving 8 sprites to each object, I was really curious on how much CPU time the caching would save me so I cheated a bit on sprite assignment. However, I have plans to change that in favor of just using the sprites it exactly needs that frame, by making a routine that gives out sprites whenever it's called, divided in such a way that my shuffling mechanism is still fast.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Does the halved time include the added time for the actual shuffle? I assume half on average, is your worst case much worse? (Though I guess it wouldn't be.)</div><br /><br />Well, my claim was perhaps a bit simplistic. The shuffling adds a static cost, but the caching makes every object cheaper. That means it's actually slower if you only have one object on the scene, but a lot faster if you have eight objects on the scene. The cost per object was more than cut in half, but I eyeballed it a bit since I was just measuring by tinting the screen with colors as the code was executing.<br /><br />This is a very good kind of tradeoff though, as we don't really care about saving that much CPU when there is only one object on the scene. We want to optimize for the worst case scenario after all.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Sorry for all the questions, but sounds brilliant. If it uses one page of sprite RAM, I'm all in. if it's two pages of sprite RAM, I'm half in.</div><br /><br />It's definitely just one page. I have big plans and it's gonna need a lot of spare RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jan 13, 2018 12:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent"><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I'm not clear, is this two pages of RAM (one for cache, one for not?) or just one?</div><br /><br />I'm just using one page of RAM, it's being shuffled &quot;in place&quot;. If I used two pages of RAM I'd have to waste time copying over the values I wanted to reuse, and I'd be spending a lot more memory, so that solution would be subpar.</div><br />You'd waste no more time than you do by shuffling in place. Using a second page would make the logic more straightforward, since you'd be essentially filling a new OAM page from scratch every time, generating new data when necessary and copying from the previous table when possible.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">By cleverly using LDA/STA and LDX/STX in combination we can shuffle around the RAM &quot;in place&quot; without any performance penalties for not having a shadow copy.</div><br />Doing things in place may save memory, but it can be significantly more complex, and somewhat slower, since you have to deal with fragmentation due to shuffling groups of sprites of different lengths and clipping.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Right now I'm just giving 8 sprites to each object, I was really curious on how much CPU time the caching would save me so I cheated a bit on sprite assignment.</div><br />So that's why fragmentation isn't a problem for you... I'm not a fan of this solution, since being limited to using multiples of 8 sprites can be very wasteful.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Sorry for all the questions, but sounds brilliant. If it uses one page of sprite RAM, I'm all in. if it's two pages of sprite RAM, I'm half in.</div><br />Using two pages might not be so bad if you can reuse those pages for more than just the OAM shadow. For example, you could use pages $0200 and $0300, and alternate which page is used for the OAM shadow and which is used for the VRAM update buffer every frame. As long as you handle all the sprites before buffering NT/AT/PT/etc. updates, you can copy OAM entries that were used last time, and then you can overwrite the old OAM completely with buffered VRAM updates so the space doesn't go to waste.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Sat Jan 13, 2018 2:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You are right tokumaru, without a shadowy copy, fragmentation becomes an issue. I've been twisting my brain at the problem, and while It's possible to write some clever loops to defrag things while shuffling (as long as all &quot;groups&quot; are 2, 4, 8 or 16), the loops would be massive and not prone to loop unrolling which makes them a lot slower. I guess one could live with the 8 sprite tradeoff, but I'm starting to realize the shadow copy is probably worth it and could bring other benefits as well.<br /><br />Edit: Another possible setup if you really wanna save that memory is to have groups of 4 sprites in the shuffling process and then use more than one metasprite for objects that are bigger than 4 sprites.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Jan 13, 2018 3:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I did a lot of math on this. As far as fragmentation, I just assumed a totally unrolled 2048 cycle 256 load 256 store shuffle before any rendering. But any changes would have a duplicate load store later in the frame.<br /><br />Even with the duplicate load and store, it actually still beat my unrolled thing so long as most sprites didn't need more than one byte changed.  (But I made a lot of assumptions, so take that with a grain of salt.)<br /><br />I didn't think too deeply about it, but I think with two pages you start to really win. I might play around with it for a non scrolling game I'm thinking about.<br /><br />If anyone wants to check some stuff themselves:<br />64 fast sprites (my method) is 4160 cycles (Well... not always because page cross stuff).<br />32 fast sprites (my method) is 2080 + 607= 2687 cycles. (607 is for moving the remaining sprites offscreen)<br />I assumed always fastest method for both, all sprites in one go. Obviously there'd also be overhead in places but the overhead (deciding whether to use the fast function, navigating to the next object) would be a bit similar for either method.<br />Edit: Oh. I timed with adding the tile offset, so 3 cycles per sprite could be taken off the above counts for some games. Also the 607 could be made a cycle faster for every sprite. But probably take the counts as they are, because obviously there's still a check to skip the offscreen loop when there are 64 sprites and that's not counted. And there are similar things for the 32 sprite one.<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Using two pages might not be so bad if you can reuse those pages for more than just the OAM shadow. For example, you could use pages $0200 and $0300, and alternate which page is used for the OAM shadow and which is used for the VRAM update buffer every frame.</div><br />True, but I'd usually prefer pla sta $2007 VRAM updates. There are definitely games where I'd be fine just dedicating the second page, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Sat Jan 13, 2018 4:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Has anybody thought about using a mapper with RAM bankswitching and putting the two OAM pages at the exact same address but in two different banks? Instead of writing the address high byte to $4014 to select between your two OAM pages you'd simply switch banks instead.<br /><br />The advantage would be that all the drawing code that refers to your Sprite OAM address would just magically work on both copies, without the need for indirect addressing, duplicate drawing methods, or copying from one page to the other.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jan 13, 2018 4:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent">Has anybody thought about using a mapper with RAM bankswitching and putting the two OAM pages at the exact same address but in two different banks? Instead of writing the address high byte to $4014 to select between your two OAM pages you'd simply switch banks instead.</div><br />That's overkill! The difference between <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA #IMM; STA $4014</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $ZP; STA $4014</tt> is just 1 cycle... that's hardly worth the trouble.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The advantage would be that all the drawing code that refers to your Sprite OAM address would just magically work on both copies, without the need for indirect addressing, duplicate drawing methods, or copying from one page to the other.</div><br />Yes, but copying from one set to the other becomes slower, because you have to constantly switch back and forth between the banks.<br /><br />If you can spare a little ROM space, duplicating the sprite drawing routine is probably the best choice to avoid indirection, since each copy of the routine will know which buffer is the primary one.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Sun Jan 14, 2018 2:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">That's overkill! The difference between <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA #IMM; STA $4014</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $ZP; STA $4014</tt> is just 1 cycle... that's hardly worth the trouble.</div><br /><br />Hehe, I didn't mean <strong>that</strong> particular aspect as a cost saving measure. I was just introing my explanation so people would know what I was talking about.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes, but copying from one set to the other becomes slower, because you have to constantly switch back and forth between the banks.</div><br /><br />I realized that for the MMC5 mapper at least, you can mount the RAM banks in several places, so if you need to work on both of them at once (copying back and forth) you could have them neatly side by side for the operation.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you can spare a little ROM space, duplicating the sprite drawing routine is probably the best choice to avoid indirection, since each copy of the routine will know which buffer is the primary one.</div><br /><br />I guess it's not so ugly if you are using a macro to duplicate everything, but still, I like my way better <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />The advantage would be that you aren't using up your &quot;always available RAM&quot; but instead using the paged RAM which can be a little more messy to access for global variables.<br /><br />You could theoretically even have more than one shadow copy if you have some tricks in mind (splitscreen? I dunno).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>