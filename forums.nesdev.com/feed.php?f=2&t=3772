<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=3772" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-12-20T10:27:31-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=3772</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-12-20T10:27:31-07:00</updated>
<published>2007-12-20T10:27:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29779#p29779</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29779#p29779"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29779#p29779"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />I'm thinking of writing all of my routines at least twice. Since I rewrote my sprite drawing code yesterday, I feel that if I write rough drafts of code, and then write the real routine, I'd do a lot better. My first draft of my code yesterday was really sloppy looking, and it was barely understandable. I wonder if most programmers do this...<br /></div><br />Heh, I think I know what you mean. When I started my project, I used to plan everything very carefully, so everything looked nice. Now I just write the stuff directly into the code files, and I'll write whatever it takes to test my new ideas, even if the code is not very pretty.<br /><br />After I see that the ideas work fine, I rewrite the code, making it look better, adding comment and maybe even optimizing a little.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Dec 20, 2007 10:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2007-12-20T09:51:48-07:00</updated>
<published>2007-12-20T09:51:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29776#p29776</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29776#p29776"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29776#p29776"><![CDATA[
Great idea! Right now, I have a destination address already calculated for the next frame. I really should stay away from loops. Loops really do add up, but that looks like it doesn't take very long at all. I think I CAN modify my routine to do 1 string of writes per 8 pixels, however I would have to really change my code. <br /><br />I'm thinking of writing all of my routines at least twice. Since I rewrote my sprite drawing code yesterday, I feel that if I write rough drafts of code, and then write the real routine, I'd do a lot better. My first draft of my code yesterday was really sloppy looking, and it was barely understandable. I wonder if most programmers do this...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Thu Dec 20, 2007 9:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-12-19T23:26:06-07:00</updated>
<published>2007-12-19T23:26:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29772#p29772</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29772#p29772"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29772#p29772"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />If my rows or columns are split between two nametables, I write the data for one half in one frame, and write the data for the second half in the next.<br /></div><br />Boy, you'd flip if you saw my routines that draw columns and rows!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I suppose yours has to support really really high speeds, huh?<br /></div><br />16 pixels per frame, in both directions if necessary! <img src="http://forums.nesdev.com/images/smilies/icon_cool.gif" alt="8)" title="Cool" /><br /><br />I always draw full metatiles, never just tiles. Rows are always 17 metatiles long, and columns 15 metatiles tall. I always assume they will cross the name table barrier (rows in fact always do, because they are wider than the name table, and columns almost always do to). It's really not hard at all to handle this...<br /><br />See, you most likely have the destination address (the one you write to $2006) stored somewhere, because you use it to write the first half of the row/column being updated. After you write the first half, with a small modification to that address you are ready to draw the second half! When drawing rows, for example: if you crossed the edge of the name table and entered the other one, you should flip the bit in the address that selects between the 2 name tables (so, if you updated name table 1, now you'll update name table 0). The other little modification is to clear all the bits that select the X coordinate, because since you just entered a new name table, you'll sure start updating if from the absolute left.<br /><br />What I'm saying is that you don't have to spread your update across 2 frames, since with this simple modification of the address you can find the address to where the rest of the tiles should go.<br /><br />Now, if your problem is speed, it mostly likely is because you are drawing the tiles with a loop. Loops are slow, and for maximum speed I use a series of LDA &amp; STA instead of loops. You may ask how can I do this if I don't know how many tiles will go to each name table... the answer is pretty simple... a jump table. So, my drawing "loop" looks something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">DrawMetatiles:<br />   ;Y holds the number of metatiles to draw<br />   lda SkipDrawLo, y<br />   sta TempAddress+0<br />   lda SkipDrawHi, y<br />   sta TempAddress+1<br />   ;Skip a number of metatiles<br />   jmp &#40;TempAddress&#41;<br />Draw16:<br />   lda TileBufferA-16, x<br />   sta $2007<br />   lda TileBufferB-16, x<br />   sta $2007<br />Draw15:<br />   lda TileBufferA-15, x<br />   sta $2007<br />   lda TileBufferB-15, x<br />   sta $2007<br /><br />&#40;...&#41;<br /><br />Draw02:<br />   lda TileBufferA-02, x<br />   sta $2007<br />   lda TileBufferB-02, x<br />   sta $2007<br />Draw01:<br />   lda TileBufferA-01, x<br />   sta $2007<br />   lda TileBufferB-01, x<br />   sta $2007<br />Draw00:<br />   rts</div><br /><br />Two tables hold the address of where to skip, depending on how many metatile I have to draw:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SkipDrawLo:<br />   .db &lt;Draw00, &lt;Draw01, &lt;Draw02, &lt;Draw03, &lt;Draw04, &#40;...&#41;<br />SkipDrawHi:<br />   .db &gt;Draw00, &gt;Draw01, &gt;Draw02, &gt;Draw03, &gt;Draw04, &#40;...&#41;</div><br /><br />The routine must be called twice, once for each half. Note that because of the "Draw00" label, you can always assume the tiles are divided, because even if they aren't, there will be no harm done.<br /><br />Then there is the value of X... This is a big part of the trick: the first time the routine is called, it should be the number of metatiles you want to draw. So if you wanted to draw 4 metatiles, X would be 4. The jump would send you directly to the "Draw4" label, where the value at "TileBufferA-02, x" is loaded. If X is 4, the address will be TileBuferA, which is the beginning of the buffer, and this is exactly what we want.<br /><br />For the second time, X should be whatever makes the last copy command see the last slot of your buffer. Since this is a row of 17 metatiles, the last slot is numbered 16, and for that last address evaluation (TileBufferA-01, x) to be 16, X must be 17. So, the calls to the drawing routine will look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   ;WRITE THE ADDRESS TO $2006 HERE!<br />   ldy TileCount0<br />   ldx TileCount0<br />   jsr DrawMetatiles<br />   ;MODIFY THE ADDRESS AND WRITE TO $2006 HERE!<br />   ldy TileCount1<br />   ldx #$11<br />   jsr DrawMetatiles</div><br />There you have it, the secret for my fast scrolling! =) Of course, since I draw full metatiles, I actually call the drawing routine 4 times for a row, and 4 times for a column, for a total of 8 calls if both rows and columns are being rendered, and the value sent in X is more complex because it selects between rows and columns, first half or second half, left or right side, etc. But it's still pretty fast.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Dec 19, 2007 11:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2007-12-19T20:58:02-07:00</updated>
<published>2007-12-19T20:58:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29767#p29767</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29767#p29767"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29767#p29767"><![CDATA[
Here's the code, but it didn't really end up taking less time. But it's commented:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;The first three bytes of the sprite definition are the number of tiles in the metasprite,<br />;The X dimension, and the Y dimension of the metasprite. The rest of the bytes<br />;define colors and tile IDs. So the next byte after the Y dimension byte will represent<br />;the Tile ID for the first tile. The next one will be the color data for that tile.<br />;The next two will represent the tile ID and the color for the next cel in the metasprite.<br />;It goes on for however many cels are in the metasprite.<br /><br />DrawMetaSprite:<br />   ldx #4<br />   ldy #0<br />-<br />   iny<br />   bne -<br />   dex<br />   bne -<br />   lda #$00<br />   sta $2001<br />   lda #&lt;NoFlipX      ;We may be jumping to these locations<br />   sta TempAddL      ;Depending on if there's a flip or not.<br />   lda #&gt;NoFlipX<br />   sta TempAddH<br />   lda #&lt;NoFlipY<br />   sta TempAdL1<br />   lda #&gt;NoFlipY<br />   sta TempAdH1<br />   ldy #0         ;Start at the beggining. Obviously.<br />   lda &#40;SampleL&#41;,y      ;Load the number of cels in the metasprite.<br />   sta SpritesLeft<br />   iny         ;Go to the next byte.<br />   lda &#40;SampleL&#41;,y      ;Load the width of the metasprite<br />   sta DimX<br />   iny         ;Go to the next byte.<br />   lda &#40;SampleL&#41;,y      ;Load the Height of the metasprite.<br />   sta DimY<br />   iny         ;Go to the next byte.<br /><br />   <br />;**************************************************<br />   sec         ;Here we take the coords of the object,<br />   lda ObjectXL      ;Subtract the coordinates of the screen<br />   sbc ScreenXL      ;And it becomes the relative coordinates of the metasprite.<br />   sta StartingXL      ;But we need to remember it for when we start a new row<br />   sta CurrentXL      ;Of sprites, so we have a starting X value.<br /><br />   lda ObjectXH      ;All coordinates are 16-bit. So we need to take that into account.<br />   sbc ScreenXH      ;The only reason for a 16-bit X coordinate is so we can determine<br />   sta StartingXH      ;if a cel in a sprite will be displayed or not.<br />   sta CurrentXH<br /><br />;*********************<br />   sec         ;The same goes for the Y coord. However, a starting value and<br />   lda ObjectYL      ;The current value do not need to be seperate, because we don't<br />   sbc ScreenYL      ;Need to refresh the value once we're done with it.<br />   sta CurrentYL<br /><br />   lda ObjectYH<br />   sbc ScreenYH<br />   sta CurrentYH<br />;**************************************************<br /><br />   bit FlipStatus      ;We'll test to see if it's flipped horizontally.<br />   bvc +         ;If not, skip ahead.<br />   ldx DimX         ;To calculate the X position of the opposite side,<br />   dex         ;We use the formula NewXPos = &#40;Width - 1&#41; * 8 + CurrentXPos<br />   txa         ;After getting that, we'll tell the routine to subtract 8<br />   asl a         ;For every tile instead of adding. We lay the tiles right to left<br />   asl a         ;Instead of left to right.<br />   asl a<br />   clc<br />   adc StartingXL<br />   sta StartingXL<br />   sta CurrentXL<br />   lda StartingXH<br />   adc #0<br />   sta StartingXH<br />   sta CurrentXH<br />   lda #&lt;FlipHrzntl      ;Instead of doing comparisons to see if it's flipped or not, we'll just jump<br />   sta TempAddL      ;Directly to where we need to go with a Temporary address.<br />   lda #&gt;FlipHrzntl<br />   sta TempAddH<br /><br />;*********************<br />+<br />   bit FlipStatus      ;We check here to see if there's a vertical flip<br />   bpl +         ;If not, just skip ahead.<br />   ldx DimY         ;We can use a formula very similar to the one to<br />   dex         ;calculate the Y coord of the bottom cels.<br />   txa         ;NewYPos = &#40;Height - 1&#41; * 16 + CurrentYPos<br />   asl a<br />   asl a<br />   asl a<br />   asl a<br />   clc<br />   adc CurrentYL<br />   sta CurrentYL<br />   lda CurrentYH<br />   adc #0<br />   sta CurrentYH<br />   lda #&lt;FlipVrtcl      ;We also tell the routine to go bottom to top instead of<br />   sta TempAdL1      ;Top to bottom if there's a vertical flip.<br />   lda #&gt;FlipVrtcl<br />   sta TempAdH1<br /><br />;**************************************************<br />+<br />   lda DimX         ;Here we copy the value of the X dimension because<br />   sta Variable1      ;We'll be needing to do a certain loop for however many tiles the sprite is wide.<br />   ldx CurrentPos      ;Start where we left off if we call this routine more than once. &#40;It starts off as 0&#41;<br />DrawSprites:<br />   lda CurrentYH      ;Before doing anything, we need to check if the cel is actually on screen<br />   beq +         ;If the High byte is used, it's off screen.<br />   iny         ;Move on to the next set of definitions<br />   iny<br />   jmp ++         ;Skip past table copying<br />+<br />   lda CurrentXH      ;See if the high byte is used for the X coord<br />   beq +<br />   iny         ;Move on to the next set of definitions<br />   iny<br />   jmp ++         ;Skip past the copying<br />+<br />   lda CurrentYL      ;Copy the current Y value<br />   sta OAMPage,x<br />   inx<br />   lda &#40;SampleL&#41;,y      ;Copy the current tile ID<br />   sta OAMPage,x<br />   iny         ;Get the next byte<br />   inx<br />   lda &#40;SampleL&#41;,y      ;Copy the Attribute data<br />   ora FlipStatus      ;This byte can include priority data, I just called it FlipStatus for some reason.<br />   sta OAMPage,x<br />   iny<br />   inx<br />   lda CurrentXL      ;Copy the X position<br />   sta OAMPage,x<br />   inx<br />++<br />   jmp &#40;TempAddL&#41;<br />--<br />   dec Variable1<br />   bne DrawSprites<br /><br />   lda DimX<br />   sta Variable1<br />   lda StartingXL<br />   sta CurrentXL<br />   lda StartingXH<br />   sta CurrentXH   <br />   jmp &#40;TempAdL1&#41;<br />-<br />   dec DimY<br />   bne DrawSprites<br />   lda #$1E<br />   sta $2001<br />   stx CurrentPos<br />   jsr Clear_Unused<br />   ldx #0<br />   stx CurrentPos<br />   jmp Return<br /><br />NoFlipX:<br />   clc<br />   lda CurrentXL<br />   adc #8<br />   sta CurrentXL<br />   lda CurrentXH<br />   adc #0<br />   sta CurrentXH<br />   jmp --<br />NoFlipY:<br />   clc<br />   lda CurrentYL<br />   adc #16<br />   sta CurrentYL<br />   lda CurrentYH<br />   adc #0<br />   sta CurrentYH<br />   jmp -<br />FlipHrzntl:<br />   sec<br />   lda CurrentXL<br />   sbc #8<br />   sta CurrentXL<br />   lda CurrentXH<br />   sbc #0<br />   sta CurrentXH<br />   jmp --<br />FlipVrtcl:<br />   sec<br />   lda CurrentYL<br />   sbc #16<br />   sta CurrentYL<br />   lda CurrentYH<br />   sbc #0<br />   sta CurrentYH<br />   jmp -<br /><br />Clear_Unused:<br />   lda #0<br />   sec<br />   sbc CurrentPos<br />   tay<br />   ldx CurrentPos<br />   lda #$FF<br />-<br />   sta OAMPage,x<br />   inx<br />   dey<br />   bne -<br />   rts</div><br /><br />At the beggining, I waste time just to get it out of Vblank. Then I shut the screen off until it's done with the loop. And the thing at the end will be changed. I won't jump directly into the clearing routine after the first sprite is done being drawn. There are many things just there for testing purposes. I'll also be doing a different routine to check whether or not the metasprite is touching the screen. After confirming, I'll call the routine.<br /><br />EDIT: I had to hurry, so I left some things out of my post. Yes, my object positions are always defined by the top left coordinate. I don't really see a reason to change it. I think it works fine the way it is.<br /><br />But after looking at your routine again, I notice that it allows for objects that aren't completely surrounded by a box, while mine doesn't. This would be really good in some cases, but generally metasprites are so small that you wouldn't really have sprites displayed that are blank tiles. In my game, most of the background enemies are the big ones. But yours allows for it because you define all the positions in the metasprite. I personally see this as a lot of ROM being used, but if it works for you, that's good.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I will not work on this again until my scrolling engine fully works. I got the columns updating fine now, I just gotta do the rows, but I got everything pretty much worked out already. There's some tweaking to the code that handles attributes too.<br /></div><br /><br />I took a long break from NESdev a couple months ago. As soon as I got back in, I finally conquered that task once and for all. I hope to never have to make another scrolling routine. I felt really really good once I finished it, because I can use it in pretty much any game that uses scrolling. I just need to tweak it to allow scrolling speeds faster than 4 pixels. If my rows or columns are split between two nametables, I write the data for one half in one frame, and write the data for the second half in the next. This is the reason I can't scroll faster than 4 pixels a frame, because I update every section of 8 pixels. By the time the second part of the column/row needs to be written, it's already displaying a new column/row that needs to be updated. So the first half of the column/row would be updated correctly, while the next part appears in the newly displayed row/column. It's dumb, and I have to fix it. Then I'll be able to scroll 8 pixels a frame. This will be a problem for my character falling down a long pit or something, because gravity will grow to have the character falling faster than 4 pixels a frame, and my camera needs to follow the character.<br /><br />I suppose yours has to support really really high speeds, huh?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Wed Dec 19, 2007 8:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-12-19T20:40:32-07:00</updated>
<published>2007-12-19T20:40:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29765#p29765</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29765#p29765"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29765#p29765"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />EDIT: I've tested my new routine. It takes about as long as yours, Tokumaru. I can probably shorten it a bit.<br /></div><br />When you optimize it, tell me what you did, maybe you can give me some ideas! =) I will not work on this again until my scrolling engine fully works. I got the columns updating fine now, I just gotta do the rows, but I got everything pretty much worked out already. There's some tweaking to the code that handles attributes too.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I just read the data as is this time, and calculated the coordinates for that specific cell depending on whether or not it was flipped. For a flip, I took the tile width of the sprite - 1, multiplied it by 8, and just added it to the X coord. This will give me the X coord for the tile on the right side of the metasprite. I then subtract 8 for every tile placement instead of adding. I did the same for vertical flips, except I multiplied the vertical position -1 by 16.<br /></div><br />Yeah, I think this is the way to go for grid-aligned metasprites. Now let me ask you one thing: from what I can see, your coordinates always indicate the top left corner of the sprite, right? This is the only part I seem to diagree with you, as I chose to have a pair or coordinates relative to the central point of the object (Sonic's is at the bottom, by his feet, centered horizontally) indicate where the sprites are. This keeps me from having to manually calculate the position of the sprites every time... Well, unless you consider your player's coordinates to be at the top left corner, like the sprite. I wouldn't do that, but if it works for you, OK.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also, Tokumaru, I see in your first screen shot that the top of the screen is pink partially for seeing how long the routine is. Did you take Vblank into account when seeing how long your routine was? In the beggining of my routine, I waste time so I can get out of Vblank to see how many scanlines it takes.<br /></div><br />Yeah, there are other things before the sprite code that take up most of VBlank (I update the palette, draw a few patterns, and there's some other test code), so I guess that was pretty accurate.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Dec 19, 2007 8:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2007-12-19T18:16:40-07:00</updated>
<published>2007-12-19T18:16:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29763#p29763</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29763#p29763"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29763#p29763"><![CDATA[
That gives me some great ideas! Inverting the object as a whole sounds much simpler than going through some inverting loop that takes a million cycles.<br /><br />And also, I did the same thing in my code. I took the sprite, calculated it's coordinates, and if the high byte was used, I simply moved on to the next cel in the object. This I would not change.<br /><br />I just have to think about how to go about this wisely. I won't use arrays, because in the end, it's a waste of time and RAM. The only thing I'll use arrays for is updating while scrolling. But yeah, inverting the top left corner to the other side is a really smart idea.<br /><br />Also, in my sprite tables, I had the color data compressed, and this is why it took a lot longer. I had 4 attributes compressed into one byte, so I had to do numerous shifts to get these out. But I think I'll just stick to using decompressed values, but I feel like I wasting so much by only using 2 bits in every definition. What do you think about that? Should I leave them decompressed?<br /><br />And yes, I have my sprites in arranged grids, so I have one general coordinate for that object. I really have to think about how to do this routine wisely.<br /><br />EDIT: I've tested my new routine. It takes about as long as yours, Tokumaru. I can probably shorten it a bit. I would post it up, but I don't have any comments or anything on it, and it wouldn't make much sense. I'll post it up later.<br /><br />You said something about inverting your positions. I avoided inverting pretty much. Last time, I took a different tile/color for a certain set of coordinates if the object was flipped. BAD IDEA. I just read the data as is this time, and calculated the coordinates for that specific cell depending on whether or not it was flipped. For a flip, I took the tile width of the sprite - 1, multiplied it by 8, and just added it to the X coord. This will give me the X coord for the tile on the right side of the metasprite. I then subtract 8 for every tile placement instead of adding. I did the same for vertical flips, except I multiplied the vertical position -1 by 16.<br /><br />But drawing a 2x4 sprite took about 12 scanlines, but this can be shortened. I would really rather draw from an array in RAM, because I could compress my tables to not take up so much space.<br /><br />I'll modify my routine to take less time. I'll also add some comments and post it up.<br /><br />Also, Tokumaru, I see in your first screen shot that the top of the screen is pink partially for seeing how long the routine is. Did you take Vblank into account when seeing how long your routine was? In the beggining of my routine, I waste time so I can get out of Vblank to see how many scanlines it takes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Wed Dec 19, 2007 6:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-12-17T10:00:07-07:00</updated>
<published>2007-12-17T10:00:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29663#p29663</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29663#p29663"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29663#p29663"><![CDATA[
Oh my it's amazing how you can get complicted stuff from a simple stuff.<br /><br />Well, I don't see the problem to have all sprites definition is a single bank. And bankswitch in MMC1 is a bit longer than with a discrete logic mapper, but it's really nothing to worry about I think. 5 writes and 4 shifts take something like 30 cycles or so.<br /><br />And myself I've used completely different sprite definitions for flipped sprites, so that they aren't forced to be symetric. However it's a top-down game so this is really different than a plaftomer where everything is flipped horizontally anways.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Dec 17, 2007 10:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-12-16T22:43:54-07:00</updated>
<published>2007-12-16T22:43:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29659#p29659</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29659#p29659"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29659#p29659"><![CDATA[
You know something that sucks? Having to switch banks to access different types of data (level maps, sprite mappings, etc) with the MMC1, which requires a lot of time to complete a register write.<br /><br />I'm saying this because I need the screen mappings to be loaded when the object routines are executed, because objects my need that information when walking, and so on. The actual level map and the object definitions are in RAM, so those are fine. But to render their sprites, the sprite mappings must be loaded. They can't be in the same bank, because there are many different screen mappings, spread across multiple banks.<br /><br />The only solution I see is to buffer the parameters that would otherwise be sent to the drawing routine, and send them all at once after all the objects have been processed, so I'd bankswitch only once. This solution is annoying, because it uses more RAM, and wastes more time with the menaging of this new list.<br /><br />Another option would be to dedicate part of the object RAM itself to hold the buffered values, and just scan all objects again sending the buffered values to the drawing routine, when these are present. In any case, the sprites should be rendered last.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Dec 16, 2007 10:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-12-16T21:48:56-07:00</updated>
<published>2007-12-16T21:48:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29658#p29658</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29658#p29658"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29658#p29658"><![CDATA[
Yeah, your times are not looking very good... 32 scanlines is the time it took me to draw 3 2x4 sprites, and that's not very good either.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />Tokumaru, I look at your code, and I really don't understand how you handle flips. Could you explain?<br /></div><br />You mean vertical and horizontal flipping? Well, my definitions have the relative (relative to the position of the object, in my routine, SpriteX and SpriteY) coordinates.<br /><br />So, I can say that a sprite is 8 pixels to the left of the central point and 16 pixels above it, for example. Before adding the relative X value, I check if the sprite is fliped horizontally. If yes, I invert the 8 turning it into -8, so it's moved to the other side. But this is still not enough, because the cordinates of the sprite are for it's top left corner, but when fliping it you'd kinda like those coordinates to be for the right corner, but since this is impossible, I just move the coordinates of the object to the side to compensate for this before entering the loop. Flipping vertically works exactly the same.<br /><br />About inverting the number, to do it you have to inver all the bits (eor #$ff) and add one. To avoid having to add one to each sprite, I take this 1 into account when compensating for the width of the sprite as I said above.<br /><br />The idea is that I tweak the coordinates of the object in case of flipping, so that each relative coordinate can be flipped with a simple EOR command. When outputting the attributes of each sprite, the individual flipping bits are EOR'ed with the flipping bits of the whle object, so if the object used any flipped sprites originally, they'd be unflipped, causing them to look flipped relative to the other ones that were just flipped. Well, this sounded confusing, but trust me: the definitions an contains flipped and unflipped sprites, and the final structure of the object is maintained in case o flipping because all the sprites will be flipped, even the ones that were already flipped.<br /><br />But if I'm not mistaken, your sprites are arranged in grids, right? So you don't define the coordinates of each sprite, but only of the whole block, right? I must admit that this seems harder to flip. But since this was my original design, I had a solution for this.<br /><br />My designe used relative coordinates for the top left corner of the grid, it's width and height (in sprite units), and then the indexes and attributes of each individual sprite. To flip that, You'd also have to invert the relative coordinates to have them go to the other side of the block. When inverting, you'd probably have to account for the width of the sprites (8) too. After that you got the coordinates of the first sprite, and can enter the loop that will draw them all.<br /><br />In this loop, you should check the high byte of each coordinate and if both are 0, output the sprite. Increment the X coordinate for the next sprite. The amount you use to increment should probably be in a variable, because you'll want to add 8 when it's not flipped and -8 when it is. Just set this variable with the proper value before entering the loop.<br /><br />I'd keep the number of horizontal sprites (width of the block) in an index register, so that I could decrement it and detect when the first row ended. When the row ends, reset the X coordinate (to the number yu calculated right before entering the loop), and increment the Y coordinate by 16 or -16 (the amount should be in a variable, like for the X coordinate), assuming you are using 8x16 sprites. When the number of vertical sprites (height) ends, you're done.<br /><br />That would not need any buffers, you could just keep updating the same pair of coordinates for all the sprites (and just keep the calculated X coordinate for when starting new rows). This is how I'd do it.<br /><br />I'm considering implementing a routine like this and use both types of sprites in my game, because this other type seems to leave more room for otimization. Depending on the type of the object, it will call one routine or the other, and I won't waste precious cycles when they are not needed.<br /><br />Oh, I think I should advise against using a lot of RAM buffers/arrays, specially when it's possible to output the data directly. Handling arrays is a very time consuming process, because of the loops and all that. Did you see how the output in my routine works? When I output the X and Y coordinates of the sprite, I always write them to the OAM page directly, even before knowing if they are valid or not. I leave the validity check for later (and i don't even store the high byte anywhere, I just need to know if it is zero or not), and in case a coordinate was not valid, I simply do not advance a slot, and that invalid information will be overwritten by the next valid sprite. This makes the cases when the coordinates are valid much faster then buffering the results.<br /><br />Heh, I had never thought that this task could use so much CPU time!<br /><br />Bregalad, you said you used tables to make this process faster... what kind of tables are those? I can't think of anything you could pre-calculate to make this whole process faster...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Dec 16, 2007 9:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2007-12-16T19:18:32-07:00</updated>
<published>2007-12-16T19:18:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29652#p29652</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29652#p29652"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29652#p29652"><![CDATA[
So I made my sprite drawing routine, and I think I'm gonna have to come up with a better idea. What I did was I had the tile values and attribute values in  an array in RAM. After fetching those, I calculated the coordinates of every sprite, and I copied all the data from the arrays into the OAM page. In the tile fetching routine, I checked to see if there was a flip. If so, I copied the values accordingly. The problem is that I didn't do it for the coloring.<br /><br />It took me about 8 scanlines to draw an 2x2 sprite, which I don't think is very good. If I took a 4x4, it'd take about 32 scanlines. So I think I might want to take a different approach.<br /><br />Tokumaru, I look at your code, and I really don't understand how you handle flips. Could you explain?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Sun Dec 16, 2007 7:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-12-16T14:23:57-07:00</updated>
<published>2007-12-16T14:23:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29644#p29644</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29644#p29644"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29644#p29644"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Oh and by the way I don't know any games that runs solwer than the console framerate while looking good. I never played doom, but this is an early 3D game, so I think the lag is excusable. I also never played any original gameboy Castlevania games, I was talking about NES Castlevania games that runs at full framrate (60 fps on the NTSC and 50 fps on PAL).<br /><br />I don't know much about original Gameboy games, but I'm pretty sure the only gameboy game I really love, wich is Final Fantasy Adventure, runs at full speed. All 2D Gameboy Color and Advance games I played seems to run at full speed.<br /></div><br />Or maybe they did a good job of it and you didn't even notice the difference! =)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Dec 16, 2007 2:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-12-16T14:20:33-07:00</updated>
<published>2007-12-16T14:20:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29643#p29643</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29643#p29643"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29643#p29643"><![CDATA[
I see what you mean... but this can only be done when one of the numbers is 8-bits and positive. But yeah, I could do what you suggested. This part of the code is still outside of the loop, so I could use X or Y if I needed to. But inside the loop, X is used to point to the sprite slots (OAM mirror) and Y is used to point to the sprite definitions.<br /><br />About the word "mazing", I believe it makes some sense because of sprite cycling, where the sprites are distributed semi-randomly (or "mazed") across the sprite slots. I don't know. =)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Dec 16, 2007 2:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-12-16T14:05:32-07:00</updated>
<published>2007-12-16T14:05:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29642#p29642</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29642#p29642"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29642#p29642"><![CDATA[
@ Tokumaru : The inc and dec instruction are made to handle 16-bit opperation when the high byte is only here to serve to test purpose. For example this :<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> clc<br />   lda SpriteY+0<br />   adc #$0f<br />   sta SpriteY+0<br />   lda SpriteY+1<br />   adc #$00<br />   sta SpriteY+1<br /><br />   ;Fix the coordinate if the sprite is flipped vertically<br />   bit SpriteAttrib<br />   bpl NoVertFlip<br />   sec<br />   lda SpriteY+0<br />   sbc #$0f<br />   sta SpriteY+0<br />   lda SpriteY+1<br />   sbc #$00<br />   sta SpriteY+1 </div><br /></div><br />Could be optimized in this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda #$00<br />   sta Temp<br />  clc<br />   lda SpriteY+0<br />   adc #$0f<br />   sta SpriteY+0<br />   bcc +<br />   inc Temp<br />+<br />   ;Fix the coordinate if the sprite is flipped vertically<br />   bit SpriteAttrib<br />   bpl NoVertFlip<br />   sec<br />   lda SpriteY+0<br />   sbc #$0f<br />   sta SpriteY+0<br />   bcs +<br />   dec Temp<br />+<br />etc...<br /></div><br />Or even better use X or Y instead of a temporary variable (but this isn't always managable, especially in sprite mazing routine where you keep an index indexing the OAM all the time (at least I do this)).<br /><br />@ tepples : I'm don't remember where mazing come from, but I'm pretty sure I didn't made it up. Isn't this a correct english word ?<br /><br />Oh and by the way I don't know any games that runs solwer than the console framerate while looking good. I never played doom, but this is an early 3D game, so I think the lag is excusable. I also never played any original gameboy Castlevania games, I was talking about NES Castlevania games that runs at full framrate (60 fps on the NTSC and 50 fps on PAL).<br /><br />I don't know much about original Gameboy games, but I'm pretty sure the only gameboy game I really love, wich is Final Fantasy Adventure, runs at full speed. All 2D Gameboy Color and Advance games I played seems to run at full speed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Dec 16, 2007 2:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-12-16T13:17:52-07:00</updated>
<published>2007-12-16T13:17:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29640#p29640</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29640#p29640"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29640#p29640"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I think no game where the player is supposed to interract in real time should ever run slower than the console's framerate.<br /></div><br />Doom for PC ran at much slower than the 70 fps of VGA mode 13h. A lot of PS1 games ran at 30 or even 20 fps. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />All Mega man games runs at the consle frame rate, and all Castlevania games too.<br /></div><br />Including the Castlevania games on Game Boy?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Hey, I'm impressed. If I put the maximum of 8 objects, the sprite mazing routine effectively takes a lot of time.<br /></div><br />Where did the word "mazing" come from?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 16, 2007 1:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-12-16T12:46:11-07:00</updated>
<published>2007-12-16T12:46:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29639#p29639</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29639#p29639"/>
<title type="html"><![CDATA[Sprite mappings]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3772&amp;p=29639#p29639"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />You do everything step by step. I would never do anything like this myself, I'd always take the coordinates perform all checks and calculations on them, and then store them back at the end.<br /></div><br />I'd rather do that too (I'm all for performance rather than making understandable code), but when you are working with 16-bit values there is not much choice... you have to store the result because you have to use A again for the high byte! Unless you used X and/or Y to hold temporary results, something I do in other parts of my code, but for just 1 extra CPU cycle this is hardly worth it.<br /><br />Do you have any ideas on how I could optimize the code above? Optimizing the loop has a much bigger effect than optimizing the setup that comes before it, that's for sure.<br /><br />On a somewhat related topic, the background-drawing routine seems to perform much better than this one. Even when rendering a row and a column in the same frame, many less cycles are used, when comparing to the sprites.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Dec 16, 2007 12:46 pm</p><hr />
]]></content>
</entry>
</feed>