<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - I-CHR: Turn an image sequence into bankswitched CHR</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/">https://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">I-CHR: Turn an image sequence into bankswitched CHR</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/viewtopic.php?f=21&amp;t=17082">https://forums.nesdev.com/viewtopic.php?f=21&amp;t=17082</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Feb 21, 2018 11:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I made a program that can take an image sequence and turn it into bankswitched CHR: <!-- m --><a class="postlink" href="https://kasumi.itch.io/ichr">https://kasumi.itch.io/ichr</a><!-- m --><br /><img src="https://i.imgur.com/IUYpL7y.gif" alt="Image" /><br />It's not super good yet, but it does fix a few tiny issues I have with other CHR tools. It doesn't require an indexed palette to be prepared (though that can still help), and it supports animation for parallax effects and whatever. It's basically one step. Drag image sequence, get nametables, chr, a palette file, etc.<br /><br />I didn't forget about the needs of <a href="https://forums.nesdev.com/viewtopic.php?f=21&amp;t=16921" class="postlink">this topic</a>, I have some ideas of how to get there but not for the first release.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Feb 21, 2018 11:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cool!  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" />  That's pretty useful for something like animated cutscenes, if you're using a pcb with enough banks to support it beside a game. And for previewing tile animations in general, of course. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />Is the delay/duration configurable?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Feb 21, 2018 12:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, frame delay is configurable but only globally. (Up/Down arrow keys change it, R re-exports the ROM) Per frame delay isn't super high priority since the ROM thing is more of a gimmick than the purpose.<br /><br />Here's some other random stuff. The Zelda &quot;sword get&quot; animation and Indivisible title screen show faster and slower delays:<br /><img src="https://i.imgur.com/qp9jakW.gif" alt="Image" /><br />It's not just for super gimmicky 64 frame CHR wasting animation. The Kirby Water is the kind of use case I intend to use it for.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Mar 14, 2018 3:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess this may as well be a &quot;devlog&quot; of sorts of this. I made an auto metasprite thing. (Note it's not uploaded, so don't grab the program expecting it.)<br /><br />Here are all the 8x8 tiles 255 frames of a color reduced Sakura used.<br /><img src="https://i.imgur.com/CBLUJDl.png" alt="Image" /><br />You'll note she's 5 colors +transparency, so overlays were involved. Currently you give it an image sequence and a palette and it creates all the tiles, and metasprites. (They just can access tiles higher than 256.) I have a plan to make it not need the palette, but that's not done yet. It's also pretty slow for that many frames!<br />Here's the 8x16 version: <!-- m --><a class="postlink" href="https://i.imgur.com/WRFCJhI.png">https://i.imgur.com/WRFCJhI.png</a><!-- m --><br />And here are all the frames, in case you were curious how many individual sprites each frame used. <br /><img src="https://i.imgur.com/sMLYykH.gif" alt="Image" /><br />(Too... many... generally. The 8x16 ones could be displayed! I think they'd even all fit in the 256KB MMC3 allows, even accounting for the the space lost due to it all not being accessible at once.)<br /><br />The algorithm could use a bit more work. It currently loses pretty hard unique tile wise to what I did manually for Indivisible. (768 to 526 unique tiles for Ajna.) As far as sprites per metasprite, it does about the same.<br /><br />I do have some ideas of how to improve it unique tiles-wise, but I don't think I'll get <em>a lot</em> closer to what I did manually. The real benefit is that it's automatic not manual. I dunno if I'll release the autometasprite thing anytime soon, but I do plan to work what it does into the background stuff so it can automatically create sprite overlays for title screens or whatever. So <a href="https://forums.nesdev.com/viewtopic.php?f=21&amp;t=16921" class="postlink">this topic?</a> Maybe soonâ„¢.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Mar 14, 2018 3:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Coincidentally I did some rough concept work last week remodelling the barbarian from the game with the same title for the eventuality of working with the epyx guy via NOOpr as a programmer. I'm on the fence wether to use 8x16 (will result in more flickering since it is less flexible with placement, but is less CPU intense and you can use both chr pages) and 8x8 mode (where i'm always on just under the threshold with little wiggle room left). In this downsized remake and because of dynamic placement of sprites, the barbarian is usually 3 or 4, sometimes 2 sprites wide (except when the sword or kick is extended) even though it looks wider when assembled. Hand-placing tiles and their contents is more work but in this case i think it is worth it - unless the script can actually calculate the optimal minimum sprite-per-line bandwidth vs tile usage. It's hard though because you need to balance these two factors using judgment. Maybe it can be defined as &quot;as long as it doesn't use more than n tiles in chr-space, go wild sprite-per-line optimizing&quot;, assuming all tiles are preloaded into chr-ram or is chr-rom and not updated continously. <br /><br /><img src="https://frankengraphics.files.wordpress.com/2018/03/frankengraphics_rough_example.gif" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Mar 14, 2018 8:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess I'd say the primary goal of this program is to make changes free to try. Even using your example: Deciding between 8x16 or 8x8 sprites for the barbarian. I could see how that change would look for all frames of an object in one step. At the end of the day, I want to draw, not think about tile placements.<br /><br />The average Ajna frame has 13 sprites. There are 70 of them. Ajna spans 3 color palettes. Ajna alone uses more than 256 unique tiles, uses more than 512 unique tiles. Going from drawing-&gt;tiles-&gt;metasprites-&gt;game 200 times really discouraged change. In early versions of the game, her range was bad. Which meant reanimating all the attacks. And I avoided doing that forever because it was so much work to actually try different graphics. Now I can draw a stick figure and make sure the range is right before I commit to the animation. Heck, making a change after I've committed to the animation is a snap.<br /><br />I can still hand optimize too, the program imports msp/msb. <br /><br />It's pretty similar for backgrounds. Imagine you could just give NES Screen Tool a PNG and have it make sprite overlays for you. No need to keep specific track of tiles (or even layers) at all. Even now, this program will let you test/check animated backgrounds with a save and a keystroke and you can work in the graphics editor of your choice. (Well, so long as it saves .PNG) Edit: I'd rather fix errors after the drawing than be confined during.<br /><br />I did all of the nickle and diming for tiles in Indivisible. And it shows! It currently beats the algorithm by 242 tiles. Is the game better because of that? Nah. There's even still some planned work on the algorithm that might get it in a much more competitive range.<br /><br />I'm not like... anti hand optimize. It's just... I want it not to be the only option. I certainly do have one game where I'll probably optimize by hand, mostly. But this even gives me a score to beat for that! Say I throw it a frame and it gives me four sprites that don't look beatable. Then I'm done, I don't even have to think about it. If I think I can beat it, I can try!<br /><br />Even if only for prototyping before committing to the final, this whole toolset will save oceans of headache for me. I've got future plans for actual animation (and character) management too. Anything that was a pain to do in Indivisible, I'm making easier with this toolset. How much gets released, I dunno.  <img src="./images/smilies/icon_exclaim.gif" alt=":!:" title="Exclamation" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Lucradan</b> [ Wed Apr 04, 2018 7:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I didn't catch this thread until today.  This is good!<br /><br />I started working on an image tool in C# yesterday.  Let me know if you need help with anything.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Apr 04, 2018 3:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks! You'll be happy to know the local version can automatically get tiles/sprite tiles for sprite overlay scenes.<br />And here's an actual gif of the sprite-&gt;tile process:<br /><img src="https://i.imgur.com/Aj2Y8tD.gif" alt="Image" /><br />It does a pass to guess palettes, then a pass to take tiles. (Then takes what can be a very long time doing a deep deduplication process.) It can be specified how many palettes are available to use (so it doesn't always use all 4) but that's not exposed in the UI yet. It's also just... kind of bad at guessing a good set of sprite palettes.<br /><br />It also now &quot;holds&quot; multiple scenes at once:<br /><img src="https://i.imgur.com/xlkAQji.gif" alt="Image" /><br />But it doesn't yet export all of them to the same ROM. It also doesn't export the sprite overlay data. Getting the exporting cleaned up is my current focus. If all goes well, it should support multiple levels with up to 256 screens each rather than one level with 8 screens.<br /><br />From there I'll move to an animation/hitbox system for metasprites and then maybe use this for an actual game... <br /><br />RE: Help. Well, I might steal the algorithm you described in the other topic if I end up wanting that behavior.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Lucradan</b> [ Wed Apr 04, 2018 4:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What language are your writing this in?  C++/#/Java?<br /><br />You can take the algorithm as you please.  I was working on an algorithm to tackle at the sprite tile extraction.  Curious how you did it and if we could overcome some of the inefficiencies and issues your having.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Apr 04, 2018 5:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's C++. <br /><br />The sprite palette guess algorithm uses the same &quot;find candidate tile&quot; algorithm as the tile take thing. With the tile mask found, it finds the most used colors (up to 3) in that candidate tile mask and removes them from the image within the mask boundary. Then it adds the palette to a list. <br /><br />After all pixels in all frames are taken, it merges the palettes and use counts. (Because the most used palette could be say... just black and red, but you want three color palettes not two.) It then takes the most used palettes until it is impossible to add all the remaining colors. Then it adds the remaining colors to the remaining palette slots such that the image remains possible to display.<br /><br />The find candidate tile mask thing is... a bit complicated. And probably does less well than something less complicated. It looks for corners (a top left corner is defined as an area where the top and left edge of the tile mask are opaque, and moving the tile mask left does not result in the left column still having an opaque tile, and moving the tile mask up does not result in the top column still having an opaque column.) It does... kind of a lot of other stuff to decide which of the candidate corners to actually take. <br /><br />The deep deduplication can take a while because of this:<br /><img src="https://i.imgur.com/gllzUxI.gif" alt="Image" /><br />All of those are the same tile. So they'd all get merged. But for something stupid like Sakura, it's comparing flips of some extremely absurd number of tiles to each other. For a more sane case like the red and blue Tapir above it only takes a few seconds. Since it's fast enough in sane cases, improving it is not really a <em>focus</em>, but I know of a lot of ways to improve it already. The easiest one is to do it after each tile rather than all at the end. <br /><br />The thing I'd most like to work on is reducing tile count, but the thing I think will do the best I've just avoided programming. Here's an example:<br /><img src="https://i.imgur.com/cNW6G9W.png" alt="Image" /><br />That can be displayed with exactly one tile by overlapping same color pixels. But currently the program would grab say... the left side. And then the smaller right side would be grabbed as a separate tile even though the left side tile could be used flipped and overlaid over the opaque pixels that <em>used to be there</em>.<br /><br />I don't care that the palette guessing is bad, because one could very quickly and easily provide a palette if one cares. I also don't care much about the speed of this, since it's not really a real time application. (Even if 255 Sakura frames takes an hour, you only have to wait once. Even updating a few frames would only involve doing the new frames, not all of them.) I care most about tile use, because one can't quickly and easily break down 255 sprite overlay frames into tiles.<br /><br />Edit: If you want the wild test case, I've attached the quantized Sakura frames.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=12323">SakuraMetaPNG.zip</a> [338.33 KiB]
			</span><br />
			<span class="gensmall">Downloaded 52 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Lucradan</b> [ Wed Apr 04, 2018 9:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have something that might be able to repurpose that could help.  I wrote an algorithm a while back that was really fast at finding patterns (from a template) in a large image.  It was designed as part of the image processing algorithm for a modernization of ROB I never finished.  The output was a list of the locations where that patteren appeared on the screen.  If we took all the tile candidates you parsed and ran them through that algorithm (adjusting for vertical and horizontal flipping) we could get half way.  <br /><br />To get the other half, we would have to solve the coverage problem.  Generally this could be written as a binary/integer linear program that could be solved using lpsolve.  Our objective function would just be to minimize the total number candidate tiles needed to cover the image.  The variables would be<br /><br />X(i) = {0,1} if the i-th candidate tile is used<br />Y(i,j) = {0,1} if the i-th tile is placed at the j-th location (enumerated from the first stage)<br />P(x,y) = {0,1} if the pixel at coordinates (x,y) is covered.<br /><br />The coverage constraints would be.<br /><br />1.  Every pixel must be covered<br />2.  If a tile is placed at a location, it must be used<br /><br />I'd still have to account for sprite layering and scanline restrictions, but I think it can be done and still preserve linearity.<br /><br />There might also be some heuristic we could apply before the optimization stage to significantly reduce the number of variables (or candidate locations).<br /><br />For example, in the image you showed of the semicircle, the two candidates would be the long arc (left 8 columns) and short arc (right 7 columns).   Allowing translations and mirrioring, the short arc is a subset of long arc with an offset and might be eliminated because of that.<br /><br />There are some problems I forsee.  One in particular is that just because 2 tiles are &quot;same&quot; they may not be when you add the 8 tiles per scanline constraint.  If you don't include this constraint then the algorithm collapses. Think about the case of a tile with a single pixel.<br /><br />I'll keep thinking about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Apr 04, 2018 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You are talking way over my head. If you are capable of computer sciencing the heck out of this I will probably just end up using what you come up with! I'm not a Computer Science major, I don't think I even know many CS or advanced mathematical concepts.<br /><br />Minimum sprites per scanline alone is (probably) simplish to solve. Start at the top left, grab that 8x8 section. Keep doing it. As simple as it is, it's not easy to beat in many respects. I did the corner thing because I thought it'd come out similar to how I did it manually. But it didn't really, in the end. I bet that simple algorithm would beat my current algorithm total tiles wise AND sprites per metasprite wise. My manual work had a really nice balance. I doubt I can beat it algorithmically. But I can get closer than I am currently.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There might also be some heuristic we could apply before the optimization stage to significantly reduce the number of variables (or candidate locations).</div><br />I think I only ever have 8 candidate locations max at this point. It's corners * 2 because top left and left top value slightly different things. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Think about the case of a tile with a single pixel.</div><br />Right. Any sprite ever can be drawn with exactly 3 unique sprite tiles and I'm not concerned about this. My personal priorities values fewer sprites per metasprite above tile re-use. So in the example, it'd grab either the left OR the right, then in the next iteration it would find the other side as a candidate see if it could draw the <em>small</em> thing with something <em>larger.</em> (Which it could.) I'm not too interested in trying to draw larger things with small things, so the single pixel ends up a non factor for my approach. <br /><br />Basically for any candidate location I can check if any tile already in the set with greater or equal coverage in both dimensions can be placed over the opaque pixels in the candidate tile such that the other pixels in the metasprite would also not change color. It's not so much that I don't have an idea how to do it, it's that I haven't done it because it's not-so-fun a programming task for me. Perhaps constraint programming makes it easy, but I'm pretty unfamiliar. <br /><br />Also, the example was just an example. The situation can come up when the two won't be found as candidates together at the same time. They can be in different frames, or in the same frame after a few iterations, or in different frames in different iterations.<br /><br />If what you're suggesting is a one step thing (do all candidates for a frame at once, or all frames at once) you end up with weird cases like... a black 24x24 metasprite with a white outline. There's lots of solid black tiles in the middle, that can all be eaten out of the middle with the same 8x8 tile, but then the outline makes way more sprites in that frame than are needed. The reason my algorithm is corner focused is because it's actively attempting to eat away the boundaries of a metasprite to avoid cases where a match in the middle looks good, but really just makes more sprites.<br /><br />And that <em>is</em> how I did all the sprites in Indivisible, but with... more awareness about certain things that I am not sure how to teach a program.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Apr 18, 2018 7:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It now has multiple level support, and bank switching:<br /><img src="https://i.imgur.com/xHtQrna.gif" alt="Image" /><br />Diver by <a href="http://justinpaulcyr.tumblr.com/post/130058567945/8bit-4-seasons" class="postlink">Justin Cyr</a>, maps from Link's Awakening and EarthBound Beginnings, Spinning Beach girl by me. The EarthBound Beginnings map is 256 screens. (The whole map for that game is way bigger than even that, but it's also more than 256 tiles so I'm okay not supporting it.)<br /><br />(Functionality still not available for download.)<br />Will now work on exporting metasprites/sprite overlays and UI, and then maybe finally update the version that's publicly available. <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> Then finally start another game...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Apr 18, 2018 11:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, the animation of this girl diving is really very convincting, which contrasts with it's simple shape without outlines which reminds of the early NES games... very fascinating.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Apr 18, 2018 11:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: I-CHR: Turn an image sequence into bankswitched CHR</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just had a first go with this tool, though maybe not for what it was primarily intended for but for one of its side features? It helped me organize a sprite overlay made in PS into a tidy chr at perhaps a quarter of the time it would take doing that with nesst <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /> <br /><br />Being able to import graphics with a user defined palette was key. Thatâ€™s a great feature! Since it is interpretating an rgb bitmap for selecting its palette there were a few palette misinterpretations between my (nesstsâ€™) colour definition and i-chrsâ€™, but nothing that couldnâ€™t be fixed in a few seconds. Any chance you might be interested making it accept a NES .pal binary as an option? I usually have those ready anyway while a bitmap strip on the other hand needs to be made. Not much of a problem, but i might as well ask.<br /><br />Iâ€™m curious as to why the output chr starts (at least in this particular case) with a series of identical blanks? Are those reserved?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>