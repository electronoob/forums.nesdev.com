<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Multilevel metatile example code</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Multilevel metatile example code</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16578">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16578</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Oct 14, 2017 8:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Multilevel metatile example code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">In <a href="https://forums.nesdev.com/viewtopic.php?p=202253#p202253" class="postlink">this post</a>, tokumaru wrote:</div><div class="quotecontent">There are different types of compression that allow almost random access to individual metatiles. I particularly use metatiles (256x256) of metatiles (128x128) of metatiles (64x64) of metatiles (32x32) of metatiles (16x16). Traversing the metatile structure until the 16x16 ones isn't particularly slow.</div><br />Is there any public code for doing this quickly, including attributes?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Oct 14, 2017 10:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Multilevel metatile example code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know what you mean by &quot;quickly&quot;, but here's a &quot;GetBlock&quot; subroutine I've used in the past:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;----------------------------------------------------------------<br />;DESCRIPTION:<br />; Finds the code of the block at the specified map coordinates.<br />;INPUT:<br />; BlockX, BlockY: pixel coordinates of the block to find;<br />;OUTPUT:<br />; A: code of the requested block;<br />;----------------------------------------------------------------<br /><br />&nbsp; &nbsp;Assembler_StartMember Level, GetBlock<br /><br />&nbsp; &nbsp;Assembler_StartAbsoluteVariables System::Scratchpad<br />&nbsp; &nbsp;&nbsp; &nbsp;BlockX: .res 2 ;horizontal coordinate of the block to find<br />&nbsp; &nbsp;&nbsp; &nbsp;BlockY: .res 2 ;vertical coordinate of the block to find<br />&nbsp; &nbsp;&nbsp; &nbsp;MapRowAddress: .res 2 ;pointer used to get screens from the level map<br />&nbsp; &nbsp;Assembler_EndAbsoluteVariables<br /><br />&nbsp; &nbsp;;read the index of the huge structure from the level map (37 cycles)<br />&nbsp; &nbsp;lda BlockY+1<br />&nbsp; &nbsp;and Level::WrapMaskY<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda (Level::MapRowsLow), y<br />&nbsp; &nbsp;sta MapRowAddress+0<br />&nbsp; &nbsp;lda (Level::MapRowsHigh), y<br />&nbsp; &nbsp;sta MapRowAddress+1<br />&nbsp; &nbsp;lda BlockX+1<br />&nbsp; &nbsp;and Level::WrapMaskX<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda (MapRowAddress), y<br /><br />;HugeStructureFound:<br /><br />&nbsp; &nbsp;;read the index of the large structure from the huge structure (19, 20 or 21 cycles)<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;bit BlockY+0<br />&nbsp; &nbsp;bmi :++<br />&nbsp; &nbsp;bit BlockX+0<br />&nbsp; &nbsp;bmi :+<br />&nbsp; &nbsp;lda (Level::HugeStructuresPart0), y<br />&nbsp; &nbsp;jmp LargeStructureFound<br />:&nbsp; &nbsp;lda (Level::HugeStructuresPart1), y<br />&nbsp; &nbsp;jmp LargeStructureFound<br />:&nbsp; &nbsp;bit BlockX+0<br />&nbsp; &nbsp;bmi :+<br />&nbsp; &nbsp;lda (Level::HugeStructuresPart2), y<br />&nbsp; &nbsp;jmp LargeStructureFound<br />:&nbsp; &nbsp;lda (Level::HugeStructuresPart3), y<br /><br />LargeStructureFound:<br /><br />&nbsp; &nbsp;;read the index of the small structure from the large structure (19, 20 or 21 cycles)<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;bit BlockY+0<br />&nbsp; &nbsp;bvc :++<br />&nbsp; &nbsp;bit BlockX+0<br />&nbsp; &nbsp;bvc :+<br />&nbsp; &nbsp;lda (Level::LargeStructuresPart0), y<br />&nbsp; &nbsp;jmp SmallStructureFound<br />:&nbsp; &nbsp;lda (Level::LargeStructuresPart1), y<br />&nbsp; &nbsp;jmp SmallStructureFound<br />:&nbsp; &nbsp;bit BlockX+0<br />&nbsp; &nbsp;bvc :+<br />&nbsp; &nbsp;lda (Level::LargeStructuresPart2), y<br />&nbsp; &nbsp;jmp SmallStructureFound<br />:&nbsp; &nbsp;lda (Level::LargeStructuresPart3), y<br /><br />SmallStructureFound:<br /><br />&nbsp; &nbsp;;read the index of the tiny structure from the small structure (21, 22 or 23 cycles)<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda #%00100000<br />&nbsp; &nbsp;bit BlockY+0<br />&nbsp; &nbsp;bne :++<br />&nbsp; &nbsp;bit BlockX+0<br />&nbsp; &nbsp;bne :+<br />&nbsp; &nbsp;lda (Level::SmallStructuresPart0), y<br />&nbsp; &nbsp;jmp TinyStructureFound<br />:&nbsp; &nbsp;lda (Level::SmallStructuresPart1), y<br />&nbsp; &nbsp;jmp TinyStructureFound<br />:&nbsp; &nbsp;bit BlockX+0<br />&nbsp; &nbsp;bne :+<br />&nbsp; &nbsp;lda (Level::SmallStructuresPart2), y<br />&nbsp; &nbsp;jmp TinyStructureFound<br />:&nbsp; &nbsp;lda (Level::SmallStructuresPart3), y<br /><br />TinyStructureFound:<br /><br />&nbsp; &nbsp;;read the index of the block from the tiny structure (21, 22 or 23 cycles)<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda #%00010000<br />&nbsp; &nbsp;bit BlockY+0<br />&nbsp; &nbsp;bne :++<br />&nbsp; &nbsp;bit BlockX+0<br />&nbsp; &nbsp;bne :+<br />&nbsp; &nbsp;lda (Level::TinyStructuresPart0), y<br />&nbsp; &nbsp;jmp Return<br />:&nbsp; &nbsp;lda (Level::TinyStructuresPart1), y<br />&nbsp; &nbsp;jmp Return<br />:&nbsp; &nbsp;bit BlockX+0<br />&nbsp; &nbsp;bne :+<br />&nbsp; &nbsp;lda (Level::TinyStructuresPart2), y<br />&nbsp; &nbsp;jmp Return<br />:&nbsp; &nbsp;lda (Level::TinyStructuresPart3), y<br /><br />Return:<br /><br />&nbsp; &nbsp;;return<br />&nbsp; &nbsp;rts<br /><br />&nbsp; &nbsp;Assembler_EndMember</div><br />I had pointers in ZP pointing to the 4 quadrants of every type of block, and looking at bits from the coordinates I selected which quadrant to read at each step. This subroutine only reads the index of a 16x16-pixel block from the map, if you want more information about the block you still have to look it up.<br /><br />Now that I'm looking at it again, this does seem to be a bit on the slow side, depending on how many blocks you have to read per frame. I don't see why we can't discuss other possibilities, though. IIRC, this subroutine is meant for random access to anywhere in the map, but when decoding rows and columns of blocks you can probably unroll the code somehow to avoid reading the same blocks over and over (specially the 256x256-pixel block, here called &quot;huge structure&quot;). I never got to do this because at the time I didn't think it was worth the trouble.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Oct 15, 2017 5:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Multilevel metatile example code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for showing what you came up with.<br /><br />Based on statistics gathered from sample backgrounds provided by my artist, I plan to use 64x64 pixels as the coarsest layer, as in <em>Blaster Master</em>.<br /><br />I'm already using the &quot;separate top left coordinates in world and screen&quot; trick to compensate for 64-pixel-tall large structures not dividing evenly into the 240-pixel height of horizontally arranged nametables. (Even with 4-screen, which I doubt this project can use, 60 is just as much a mismatch.) I just draw a blank as to how to efficiently build a row's or column's worth of attributes. Should I take it as a given that if I'm not keeping a 480-byte cache of 16x16s, I'll have to keep at least a 128-byte cache of both attribute tables in order to combine the attributes on the leading and trailing sides of the seam?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Oct 16, 2017 1:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Multilevel metatile example code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />IIRC, my latest free-scrolling engine used 81 bytes for caching attributes, organized as a 9x9 grid, since that's the bare minimum you need in order to represent what's visible on the screen, so that's a bit better than 128, and much better than 256 (4-screen).<br /><br />Working with a 9x9 grid can be pretty awkward though, so I kept 2 variables indicating which square in the grid corresponded to the top left corner of the camera. The vertical coordinate (Y) was pre-scaled by 9 and updated in steps of 9 so it could be added to the horizontal coordinate (X) to form the index of the byte to access. These coordinates were updated whenever the camera moved 32 pixels in the corresponding axis. Tables in ROM helped with wrapping around these coordinates so I didn't have to do it manually.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>keldon</b> [ Fri Oct 20, 2017 7:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Multilevel metatile example code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shouldn't you just need two 8-byte attribute caches for top/bottom and two 7-byte attribute caches for left/right, or am I missing something?<br /><br />You can also store two attribute tables for when row % 4 = 0, and when row % 4 = 2. This way you can just store packed attributes to send straight to the attribute table (even doing away with the 8/7-byte attribute cache).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Oct 20, 2017 7:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Multilevel metatile example code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">keldon wrote:</div><div class="quotecontent">Shouldn't you just need two 8-byte attribute caches for top/bottom and two 7-byte attribute caches for left/right, or am I missing something?</div><br />The reason I cache a whole screen is because I also use this when updating destroyed/collected/whatever blocks anywhere on the screen, not only for scrolling.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>