<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Bagel NES CHR compression.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/">https://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Bagel NES CHR compression.</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/viewtopic.php?f=22&amp;t=14724">https://forums.nesdev.com/viewtopic.php?f=22&amp;t=14724</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Fri Aug 12, 2016 9:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Bagel NES CHR compression.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bagel is a new NES CHR compression codec. It decompresses to 64 byte blocks, saves roughly 43.3% in data size, and is only 3x as slow as a raw memory copy. The block decoder compiles to 137 bytes of ROM. Attached is a zip file containing the encoder, decoder, and a demonstration on the various setups the main block decoder can be used in. The demo also includes a game. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><br />Prerelease discussion follows:<br />---<br /><br /><div class="quotetitle"><a href="http://forums.nesdev.com/viewtopic.php?p=161620#p161620" class="postlink">Last time on PBJ</a>, tepples wrote:</div><div class="quotecontent">Can your decoder break the RLEINC2 runs into fixed-size output packets? Say I wanted to decode 128 bytes, send that to VRAM, decode the next 128 bytes, send that to VRAM, etc. That was my original motivation behind PB8: to be able to decode while rendering is on.</div><br />So lately I've had a few compression ideas that I might try out (and possibly silently fail at). If I were to try to make another compression scheme that had a fixed the decode window of 128 bytes, and has an optional dual segment setup like pb53, would this fulfill 99% of use case of how pb53 is currently used?

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=6697">bagel-compression.zip</a> [57.64 KiB]
			</span><br />
			<span class="gensmall">Downloaded 146 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 12, 2016 9:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ compression format</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JRoatch wrote:</div><div class="quotecontent">So lately I've had a few compression ideas that I might try out (and possibly silently fail at). If I were to try to make another compression scheme that had a fixed the decode window of 128 bytes, and has an optional dual segment setup like pb53, would this fulfill 99% of use case of how pb53 is currently used?</div><br />Probably. But the Stock and Shop sections in <em>RHDE</em> used it for a bunch of 64-byte furniture images. And it might also end up used for a 960-byte nametable (or other multiples of 64 bytes, that is, two nametable rows) followed by rows of attribute data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Sun Aug 21, 2016 10:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some updates on my experiments. I'm mostly in a statistical gathering stage where my test data is &quot;all-nrom.chr&quot;.<br /><br />Initial tests found that matching from 64 bytes back performs marginally better then 128 bytes back. I guess that's because it's the size of a metatile (4 tiles). From that I decided that the block and window size will be 64, and as you said, 64 bytes is also the size of an attribute table.<br /><br />Organizing the data so that all the first planes gets decoded before any of the second planes do, could help with reducing the number of bytes taken up by &quot;duplicate plane&quot; commands. but I'm still trying to find the best way to code that.<br /><br />Out of the various match distances I tried, 2 bytes back did not perform as well as I hoped (I wanted it for the dithering cases). However matching to an implied plane of all 0x00 far exceeded my expectations. I guess the reasons for so many 0x00 bytes interjected everywhere is because of monochrome tiles and sprite transparency.<br /><br />I made up this simple scheme as a demonstration of that last finding:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0xxxxxxx:<br />&nbsp; &nbsp; ASL the control byte to get bit patten for the next 8 bytes.<br />&nbsp; &nbsp; this will force the last byte to be zero, but statistically that's ok for fonts and such.<br />&nbsp; &nbsp; 0 = 0x00, 1 = read new byte<br />1xxxxxxx:<br />&nbsp; &nbsp; For each bit in the control byte<br />&nbsp; &nbsp; 0 = use previous byte, 1 = read new byte<br /><br />Example input:<br />00 00 00 00 00 30 30 00&nbsp; 00 00 00 00 00 00 00 00<br />ff ff ff ff ff ff ff ff&nbsp; 00 00 00 00 00 00 00 ff<br />38 6c 6c 6c 6c 6c 38 00&nbsp; 38 00 00 00 00 00 38 00<br /><br />Example output (with added indenting):<br />03 30 30<br />00<br />80 ff<br />81 00 ff<br />c3 38 6c 38 00<br />41 38 38<br /></div><br />Obviously this simple scheme is generally worst then pb53, *but* still happens to compress SMB1 and DABG better (to 5968 and 4746 bytes respectively). So I think this is a good start.<br /><br />Note to admins: Is it ok to get the last three posts of this thread split into a new thread titled &quot;Another attempt at CHR compression&quot;?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 22, 2016 7:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JRoatch wrote:</div><div class="quotecontent">However matching to an implied plane of all 0x00 far exceeded my expectations. I guess the reasons for so many 0x00 bytes interjected everywhere is because of monochrome tiles and sprite transparency.<br /><br />I made up this simple scheme as a demonstration of that last finding:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0xxxxxxx:<br />&nbsp; &nbsp; ASL the control byte to get bit patten for the next 8 bytes.<br />&nbsp; &nbsp; this will force the last byte to be zero, but statistically that's ok for fonts and such.<br />&nbsp; &nbsp; 0 = 0x00, 1 = read new byte<br />1xxxxxxx:<br />&nbsp; &nbsp; For each bit in the control byte<br />&nbsp; &nbsp; 0 = use previous byte, 1 = read new byte<br /><br />Example input:<br />00 00 00 00 00 30 30 00&nbsp; 00 00 00 00 00 00 00 00<br />ff ff ff ff ff ff ff ff&nbsp; 00 00 00 00 00 00 00 ff<br />38 6c 6c 6c 6c 6c 38 00&nbsp; 38 00 00 00 00 00 38 00<br /><br />Example output (with added indenting):<br />03 30 30<br />00<br />80 ff<br />81 00 ff<br />c3 38 6c 38 00<br />41 38 38<br /></div><br />Obviously this simple scheme is generally worst then pb53, *but* still happens to compress SMB1 and DABG better (to 5968 and 4746 bytes respectively). So I think this is a good start.</div><br />It's similar to <a href="http://wiki.nesdev.com/w/index.php/Tile_compression#Oracle_common_byte" class="postlink">common byte encoding</a> used in <em>The Legend of Zelda: Oracle</em> games for Game Boy Color, where each 16-byte packet starts with a common byte along with a 16-bit bitfield of which bytes in that packet match the common byte (and thus don't need to be coded). As for your particular choice of $00 as the fixed common byte, I tried this before in another demo that I didn't manage to get to a full release before I got the contract to make <em>Haunted: Halloween '85</em> back in March of last year.<br /><br />How well would the RLE mode do if the definition of a &quot;run&quot; is changed from &quot;use the same byte&quot; to &quot;use the byte that most commonly follows the previous byte&quot;? That'd need a 256-byte table of predictions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Note to admins: Is it ok to get the last three posts of this thread split into a new thread titled &quot;Another attempt at CHR compression&quot;?</div><br />I'm still trying to figure out a workable policy of when to grant a split request going forward. Here, when the OP, poster of split point, and requester are same user, with few other users who posted in a topic (and thus few likely to be subscribed to replies through email), it looked like a strong case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Tue Aug 23, 2016 11:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">How well would the RLE mode do if the definition of a &quot;run&quot; is changed from &quot;use the same byte&quot; to &quot;use the byte that most commonly follows the previous byte&quot;? That'd need a 256-byte table of predictions.</div><br />I'm not sure if I understood what you meant by this. So I plotted out some bitmaps that mapped block position, byte value at match distance, and byte value read.<br /><br />I couldn't make sense of the noise in those bitmaps even though it seemed to exhibit some patterns.<br />I did see that the first byte of each 8 byte plane likely had a zero byte preceding it, and that the first plane of each tile tended to zero while the second plane tended to match the first plane.<br /><br />So I tried this scheme out, and while it has obvious shortcomings (namely planes with all 0xff, inverted planes, chr bank duplication, and expansion of uncompressible data), it slightly beats pb53 for 'all-nrom.chr':<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">For each 64 byte block:<br />&nbsp; &nbsp; block header: Each bit in the control byte specifies the type for following 8 planes.<br />&nbsp; &nbsp; 8 planes:<br />&nbsp; &nbsp; &nbsp; &nbsp; type 0 control byte: 0 = use previous byte (first previous byte is 0x00), 1 = read new byte<br />&nbsp; &nbsp; &nbsp; &nbsp; type 1 control byte:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if odd plane; 0 = 0x00, 1 = read new byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if even plane; 0 = byte from previous plane, 1 = read new byte<br /><br />Example input:<br />00 00 00 00 00 00 00 00&nbsp; 00 00 00 00 00 00 00 00<br />ff ff ff ff ff ff ff ff&nbsp; ff ff ff ff ff 30 70 ff<br />00 81 00 ff ff 00 81 00&nbsp; 00 00 00 00 00 00 00 00<br />38 6c 6c 6c 6c 6c 38 00&nbsp; 38 6c 6c 6c 6c 6c 38 00<br /><br />Example output (with indenting):<br />19<br />&nbsp; 00&nbsp; &nbsp; 00<br />&nbsp; 80 ff&nbsp; &nbsp; 06 30 70<br />&nbsp; 5a 81 ff ff 81&nbsp; &nbsp; 00<br />&nbsp; c3 38 6c 38 00&nbsp; &nbsp; 00<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Wed Aug 24, 2016 10:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, I have a thing that's at nice compromise between high complexity and small file size. It's just like the previous post but with 2 special codes to signal a inverted+0xff plane and for duplication of the previous 64 byte block.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">First, 1 byte for the block count ranging from 1-128 (or more if you want nametables as well).<br />&nbsp; &nbsp; &quot;0 blocks&quot; is a special mode where 64 blocks are interleaved with 64 more blocks.<br />For each 64 byte block:<br />&nbsp; &nbsp; block header: Each bit in the control byte specifies the type for following 8 planes.<br />&nbsp; &nbsp; &nbsp; &nbsp; if block header is 0x00 and first plane control byte is 0x00: duplicate previous 64 byte block.<br />&nbsp; &nbsp; 8 planes:<br />&nbsp; &nbsp; &nbsp; &nbsp; type 0 control byte:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if odd plane; 0 = 0x00, 1 = read new byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if even plane; 0 = byte from previous plane, 1 = read new byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if whole control byte is 0xff:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; on odd planes, 0xff 8 times<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; on even planes, inverted previous plane<br />&nbsp; &nbsp; &nbsp; &nbsp; type 1 control byte: 0 = use previous byte (first previous byte is 0x00), 1 = read new byte<br /></div><br />Out of the 193 CHR files I tested, this scheme only lost to 6 of them against pb53 (including &quot;Nuts &amp; Milk&quot; and &quot;Othello&quot;). On average the scheme saves 41.7% on filesize. For comparison <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5860" class="postlink">tokumaru's compression</a> saves 48.1% and pb53 saves 38.3%.<br /><br />The next step is for me to implement the NES decoder and python encoder/decoder. For the NES I plan to use only 0x0140~0x017f for the decode buffer. The duplicate block command will be implemented by simply not touching the decode buffer.<br /><br />Questions:<br />What should I name this thing?<br />What do I need to consider if I'm implementing this as a drop in replacement for pb53?<br />How should I handle input data that's not a multiple of 64 bytes?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 25, 2016 5:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JRoatch wrote:</div><div class="quotecontent">For the NES I plan to use only 0x0140~0x017f for the decode buffer. The duplicate block command will be implemented by simply not touching the decode buffer.<br />[...]<br />What do I need to consider if I'm implementing this as a drop in replacement for pb53?</div><br />An issue related to real-time CHR loading: If your decode buffer is 64 bytes, and you can produce only one output per frame (as implied by the fixed decode buffer address), you won't be able to fill the entire vblank. Something that expects 128 bytes per frame, such as loading screenshots in the Action 53 menu, would become slower.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Thu Aug 25, 2016 7:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">JRoatch wrote:</div><div class="quotecontent">For the NES I plan to use only 0x0140~0x017f for the decode buffer. The duplicate block command will be implemented by simply not touching the decode buffer.<br />[...]<br />What do I need to consider if I'm implementing this as a drop in replacement for pb53?</div><br />An issue related to real-time CHR loading: If your decode buffer is 64 bytes, and you can produce only one output per frame (as implied by the fixed decode buffer address), you won't be able to fill the entire vblank. Something that expects 128 bytes per frame, such as loading screenshots in the Action 53 menu, would become slower.</div><br />For precisely this reason is why I'm choosing 0x0140~0x017f and not 0x0100~0x013f. To fill up 128 bytes at a time, decode a 64 byte block, copy that to the lower 64 bytes, then decode another block. While implementing this, maybe I'll find that requiring to set a buffer pointer might be better. Alternatively, and if it's technically feasible, there could be parallel text rendering. Besides that, for blank screen bulk uploads I think there shouldn't be a need to use the whole 128 byte range.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Tue Aug 30, 2016 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After doing some back of the envelope calculations to determine the decoder complexity of the previous scheme, I decided to improve the codec some more. The details of it a bit cumbersome to explain in english. With this new codec I now got 43.3% savings in filesize (almost exactly in the middle of pb53 and tokumaru's compression), but the decompression speed theoretically the same as pb53. For each 64 byte block the minimum size is 1 byte (100% black tiles) and the maximum 65 bytes.<br /><br />I still don't know what to name this thing. Any good short names based around the themes of squishing and food dehydration?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Fri Sep 02, 2016 7:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am so close to releasing this thing. The tentative name is PBH. I've implemented the block decoder. The code size is 133 bytes, and it uncompresses at around 36 cycles per output byte (+14 for uploading to the PPU). In dabg (discounting the time for PPU uploading), pb53 takes 26 cpb vs this which takes 31 cpb. The slightly large code size is due to making sure it'll behave sanely with random input. As it is currently implemented, it takes only 2 parameters: a stream pointer in zero page, and X for the offset from $0100 which is assumed to have the contents of the previously decoded block.<br /><br />I still have a few interoperable things to figure out such as:<br />- Normal bulk mode of X number of 64 byte blocks<br />- Parallel segment decoding bulk mode for action53<br />- Streaming from a 128 byte buffer.<br />- Allow encoding blocks independent of each other and maybe print out a list of block offsets in the file.<br />- Rework PBJ by gutting the pb8 mode and instead have a signaled exit to allow the stream pointer to be reused by other things like this PBH.<br />- Encoder options for all of the above<br />- Documentation<br /><span style="font-size: 30%; line-height: normal">- (secretly replace pb53 in 240p test suite)</span><br /><br />Anything else I might need to consider?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri Sep 02, 2016 11:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JRoatch wrote:</div><div class="quotecontent">I still don't know what to name this thing. Any good short names based around the themes of squishing and food dehydration?</div><br />PBJR continues the naming theme, while being disgusting and squishy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Sat Sep 03, 2016 10:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent"><div class="quotetitle">JRoatch wrote:</div><div class="quotecontent">I still don't know what to name this thing. Any good short names based around the themes of squishing and food dehydration?</div><br />PBJR continues the naming theme, while being disgusting and squishy.</div><br />I don't understand what that means, or how it relates to peanut butter and jelly.<br /><br />In anycase, I'm thinking it might be better to use some name that's distinct from PBJ altogether. As it is, the PBH ('H' is for honey) file extension visually clashes with PBJ a bit too much (at least PB53 is four characters and has numbers). Maybe something that starts with the letter 'C'.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Sun Sep 04, 2016 10:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />PBJR Pino Batch J Roatch<br /><span style="font-size: 50%; line-height: normal">Which leads to the secondary thought of Peanut Butter, Jelly, and Roach.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 04, 2016 10:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PBJ revisited: Another attempt at CHR compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />PB53's name came from its use as a packet-oriented alternative to <a href="https://en.wikipedia.org/wiki/PackBits" class="postlink">Apple PackBits</a>, which I had used in previous NES games. But that works too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Mon Sep 19, 2016 8:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bagel NES CHR compression.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry for the wait. The first post has been updated with the new finished codec. For naming I decided to follow a theme of bread foods.<br /><br />The zip file also contain a more optimized form of my nametable compression, but I think I'll see if I can make up a slightly better one that decompresses to some form of PPU strings before I call the nametable compression good enough.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>