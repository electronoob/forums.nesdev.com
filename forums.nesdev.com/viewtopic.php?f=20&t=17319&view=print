<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What are the limits for what the GBC can draw?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What are the limits for what the GBC can draw?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=17319">http://forums.nesdev.com/viewtopic.php?f=20&amp;t=17319</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Marscaleb</b> [ Wed May 02, 2018 9:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've learned a bit about what the NES is capable of, and what the limits are that it faces when drawing an image on the screen.<br />I'm curious today, what about the GBC?<br /><br />Overall, the Game Boy seems to be largely similar to the NES.  They have the same inputs, they have almost the exact same sound capabilities, and superficially they look like they have nearly the same rendering capabilities.  Tiles are stored in 8x8x4 sections, although the original Game Boy effectively had only one palette of four colors, making color palettes pointless.  But the Game Boy color seems to have a much more varied amount of color options than the NES.  So I'm wondering what it's basic restrictions are.  What colors can it display?  How many palettes?  How are the palettes forced to be divided?  How many sprites, layers, etc?  And does it have restrictions for drawing scanlines (if they would even be called that on an LCD screen)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed May 02, 2018 9:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Game Boy Color palettes are RGB, 5 bits per channel, not unlike the Super NES. There are eight four-color background palettes and eight three-color sprite palettes. GBC is the only tiled PPU I know of where all four colors are distinct across the different background palettes. On all others (NES, TG16, Genesis, Super NES, GBA), all tiles share the same color 0, but not on GBC. (On Commodore 64 multicolor mode, all tiles instead share colors 1 and 2.)<br /><br />It has 12288 bytes of CHR RAM, enough for 768 tiles. That's 256 for sprites, 256 shared between sprites and background, and 256 for background.<br /><br />It has two 32x32-cell tile maps, each with two byte planes. The second plane is analogous to bits 15-8 of tile maps on the Super NES, choosing the palette, which half of the CHR RAM is used, and setting the tile's flipping and priority. As on the TG16, Genesis, Super NES, and GBA, the palettes are assigned on individual 8x8 pixel tiles, not larger 16x16 pixel areas.<br /><br />The tile maps are drawn with what the NES or Super NES calls 1-screen mirroring, wrapping the 160x144-pixel window in a 256x256-pixel region. Both X and Y scrolling can be changed in hblank. The second tile map is used either for double buffering or for the window, a second (fully opaque) background layer that can occupy the right side, bottom, or bottom right corner, placed with pixel precision. <a href="https://forums.nesdev.com/viewtopic.php?p=217796#p217796" class="postlink">My Game Boy port of 240p Test Suite</a> uses this pixel precision to make the text canvas smoothly slide in and out on the help screens.<br /><br />Up to 40 sprites can fit in OAM. They are all 8x8 or all 8x16, as on NES. But 10 can fit across the screen, covering up to 50% of a 160-pixel-wide scanline, compared to 8 on the NES, covering 25% of a 256-pixel-wide scanline.<br /><br />Each frame on Game Boy consists of 144 lines of picture and 10 lines of vertical blanking. Because of peculiarities of the LCD driver, it's a Bad Idea(tm) to turn off rendering outside vblank. So forget about forced blanking to improve video memory bandwidth, as was routinely done on Super NES. When the CPU is set to single speed (1.05 MHz), each scanline is almost exactly the same length in CPU cycles as the NES's: 114 mcycles for Game Boy compared to 113.667 for NES. Though vblank is much shorter (10 lines compared to 20 on NES or 38 on Genesis or Super NES), video memory bandwidth during vblank is greater on GBC because of DMA, and even without DMA, the Game Boy CPU's slightly better IPC for sequential processing somewhat balances out the shorter vblank. In addition, both the Game Boy and the GBC allow video memory access during hblank.<br /><br />Further reading: <a href="http://gbdev.gg8.se/wiki/articles/Pan_Docs" class="postlink">Pan Docs on GbdevWiki</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed May 02, 2018 10:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Marscaleb wrote:</div><div class="quotecontent">although the original Game Boy effectively had only one palette of four colors, making color palettes pointless.<br /></div>Not entirely. Backgrounds and two separate groups of sprites used three separate palettes, meaning that each could be faded independently.<br /><br />And I guess the two separate sprite palettes lets you do trivial palette swaps, but that's hard to make that interesting with only 2bpp output.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What colors can [the GBC] display?<br /></div>The other important thing is that the gamma of the original GBC screen is <em>extremely</em> high. Color values in the range 0-F cover the vast majority of the range; colors above that apparently bleed over. <a href="http://gbdev.gg8.se/wiki/articles/Video_Display#RGB_Translation_by_CGBs" class="postlink">(relevant section in gg8 pandocs)</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Marscaleb</b> [ Wed May 02, 2018 11:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So wait, it can actually access the full spectrum of 15-bit color?  And eight palettes for sprites and BG each? Holy crap!<br />I suppose I shouldn't be too surprised, since the GBC came out in the era of the Nintendo 64, and it wouldn't exactly be hard to up the stats at least just a little, but still, I've long been under the assumption that the Game Boy was roughly the same as the NES, minus color, and the Game Boy Color was basically the same hardware but with color added.<br /><br />...How do these stats compare to the original Game Boy?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu May 03, 2018 6:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Compared to Game Boy Color, Game Boy has no double-speed mode on its CPU (thus locked at 1.05 MHz instead of 2.1), half the video memory, and no DMA to VRAM. This cuts CHR RAM in half (384 unique tiles instead of 768) and removes the tilemaps' second plane. In addition, the display of the original Game Boy (DMG) and Game Boy Pocket (MGB) is noticeably slower to react to changes in brightness than that of the GBC, causing rapidly moving sprites and backgrounds to appear motion-blurred. This caused some developers to make 20 or 30 fps engines instead of 60 and to heavily abuse flicker for translucency, which bit the developers of <em>Batman</em> and <em>Serpent</em> in the butt once Super Game Boy came out and showed 30 Hz strobes for what they are.<br /><br />But mono still has the window (and associated second tilemap), DMA to OAM (which is faster than on NES because it's shorter, and a byte is copied every cycle instead of every 2), and VRAM access during hblank. It has one 4-color palette for backgrounds and two 3-color palettes for sprites, with 2 bits per channel. It was common to see one palette defined as (white, light gray, black) and the other as (white, dark gray, black), especially in things like fighting games to tell mirror match contestants apart. In 144p Test Suite, the palette difference also adds detail to Hepsie's outfit.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<img src="./download/file.php?id=12523" alt="Hepsie_GHZ.gif" /><br />
			<span class="gensmall">Hepsie_GHZ.gif [ 2.79 KiB | Viewed 1949 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Marscaleb</b> [ Thu May 03, 2018 12:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So the Game Boy Color's stats are basically exactly double of the original Game Boy.<br />That's one of those things where I in no way thought of that, but when I find out about it, seems super obvious and I'm not even surprised.<br />If it needs to play original game boy games and you want to have game cartridges that work on both systems but give extra enhancement to one, making the processor and RAM exactly double is perhaps the smartest way to handle that.  When running on classic hardware, just drop out every other cycle.  Brilliant in its simplicity.<br /><br />And I never thought about it before, but of course the sprites still need palettes.  The system displays only four colors but the sprites still need a transparency.<br /><br />It has half as many tiles, but how are they divided up?<br />I mean, on the NES there was a bank of 256 for sprites and a bank of 256 for backgrounds.  It makes perfect sense that way, too.  One byte to refer to what tile is used, and what bank it looks in depends on if its drawing a BG or sprite (and what mode it is using for how they are stored, but still.)  Neither 384 nor 768 are easily accessible with a single byte.  I can imagine the original game boy works the same as the NES, but with less memory for tiles, so it could still divide the tiles into two banks but asking for any tile above 192 (or 191) would return an error of some sort (or maybe grab a tile from the other bank, that would be neat!) but otherwise it would need some additional data to be processed to access the other tiles.  Of course it is possible, but for 1989 tech that is designed to run on four AA's for 30 hours, well, it seems a little surprising.<br /><br />...oh yeah, and how many sprites can they each handle in a frame?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Thu May 03, 2018 12:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The 384 tiles are shared between sprites, the background, and the window, but each can only refer to a 256-tile subset. From tepples' link:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There are three &quot;blocks&quot; of 128 tiles each : block 0 is $8000-87FF, block 1 is $8800-8FFF, block -1 is $9000-$97FF. Tiles are always indexed using a 8-bit integer, but the addressing method may differ. The &quot;8000 method&quot; uses $8000 as its base pointer and uses an unsigned addressing, meaning that tiles 0-127 are in block 0, and tiles 128-255 are in block 1. The &quot;8800 method&quot; uses $9000 as its base pointer and uses a signed addressing. To put it differently, &quot;8000 addressing&quot; takes tiles 0-127 from block 0 and tiles 128-255 from block 1, whereas &quot;8800 addressing&quot; takes tiles 0-127 from block -1 and tiles 128-255 from block 1. (You can notice that block 1 is shared by both addressing methods)<br /><br />Sprites always use 8000 addressing, but the BG and Window can use either mode, controlled by LCDC bit 4.<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Marscaleb</b> [ Thu May 03, 2018 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />...the window?<br /><br />Is that the border you'd see in the super game boy?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu May 03, 2018 12:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No, the window is a second (less versatile) background layer, as tepples said above. It's mostly used for drawing status bars.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu May 03, 2018 1:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Game Boy has three 2K (128 tile) banks of CHR RAM, which I'll number 0, 1, 2. (The part of VRAM that would be bank 3 is instead used for tile maps.)<br /><br />Sprite tiles $00-$7F are always from bank 0.<br />Sprite tiles $80-$FF are always from bank 1, as are background tiles $80-$FF.<br />Background tiles $00-$7F can be from bank 0 or 2 depending on the BG CHR bank bit in LCDC. So you can have either banks 2 and 1 (LCDC bit 4 clear) or banks 0 and 1 (LCDC bit 4 set).<br /><br />GBC adds three additional banks of CHR RAM, which I'll number 4, 5, and 6. Each sprite and each tilemap entry have an &quot;add 4 banks&quot; setting in bit 3 of the attributes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Marscaleb</b> [ Thu May 03, 2018 6:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Man.  Eight color palettes per layer.  256 more tiles.  Palettes can use any 15-bit color.<br />Just for any one of those traits, I want to shift my project to being a GBC game.  The lower resolution is more than made up for with those advances.<br /><br />...But at the same time it feels kind of like &quot;cheating&quot; to switch to something so advanced.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Thu May 03, 2018 6:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Marscaleb wrote:</div><div class="quotecontent">Man. Eight color palettes per layer. 256 more tiles. Palettes can use any 15-bit color.<br /></div><br /><br />You can regularly get away with more than 8 BG and 8 OBJ palettes per-frame. It's possible to transfer new palettes during H-Blank, so once you reach a certain screen line, say like Line 20, you can setup all new colors. A handful of games did this (Alone in the Dark, Tomb Raider). This requires some careful planning, however, otherwise you could overwrite some colors at the wrong time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Cavencruiser</b> [ Tue Jun 05, 2018 10:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Compared to Game Boy Color, Game Boy has no double-speed mode on its CPU (thus locked at 1.05 MHz instead of 2.1), half the video memory, and no DMA to VRAM. This cuts CHR RAM in half (384 unique tiles instead of 768) and removes the tilemaps' second plane. In addition, the display of the original Game Boy (DMG) and Game Boy Pocket (MGB) is noticeably slower to react to changes in brightness than that of the GBC, causing rapidly moving sprites and backgrounds to appear motion-blurred. This caused some developers to make 20 or 30 fps engines instead of 60 and to heavily abuse flicker for translucency, which bit the developers of <em>Batman</em> and <em>Serpent</em> in the butt once Super Game Boy came out and showed 30 Hz strobes for what they are.<br /><br />But mono still has the window (and associated second tilemap), DMA to OAM (which is faster than on NES because it's shorter, and a byte is copied every cycle instead of every 2), and VRAM access during hblank. It has one 4-color palette for backgrounds and two 3-color palettes for sprites, with 2 bits per channel. It was common to see one palette defined as (white, light gray, black) and the other as (white, dark gray, black), especially in things like fighting games to tell mirror match contestants apart. In 144p Test Suite, the palette difference also adds detail to Hepsie's outfit.</div><br /><br />Why are you saying the cpu runs in 1.05mhz, when the clock speed is 4.1943mhz? Are you talking in machine cycles, or is this the real clock speed?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 05, 2018 10:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NES:<br />The master clock is 21.5 MHz, same as Super NES.<br />The dot clock is 5.4 MHz, same as Super NES.<br />The CPU takes multiples of twelve master clock cycles to do anything because of the divide-by-12 behavior of the clock regulator. (On Super NES, this is usually 6 or 8 depending on the address bus.)<br />The effective speed of the CPU is 1.8 MHz, or 1.8 million machine cycles per second.<br /><br />Game Boy:<br />The master clock is 4.2 MHz.*<br />The dot clock is 4.2 MHz.<br />The CPU takes multiples of four master clock cycles (or &quot;tstates&quot;) to do anything because of a state machine in the CPU core.<br />The effective speed of the CPU is 1.05 MHz, or 1.05 million machine cycles per second.<br />Game Boy Color can run at double speed, which is 2.1 million machine cycles per second. Enabling double speed mode will flash the screen briefly, so it's something that a game will usually set and then leave on or off.<br /><br />One difference between the Game Boy's CPU (Sharp LR35902) and more common CPUs that it resembles (Intel 8080 and Zilog Z80) is that while the LR35902's microcode state machine always divides by 4, the one in the 8080 and Z80 divides by 3 to 5 depending on what part of what instruction is being run. This variable length of a machine cycle (&quot;mcycle&quot;) in input cycles (&quot;tstates&quot;) is probably the origin of the difference between how Z80 programmers count cycles (as tstates) and how LR35902 programmers count cycles (as mcycles).<br /><br /><br /><span style="font-size: 85%; line-height: normal">* The Super Game Boy uses a slightly faster master clock source derived by dividing the Super NES 21.5 MHz master clock by 5.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Cavencruiser</b> [ Tue Jun 05, 2018 5:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What are the limits for what the GBC can draw?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">NES:<br />The master clock is 21.5 MHz, same as Super NES.<br />The dot clock is 5.4 MHz, same as Super NES.<br />The CPU takes multiples of twelve master clock cycles to do anything because of the divide-by-12 behavior of the clock regulator. (On Super NES, this is usually 6 or 8 depending on the address bus.)<br />The effective speed of the CPU is 1.8 MHz, or 1.8 million machine cycles per second.<br /><br />Game Boy:<br />The master clock is 4.2 MHz.*<br />The dot clock is 4.2 MHz.<br />The CPU takes multiples of four master clock cycles (or &quot;tstates&quot;) to do anything because of a state machine in the CPU core.<br />The effective speed of the CPU is 1.05 MHz, or 1.05 million machine cycles per second.<br />Game Boy Color can run at double speed, which is 2.1 million machine cycles per second. Enabling double speed mode will flash the screen briefly, so it's something that a game will usually set and then leave on or off.<br /><br />One difference between the Game Boy's CPU (Sharp LR35902) and more common CPUs that it resembles (Intel 8080 and Zilog Z80) is that while the LR35902's microcode state machine always divides by 4, the one in the 8080 and Z80 divides by 3 to 5 depending on what part of what instruction is being run. This variable length of a machine cycle (&quot;mcycle&quot;) in input cycles (&quot;tstates&quot;) is probably the origin of the difference between how Z80 programmers count cycles (as tstates) and how LR35902 programmers count cycles (as mcycles).<br /><br /><br /><span style="font-size: 85%; line-height: normal">* The Super Game Boy uses a slightly faster master clock source derived by dividing the Super NES 21.5 MHz master clock by 5.</span></div><br /><br />So the clock speed of the nes is lower than the gameboy clock, because the gameboy has a clock speed of 4.1943mhz and the nes has a lower clock rate in the 1mhz region? Or is the 1mhz clock speed of the nes cpu measured in machine cycles as well? Which cpu is more powerful, and which one is clocked higher? And is saying the gameboy clock speed is 4.4.1943mhz, the same thing as saying the new clock speed is 21.5mhz? What would the master systems cpu clock be in machine cycles?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>