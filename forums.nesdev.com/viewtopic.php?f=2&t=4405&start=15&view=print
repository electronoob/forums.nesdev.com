<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Map data and compression for scrollable map?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Map data and compression for scrollable map?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4405">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4405</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Sun Sep 28, 2008 5:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure I would even compress my tilemaps. Since all the methods described so far are sequential access for the decompression, that would add some overhead not to mention creating a marker system for entry points (I had to do this for a block of RLE compression fonts). For 8way scrolling, anyway.
<br />
<br /> Just setting up 16x16 metatile tilemap has some nice savings already. You'd only need 6bits to represent any given metatile. The upper bits could be used for palette association of that metatile. 8bits per 16x16 entry is pretty decent, plus the compression ratio is static and accessible in random access. If you broke down larger tilemaps into 256x240 pixel maps/screen, then you could compress for redundant screens that way.
<br />
<br />Some examples that I've seen ingame: 
<br />
<br /> Bonk's tilemap engine uses 16x16 metatiles. The palette association is hardcoded to the tile number for the stage. The overall tilemap is made up of  screen sized tilemaps and these tilemaps are stored in vertical strips. I don't remember offhand if the vertical strips were compressed in RLE or not (probably is).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Sun Sep 28, 2008 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Crystalis does something like that.  "Maps" are composed of a small M x N grid of block numbers and some palettes and music data.  Each grid # represents a 16x15 screen of metatiles.  This is why so much of the game looks repetitive.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 28, 2008 6:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">clueless wrote:</div><div class="quotecontent">Crystalis does something like that.  "Maps" are composed of a small M x N grid of block numbers and some palettes and music data.  Each grid # represents a 16x15 screen of metatiles.</div>
<br />Animal Crossing does much the same thing, building the town map out of acre-sized chunks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Mon Sep 29, 2008 6:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">clueless wrote:</div><div class="quotecontent">And I disagree that RLE compression doesn't compress enough. It is enough to fit the entire overworld into a single MMC1 or MMC3 PROG-ROM bank. That makes decompression significantly easier (and faster) to implement. Typical MMC1 bank switching (LSR, STA 5 times) requires 2*(2+4) + jsr + rts = (too lazy to add it up) many CPU cycles.</div>If it's enough, then it's enough. RLE is certainly better than nothing. *shrug*
<br />
<br />The thing about RLE compression isn't so much that it compresses poorly as that it forces you to use a particular graphical style. This works nicely for some games, such as SMB3 with its straight lines and open spaces, but to be honest I think it makes RPGs look rather plain. A bit of dithering in the grass and the occasional flower or tree stump makes all the difference for a game's look.
<br />
<br />Granted, a general-purpose compression algorithm is unlikely to rival the compression rates of a well-designed custom scheme with data designed to make the best use of it. But I consider the advantage in freedom for the artist, as well as not to having to work out half a dozen specialized packers different parts of the game well worth the cost. The other drawback here is, of course, that you'd have to split up the overworld and other huge maps. Keeping the whole map in RAM is not without certain advantages though, such as being able to keep track of updated tiles or allowing NPCs to move around off-screen. Not to mention that a gigantic 128x128 map (73 screens?) could surely need a few tileset and palette changes.
<br />
<br />As for bank-switching overhead, well, that would depend on your mapper and how the decompressor is designed. For MMC3 you can simply set up both slots to straddle the pair of banks crossed. And some compressors (my own included) have to deal with 256-byte boundaries anyway in order to support floppy streaming. Besides, anything which saves you from having to juggle half the data in the game in order to fill up banks as best as possible is a good thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Sep 29, 2008 12:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />RLE is good for lots of things, I think. For example, the overworld in Final Fantasy is probably more than 50% water. RLE compresses these rows to be two or so bytes instead of 140 in some spots.
<br />
<br />I made an RPG map scroller that loads an RLE compressed map like this. The major disadvantage with it is that it can take FOREVER to work through. The problem is that you have to go through every individual byte to get to the tile you want. There can be no calculating, as there's no way to tell what's compressed and what's not without checking every individual byte. It can take longer than a frame to get a column of metatiles depending on where you are in the map.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Sep 29, 2008 1:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For big maps that can be scrolled in any direction, recognizing long "runs" in one direction can be hard to deal with. Perhaps a <a href="http://en.wikipedia.org/wiki/Quadtree" class="postlink">quadtree subdivision</a> method like tokumaru's might help: if a node is entirely water, entirely grass, etc., we can replace it with one byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Sep 29, 2008 1:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It might be a little hard to make an RPG map with block metatiles. I use 64x64 pixel metatiles for my platformer similarly compressed to Tokumaru's metatiles, but RLE works better for RPG maps as for land, there needs to be more unique looking areas. Though it'd be nice to compress blocks of water to 1 byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Sep 29, 2008 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">It might be a little hard to make an RPG map with block metatiles.</div>
<br />I figured that. I didn't mean apply tokumaru's solution directly, but instead to decompose each square area of the map (starting at 16x16 cell areas) into four subsquares. If a subsquare is solid, stop; otherwise, subdivide it and repeat.
<br />
<br />Perhaps it might be easier for me to express my idea by drawing a diagram of how it would be applied to an actual RPG map. Which map should I try it on?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Sep 29, 2008 1:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Final Fantasy III. Or I, if it's easier to find.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Mon Sep 29, 2008 4:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Celius wrote:</div><div class="quotecontent">It might be a little hard to make an RPG map with block metatiles.</div><br />I figured that. I didn't mean apply tokumaru's solution directly, but instead to decompose each square area of the map (starting at 16x16 cell areas) into four subsquares. If a subsquare is solid, stop; otherwise, subdivide it and repeat.</div>Hm. Presumably you'd pre-calculate/store a pointer to the start of each such 16x16 block for "random access." And avoid decoding partial blocks by extending the screen buffer by 16 tiles on each axis, perhaps combined with some convoluted scheme to spread out the cost of decompressing a row of blocks over multiple frames. Besides that you'd need some way of indicating whether to fill up the current subsection with a fixed pattern or further subdivide it. Like a bit vector or an escape tile.
<br />
<br />Here's my counter-proposal. Why not do nearly the same thing, that is divide the map into 16x16 blocks with a pointer to the start of each one, but use RLE within these blocks instead? And to improve locality lets store the tiles within these blocks in an alternative order, say according to a space-filling curve (note that the rearrangement can be trivially implemented with some unrolled copying code.)
<br />That ought to compress about as well as the subdivision approach and be quite a bit easier to implement. Well, hopefully anyway...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Mon Sep 29, 2008 6:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">Here's my counter-proposal. Why not do nearly the same thing, that is divide the map into 16x16 blocks with a pointer to the start of each one, but use RLE within these blocks instead? And to improve locality lets store the tiles within these blocks in an alternative order, say according to a space-filling curve (note that the rearrangement can be trivially implemented with some unrolled copying code.)<br />That ought to compress about as well as the subdivision approach and be quite a bit easier to implement. Well, hopefully anyway...</div>
<br />
<br />That is what I'm doing right now in my own project.  My maps are arrays of 8x8 metatile blocks.  Each block is RLE compressed.  Identical blocks share the same RLE sequence.  I plan to buffer more than a screen's worth of blocks in SRAM.
<br />
<br />Except that I've not thought of the 'space filling curve' thing.  I'm not quite sure what you mean by that.
<br />
<br />My goal right now is not to get the most optimal compression.  My goal is to get a reasonable trade-off between size and decompression speed and jump into actual scrolling and character actions (jumping, fighting, interacting with objects, etc...)
<br />
<br />Can you please elaborate on the 'space filling curve'?  Sounds like theoretical physics <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Mon Sep 29, 2008 7:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">clueless wrote:</div><div class="quotecontent">My goal right now is not to get the most optimal compression.  My goal is to get a reasonable trade-off between size and decompression speed and jump into actual scrolling and character actions (jumping, fighting, interacting with objects, etc...)</div>Again, I've got to wonder why you don't just make it easy for yourself and decompress the whole thing into memory when entering a region. Together with 2x2 metatiles you'll still get more than 18 screens if you set aside half of SRAM for the map.<br />Just plug in Exomizer and let it do its thing and I promise you that you'll get excellent compression rates.<br /><br /><div class="quotetitle">clueless wrote:</div><div class="quotecontent">Can you please elaborate on the 'space filling curve'?  Sounds like theoretical physics :)</div>There's nothing remotely scary about it.
<br />Essentially there's no reason why you have to save the tiles within each 16x16 block in left-to-right top-to-bottom order. And one possible set of such alternative orders are the so-called space-filling curves. Think of it as a puzzle where you have to cover every square of a grid by without ever lifting your pencil.
<br />
<br />With the right curve you can make sure that the starting point of a long RLE run is as close to the endpoint as possible, as opposed to the traditional scheme where the opposite is true. The idea here is much the same as for tepple's subdivision approach, that is to exploit the fact that four tiles in a square are (presumably) more likely to share the same pattern than four tiles on a line.
<br />
<br />You should also notice that you don't have to work out the curve itself at runtime. Rather you can simply reorder the tiles within a decompressed block through a series of LDA/STA opcodes (or let the RLE routine push onto the stack and use a PLA/STA series.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Mon Sep 29, 2008 11:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My goal right now is not to get the most optimal compression. My goal is to get a reasonable trade-off between size and decompression speed and jump into actual scrolling and character actions (jumping, fighting, interacting with objects, etc...)</div>
<br />
<br /> You could setup the decompression routine as something similar to a processing thread. You just have to make sure to decompress enough rows into ram/buffer that the game tilemap engine can start to read and you would have to request the tilemap decompression system at an earlier state. It's tricky and requires knowing/calculating the max scrolling speed and some other variables. Plus, since you'd more than likely base it off number of bytes instead of a "time slice", you'd want to calculate for almost worst cast scenario in cpu cycles. This would lend it self nicely for LZSS or even more layered compressed variants like "pucrunch" or adding huffman to LZSS, etc.
<br />
<br /> If you limit your compression to a horizontal or vertical strip defined parameter, you can build in small headers for fast skipping, i.e. speed up "seeking" on sequential accessed streams. Add a more coarse layer(seek map/array) on top of that to really speed it up the seek time. RLE works great with this approach and "token pointer" compression also works pretty well, albeit slower than RLE. Do a variable length control code system and use both <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> 
<br />
<br /> I'm curious if anyone else has seen fixed "seeded" buffers for LZSS decompression, before the decompressor starts? The decompression engine knows the LZ window is primed with a series of values before hand and can/will access them from the very start. I saw it once in a game (it was a 4k ring buffer) and looked like it helped out for structured patterns and data like tilemaps.
<br />
<br /> Also, if anyone's interested, pucrunch sets up nicely for a ring buffer setup. The standalone decompresser is already written in 6502, you just need to make some minor modifications. Chris Covell has already adapted it for rom based projects, shouldn't be to much trouble to move it back over to 6502 from 6280. It works fairly decent for 256 and 512 byte ring buffers. If you don't know, a ring buffer setup allows you to decompress an LZ stream directly to an I/O port.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 30, 2008 7:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doynax wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Celius wrote:</div><div class="quotecontent">It might be a little hard to make an RPG map with block metatiles.</div><br />I figured that. I didn't mean apply tokumaru's solution directly, but instead to decompose each square area of the map (starting at 16x16 cell areas) into four subsquares. If a subsquare is solid, stop; otherwise, subdivide it and repeat.</div>Hm. Presumably you'd pre-calculate/store a pointer to the start of each such 16x16 block for "random access." And avoid decoding partial blocks by extending the screen buffer by 16 tiles on each axis</div><br />That wouldn't be entirely necessary. You might traverse the quadtree a tile at a time, much like in tokumaru's decoder.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Besides that you'd need some way of indicating whether to fill up the current subsection with a fixed pattern or further subdivide it. Like a bit vector or an escape tile.</div><br />$00-$7F: subdivide this section and jump several nodes ahead<br />$80-$FF: fill this section with constant tile<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Here's my counter-proposal. Why not do nearly the same thing, that is divide the map into 16x16 blocks with a pointer to the start of each one, but use RLE within these blocks instead?</div><br />You just described how Animala stores ACWW towns for copying them between the PC and DS.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> And to improve locality lets store the tiles within these blocks in an alternative order, say according to a space-filling curve (note that the rearrangement can be trivially implemented with some unrolled copying code.)</div><br />RLE on a space-filling curve, such as the Hilbert curve, tends to look a lot like a quadtree.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Again, I've got to wonder why you don't just make it easy for yourself and decompress the whole thing into memory when entering a region. Together with 2x2 metatiles you'll still get more than 18 screens if you set aside half of SRAM for the map. </div>
<br />That's still a lot of SRAM. I'm trying to explore different points on the time-space tradeoff, especially for projects that can't use much more than the 2048 bytes in the NES itself.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 30, 2008 9:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">You might traverse the quadtree a tile at a time, much like in tokumaru's decoder.</div>
<br />You know, I intentionally worked with quadtrees before for CHR compression, but I didn't realize I was doing it with my map compression! O_o
<br />
<br />Although I don't take advantage of completely filled blocks in my engine (they all must have 4 sub-blocks), I could easily add a flag for each square, indicating if that square uses a sub-block or is simply filled with a single type of metatile.
<br />
<br />And yeah, you can easily read rows and columns from this map on the fly, without having to decompress a whole screen. All you need to do is set up the high bytes of the pointers to each type of block. Once you have the index of the huge (256x256 pixels) block, you use it as the lower byte of the addresses that point to the next set of blocks (128x128).
<br />
<br />When rendering rows or columns, you can be sure that only 2 sub-blocks of each block will be read (for rows it's either the top 2 or the bottom 2, and for columns it's either the left 2 or the right 2). So I need 2 pointers for each type of block (256x256, 128x128, 64x64, 32x32).
<br />
<br />Here are some details about my decompression method:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Metatiles are 16x16 pixels. The largest block is 16x16 metatiles, or 256x256 pixels. It is constantly divided into 4 pieces, each dived into 4 others, and so on until the metitiles are reached.<br /><br />How to decode a 256x256 block:<br /><br />X Coordinate &#40;used for decoding columns&#41;: DCBAPPPP<br /><br />PPPP: pixel coordinates, not used for decoding the map;<br />A: left or right of the 32x32 block;<br />B: left or right of the 64x64 block;<br />C: left or right of the 128x128 block;<br />D: left or right of the 256x256 block;<br /><br />Y coordinate &#40;used for decoding rows&#41;: DCBAPPPP<br />PPPP: pixel coordinates, not used for decoding the map;<br />A: top or bottom of the 32x32 block;<br />B: top or bottom of the 64x64 block;<br />C: top or bottom of the 128x128 block;<br />D: top or bottom of the 256x256 block;<br /><br />These bits can be shifted right into the high bytes of the pointers. This will be handled differently depending on if you're rendering rows or columns, but once the pointers are ready the same code can be used to read rows and columns. The necessary pointer are the following:<br /><br />Block256A, Block256B: 2 128x128 blocks of the 256x256 block;<br />Block128A, Block128B: 2 64x64 blocks of the 128x128 block;<br />Block64A, Block64B: 2 32x32 blocks of the 64x64 block;<br />Block32A, Block32B: 2 metatiles of the 32x32 block;<br /><br />The pointers are reused as the parent blocks are completely decoded. The code looks basically like this:<br /><br />&nbsp; &nbsp;;decode 128x128 first block<br />&nbsp; &nbsp;lda &#40;Block256A&#41;, y ;get the index of the first 128x128 block<br />&nbsp; &nbsp;sta Block128A+0 ;use it to read the first 128x128 block<br />&nbsp; &nbsp;sta Block128B+0 ;use it to read the second 128x128 block<br /><br />&nbsp; &nbsp;;DECODE 128x128 BLOCK HERE<br /><br />&nbsp; &nbsp;;THE FIRST BLOCK WAS DECODED, REUSE POINTERS TO DECODE THE NEXT ONE!<br /><br />&nbsp; &nbsp;;decode 128x128 second block<br />&nbsp; &nbsp;lda &#40;Block256B&#41;, y ;get the index of the second 128x128 block<br />&nbsp; &nbsp;sta Block128A+0 ;use it to read the first 128x128 block<br />&nbsp; &nbsp;sta Block128B+0 ;use it to read the second 128x128 block<br /><br />&nbsp; &nbsp;;DECODE 128x128 BLOCK HERE<br /><br />Y must be loaded with 0, because we don't use it &#40;although it is used when reading single metatiles for collision purposes, because it's faster&#41;. This code is repeated for each block. The blocks are read from the largest to the smallest, and 2 of each type are processed. You can see that the index taken from the parent block is used to read the indexes of 2 child blocks, until the metatiles are reached, and they are read 2 at a time into a buffer.</div>
<br />
<br />This is what I do when scrolling, and for the amount of compression I get I'd say it's not that complicated or slow. With little modification, the blocks could be flagged as "compressed blocks", in which case the index read would not point to a child block, but to a metatile that is used to fill the entire block. This would prevent one from wasting blocks if there are no details inside them.
<br />
<br />Thanks tepples, for suggesting this expansion. I don't know if I'll use it in my current project, but it's good to keep in mind that there is an interesting compression method that offers somewhat random access to the data.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>