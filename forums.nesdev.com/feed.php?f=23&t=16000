<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=23&amp;t=16000" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2017-05-30T05:56:37-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=23&amp;t=16000</id>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2017-05-30T05:56:37-07:00</updated>
<published>2017-05-30T05:56:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196934#p196934</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196934#p196934"/>
<title type="html"><![CDATA[Re: C64 screen pixel count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196934#p196934"><![CDATA[
All data here on in is PAL unless specified.<br /><br />The C64 is 402x292 visible. <br /><br />The VIC needs to fetch Char data each cycle to display.  so a normal access looks like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">xgxgxgxg...</tt> 40 times,where x is Cpu and G is char/tile data<br /><br />To display it also needs to know the Char number so ever 8 lines it has a &quot;bad-line&quot; where the access is <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">cgcgcgcgcg</tt> x40 so the VIC eats both cycles during c it gets the Screen code and pulls in the CRAM colour value on its private 4 bit bus to it.<br /><br />Sprites need 4 cycles to grab, one for the Sprite Ptr, then 3 for the sprite's data for the next line, so again the VIC steals cycles, thus it takes 2 &quot;clocks&quot; The C64 is a 1mhz machine with a 2mhz bus. <br />Borders are 23 chars wide, of which about 10.5 are visible <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">6569, Bad Line, no sprites:<br /><br />Cycl-# 6                   1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6<br />       3 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 1<br />        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _<br />    �0 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _<br />       __<br />   IRQ   ________________________________________________________________________________________________________________________________<br />       ________________________                                                                                      ____________________<br />    BA                         ______________________________________________________________________________________<br />        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _                                                                                 _ _ _ _ _ _ _ _ _ _<br />   AEC _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _________________________________________________________________________________ _ _ _ _ _ _ _ _ _<br /><br />   VIC i 3 i 4 i 5 i 6 i 7 i r r r r rcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcgcg i i 0 i 1 i 2 i 3<br />  6510  x x x x x x x x x x x x X X X                                                                                 x x x x x x x x x x<br /><br />Graph.                      |===========01020304050607080910111213141516171819202122232425262728293031323334353637383940=========<br /><br />X coo. \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\<br />       1111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111<br />       89999aaaabbbbccccddddeeeeff0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff000011112222333344445555666677778888999<br />       c048c048c048c048c048c048c04048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048c048</div><br />and NTSC example ( Which has 25 char wide borders ) with sprites <div class="codetitle"><b>Code:</b></div><div class="codecontent">6567R8, no Bad Line, sprites 2-7 active in this line, sprites 0-4 in the<br />next line (abbreviated):<br /><br />Cycl-# 6                   1 1 1 1 1 1 1 1 1 1 |5 5 5 5 5 5 5 6 6 6 6 6 6<br />       5 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 |3 4 5 6 7 8 9 0 1 2 3 4 5 1<br />        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _| _ _ _ _ _ _ _ _ _ _ _ _ _ _<br />    �0 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _| _ _ _ _ _ _ _ _ _ _ _ _ _ _<br />       __                                      |<br />   IRQ   ______________________________________|____________________________<br />                             __________________|________<br />    BA ______________________                  |        ____________________<br />                              _ _ _ _ _ _ _ _ _| _ _ _ _ _ _ _<br />   AEC _______________________ _ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ ______________<br />                                               |<br />   VIC ss3sss4sss5sss6sss7sssr r r r r g g g g |g g g i i i i 0sss1sss2sss3s<br />  6510                        x x x x x x x x x| x x x x X X X<br />                                               |<br />Graph.                      |===========0102030|7383940============<br />                                               |<br />X coo. \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\\\\\\\\\\\\\\\\\\\\\\\\\\\\<br />       1111111111111111111111111110000000000000|1111111111111111111111111111<br />       999aaaabbbbccccddddeeeeffff0000111122223|344445555666677778888889999a<br />       48c048c048c048c048c048c048c048c048c048c0|c048c048c048c048c04cccc04c80</div><br /> c  Access to video matrix and Color RAM (c-access)<br />  g  Access to character generator or bitmap (g-access)<br /> 0-7 Reading the sprite data pointer for sprite 0-7 (p-access)<br />  s  Reading the sprite data (s-access)<br />  r  DRAM refresh<br />  i  Idle access<br /><br />  x  Read or write access of the processor<br />  X  Processor may do write accesses, stops on first read (BA is low and so is RDY)<br /><br />So the border is wide enough to hold 8 sprite fetches, DMA take over delays, you must wait 3 clocks after pulling BA/DMA low, and mask the screen size differences between NTSC and PAL<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Tue May 30, 2017 5:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ccovell]]></name></author>
<updated>2017-05-29T17:42:01-07:00</updated>
<published>2017-05-29T17:42:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196908#p196908</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196908#p196908"/>
<title type="html"><![CDATA[Re: C64 screen pixel count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196908#p196908"><![CDATA[
I don't have a link to the answer, but the VIC-II introduced sprites, which need to be processed (perhaps in the borders?) plus there are DRAM refresh cycles.  Maybe someone with a more detailed, factual account can explain what goes on in the C64's side borders.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=355">ccovell</a> — Mon May 29, 2017 5:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-05-29T16:29:45-07:00</updated>
<published>2017-05-29T16:29:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196904#p196904</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196904#p196904"/>
<title type="html"><![CDATA[C64 screen pixel count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16000&amp;p=196904#p196904"><![CDATA[
Apropos of <a href="https://forums.nesdev.com/viewtopic.php?p=196846#p196846" class="postlink">this tangent</a>...<br /><br />The VIC-20 normally displays 22x23 8x8 pixel characters (176x184), a 3:2 pixel aspect ratio, underscanned with a border (the NES's 256 pixels correspond to 195 pixels at the VIC-20's 1bpp pixel clock). 22x23 is one of a few choices that comes as close as possible without exceeding the 512 total nybbles of color attribute memory.<br /><br />The VIC-1 supports adjusting the left margin, upper margin, and width and height of the visible screen, while the underlying NTSC timing isn't changeable<span style="font-size: 50%; line-height: normal">(other than interlaced vs not)</span>.  It has such a paucity of RAM for the tilemap that games (I am told) usually use 20x10 8x16 pixel characters (160x160).<br /><br />So the unimportant question: why doesn't the C64's VIC-2 support the same adjustments?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon May 29, 2017 4:29 pm</p><hr />
]]></content>
</entry>
</feed>