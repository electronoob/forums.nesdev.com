<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CPU writes to PPU Memory.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CPU writes to PPU Memory.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=16415">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=16415</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>urbanspr1nter</b> [ Sat Aug 26, 2017 7:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CPU writes to PPU Memory.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am aware that the PPU exposes various registers to the CPU (PPUCTRL/2000, PPUSTATUS/2002, PPUADDR/2006, PPUDATA/2007, etc), from a CPU perspective, is this a unidirectional way of communication to the PPU? For example something like this:<br />         <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp;PPU Request<br />&#91;CPU&#93; -------------&gt; &#91;PPU&#93;<br /></div><br /><br />In emulator development, if a CPU makes a memory-mapped read/write on a specific PPU register, does that make direct access to the PPU RAM right away? Or is it held in the PPU registers and then written to PPU Memory by the PPU. Stupid question, I know... but getting a bit confused when reading the wiki docs.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Aug 26, 2017 7:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU writes to PPU Memory.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Conceptually, I think of it as being immediate.  But I would assume it's in fact quantized to the next PPU cycle (though I don't really know exactly).  Since the PPU/CPU are running at different rates and not in sync.  Someone else would know or explain better than me.  But it might help if you can think of the particular situation you have in mind.<br /><br />The $2007 register can be read by the CPU, but it's actually buffered.  So you read $2007 once it fills the buffer, then the next $2007 read actually returns the buffer (and fills the buffer with the next byte etc.).  However, this doesn't happen when you read the palette memory (which is RAM internal to the PPU).  Maybe This kind of implies that palette memory access is immediate?  But the rest would go through the PPU's normal process for accessing external memory.<br /><br />I'm not an emu dev, so hopefully this doesn't hurt more than it helps, haha.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>urbanspr1nter</b> [ Sat Aug 26, 2017 8:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU writes to PPU Memory.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmm yeah the Wiki page here  (<!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_registers#PPUADDR">http://wiki.nesdev.com/w/index.php/PPU_ ... rs#PPUADDR</a><!-- m -->) says: <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because the CPU and the PPU are on separate buses, neither has direct access to the other's memory. The CPU writes to VRAM through a pair of registers on the PPU. First it loads an address into PPUADDR, and then it writes repeatedly to PPUDATA to fill VRAM.<br /></div><br /><br />So, I am wondering if when we run our PPU cycles after running the current CPU instructions in our execution loop, do we read the registers and perform the memory operations?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">executionLoop() {<br />&nbsp; &nbsp; &nbsp; executeCpuInstruction(); // potentially a PPU register access here.<br />&nbsp; &nbsp; &nbsp; executePpuCycles(); // do we handle the writes to VRAM here based off the registers?<br />}<br /></div><br /><br />OR does the documentation mean that these &quot;registers&quot; can be seen as directly mapped to PPU RAM as the only &quot;path&quot; to the PPU memory since both CPU and PPU buses are separate (which I assume it means they don't share memory, which I know.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hangin10</b> [ Sat Aug 26, 2017 8:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU writes to PPU Memory.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That would not work for some instructions as it doesn't represent the two happening at the same time. For example, read-modify-write instructions (from nesdev.com/6502_cpu.txt):<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">   <br />Read-Modify-Write instructions (ASL, LSR, ROL, ROR, INC, DEC,<br />                                     SLO, SRE, RLA, RRA, ISB, DCP)<br /><br />        #  address R/W description<br />       --- ------- --- ------------------------------------------<br />        1    PC     R  fetch opcode, increment PC<br />        2    PC     R  fetch address, increment PC<br />        3  address  R  read from effective address<br />        4  address  W  write the value back to effective address,<br />                       and do the operation on it<br />        5  address  W  write the new value to effective address<br /></div><br /><br />Between CPU cycles 3 and 4, atleast 3 PPU cycles (3.2 on PAL, I think) have happened, so even if reads/writes to $2007 (for example) only happened on PPU clocks, it wouldn't matter to the cpu at all. What will matter is executing 3 PPU cycles for each of those cpu cycles, as the $2007 pointer (loopy_v? is there a better name?) would get incremented 3 times as the instruction does 3 accesses to the address.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>urbanspr1nter</b> [ Sat Aug 26, 2017 8:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU writes to PPU Memory.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If then for this case -- for emulator development purposes, would it then make sense to create some sort of buffer for these specific registers? Something like a queue that holds a struct of memory reads and writes to the PPU? Then we can read the queue and process these memory operations to &quot;catch up&quot; to the CPU?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hangin10</b> [ Sat Aug 26, 2017 9:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU writes to PPU Memory.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's one option. It takes being careful about when various things trigger catch up, like sprite-0-hit. In my case, I just chose to write my cpu as NES-specific as it has calls to ppu_cycles(3) throughout instructions after emulating each cycle, although sometimes that's not necessary as not every cycle of every instruction has a memory access that's important to the ppu like reading the absolute address operand (eg. could jump to PC=$2000, but the chances of there being useful code from that (bus conflict?) are slim to none) or none at all (eg. nop, branches, etc) just end that switch-case with ppu_cycles(3*whatever cycles). (my emu was NTSC only too  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>urbanspr1nter</b> [ Sun Aug 27, 2017 6:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU writes to PPU Memory.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haha, ok.. Let me try that. I will plan for some of the cases you had mentioned.... Right now my goal is to just get the Donkey Kong title screen to appear. &gt;.&lt; <br /><br />I think my plan is that since I have counted all CPU for each instruction, after the execution for the CPU instruction, I will take the CPU cycles * 3 to get the PPU cycles to be executed. The plan is to use that to know how many cycles the PPU should executed. When I run my PPU , I will decrement that value for the specific operations involved such as memory access (2 cycles?) until it is &lt;= 0. <br /><br />I have been looking at this document to get an idea of how I should execute my PPU cycles: <!-- m --><a class="postlink" href="https://wiki.nesdev.com/w/index.php/PPU_rendering">https://wiki.nesdev.com/w/index.php/PPU_rendering</a><!-- m -->.<br /><br />I would assume that when my PPU state is at scanline 241, I would then just trigger the NMI and Vblank and after the PPU has finished execution, my loop will just check for that NMI flag raised and execute the NMI routine from there...<br /><br />Also, I just had a realization on how should a CPU read from PPU Memory work? Say an LDA from $2007... That would be buffered into the queue too, right?  <br /><br />Not looking for exact accuracy, but I am not sure of any considerations I should take with this approach... What are your thoughts?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>