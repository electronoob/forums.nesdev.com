<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - level object coordinates trick</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">level object coordinates trick</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9818">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9818</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Feb 17, 2013 6:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've heard that some NES games used subpixel coordinates in the format where the per-pixel coordinate is shifted by 4 bits, and the low 4-bits are subpixels.  If 2 bytes are used for the coordinates, levels are limited to being up to 16 screens long.<br /><br />A trick to having longer levels that I came up with, is to have a small level collision map buffer in ram, and have it &quot;wrap&quot; as the player advances, so that a level can be longer than 16 screens in legnth, without resorting to using 3rd byte.<br /><br />Is this a new trick, or was it already used a long time ago, and I just didn't think about it until now?<br /><br />EDIT: Fixed poor wording.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sun Feb 17, 2013 6:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I've heard that some NES games used subpixel coordinates in the format where the per-pixel coordinate is shifted by 4 bits, and the low 4-bits are subpixels. If 2 bytes are used for the coordinates, levels are limited to being up to 16 screens long.<br /><br />A trick is to have a small level collision map buffer in ram, and have it &quot;wrap&quot; as the player advances, so that a level can be longer than 16 screens in legnth.<br /><br />Is this a new trick, or was it already used a long time ago, and I just didn't think about it until now?</div><br />I don't think it's too new. I do something a little similar. My subpixels for X and Y are stored in one byte.<br /><br />00XXXYYY. (I only have eight degrees of precision, not 16. The other two bits are used for something else. <br />I have a small 2x2 screen collision map in RAM, and my collision routine only uses the lowest bit of the sprite's high byte to check where it is in this map. It copies in 2 new vertical screens when I scroll horizontally passed a border, and vice versa.<br /><br />By how you're looking at things, my map size is limited to 2 screens per axis, but it could really be any size. My method still uses 19 bits per axis, even if 7 bits are ignored for a lot of things. If I wanted to, I could use 12 bits per axis. Your method (a fractional element of 16) could use 13 bits per axis. (4 bits for fractional element+8bits for low byte+1bit for high byte) Edit2: Well, I guess you could also use 3 more bits just to get more screens in the window. But there will only be the border between two screens per axis displayed at once on NES, so I see no point to allocate RAM to more than 2 screens.<br /><br />I guess the difference between my method and your method is that I still store the entire high byte of each axis. I just don't need or use 7 bits of it for collisions. But those 7 bits are useful for other things that aren't background collisions.<br /><br />Edit: Also, I don't store my subpixels with half of my low byte, because subpixel precision for collisions doesn't matter to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Feb 17, 2013 7:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Scrolling the nametable itself works similarly. Scrolling coordinates are only 8 bits for each axis, which scrolls around up to four screens, and to the player looks like you're scrolling over a large level made up of tens of screens. I imagine it like one of those lamps with a circular shade that rotates.<br /><br />Another way to deal with the coordinate issue is to keep the fraction in a separate byte, since it's not needed when checking for collisions, just when applying an object's velocity once each frame. This gives you the full 64K coordinate space in the main two bytes. It also means that you don't need to keep fractions on all objects, just those that have more involved physics. This way collisions are easy between fractional and non-fractional objects. It doesn't really seem issue if it's not cleared when the player is forced to a position, like when landing on a floor, so this is further lack of a need to adjust the fraction byte in most cases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Feb 17, 2013 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">A trick is to have a small level collision map buffer in ram, and have it &quot;wrap&quot; as the player advances, so that a level can be longer than 16 screens in legnth.</div><br />This 2-screen sliding window of decompressed level data dates back to SMB1. But there are a few <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4706" class="postlink">tradeoffs about destructibility</a> if you're attempting bidirectional scrolling on the NES without using extra PRG RAM. Maps like WORLD 1-2 are why you can't go backward in SMB1.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Feb 17, 2013 8:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Another way to deal with the coordinate issue is to keep the fraction in a separate byte, since it's not needed when checking for collisions, just when applying an object's velocity once each frame. This gives you the full 64K coordinate space in the main two bytes. It also means that you don't need to keep fractions on all objects, just those that have more involved physics. This way collisions are easy between fractional and non-fractional objects.</div><br />My approach exactly. Packing coordinate bits into 2 bytes doesn't even save you that much RAM, so I'd much rather use 3 bytes per coordinate (2 for the integer part + 1 for the fractional part) and not have to worry about complex bit layouts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Feb 17, 2013 8:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh yeah right, you don't have to do a two-byte-shift to get the pixel coordinates, e.g. when moving sprites.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Feb 17, 2013 9:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Another way to deal with the coordinate issue is to keep the fraction in a separate byte, since it's not needed when checking for collisions, just when applying an object's velocity once each frame. This gives you the full 64K coordinate space in the main two bytes. It also means that you don't need to keep fractions on all objects, just those that have more involved physics. This way collisions are easy between fractional and non-fractional objects.</div><br />My approach exactly. Packing coordinate bits into 2 bytes doesn't even save you that much RAM, so I'd much rather use 3 bytes per coordinate (2 for the integer part + 1 for the fractional part) and not have to worry about complex bit layouts.</div><br /><br />This is the way I usually do it too, but I do see a few benefits of switching to the &quot;2 byte method&quot; when it comes to the SNES:<br /><br />-All coordinates are word size<br />-Tile collision address calculation is much simpler<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">00XXXYYY. (I only have eight degrees of precision, not 16. The other two bits are used for something else.</div><br /><br />Doesn't that approach kind've overcomplicates things?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sun Feb 17, 2013 11:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">00XXXYYY. (I only have eight degrees of precision, not 16. The other two bits are used for something else.</div><br />Doesn't that approach kind've overcomplicates things?</div><br />A little, but I lose very little time every frame for the savings as opposed to similar methods that use the same amount of RAM. There are reasons why I use 8 subpixels instead of 16 and other stuff, but it feels like it'd be off topic. There's a method to the madness, I promise!<br /><br />What you're suggesting (at least for NES), is sort of a similar thing. You could just use three bytes like blargg and tokumaru suggested, and it'd be much simpler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Feb 18, 2013 6:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another way of thinking of the separate fraction byte is as a form of a timer to move a whole pixel from the object's position every once in a while. Adding a fraction to it every frame has a similar effect to counting down and moving an extra pixel when it reaches 0. So in this respect, it's an implementation detail of the particular object. All the high-level collision/sprite system sees is its whole pixel movements, since that's all that matters.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Feb 18, 2013 8:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What kind of coordinate systems did people usually use for the Sega Genesis.  At first glance it looks like the 68000 can benefeit from using 32-bit registers, but then you realize that you can't manipulate the individual bytes that make up the register, without shifting or loading to memory, neither of which the 68000 is good at.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Feb 18, 2013 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">What kind of coordinate systems did people usually use for the Sega Genesis.</div><br />IIRC from the <a href="http://info.sonicretro.org/Sonic_Physics_Guide" class="postlink">Sonic Physics Guide</a>, object coordinates are 16 bits, with 8 extra bits for the fractional part, at least in all main Sonic games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Feb 18, 2013 9:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">What kind of coordinate systems did people usually use for the Sega Genesis.</div><br />IIRC from the <a href="http://info.sonicretro.org/Sonic_Physics_Guide" class="postlink">Sonic Physics Guide</a>, object coordinates are 16 bits, with 8 extra bits for the fractional part, at least in all main Sonic games.</div><br /><br />Do you know if the fractional byte is in the same register as the coordinates, or does the fractional byte have it's own register?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Tue Feb 19, 2013 9:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On 68K the easiest thing to do is to use 16.16 as you can use SWAP to separate fraction and whole. Lot less headache around code too. I am more than certain a lot of games use that way. Anything involving 8 bits is not too efficient on 68K, as 8 bits take as many cycles as 16 bits, but only processes half the data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Tue Feb 19, 2013 3:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually I think the most common method is to just store the coordinates as integers directly and fake subpixel accuracy where really needed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Feb 19, 2013 7:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: level object coordinates trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Interesting, what are ways of faking subpixel accuracy without subpixels? Note that a &quot;add a pixel evern N frames&quot; is subpixel, it's just using a &quot;reciprocal&quot; approach for storing the fraction (1/n instead of n/(2^b)).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>