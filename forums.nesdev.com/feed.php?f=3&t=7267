<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=7267" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-12-16T14:53:56-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=7267</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-12-16T14:53:56-07:00</updated>
<published>2010-12-16T14:53:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71575#p71575</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71575#p71575"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71575#p71575"><![CDATA[
On the 6502, this is correct. But on the 65816, an instruction can be /ABORTed part-way through. This was intended to work with a mapper to support virtual memory.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Dec 16, 2010 2:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-12-16T13:01:24-07:00</updated>
<published>2010-12-16T13:01:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71563#p71563</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71563#p71563"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71563#p71563"><![CDATA[
You can't interrupt an instruction mid-execution. The interrupt is serviced between instructions. Otherwise I can't imagine it being very stable at all.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Thu Dec 16, 2010 1:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Wave]]></name></author>
<updated>2010-12-16T04:13:58-07:00</updated>
<published>2010-12-16T04:13:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71551#p71551</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71551#p71551"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71551#p71551"><![CDATA[
<div class="quotetitle">beannaich wrote:</div><div class="quotecontent"><br />It would be one hell of an undertaking, but it would be awesome once it's done! I imagine it would run horribly slow though, possibly too slow for general use? The largest concern I have is if you execute an interrupt mid-instruction, what happens to that instruction after control is returned? Is it skipped, reset, or does it go back to work as if nothing happened? I imagine the latter is true, but I can only speculate!<br /><br />Indeed, having a static timer inside each instructions execution method would make for tidier code, but again, if an interrupt occurred during say LDA, that cycle counter would have to be reset or the next LDA called would continue at the previous instruction's step!<br /><br />Let us all know how much progress you make, it would be nice to have a proof of concept at least!<br /></div><br />I think interrupt waits until instruction is executed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4116">Wave</a> — Thu Dec 16, 2010 4:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2010-12-16T04:03:10-07:00</updated>
<published>2010-12-16T04:03:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71550#p71550</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71550#p71550"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71550#p71550"><![CDATA[
It would be one hell of an undertaking, but it would be awesome once it's done! I imagine it would run horribly slow though, possibly too slow for general use? The largest concern I have is if you execute an interrupt mid-instruction, what happens to that instruction after control is returned? Is it skipped, reset, or does it go back to work as if nothing happened? I imagine the latter is true, but I can only speculate!<br /><br />Indeed, having a static timer inside each instructions execution method would make for tidier code, but again, if an interrupt occurred during say LDA, that cycle counter would have to be reset or the next LDA called would continue at the previous instruction's step!<br /><br />Let us all know how much progress you make, it would be nice to have a proof of concept at least!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Thu Dec 16, 2010 4:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2010-12-15T06:15:35-07:00</updated>
<published>2010-12-15T06:15:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71467#p71467</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71467#p71467"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71467#p71467"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br /><div class="quotetitle">NESICIDE wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I seem to remember Nintendulator emulates cycle by cycle like that.<br /></div><br /><br />I didn't come to that conclusion looking at the source for v0.975.   <img src="http://forums.nesdev.com/images/smilies/icon_question.gif" alt=":?:" title="Question" /></div><br />I initially thought that too, but actually it does emulate cycle by cycle. Check the functions which handle different addressing modes (AM_xxx), every MemGet()/MemSet() increases cycle count.</div><br /><br />I had the same thought and, indeed, that's how my emulator does it too.  However, half way through posting my "there's tons of emulators out there that do cycle-by-cycle emulation, I re-read the original suggestion.  <br /><br />The *difference* between the way we do it and the suggestion is that the LDA function proposed takes a number of cycles to run as an argument, keeps track of the current cycle of the LDA instruction statically, and returns when the passed-in number of cycles has been exhausted or when the instruction completes [whichever occurs first].  So, the LDA function may be called with a cycle count of 1 in which case it would only execute *one* memory-access cycle part of the LDA and then return.<br /><br />I do BRK/NMI/IRQ that way just so I can get the granularity necessary to pass the CPU interrupt tests.  I thought about redoing my CPU core entirely to make every instruction have a cycles parameter and return when the cycles were depleted, not necessarily when the instruction was completed.  But I wonder if an easier approach would be to just have a subordinate catch-up routine in the PPU that is called whenever the CPU notices that the number of cycles its been asked to emulate has been depleted.  That way the PPU can change state mid-CPU-instruction and the CPU can react as necessary.  Of course there'd need to be some way to stop the thing, otherwise the CPU would just keep asking for more from the PPU forever.<br /><br />I think there's two "cycle-based" ideas that conflict.  One is the independent cycle-based component idea, where each core runs one cycle at a time exactly as its hardware equivalent would do.  Then there's the cycle-synced components idea where each component is cycle-based and also synced at its cycle-granularity to the other components.  For the CPU/APU this is easy since they're 1:1.  For the CPU/PPU whenever the CPU runs one cycle the PPU should have run 3 or 3.2.  But, in both our cases the CPU could run ahead of the PPU because it might be doing multiple reads/writes to satisfy the completion of an LDA.  In my emulator the first two cycles of any instruction are broken apart so that the PPU/CPU are cycle-synced for those two cycles.  But once the instruction begins operation, the CPU will jump ahead of the PPU depending on how many cycles remain to be done for the instruction.<br /><br />Intersting thought...I might have to crack open my CPU core again.   <img src="http://forums.nesdev.com/images/smilies/icon_cool.gif" alt="8)" title="Cool" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Wed Dec 15, 2010 6:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2010-12-15T04:58:41-07:00</updated>
<published>2010-12-15T04:58:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71465#p71465</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71465#p71465"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71465#p71465"><![CDATA[
<div class="quotetitle">NESICIDE wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I seem to remember Nintendulator emulates cycle by cycle like that.<br /></div><br /><br />I didn't come to that conclusion looking at the source for v0.975.   <img src="http://forums.nesdev.com/images/smilies/icon_question.gif" alt=":?:" title="Question" /></div><br />I initially thought that too, but actually it does emulate cycle by cycle. Check the functions which handle different addressing modes (AM_xxx), every MemGet()/MemSet() increases cycle count.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Wed Dec 15, 2010 4:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-12-14T19:22:18-07:00</updated>
<published>2010-12-14T19:22:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71447#p71447</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71447#p71447"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71447#p71447"><![CDATA[
Nestopia emulates the instructions cycle by cycle.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Dec 14, 2010 7:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2010-12-14T18:33:15-07:00</updated>
<published>2010-12-14T18:33:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71446#p71446</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71446#p71446"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71446#p71446"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I seem to remember Nintendulator emulates cycle by cycle like that.<br /></div><br /><br />I didn't come to that conclusion looking at the source for v0.975.   <img src="http://forums.nesdev.com/images/smilies/icon_question.gif" alt=":?:" title="Question" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Tue Dec 14, 2010 6:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-12-14T07:57:02-07:00</updated>
<published>2010-12-14T07:57:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71432#p71432</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71432#p71432"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71432#p71432"><![CDATA[
I seem to remember Nintendulator emulates cycle by cycle like that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 14, 2010 7:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2010-12-13T22:22:38-07:00</updated>
<published>2010-12-13T22:22:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71428#p71428</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71428#p71428"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71428#p71428"><![CDATA[
It would be so counter-intuitive, but how awesome would it be to do a cycle by cycle CPU emulation? Like LDA:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int LDA&#40;int cycles&#41;<br />&#123;<br />    static int ldaCycles=0;<br /><br />    while &#40;cycles &gt; 0&#41;<br />    &#123;<br />        switch &#40;ldaCycles&#41;<br />        &#123;<br />            case 0: // fetch address?<br />            ...<br />            case x: return &#40;cycles - ldaCycles&#41;;<br />        &#125;<br />    &#125;<br /><br />    return 0;<br />&#125;</div><br /><br />It would be a huge pain in the ass, but I think it would be neato!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Mon Dec 13, 2010 10:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2010-12-13T22:02:19-07:00</updated>
<published>2010-12-13T22:02:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71427#p71427</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71427#p71427"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71427#p71427"><![CDATA[
The 6502.org forums have details about instruction execute and the PLA (programmable logic array, not to be confused with 'pull accumulator').<br /><br />The following links mainly discuss how the 6502 handles to so called "illegal instructions".  However, they also contain clues about what the 6502 does on each clock cycle while executing an instruction.<br /><br /><!-- m --><a class="postlink" href="http://forum.6502.org/viewtopic.php?t=1406">http://forum.6502.org/viewtopic.php?t=1406</a><!-- m --><br /><!-- m --><a class="postlink" href="http://www.pagetable.com/?p=39">http://www.pagetable.com/?p=39</a><!-- m --><br /><br />Once this data is gathered, I think that it would make an excellent addition to the wiki.<br /><br />EDIT:<br /><!-- m --><a class="postlink" href="http://www.geocities.jp/team_zero_three/FC/index_e.html">http://www.geocities.jp/team_zero_three/FC/index_e.html</a><!-- m --><br />(search for first use of the word "dummy")<br /><br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?p=11288#11288">http://nesdev.com/bbs/viewtopi ... 1288#11288</a><!-- m --><br /><br />EDIT #2: Found this on the geocities.jp page:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Although the FC/NES 6502 is not completely same as the general NMOS6502 chip, it has been verified that the FC/NES 6502 also has undocumented instructions and executes RMWW for RMW instructions.<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Mon Dec 13, 2010 10:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-12-13T21:57:22-07:00</updated>
<published>2010-12-13T21:57:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71426#p71426</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71426#p71426"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71426#p71426"><![CDATA[
I think <a href="http://nesdev.com/6502_cpu.txt" class="postlink">this</a> is the document. The last third of the document appears to detail several instructions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Dec 13, 2010 9:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2010-12-13T21:39:53-07:00</updated>
<published>2010-12-13T21:39:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71425#p71425</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71425#p71425"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71425#p71425"><![CDATA[
It seems that this is a good idea then! There are a few things still confusing me, take for example LDA (xx,X) (Assume all reads/writes consume 1 CPU cycle):<br /><br />Read Instruction (PC)<br />Read Zero Page Address (PC + 1)<br />Add X, with wrapping<br />Read Low Byte ($00)<br />Read High Byte ($20)<br />Read Data ($2000)<br /><br />This sequence totals 5 cycles, but the actual instruction requires 6.. Where is the missing cycle coming from?<br /><br />EDIT: That would be great tokumaru!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Mon Dec 13, 2010 9:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-12-13T21:37:59-07:00</updated>
<published>2010-12-13T21:37:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71424#p71424</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71424#p71424"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71424#p71424"><![CDATA[
I couldn't find it right now, but I'm pretty sure someone in this board posted a link to a document that lists everything each instruction does every cycle, so it should contain all the dummy reads/writes. I'll update here if I can find it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Dec 13, 2010 9:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-12-13T21:34:09-07:00</updated>
<published>2010-12-13T21:34:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71423#p71423</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71423#p71423"/>
<title type="html"><![CDATA[CPU Quirks]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7267&amp;p=71423#p71423"><![CDATA[
I think all the "read-modify-write" instructions (including shift instructions) do that.<br /><br />What's bad is that some games want to see the dummy write, and not the real write afterwards.  Good ol MMC1 games and INC xxxx to write FF as the dummy value.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Mon Dec 13, 2010 9:34 pm</p><hr />
]]></content>
</entry>
</feed>