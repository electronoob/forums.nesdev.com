<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - &quot;Mickey Mouse&quot; 8-bit architectures</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">&quot;Mickey Mouse&quot; 8-bit architectures</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=15923">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=15923</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue May 09, 2017 7:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>&quot;Mickey Mouse&quot; 8-bit architectures</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">In <a href="https://forums.nesdev.com/viewtopic.php?p=195455#p195455" class="postlink">this post</a>, Garth wrote:</div><div class="quotecontent"> My last major assembly-language project was on a PIC16 microcontroller which only has an 8-level return stack, and toward the end I was constantly overrunning it<br />[...]<br />(The PIC16 is really mickey-mouse compared to the 6502, BTW.)</div><br />But not Mickey Mouse enough to run <a href="http://bootgod.dyndns.org:7777/profile.php?id=332" class="postlink"><em>Capade</em></a>, <a href="http://superfamicom.org/info/mickey-mania-the-timeless-adventures-of-mickey-mouse" class="postlink"><em>Mania</em></a>, and <a href="https://en.wikipedia.org/wiki/Epic_Mickey" class="postlink"><em>Epic</em></a>.<br /><br />But seriously:<br />Is the PIC16 also shoddier than the Intel 8080? We previously discussed its <a href="https://forums.nesdev.com/viewtopic.php?p=177483#p177483" class="postlink">lack of useful indexed addressing modes</a> other than moving the HL pointer around. Or the <a href="https://en.wikipedia.org/wiki/Intel_MCS-51" class="postlink">8051</a>? Are there criteria for what makes an architecture shoddy?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Tue May 09, 2017 9:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Mickey Mouse&quot; 8-bit architectures</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You know, you've suggested that the 8080/LR35902/Z80's poor complement of indexed addressing modes are some kind of fatal flaw a few times since that discussion; not to get into some kind of 8-bit instruction set holy war - I love the 6502 - but one could easily argue that the 6502's register paucity, or its huge number of obviously &quot;missing&quot; instructions (push and pull X or Y, for instance), or the aspects of its design that make it a poor target for C compilers are similarly debilitating. In practice, just as one learns to make effective use of the programming model of the 6502 (say, keeping a convention of storing temporaries on zero page, or <a href="http://wilsonminesco.com/stacks/" class="postlink">using the 6502's powerful addressing modes to implement a more flexible software stack</a>), so too does one learn to work with the Z80's strengths and limitations with things like structs-of-arrays rather than arrays-of-structs and page alignment. The comparison of the Z80 - a sophisticated-for-its-time general-purpose CPU that was selected over the 6502 for many computers and video game platforms throughout the 8-bit era - to a primitive microcontroller like the PIC16 (an 8-deep stack! my god! <a href="https://learn.mikroe.com/ebooks/picmicrocontrollersprogramminginassembly/chapter/instruction-set/" class="postlink">just look at this instruction set</a>!), just because it can be a little clumsy with random access on structs or non-page aligned arrays, is practically <em>offensive</em> <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />At any rate, to answer your question so as to make my response a constructive contribution to the topic at hand rather than just a rant, there's of course no precise definition of what makes an architecture &quot;Mickey Mouse&quot; or not, but a couple of obvious things that make could make it feel less powerful or less ergonomic that come to mind are inconsistencies (different registers having different capabilities, for instance) or deficiencies that present roadblocks with no obvious workarounds (say, an incredibly shallow stack). In general, if across the range of problems you need to solve you need to spend a higher proportion of your time thinking about and writing code to work around the CPU  instead of dealing with the problem at hand, you'll get the impression that a CPU is &quot;Mickey Mouse&quot;.<br /><br />Or, in even more general, a CPU is &quot;Mickey Mouse&quot; if it makes your life difficult  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed May 10, 2017 12:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Mickey Mouse&quot; 8-bit architectures</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Is the PIC16 also shoddier than the Intel 8080?<br /></div>Yes.<br /><br />As someone who has an almost irrational fondness of the 8-bit PIC family, it's pretty terrible.<br /><br />It's roughly comparable to the 8051, but with the big plus of both constant and very low interrupt latency compared to almost all other microcontrollers.<br /><br />There are 5 major groups in the 8-bit PICs:<br /><br />12-bit instruction word PICs, originating with the very first parts (PIC1640, PIC1650, &amp;c). A few of the &quot;PIC12xxx&quot; parts now. Intended to control <em>peripherals</em> on a CP1600-based (yes, the one from the Intellivision) computer. One pointer access port, eight other hardware definition registers, and 23 more bytes of RAM for 32 total &quot;first class&quot; addresses. Everything else has to be addressed indirectly (pointer register) or via banking. Usually only two entries in the call stack. Maximum program size without bankswitching is 9 bits→512 instructions. Doesn't always support interrupts.<br /><br />&quot;older&quot; 14-bit instruction word PICs. Usually &quot;PIC16xxx&quot; parts. Adds a real call stack (the 8-call deep that Garth was complaining about) as well as more bits for RAM (7 bits now, making 128 bytes). Its prettiest form is the PIC10F322, which is as much as you can fit without bankswitching. Maximum program size without bankswitching is 11 bits→2048 instructions.<br /><br />&quot;traditional&quot; 16-bit instruction word PICs. PIC18xxx. Three pointer registers, 9 bits for specifying 512 bytes of &quot;first class&quot; RAM, of which half is used as a dedicated access to the bankswitching interface and half is dedicated for an &quot;access&quot; bank providing faster access to the I/O registers and some RAM. Added a set of &quot;shadow registers&quot; such that interrupts wouldn't require saving or restoring the main thread's state. Maximum program size is 23 bits→8M instructions.<br /><br />These first three were designed to be <em>source</em>-level compatible; a PIC12F508 program could be reassembled for a PIC18F452 with very few (if any) changes.<br /><br />&quot;newer&quot; 14-bit instruction word PICs. Usually &quot;PIC16xxx&quot; parts. Adds a second pointer register, to increase the ease of targeting C to it. Moves the original fixed registers around so it's no longer source-level compatible. Started growing all sorts of fun peripherals. Also acquired shadow registers.<br /><br />&quot;extended&quot; 16-bit instruction word PICs. Supported alternate mode in all but the oldest PIC18xxx. Redefines the meaning of the 96 bytes of &quot;access bank&quot; to instead mean <em>pointer-relative</em>, i.e. for fast access of variables on a C stack.<br /><br />But, remember, the original design, and what it excels at, is <em>high speed first-class access to its own peripheral controls</em>. C compatibility is an afterthought, and it shows. But a native asm interrupt handler that can reliably do something in a constant 5 instruction cycles from the original event? Sure. And almost all instructions take the same amount of time to execute, so constant-time code is much more tenable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Mon Oct 16, 2017 10:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Mickey Mouse&quot; 8-bit architectures</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">I love the 6502 - but one could easily argue that the 6502's register paucity, or its huge number of obviously &quot;missing&quot; instructions (push and pull X or Y, for instance), or the aspects of its design that make it a poor target for C compilers are similarly debilitating.</div><br />The CMOS 6502 (65c02) has been out for about 35 years and is still in production with no end in sight, unlike the NMOS which went out of production many years ago.  The 65c02 does have push and pull X and Y (PHX, PLX, PHY, PLY), and quite a few others.  The following is from my page on the differences between the NMOS and CMOS '02, at <!-- m --><a class="postlink" href="http://wilsonminesco.com/NMOS-CMOSdif/">http://wilsonminesco.com/NMOS-CMOSdif/</a><!-- m --> :<br /><br />CMOS 65c02 new instructions that were not on the NMOS 6502 at all:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">instruction&nbsp; &nbsp; op code<br />&amp; addr mode&nbsp; &nbsp; (in hex)&nbsp; &nbsp; description<br /><br />BRA rel&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 80&nbsp; &nbsp; &nbsp; &nbsp;Branch Relative Always (unconditionally), range -128 to +127.<br /><br />PHX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DA&nbsp; &nbsp; &nbsp; &nbsp;PusH X.&nbsp; ‾⌉<br />PLX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FA&nbsp; &nbsp; &nbsp; &nbsp;PulL X.&nbsp; &nbsp;|&nbsp; No need to go through A for these anymore.<br />PHY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5A&nbsp; &nbsp; &nbsp; &nbsp;PusH Y.&nbsp; &nbsp;|<br />PLY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7A&nbsp; &nbsp; &nbsp; &nbsp;PulL Y.&nbsp; _⌋<br /><br />STZ&nbsp; addr&nbsp; &nbsp; &nbsp; &nbsp; 9C&nbsp; &nbsp; &nbsp; &nbsp;‾⌉<br />STZ&nbsp; addr,X&nbsp; &nbsp; &nbsp; 9E&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; STore a Zero, regardless of what's in A, X, or Y.<br />STZ&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 64&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; Processor registers are not affected by STZ.<br />STZ&nbsp; ZP,X&nbsp; &nbsp; &nbsp; &nbsp; 74&nbsp; &nbsp; &nbsp; &nbsp;_⌋<br /><br />TRB&nbsp; addr&nbsp; &nbsp; &nbsp; &nbsp; 1C&nbsp; &nbsp; &nbsp; &nbsp;‾⌉&nbsp; Test &amp; Reset memory Bits with A.<br />TRB&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 14&nbsp; &nbsp; &nbsp; &nbsp;_⌋<br /><br />TSB&nbsp; addr&nbsp; &nbsp; &nbsp; &nbsp; 0C&nbsp; &nbsp; &nbsp; &nbsp;‾⌉&nbsp; Test &amp; Set memory Bits with A.<br />TSB&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 04&nbsp; &nbsp; &nbsp; &nbsp;_⌋<br /><br />BBR&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp;0F-7F &#91;1&#93;&nbsp; &nbsp;Branch if specified Bit is Reset. ‾⌉ These are most useful<br />BBS&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp;8F-FF &#91;1&#93;&nbsp; &nbsp;Branch if specified Bit is Set.&nbsp; &nbsp; | when I/O is in ZP.&nbsp; They<br />RMB&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp;07-77 &#91;1&#93;&nbsp; &nbsp;Reset specified Memory Bit.&nbsp; &nbsp; &nbsp; &nbsp; | are on WDC &amp; Rockwell but<br />SMB&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp;87-F7 &#91;1&#93;&nbsp; &nbsp;Set specified Memory Bit.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_⌋ not GTE/CMD or Synertek.<br /><br />STP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DB&nbsp; &nbsp; &nbsp; &nbsp;SToP the processor until the next RST.&nbsp; &nbsp; &nbsp;‾⌉<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Power-supply current drops to nearly zero.&nbsp; |&nbsp; These two are<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; on WDC only.<br />WAI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CB&nbsp; &nbsp; &nbsp; &nbsp;WAIt.&nbsp; It's like STP, but any interrupt&nbsp; &nbsp; &nbsp;| <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; will make it resume execution.&nbsp; Especially&nbsp; |<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useful for superfast interrupt response,&nbsp; &nbsp; |<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; with zero latency.&nbsp; See interrupts primer. _⌋<br /><br /><br />Note: &#91;1&#93; Only the most-significant digit of the op code changes; so for example BBR's<br />op codes are 0F, 1F, 2F, 3F, 4F, 5F, 6F, and 7F, for BBR0 to BBR7.&nbsp; The bit number is<br />specified in the op code rather than the operand.&nbsp; These operate in ZP only.&nbsp; Rockwell<br />added these first, for their microcontrollers that had I/O in ZP.&nbsp; WDC added them in<br />the early 1990's.&nbsp; The Aug '92 data sheet shows the W65C02S available without them, and<br />the W65C02SB with them, but said eventually they would all have them, and be labeled<br />W65C02S, without the B.&nbsp; By the July '96 data sheet, these instructions were standard<br />in all of them.</div><br /><br /><br />CMOS 65c02 instructions' addressing modes that were not on the NMOS 6502:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">instruction&nbsp; &nbsp; op code<br />&amp; addr mode&nbsp; &nbsp; (in hex)&nbsp; &nbsp; description<br /><br />ADC&nbsp; (addr)&nbsp; &nbsp; &nbsp; 72&nbsp; &nbsp; &nbsp; &nbsp;ADC absolute indirect<br />AND&nbsp; (addr)&nbsp; &nbsp; &nbsp; 32&nbsp; &nbsp; &nbsp; &nbsp;AND absolute indirect<br />BIT&nbsp; addr,X&nbsp; &nbsp; &nbsp; 3C&nbsp; &nbsp; &nbsp; &nbsp;BIT absolute indexed<br />BIT&nbsp; ZP,X&nbsp; &nbsp; &nbsp; &nbsp; 34&nbsp; &nbsp; &nbsp; &nbsp;BIT zero-page indexed<br />BIT&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;89&nbsp; &nbsp; &nbsp; &nbsp;BIT immediate<br />CMP&nbsp; (addr)&nbsp; &nbsp; &nbsp; D2&nbsp; &nbsp; &nbsp; &nbsp;CMP absolute indirect<br />DEC&nbsp; A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3A&nbsp; &nbsp; &nbsp; &nbsp;DECrement accumulator (alternate mnemonic: DEA)<br />INC&nbsp; A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1A&nbsp; &nbsp; &nbsp; &nbsp;INCrement accumulator (alternate mnemonic: INA)<br />EOR&nbsp; (addr)&nbsp; &nbsp; &nbsp; 52&nbsp; &nbsp; &nbsp; &nbsp;EOR absolute indirect<br />JMP&nbsp; (addr,X)&nbsp; &nbsp; 7C&nbsp; &nbsp; &nbsp; &nbsp;JMP absolute indexed indirect<br />LDA&nbsp; (addr)&nbsp; &nbsp; &nbsp; B2&nbsp; &nbsp; &nbsp; &nbsp;LDA absolute indirect<br />ORA&nbsp; (addr)&nbsp; &nbsp; &nbsp; 12&nbsp; &nbsp; &nbsp; &nbsp;ORA absolute indirect<br />SBC&nbsp; (addr)&nbsp; &nbsp; &nbsp; F2&nbsp; &nbsp; &nbsp; &nbsp;SBC absolute indirect<br />STA&nbsp; (addr)&nbsp; &nbsp; &nbsp; 92&nbsp; &nbsp; &nbsp; &nbsp;STA absolute indirect</div><br /><br />Admittedly though, it is still poorly suited for a C compiler.<br /><br />In spite of my raking the PIC16 over the coals, I have become somewhat comfortable with it because of experience and the macros I have developed for it.  One of the backwards-thinking things is the instructions saying for example &quot;If such-and-such is true, then <span style="text-decoration: underline">don't</span> do the following.&quot;  I have hidden that in the macros, like in the following routine which uses the macros but is also called by a macro so once it's in place, I don't have to keep seeing the ugly details.  It's for displaying strings which could be in different pages of ROM:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;; DISP_ROM_STRING below is for displaying strings from the program memory pages containing the strings.<br />&nbsp;; It is called in the DISP_ROM_STR macro.<br />&nbsp;; Displaying will start where cursor position variable CURSOR_POS says, which is zero-based, meaning 0 is top line, left end.<br />&nbsp;; MIN_CURSOR_POS is not used.<br />&nbsp;; CURSOR_POS will not get incremented here; but a CHR$(254) (þ) will do SET_LCD_ADR to the beginning of the 2nd line.<br />&nbsp;; Start with the low program-memory address byte of the string's 1st char, minus 1, in W.&nbsp; This will go into TEMP_1 and be the<br />&nbsp;;&nbsp; &nbsp;index to keep fetching the next byte of the string, incrementing TEMP_1 each time, until a 00 byte is read.<br />&nbsp;; Start with high byte of string addr in TEMP_4.<br />&nbsp;; Typical usage would be MOVLW HIGH str_adr, MOVWF TEMP_4, MOVLW LOW (str_addr - 1), CALL DISP_ROM_STRING.<br />&nbsp;; The entry W value for the first string in the page will be 0, even though that first char starts at addr xx01.<br />&nbsp;; You will often want to call CLR_LCD first.&nbsp; Note that CLR_LCD takes 5ms.&nbsp; The DISP_ROM_STR macro provides that option.<br /><br />DISP_ROM_STRING:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Uses TEMP_1, 2, 4, &amp; LOOP_CNT_3.&nbsp; Start with ADL of desired string, minus 1, in W.<br />&nbsp; &nbsp; &nbsp; &nbsp; MOVWF&nbsp; &nbsp;TEMP_1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; The strings most often needed during signal generation should be in STR_TBL3,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; because shortness of program memory made me disable and enable interrupts in only<br />&nbsp; &nbsp; &nbsp; &nbsp; MOVF&nbsp; &nbsp; CURSOR_POS, W&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; one place, and I put the comparisons in reverse order because the STR_TBL1 section<br />&nbsp; &nbsp; &nbsp; &nbsp; CALL&nbsp; &nbsp; SET_LCD_ADR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; has an additional (ADDLW H'FE') instruction.&nbsp; &nbsp; &nbsp; SET_LCD_ADR uses LCD_TEMP.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; BEGIN&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Remember that writing to PCL makes PCLATH&lt;4:0&gt; get transferred to PCH.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVF&nbsp; &nbsp;TEMP_4, W&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; See which 256-byte page the desired string table is in.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CASE<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CASE_OF_&nbsp; HIGH&nbsp; STR_TBL3&nbsp; &nbsp; &nbsp; &nbsp; ; In the case of it being in string table 3:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COPY&nbsp; &nbsp;TEMP_4, TO, PCLATH&nbsp; &nbsp;; We can't use the LOOK_UP macro here because of the MOVF / MOVLW difference.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVF&nbsp; &nbsp;TEMP_1, W&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Get the index into the strings page back in W.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL&nbsp; &nbsp;STR_TBL3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; This is the PIC16 mickey-mouse lookup with RETLW's following the ADDWF PCL, F.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CLRF&nbsp; &nbsp;PCLATH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; PCLATh must be cleared before the jump assembled by the END_OF.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; END_OF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Now strings in STR_TBL3 will get interrupts enabled again sooner than others.<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CASE_OF_&nbsp; HIGH&nbsp; STR_TBL2&nbsp; &nbsp; &nbsp; &nbsp; ; If we want the second string table, do this second part.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COPY&nbsp; &nbsp;TEMP_4, TO, PCLATH&nbsp; &nbsp;; We can't use the LOOK_UP macro here because of the MOVF / MOVLW difference.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVF&nbsp; &nbsp;TEMP_1, W&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Get the index into the strings page back in W.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL&nbsp; &nbsp;STR_TBL2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; This is the PIC16 mickey-mouse lookup with RETLW's following the ADDWF PCL, F.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CLRF&nbsp; &nbsp;PCLATH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; PCLATh must be cleared before the jump assembled by the END_OF.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; END_OF<br /><br /><br />&nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CASE_OF_&nbsp; HIGH&nbsp; STR_TBL1&nbsp; &nbsp; &nbsp; &nbsp; ; Here, by default, we need the first string table (hence the commenting-out).<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COPY&nbsp; &nbsp;TEMP_4, TO, PCLATH&nbsp; &nbsp;; We can't use the LOOK_UP macro here because of the MOVF / MOVLW difference.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVF&nbsp; &nbsp;TEMP_1, W&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Get the index into the strings page back in W.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ADDLW&nbsp; H'FE'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; (This is because of the GOTO START at beginning of 256-byte page STR_TBL1 is in.)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL&nbsp; &nbsp;STR_TBL1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; This is the PIC16 mickey-mouse lookup with RETLW's following the ADDWF PCL, F.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CLRF&nbsp; &nbsp;PCLATH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; PCLATh must be cleared before the jump assembled by the END_OF.<br />&nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; END_OF_<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; END_CASE<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ANDLW&nbsp; H'FF'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Unfortunately RETLW in STR_TBLs doesn't affect flags, and CLRF clears Z; hence this line.<br />&nbsp; &nbsp; &nbsp; &nbsp; WHILE_NOT_ZERO&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; If the byte fetched was non-0, we still have more of the string to display.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUBLW&nbsp; D'254'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; See if it's CHR$(254) which is to tell it to go to the next line.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IF_EQ&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; If it is, tell the LCD to go to addr $10, to skip<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL&nbsp; &nbsp;SET10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; the rest of the top line.&nbsp; (It also can't increment across the boundary automatically.)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ELSE_&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Otherwise,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SET_LCD_ADR uses LCD_TEMP.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUBLW&nbsp; D'254'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; (get our original number back which we had before the destructive compare-to-254 above)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL&nbsp; &nbsp;WR_LCD_AUTO&nbsp; &nbsp; &nbsp; ; you can put it in the display without setting the address every time.&nbsp; Uses TEMP_2.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; END_IF<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INCF&nbsp; TEMP_1, F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Get ready to check the next byte.<br />&nbsp; &nbsp; &nbsp; &nbsp; REPEAT<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; RETURN<br />&nbsp;;------------------<br /></div><br /><br />I have this kind of macros for the 65c02 as well in a section of my website starting at <!-- m --><a class="postlink" href="http://wilsonminesco.com/StructureMacros/">http://wilsonminesco.com/StructureMacros/</a><!-- m --> .

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Mon Oct 16, 2017 10:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Mickey Mouse&quot; 8-bit architectures</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Garth wrote:</div><div class="quotecontent"><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">I love the 6502 - but one could easily argue that the 6502's register paucity, or its huge number of obviously &quot;missing&quot; instructions (push and pull X or Y, for instance), or the aspects of its design that make it a poor target for C compilers are similarly debilitating.</div><br />The CMOS 6502 (65c02) has been out for about 35 years and is still in production with no end in sight, unlike the NMOS which went out of production many years ago.  The 65c02 does have push and pull X and Y (PHX, PLX, PHY, PLY), and quite a few others. </div><br />Sure, but this is an NESdev site, the NES has an NMOS 6502 derivative without those instructions, and tepples (who broached the question) has done tons of NES/NMOS 6502 development. The point wasn't to disparage the 65(c)02 in particular, simply to point out that most microcomputer CPUs of the mid 70s have quirks and frustrating limitations that need to be worked around - including CPUs that tepples presumably wouldn't describe as &quot;Mickey Mouse&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Oct 17, 2017 12:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Mickey Mouse&quot; 8-bit architectures</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Garth wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">TRB&nbsp; addr&nbsp; &nbsp; &nbsp; &nbsp; 1C&nbsp; &nbsp; &nbsp; &nbsp;‾⌉&nbsp; Test &amp; Reset memory Bits with A.<br />TRB&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 14&nbsp; &nbsp; &nbsp; &nbsp;_⌋<br /><br />TSB&nbsp; addr&nbsp; &nbsp; &nbsp; &nbsp; 0C&nbsp; &nbsp; &nbsp; &nbsp;‾⌉&nbsp; Test &amp; Set memory Bits with A.<br />TSB&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 04&nbsp; &nbsp; &nbsp; &nbsp;_⌋<br /><br />BBR&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp;0F-7F &#91;1&#93;&nbsp; &nbsp;Branch if specified Bit is Reset. ‾⌉ These are most useful<br />BBS&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp;8F-FF &#91;1&#93;&nbsp; &nbsp;Branch if specified Bit is Set.&nbsp; &nbsp; | when I/O is in ZP.&nbsp; They<br />RMB&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp;07-77 &#91;1&#93;&nbsp; &nbsp;Reset specified Memory Bit.&nbsp; &nbsp; &nbsp; &nbsp; | are on WDC &amp; Rockwell but<br />SMB&nbsp; ZP&nbsp; &nbsp; &nbsp; &nbsp;87-F7 &#91;1&#93;&nbsp; &nbsp;Set specified Memory Bit.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_⌋ not GTE/CMD or Synertek.<br /></div></div>Out of curiosity, had you ever done any work for the Mitsu<s>mi</s><em>bishi</em> 740 microcontrollers?<br /><br /><em>I keep on getting those two backwards</em>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Wed Oct 18, 2017 10:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Mickey Mouse&quot; 8-bit architectures</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Out of curiosity, had you ever done any work for the Mitsumi 740 microcontrollers?</div><br />Should that say &quot;Mitsubishi&quot;?  I know there was a Mitsubishi microcontroller (µC) with a 65c02 at its heart, but Howard Speegle, an old but still very active and productive man who owns Diva Automation, was using them for some products he was selling, but Mits started demanding larger and larger minimum orders until it got so he could no longer continue.  Four years ago, he sent me an email, part of which is quoted below.  He gave me permission to use his material on forums where it would help promote the 6502.<br /><br /><ul><ul>The 6502 architecture remains nearly ideal in my book.  It is so sweet and regular that it is hard to screw up without great effort.  I once wrote a debug/monitor for the 6502 while waiting for my car to be serviced, assembled it in my head, drove back to the office, typed the machine code into an EPROM programmer, drove to my customer and plugged the EPROM into his system.  Unsurprisingly, it worked.  I could not do that with any other architecture I have ever seen.  I'm not bragging, I am simply describing the end result of an excellent design, that could support such a process.<br /><br />Now, after 54 years in the business, I still love the 6502, but have abandoned it for new designs simply because the only manufacturer [talking about Mits?] of this beautiful design finally succeeded in driving me away, after 20 years of fighting them to be able to purchase small quantities.<br /><br />I designed my first multi-axis motion controller in 1985, using five 6502s.  Each axis had a dedicated processor and the fifth one was for communications and program sequencing.<br /><br />The second generation design followed very quickly.  It was obvious that a single 6502 could service four axes of digital servo control without breaking a sweat and could also handle the system-level chores while leaving around 30% of capacity as performance margin.<br /><br />Very shortly afterward, I discovered that Mitsubishi was producing a microcontroller with a lovely set of on-board peripherals integrated extremely well with a 6502 core.  I don't know who was responsible for this superb integration, but it was beautifully melded with the 6502 architecture and retained the same direct and regular concepts of the 6502.  It was not only a pleasure to use, but it was implemented in CMOS and was offered in a version that could be clocked at 10 MHz.<br /><br />I was ecstatic until I learned that Mitsubishi hated small accounts even more so than Intel did.  Every step of the way from my first order in 1986 until my last in about 2004, I had to force them to sell to me.  They did not wan to sell me the chips, nor the assembler nor any support elements and certainly never provided any design support of any sort.  When Mitsubishi merged their microcontroller products under the name Renasas, they never informed me.  All I knew was that I was no longer able to buy the parts I needed to fulfill orders from my  customers.<br /><br />Eventually, I learned about Renasas and continued with them because to me, this was the most ideal circuit available on the market.<br /><br />There finally came a time when I gave up.  It was becoming almost impossible to be allowed to buy parts from Renasas and then only by ordering 2000-piece minimums and waiting months for delivery.  The last straw was when all the competition added on-board flash and oscillators and Renasas only offered such things on the M16, which was not 6502-based.<br /><br />Why should I continue fighting with a company like this when they would not support my beloved 6502?  So I began to evaluate the competition.  I won't go into the details of my selection, but I can say that if I had known that the highly trumpeted support for the Atmel AVR family did not truly exist, I might have chosen a different vehicle.<br /><br />As it is, I am stuck, for the moment, with a silly mnemonic structure in the assembly language that leaves me longing for the regularity of the 6502, and am no fan of the Harvard architecture that separates program, memory and I/O buses and certainly not of the lingering smell of the Intel 8051, but at least this design was performed by a group that had at least seen a real computer, as opposed to the 80xxx crap.</ul></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Oct 19, 2017 12:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Mickey Mouse&quot; 8-bit architectures</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, it should have said Mitsubishi.<br /><br />The first dot matrix printer my family had used one of the 740 family microcontrollers, and for whatever reason we've kept it even as we threw away newer hardware. When I finally did the sleuthing to figure out what it was, I was kinda awed by having a slightly-weirdly-shaped 65C02 inside (since opcode locations differed).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>