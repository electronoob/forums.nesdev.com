<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NESDEV1 development board progress</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NESDEV1 development board progress</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8084">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8084</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Tue Feb 28, 2012 9:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">bunnyboy wrote:</div><div class="quotecontent">Designing for USB power might be a good idea anyways.  That way you could do power on tests without losing the SRAM/CPLD contents.</div><br />Yeah it's set up to run on either NES or USB power and seamlessly switch between the two.  So you don't need the NES to be on to program it and you don't need it to be plugged into USB to play on the console.  But like you're saying you can leave it plugged into USB the entire time so you won't loose power/memory contents after shutting off the console.  In the event that a clone doesn't supply 3.5V or more you'd always need USB power supplied.<br /><br />Also we've got a battery on board that can be used to power WRAM, PRG RAM, or CHR RAM as desired.  If you stored something in the CPLD's RAM you'd lose it though, but there is flash in the CPLD one could use.  The CPLD user flash would be nifty for saving game data without use of a battery or external non-volatile memory.<br /><br /><div class="quotetitle">drk421 wrote:</div><div class="quotecontent">Hmmm, what about hooking up a bluetooth spp module to transfer data? </div>
<br />
<br />I probably won't implement it myself, I find it hard to beat the speed, reliability, and compatibility of a USB cable.  But the good news is, I left the serial pins available on the mcu with solder contacts on the board.  So in the spirit of the project one could take this as a base to easily add something like that and DEVELOP your own BT interface for the cartridge <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Feb 29, 2012 6:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Anything that can be a USB host can be a Bluetooth host. In fact, that's how the Wii console connects to its remote: through a built-in USB Bluetooth adapter. Is this USB chipset OTG (cable-selected host or client) or client-only?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Wed Feb 29, 2012 7:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Is this USB chipset OTG (cable-selected host or client) or client-only?</div>
<br />
<br />I never really thought about someone wanting to use it as a host...
<br />
<br />No it's not OTG,  just client only.  I'm using V-USB, and I'm pretty sure there is nothing available with it that allows it to act as a host.  Another option was LUFA, I'm not sure if hosting is possible with that or not.  I don't have any USB specific hardware aside from the AVR mcu and a couple resistors.  I've never looked into the possibility of hosting but my guess is you'd have to add hardware or write your own USB host code to do it.
<br />
<br />Did you have something specific in mind?  
<br />
<br />I'm guessing using it for peripherals such as a keyboard/mouse or something?  Simple items like that would probably be easier and no hardware (aside from a socket/cable) if you used serial that's already built into the mcu.
<br />
<br />If one wanted to make it a host for data storage for something like a flash drive, the easier/nicer option would be an SD card slot.  There are tools already out there for getting an SD card on a AVR, it would then just need to be connected to the SPI bus on the cart and maybe 1-2 of the free pins on the mcu.
<br />
<br />Aside from that adding the BT card might add some hosting capabilities.  But that one at least is still slower than USB which should beat it out in data transfer speed by 2-3 times.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Karatorian</b> [ Thu Mar 01, 2012 2:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice looking piece of kit you've got there. I'm looking forward to this entering production.
<br />
<br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">Also everything is open source and I hope to have tutorials and stuff on how to modify or create mappers making it a useful tool that doesn't need to be reverse engineered to make full use of for mapper and game development.</div><br />This is the number one draw for me. I've come up with a few different ideas for new mappers and it would be nice to have a platform to prototype them on. (That and I'm a pretty big fan of open source. Not quite a zealot, but definitely convinced of the benefits.) Most of my ideas could be build out of a handful of discrete chips or a small programmable device, so they'd be cheap to make carts of later.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It has 10bit of distributed SRAM that can be configured as dual port without adding much more logic.</div>
<br />I'm assuming that's a typo. Ten bits!? How much RAM does it actually have? Dual ported RAM gives me all kinds of crazy ideas. (But those ideas require a lot of it...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu Mar 01, 2012 4:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Karatorian wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It has 10bit of distributed SRAM that can be configured as dual port without adding much more logic.</div><br />I'm assuming that's a typo. Ten bits!? How much RAM does it actually have? Dual ported RAM gives me all kinds of crazy ideas. (But those ideas require a lot of it...)</div>
<br />
<br />Ahh yeah...  Not sure how I came up with that...  This CPLD has 74Kbits of SRAM that can be easily configured as true dual port still much more than MMC5.  The big dog of the family (pin compatible) has a whopping 240Kbits!  Should satisfy most desires on the NES <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />In other news we finished porting over all the AVR code today and I just finished debugging it all.  Everything works GREAT!  I even tested it out quick on my portable clone that is only operating at ~3.5v and it worked breautifully even without USB power.  All my mappers tested out great as well and there doesn't seem to be any issues with the buffer circuitry either.  
<br />
<br />So now it's time to start exercising this thing <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Karatorian</b> [ Thu Mar 01, 2012 7:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">This CPLD has 74Kbits of SRAM that can be easily configured as true dual port still much more than MMC5.</div> Are you using any of that?
<br />
<br />The idea I had was to have a dual ported CHR-RAM mapped into the CPU's address space. This would allow for more time to update the tiles by allowing writes to the offscreen page during rendering and utilizing a simple page swap during v-blank. (It's funny how I just had this idea early this morning and then I read about how your cart could be used to prototype the idea.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu Mar 01, 2012 11:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No I'm not using any of it in the base mapper as of right now so it's completely free to play around with.  Although I did have plans to play around with it to see how it works.
<br />
<br />Isn't your idea basically the same thing as EXRAM that the MMC5 has?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Mar 01, 2012 6:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ExRAM can be used only as a nametable, not as a pattern table. MMC5 has no provision for writable pattern tables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Fri Mar 02, 2012 3:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay so I dug a little deeper into the SRAM capabilities of this thing.  Basically there are two different types of SRAM available.  There is Embedded Block RAM (EBR) and Distributed RAM in each LUT (Look-up table, similar to a Macrocell)
<br />
<br />The EBR is designed to provide "large" amounts of configurable SRAM (single port, dual port, psuedo dual port etc)  and as far as we're concerned comes in 1KB chunks of that are 9 bits wide (9216bits)  but assuming the 9th bit isn't used they are just 1KB x 8 bits wide.  This EBR can be single, true dual, or psuedo ported (read only on one port, read&amp;write on the other) without costing any logic elements (LUTs).  This CPLD has 7 blocks of EBR so I can easily have 7KBytes of true dual ported SRAM.  Larger members of the family have 8, 10, and 26 blocks (one KByte per block).
<br />
<br />The Distributed RAM that is contained within each logic element (LUT, but you can think of this like a macrocell)  So along the lines of what Tepples brought up about making SRAM from macrocells, SRAM can be created from the general logic cells available.  However this can only be configured as single or psuedo dual port (true dual port not available here without using obscene amounts of logic)  However putting SRAM here is very costly like Tepples brought up.  Configuring LUTs as RAM costs about 21bits per LUT.  And I've got 640 LUTs.  So to make 1KB of pseudo dual ported SRAM it takes about 328 LUTs which is HALF of the logic I have available.
<br />
<br />So long story short, there isn't much point to implement distributed SRAM unless you REALLY need it and have lots of logic to spare.   The EBR true dual ported SRAM is great in the EBR (why it's there).  Unfortunately I'm 1KB short of having 8KB for both nametables. 
<br />
<br />The only trick is that the SRAM is synchronous...  Not much of a problem with PRG RAM I can just drive it off of M2.  But the CHR side is a little tricky.  From what I can see on my scope the CHR /CE (A13) can't be used as a clock because it doesn't toggle each access like PRG /CE does which makes sense.  The only real signal available is CHR /RD and CHR /WR.  It looks like CHR /RD toggles nearly every cycle, except for a write cycle in which case CHR /WR toggles.  So I'm thinking a clock could be generated by NOR ing CHR /RD and /WR.  Only issue being that if the clock is delayed behind CHR /WR then there could be some timing violations with using CHR /WR as my /WE line.  But adding some delay to CHR /WR could resolve this if needed.  It looks like the Address and data lines hang out long enough to prevent issues there.
<br />
<br />Karatorian: did you want to write something up to demo this?  If so, what kind of mapper set up were you thinking?  Would you want just one full nametable (4KB) or the full 7KB I've got available and just map the original NT to the last/first 1KB?  Where would you want it to be mapped on the PRG side?  The convenient thing about being just under 8KB is that it would fit in the MMC5's EXRAM location.  So if my math is right 7KB could be mapped to $4800-$7FFF.  Otherwise it could just sit where WRAM normally does assuming there wasn't any.  Or a single NT could be mapped to $6000-$7FFF.
<br />
<br />As for the bank switching I'm thinking something like a smaller CNROM but with CHR-RAM.  Then just swap the standard VRAM out for the dual ported SRAM like your saying.  The standard VRAM would just fill in the whole of the 7KB.  Or just swap out a single NT in the 4KB option.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Mar 02, 2012 4:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">So long story short, there isn't much point to implement distributed SRAM unless you REALLY need it and have lots of logic to spare.   The EBR true dual ported SRAM is great in the EBR (why it's there).  Unfortunately I'm 1KB short of having 8KB for both nametables.</div><br />But with 7 KiB, you could still make a bank of MMC5 style extended attributes for each nametable (1 KiB each), four 1 KiB pattern table banks like <a href="http://wiki.nesdev.com/w/index.php/INES_Mapper_192" class="postlink">Chinese TQROM</a>, and 1 KiB extra for saving like MMC6.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So if my math is right 7KB could be mapped to $4800-$7FFF.</div>
<br />7 KiB would fit in $4400-$5FFF.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Fri Mar 02, 2012 4:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">So long story short, there isn't much point to implement distributed SRAM unless you REALLY need it and have lots of logic to spare.   The EBR true dual ported SRAM is great in the EBR (why it's there).  Unfortunately I'm 1KB short of having 8KB for both nametables.</div><br />But with 7 KiB, you could still make a bank of MMC5 style extended attributes for each nametable (1 KiB each), four 1 KiB pattern table banks like <a href="http://wiki.nesdev.com/w/index.php/INES_Mapper_192" class="postlink">Chinese TQROM</a>, and 1 KiB extra for saving like MMC6.<br /><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So if my math is right 7KB could be mapped to $4800-$7FFF.</div><br />7 KiB would fit in $4400-$5FFF.</div>
<br />
<br />Yeah I need to brush up on my PPU memory map a bit I'm getting all mixed up.  I really could to a lot more with that 7KB than I was thinking.  As for the last 1KB of saving like MMC6 it would have to work a little differently.  That SRAM is volatile and battery backing the whole CPLD isn't really an option.  But there is 8KB of user flash memory available on chip.  But you could still use that last 1KB for all kinds of stuff.  Dual porting with the AVR or other functions within the CPLD.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Karatorian</b> [ Fri Mar 02, 2012 7:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I hadn't really thought about name tables yet, just pattern tables. The idea was inspired by some GBA code I wrote that faked a bitmap mode by filling the screen with a sequential tile pattern and using a custom tile for each one. (Yes, I'm aware the GBA has a real bitmap mode). So the name tables never needed changing. (Yes, it's horribly inefficient.)
<br />
<br />Of course, on the NES, with only 512 tiles total (using both banks), this wouldn't quite work. So it would be necessary to update the name tables too. Assuming that you only use 256 tiles for the background, 8k would be enough. One 4k page for the front buffer and one 4k page for the back buffer. This requires that the sprites share the same bank as the background.
<br />
<br />If you wanted the sprites to have their own bank, then you'd need 12k. I'm assuming you could use whatever RAM you currently have onboard for CHR-RxM already. However, switching banks for the sprite table reads would require a level of PPU monitoring similar to the MMC5. If you wanted the sprites double buffered too, you'd need 16k, all of it dual ported. (Or at least psudo dual: PPU read, CPU read/write.)
<br />
<br />Unfortunately, the 7k you've got easy access to isn't quite enough for even the basic setup. My suggestion would be to use 6k of it as two 3k pages. That leaves 1k for other stuff (a third name table, extended attributes, etc.) That would give 192 double buffer tiles. The other 64 could be used for something fixed, like alphanumerics. Not too shabby if you ask me.
<br />
<br />Of course the real limitation (which I ought to know, but don't) is how fast the NES can update these tiles. How many bytes can the NES move in one frame. Assuming you're just grabbing the tiles from PRG-ROM and they're not dynamically composed (like one needs to do variable width fonts, vector graphics, or bitmap emulation), then all you need to do is move the bits. There's not much point in supporting double buffers larger than the CPU can fill in a frame anyway. (Unless you wanted to cut the frame rate to 30 FPS.)
<br />
<br />As for how the rest of the mapper would be setup, I hadn't gotten that far. When I first had the idea, which was basically "Hey, dual ported CHR-RAM could be used for double buffering", I was assuming the dual ported RAM would a separate chip. Then I started thinking about how many IO lines the mapper would need:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PRG-CART-A&nbsp; &nbsp; 16<br />PRG-CART-D&nbsp; &nbsp; &nbsp;8<br />PRG-ROM-A&nbsp; &nbsp; &nbsp;15+<br />PRG-ROM-D&nbsp; &nbsp; &nbsp; 8<br />CHR-CART-A&nbsp; &nbsp; 14<br />CHR-CART-D&nbsp; &nbsp; &nbsp;8<br />CHR-RAM-P1-A&nbsp; 15+<br />CHR-RAM-P1-D&nbsp; &nbsp;8<br />CHR-RAM-P2-A&nbsp; 15+<br />CHR-RAM-P2-D&nbsp; &nbsp;8<br /></div>
<br />Which is a bare minimum of 115 pins for just addressing and data. Not to mention the chip enables and stuff. Plus even more for PRG-RAM. Which isn't required, but nice to have. (At least as an option.) So that's as far as my design went.
<br />
<br />Another idea I had for working around the 7k limit was to only use 4k and implement a DMA engine to copy it to the real CHR-RAM during V-blank. It's probably not a viable idea though.
<br />
<br />And now for something completely different...
<br />
<br />With 7k of built in RAM, you could implement the various things the MMC5 uses ExRam for, all at the same time. The first thing that comes to mind is true four screen mirroring (which is a misnomer, 'cause they're not mirrored at that point), rather than the three the '5 has. And extended attributes on all of them at the same time. That alone would be pretty impressive.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Fri Mar 02, 2012 10:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Unfortunately, the 7k you've got easy access to isn't quite enough for even the basic setup. My suggestion would be to use 6k of it as two 3k pages. That leaves 1k for other stuff (a third name table, extended attributes, etc.) That would give 192 double buffer tiles. The other 64 could be used for something fixed, like alphanumerics. Not too shabby if you ask me.  </div><br /><br />When I started the project the only XO2 cplds available were the one I have now.  But since the bigger ones have become available I've been temped to officially step up to a bigger one.  I didn't have much legitimate reason but when you put it all like this it's more convincing, assuming people want me to produce these.  The next larger chip has 8KB of EBR (true dual port) but the one bigger than that is the SAME cost and gives 10KB of EBR.  In production quantities we're only talking $3 or less.  For a dev cart it seems justifiable.  On the flip side if one was ever to want to produce a game with the mach XO2 you could down scale to the smaller $5-6 devices if not using the extra features.  Interestingly enough 8K of dual ported SRAM is about the same cost of larger cplds anyways.  So if one wanted dual ported SRAM the mach xo2 really looks like the best option (not considering FPGAs)  <br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Of course the real limitation (which I ought to know, but don't) is how fast the NES can update these tiles. How many bytes can the NES move in one frame. Assuming you're just grabbing the tiles from PRG-ROM and they're not dynamically composed (like one needs to do variable width fonts, vector graphics, or bitmap emulation), then all you need to do is move the bits. There's not much point in supporting double buffers larger than the CPU can fill in a frame anyway. (Unless you wanted to cut the frame rate to 30 FPS.) </div><br /><br />So I feel like I'm starting to dive too deep into what may be possible with this, I'm sure some people will say if you want to do all this go to a different console.  But Nintendo went from NROM to MMC5 didn't they? I'll share the thought and you can do with it what you will.  Depending on what you wanted to do exactly there are several different ways you could greatly increase the number of bits that got banged around.  It really all depends on what you were trying to do, but if you were just moving bits from the PRG-ROM you could provide specific instructions to some logic in the CPLD running at HIGH speed 50-100Mhz.  Then  have it remove the PRG-ROM from the NES with the buffers (not possible at the moment but would be by re-appropriating one CPLD pin).  Then while the CPU sat idle for a couple cycles several KB of data could be moved around.  And even more complex yet if you wanted some processing done you could do all kinds of stuff with the AVR.<br /><br />But enough of all that non-sense...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Which is a bare minimum of 115 pins for just addressing and data. Not to mention the chip enables and stuff. Plus even more for PRG-RAM. Which isn't required, but nice to have. (At least as an option.) So that's as far as my design went. </div>
<br />
<br />I think you're a little off there.  many of those assignments can and should be doubled up.  Why are PRG CART and ROM on different pins?  For the higher non address able pins sure, but not A0-13 and the data bus.  Same argument with CHR side.  And why would each page of CHR RAM have is own full set of address and data lines???  Unless I'm missing something you only need to toggle ONE upper address bit to swap the pages.  If you wanted a cart with CHR-RxM, PRG-ROM, WRAM and separate dual ported SRAM mapped to fixed locations on both busses most of those memories would be tied together.  So the PLD would only need to have IO for the upper address lines, control signals, and PRG-data bus for controlling bank switching.  That could be done with a cheap little ~40 pin CPLD.  Something comparable to the MMC3 really.  Now my cart has other things going on and really does need to the full CHR and PRG Address and data busses since the dual ported SRAM is inside it, but still you could do it with quite a bit less than 115 IO, I'm doing it with 108 but could do it with 80-90 assuming you didn't have a mcu to interface with like I do.
<br />
<br />
<br />But yes like we're all saying there is still a LOT that can be done with what I've already set up and that 7KB available.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 03, 2012 7:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Karatorian wrote:</div><div class="quotecontent">The idea was inspired by some GBA code I wrote that faked a bitmap mode by filling the screen with a sequential tile pattern and using a custom tile for each one.</div><br />And I did the same thing for the menu system in the last versions of <a href="http://www.pineight.com/lj/" class="postlink">Lockjaw</a>. I'd bet some GBA programs did the same so that they could mix bitmapped text with tiled game objects or get a backdrop layer behind the bitmap layer, as the GBA's 8bpp and 16bpp bitmap modes support only one layer. Furthermore, the DS's 2D is mostly the same as the GBA, and a 4bpp surface takes up far less VRAM than an 8bpp or 16bpp bitmap.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you wanted the sprites double buffered too, you'd need 16k, all of it dual ported. (Or at least psudo dual: PPU read, CPU read/write.)</div><br />Even if you have a separate pair of tiles for each of 64 8x16 pixel sprites, double-buffered sprite cels would need only 2 KiB per buffer.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's not much point in supporting double buffers larger than the CPU can fill in a frame anyway. (Unless you wanted to cut the frame rate to 30 FPS.)</div><br />And look at how slow the frame rates were in a few Super NES games, namely Wolfenstein 3D, Jurassic Park, and Star Fox/Wing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Another idea I had for working around the 7k limit was to only use 4k and implement a DMA engine to copy it to the real CHR-RAM during V-blank. It's probably not a viable idea though.</div>
<br />That or reuse the circuitry for counting fetches and detecting end of scanline to implement what kevtris has called a "stuffer": queue up to sixteen writes in a FIFO, take CHR RAM off the bus, and execute them during the garbage nametable fetches at x=257, 259, 265, 267, ...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Karatorian</b> [ Sun Mar 04, 2012 12:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">Interestingly enough 8K of dual ported SRAM is about the same cost of larger cplds anyways.</div><br />That's kinda strange. Good to know for future reference.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So I feel like I'm starting to dive too deep into what may be possible with this, I'm sure some people will say if you want to do all this go to a different console.</div><br />"The person who says it cannot be done should not interrupt the person doing it." --Chinese Proverb<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think you're a little off there.</div><br />More than a little off actually. Thanks for pointing out this glaring thinko. As the design never made it out of my head and onto paper (or pixels), I missed the obvious.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why are PRG CART and ROM on different pins?  For the higher non address able pins sure, but not A0-13 and the data bus.  Same argument with CHR side.</div><br />So we can have bit wisel granularity with mapping! Just kidding. Simply because the ideas in my head where abstract and when tried to make them concrete, I didn't take the time to think things through all the way.<br /><br />Here's a block diagram of the version with all those pins:<br /><img src="http://static.karatorian.org/hardware/nes/mapper-block-0.png" alt="Image" /><br />Obviously, this is not ideal.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And why would each page of CHR RAM have is own full set of address and data lines?</div> Um, P1 and P2 where the two ports of the dual ported SRAM. If the CPU is writing to VRAM and the PPU is reading from VRAM, then they need to be on separate addressing and data buses. Of course, as you pointed out, the CHR and PRG buses are already separate.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you wanted a cart with CHR-RxM, PRG-ROM, WRAM and separate dual ported SRAM mapped to fixed locations on both busses most of those memories would be tied together.</div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So the PLD would only need to have IO for the upper address lines, control signals, and PRG-data bus for controlling bank switching.  That could be done with a cheap little ~40 pin CPLD.</div><br />You are entirely correct. Here's a block diagram of the proper way:<br /><img src="http://static.karatorian.org/hardware/nes/mapper-block-1.png" alt="Image" /><br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Even if you have a separate pair of tiles for each of 64 8x16 pixel sprites, double-buffered sprite cels would need only 2 KiB per buffer.</div><br />Doh. I didn't think of that. So then, no combination of sprites really need the whole 4k page. I'll have to remember that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That or reuse the circuitry for counting fetches and detecting end of scanline to implement what kevtris has called a "stuffer": queue up to sixteen writes in a FIFO, take CHR RAM off the bus, and execute them during the garbage nametable fetches at x=257, 259, 265, 267, ...</div>
<br />That is an interesting idea. Sounds like it could have it's uses. Kinda like an H-Blank DMA.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>