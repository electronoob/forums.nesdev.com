<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=5206" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-05-23T13:22:41-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=5206</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-05-23T13:22:41-07:00</updated>
<published>2009-05-23T13:22:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47201#p47201</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47201#p47201"/>
<title type="html"><![CDATA[Timing methods]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47201#p47201"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />I prefer crossplatform solutions whenver possible.  Both of those are Windows-specific.  Most crossplatform libs worth using offer some sort of "get tick" funciton.<br /><br />If sticking to just Windows, I always just used GetTickCount().<br /></div><br />You don't always have to use a cross-platform library that's 100% made by other people. If your library of choice fails to compute proper elapsed time, you can write your own wrapper around elapsed time functions on platforms to which you have access.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I remember hearing that timing problems on laptops are common<br /></div><br />Some programs synchronize events to audio playback, which isn't very accurate when your sound card's crystal is really far from 44100 or 48000 Hz. I've worked on a Dell desktop PC whose onboard audio was noticeably flat.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat May 23, 2009 1:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Mednafen]]></name></author>
<updated>2009-05-23T12:45:06-07:00</updated>
<published>2009-05-23T12:45:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47200#p47200</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47200#p47200"/>
<title type="html"><![CDATA[Timing methods]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47200#p47200"><![CDATA[
Use timeGetTime() on Windows(and timeBeginPeriod, and timeEndPeriod).  I've read that QPC can be unreliable, and the GetTickCount() function can have poor granularity on 9x systems...I think, Google it.<br /><br />Use clock_gettime() with CLOCK_MONOTONIC where available on POSIX and SUSv2 systems.<br /><br />Use gettimeofday() as a last resort, and have code to gracefully recover if it runs backwards, or jumps in time by too large an amount since the last call to it.<br /><br />You could also use ftime() as a last last resort. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br />(But the same caveats for gettimeofday() apply for it as well)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1026">Mednafen</a> — Sat May 23, 2009 12:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2009-05-23T12:30:48-07:00</updated>
<published>2009-05-23T12:30:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47199#p47199</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47199#p47199"/>
<title type="html"><![CDATA[Timing methods]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47199#p47199"><![CDATA[
The problem with GetTickCount is that while it returns <em>"the number of milliseconds"</em> it actually has a resolution of something like 10ms (or even worse). That's fine for a 50Hz framerate, but for 60Hz you'd be screwed.<br /><br />timeGetTime is a better alternative if you don't want to use the performance counter, because you can make some extra calls to adjust the resolution of timeGetTime so that you get a fair level of accuracy.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Sat May 23, 2009 12:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-05-23T12:10:02-07:00</updated>
<published>2009-05-23T12:10:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47197#p47197</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47197#p47197"/>
<title type="html"><![CDATA[Timing methods]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47197#p47197"><![CDATA[
I prefer crossplatform solutions whenver possible.  Both of those are Windows-specific.  Most crossplatform libs worth using offer some sort of "get tick" funciton.<br /><br />If sticking to just Windows, I always just used GetTickCount().  You really don't need more than millisecond granularity, IMO.<br /><br />I remember hearing that timing problems on laptops are common, though I never actually tested any of my programs on a laptop.<br /><br />From what what you're describing it just sounds like your framerate code is just messed up.  Here's generally what I do:<br /><br />The idea is, you keep a var which counts the passing milliseconds.  You multiply these milliseconds by the framerate (ie:  60 on NTSC, 50 on PAL -- yes I know it's not exactly 60 -- if you want to do 60.1 you can).  When that var reaches 1000, one frame's worth of time has passed, so you do a frame, and subtract 1000.  This also has a benefit of seeing how many frames behind you are.  IE if the counter is &gt;5000 you know you're 5 frames behind.<br /><br />Since CPU attention may vary due to sleep times, processor availability and other factors, you NEED wiggle room.  If you start skipping frames to catch up when you're only 2 frames behind, the display will get incredibly jerky because you'll end up skipping to catching up, then sleeping too long, then skipping to catch up, then sleeping too long, etc.<br /><br />Because of this, you want to give yourself a window where you say "don't catch up until I'm X frames behind).  You can make this an option in the emulator if you want the user to be able to configure it.  I find that 5 frames is pretty good.<br /><br />It basically works like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">DWORD ms_passed;  // number of milliseconds passed since last iteration<br />DWORD frametimer; // timer to count when to do the next frame<br />DWORD lasttime;   // record of time of last iteration<br />DWORD FPS;        // 60 &#40;NTSC&#41; or 50 &#40;PAL&#41;<br /><br />while&#40;emulator_is_running&#41;<br />&#123;<br />  // process user input<br />  PumpMessages_ProcessInput_etc_etc&#40;&#41;;<br /><br />  // see how many milliseconds have passed since the last iteration<br />  ms_passed = GetTickCount&#40;&#41; - lasttime;<br /><br />  // update 'lasttime' tracker to mark current time<br />  lasttime += ms_passed;<br /><br />  // accumulate time difference in our frametimer<br />  frametimer += ms_passed * FPS;<br /><br />  // if frametimer is &lt; 1000, we're ahead of schedule<br />  if&#40;frametimer &lt; 1000&#41;<br />  &#123;<br />    Sleep&#40;1&#41;;<br />    continue;<br />  &#125;<br /><br />  // otherwise see if we're falling WAY behind<br />  int frames_skipped = 0;<br />  while&#40;frametimer &gt; 1000 * FRAME_SKIP_THRESHHOLD&#41;<br />  &#123;<br />    if&#40;frames_skipped &gt; MAX_FRAMES_TO_SKIP&#41;<br />    &#123;<br />      ResyncFrameTimer&#40;&#41;;    // give up on trying to catch up, just resync<br />      continue;  // --- this continue is pseudo-code, the intent here is to<br />            // jump back to the while&#40;emu_is_running&#41; outer loop,<br />            //  not this inner loop.  Whoops.  You get the idea.<br />    &#125;<br /><br />    SkipAFrame&#40;&#41;;         // emulate a frame, but don't draw it<br />    frametimer -= 1000;<br />    ++frames_skipped;<br />  &#125;<br /><br />  // now that too-slow and too-fast conditions are covered<br />  //  just do a normal frame<br />  DoAFrame&#40;&#41;;<br />  frametimer -= 1000;<br />&#125;<br /><br />//----------------------------------------------<br />// The ResyncFrameTimer&#40;&#41; function should be called when the user has<br />//  exited the emulation loop for a long peroid of time.  Like if they<br />//  entered a menu, or if a new ROM was loaded, etc.<br /><br />void ResyncFrameTimer&#40;&#41;<br />&#123;<br />  lasttime = GetTickCount&#40;&#41;;<br />  frametimer = 0;<br />&#125;<br /></div><br /><br />Of course ideally you'd want to sync to sound.  That can be done the same way, but instead of:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">timer += ms_passed * FPS;<br />if&#40;timer &lt; 1000&#41;  &#123;...&#125;<br /></div><br /><br />You do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">timer += samples_passed * FPS;<br />if&#40;timer &lt; sample_rate&#41; &#123;...&#125;<br /></div><br /><br />You can find the number of sampled passed by polling your audio's CanWrite style function.  Of course this doesn't work very well if audio is output in very large chunks (*cough*SDL*cough*allegro*cough*).  For those such cases, I made a wrapper for audio which uses a millisecond timer to "simulate" audio being played back at a smoother rate.<br /><br />But that's another topic.<br /><br /><br />EDIT -- made note about continue goof<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sat May 23, 2009 12:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2009-05-23T12:08:26-07:00</updated>
<published>2009-05-23T12:08:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47196#p47196</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47196#p47196"/>
<title type="html"><![CDATA[Timing methods]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47196#p47196"><![CDATA[
You're talking about framerate limiting now, or something else?<br /><br />If it's just a framerate limiter and it makes your emulator lag then it sounds like something is very wrong either with that code or with the computer.<br /><br />The way I do it is just like this, which has worked for me on every computer I've tried it on:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   if &#40;limitFps&#41;<br />   &#123;<br />      QueryPerformanceCounter&#40;&amp;perfCnt2&#41;;<br />      while &#40;&#40;&#40;perfCnt2.QuadPart-perfCnt1.QuadPart&#41;&lt;&lt;16&#41;/perfFreq.QuadPart &lt; frameInterval&#41;<br />      &#123; QueryPerformanceCounter&#40;&amp;perfCnt2&#41;; &#125;<br />      perfCnt1 = perfCnt2;<br />   &#125;</div><br />Where frameInterval = 65536/framerate.<br /><br />Note that this isn't the best way to implement framerate limiting since the process/thread will use 100% CPU while looping. Ideally you should first determine how close you are to the next frame, and put a "broader" loop first which Sleep()s for a few milliseconds between each iteration.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Sat May 23, 2009 12:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2009-05-23T10:37:36-07:00</updated>
<published>2009-05-23T10:37:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47193#p47193</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47193#p47193"/>
<title type="html"><![CDATA[Timing methods]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5206&amp;p=47193#p47193"><![CDATA[
I seem to get drastically different results using either the performance counter approach or the timeGetTime approach.  On my laptop my emulator runs like a rabbit no matter which timing approach.  On my desktop it crawls like a turtle.<br /><br />My desktop is Intel P4 3GHz hyperthreaded, 1GB DDR RAM.<br /><br />My laptop is Intel Core2 Duo, 2GB RAM.<br /><br />I'm also curious if differences in the VisualStudio environment could have anything to do with it.  The one on my laptop is probably more 'up to date' because it is a work laptop.  The one on my desktop always seems a bit slow...but I have no idea what could be different.  Perhaps I'll have to convince work that I use my desktop for work also.   <img src="http://forums.nesdev.com/images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" /> <br /><br />Also, I remember a discussion on here regarding pops and clicks in the audio stream...but I can't find it.  I remember there was lots of discussion on how to avoid/fix this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Sat May 23, 2009 10:37 am</p><hr />
]]></content>
</entry>
</feed>