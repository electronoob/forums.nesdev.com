<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Designing a NES compatible console - nesdev designs, part 2.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Designing a NES compatible console - nesdev designs, part 2.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16181">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16181</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jul 08, 2017 9:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That depends on how fast the CHR RAM/ROM in the cartridge (and the mapper, if it has a PA12- or PA13-triggered interval timer) can react to three different PPUs all trying to read it. In addition, if you think 64K isn't enough for all the graphics you want to show on Super NES, imagine how small 8K will feel because there's no way to assign different CHR banks to different PPUs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Jul 08, 2017 9:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In NES games the multiplexor will be turned off.  As for clock speed, the multiplexor will be clocked at 64Mhz and accesses memory every 8 cycles.  The multiplexor would also divide it's clock speed by 3 to get the 21Mhz clock to power the 3 PPUs.  For ROM size, we can hook up a couple of the EXT pins to the address bus.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sat Jul 08, 2017 9:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">MMC3, by comparison, was popular due to commercial interest. It's only natural that it wouldn't have the same post-market value outside reproduction and hacks. It just doesn't offer features that are interesting or convenient enough.</div><br /><br />I said MMC3 scale, meaning finely banked CHR, scanline counter, etc.  There are only a couple homebrews which utilize these types of features regardless if the mapper is interfaced in MMC3 fashion or not.  Those features do have post-market value, even if you don't understand/see it.  You talk about wanting parallax scrolling, but these &quot;uninteresting features of the MMC3&quot; are the features that permit parallax scrolling on the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Sat Jul 08, 2017 11:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing that would alter the performance of layered PPU:s considerably is the presence of a BG colour mask per layer. If there's no such thing, the bg colour would always be transparent, which could work, but is kind of a waste. With a transparency mask working like a&quot; one-bit-per-cell&quot; attribute table, we'd get much more mileage out of the two top BG layers. The bad news is that it's a new block tied to the layer merger block. The good news is it's optional for the dev to use it or just fill it with 0:s for the same effect as if it is not implemented, enabling different strategies and styles of graphics.<br /><br />re: MMC, scanline counting:<br /><br />Sorry, i must've missed that. Yes, that's how its done, or by cycle counting (like jupiter scope 2). <br />My thinking here is... If you have access to a straighforward interface counting scanlines for your project, you wouldn't normally count cycles (except for the challenge/sport). Now, if you had three background layers, you wouldn't count scanlines for this purpose (except for the same reason - or if you've managed to tie up all layers to something else and still want parallax). I mean, this is a bit outside NES territory, which is why i posted it in &quot;general&quot;.<br /><br />I should've probably added that my digression on mappers was based on personal judgement (what i personally choose to prioritize - the feature set of GTROM over banking granularity and counters).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sat Jul 08, 2017 11:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />FYI, GTROM doesn't really have any features that are special/specific to GTROM.  Practically all mappers can have 4screen mirroring tacked onto them  (the few licensed games with 4screen mirroring added it to MMC3).  16KB PRG-ROM banking, multiple 8KB banks of CHR-RAM, and flash saves, are all basic features which can be integrated into any mapper.<br /><br />EDIT: corrected by lidnariq below as to my knowledge hole.  While GTROM is only design to bank nametables, it's still a relatively simple expansion that could be applied to most mappers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jul 08, 2017 11:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The particularly unique thing to GTROM is 8 nametables, bankswitchable in groups of 4. Gives you both glitch-free all-way scrolling on both PAL and NTSC as well as spare space for a bunch of status screens/bars.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jul 08, 2017 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">gauauu wrote:</div><div class="quotecontent">This aspect is the one part that would make sense to me as a developer.  I could still make a regular NES game, but enable optional features when running on the &quot;n+&quot;.</div><br />Why not implement those &quot;n+&quot; features on the cartridge and make it NES/FC compatible, then ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jul 08, 2017 1:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Why not implement those &quot;n+&quot; features on the cartridge and make it NES/FC compatible, then ?</div><br />I guess not all of the features can be implemented as part of a mapper, but even if they could, I imagine that a significantly expensive FPGA would be needed to replicate multiple PPUs, so the cost for a single cartridge would be too much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jul 08, 2017 1:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Run-time compositing of multiple tiles into a single one shouldn't be that complex ... at least as long as we can ignore palettes. We do need 3 fetches per single PPU fetch to handle different X scrolls per layer, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sogona</b> [ Sat Jul 08, 2017 7:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not a hardware guy at all, so I don't know if any of this is with the realm of feasibility, but I think it'd be cool if some of the unused opcodes were replaced with useful features like <blockquote style="margin-left: 1%; padding-left: 1%; border-left: 3px solid #555577;">
phx/phy/plx/ply
</blockquote> to make stack operations faster in time-critical code like NMI handler; but still retain backwards compatibility with the regular 6502 instruction set. I guess this might not work very well, since some games use undocumented opcodes. Just an idea.<br /><br />Also something like a RNG built into the hardware, maybe using an algorithm similar to 10NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jul 08, 2017 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If something is essential to the game model, such as randomness, it needs to work on an unenhanced NES as well, which means it needs to be done in software. It's not that hard to just import the <a href="https://github.com/cc65/cc65/blob/master/libsrc/common/rand.s" class="postlink">cc65 LCG</a> to your project.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Sun Jul 09, 2017 4:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You'd have those instructions on w65c02s and w65c816s  aswell as some new addressing modes and other instructions. <br /><br />Personally, i think it's okay to break compability with illegal opcodes:<br />-Commercial era games using them are few and rather unpopular.<br />-Some of those are relatively easy to patch, if you're playing a personal image rather than the physical copy.<br />-An emulator capable of emulating both NES and &quot;n+&quot; machines as separate entities can simply select in which mode to run. That means that even if the &quot;n+&quot; machine, virtual or real, can't interpret illegal opcodes correctly, an emulator potentially can if it also has vanilla NES emulation.<br />-Only a hypothetical physical unit or a strict &quot;n+&quot; emulator will have a slight compability gap this way.<br />-Old homebrew can be modified, if the author really wants to.<br />-New Homebrew using illegal opcodes can potentially switch blocks out between NES and &quot;n+&quot; mode.<br />-The advantages of illegal opcodes are leveled out by cheer performance and the wider instruction set/addressing modes, so you won't be likely to miss them when writing an &quot;n+&quot; feature for your project.<br /><br /><br />That said, yeah, even though you as a software dev could write something that'll only run on an &quot;n+&quot; emulation/machine, some have pointed out it sounds more attractive to just write NES compatible games (because of the install base/ease of explaining what it is), with added features that'll show only on an &quot;n+&quot; machine. I think this would especially be a true forecast for at least the first phases. <br /><br />I can also envision some areas that might see more &quot;n+ only&quot; than you'd see otherwise, depending on popularity:<br />-Perhaps a small demo scene revival - concepts demonstrating neat tricks that can be made<br />-Small games but with &quot;n+&quot; graphics/sound/other features (cpu); like pong and &quot;side view player vs player volleyball&quot;, for example.<br />-Hack patches to existing games (like remapping Castlevania controls, or even adding background elements)<br />-Maybe Revisits/&quot;Remakes&quot; on already released NES homebrew.<br /><br />Beside &quot;works on both, but differently&quot; type of games, any relatively &quot;short spanned&quot; commitment of a type listed above could likely be further fueled by events, compos, co-releases and the like.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Sun Jul 09, 2017 6:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Re: programming language, WDC offers a C compiler/optimizer for free in return for registrering as a user, alongside their assembler. I don't know C and haven't tested it, but i assume that WDC would be experts on how to optimize C for their own 65xx processors?<br /><br /><!-- m --><a class="postlink" href="http://www.westerndesigncenter.com/wdc/tools.cfm">http://www.westerndesigncenter.com/wdc/tools.cfm</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Jul 09, 2017 6:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">Re: programming language, WDC offers a C compiler/optimizer for free in return for registrering as a user, alongside their assembler.</div><br />Cool. However note that it's not free for commercial use on non-WDC processors. (Also note that it's for 65c02/65816, not 6502).<br /><br />Funny to see some SNES references in the linker (wdcln): &quot;-MN use Nintendo memory map&quot;, &quot;-MN80 use Nintendo fast memory&quot;, &quot;-MN21 use Nintendo mode 21 map&quot;. It also has an output format &quot;Nintendo Binary&quot; (-HN).<br /><br />EDIT: Tried it out, the &quot;Nintendo Binary&quot; format outputs .ISX, which seems to be <a href="https://en.wikipedia.org/wiki/Intelligent_Systems" class="postlink">Intelligent Systems'</a> file format, also referenced <a href="https://forums.nesdev.com/viewtopic.php?f=12&amp;t=15857" class="postlink">in another thread about the Super NES Emulator SE hardware</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Tue Jul 11, 2017 1:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Designing a NES compatible console - nesdev designs, par</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also note that it's for 65c02/65816, not 6502</div><br />Yeah, i was assuming a new nes-compatible console or expansion would facilitate one of those at this point. To summarize:<br /><br />-As tokumaru pointed out, more processing power is required to do the housework of the new capabilites. <br />-A physical processor (or one that comes in a ready fpga package) is much simpler to implement than coming up with an all-new 65 compatible processor in fpga form. Then the two options would be 65c02/65c816, which tepples linked to. <br />-The choice between them would largely be the choice between 64kB and 16MB address range, 8 or 16bit stack, and pin compability with the 6502 standard vs more signals. You also need to 'boot' the 65c816 with a couple of instructions at reset to get out of 65c02 emulation mode, which is default.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>