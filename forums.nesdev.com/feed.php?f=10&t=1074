<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=1074" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-03-07T08:01:50-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=1074</id>
<entry>
<author><name><![CDATA[baisoku]]></name></author>
<updated>2006-03-07T08:01:50-07:00</updated>
<published>2006-03-07T08:01:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=10488#p10488</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=10488#p10488"/>
<title type="html"><![CDATA[faster 'P' emulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=10488#p10488"><![CDATA[
<div class="quotetitle">mozz wrote:</div><div class="quotecontent"><br />Here's another (unrelated) trick I came up with, to cheaply support executing code out of I/O port memory: the SPC700 has only a small range of I/O ports in its address space, the rest is basically RAM.<br /></div><br />Hmm.. In a chat i had with Burger Bill once, he told me he stored code in some SNES I/O port registers in one of his titles, Wolfenstein 3-D i believe. Was this a common technique? Neat emulation trick, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=35">baisoku</a> — Tue Mar 07, 2006 8:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mozz]]></name></author>
<updated>2006-03-07T00:09:10-07:00</updated>
<published>2006-03-07T00:09:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=10475#p10475</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=10475#p10475"/>
<title type="html"><![CDATA[faster 'P' emulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=10475#p10475"><![CDATA[
<div class="quotetitle">Nessie wrote:</div><div class="quotecontent"><br />Instead of keeping all flags in a single byte, you should use one boolean for each flag.<br /></div><br /><br />For a while I was working on x86 assembly code for an SPC700 core (the sound chip for SNES, which is 6502-based).  Using the x86 flags is a nice trick you can do if your core is written in assembly.  In nearly all cases, the x86 instructions incidentally compute into x86 flags the values you need for the 6502 flags.  Here's some example code to save away the x86 flags.  This is common tail code I would stick right before my dispatch loop and jump into for non-RMW instructions (warning: UNTESTED):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">vhcnz_tail:     seto    &#91;ebp+FLAG_V&#93;                ; 4 *3    0000000V<br />                lahf                                ; 1  1<br />                mov     &#91;ebp+FLAG_H&#93;,ah             ; 3 *2    ???H????<br />cnz_tail:       setc    &#91;ebp+FLAG_C&#93;                ; 4 *3    0000000C<br />nz_tail:        lahf                                ; 1  1<br />                mov     &#91;ebp+FLAG_NZ&#93;,ah            ; 3 *2    NZ??????<br /></div><br />Keep in mind that after a subtract, the carry flag in 6502 has the opposite value from the x86 carry flag.  So use SETNC for that case.<br /><br />The NZ flags are (almost?) always set together, so it's convenient to combine them into one byte.  Note that N and Z are stored in bits 7 and 6 of the LAHF result.  Half-carry is stored in bit 4.  So those are the meaningful bits of my FLAG_NZ and FLAG_H bytes.  Whereas I use bit 0 in the FLAG_C and FLAG_V bytes.<br /><br />The SETcc instructions are available and efficient on all modern x86 processors.  The LAHF looks pretty efficient on paper but I haven't really tried this stuff so I'm not 100% sure.  On paper at least, on a Pentium II or III it's a 1-uop instruction with a 3-cycle latency and on an AMD chip it's a direct-path instruction with a 3-cycle latency.  So its no more costly than a cache-hit load.  LAHF is a nice way to get at the x86 Half-carry flag too, which (as far as I'm aware) works exactly the same as the Carry flag (where you have to flip it for SBC).  Here's a snippet of code for a read-modify-write SBC instruction:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">op2_sbc_t_t2_W8:mov     dl,&#91;ebp+FLAG_C&#93;             ; 3 *1<br />                sub     dl,1                        ; 3  1 CF=&#40;!C&#41;<br />                sbb     al,cl                       ; 2 *2<br />sbc_tail_w8:    lahf                                ; 1  1<br />                seto    &#91;ebp+FLAG_V&#93;                ; 4 *3<br />                setnc   &#91;ebp+FLAG_C&#93;                ; 4 *3 C=&#40;!CF&#41;<br />                xor     ah,0x10                     ; 3  1<br />                mov     &#91;ebp+FLAG_H&#93;,ah             ; 3 *2 H=&#40;!AF&#41;<br />                jmp     short nz_tail_w8.1          ; 2  1</div><br /><br />The only tricky part about having this non-uniform representation of the flags, is what do you do when you need to merge them into a 6502 flag byte, or split a byte of 6502 flags back into your internal representation?  Here's some more code (again, UNTESTED):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">%macro MERGE_FLAGS 0          ; what we need:           NVP0H0ZC<br />                mov     cl,&#91;ebp+FLAG_H&#93;         ; 3  1  ???H????<br />                and     cl,0x10                 ; 3  1  000H0000<br />                shr     cl,3                    ; 3  1  000000H0<br />                mov     al,&#91;ebp+FLAG_NZ&#93;        ; 3  1  NZ??????<br />                shr     al,7                    ; 3  1  0000000N C=Z<br />                adc     cl,cl                   ; 2  1  00000H0Z<br />                mov     bl,&#91;ebp+FLAG_C&#93;         ; 3  1  0000000C<br />                add     al,al                   ; 2  1  000000N0<br />                add     cl,cl                   ; 2  1  0000H0Z0<br />                add     al,&#91;ebp+FLAG_V&#93;         ; 3 *2  000000NV<br />                add     cl,bl                   ; 2  1  0000H0ZC<br />                add     al,al                   ; 2  1  00000NV0<br />                add     al,&#91;ebp+FLAG_P32+1&#93;     ; 3 *2  00000NVP<br />                shl     al,5                    ; 3  1  NVP00000<br />                add     al,cl                   ; 2  1  NVP0H0ZC<br />%endmacro<br /><br />%macro SPLIT_FLAGS 0          ; start with:             NVP?H?ZC<br />                test    al,0x20                 ; 2  1  NZ=&#40;P&#41;<br />                setnz   &#91;ebp+FLAG_P32+1&#93;        ; 4 *3           ---&gt; 0000000P<br />                mov     bl,al                   ; 2  1  NVP?H?ZC<br />                test    al,0x01                 ; 2  1  NZ=&#40;C&#41;<br />                setnz   &#91;ebp+FLAG_C&#93;            ; 4 *3           ---&gt; 0000000C<br />                add     al,al                   ; 2  1  VP?H?ZC0 C=N<br />                and     bl,0x80                 ; 3  1  N0000000<br />                mov     &#91;ebp+FLAG_H&#93;,al         ; 3 *2           ---&gt; xxxHxxxx<br />                rol     al,4                    ; 3  1  ?ZC0VP?H<br />                test    al,0x08                 ; 2  1  NZ=&#40;P&#41;<br />                setnz   &#91;ebp+FLAG_V&#93;            ; 4 *3           ---&gt; 0000000V<br />                and     al,0x40                 ; 2  1  0Z000000<br />                add     bl,al                   ; 2  1  NZ000000<br />                mov     &#91;ebp+FLAG_NZ&#93;,bl        ; 3 *2           ---&gt; NZxxxxxx<br />%endmacro</div><br /><br />The numbers in the ; comments are instruction size in bytes, and number of uops on a P2/P3.  * mark insns that have to pass through the first decoder on a P2/P3 (remember, they used the 4-1-1 decoder template).  That doesn't matter for P4's but it probably does for modern Pentium M's (I've never bothered to look into that).<br /><br />Hopefully reading the above will give people some clever ideas.<br /><br />Here's another (unrelated) trick I came up with, to cheaply support executing code out of I/O port memory: the SPC700 has only a small range of I/O ports in its address space, the rest is basically RAM.  I use handler functions for those addresses which store the port state somewhere else; then I fill those bytes within the address space with 0xFF, the opcode for a rarely-used instruction (STOP).  Instruction fetch then ignores the possibility that I fetched an opcode from a port address.  The port check is actually done in the handler for the STOP instruction, and if it turns out we fetched the 0xFF from a port, it fixes up the cycle counter, does a "real" port fetch using the port handler and then dispatches again to the new opcode.  In the SPC700 case my port check is so fast it might not matter (two alu insns and one highly-predictable branch).<br /><br />[Edit: does the 6502 even have a half-carry flag?  Maybe you get off easy not having to worry about that one.  Hmm.<img src="http://forums.nesdev.com/images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />]<br /><br />[Edit: I forgot to mention, part of my rationale for combining NZ into one byte was to reduce the number of writes.  But since most flag-writing instructions only set two or three flags, and since modern processors have lots of store buffers...maybe its simpler to just use separate SETcc instructions.  Premature optimization is a favorite pasttime of mine...]<br /><br />[Edit: hmm, this got me thinking---if you use SETcc for all flags and lay the flag bytes out in your context structure the way the bits are laid out in the 6502 flags register...then you might be able to merge flags with the mmx instruction PMOVMSKB.  I think it makes my head hurt too much. <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />]<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=330">mozz</a> — Tue Mar 07, 2006 12:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Nessie]]></name></author>
<updated>2006-02-07T18:45:57-07:00</updated>
<published>2006-02-07T18:45:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9273#p9273</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9273#p9273"/>
<title type="html"><![CDATA[faster 'P' emulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9273#p9273"><![CDATA[
Instead of keeping all flags in a single byte, you should use one boolean for each flag. That way, you won't have to mask out any bits whenever you want to access a flag. When you push the status register to the stack you just convert those eight booleans to a single byte (and the other way around when you pull the status from stack).<br /><br />You don't want to keep your flags in the x86 flag register (too much overhead), but you can use the x86 flags after an arithmetic operation to set your own boolean flag vars.<br />Here's an ADC example in assembly. I'm not sure exactly how to make your C compiler understand asm.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// ADC, operand is in al<br /><br />shr flagC, 1  // Put C flag into x86 register<br />adc a, al     // Do an adc and let the x86 set all flags<br /><br />sets flagS    // Yay, here we<br />setz flagZ    // use the x86 flags<br />setc flagC    // to set our booleans<br />seto flagV    // to the proper values<br /></div><br /><br />I believe this is how Q did it in Nintendulator, you should check his source.<br />There's also blargg's approach where you don't evaluate any flags until you need to. It's described somewhere in the wiki.<br /><br />--Martin<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=12">Nessie</a> — Tue Feb 07, 2006 6:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-02-07T16:59:09-07:00</updated>
<published>2006-02-07T16:59:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9267#p9267</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9267#p9267"/>
<title type="html"><![CDATA[faster 'P' emulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9267#p9267"><![CDATA[
<div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br />Here is what I mean exactly. I want to use the x86 processors status flag while the emulator is running.<br /></div><br />For that, you probably have to use assembly language. C definitely won't work, but C-- (C minus minus) might.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Feb 07, 2006 4:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2006-02-07T14:41:13-07:00</updated>
<published>2006-02-07T14:41:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9262#p9262</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9262#p9262"/>
<title type="html"><![CDATA[faster 'P' emulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9262#p9262"><![CDATA[
Here is what I mean exactly. I want to use the x86 processors status flag while the emulator is running. I know that this method of implementation is possible.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void OpticCode98&#40;&#41;<br />&#123;<br />   CPU.A = CPU.Y;<br /><br />      // if CPU.Y = 0 then the x86's zero flag would be set, no problem<br /><br />   CPU.PC++;<br />   CPU.CC += 2;<br /><br />      // but incrementing these two would modify the x86 status flag, therefore losing the data<br /></div><br /><br />If we could retain the status flags register in the way that we wanted then we could omit data like the following...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CPU.P &amp;= 0x7D;<br />if&#40; !CPU.A &#41;<br />    CPU.P += 0x02;<br />CPU.P += &#40;CPU.A &amp; 0x80&#41;;<br /></div><br /><br />...from just about every instruction. That would be an obvious speed increase.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Tue Feb 07, 2006 2:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-02-07T13:16:32-07:00</updated>
<published>2006-02-07T13:16:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9256#p9256</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9256#p9256"/>
<title type="html"><![CDATA[faster 'P' emulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9256#p9256"><![CDATA[
WedNESday is probably referring to legacy processor architectures with only one set of status flags that are set as if the last result of an operation was compared with zero (like the 6502, for example LDA, ORA, ADC, etc.). On those, any intervening operations between the flag setting and branch must be severely limited (STA is doesn't affect the flags). It's unlikely that using the status flags would give a speed benefit, because accessing them probably stalls the pipeline, as it's not a common operation to need.<br /><br />WedNESday, if you do a profile of how often each instruction is used, and look at what 6502 status flags they modify, you might find some opportunities for optimization without using non-portable techniques like this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Feb 07, 2006 1:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[RoboNes]]></name></author>
<updated>2006-02-07T11:10:08-07:00</updated>
<published>2006-02-07T11:10:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9243#p9243</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9243#p9243"/>
<title type="html"><![CDATA[faster 'P' emulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9243#p9243"><![CDATA[
i believe cpu flags are saved/restored upon the os switching to another running program if that what's you wanted to know<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=11">RoboNes</a> — Tue Feb 07, 2006 11:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2006-02-07T07:15:01-07:00</updated>
<published>2006-02-07T07:15:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9230#p9230</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9230#p9230"/>
<title type="html"><![CDATA[faster 'P' emulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1074&amp;p=9230#p9230"><![CDATA[
I have read somewhere that it is possible to use a host's 'P' status flag as we would use the NES's. This would mean less code within our CPU emulators. We could then use assembler to access these flags. However, I fear that after a register transfer has been made, changing the PC and CC could overwrite our work. For example;<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void OpticCode98&#40;&#41;<br />&#123;<br />   CPU.A = CPU.Y;<br />   ^^ Would set the neccessary flags<br />   CPU.PC++;<br />   CPU.CC += 2;<br />   ^^ Would reset the neccessary flags?<br />&#125;<br /></div><br /><br />Can anyone shed more light on this?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Tue Feb 07, 2006 7:15 am</p><hr />
]]></content>
</entry>
</feed>