<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Minimal built-in bootloader for NES using just an AVR?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Minimal built-in bootloader for NES using just an AVR?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=10905">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=10905</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Jan 18, 2014 2:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Minimal built-in bootloader for NES using just an AVR?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was thinking of a one-chip bootloader that could be built in to a NES. It would run the serial bootloader if no cartridge was present (at which point one could be hotswapped in or whatever). It seems that it could get away with just 10 wires to the NES:<br /><br />GND<br />+5V<br />D0-D7<br />/PRG CE to cart<br /><br />For booting, it would supply the proper bytes to have the CPU run repeated LDA #n; StA $1xx instructions until the stack had the bootloader in it, then a JMP $1xx to run it. It wouldn't need the address bus because it would know every cycle what the CPU is doing and know when to ignore dummy reads.<br /><br />For cartridge detection, it would simply watch the bus until the two reset vector reads. If they read back as something other than open bus, it would know a cartridge was present and stay dormant.<br /><br />I'm considering trying this with an AVR at 16MHz. I'm hoping it will be able to respond fast enough to the /CE signal. I think I can get response down to under 3 clocks (187ns).<br /><br />Perhaps it could also even work *with* a cartridge present, by forcing the high bit of the reset vector zero (and maybe bit 15 high) so it'd land in an unmapped area.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sat Jan 18, 2014 2:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Minimal built-in bootloader for NES using just an AVR?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think it's possible.  It's close to what my plan is to remove all parallel ROM from a cartridge: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9257&amp;start=45#p108197">viewtopic.php?f=9&amp;t=9257&amp;start=45#p108197</a><!-- l --> although my plan implemented a CPLD and avr on the cartridge.  The AVR would act similarly to how you've proposed, but my use was mainly to unpack SPI flash data into parallel SRAMs.  My plan didn't have the CPLD aiding the avr during boot though.  The CPLD sat idle until after the JMP to RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm considering trying this with an AVR at 16MHz. I'm hoping it will be able to respond fast enough to the /CE signal. I think I can get response down to under 3 clocks (187ns).</div>You can probably get by overclocking the mcu a few MHz safely.  Guardbands for mcu frequency are relative to voltage and temp.  If voltage is well above minimum and you're near room temp, cranking up to 18-20Mhz can be pretty stable.  I think 16Mhz is sufficient though, maybe overclock for PAL systems to make compatibility easier?<br /><br />For what it's worth I've successfully replaced a '161 counter on a UNROM board with a attiny mcu.  So it was fast enough to catch writes while sitting in a tight loop.  I think reads would be achievable as well, especially since you know exactly what the next opcode and when it's coming.  You might be able to straight up cycle count to ensure 'rom' data was put on the bus at the right time if things got synced up well enough at the start.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jan 18, 2014 3:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Minimal built-in bootloader for NES using just an AVR?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I'm considering trying this with an AVR at 16MHz. I'm hoping it will be able to respond fast enough to the /CE signal. I think I can get response down to under 3 clocks (187ns).<br /></div>If you're willing to add a three-state buffer, you don't even need that fast of a micro; connect /CE to 74'245 /OE and now you just need to change the data bus every 554ns. I guess that doesn't let you detect whether or not there's a cartridge inserted... Getting the phase synchronized might be a little bit of a pain, but it's pretty straight-forward to extract any odd multiple of M2. Alternatively, this is more or less exactly what PICs' parallel slave port is ideal for.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Jan 18, 2014 4:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Minimal built-in bootloader for NES using just an AVR?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">I think it's possible.  It's close to what my plan is to remove all parallel ROM from a cartridge: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9257&amp;start=45#p108197">viewtopic.php?f=9&amp;t=9257&amp;start=45#p108197</a><!-- l --> although my plan implemented a CPLD and avr on the cartridge.</div><br />It's like you wrote my post for me and all I had to do was find yours! BTW, my idea for the inner loop is to first synchronize with /CE (the first byte read is the low byte of the reset vector so it doesn't matter). Then I know within a few clocks where the next /CE low will be, and I can have this kind of code with an unrolled loop to wait for /CE to go high:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />&nbsp; &nbsp; out&nbsp; DDRC, r0&nbsp; &nbsp;; r0 = 0<br />&nbsp; &nbsp; ld&nbsp; &nbsp;r19, X+<br />&nbsp; &nbsp; out&nbsp; DDRC, r18&nbsp; ; r18 = 0xff<br />&nbsp; &nbsp; out&nbsp; PORTC, r19 ; prepare next byte<br />&nbsp; &nbsp; sbic PINB, 0&nbsp; &nbsp; ; wait for /CE high<br />&nbsp; &nbsp; rjmp loop<br />&nbsp; &nbsp; sbic PINB, 0<br />&nbsp; &nbsp; rjmp loop<br />&nbsp; &nbsp; sbic PINB, 0<br />&nbsp; &nbsp; rjmp loop<br /></div><br />It looks like 16MHz gives 9 clocks per NES CPU cycle, and this can achieve 8, so this wouldn't be too slow. Though it doesn't handle floating the bus on write cycles. I guess I could unroll it and put floating cycles in the appropriate places for the instructions.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>