<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How do I do in CA65 things I do in ASM6?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How do I do in CA65 things I do in ASM6?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Nov 01, 2015 7:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Over the years, I've developed some techniques to make my ASM6 code more organized, but as my projects grow bigger, it becomes harder to keep track of everything, and some design decisions require me to propagate changes across several files, in addition to some other minor annoyances. So now I'm again wondering if I could improve my workflow if I switched to CA65. Looking at it again, it doesn't look as complex as I used to think it was, and some of the features I've been reading about sound pretty useful to me. However, there are some things I'm used to doing in ASM6 that I absolutely can't live without, and I can't find equivalent examples for CA65. So I decided to ask here, and list some of the things I need, to see if anyone can tell me how I can do them in CA65.<br /><br />1- Permanent variables vs. temporary variables:<br /><br />Some parts of my program are active the whole time, such as the video, audio and input systems, so their variables don't share RAM with anything else, but other parts, such as cutscenes and gameplay, are temporary, so the RAM that comes after the permanent stuff is shared between the parts that don't run concurrently. In ASM6 I have a &quot;memory counter&quot; symbol for each RAM page that's updated for the permanent stuff, but not for the temporary stuff. How would I do this is CA65?<br /><br />2- Fake fixed bank of flexible size:<br /><br />Working with a mapper that switches 32KB PRG-ROM pages, I need a block of code/data to be present in the end of every bank. In ASM6, I mark the start and the end of such block with labels, and the difference between these labels gives me the size of the block, which I can subtract from $10000 to .org the block to the end of each bank. What would be the CA65 equivalent to this?<br /><br />3- Repeated labels:<br /><br />There's code and data that must be included multiple times (in different banks), but labels can't be redefined, so instead of using labels I save the current PC in a symbol, which can be redefined. What's the correct way to approach this in CA65?<br /><br />4- What's the deal with .import and .export?<br /><br />This one has nothing to with ASM6, it's just that I still can't figure out what exactly a &quot;module&quot; is in CA65, and when .import and .export are needed. Can anyone sum it up for me?<br /><br />This is all I can think of right now, and if I can get around these issues I might be able to convert my code to CA65. I probably forgot something, so I may need to ask more questions later. I don't plan on wasting much time on this though, so if it ends up being too complicated I might not go through with it. We'll see. Thanks in advance for helping me out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Nov 01, 2015 7:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do in CA65 things I do in ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">1- Permanent variables vs. temporary variables:</div><br />If they all need to be in the same link, perhaps have overlapping MEMORY regions for the temporary area:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY areas in linker config:<br /><br />BSS_PAGED_0:&nbsp; &nbsp; &nbsp; start = $200,&nbsp; size = $100,&nbsp; type = rw, file = &quot;&quot;;<br />BSS_PAGED_1:&nbsp; &nbsp; &nbsp; start = $200,&nbsp; size = $100,&nbsp; type = rw, file = &quot;&quot;;<br />BSS_PAGED_2:&nbsp; &nbsp; &nbsp; start = $200,&nbsp; size = $100,&nbsp; type = rw, file = &quot;&quot;;<br /><br />SEGMENTs in linker config:<br /><br />RAM_PAGED_0:&nbsp; &nbsp; &nbsp; load = BSS_PAGED_0,&nbsp; &nbsp; type = bss;<br />RAM_PAGED_1:&nbsp; &nbsp; &nbsp; load = BSS_PAGED_1,&nbsp; &nbsp; type = bss;<br />RAM_PAGED_2:&nbsp; &nbsp; &nbsp; load = BSS_PAGED_2,&nbsp; &nbsp; type = bss;<br /><br />in assembly code:<br /><br />.segment &quot;RAM_PAGED_0&quot;<br />temporary_variable_byte: .res 1<br />temporary_variable_array: .res 64</div><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">2- Fake fixed bank of flexible size:</div><br />Very simple:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">linker config file, have a line like this in SEGMENTS:<br /><br />FIXED:&nbsp; &nbsp; load = PRG,&nbsp; &nbsp; type = ro,&nbsp; start = $FF90;<br /><br />assembly code:<br /><br />.segment &quot;FIXED&quot;<br />; put your code here</div><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">3- Repeated labels:</div><br /><br />There's a few ways.<br /><br />1. Local labels (any label starting with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">@</tt>) are only accessible between non-local labels (any label starting with a letter). See: <a href="http://www.cc65.org/doc/ca65-6.html#ss6.4" class="postlink">ca65 labels and constants</a>.<br /><br />2. Anonymous labels with relative branching. Using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">:</tt> as a label you can branch forward to the next label with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bcc :+</tt> or backward to the previous label with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bcc :-</tt>, or you can also branch two or three labels away with something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bcc :+++</tt>.<br /><br />3. You can use the .scope directive to place a block of code inside an enclosing scope. See <a href="http://www.cc65.org/doc/ca65-7.html" class="postlink">ca65 scope</a>. If you want to access variables from another scope, you can use C++ style :: to address them.<br /><br />4. The .proc directive is a combination label + scope, intended for self contained procedures.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">4- What's the deal with .import and .export?</div><br />ca65 separates assembling and linking. If your entire program is one big assembly program, you don't need import or export, you assemble into a single &quot;object&quot;, then link that object into a ROM.<br /><br />If you break your program into separate files, and assemble each of them separately, you end up with one object per thing you assembled, and then you use the linker to combine them all together into a ROM. The import and export directives are how objects communicate with each other; when being assembled they know nothing of what is going on in one another.<br /><br />Being able to do things in separate assemblies might actually remove your problems with scope in question 3, by the way, since anything that is not exported will not conflict with similarly named things in other files.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Nov 01, 2015 8:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">1- Permanent variables vs. temporary variables:<br /><br />Some parts of my program are active the whole time, such as the video, audio and input systems, so their variables don't share RAM with anything else, but other parts, such as cutscenes and gameplay, are temporary, so the RAM that comes after the permanent stuff is shared between the parts that don't run concurrently. In ASM6 I have a &quot;memory counter&quot; symbol for each RAM page that's updated for the permanent stuff, but not for the temporary stuff. How would I do this is CA65?</div><br />In the linker script, you'd make three BSS (uninitialized RAM) memory areas, each with a start address and size, and a segment for each. Segments in the same memory area must not overlap, but segments in different areas may.<br /><ul><li>One segment <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">BSS</tt> is for permanent things. </li><li>One segment <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">GAMEBSS</tt> is for gameplay. </li><li>One segment <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">CUTBSS</tt> is for cutscenes. </li></ul>The gameplay and cutscene RAM segments would be allowed to overlap in memory. Then to allocate into one of these segments, you use the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.segment</tt> command before a segment.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;CUTBSS&quot;<br />dialogue_ptr: .res 2<br />dialogue_countdown: .res 1<br />anim_keyframe_ptr: .res 2<br /><br />.segment &quot;GAMEBSS&quot;<br />actor_xlo: .res NUM_ACTORS<br />actor_xhi: .res NUM_ACTORS<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2- Fake fixed bank of flexible size:<br /><br />Working with a mapper that switches 32KB PRG-ROM pages, I need a block of code/data to be present in the end of every bank. In ASM6, I mark the start and the end of such block with labels, and the difference between these labels gives me the size of the block, which I can subtract from $10000 to .org the block to the end of each bank. What would be the CA65 equivalent to this?</div><br />In the linker script, you make a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">MEMORY</tt> area for each bank, a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SEGMENT</tt> for the majority of the bank, and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SEGMENT</tt> for the copy of the last kilobyte in each bank. For example, in a 4 Mbit oversize BNROM, ROM would comprise 16 <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">MEMORY</tt> areas and 32 <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SEGMENT</tt> declarations.<br /><br />In the definition of the repeated last kilobyte, you'd fill the unused portion using a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.res</tt> command, where <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.res number_of_bytes</tt> fills that many bytes. You calculate the number of bytes by taking the desired address (such as $3FA bytes after the start of the last kilobyte) and subtracting the current address.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">start_of_fixed_bank:<br />&nbsp; ; bunch of stuff<br /><br />.res start_of_fixed_bank+$3FA - *<br />.addr nmi_handler, reset_stub, irq_handler<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3- Repeated labels:<br /><br />There's code and data that must be included multiple times (in different banks), but labels can't be redefined, so instead of using labels I save the current PC in a symbol, which can be redefined. What's the correct way to approach this in CA65?</div><br />In the .s file that produces the repeated last kilobyte, you make a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.macro</tt> that spits out one copy of the last kilobyte and call it once for each of the 16 last-kilobyte segments. Hide all copies but one in a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.scope</tt> that hides its labels from the rest of the program so that you don't get duplicate symbol errors.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4- What's the deal with .import and .export?<br /><br />This one has nothing to with ASM6, it's just that I still can't figure out what exactly a &quot;module&quot; is in CA65, and when .import and .export are needed. Can anyone sum it up for me?</div><br />Instead of each .s file including other .s files with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.include</tt>, each .s file is assembled separately to an <a href="https://en.wikipedia.org/wiki/Object_file" class="postlink">object file</a> containing <a href="https://en.wikipedia.org/wiki/Relocation_%28computing%29" class="postlink">relocatable</a> code. This consists of machine code followed by instructions to resolve symbols that are defined in other object files. Finally, the locations are fixed up afterward by a linker that combines the object files and resolves their relocations.<br /><br />The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.import</tt> keyword declares that a symbol is defined not in this file but instead in another object file.<br />The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.export</tt> keyword declares that a symbol shall be made available for other object files to use.<br />The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.global</tt> keyword acts like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.export</tt> if the symbol is defined in this file and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.import</tt> otherwise.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Sun Nov 01, 2015 8:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now, I'm sorry, but you might want to reword the title, because it's pretty confusing, maybe change it to &quot;How do I do things in CA65 that I do in ASM6?&quot;.<br /><br />Edit: I was writing this, and I then had to go do something, and when I had came back, a ton of people had already posted probably better explanations than I have... <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">1- Permanent variables vs. temporary variables:</div><br />I guess this is how you'd do temporary:<br /><br />Whatever:  .res (however many bytes this is)<br /><br />and this is permanent:<br /><br />Whatever = (wherever you want it to go).<br /><br />The temporary ones will simply go wherever it fits in ram, so if I had Whatever1 and Whatever2 with Whatever2 being after Whatever1 in the list, Whatever2 would start at the value of whatever size Whatever1 is.<br /><br />Like this:<br /><br />(offset 0) Whatever1:  .res 2<br />(offset 2) Whatever2:  .res 4<br />(offset 6) Whatever3:  .res 1<br />(offset 7) Whatever4:  .res 2<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">2- Fake fixed bank of flexible size:</div><br />I can't really help you on this one, because I don't think I've dealt with anything like this before on the SNES.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">3- Repeated labels:</div><br />I honestly don't have a clue what you mean. (sorry for not being all that helpful...)<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">4- What's the deal with .import and .export?</div><br />It's just for if you want to import and export variables between files that get assembled (otherwise, the assembler will tell you that it is undefined and will refuse to assemble everything). Here's an example of what I mean:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">File 1:<br /><br />Whatever1:&nbsp; .res 2<br /><br />Whatever2 = 4<br /><br />.export Whatever1<br />.export Whatever2<br /><br />====================<br /><br />File 2:<br /><br />.import Whatever1<br />.import Whatever2</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Nov 01, 2015 8:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">.res start_of_fixed_bank+$3FA - *<br />.addr nmi_handler, reset_stub, irq_handler</div></div><br /><br />Instead of that .res line with some calculation in it, I just use the same tool I used to align the fixed code, i.e. segments.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SEGMENTS in linker config:<br /><br />FIXED:&nbsp; &nbsp; load = PRG,&nbsp; &nbsp; type = ro,&nbsp; start = $FF90;<br />VECTORS:&nbsp; load = PRG,&nbsp; &nbsp; type = ro,&nbsp; start = $FFFA;<br /><br />assembly:<br /><br />.segment &quot;FIXED&quot;<br />; fixed code goes here<br /><br />.segment &quot;VECTORS&quot;<br />.word nmi_handler, reset_stub, irq_handler</div><br /><br /><br />The other thing I didn't mention above, because I was just starting to explain linking, but I like to link each 32k bank separately, and just concatenate them into your ROM when finished.<br /><br />1. Avoids most of the need for things like including the same file multiple times and using scopes, etc.<br />2. Separates all the generated debugging info, which I like to parse into FCEUX debugging files.<br />3. Assemble fixed/shared code only once, using the same generated object in the link step for each bank. (Dunno if this is really an advantage, but I like the idea that the code was only assembled <em>once</em> even though it's used in multiple banks.)<br />4. You can use the same linker config file for all the banks. This means it can be a simpler config, instead of trying to specify e.g. 8 parallel versions of the same thing within one config file, you just reuse it 8 times for 8 link steps. (For example, if the &quot;temporary&quot; RAM suggestion from before is also tied to your bank structure, you could do it with just 1 MEMORY/SEGMENT instead of 1 for each page.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Nov 01, 2015 9:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do in CA65 things I do in ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the answers so far, guys.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">perhaps have overlapping MEMORY regions for the temporary area</div><br />I see... But it seems you have to break it all into blocks of known sizes beforehand, instead of having the temporary parts move around automatically as the fixed parts grow/shrink from me adding/removing variables, like I do with my current approach of using symbols to mark the end of the fixed parts?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">FIXED:    load = PRG,    type = ro,  start = $FF90;</div><br />Again, you have to manually adjust the start depending on how much fixed stuff you have? There's no way of saying &quot;align this arbitrarily sized block to the end of the bank&quot;? Maybe it's possible in a hackish way, but that's actually one of the things I'm trying to avoid.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1. Local labels (any label starting with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">@</tt>) are only accessible between non-local labels (any label starting with a letter). See: <a href="http://www.cc65.org/doc/ca65-6.html#ss6.4" class="postlink">ca65 labels and constants</a>.<br /><br />2. Anonymous labels with relative branching. Using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">:</tt> as a label you can branch forward to the next label with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bcc :+</tt> or backward to the previous label with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bcc :-</tt>, or you can also branch two or three labels away with something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bcc :+++</tt>.<br /><br />3. You can use the .scope directive to place a block of code inside an enclosing scope. See <a href="http://www.cc65.org/doc/ca65-7.html" class="postlink">ca65 scope</a>. If you want to access variables from another scope, you can use C++ style :: to address them.<br /><br />4. The .proc directive is a combination label + scope, intended for self contained procedures.</div><br />But what if the label I need to repeat is the entry point of a function in the fake fixed bank (i.e. it has to be repeated in all banks but the label has to be global so it can be called from anywhere)?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ca65 separates assembling and linking. If your entire program is one big assembly program, you don't need import or export, you assemble into a single &quot;object&quot;, then link that object into a ROM.</div><br />Ah, I see.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Being able to do things in separate assemblies might actually remove your problems with scope in question 3, by the way, since anything that is not exported will not conflict with similarly named things in other files.</div><br />Hum... In this case I would assemble each bank separately and export all the function and data labels I need to reference from outside of that bank? That could mean a LOT of exports for things such as animation frames and the like...<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">In the definition of the repeated last kilobyte, you'd fill the unused portion using a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.res</tt> command, where <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.res number_of_bytes</tt> fills that many bytes.</div><br />OK. Ideally, I wouldn't have unused portions and the repeated part would grow automatically, but from the answers so far it seems that to take advantage of using segments I have to switch to a &quot;blockier&quot; way of organizing my code.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In the .s file that produces the repeated last kilobyte, you make a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.macro</tt> that spits out one copy of the last kilobyte and call it once for each of the 16 last-kilobyte segments. Hide all copies but one in a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.scope</tt> that hides its labels from the rest of the program so that you don't get duplicate symbol errors.</div><br />Good idea.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.import</tt> keyword declares that a symbol is defined not in this file but instead in another object file.<br />The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.export</tt> keyword declares that a symbol shall be made available for other object files to use.<br />The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.global</tt> keyword acts like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.export</tt> if the symbol is defined in this file and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.import</tt> otherwise.</div><br />OK. Would it be acceptable for me to use hundreds of .export statements in a bank that contains patterns for hundreds of animation frames so I can create pointers to that data in the main engine in order to access it during vblank? Or is there a better approach for situations like this?<br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Now, I'm sorry, but you might want to reword the title</div><br />Yeah, right after I posted I noticed it wasn't a question.<br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Whatever = (wherever you want it to go).</div><br />I'd rather use NESASM than have to do this! That's the exact kind of thing I want to avoid... I want my code to be flexible, so I don't have to edit several lines of code every time I resize a variable or rename something.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">For example, if the &quot;temporary&quot; RAM suggestion from before is also tied to your bank structure, you could do it with just 1 MEMORY/SEGMENT instead of 1 for each page.</div><br />No, these are completely unrelated, but this is still a good suggestion.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Nov 01, 2015 9:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do in CA65 things I do in ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">OK. Would it be acceptable for me to use hundreds of .export statements in a bank that contains patterns for hundreds of animation frames so I can create pointers to that data in the main engine in order to access it during vblank? Or is there a better approach for situations like this?</div><br />Personally I tend to avoid .import/.export and use mostly .global. I do this in C style by placing the stuff I want to be &quot;public&quot; in a header with .global:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; foo.inc: The interface to module &quot;foo&quot;<br />; (you usually want to have an include guard here as well)<br />.global something<br />.global bar<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; foo.s: The actual implementation of &quot;foo&quot;<br />.include &quot;foo.inc&quot;<br />; The include pulls in the .global(s), which then turn the symbol definitions below into .exports<br />something = 123<br />.proc bar<br />&nbsp; lda #123<br />&nbsp; rts<br />.endproc<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; main.s: Somebody using the &quot;foo&quot; module<br />.include &quot;foo.inc&quot;<br />; Since we're just referencing &quot;bar&quot; (not defining it), the .global turns this into an .import<br />jsr bar<br /></div><br />I think you should be fine with 100+ .exports, but sometimes you can simply include the data in as you would in any other assembler. It's a judgement call.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">FIXED:    load = PRG,    type = ro,  start = $FF90;</div><br />Again, you have to manually adjust the start depending on how much fixed stuff you have? There's no way of saying &quot;align this arbitrarily sized block to the end of the bank&quot;? Maybe it's possible in a hackish way, but that's actually one of the things I'm trying to avoid.</div><br />AFAIK there's no built-in support for this. It might be possible to .export the block size from code, and then import it in the linker configuration, but I'm not sure if the linker requires &quot;start&quot; to be a constant (technically it <em>shouldn't</em>, but it may).<br /><br />I believe I tried to do something similar with DMC samples, but I don't think I ever figured out a good solution.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Nov 01, 2015 9:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do in CA65 things I do in ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I see... But it seems you have to break it all into blocks of known sizes beforehand, instead of having the temporary parts move around automatically as the fixed parts grow/shrink from me adding/removing variables, like I do with my current approach of using symbols to mark the end of the fixed parts?</div><br />You don't <em>have</em> to. These are additional constraints you're dropping on me now after the fact. There's a lot of different ways to do it.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">FIXED:    load = PRG,    type = ro,  start = $FF90;</div><br />Again, you have to manually adjust the start depending on how much fixed stuff you have? There's no way of saying &quot;align this arbitrarily sized block to the end of the bank&quot;? Maybe it's possible in a hackish way, but that's actually one of the things I'm trying to avoid.</div><br />It was a solution I thought was perfectly fine, as my fixed bank code almost never changes, and of course, if I ever added too much to it, I'd get a linker error preventing me from compiling a bad ROM. If I wanted, I could also produce an error if there was any space left (.error directive allows you to make custom errors); I could even have the error tell me exactly what number to change it to take up the empty space.<br /><br />I don't think there's an &quot;align to end&quot; feature, but there might be a way to import the segment size for use in linking somehow. I don't have a ready made solution for you that does exactly that, would take some digging to discover a good method, maybe. I don't know off the top of my head, sorry. Why exactly do you need &quot;align to end&quot;?<br /><br />How do you accomplish &quot;align to end&quot; in ASM6, by the way?<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">But what if the label I need to repeat is the entry point of a function in the fake fixed bank (i.e. it has to be repeated in all banks but the label has to be global so it can be called from anywhere)?</div><br />I think I already said this, but you can use :: to specify the scope of a label from another scope. Take a look at the ca65 scope document I linked.<br /><br />If you're talking about one scope per bank, then the labels for stuff in the fixed area are going to be the same in each bank; I don't think you'd need or want anything global for that?<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Hum... In this case I would assemble each bank separately and export all the function and data labels I need to reference from outside of that bank? That could mean a LOT of exports for things such as animation frames and the like...</div><br />For things like common enumerations, I put them in a &quot;header&quot; file that I .include in several assemblies that need it. It's usually logical to group stuff that's related into a single assembly if you can, so that you don't have to have a lot of import/exports. It's the same as in C, what do you extern from the header, and what do you leave as static to the translation unit? (Also, your header can just use &quot;global&quot; instead of import or export, and you can use the same header for both assemblies.)<br /><br />If you don't like having to export or import things at all, you can just go back to putting everything in one big assembly too. That still works fine.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Would it be acceptable for me to use hundreds of .export statements in a bank that contains patterns for hundreds of animation frames so I can create pointers to that data in the main engine in order to access it during vblank? Or is there a better approach for situations like this?</div><br /><br />I'm not entirely certain what situation you are describing. Does your main engine really need to know about hundreds of different pointers to animation data? That seems to imply that every animation has unique code in the main engine that refers to its specific data. If that's the case, why not just include that data in the same assembly as that code?<br /><br />The primary use of import and export is for function labels. You can use it for data labels too, if you need to, but I usually find that data is consumed in one place and doesn't need to be available globally? You can also use import and export for constants and enumeration values, if you want to, but I would likely just create a common header file for these, like I would normally do in C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Nov 01, 2015 10:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've looked at it a bit, and I can't find a good way to do an &quot;align to end&quot; feature with the existing ca65/ld65 tools. I think it would really have to be a new feature added to the linker.<br /><br />The start address of a segment has to be a constant before linking begins, so you can't use the segment's size (generated by the linker) to adjust its start.<br /><br />I also thought about trying to do it by just padding it up against the end of the available space, but similarly, while you can import linker-generated constants (like segment size) and use them in assembly code (to be filled in during the link stage), you can't use link-time symbols with features like .res or .repeat that could be used to generate padding. They have to be known at assembly time.<br /><br /><br />I'm still very curious how the equivalent feature looks in ASM6, though.<br /><br /><br />Still, even without this feature, I think your desire to right-align the segment is really just an optimization, right? I can only think of three times you'd want to adjust the start value:<br />1. The size you allocated was too small, and you need to increase it. (Linker will give an overflow error.)<br />2. The size of the rest of the data in the bank was too large, and you need to optimize. (Again, an overflow error.)<br />3. You want to group the unused space for aesthetic value.<br /><br />Also, I'm not sure that I made this clear, but you don't have to specify the &quot;start&quot; attribute for all segments, this was specifically for something you want at a fixed location (like your fixed code, or vectors). If you omit &quot;start&quot;, they automatically adjust their size and position to fit into the lowest space available, in the order they're listed. I'm not sure if you were complaining that you thought every segment would have to specify a start address manually; most of the time they don't.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Nov 01, 2015 11:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do in CA65 things I do in ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">You don't <em>have</em> to.</div><br />I guess that CA65 is flexible enough that you guys that are used to it can come up with creative ways to do things, but to me this model is still a bit alien. I don't know how much you can bend the rules.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It was a solution I thought was perfectly fine, as my fixed bank code almost never changes, and of course, if I ever added too much to it, I'd get a linker error preventing me from compiling a bad ROM. If I wanted, I could also produce an error if there was any space left (.error directive allows you to make custom errors); I could even have the error tell me exactly what number to change it to take up the empty space.</div><br />Yes, it works... I can certainly adjust the size near the end of development to create a perfect fit, but this goes against the fluidity I'm going for. My main goal is to prevent changes from creating the need to change something else, whenever possible.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't think there's an &quot;align to end&quot; feature, but there might be a way to import the segment size for use in linking somehow. I don't have a ready made solution for you that does exactly that, would take some digging to discover a good method, maybe. I don't know off the top of my head, sorry.</div><br />If you do ever find out, please do share.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why exactly do you need &quot;align to end&quot;?</div><br />It's not that I absolutely need it, I just want things to be fluid from the very start, and I can just add code and data to the correct places without having to manually tell the assembler how big these places are. This would make it easier to reuse a template for different projects, for example.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How do you accomplish &quot;align to end&quot; in ASM6, by the way?</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.org $10000 - (BlockEnd - BlockStart)<br /><br />BlockStart:<br /><br />&nbsp; &nbsp;;STUFF<br /><br />BlockEnd:</div><br />I guess it works because even though the assembler doesn't know the final values of BlockStart and Blockend, it can still calculate the difference because it knows the size of the code between them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think I already said this, but you can use :: to specify the scope of a label from another scope.</div><br />So I would scope all instances of the repeated code and name only one of them, and I'd use that to access the labels inside?<br /><br />[/quote]If you're talking about one scope per bank[/quote]<br />One scope per bank was a bad idea I guess, considering that I need to have parts of the same sub-system (video, audio, etc.) scattered across different banks, and it would be silly to break up the sub-systems like that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you don't like having to export or import things at all, you can just go back to putting everything in one big assembly too. That still works fine.</div><br />I guess I'd be more comfortable with that, and making use of scoping to deal with the repeated code.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm not entirely certain what situation you are describing. Does your main engine really need to know about hundreds of different pointers to animation data? That seems to imply that every animation has unique code in the main engine that refers to its specific data. If that's the case, why not just include that data in the same assembly as that code?</div><br />Sorry, I guess I didn't explain it well. Say that in banks that contain CHR data I use labels to identify the tiles that belong to each animation frame. Then, when the game engine is processing animation, it will need access to these labels to set up the pattern transfers that will copy the tiles to VRAM. Now that I realized that one assembly per bank would be a bad idea in my case, I guess this won't be a problem, since I can indeed have everything related to the animations in the same assembly.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The primary use of import and export is for function labels. You can use it for data labels too, if you need to, but I usually find that data is consumed in one place and doesn't need to be available globally? You can also use import and export for constants and enumeration values, if you want to, but I would likely just create a common header file for these, like I would normally do in C.</div><br />That makes sense. I guess I just have to get more used to this model of programming.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Nov 01, 2015 11:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to do in CA65 things I do in ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How do you accomplish &quot;align to end&quot; in ASM6, by the way?</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.org $10000 - (BlockEnd - BlockStart)<br />BlockStart:<br />&nbsp; &nbsp;;STUFF<br />BlockEnd:</div></div><br /><br />Oh, well you <em>can</em> do the equivalent in ca65:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.res ($10000 - (BlockEnd - BlockStart)) - *</div><br />This would generate padding from the current point up to BlockStart. In this case you would have BlockStart in the same segment as the one you're padding, though. If you went that route, I'd highly recommend and assert or other error generator to make sure your vectors end up aligned, e.g.:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.assert * = $FFFA, error, &quot;Vector table unaligned!&quot;<br />.word vector0, vector1, vector2</div><br />Just to double check on your padding, you might also use asserts to verify all the fixed banks are the same, e.g.:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.assert Bank0::BlockStart = Bank1::BlockStart, error, &quot;Bank 1 fixed block misaligned&quot;<br />.assert Bank0::BlockStart = Bank2::BlockStart, error, &quot;Bank 2 fixed block misaligned&quot;<br />etc...</div><br /><br />I'm used to the idea of just using segments to do my alignment work, rather than trying to write my own assembly code to produce padding, but this kind of thing should work okay. You can still get all the other features/power of ca65 even if you're not taking much advantage of the linker.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Nov 01, 2015 11:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I've looked at it a bit, and I can't find a good way to do an &quot;align to end&quot; feature with the existing ca65/ld65 tools.</div><br />Thanks for looking into it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. You want to group the unused space for aesthetic value.</div><br />That's pretty much it, and not having to go back and change numbers in a file that was supposed to be final just because I edited a tiny bit of code in another file.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm not sure if you were complaining that you thought every segment would have to specify a start address manually; most of the time they don't.</div><br />My complaint was having to specify the start of the &quot;fixed bank&quot;, but mainly the temporary variables. I'm really short on RAM, and fitting all the features I need in 2KB of RAM required a bit of Tetris work. Because of this I have things like 95% of a memory page occupied by object slots, which are permanent, and a dozen bytes in the end which can be used for whatever purpose the different game modes need... say, checkpoint data (player's X, Y, etc.) for resuming gameplay, for example. If I have to make that very specific separation in the config file, I'm making the contents of that file dependent on my variable declarations, which doesn't feel right. In ASM6 I do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;MemoryCounterPage3 = $300<br /><br />&nbsp; &nbsp;;permanent<br />&nbsp; &nbsp;.enum MemoryCounterPage3<br />&nbsp; &nbsp;ScrollX .dsb 2<br />&nbsp; &nbsp;ScrollY .dsb 2<br />&nbsp; &nbsp;Score .dsb 4<br />&nbsp; &nbsp;MemoryCounterPage3 = $<br />&nbsp; &nbsp;.ende<br /><br />&nbsp; &nbsp;;temporary<br />&nbsp; &nbsp;.enum MemoryCounterPage3<br />&nbsp; &nbsp;CameraX .dsb 2<br />&nbsp; &nbsp;CameraY .dsb 2<br />&nbsp; &nbsp;CheckpointX .dsb 2<br />&nbsp; &nbsp;CheckpointY .dsb 2<br />&nbsp; &nbsp;.ende</div><br />Maybe I can do something similar in a hackish way, like defining temporary variables as offsets and and adding them to the memory counters, or something like that. Or create an overlapping segment for temporaries and fill it backwards using the same .res trick that puts the &quot;fixed bank&quot; in the end of the bank (or pad it until the last variable of the permanent segment).<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Oh, well you <em>can</em> do the equivalent in ca65:</div><br />Cool.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In this case you would have BlockStart in the same segment as the one you're padding, though.</div><br />And I would have to make sure that was the very last thing in the segment, right? I guess I could use each bank's segment, instead of creating segments for the fixed bank. It's certainly less robust, but as long as I'm careful it should be OK.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Just to double check on your padding, you might also use asserts to verify all the fixed banks are the same</div><br />OK.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Nov 01, 2015 11:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, to follow up what I meant about not having to have fixed sizes/positions for your temporary RAM pages, here's another way to do it:<br /><br />Have one MEMORY/SEGMENT for your shared stuff, and then one each for the temporary pages, and just allocate space on the bottom of each temporary page to match the space taken up by the shared stuff. Basically you end up with several overlapping segments that all address the same space, but with some checks here and there you can make them all align the same way.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY<br /><br />BSS:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; start = $200, size = $600,&nbsp; type = rw, file = &quot;&quot;;<br />BSS_PAGED_0:&nbsp; &nbsp; &nbsp; start = $200, size = $600,&nbsp; type = rw, file = &quot;&quot;;<br />BSS_PAGED_1:&nbsp; &nbsp; &nbsp; start = $200, size = $600,&nbsp; type = rw, file = &quot;&quot;;<br /><br />SEGMENTS<br /><br />RAM:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; load = BSS,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = bss, define = yes;<br />RAM_PAGED_0:&nbsp; &nbsp; &nbsp; load = BSS_PAGED_0,&nbsp; &nbsp; type = bss;<br />RAM_PAGED_1:&nbsp; &nbsp; &nbsp; load = BSS_PAGED_1,&nbsp; &nbsp; type = bss;<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;RAM&quot;<br />shared_ram_start:<br /><br />shared_a: .res 1<br />shared_b: .res 3<br />etc...<br /><br />shared_ram_end:<br />SHARED_RAM_SIZE = shared_ram_end - shared_ram_start<br /><br />.segment &quot;RAM_PAGE_0&quot;<br />.res SHARED_RAM_SIZE ; overlaps with shared RAM allocations<br />.assert (__RAM_SIZE__ + __RAM_START__) = *, error, &quot;Ram page 0 misaligned&quot; ; double check at link time (makes sure you didn't accidentally put extra stuff in RAM segment)<br />temp_a: .res 1 ; reused by other RAM pages<br />temp_b: .res 25<br />etc.<br /><br />.segment &quot;RAM_PAGE_1&quot;<br />.res SHARED_RAM_SIZE<br />.assert (__RAM_SIZE__ + __RAM_START__) = *, error, &quot;Ram page 1 misaligned&quot;<br />temp_c: .res 1 ; reuses same space as temp_a above<br />temp_d: .res 1<br />etc.</div><br />You could put scopes around your temporary page allocations if you wanted, or needed to use variables with the same name between them, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Nov 01, 2015 11:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Have one MEMORY/SEGMENT for your shared stuff, and then one each for the temporary pages, and just allocate space on the bottom of each temporary page to match the space taken up by the shared stuff.</div><br />Hah, this is exactly the idea I had and just edited my post to include it (although I might have not worded it very well)! Good to know that I'm starting to think the right way to work with CA65.<br /><br />Thanks for all the tips, rainwarrior and tepples. I guess I have enough to attempt porting my code. I'm pretty sure I'm going to have some problems with scoping, so I might show up with a few more questions later. I think the scope problems will be easier to solve, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Nov 01, 2015 11:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">And I would have to make sure that was the very last thing in the segment, right? I guess I could use each bank's segment, instead of creating segments for the fixed bank. It's certainly less robust, but as long as I'm careful it should be OK.</div><br /><br />Actually, if you put the padding and fixed code in one segment by itself, all you have to do is put that segment last in your SEGMENTS list in the config file. (Each SEGMENT line is packed into its corresponding MEMORY region in the same order they're listed.)<br /><br />The actual order of segments in your assembly files doesn't matter, though the individual code that fills up each segment will appear in the order it's written of course, like any other assembler. (When linking multiple objects that are using the same segments, the order of files will maker a difference here.)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>