<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=5869" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-12-22T19:11:19-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=5869</id>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2009-12-22T19:11:19-07:00</updated>
<published>2009-12-22T19:11:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5869&amp;p=54294#p54294</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5869&amp;p=54294#p54294"/>
<title type="html"><![CDATA[A bunch of weird, intricate questions.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5869&amp;p=54294#p54294"><![CDATA[
If you look at all the coarse scrolling bits of Loopy T and Loopy V, you will see that they are exactly the same as how you would calculate the address of a tile within the nametable.  Coarse X + 32 * Coarse Y + Horizontal Nametable * 1024 + Vertical Nametable * 2048.  Fine Y bits are just the other bits of the "vram address" being used as fine Y scroll values instead of a vram address.<br /><br />Supposedly, the write would take place as the Write step of the instruction finishes.<br />This file tells you when the writes occur within each 6502 instruction: <!-- m --><a class="postlink" href="http://nesdev.com/6502_cpu.txt">http://nesdev.com/6502_cpu.txt</a><!-- m --><br />Effectively, the write step is always the last step, except for JSR, BRK, and interrupts pushing to the stack.<br />Read-Modify-Write instructions do two writes for some reason, first the original value, then the modified value after the original value is written.  The MMC1 mapper ignores the second write for those instructions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Dec 22, 2009 7:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BeTheDuck]]></name></author>
<updated>2009-12-22T16:59:10-07:00</updated>
<published>2009-12-22T16:59:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5869&amp;p=54285#p54285</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5869&amp;p=54285#p54285"/>
<title type="html"><![CDATA[A bunch of weird, intricate questions.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5869&amp;p=54285#p54285"><![CDATA[
I've been lurking around NesDev and the wiki for a few years now, and I'm finally trying to take a stab at writing an emulator. My goal is, of course, to get my information as correct as possible, even before I start hacking the thing together.<br /><br />So I've been reading about the PPU and its insanity, and I have some weird questions. I'm not sure if these are even really important, but I'm really trying to go beyond "making an emulator that works" and into the realm of a working, accurate model of what the NES really does.<br /><br />1. When the PPU goes into VBlank and sets off an NMI, when does the CPU catch it? I mean, let's say the CPU is running some instruction that takes 6 CPU clocks [like STA ($44),Y], and VBlank hits right as it starts running that instruction. Would the CPU wait to recognize the interrupt until the instruction is finished, fully 18 PPU cycles after it actually started? It seems like the obvious answer is "yes", but it also seems like being anywhere from 0 to 18 PPU cycles off during a precision technique would be a bad thing. Is that just something the <em>programmer</em> would have to deal with, and not the emulator?<br /><br />2. Along the same lines, let's say I'm storing a value into a PPU register, something like "STA $2007". Now, that instruction takes 4 CPU cycles, or 12 PPU cycles. At what point does the actual value in VRAM change? I'll bet emulators just assume it changes after all 12 cycles are done, and I'll bet this is perfectly fine, but... I guess I don't want to enter into the PPU lightly and make assumptions everywhere. If this timing is different than I assume, it could change the performance of, say, a demo that runs perfectly fine on an NES.<br /><br />3. In the same vein as #2, when reading a value in from the PPU (say, LDA $2007), on which PPU cycle would <em>that</em> read happen? The case I'm trying to account for here is, let's say the PPU is rendering the screen, and I read in from $2007 without altering the VRAM address myself. If the LDA takes 12 PPU cycles to complete, my VRAM address could be 2 or 3 different values depending on when the read <em>really</em> happens. (<strong>EDIT</strong>: I'm also assuming that somewhere in the PPUs VRAM reads, it increments the VRAM address, but I don't know which cycle THIS happens on either.)<br /><br />4. I've mostly figured out the Loopy scrolling stuff, but there's a part of it that's bugging me. The original document has this shorthand:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">2006 first write:<br />        t:0011111100000000=d:00111111<br />        t:1100000000000000=0</div><br /><br />...and from my understanding, Loopy_T can be interpreted in this format:<br /><br />0-FFF-NN-YYYYY-XXXXX<br /><br />...where F is the fine y-scrolling (within a tile), N switches between the 4 name tables, and X and Y point to the current tile within the current name table. So if writing 00111111 to 2006 does what Loopy writes, those bits are written here:<br /><br />_-_XX-XX-XX___-_____<br /><br />...which alters the name table, the Y scroll, and... two bits of the fine y-scrolling. Is this right? Why would a write to $2006 affect the scroll within a tile? And if this <em>is</em> right, do those bits correspond to the highest bits in the data written, i.e. writing $30 (or $70, or $B0, or $F0) to $2006 would result in a fine-scroll value of 3?<br /><br />---<br /><br />I hope I haven't been proven myself TOO insane. Any help would be greatly appreciated.<br /><br />Also, hi. This is without a doubt my most eloquent first post on anything, ever.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4162">BeTheDuck</a> — Tue Dec 22, 2009 4:59 pm</p><hr />
]]></content>
</entry>
</feed>