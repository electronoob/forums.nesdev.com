<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Polygon filling..</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Polygon filling..</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4005">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4005</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Apr 10, 2008 5:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, my 3D rendering really needs a lot of calculations, even for really simple objects.
<br />I can't even imagine how much calculation it needs for modern games that actually can look almost real with one milion or so geomertic shapes per screen.
<br />
<br />You can get fast multiplication by having a 2-entry multiplication table, but man that takes space !

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Thu Apr 10, 2008 10:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You've probably considered this already, but if you just want to spin something, and you don't care about the downsides of Euler angles (gimbal lock, etc) then there's no real reason two use three euler angles as I see it. 
<br />
<br />Two will do just fine, and can get your 3D object to any arbitrary position. That will make it easier to compute the rotation matrix.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Thu Apr 10, 2008 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bananmos wrote:</div><div class="quotecontent">Two will do just fine, and can get your 3D object to any arbitrary position. That will make it easier to compute the rotation matrix.</div>Plus the transformations themselves can take advantage of it and cut out a few multiplications. I'm going to try to make a full 3-axis rotation work first though.
<br />
<br />At any rate building the matrix now "only" takes 20x 24-bit additions/subtractions, eight or so 8-bit additions/subtractions plus a bunch of table lookups. Okay, we're still talking about a few hundred cycles but compared to say a matrix-by-matrix multiplication it's nothing. I suppose this is a standard trick but I've never seen it mentioned before and I think it's a rather neat hack.
<br />
<br />Here wsin is just a sine table, hsin/hcos are (co)sine tables divided by two and qsin/qcos are the same sines divided by four.<div class="codetitle"><b>Code:</b></div><div class="codecontent">com1 = qsin&#40;x - y + z&#41; - qsin&#40;x + y + z&#41; + hcos&#40;x + z&#41;;<br />com2 = qsin&#40;x + y - z&#41; - qsin&#40;x - y - z&#41; + hcos&#40;x - z&#41;;<br />com3 = qcos&#40;x + y - z&#41; - qcos&#40;x - y - z&#41; - hsin&#40;x - z&#41;;<br />com4 = qcos&#40;x + y + z&#41; - qcos&#40;x - y + z&#41; + hsin&#40;x + z&#41;;<br /><br />mat.xx = com1 + com2;<br />mat.xy = hsin&#40;x - y&#41; + hsin&#40;x + y&#41;;<br />mat.xz = com3 + com4;<br />mat.yx = com3 - com4;<br />mat.yy = hcos&#40;x - y&#41; + hcos&#40;x + y&#41;;<br />mat.yz = com1 - com2;<br />mat.zx = hsin&#40;y - z&#41; - hsin&#40;y + z&#41;;<br />mat.zy = wsin&#40;y&#41;;<br />mat.zz = hcos&#40;y - z&#41; + hcos&#40;y + z&#41;;</div>
<br />And this works nicely in my prototype. Damn but it just doesn't feel right having the line drawing reduced to 30-lines of C code when the 6502 implementation took 5000 lines of assembly code and uses up more than 48k of ROM space.
<br />Anyway I may have sort of accidentally gotten sidetracked with writing a fire cube for a while there, but I'm back to trying to work out the minimum necessary precision now..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Thu Apr 10, 2008 2:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The trick to fast matrix multiplies is knowing what's in your matrices, and thus where all the zeroes are.
<br />
<br />If you think the basic transforms are bad, you should see all the stuff that goes on after you get the thing projected. Perspective-correct interpolation is a lovely mess.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Thu Apr 10, 2008 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">The trick to fast matrix multiplies is knowing what's in your matrices, and thus where all the zeroes are.</div>Ahh, if only I had any zeros (or ones) to play with..<br />Another trick is to realize that for a fixed model you're actually multiplying by constants so you can unroll these multiplications and use nice whole numbers to speed things up significantly. Which means that we can get all the way from Euler angles right up to the perspective correction without performing any (general-purpose) multiplications.<br /><br />On a related note I've been playing with the precision and oddly enough it appears that 8-bits is more than sufficient for the matrix when dealing with simple objects. Since the vertex coordinates are so clean (i.e. plus or minus ones for a cube) the perspective division is the only place where I lose much in the way of precision. Which means that I can probably make the division table based using the usual logarithm trick :)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you think the basic transforms are bad, you should see all the stuff that goes on after you get the thing projected. Perspective-correct interpolation is a lovely mess.</div>Believe me, I know. I wrote this texture mapper (with sort of speedy bilinear filtering!) a while back and had to deal with that whole bit of nastiness. It took a weekend with pen and paper to work things out..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Fri Apr 11, 2008 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://doynax.googlepages.com/polynes2.nes" class="postlink">Behold!</a>
<br />(to be run in Nestopia, like last time.)
<br />
<br />Okay, admittedly it's still of little or no practical use but I'm ecstatic about finishing what I set out to do in the first place anyway.
<br />I just can't believe I managed to get the math whole math bit working so easily (relatively speaking..), I suppose the time spent writing the C prototype payed its way many times over in the end. The entire thing runs in less than 2500 cycles, and that's without any insane optimizations or big precision cuts. Oh, and I'm working on some actual interesting objects but even figuring out the code and data behind a cube stretched my spatial intelligence to its limits.
<br />
<br />By the way I've been thinking about putting together a small demo part from it all. Perhaps someone with a bit of musical talent feels could be persuaded to compose something for me? I don't have any particular preferences aside from that it can't waste too much raster time or use DMC samples.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dXtr</b> [ Fri Apr 11, 2008 7:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />that's really impressive. great work <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />Going to try this on my powerpak tomorrow <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Apr 11, 2008 9:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looks cool, but there are 2 things bothering me...
<br />
<br />First, the lighting. It should make things cooler, but with such few colors, the effects is betraying you. Color transitions are too abrupt, so it looks like the cube is flashing or something. Maybe it'd look better if each face simply had it's own color. Or you could add some dithering to virtually increase the number of colors you have. The simple checkerboard dithering pattern might not be hard to implement with XOR-filling.
<br />
<br />The other problem is distortion, it looks like the cube is too close to the camera, so the perspective is distorting the image too much. That should be simple to fix, though, just move the cube away from the camera.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Fri Apr 11, 2008 10:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dXtr wrote:</div><div class="quotecontent">Going to try this on my powerpak tomorrow :)</div>That would be most excellent. I'll put together a PAL version for you when I wake up properly.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Looks cool, but there are 2 things bothering me...<br /><br />First, the lighting. It should make things cooler, but with such few colors, the effects is betraying you. Color transitions are too abrupt, so it looks like the cube is flashing or something. Maybe it'd look better if each face simply had it's own color. Or you could add some dithering to virtually increase the number of colors you have. The simple checkerboard dithering pattern might not be hard to implement with XOR-filling.<br /><br />The other problem is distortion, it looks like the cube is too close to the camera, so the perspective is distorting the image too much. That should be simple to fix, though, just move the cube away from the camera.</div>Heh, you managed to zero in on the two effects that are mostly just there because, well, they're supposed to be there. A lot of 3D demos have been known to cheat by using a simple parallel perspective so I exaggerated the effect a bit.
<br />The lighting is worse though and still manages to look remarkably crappy regardless of how much I try to tweak it. I've been toying with the idea of allocating the palette entries dynamically based on whats actually visible but I'm not sure how well it'd work out for more complex images. Perhaps I just ought to scrap it like you said.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dXtr</b> [ Sun Apr 13, 2008 1:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tried polygon2.nes with no success. (probably because it was a PAL NES?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Mon Apr 14, 2008 7:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dXtr wrote:</div><div class="quotecontent">tried polygon2.nes with no success. (probably because it was a PAL NES?)</div>Possibly, although I doubt it since the timing ought to be correct anyway. Actually it should be more compatible since it won't have to deal with the tricky case of starting the display somewhere in the upper border.
<br />
<br />No, mostly likely it's caused by some PPU or APU abuse of mine. Perhaps the sprite overflow testing has come back to bite me, or DMC interrupts don't quite work as they're supposed, or one of the illegal opcodes turned out to be  unstable after all. Would you be willing to run a suite of test ROMs for the various tricks I'm employing?
<br />I don't like relying on the charity of others to do my debugging for me but I don't see that I have any other alternative. The PowerPak seems to be sold out and installing a CopyNES requires some serious soldering, so that's right out. And besides my NES has a bad cartridge port to begin with and I've only got so much money to spend on this sort of thing..
<br />
<br />As for the project's progress I've trying to add some (more) interesting objects to the demo, but I've run into some annoying issues along the way. Consider a dodecahedron for instance, you can't just scale the basis vectors by some nice and clean factors to calculate the vertex coordinates rather it uses irrational numbers like the golden ratio, and there isn't a three-coloring of it yet dynamic lighting looks always comes out looking horrible no matter how I tweak things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Apr 15, 2008 1:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, this is really cool! I agree with tokumaru that it looks distorted. It almost looks like it's just a really big cube moving really fast. But it really does look like a cube that's really close to the camera
<br />
<br />Dithering seems like it'd be kind of hard to implement. Well, you would probably end up with lots of borders where the checkered pixels don't alternate correctly.
<br />
<br />I really need to find out more about XOR filling, this is just too cool to not have in a game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Apr 15, 2008 2:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Wow, this is really cool! I agree with tokumaru that it looks distorted. It almost looks like it's just a really big cube moving really fast. But it really does look like a cube that's really close to the camera</div>Am I the only one who thinks it looks kind of cool? ;)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Dithering seems like it'd be kind of hard to implement. Well, you would probably end up with lots of borders where the checkered pixels don't alternate correctly.</div>Normally it wouldn't be that hard with XOR filling. By filling the odd and even scanlines independently of each other you could still get a nice dither patter while only drawing lines (albeit twice as thick lines). However it would easily triple the code size of the liner drawers and slow them down a great deal besides, but the real kicker is that you kind of have to write to VRAM in a straight fashion while this technique wants to process the odd/even bytes separately thus necessitating a separate EOR pass rather than doing it in-line.<br />Well.. You could dither horizontally only, sort of stripe it that is, but it'd look pretty bad.<br /><br />I figure the only viable option to get more colors is to make better use of the palette. For instance a cube only ever has three sides visible at a time, so they could each have their own palette entry. For more complex objects you might set up the four background palettes such that each successive one replaces the darkest color of the previous palette with a new lightest color and be careful never to cross more than four consecutive shades within a single 16x16 block. At least, I think I might be able to pull that off in realtime..<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I really need to find out more about XOR filling, this is just too cool to not have in a game.</div>There doesn't seem to be much information available on them on the net. I could send you some simple example code in C if you want to but frankly it's quite straightforward once you get your head wrapped around it.
<br />
<br />Imagine that you've got one big monochrome bitmap to fill. Then the code will simply walk through the screen column-by-column, XORing an accumulator with the pixels already written there and storing the new values as you go. On the 6502 this would be done one whole 8-pixel byte at a time (and this is why we're filling vertically rather than horizontally).
<br />
<br />In other words:<div class="codetitle"><b>Code:</b></div><div class="codecontent">for&#40;x = 0; x &lt; 256; ++x&#41; &#123;<br />&nbsp;pixel acc = 0;<br />&nbsp;for&#40;y = 0; y &lt; 240; ++y&#41; &#123;<br />&nbsp; acc ^= screen&#91;x&#93;&#91;y&#93;;<br />&nbsp; screen&#91;x&#93;&#91;y&#93; = acc;<br />&nbsp;&#125;<br />&#125;</div>
<br />Now imagine that before filling you had drawn two parallel horizontal lines, one right above the other, on an otherwise clear screen. What happens in this loop is then that the parts above the line are cleared (since we start with acc = 0), then once we reach the upper line our accumulator get flipped and we start filling pixels all the way down to the lower line where it gets flipped once again back to blank pixels.
<br />This extends naturally to arbitrary polygon outlines and such too, except that you'll have to be take care never to overdraw anything or you'll get see that interference effect I had in my first demo. And handling four colors rather than two is a simple matter of doing the same with with each bitplane separately.
<br />
<br />The main thing to worry about is the fill convention because if anything is a bit off then the errors will propagate all the way down the screen. The key here is to only draw each horizontal pixel along the line exactly once, except for either the leftmost or rightmost pixel which has to be excluded. This applies even to y-major lines where you'd only draw the first pixel in each vertical run (so they won't actually be filled lines).
<br />
<br />Now there are any number of complications to doing this on the NES but you'd better experiment with the basics in a high-level language first anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jargon</b> [ Wed Apr 16, 2008 2:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Polygon filling..</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">CHR-ROM does a pretty decent job emulating large "pixels". If you divide each tile in 4 large pixels, it's possible to have all combinations with the 4 colors fit inside the 256 tiles you have. You can even double the vertical resolution by drawing the image to both name tables (making a 64x120 "pixels" image), and squeeze it inside a single screen using interrupts or timed code (although this will take away time that would otherwise be used to compute the next frame).<br /><br />If you use less than 4 colors it might even be possible to fit more pixels inside each tile, increasing the resolution.<br /><br />I really think this is a better option than CHR-RAM, which would be pretty slow to update, as opposed to the name tables.</div>
<br />
<br />split 8x8 tiles into 4 columns of 2 pixels wide by 8 pixels tall for left-to-right palette permutations 0,1,2,3 though 3,2,1,0 and use scan line interrupt every 2 pixel rows to change palette per unique tile.
<br />
<br />this will allow you 32 tiles per row to swap of the permutations:
<br />0123 0132 0213 0231
<br />0312 0321 1023 1032
<br />2013 2031 3012 3021
<br />3102 3120 3201 3210
<br />
<br />which is 16 unique tiles total. by using the 2px scan line method you recurse that once.
<br />
<br />this allows 256 unique tiles using only 16 CHR tiles with a display resolution of  128x120.
<br />
<br />this provides a bitch load more memory for lookups by placing it in unused name table space.
<br />
<br />remember, for drawing a triangle, always split a render into the upper and lower portion at the corner vertically between the other two, then render those two triangles top half first, also check whether the corners are clockwise or counter-clockwise in order to deduce faster if that surface is even a visible side, i usually use clockwise for polygons on the inner surface of a polyhedron.
<br />
<br />beyond that i use simple z-order split of existing polyhedrons in event two overlap.
<br />
<br />creating a multiplication matrix for the 3 axis using sums of binary-split increments of rotation from within a look-up table instead of raw cos/sin works much more effectively.
<br />
<br />beyond that, if you decide to implement textures, i highly advise to not take perspective into account for textures and simply render them as if they were an orthogonal re-orientation of each triangle, as the NES would suck CPU cycles like crazy taking that into account.
<br />
<br />my advice for perspective is to use exponential projection as i described here: 
<br /><a href="http://nesdev.com/bbs/viewtopic.php?p=32745#32745" class="postlink">http://nesdev.com/bbs/viewtopic.php?p=32745#32745</a>
<br />
<br />
<br />i only left out of that description that is best to simplify the look-up table so that only each depth plane is used in which the scalar comes to a full integer when translated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Apr 16, 2008 3:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Polygon filling..</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">jargon wrote:</div><div class="quotecontent">split 8x8 tiles into 4 columns of 2 pixels wide by 8 pixels tall for left-to-right palette permutations 0,1,2,3 though 3,2,1,0 and use scan line interrupt every 2 pixel rows to change palette per unique tile.</div>
<br />Except that changing the palette mid-frame is not such a simple task. There is not enough time in HBlank to modify a lot of bytes, specially considering that you have to set the scroll again after you've done it.
<br />
<br />To change the palette you'd have to use a bit of the visible scanline, reducing your horizontal resolution. Also, when working with the palette when rendering is turned off, the color currently pointed by the PPU gets displayed, so you'd have color glitches while updating the palette.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>