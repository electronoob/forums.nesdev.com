<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=10417" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-08-25T13:40:36-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=10417</id>
<entry>
<author><name><![CDATA[Emu6502Writer]]></name></author>
<updated>2013-08-25T13:40:36-07:00</updated>
<published>2013-08-25T13:40:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117072#p117072</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117072#p117072"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117072#p117072"><![CDATA[
Hehe, I thought so, just didn't want to laugh at it on the off chance this is actually some rare production cartridge with a JTAG header on it or whatever <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><br /><br />For what it's worth, here is some test code for the more esoteric illegal opcodes and the result in VICE /  Visual 6502:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDX #$FF<br />TXS<br /><br />; ANC<br /><br />LDA #$FF<br />;ANC($0B) #$00<br /> DCB $0B<br /> DCB $00<br />PHP ; $01FF<br /><br />LDA #$81<br />;ANC($0B) #$01<br /> DCB $0B<br /> DCB $01<br />PHP ; $01FE<br /><br />LDA #$AA<br />;ANC($0B) #$FF<br /> DCB $0B<br /> DCB $FF<br />PHP ; $01FD<br /><br />LDA #$00<br />;ANC($2B) #$FF<br /> DCB $2B<br /> DCB $FF<br />PHP ; $01FC<br /><br />LDA #$CD<br />;ANC($2B) #$FF<br /> DCB $2B<br /> DCB $FF<br />PHP ; $01FB<br /><br />; ALR<br /><br />LDA #$81<br />;ALR #$FF<br /> DCB $4B<br /> DCB $FF<br />PHA ; $01FA<br />PHP ; $01F9<br /><br />LDA #$AB<br />;ALR #$55<br /> DCB $4B<br /> DCB $55<br />PHA ; $01F8<br />PHP ; $01F7<br /><br />LDA #$FF<br />;ALR #$FF<br /> DCB $4B<br /> DCB $FF<br />PHA ; $01F6<br />PHP ; $01F5<br /><br />; ARR<br /><br />SEC<br />LDA #$AB<br />;ARR #$FF<br /> DCB $6B<br /> DCB $FF<br />PHA ; $01F4<br />PHP ; $01F3<br /><br />CLC<br />LDA #$AB<br />;ARR #$FF<br /> DCB $6B<br /> DCB $FF<br />PHA ; $01F2<br />PHP ; $01F1<br /><br />CLC<br />LDA #$FF<br />;ARR #$00<br /> DCB $6B<br /> DCB $00<br />PHA ; $01F0<br />PHP ; $01EF<br /><br />SEC<br />LDA #$FF<br />;ARR #$FF<br /> DCB $6B<br /> DCB $FF<br />PHA ; $01EE<br />PHP ; $01ED<br /><br />SEC<br />LDA #$AA<br />;ARR #$55<br /> DCB $6B<br /> DCB $55<br />PHA ; $01EC<br />PHP ; $01EB<br /><br />; XAA<br /><br />PHP<br /><br />;XAA #$FF<br /> DCB $8B<br /> DCB $FF<br /><br />; We'll only execute the instruction and test the time it takes before<br />; returning the registers to well defined states<br />PLP<br />LDA #$00<br /><br />; AHX<br /><br />LDA #$09<br />STA $10<br />LDA #$00<br />STA $11<br />LDA #$AA<br />LDX #$55<br />LDY #$01<br />;AHX ($10),Y<br /> DCB $93<br /> DCB $10<br />LDA $10<br />PHA ; $01EA<br /><br />LDA #$BB<br />STA $10<br />LDA #$00<br />STA $11<br />LDA #$55<br />LDX #$FF<br />LDY #$01<br />;AHX ($10),Y<br /> DCB $93<br /> DCB $10<br />; Push the flags once for good measure, they shouldn't be affected<br />PHP ; $01E9<br />LDA $BC<br />PHA ; $01E8<br /><br />LDA #$AA<br />LDX #$FF<br />LDY #$01<br />;AHX $C000,Y<br /> DCB $9F<br /> DCB $00<br /> DCB $C0<br />LDA $C001<br />PHA ; $01E7<br /><br />; TAS<br /><br />TSX     ; Save SP<br />STX $10<br /><br />LDA #$55<br />LDX #$FF<br />LDY #$01<br /><br />;TAS $0010,Y<br /> DCB $9B<br /> DCB $10<br /> DCB $00<br /><br />TSX     ; Save SP in A through X - we want to push both SP and M on the stack<br />TXA<br /><br />LDX $10 ; Restore SP<br />TXS<br /><br />PHA ; $01E6<br />LDA $11<br />PHA ; $01E5<br /><br />; SHX<br /><br />LDY #$30<br />LDX #$AA<br />;SHX $C000,Y<br /> DCB $9E<br /> DCB $00<br /> DCB $C0<br />LDA $C030<br />PHA ; $01E4<br /><br />LDY #$20<br />LDX #$FF<br />;SHX $0001,Y<br /> DCB $9E<br /> DCB $01<br /> DCB $00<br />LDA $0021<br />PHA ; $01E3<br /><br />; SHY<br /><br />LDX #$FF<br />;SHY $C800,X<br /> DCB $9C<br /> DCB $00<br /> DCB $C8<br />LDA $C8FF<br />PHA ; $01E2<br /><br />LDX #$F0<br />;SHY $0000,X<br /> DCB $9C<br /> DCB $00<br /> DCB $00<br />LDA $F0<br />PHA ; $01E1<br /><br />; LAS<br /><br />TSX     ; Save SP<br />STX $10<br /><br />LDA #$AA<br />STA $05<br />LDY #$04<br />;LAS $0001,Y<br /> DCB $BB<br /> DCB $01<br /> DCB $00<br /><br />STX $11 ; Move X and SP from after LAS out of the way<br />TSX<br />STX $12<br /><br />LDX $10 ; Restore SP<br />TXS<br /><br />PHA ; $01E0<br />LDA $11<br />PHA ; $01DF<br />LDA $12<br />PHA ; $01DE<br /><br />; AXS<br /><br />LDA #$FF<br />LDX #$55<br />;AXS #$09<br /> DCB $CB<br /> DCB $09<br />PHP ; $01DD<br />TXA<br />PHA ; $01DC<br /><br />LDA #$55<br />LDX #$00<br />;AXS #$01<br /> DCB $CB<br /> DCB $01<br />PHP ; $01DB<br />TXA<br />PHA ; $01DA<br /></div><br /><br />Assembling into:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0000000 a2 ff 9a a9 ff 0b 00 08 a9 81 0b 01 08 a9 aa 0b<br />0000010 ff 08 a9 00 2b ff 08 a9 cd 2b ff 08 a9 81 4b ff<br />0000020 48 08 a9 ab 4b 55 48 08 a9 ff 4b ff 48 08 38 a9<br />0000030 ab 6b ff 48 08 18 a9 ab 6b ff 48 08 18 a9 ff 6b<br />0000040 00 48 08 38 a9 ff 6b ff 48 08 38 a9 aa 6b 55 48<br />0000050 08 08 8b ff 28 a9 00 a9 09 85 10 a9 00 85 11 a9<br />0000060 aa a2 55 a0 01 93 10 a5 10 48 a9 bb 85 10 a9 00<br />0000070 85 11 a9 55 a2 ff a0 01 93 10 08 a5 bc 48 a9 aa<br />0000080 a2 ff a0 01 9f 00 c0 ad 01 c0 48 ba 86 10 a9 55<br />0000090 a2 ff a0 01 9b 10 00 ba 8a a6 10 9a 48 a5 11 48<br />00000a0 a0 30 a2 aa 9e 00 c0 ad 30 c0 48 a0 20 a2 ff 9e<br />00000b0 01 00 a5 21 48 a2 ff 9c 00 c8 ad ff c8 48 a2 f0<br />00000c0 9c 00 00 a5 f0 48 ba 86 10 a9 aa 85 05 a0 04 bb<br />00000d0 01 00 86 11 ba 86 12 a6 10 9a 48 a5 11 48 a5 12<br />00000e0 48 a9 ff a2 55 cb 09 08 8a 48 a9 55 a2 00 cb 01<br />00000f0 08 8a 48 <br /></div><br /><br />This is how the stack in VICE looks like after the test:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">     0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F<br />01D0 00 00 00 00 00 00 00 00 00 00 FF B4 4C 35 A0 A0<br />01E0 A0 00 00 01 80 01 55 80 01 34 09 B4 80 B5 FF 36<br />01F0 00 75 55 F5 D5 35 7F 37 00 35 40 B5 36 B5 34 36<br /></div><br /><br />and Visual 6502:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">     0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F<br />01D0 00 00 00 00 00 00 00 00 00 00 FF F4 4C 75 E0 E0<br />01E0 A0 00 00 01 80 01 55 80 01 75 09 F5 D5 B5 FF 35<br />01F0 7F 75 55 F5 D5 35 7F 35 55 35 40 B5 36 B5 B5 B5<br /></div><br /><br />Rather different (all failures seem to be the result of missing &amp;s). Note that in the stack a lot of the SR values are simply wrong because V gets set erroneously early on and never cleared.<br /><br />If anybody wants runs this their own emulator / hardware, please share the results! <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6116">Emu6502Writer</a> — Sun Aug 25, 2013 1:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-08-25T08:16:03-07:00</updated>
<published>2013-08-25T08:16:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117055#p117055</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117055#p117055"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117055#p117055"><![CDATA[
<div class="quotetitle">Emu6502Writer wrote:</div><div class="quotecontent"><br />What's the significance of that game card?<br /></div><br />Name pun on &quot;Loading the small code snippet into vice&quot;.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Would using a commercial game card like that possibly change the result of illegal opcodes because of the change in data bus capacitance you mentioned earlier?<br /></div><br />It might, especially for the more &quot;analog&quot; ones like XAA.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Aug 25, 2013 8:16 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Emu6502Writer]]></name></author>
<updated>2013-08-25T08:13:42-07:00</updated>
<published>2013-08-25T08:13:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117054#p117054</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117054#p117054"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117054#p117054"><![CDATA[
Thank you!<br /><br />Two solid emulators and the actual hardware suggesting there's an &amp; being done, guess that settles it then? Will have to roll back some commits 'fixing' my emulator to match Visual 6502 <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><br /><br />What's the significance of that game card? Is it especially suitable to be modified into a flashable card for homebrew NES development? Would using a commercial game card like that possibly change the result of illegal opcodes because of the change in data bus capacitance you mentioned earlier?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6116">Emu6502Writer</a> — Sun Aug 25, 2013 8:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-08-25T07:31:15-07:00</updated>
<published>2013-08-25T07:31:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117051#p117051</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117051#p117051"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117051#p117051"><![CDATA[
This test case inserted into my test harness produces $80 in FCEUX and $80 on a PowerPak.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  sec<br />  lda #$aa<br />  .byte $6B,$55<br />  sta debugHex1<br /></div><br />Unfortunately, I haven't learned to rewire a <em>Vice: Project Doom</em> cart and test on that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Aug 25, 2013 7:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Emu6502Writer]]></name></author>
<updated>2013-08-25T05:31:35-07:00</updated>
<published>2013-08-25T05:31:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117048#p117048</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117048#p117048"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117048#p117048"><![CDATA[
To be completely explicit:<br /><br />This code<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SEC<br />LDA #$AA<br />ARR #$55<br />PHA<br /></div><br /><br />assembles into<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">38 A9 AA 6B 55 48<br /></div><br /><br />loaded into Visual 6502<br /><br /><!-- m --><a class="postlink" href="http://www.visual6502.org/JSSim/expert.html?graphics=false&amp;r=00f0&amp;a=00f0&amp;d=38a9aa6b5548">http://www.visual6502.org/JSSim/expert. ... a9aa6b5548</a><!-- m --><br /><br />and we get a D5 on the stack. There's no &amp; being done, the Immediate operand completely ignored and ROR is done on $AA, giving $D5. Trace:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">le   ab   db   rw   Fetch   pc   a   x   y   s   p<br />0   00f0   38   1   SEC   00f0   aa   00   00   fd   nv‑BdIZc<br />0   00f0   38   1   SEC   00f0   aa   00   00   fd   nv‑BdIZc<br />1   00f1   a9   1      00f1   aa   00   00   fd   nv‑BdIZc<br />1   00f1   a9   1      00f1   aa   00   00   fd   nv‑BdIZc<br />2   00f1   a9   1   LDA #   00f1   aa   00   00   fd   nv‑BdIZC<br />2   00f1   a9   1   LDA #   00f1   aa   00   00   fd   nv‑BdIZC<br />3   00f2   aa   1      00f2   aa   00   00   fd   nv‑BdIZC<br />3   00f2   aa   1      00f2   aa   00   00   fd   nv‑BdIZC<br />4   00f3   6b   1   unknown   00f3   aa   00   00   fd   Nv‑BdIzC<br />4   00f3   6b   1   unknown   00f3   aa   00   00   fd   Nv‑BdIzC<br />5   00f4   55   1      00f4   aa   00   00   fd   Nv‑BdIzC<br />5   00f4   55   1      00f4   aa   00   00   fd   Nv‑BdIzC<br />6   00f5   48   1   PHA   00f5   aa   00   00   fd   Nv‑BdIzc<br />6   00f5   48   1   PHA   00f5   aa   00   00   fd   Nv‑BdIzc<br />7   00f6   00   1      00f6   d5   00   00   fd   NV‑BdIzC<br />7   00f6   00   1      00f6   d5   00   00   fd   NV‑BdIzC<br />8   01fd   00   0      00f6   d5   00   00   fd   NV‑BdIzC<br />8   01fd   d5   0      00f6   d5   00   00   fd   NV‑BdIzC<br />9   00f6   00   1   BRK   00f6   d5   00   00   fc   NV‑BdIzC<br /></div><br /><br />ARR is widely described as 'Combined AND + ROR with different SR effects', so I'd expect that after the &amp; we should have a value of 0, and the ROR with set carry should give $80. This does not happen here.<br /><br />Looking at the code for VICE:<br /><br /><!-- m --><a class="postlink" href="http://sourceforge.net/p/vice-emu/code/27740/tree/trunk/vice/src/6510core.c#l622">http://sourceforge.net/p/vice-emu/code/ ... ore.c#l622</a><!-- m --><br /><br />The implementation clearly starts with doing the &amp;:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">tmp = reg_a_read &amp; (value);<br /></div><br /><br />Loading the small code snippet into vice and debugging with the monitor:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">fill $00f0 $00f5 38 A9 AA 6B 55 48<br /><br />d 00f0 00f5<br />.C:00f0   38         SEC<br />.C:00f1   A9 AA      LDA #$AA<br />.C:00f3   6B 55      ARR #$55<br />.C:00f5   48         PHA<br />.C:00f6   00         BRK<br /><br />r PC=00f0<br /><br />r<br />  ADDR AC XR YR SP 00 01 NV-BDIZC LIN CYC<br />.;00f0 00 00 0a f3 2f 37 00100010 000 001<br /><br />z<br /><br />** Monitor 000 003<br />.C:00f0   38         SEC<br />z<br /><br />** Monitor 000 005<br />.C:00f1   A9 AA      LDA #$AA<br />z<br /><br />** Monitor 000 007<br />.C:00f3   6B 55      ARR #$55<br />z<br /><br />** Monitor 000 009<br />.C:00f5   48         PHA<br />r<br />  ADDR AC XR YR SP 00 01 NV-BDIZC LIN CYC<br />.;00f5 80 00 0a f3 2f 37 10100000 000 009<br /></div><br /><br />We get a value of $80 in the accumulator, doing the &amp;.<br /><br />VICE is correct, Visual 6502 wrong? Or the other way around?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6116">Emu6502Writer</a> — Sun Aug 25, 2013 5:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Emu6502Writer]]></name></author>
<updated>2013-08-25T00:41:58-07:00</updated>
<published>2013-08-25T00:41:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117043#p117043</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117043#p117043"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117043#p117043"><![CDATA[
Seems like you're in good company with the decision of including the &amp;, the emus I checked out all do it like that...<br /><br />Supposedly the SAX instruction gets its &amp; behavior from the bus conflict you're describing, and Visual 6502 certainly does the &amp; for that one.<br /><br />I linked some source of VICE / Versatile Commodore Emulator in my original post, so it seems this is not 2A03 specific. That code seems to do the &amp;s as described.<br /><br />I wonder if this is worth asking somebody from the Visual 6502 project about? From everything I read on their wiki I'd expect perfect emulation of these opcodes with only XAA $8B / LAX $AB depending on analog behavior they do not capture in their simulation model. I'd first need to be really sure the actual hardware differs from what I get from Visual 6502 <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6116">Emu6502Writer</a> — Sun Aug 25, 2013 12:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-08-25T00:05:31-07:00</updated>
<published>2013-08-25T00:05:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117037#p117037</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117037#p117037"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117037#p117037"><![CDATA[
<div class="quotetitle">Emu6502Writer wrote:</div><div class="quotecontent"><br />I know very little about these sorts of analog effects, but since Visual 6502 seems to get the SAX right I expected it would get ANC/ALR/ARR right as well.<br /></div><br /><br />For a high-level overview, it has to do with a line being driven to 0 and 1 simultaneously (i.e., having power applied to it and also being sunk to ground). In NMOS, which is the transistor technology used for the 6502 (in classic systems at least), a 0 tends to &quot;win&quot; in such situations, which is why many of the unofficial instructions get AND behavior (since a 1 will only survive if the other input is also a 1).<br /><br />I remember Visual 6502 getting some other unofficial instructions with bus conflicts right though, so not sure what's going on. Could be something NES-specific related to removal of decimal mode I guess.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Sun Aug 25, 2013 12:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Emu6502Writer]]></name></author>
<updated>2013-08-24T23:58:23-07:00</updated>
<published>2013-08-24T23:58:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117036#p117036</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117036#p117036"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117036#p117036"><![CDATA[
Yeah, the CMOS version should be very different from what's in the NES/C64 etc. regarding those opcodes. Before starting to implement the last few illegal opcodes I wrote a short series of tests. It assembles to around 200 bytes and pushes the results of each test on the stack. Not sure if it's a good test, it was based on my initial understanding of what these opcodes are supposed to do and tries out cases that are supposed to set a range of flags and test some edge cases. I'd love to know what a correct stack dump for that program looks like, or even just what the correct result for the 4 and 5 byte snippets from my original post is.<br /><br />I'm really quite surprised by getting told that Visual 6502 is likely to not get ANC/ALR/ARR right. Could somebody that actually used these on real 6502 hardware chime in on the whole skipping/doing '&amp; Immediate' thing?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6116">Emu6502Writer</a> — Sat Aug 24, 2013 11:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-08-24T23:58:01-07:00</updated>
<published>2013-08-24T23:58:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117035#p117035</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117035#p117035"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117035#p117035"><![CDATA[
For what it's worth, I set the status flags based on the &amp; result for those instructions and pass blargg's instr_test-v4. Haven't looked at how comprehensively it tests those instructions though, but it seems to be a more comprehensive test than nestest overall at least.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Sat Aug 24, 2013 11:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miker00lz]]></name></author>
<updated>2013-08-24T15:37:55-07:00</updated>
<published>2013-08-24T15:37:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117014#p117014</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117014#p117014"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117014#p117014"><![CDATA[
<div class="quotetitle">Emu6502Writer wrote:</div><div class="quotecontent"><br />I'd expect some deficiencies only with the truly unstable XAA $8B / LAX $AB, but here they make it really sound like you'd get quite accurate emulation:<br /><br /><!-- m --><a class="postlink" href="http://visual6502.org/wiki/index.php?title=6502_all_256_Opcodes">http://visual6502.org/wiki/index.php?ti ... 56_Opcodes</a><!-- m --><br />&quot;The transistor-level emulation seems to be able to successfully emulate illegal opcodes as well,&quot;<br /><br />I was hoping I could avoid messing with the actual HW and Visual 6502 / 2A03 would be enough to settle everything that pops up. So I guess the behavior of ANC/ALR/ARR is not a well-known &amp; settled issue? I must be like number 10000 writing an emulator for a 6502 based machine <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><br /><br />Getting a C64 or an NES shouldn't be too expensive / difficult, but then I'd probably need to get some extra development hardware, serial cables, cartridges, whatever. What do you think is the easiest way to get a 6502 platform where I can do some testing? Any volunteers wanting to run some test code?<br /></div><br /><br />I could poke some assembly code into my Apple //e. Just don't make it too long please! It's slow to input this stuff, but you can do it right from the built-in monitor ROM or BASIC by typing in the hex values and addresses, then jump to it. Speaking of the Apple, that might be the ideal machine to buy if you wanted to do a lot of 6502 testing yourself. They are dirt cheap. Hell, I got mine for free with two boxes of games and programs via freecycle.<br /><br />EDIT: Nevermind, I just remembered the //e has a 65C02 instead of the 6502. I think there is a PHD where the original 6502 had ANC. You could still get a regular older Apple ][ if you wanted to test.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4572">miker00lz</a> — Sat Aug 24, 2013 3:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Emu6502Writer]]></name></author>
<updated>2013-08-24T14:51:35-07:00</updated>
<published>2013-08-24T14:51:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117011#p117011</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117011#p117011"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117011#p117011"><![CDATA[
I'd expect some deficiencies only with the truly unstable XAA $8B / LAX $AB, but here they make it really sound like you'd get quite accurate emulation:<br /><br /><!-- m --><a class="postlink" href="http://visual6502.org/wiki/index.php?title=6502_all_256_Opcodes">http://visual6502.org/wiki/index.php?ti ... 56_Opcodes</a><!-- m --><br />&quot;The transistor-level emulation seems to be able to successfully emulate illegal opcodes as well,&quot;<br /><br />I was hoping I could avoid messing with the actual HW and Visual 6502 / 2A03 would be enough to settle everything that pops up. So I guess the behavior of ANC/ALR/ARR is not a well-known &amp; settled issue? I must be like number 10000 writing an emulator for a 6502 based machine <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><br /><br />Getting a C64 or an NES shouldn't be too expensive / difficult, but then I'd probably need to get some extra development hardware, serial cables, cartridges, whatever. What do you think is the easiest way to get a 6502 platform where I can do some testing? Any volunteers wanting to run some test code?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6116">Emu6502Writer</a> — Sat Aug 24, 2013 2:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-08-24T13:35:58-07:00</updated>
<published>2013-08-24T13:35:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117006#p117006</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117006#p117006"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117006#p117006"><![CDATA[
There are other 6502 computers, especially if you're interested in emulating the entire MOS Technology part. Does anyone you know have a Commodore 64, Apple II/II+/IIe (not the IIGS, IIc, or platinum IIe), or Atari 800?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Aug 24, 2013 1:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Emu6502Writer]]></name></author>
<updated>2013-08-24T13:24:15-07:00</updated>
<published>2013-08-24T13:24:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117004#p117004</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117004#p117004"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117004#p117004"><![CDATA[
Ok, fascinating! I'm trying to implement a full NMOS 6502 first and then later disable the BCD stuff when I start with the PPU.<br /><br />Quoting <!-- m --><a class="postlink" href="http://www.viceteam.org/plain/64doc.txt">http://www.viceteam.org/plain/64doc.txt</a><!-- m -->:<br /><br />&quot;Many undocumented commands do not use AND between registers, the CPU<br />just throws the bytes to a bus simultaneously and lets the<br />open-collector drivers perform the AND. I.e. the command called 'SAX',<br />which is in the STORE section (opcodes $A0...$BF), stores the result<br />of (A &amp; X) by this way.&quot;<br /><br />I know very little about these sorts of analog effects, but since Visual 6502 seems to get the SAX right I expected it would get ANC/ALR/ARR right as well.<br /><br />I unfortunately don't have access to a NES / PowerPak / composite input display / etc. Is there any other way I can test this and make sure I got these instructions right? I don't know of any comprehensive test for these instructions or anything that would have a reference trace available.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6116">Emu6502Writer</a> — Sat Aug 24, 2013 1:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-08-24T12:40:42-07:00</updated>
<published>2013-08-24T12:40:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117001#p117001</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117001#p117001"/>
<title type="html"><![CDATA[Re: Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=117001#p117001"><![CDATA[
I imagine that the unofficial instructions with #imm addressing mode depend on analog effects that Visual 6502 doesn't emulate. Anything on the same row of the &quot;CPU unoficial instructions&quot; chart&quot; as ADC, SBC, or possibly CMP is especially difficult because bits 0 and 4 in the adder are unaffected by decimal correction and thus run through a shorter data path than the other bits. Most of the decimal circuitry is still in the 2A03; the enable lines were just cut to work around the patent.<br /><br />Try making some tests and running them on an NES. But even that might be difficult, as some of these instructions appear to depend on what's put on the data bus during the internal operation cycles, and the PowerPak's open bus behavior has been seen to differ from that of a donor as shown by <a href="http://forums.nesdev.com/viewtopic.php?p=28300#p28300" class="postlink">Mindscape's controller reading subroutine</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Aug 24, 2013 12:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Emu6502Writer]]></name></author>
<updated>2013-08-24T11:27:48-07:00</updated>
<published>2013-08-24T11:27:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=116998#p116998</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=116998#p116998"/>
<title type="html"><![CDATA[Illegal Instructions doing (A &amp; Immediate), ANC/ALR/ARR/..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10417&amp;p=116998#p116998"><![CDATA[
I'm currently implementing the last few illegals in my emulator, already passing the functional 6502 suite and NESTest. But I'm having a problem with ANC ($0B/$02), ALR ($4B) and ARR ($6B).<br /><br />ANC is described in multiple references (<!-- m --><a class="postlink" href="http://www.oxyron.de/html/opcodes02.html">http://www.oxyron.de/html/opcodes02.html</a><!-- m -->, <!-- m --><a class="postlink" href="http://www.ataripreservation.org/websites/freddy.offenga/illopc31.txt">http://www.ataripreservation.org/websit ... lopc31.txt</a><!-- m -->) to set the SR based on (A &amp; Immediate). In my tests with Visual 6502 I find it does not do that. It seems to completely ignore the immediate value and just set the flags based on A. Same for ALR - I perfectly match Visual 6502 as soon as I remove the &amp; and just ignore the immediate operand. Exact same story for ARR.<br /><br />Looking at other emulators (i.e. <!-- m --><a class="postlink" href="http://sourceforge.net/p/vice-emu/code/27740/tree/trunk/vice/src/6510core.c#l2075">http://sourceforge.net/p/vice-emu/code/ ... re.c#l2075</a><!-- m -->) it's pretty clear they actually do the and. I don't see how this could work, assuming Visual 6502 to be the ground truth here.<br /><br />Now if we assume that ANC sets the SR flags based on (A &amp; Immediate), shouldn't the following code produce<br /><br />LDA #$FF<br />ANC #$00<br /><br />a set zero flag, and no negative/carry? But it doesn't. It just sets the flags based on $FF, not doing the &amp;. I have a dozen or so test cases for ANC, ALR and ARR, and they all show that in Visual 6502 the immediate value is completely ignored and no &amp; is performed.<br /><br />Another example:<br /><br />SEC<br />LDA #$AA<br />ARR #$55<br /><br />After the &amp; we should have a value of 0, and the ROR with set carry should give $80. But it doesn't. There's no &amp; being done, the Immediate operand completely ignored and ROR is done on $AA, giving $D5.<br /><br />So what's the deal here? Is every emulator and opcode reference I looked at wrong, Visual 6502 not correct, or, more likely, I'm just completely missing something here?<br /><br />Thanks!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6116">Emu6502Writer</a> — Sat Aug 24, 2013 11:27 am</p><hr />
]]></content>
</entry>
</feed>