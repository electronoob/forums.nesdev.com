<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Programming languages behind games</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Programming languages behind games</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12314">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12314</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jan 30, 2015 3:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know this has probably been discussed before, but I'd like to know about what programming languages were used to make the commercially available computer games (not only NES, but all generations).<br /><br />It is a well known fact that different programming languages were designed for different tasks, and are unsuited or unpractical for other tasks.<br /><br />I know that the &quot;mainstream&quot; languages were first assembly, then C and slowly moved to C++. However all three of those languages has plenty of inconvenients. 'C' was designed for operating system programming, and is in fact not very well suited for other things (such as games), despite the fact it is used in everything because of a snowball effect that could have happened to any other of it's competitors. 'C++' was designed to remedy for C's shortcomings, but comes as a bloated huge pile of backwards compatibility s***t that is barely manageable.<br /><br />So my question is : Is there any accurate sources stating in which language some popular games were developed ? That'd be especially interesting if they were not developed in a language of the 'C' family, however any accurate source in regard to the 'C' family would still be interesting too.<br /><br />Were some games programmed in FORTH, ADA, Pascal, .... ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Fri Jan 30, 2015 6:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I thought this was interesting: <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/Game_Oriented_Assembly_Lisp">http://en.wikipedia.org/wiki/Game_Orien ... embly_Lisp</a><!-- m --> (LISP used for games like <a href="http://en.wikipedia.org/wiki/Jak_and_Daxter" class="postlink">Jak and Daxter</a>.)<br /><br />I don't really 'get' LISP, or what advantages there could be here, but still interesting anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Jan 30, 2015 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">'C++' was designed to remedy for C's shortcomings, but comes as a bloated huge pile of backwards compatibility s***t that is barely manageable.</div><br />C++ was originally just a quick attempt to add OOP to C (in fact, it was literally just C with the addition of classes). It escalated from there until it turned into the current mess.<br /><br />That said: Pascal was extremely common for making games on PC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 30, 2015 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Xbox Live Indie Games for Xbox 360 are written in C# with the XNA framework. Every single one of them. The use of verifiably type-safe CIL compatible with the .NET Compact Framework is a platform requirement, and that rules out effectively every language that isn't C#. Standard C++ compiled with C++/CLI isn't verifiably type-safe, and IronPython and other DLR languages use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Emit</tt> that isn't in the Compact Framework.<br /><br /><a href="http://vadim.oversigma.com/Tetris.htm" class="postlink"><em>Tetris</em> was written in Pascal</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 30, 2015 9:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The games I've worked on professionally have all been C++. Usually several features of C++ are forbidden or disabled, like exceptions or multiple inheritance; often the code is mostly c-like. Very occasionally small routines will be written in assembly for optimization, though the rise of &quot;compiler intrinsics&quot; have made it easier to do assembly-like optimizations that weave seamlessly into C++ code, reducing the need for pure assembly optimization quite a lot.<br /><br />For the most part, game development using other languages is rare and requires development of a unique programming culture at that specific company. Most of the places that do it have a very &quot;do it yourself&quot; approach, and don't use ready-made middleware solutions for much of anything. The vast majority of game development middleware is C++ based, for obvious reasons. (Off the top of my head, I've used: Unreal, Gamebryo, Havok, Scaleform, Miles Audio, Wwise, Beast, FaceFX, SpeedTree...)<br /><br />In addition to this, a lot of games have some sort of scripting language used to customize behaviours of various things where quick turnaround and iteration is needed (especially for use by designers, rather than programmers). I've worked on games that used Lua, Python, and Pawn, and heard of a few others. It's not uncommon for custom scripting languages to be created, as well. Often &quot;functional&quot; style languages are used for scripting (e.g. Haskell), partly because you can represent funcional programming with flowchart-style visual boxes connected to each other; I've seen many game scripting tools designed this way around &quot;visual coding&quot;.<br /><br />Proprietary game tools are a whole other story. Here it's whatever gets the job done. Shell scripts, C#, Visual Basic, Python, etc...<br /><br />Shader programming for graphics cards is generally done in some high level shader language (HLSL, GLSL, CG, etc.) and very occasionally assembly language (GPU-specific).<br /><br />Examples I know of unusual game programming languages<br /><ul><li><a href="http://community.eveonline.com/news/dev-blogs/stackless-python-2.7/" class="postlink">Eve Online</a> is primarily written in a proprietary form of <a href="http://stackless.com/" class="postlink">Stackless Python</a>, with a few core components written in C++ (and of course Stackless itself is written in C).</li><li><a href="http://uk.pc.gamespy.com/pc/spore/853810p1.html" class="postlink">Spore</a> used a modified form of <a href="http://puredata.info/" class="postlink">Pure Data</a> to write its procedural music generators.</li><li>From what I recall, <a href="http://www.insomniacgames.com/" class="postlink">Insomniac Games</a> uses a proprietary high-level assembly language, and large portions of their games are written in assembly, though they use C++ as well. This may have changed a bit in the 5 years since I heard about it, though. (Edit: found a <a href="https://www.youtube.com/watch?v=rX0ItVEVjHc" class="postlink">recent Mike Acton talk</a> where he says they're now &quot;70% C++&quot; and 30% other stuff, including assembly. Years earlier he had suggested in a different talk that they used much more assembly.)</li><li><a href="https://minecraft.net/" class="postlink">Minecraft</a> was written in Java, though some of its ports were C++ based.</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 30, 2015 10:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, as the commercial scale of games gets smaller (or nonexistent) there appears to be a lot more diversity to the language used. I could probably spend all day digging up examples here:<br /><ul><li>The Python-based <a href="http://www.renpy.org/" class="postlink">RenPy</a> used for <a href="http://hateplus.com/" class="postlink">Hate Plus</a> and lots of other visual novels.</li><li><a href="http://www.adobe.com/devnet/actionscript.html" class="postlink">Actionscript</a> for <a href="http://www.kongregate.com/games/juicybeast/burrito-bison-revenge" class="postlink">browser games</a> made in Flash.</li><li><a href="http://haxe.org/" class="postlink">Haxe</a> which targets multiple platforms, including Flash, used in <a href="http://papersplea.se/" class="postlink">Papers, Please</a> and many broswer games.</li><li><a href="https://www.yoyogames.com/studio" class="postlink">GameMaker</a> is widely used, and the bulk of the work is done in its proprietary scripting language.</li><li>The <a href="https://msxna.codeplex.com/" class="postlink">Microsoft XNA</a> platform runs C#.</li><li><a href="http://www.java4k.com" class="postlink">Java4k</a> challenges people to write Java games that compile to 4 kilobytes or less.</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 30, 2015 10:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="https://en.wikipedia.org/wiki/RollerCoaster_Tycoon#Development" class="postlink">Roller Coaster Tycoon</a> was known for being a late holdout, written entirely in assembly language and released in 1999.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Jan 30, 2015 12:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Talking about the Apple IIGS specifically, and from my perspective/experience:<br /><br /><ul><li>Games on the Apple IIGS were done in either assembly or a combination of something else and assembly.  The most common tools used were ORCA/M (assembly) and ORCA/C (C), both by <a href="https://en.wikipedia.org/wiki/The_Byte_Works" class="postlink">The Byte Works</a>; others preferred assemblers like <a href="https://en.wikipedia.org/wiki/Merlin_%28assembler%29" class="postlink">Merlin 16</a>.  Others were done in <a href="https://en.wikipedia.org/wiki/HyperCard" class="postlink">HyperCard</a>.  I'm sure some were done in Pascal but I don't know of any off the top of my head.  And yes, there were some which were even done in Applesoft BASIC (either using classic LORES or HIRES graphics, which were more along the lines of what the non-IIGS Apple II models were used to, ex. <a href="https://www.youtube.com/watch?v=nKAlDUu7zko" class="postlink">Akalabeth</a>).</li><li>Graphics were done in a multitude of ways, but a lot of people preferred the graphics editor called <a href="http://www.whatisthe2gs.apple2.org.za/files/DreamGrafix/Manual/DreamGrafix-Manual.pdf" class="postlink">DreamGrafx</a> (PDF).</li><li>Music was done in a multitude of ways, but a lot of people preferred the sequencer/&quot;tracker&quot; called <a href="https://www.youtube.com/watch?v=7VYLwSv3lYc" class="postlink">SoundSmith</a>; alternates included <a href="http://www.brutaldeluxe.fr/documentation/synthlab/synthlab_usersmanual.pdf" class="postlink">SynthLab</a> (PDF), <a href="https://www.youtube.com/watch?v=gx1Wy8AQdZQ" class="postlink">NoiseTracker GS</a>, or <a href="https://en.wikipedia.org/wiki/Music_Construction_Set" class="postlink">Music Construction Set</a>.</li><li>Sample editing/recording (also ties into the music part, since the IIGS used an Ensoniq chip that played digital samples) had lots of programs (too many to list); recording required a dedicated sound card (Sonic Blaster, Audio Animator, and SoundMeister were usual; Sonic Blaster was the most common), where subtle bus noise during recordings was quite common.  Software filters for post-recording clean-up were very few (barring obvious ones like &quot;echo&quot;, &quot;reverb&quot;, etc.), and so owning a sound card which did all its recording/mixing in an external box (outside of the IIGS case) was highly preferred.</li><li>I should note: many of these programs were commercial, or shareware with hard expiries (meaning you could not use the product after N days), and piracy of commercial or shareware software on the IIGS was highly shunned (quite often if you were found doing this, you'd be ousted by peers and/or socially boycotted.  I remember this being the same way in the Macintosh days, and to some degree even today in the OS X world).</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jan 31, 2015 2:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Tetris was written in Pascal.</div><br />Thanks, that's exactly the kind of info I was looking for !<br /><br />Sounds like I should deep into some Pascal tutorial someday. Looks like the typing is much less painful than C-family, with all those {} [] which are annoying to reach on a swiss keyboard. (C-like syntax was obviously meant to be typed with american keyboards)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The games I've worked on professionally have all been C++. Usually several features of C++ are forbidden or disabled, like exceptions or multiple inheritance; often the code is mostly c-like.</div><br />Exceptions in C++ is still one of the few things I have *no* ideas how they could possibly translate into machine language. The problem is that if you want to avoid them, a huge part of the standard library becomes &quot;forbidden&quot; as well. You cannot use &quot;new&quot; and &quot;delete&quot;. Well that don't matter you'd tell me you still have malloc() and free(), but those won't work for objects, as they would leave them in a dangerous un-initialized state. Even if you initialize the object later with an '=' assignement, it's destructor might be called on an uninitialised object, and that's hell. The only viable option would be to re-define &quot;new&quot; and &quot;delete&quot; for everything, but I never used this functionality of C++ personally, because I'd rather live with the exceptions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't really 'get' LISP, or what advantages there could be here</div><br />The advantage is simple parsing. Using forward or reverse polish notation is much simpler to code than the &quot;normal&quot; inline notation. Reverse polish is the only one which can allow to get completely rid of (), but forwards polish is probably even much simpler to parse.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Jan 31, 2015 3:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Exceptions in C++ is still one of the few things I have *no* ideas how they could possibly translate into machine language.</div><br />If you're ever curious, most C++ compilers have options to dump an assembly listing during the compile process. It's a great way to learn what's really going on. (Exceptions can do some really, really ugly things though. Might be easier to understand the assembly if you looked up an explanation of the implementation details for your compiler.)<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The problem is that if you want to avoid them, a huge part of the standard library becomes &quot;forbidden&quot; as well. You cannot use &quot;new&quot; and &quot;delete&quot;. Well that don't matter you'd tell me you still have malloc() and free(), but those won't work for objects, as they would leave them in a dangerous un-initialized state. Even if you initialize the object later with an '=' assignement, it's destructor might be called on an uninitialised object, and that's hell. The only viable option would be to re-define &quot;new&quot; and &quot;delete&quot; for everything, but I never used this functionality of C++ personally, because I'd rather live with the exceptions.</div><br />Well, new and delete were both part of the C++ language before it had exceptions. For instance, new is specified to return a null pointer if exceptions are disabled. There are a lot of important caveats to having no exceptions, like how bad an idea it is to use new inside a constructor without them. There's many common C++ programming patterns that you just wouldn't use without exceptions. I think almost everything in the standard library has an exception-free version, though. STL is frequently forbidden at game companies, but the reasons for that go far beyond exceptions.<br /><br />I think every C++ professional game project I've worked on has defined custom allocators to use with new and delete, though there are other alternatives. You mentioned malloc/free, which are very much usable for C++ allocations in conjunction with <a href="http://www.parashift.com/c++-faq/placement-new.html" class="postlink">placement new</a>. I don't think there's much reason to use placement new + malloc instead of just nothrow new, though. I'm just pointing out that you can do it. A more useful thing to do with placement new might be to construct object in a statically allocated block of memory, for example.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jan 31, 2015 4:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">If you're ever curious, most C++ compilers have options to dump an assembly listing during the compile process. It's a great way to learn what's really going on. (Exceptions can do some really, really ugly things though. Might be easier to understand the assembly if you looked up an explanation of the implementation details for your compiler.)</div><br />Exept I don't &quot;speak&quot; x86 at all. I could check the output of arm-gcc, it's true, but it'd be somewhat different.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Sat Jan 31, 2015 5:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Exceptions in C++ is still one of the few things I have *no* ideas how they could possibly translate into machine language.</div><br />I know it's not uncommon to implement them as setjmp/longjmp internally (oh, the irony).<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The problem is that if you want to avoid them, a huge part of the standard library becomes &quot;forbidden&quot; as well. You cannot use &quot;new&quot; and &quot;delete&quot;.</div><br />They're operands that can be overriden, so just change their behavior to not use exceptions.<br /><br />Mind you, in practice these days if you can't use exceptions then you already wouldn't want to use (if you even can) the native new/delete and would be overriding them in the first place (usually making them use your own memory manager). This is what the EASTL does. (EASTL = EA's version of the C++ standard library, because the default was too slow for use on consoles)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Jan 31, 2015 10:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know many games were written in Pascal, and many games were written in QBASIC. There are also several in assembly language for whatever computer it is designed for. C is probably also used, although BASIC does seem to be more well suited for writing computer games than C is.<br /><br />I think I may have seen one once written in Forth, but I don't know if that is common and I don't know if any are written in Ada. Writing computer games in SQL is probably even more rare if they exist at all.<br /><br />Some computer games use virtual machines and the interpreter is then included with the game.<br /><br />Several games that run on Synchronet are written in Javascript, although the client doesn't need to interpret Javascript since it is all server-side scripting.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Sun Feb 01, 2015 1:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">T Most of the places that do it have a very &quot;do it yourself&quot; approach, and don't use ready-made middleware solutions for much of anything. The vast majority of game development middleware is C++ based, for obvious reasons. (Off the top of my head, I've used: <strong>Unreal, </strong></div><br />Huh. I thought the code exposed to the user via the editor looked vaguely Java-ish more than C++ (in particular: object inheritance syntax), but it's been ages, so take with salt.<br /><br />Anyone else remember QuakeC?<br /><br /><div class="quotetitle"><a href="http://ski.ihoc.net/" class="postlink">The Most Officialest SkiFree Home Page</a> wrote:</div><div class="quotecontent">Ski for VAX/VMS [...] was written in Fortran, <br />[...]<br />I wrote SkiFree in C on my home computer, </div><br /><br />Also to think on: Maniac Mansion and subsequent games that used the SCUMM engine. (Script Creation Utility for Maniac Mansion). Though, was that an interpreted language...?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Feb 01, 2015 3:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent">(re: Unreal is C++) Huh. I thought the code exposed to the user via the editor looked vaguely Java-ish more than C++ (in particular: object inheritance syntax), but it's been ages, so take with salt.</div><br />UnrealScript is one of Unreal's scripting languages, and yes it does have some elements reminiscent of Java. Unreal itself is written in C++. If your user is a modder, probably they will only see UnrealScript. If your user is a game developer with a full license for the engine, they have the C++ code to work with, too.<br /><br />My experience with Unreal development has been to prototype as much as you can with UnrealScript, but ultimately you run into limitations of functionality or speed that can be solved by writing natively compiled code. Aside from migrating UnrealScript prototypes to more efficient C++ implementations, there are lots of custom changes and additions that a developer will usually want to make to the engine. A huge part of making the game has nothing to do with the kinds of stuff you do in UnrealScript.<br /><br />Though, for the programers on my team, a huge part of the motivation to prototype things in UnrealScript was simply to avoid the truly horrendous compile times Unreal had. A lot of tasks would have just been started and finished in C++ directly if we could have done faster testing/iteration that way.<br /><br />(I only have experience with UE3, by the way. I can't comment on UE4.)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>