<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SPC sound driver algorithm</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SPC sound driver algorithm</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10038">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10038</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pires</b> [ Sun Apr 21, 2013 2:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My first post in here, so first of all, hello everybody in SNESdev (and NESdev) forums, been loving your work here!<br />Since early this year I have been reading up on SNES development material and did not find any source that addressed this issue in layman terms. <br /><br />So, can anyone outline an algorithm for an SPC sound driver? How is the music data updated? How are the timers and counters used (never understood how the counters can be of any use if they are reset each time they are read)? And many other issues you feel necessary to be clear.<br /><br />My goal for now is to make music with SPC files to be read in standalone APU emulators like the plugin for winamp, so I am not concerned in matters of uploading data to the APU RAM, reading screen information, etc. I also don't care for conversion tools of MOD-&gt;SPC files as I understand they are somewhat limited and the only limitations I want to work with are the SNES APU's ones.<br /><br />Thanks in advance for all the attention guys

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sun Apr 21, 2013 2:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is IPL that offers standart data transfer algorithm. You use it to load any code first, then you can either reuse it load more code/data, or run your own communication code that could work better/faster. IPL is neither good or fast, but it is the only thing for initial upload.<br /><br />Timers could be needed to update sound state at given rate, say, 240 Hz. You do all update code when wait for timer being non-zero in a loop:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />&nbsp;lda {T0OT}<br />&nbsp;beq loop</div><br /><br />When it is zero, it'll reset to zero, which won't make any difference, when it is non-zero, it'll reset to zero, but your code will move on, and you also will have a value that indicates how many periods the timer is counted (in case your code took too long and ran longer than one period).<br /><br />SNES APU limitations are actually going far beyond XM/IT/conversion tools limitations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Apr 21, 2013 5:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Since the SPC700 CPU doesn't have any interrupts, timers are required for a stable timebase.<br /><br />Other than this you'd code it like any sound engine, except you only have the sound engine running, and nothing else. Having such a CPU entierely dedicated to sound is probably rather unique to the SNES (although I might be wrong).<br /><br />A typical sound engine will &quot;tick&quot; multiple channel on a fixed (real time) basis, and then upload the channel's data to the S-DSP regs, and wait for the next tick.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Apr 21, 2013 5:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Having such a CPU entierely dedicated to sound is probably rather unique to the SNES (although I might be wrong).</div><br />Genesis, Neo Geo, Jaguar, Dreamcast, Nintendo DS, Donkey Kong 3 machine...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sun Apr 21, 2013 5:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Like a thousand of arcade machines also had a dedicated sound CPU/MCU that controlled various sound chips or DSPs, so actually this is very common solution. That is not common is the SPC700 use. Although it seems it wasn't designed specifically for the SNES (but the DSP probably was), I can't recall any other gaming system that had it. Usually it would be something popular, like Z80.<br /><br />SPC700 is a pretty nice to work with, especially if you ignore the weird official mnemonics and use byuu's replacement, which makes it clear that the MCU is just a well improved 6502 descendant, so a lot of 6502/65816 knowledge easily applied to it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Apr 21, 2013 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Personally I'd use the &quot;weird&quot; mnemonics (whch are not weird at all, just different).<br />I think it makes it clearer you're programming the SPC and not a 6502 or anything like this. There is also many extra instructions like INCW or DJNZ which are not in the 6502.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Apr 21, 2013 8:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I think it makes it clearer you're programming the SPC and not a 6502 or anything like this.</div><br />Do you likewise use <a href="http://nocash.emubase.de/fullsnes.htm#cpuassemblerdirectivessyntax" class="postlink">nocash's 8086 style mnemonics</a> when programming 65816 to make it clearer that it's not a 6502?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pires</b> [ Sun Apr 21, 2013 1:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">There is IPL that offers standart data transfer algorithm. </div><br /><br />But so, if I'm compiling an insolated SPC just for pleasure of playing it in an APU emulator then I won't need to be concerned with the IPL, or?<br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">You do all update code when wait for timer being non-zero in a loop</div><br /><br />Right! So you would have you're own counter in the code to reach the desired number of periods of T2 counter for example. It seems pointless to have a 4 bit counter if you can't wait until it reaches your desired count, right?<br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">SNES APU limitations are actually going far beyond XM/IT/conversion tools limitations.</div><br /><br />Can you give me an example of this?<br /><br /><br />Thanks guys for your replys, keep them coming! I'm still expecting a nicely laid out algorithm to work with these so retro but wonderful music making machines. I will eventually come up with my own obviously, but you guys are geniuses and I still have a whole lot to read up on SNES and general assembly programming.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Apr 21, 2013 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But so, if I'm compiling an insolated SPC just for pleasure of playing it in an APU emulator then I won't need to be concerned with the IPL, or?</div><br />Correct. You can just disable it and use $200-$ffff as general purpose RAM (normally the IPL ROM sits at the very end of RAM).<br /><br />One thing you should be particularely careful when using the SPC is that you should always enable a key off one &quot;tick&quot; before a key on, on a particular channel.<br />If you don't do so, a sudden key on while a note was already playing will &quot;cut&quot; it immediately, causing a noticeable pop in the sound.<br /><br />This precaution is not required if the key on follows a period of silence where a note was already keyed off, but I just do it this way to be 100% sure all key ons are clean.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Apr 21, 2013 2:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For an SPC file, you don't need to concern yourself with the IPL loading at all.<br /><br />Point of counters is in case your code doesn't check often enough, this way it can know how many counts occurred. The hardware is well-designed in this regard. Though true, as you say, mostly it's just read continuously until it becomes 1.<br /><br />Included is some code I used to make a simple beep, though it's not complete, might still help with getting basic sound.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=561">beep_no_macros.asm.txt</a> [1.36 KiB]
			</span><br />
			<span class="gensmall">Downloaded 37 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Apr 22, 2013 2:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Pires wrote:</div><div class="quotecontent">Right! So you would have you're own counter in the code to reach the desired number of periods of T2 counter for example. It seems pointless to have a 4 bit counter if you can't wait until it reaches your desired count, right?</div><br />You don't have to use the counter. You can set up a required timer period and just go for one period. The counter is only needed if your code potentially could run longer than a period and you would want to compensate it somehow.<br /><br /><div class="quotetitle">Pires wrote:</div><div class="quotecontent"><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">SNES APU limitations are actually going far beyond XM/IT/conversion tools limitations.</div><br />Can you give me an example of this?</div><br />BRR encoding, samples has to be looped at 16 samples granularity, and only forward looping is possible. It is almost worse than even MOD, and sure far away from XM/IT.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pires</b> [ Mon Apr 22, 2013 5:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">You don't have to use the counter. You can set up a required timer period and just go for one period. The counter is only needed if your code potentially could run longer than a period and you would want to compensate it somehow.</div><br /><br />Exactly, thanks, I think I understand now fully how the timers work. So, the development manual must be wrong in saying the maximum value you can write to the timer registers is 01H!? <br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">BRR encoding, samples has to be looped at 16 samples granularity, and only forward looping is possible. It is almost worse than even MOD, and sure far away from XM/IT.</div><br /><br />Sure, but if you then convert a MOD to an SPC file you are bound to respect the limitations of the SNES APU, right?<br /><br />Thanks bregalad for the tip and blargg for the test code, will give it a go as soon as I have a proper testing environment set up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Apr 22, 2013 7:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">BRR encoding, samples has to be looped at 16 samples granularity, and only forward looping is possible. It is almost worse than even MOD, and sure far away from XM/IT.</div><br />Resampling can fix the 16 samples granularity problem, and you can simulate pingpong looping by doubling the size of the sample.<br /><br />That being said a lot of things are possible on SPC which are not possible on MOD (or even XM/IT) like pitch modulation, noise and echo. As far I know I don't think MOD supports automatic volume enveloppe.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 22, 2013 7:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Double the size of your samples and they won't all fit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Apr 22, 2013 8:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC sound driver algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The whole point of the pingpong looping is to save room.<br /><br />As for the granularity and resampling, my own experience with this was pretty tiresome, all I can tell is don't expect it'll solve all the problems easily. It is damn difficult to make a seamless loop of anything more complex than a simple waveform on SPC. In general, all the clicky issues on the SPC, such as sample looping and key off, although may seem to have a simple solution, aren't that easily solvable in practice.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>