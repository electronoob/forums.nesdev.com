<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=3114" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-03-28T23:27:16-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=3114</id>
<entry>
<author><name><![CDATA[Mednafen]]></name></author>
<updated>2007-03-28T23:27:16-07:00</updated>
<published>2007-03-28T23:27:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22689#p22689</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22689#p22689"/>
<title type="html"><![CDATA[Save state rewinding compression.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22689#p22689"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />What about a filter to XOR a previous state with the next one, then just RLE the difference?<br /></div><br /><br />I just implemented an XOR filter(going backwards in time, of course) as a test, and it greatly improved the compression ratio, and moderately improved speed.<br /><br />Simple RLE after an XOR filter would probably be fine for the NES(and this is nesdev after all, right <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" />), but a more complex compressor would be called for for other systems, that have DMA or stream large amounts of data(like from a CD).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1026">Mednafen</a> — Wed Mar 28, 2007 11:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2007-03-28T11:50:37-07:00</updated>
<published>2007-03-28T11:50:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22666#p22666</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22666#p22666"/>
<title type="html"><![CDATA[Save state rewinding compression.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22666#p22666"><![CDATA[
What about a filter to XOR a previous state with the next one, then just RLE the difference?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Wed Mar 28, 2007 11:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-03-28T11:00:22-07:00</updated>
<published>2007-03-28T11:00:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22664#p22664</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22664#p22664"/>
<title type="html"><![CDATA[Save state rewinding compression.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22664#p22664"><![CDATA[
I second the recommendation for these if you're keeping lots of save states in memory at once. A way to reduce their impact is to implement a simple paging algorithm with keeps the most recently accessed save state(s) uncompressed, and only recompress it when it's changed and a new save state is being accessed. I've used this approach and it hardly impacts performance, even when seeking around.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Mar 28, 2007 11:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Mednafen]]></name></author>
<updated>2007-03-28T07:37:16-07:00</updated>
<published>2007-03-28T07:37:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22661#p22661</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22661#p22661"/>
<title type="html"><![CDATA[Save state rewinding compression.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3114&amp;p=22661#p22661"><![CDATA[
I don't think these are mentioned elsewhere on this forum, and they are fast enough to be used real-time(as opposed to zlib which is slow!).<br /><br /><!-- m --><a class="postlink" href="http://www.oberhumer.com/opensource/lzo/#minilzo">http://www.oberhumer.com/opensource/lzo/#minilzo</a><!-- m --><br /><br /><!-- m --><a class="postlink" href="http://www.quicklz.com/">http://www.quicklz.com/</a><!-- m --><br /><br />QuickLZ is much newer than MiniLZO, and considerably faster, at least on little-endian platforms that can resolve unaligned memory accesses in hardware(x86, x86_64) correctly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1026">Mednafen</a> — Wed Mar 28, 2007 7:37 am</p><hr />
]]></content>
</entry>
</feed>