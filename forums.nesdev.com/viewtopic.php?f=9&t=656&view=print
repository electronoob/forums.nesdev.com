<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Rare's &quot;Stop-n-swop&quot; technique on NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Rare's &quot;Stop-n-swop&quot; technique on NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=656">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=656</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Oct 15, 2005 5:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Rare's &quot;Stop-n-swop&quot; technique on NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Taking a cue from <a href="http://www.rare-extreme.com/?section=tourofrare&amp;page=stop_n_swop.html" class="postlink">Rare's rumored "stop-n-swop" cartridge system</a> for N64, where you swap game cartridges while the system is powered, I peformed the CIC disabling modification on my NES. I had the idea to copy my RS-232-based loader into low-memory from my devcart, eject the cart <em>with the power still on</em>, then insert a normal game cartridge, for the purpose of getting access to its mapper, etc.
<br />
<br />The idea works (though it takes several tries until I get the game in without my code crashing as I insert it, much to the dismay of my NES cartridge connector). I've been able to dump several MMC1 and UNROM games and get a checksum match with dumps on the net, save and restore battery RAM to my PC, and do some reverse-engineering of the MMC5 in Castlevania 3. I plan on doing more reverse-engineering of the MMC1, MMC3, and MMC5. It would be neat to figure out how to enable MMC5 sound (I see several empty pads on my CV3 board for various resistors, perhaps necessary for digital-to-analog conversion).
<br />
<br />I was also able to dump my US Game Genie ROM (it matches what's on the main nesdev page). I should also be able to access its custom hardware for reverse-engineering, in case anyone's interested.
<br />
<br />The final thing I want to try is restoring a complete snapshot from my emulator into the actual game. This will be tricky since the code will ultimately have to erase itself. I'm hoping I can find half a page of bytes in a given snapshot that all have the same value. Combined with the movie replayer I made a few days ago, this could allow recording of movies on an emulator and playback on a real NES from any point, not just the beginning. Since my SNES devcart is almost the same, I was thinking of trying something similar on the SNES.
<br />
<br />This might help me bootstrap to a better devcart. I was thinking of making one with flash RAM where the NES does the writing itself, using the serial interface with the PC. With this I could program the initial devcart, and easily program more for other people.
<br />
<br />All this started with Zelda board with a single trace rerouted so that the battery RAM is selected in place of the ROM... :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>drk421</b> [ Sat Oct 15, 2005 10:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />blargg,
<br />do you have a machine language monitor for your RS-232 based comm?
<br />
<br />Are you doing RS-232 in software, or using a UART?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Oct 15, 2005 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I haven't written any kind of monitor yet. The only resident code is the loader, which I usually jump to at the end of any test code so it's ready to re-load. It's so easy to run new code that I just keep tweaking the asm code and re-running it. I was thinking of writing a small driver that allows the PC to request memory reads and writes, to allow interactive testing.
<br />
<br />As for serial, it's in software running at 57.6 kbps. The only hardware is a MAX-232 level-shifter connected to the second joypad port, using the strobe for send and D0 to receive. It uses a simple checksum when loading code, and it hasn't ever gotten a bad checksum since I got it working over a year ago.
<br />
<br />I've done more dumps and tests and it usually doesn't crash when swapping most cartridges. I wrote a small program that generates a tone with $4011 until you press a button on the joypad, to tell if it's crashed while swapping. I've been able to put a cartridge in and jiggle it, pop it up and down, etc. without it crashing.
<br />
<br />This technique should work with any kind of devcart, so it's a viable means of dumping any NES game without any elaborate copy hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>drk421</b> [ Sat Oct 15, 2005 1:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As a test for my UART, I ported Woz's Apple 1 monitor (256 bytes!).
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />;Wozniak Apple1 Monitor<br />;written by Wozniak in 1975<br /><br />&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.ineschr 0<br />&nbsp; &nbsp;.inesmir 1<br />&nbsp; &nbsp;.inesmap 1<br /><br />&nbsp; &nbsp;.bank 1<br /><br />&nbsp; &nbsp;.org $FE00&nbsp; &nbsp;; Rom Start<br /><br />;******* Hardware Variables ************<br /><br />UART = $5400<br />UARTLCR = $5403<br />UARTLSR = $5405<br /><br />;********* Zero Page Variables *********<br /><br />TEMP = $54<br />XAML = $24<br />XAMH = $25<br />STL&nbsp; = $26<br />STH&nbsp; = $27<br />L&nbsp; &nbsp; = $28<br />H&nbsp; &nbsp; = $29<br />YSAV = $2A<br />MODE = $2B<br /><br />;******** $200-$27F Text Buffer *********<br /><br />IN = $0200<br /><br />;******** Listing *************<br /><br /><br />Init:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Clear decimal arithmetic mode.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Clear Interrupt disable bit.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LDX #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDY #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$00<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;STA $2000<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;STA $2001<br /><br />UARTInit:&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$80<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA UARTLCR<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$0C<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA UART<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA $5401<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$03<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA UARTLCR<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA $5401<br />&nbsp; &nbsp;&nbsp; &nbsp;STA $5404<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDY #$7F&nbsp; &nbsp; &nbsp; &nbsp; ;Mask for DSP data direction register<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;STY UART&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Set it up.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$A7&nbsp; &nbsp; &nbsp; &nbsp; ;KBD and DSP control register mask.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;STA KBDCR&nbsp; &nbsp; &nbsp; &nbsp;;Enable interrupts, set CA1, CB1, for<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;STA DSPCR&nbsp; &nbsp; &nbsp; &nbsp;;postitive edge sense/output mode.<br /><br />NOTCR:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$08&nbsp; &nbsp; &nbsp; &nbsp; ;&quot;&lt;-&quot;?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ BACKSPACE&nbsp; &nbsp;;Yes.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$1B&nbsp; &nbsp; &nbsp; &nbsp; ;ESC?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ ESCAPE&nbsp; &nbsp; &nbsp; ;Yes.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Advance text index.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BPL NEXTCHAR&nbsp; &nbsp; ;Auto ESC if &gt; 127.<br /><br />ESCAPE:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$5C&nbsp; &nbsp; &nbsp; &nbsp; ;&quot;\&quot;.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR ECHO&nbsp; &nbsp; &nbsp; &nbsp; ;Output it.<br /><br />GETLINE:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$0D&nbsp; &nbsp; &nbsp; &nbsp; ;CR.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR ECHO&nbsp; &nbsp;;Output it.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDY #$01&nbsp; &nbsp; &nbsp; &nbsp; ;Initiallize text index.<br /><br />BACKSPACE:&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DEY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Backup text index.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BMI GETLINE&nbsp; &nbsp; &nbsp;;Beyond start of line, reinitialize<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;LDA KBDCR&nbsp; &nbsp; &nbsp; &nbsp;;Key ready?<br /><br />NEXTCHAR:&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA UARTLSR<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AND #$01<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ NEXTCHAR&nbsp; &nbsp; ;Loop until ready.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA UART&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Load character. B7 shoul be '1'<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; ;STA UART<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA IN,Y&nbsp; &nbsp; &nbsp; &nbsp; ;Add to text buffer.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR ECHO&nbsp; &nbsp; &nbsp; &nbsp; ;Display character.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$0D&nbsp; &nbsp; &nbsp; &nbsp; ;CR?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BNE NOTCR&nbsp; &nbsp; &nbsp; &nbsp;;No.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDY #$FF&nbsp; &nbsp; &nbsp; &nbsp; ;Reset text index.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$00&nbsp; &nbsp; &nbsp; &nbsp; ;For XAM mode.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TAX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;0-&gt;X.<br /><br />SETSTOR:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ASL A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Leaves $7B if setting STOR mode.<br /><br />SETMODE:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA &lt;MODE&nbsp; &nbsp; &nbsp; &nbsp; ;$00 = XAM, $7B = STOR, $A3 = BLOK XAM<br /><br />BLSKIP:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Advance text index.<br /><br />NEXTITEM:&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA IN,Y&nbsp; &nbsp; &nbsp; &nbsp; ;Get character.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$0D&nbsp; &nbsp; &nbsp; &nbsp; ;CR?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ GETLINE&nbsp; &nbsp; &nbsp;;Yes, done this line.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$2E&nbsp; &nbsp; &nbsp; &nbsp; ;&quot;.&quot;?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BCC BLSKIP&nbsp; &nbsp; &nbsp; ;Skip delimiter.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ SETMODE&nbsp; &nbsp; &nbsp;;Set BLOCK XAM mode.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$3A&nbsp; &nbsp; &nbsp; &nbsp; ;&quot;:&quot;?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ SETSTOR&nbsp; &nbsp; &nbsp;;Yes, set STOR mode.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$52&nbsp; &nbsp; &nbsp; &nbsp; ;&quot;R&quot;?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ RUN&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Yes, run user program.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STX &lt;L&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;$00-&gt;L.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STX &lt;H&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;and H.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STY &lt;YSAV&nbsp; &nbsp; &nbsp; &nbsp; ;Save Y for comparison.<br /><br />NEXTHEX:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA IN,Y&nbsp; &nbsp; &nbsp; &nbsp; ;Get character for hex test.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EOR #$30&nbsp; &nbsp; &nbsp; &nbsp; ;Map digits to $0-9.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$0A&nbsp; &nbsp; &nbsp; &nbsp; ;Digit?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BCC DIG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Yes.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ADC #$88&nbsp; &nbsp; &nbsp; &nbsp; ;Map letter &quot;A&quot;-&quot;F&quot; to $FA-FF.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$FA&nbsp; &nbsp; &nbsp; &nbsp; ;Hex letter?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BCC NOTHEX&nbsp; &nbsp; &nbsp; ;No, character not hex.<br /><br />DIG:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ASL A<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ASL A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Hex digit to MSD of A.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ASL A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ASL A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDX #$04&nbsp; &nbsp; &nbsp; &nbsp; ;Shift count.<br /><br />HEXSHIFT:&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ASL A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Hex digit left, MSDB to carry.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ROL &lt;L&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Rotate into LSD.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ROL &lt;H&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Rotate into MSD's.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Done 4 shifts?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BNE HEXSHIFT&nbsp; &nbsp; ;No, loop.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Advance text index.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BNE NEXTHEX&nbsp; &nbsp; &nbsp;;Always taken. Check next character for hex.<br /><br />NOTHEX:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPY &lt;YSAV&nbsp; &nbsp; &nbsp; &nbsp; ;Check if L, H empty &#40;no hex digits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ ESCAPE&nbsp; &nbsp; &nbsp; ;Yes, generate ESC sequence.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BIT &lt;MODE&nbsp; &nbsp; &nbsp; &nbsp; ;Test MODE byte.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BVC NOTSTOR&nbsp; &nbsp; &nbsp;;B6 = 0 for STOR, 1 for XAM and BLOCK XAM<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &lt;L&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;LSD's of hex data.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA &#91;STL,X&#93;&nbsp; &nbsp; &nbsp;;Store at current 'store index'.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INC &lt;STL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Increment store index.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BNE NEXTITEM&nbsp; &nbsp; ;Get next item. &#40;no carry&#41;.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INC &lt;STH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Add carry to 'store index' high order.<br /><br />TONEXTITEM:&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP NEXTITEM&nbsp; &nbsp; ;Get next command item.<br /><br />RUN:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP &#91;XAML&#93;&nbsp; &nbsp; &nbsp; ;Run at current XAM index.<br /><br />NOTSTOR:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BMI XAMNEXT&nbsp; &nbsp; &nbsp;;B7 = 0 for XAM, 1 for BLOCK XAM.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDX #$02&nbsp; &nbsp; &nbsp; &nbsp; ;Byte count.<br /><br />SETADR:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &lt;STH,X&nbsp; &nbsp; &nbsp; ;Copy hex data to<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA &lt;XAMH,X&nbsp; &nbsp; &nbsp;;'store index'.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA &lt;$23,X&nbsp; &nbsp; &nbsp; ;And to 'XAM index'.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Next of 2 bytes.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BNE SETADR&nbsp; &nbsp; &nbsp; ;Loop unless X = 0.<br /><br />NXTPRNT:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BNE PRDATA&nbsp; &nbsp; &nbsp; ;NE means no address to print.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$0D&nbsp; &nbsp; &nbsp; &nbsp; ;CR.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR ECHO&nbsp; &nbsp; &nbsp; &nbsp; ;Output it.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &lt;XAMH&nbsp; &nbsp; &nbsp; &nbsp; ;'Examine index' high-order byte.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR PRBYTE&nbsp; &nbsp; &nbsp; ;Output it in hex format.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &lt;XAML&nbsp; &nbsp; &nbsp; &nbsp; ;Low-order 'examine index' byte.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR PRBYTE&nbsp; &nbsp; &nbsp; ;Output it in hex format.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$3A&nbsp; &nbsp; &nbsp; &nbsp; ;&quot;:&quot;.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR ECHO&nbsp; &nbsp; &nbsp; &nbsp; ;Output it.<br /><br />PRDATA:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$20&nbsp; &nbsp; &nbsp; &nbsp; ;Blank.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR ECHO&nbsp; &nbsp; &nbsp; &nbsp; ;Output it.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &#91;XAML,X&#93;&nbsp; &nbsp; ;Get data byte at 'examine index'<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR PRBYTE&nbsp; &nbsp; &nbsp; ;Output it in hex format.<br /><br />XAMNEXT:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STX &lt;MODE&nbsp; &nbsp; &nbsp; &nbsp; ;0-&gt;MODE &#40;XAM mode&#41;.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &lt;XAML<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP &lt;L&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Comapre 'examine index' to hex data.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &lt;XAMH&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SBC &lt;H<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BCS TONEXTITEM&nbsp; ;Not less, so no more data to output.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INC &lt;XAML&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BNE MOD8CHK&nbsp; &nbsp; &nbsp;;Increment 'examine index'.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INC &lt;XAMH<br /><br />MOD8CHK:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &lt;XAML&nbsp; &nbsp; &nbsp; &nbsp; ;Check low-order 'examine index' byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AND #$07&nbsp; &nbsp; &nbsp; &nbsp; ;For MOD 8=0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BPL NXTPRNT&nbsp; &nbsp; &nbsp;;Always taken.<br /><br />PRBYTE:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PHA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Save A for LSD.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LSR A<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LSR A<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;MSD to LSD position.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LSR A<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JSR PRHEX&nbsp; &nbsp; &nbsp; &nbsp;;Output hex digit.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Restore A.<br /><br />PRHEX:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AND #$0F&nbsp; &nbsp; &nbsp; &nbsp; ;Make LSD for hex print.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ORA #$30&nbsp; &nbsp; &nbsp; &nbsp; ;Add &quot;0&quot;.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$3A&nbsp; &nbsp; &nbsp; &nbsp; ;Digit?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BCC ECHO&nbsp; &nbsp; &nbsp; &nbsp; ;Yes, output it.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ADC #$06&nbsp; &nbsp; &nbsp; &nbsp; ;Add offset for letter.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;BIT DSP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;DA bit &#40;B7&#41; cleared yet?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;BMI ECHO&nbsp; &nbsp; &nbsp; &nbsp; ;No, wait for display<br /><br />ECHO:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA &lt;TEMP<br />ECHOLOOP:&nbsp; &nbsp; &nbsp; &nbsp;LDA UARTLSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Output character. Sets DA.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AND #$20<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ ECHOLOOP<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA &lt;TEMP<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STA UART<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMP #$0D&nbsp; &nbsp;;if output is CR then<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ LINEFEED&nbsp; &nbsp;;linefeed<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Return.<br /><br />LINEFEED:&nbsp; &nbsp; &nbsp; &nbsp;LDA UARTLSR<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AND #$20<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BEQ LINEFEED<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LDA #$0A<br />&nbsp; &nbsp;&nbsp; &nbsp;STA UART<br />&nbsp; &nbsp;&nbsp; &nbsp;LDA #$0D<br />&nbsp; &nbsp;&nbsp; &nbsp;RTS<br /><br />&nbsp; &nbsp;.bank 1<br />&nbsp; &nbsp;.org $FFFA<br /><br />&nbsp; &nbsp;.dw 0<br />&nbsp; &nbsp;.dw Init<br />&nbsp; &nbsp;.dw 0<br /><br />;End<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Oct 15, 2005 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ugh, flood! :)  I see you changed the constants from APPLEsci to ASCII, so it'd work with a normal terminal.
<br />
<br />I'm now testing the MMC3 IRQ behavior. One problem I encountered was finding a cartridge with IRQ vectors that point into RAM. I wasn't able to, so I used the Game Genie to alter the IRQ vector at $fffe and $ffff. That is working, and I'm now beginning the IRQ testing.
<br />
<br />Since my code can run before the Game Genie loads, I figured out how to write to the Game Genie registers (trivial to determine in an emulator, just run the Game Genie ROM and enter various codes while looking at the writes to $8000-$ffff). I doubt there's any way to re-enable it once its ROM has been hidden, except perhaps by pulsing one of the lines (which I plan on trying, since my Game Genie has DIP chips rather than glop tops).
<br />
<br />I'm having so much fun testing all this hardware which I thought I wouldn't have access to.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>