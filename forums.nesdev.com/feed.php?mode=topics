<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?mode=topics" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2019-09-14T06:46:48-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?mode=topics</id>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2019-09-14T06:46:48-07:00</updated>
<published>2019-09-14T06:46:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19291&amp;p=242487#p242487</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19291&amp;p=242487#p242487"/>
<title type="html"><![CDATA[General Stuff • Detecting MBR vs VBR]]></title>

<category term="General Stuff" scheme="http://forums.nesdev.com/viewforum.php?f=5" label="General Stuff"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19291&amp;p=242487#p242487"><![CDATA[
The first sector of a disk can contain a MBR (partition table) or a VBR (FAT header).<br />The MBR in first sector is common for harddisks and SD cards.<br />The VBR iin first sector s common for floppy disks, but it does reportedly also exist on some SD cards.<br /><br />Does somebody know a good/tested/reliable/working method for detecting wheter the disk starts with MBR or VBR?<br /><br />They are unfortunately both using the same ID bytes (55h,AAh in last two bytes), so that isn't helpful. I could only think of using heuristic guessing, like checking that the MBR has partition start smaller than partition end, and checking that (common) VBRs have 2^n bytes per sector, usually 2 fat copies, usually type F8h, commonly ascii characters in volume label, and so on. The probability guessing should work even with some small errors, but might fail when relying or some incorrect &quot;must be always this value&quot; assumptions.<br /><br />Anyways, there must be several operating systems and other programs already having solved that issue... if there is something that is not too complicated and more or less well tested then I could just use the same method.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Sat Sep 14, 2019 6:46 am — Replies 1 — Views 65</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[aquasnake]]></name></author>
<updated>2019-09-14T00:59:26-07:00</updated>
<published>2019-09-14T00:59:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19290&amp;p=242482#p242482</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19290&amp;p=242482#p242482"/>
<title type="html"><![CDATA[NESdev • my commercial multi-cart]]></title>

<category term="NESdev" scheme="http://forums.nesdev.com/viewforum.php?f=2" label="NESdev"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19290&amp;p=242482#p242482"><![CDATA[
i'v done this recently<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=15409">aquasnake</a> — Sat Sep 14, 2019 12:59 am — Replies 0 — Views 79</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[krzysiobal]]></name></author>
<updated>2019-09-13T22:38:20-07:00</updated>
<published>2019-09-13T17:17:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19289&amp;p=242473#p242473</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19289&amp;p=242473#p242473"/>
<title type="html"><![CDATA[NES Hardware and Flash Equipment • INL-XO-ROM reverse engineering]]></title>

<category term="NES Hardware and Flash Equipment" scheme="http://forums.nesdev.com/viewforum.php?f=9" label="NES Hardware and Flash Equipment"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19289&amp;p=242473#p242473"><![CDATA[
I got Gimmick 2 hack which was done using INL-XO-ROM PCB. My version does not have expansion sound, but the PCB at first glance looks like super-dooper:<br />* place for PRG1-ROM (up to 8MB), PRG2-ROM (up to 512 kB) - was PRG1 meant to be for storing games and PRG2 for firmware when using micro sd card?),<br />* place for CHR-ROM (up to 512 kB),<br />* place for PRG/CHR-RAM (even up to 128kB),<br />* place for battery,<br />* place for AY-3-8910,<br />* place for micro sd card,<br />* some other stuff (logic to support MMC2/MMC4) and a few unpopulated chips.<br />Probably one universal board for many applications.<br /><br />Luckily I have a lot of AY-3-8910 chips so I reverse engineered the board mainly because I was curious which components need to be soldered to make audio expansion work.<br /><br />* The board is build using LAMXO256 CPLD. Does not seem to be very popular, nor cheap (2$) but with similar capacity (256 LUT) and I/Os (78) versus Altera EPM240 (1$, 240 macrocells, 80 IO pins)<br />* 16 channel 74LVC16245 buffers used for 3V3-5V translation (4$) - I prefer 8 channel 74LVC245 (0.1$), smaller and easier to route signals. And they still ran out of the pins and needed to translate PPU-A13/PPU-A12 using resistor divider<br />* CON1: There is place for micro SD - loading games like in everdrive?<br />* IC10: There is place for SPI memory (probably for Dragon Ball and other games that require SPI flash for storing savestates)<br />* IC9 (STM32F0, unpopulated) / IC13 (STMSTM8S003F3P6) - seems to be responsible for CIC stun. It also has access to micro SD card pins and audio output - was this meant to be used to play back music from sd card and output it to NES?<br />* Programming CPLD done via EXP0 (TDO) / EXP1 (TDI) / EXP2 (TMS) / EXP3 (TCK) headers<br />* There is a jumper which selects if WRAM-A12 is tied to CPU-A12 or driven by CPLD (PRG-ROM-A12 is driven by the same pin) - 4kB banking support, woah, can be used to play NSF<br />* JP3 - unpopulated 5 pin small connector (was it for external audio hook-up?)<br /><br />Flaws:<br />* The right terminal of battery (negative) is not routed to anything,<br />* One of the chasis pins of micro sd card is not routed to anything,<br />* One leg of R4 is not routed to anything,<br />* CPLD directly sees PPU A10-A13, but for MMC2/MMC4 it also needs to check if PPU A3-A9 are all ones (and so they used NAND - clever, <a href="https://forums.nesdev.com/viewtopic.php?f=28&amp;t=17496" class="postlink">I did similar trick but using diodes</a>). Weird thing is that they do not care for PPU A0..A2 (according to wiki - MMC2 latch 0 responds only to one address)<br />* CPLD controls output enable of IC8 buffer and 1/2 of IC7 buffer using the same control line. For IC8 this is strange cause this buffer converts CPU address line which should be always enabled.<br /><br /><a href="https://obrazki.elektroda.pl/7396336900_1568419679.jpg" class="postlink"><img src="https://obrazki.elektroda.pl/7396336900_1568419679_thumb.jpg" alt="Image" /></a> <a href="https://obrazki.elektroda.pl/3845524000_1568419681.jpg" class="postlink"><img src="https://obrazki.elektroda.pl/3845524000_1568419681_thumb.jpg" alt="Image" /></a> <a href="https://obrazki.elektroda.pl/9711303700_1568420192.jpg" class="postlink"><img src="https://obrazki.elektroda.pl/9711303700_1568420192_thumb.jpg" alt="Image" /></a> <a href="https://obrazki.elektroda.pl/9661408100_1568420195.jpg" class="postlink"><img src="https://obrazki.elektroda.pl/9661408100_1568420195_thumb.jpg" alt="Image" /></a> <a href="https://obrazki.elektroda.pl/5359601100_1568420198.jpg" class="postlink"><img src="https://obrazki.elektroda.pl/5359601100_1568420198_thumb.jpg" alt="Image" /></a> <a href="https://obrazki.elektroda.pl/8382449400_1568420201.jpg" class="postlink"><img src="https://obrazki.elektroda.pl/8382449400_1568420201_thumb.jpg" alt="Image" /></a> <a href="https://obrazki.elektroda.pl/6320533900_1568439167.png" class="postlink"><img src="https://obrazki.elektroda.pl/6320533900_1568439167_thumb.jpg" alt="Image" /></a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4898">krzysiobal</a> — Fri Sep 13, 2019 5:17 pm — Replies 2 — Views 101</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LilaQ]]></name></author>
<updated>2019-09-13T07:30:34-07:00</updated>
<published>2019-09-13T07:30:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19288&amp;p=242464#p242464</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19288&amp;p=242464#p242464"/>
<title type="html"><![CDATA[NESemdev • 6 tile offset in &quot;Duck Tales&quot; when using a rope]]></title>

<category term="NESemdev" scheme="http://forums.nesdev.com/viewforum.php?f=3" label="NESemdev"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19288&amp;p=242464#p242464"><![CDATA[
Hi guys,<br /><br />I'm trying to figure out another problem, that has been keeping me busy for a few days now.<br />In &quot;Duck Tales&quot;, whenever I use a rope / chain to go up or down, I get a weird 6-tile offset (see attached GIF).<br /><br />When further investigating, the Y-Scroll value immediately starts at 6 when going down. First, I thought I might be doing something wrong, and that my value is wrong (even though Ice Climber works perfectly), but after a bit more research it turns out, Mesen has the same value(s) [read, the last writes to 2006]:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">2006 0x24  46  70   0000<br />2006 0xc0  46  91   2400<br />2005 0x00  46 130   24c0<br />2005 0x00  46 151   24c0<br />Rendering frame <br />2006 0x24 246 189   0000<br />2006 0x00 246 213   2400<br />2006 0x24 251  14   2400  <br />2006 0x20 251  38   2400  <br />2006 0x27 255 180   2420<br />2006 0xc0 255 204   2720   <br />2005 0x00 257  26   27c0   <br />2005 0x00 257  47   27c0   <br />2006 0x24  46  78   0000  <br />2006 0xe0  46  99   2400<br />2005 0x00  46 138   24e0<br />2005 0x00  46 159   24e0<br />Rendering frame<br /></div><br /><br />24c0 -&gt; Y-Scroll 6<br />24e0 -&gt; Y-Scroll 7<br />etc.<br /><br />This can also be seen, when looking at the PPU Viewer in Mesen, the viewport is actually lower than what is visible in the actual window. <br /><br />These values are achieved through Loopy's scrolling docs, including v, t, x, w.<br /><br />Can someone point out to me what I'm doing wrong? I already thought it has something to do with the UI (that seems to be 6 tiles high as well), but I can't come up with something logical.<br /><br />Thank you so much in advance!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=15356">LilaQ</a> — Fri Sep 13, 2019 7:30 am — Replies 5 — Views 138</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nesrocks]]></name></author>
<updated>2019-09-12T17:48:06-07:00</updated>
<published>2019-09-12T17:48:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19287&amp;p=242458#p242458</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19287&amp;p=242458#p242458"/>
<title type="html"><![CDATA[General Stuff • CRC32 operations question]]></title>

<category term="General Stuff" scheme="http://forums.nesdev.com/viewforum.php?f=5" label="General Stuff"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19287&amp;p=242458#p242458"><![CDATA[
So, what I'm trying to do, is to edit a ROM while keeping its CRC32 hash. There is a known sequence of 4 bytes of value &quot;zero&quot; at one section in the ROM that can be reserved for this.<br />What I want to do is edit the ROM using a level editor (that I'm making), and then the level editor will manipulate these zeroes in such a manner that the ROM's CRC32 hash will be unchanged.<br /><br />I have found some resources online that tell me how to achieve this, in certain detail, and I've managed to reproduce it mostly in my development environment, but there's one step that I'm having trouble with understanding the math. The user describes the step as follows:<br /><br />&quot;Step four, and this is a bit funky so see below, perform an inverse CRC32 calculation:&quot;<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0xD046655F * inverse(x32) mod crc_poly</div><br /><strong>It all boils down to what is &quot;inverse(x32)&quot;. If I figure this out, my problem is solved.</strong><br /><br />He goes on further to explain this:<br />&quot;P * x32 mod crc_poly is the remainder of (P shifted 32 bits to the right) after dividing by the CRC polynomial, which is how CRCs are computed).<br />inverse(x32) is the multiplicative inverse of x32 mod crc_poly. Multiplicative inverse means x32 * inverse(x32) mod crc_poly = 1.&quot;<br /><br />The way I understand it, after going through steps 1-3, I will have to bitshift the manipulated hash 32 bits to the right, but that means it will always result in a value of zero since it is always 32 bits long? I am missing something here and I'd really appreciate some help.<br /><br />Maybe he meant bit shift 32x to the left?<br /><br />First link to his explanations: <!-- m --><a class="postlink" href="https://stackoverflow.com/questions/48247647/how-do-i-modify-a-file-while-maintaining-its-crc-32-checksum/48248530#48248530">https://stackoverflow.com/questions/482 ... 0#48248530</a><!-- m --><br />Further info: <!-- m --><a class="postlink" href="https://www.reddit.com/r/crypto/comments/3h6qeh/generating_crc32_collisions/">https://www.reddit.com/r/crypto/comment ... ollisions/</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7152">nesrocks</a> — Thu Sep 12, 2019 5:48 pm — Replies 1 — Views 119</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tschak909]]></name></author>
<updated>2019-09-11T11:09:14-07:00</updated>
<published>2019-09-11T11:09:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19286&amp;p=242434#p242434</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19286&amp;p=242434#p242434"/>
<title type="html"><![CDATA[NESdev • PLATOTERM for NES - It just needs a bit of hw engineering!]]></title>

<category term="NESdev" scheme="http://forums.nesdev.com/viewforum.php?f=2" label="NESdev"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19286&amp;p=242434#p242434"><![CDATA[
Hey guys,<br /><br />A few months ago, I had asked about ways to do a bitmap mode on the NES, and the responses were quite good. <br /><br />As it happens, I ran across the 8-bit-workshop's NES environment he had just added, and one of the examples was for a mono-bitmap. <br /><br />After talking with sehugg, I managed to get the neslib2 fork he did, and cobble together enough screen logic for PLATOTERM to work (I had to replace the line draw routine with a proper bresenham that can take care of a few edge cases), and so...here it is!<br /><br /><img src="https://i.imgur.com/FNDRPMU.gif" alt="Image" /><br /><br />Code is here:<br /><!-- m --><a class="postlink" href="http://github.com/tschak909/platotermnes">http://github.com/tschak909/platotermnes</a><!-- m --><br /><br />Rom is attached.<br /><br />This begs the question, how to implement I/O?<br /><br />It needs at the very least, a keyboard, and a way to shift ascii bytes coming to and from the host, either over serial link or via ethernet.<br /><br />I was thinking something like a Raspberry Pi Zero embedded on the cartridge?<br /><br />What do you think? (also yeah, need some help making the rendering faster, naively only one vram change is happening per frame to avoid overruns)<br /><br />-Thom<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8569">tschak909</a> — Wed Sep 11, 2019 11:09 am — Replies 4 — Views 327</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[gravelstudios]]></name></author>
<updated>2019-09-11T05:19:32-07:00</updated>
<published>2019-09-11T05:19:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19285&amp;p=242430#p242430</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19285&amp;p=242430#p242430"/>
<title type="html"><![CDATA[NESdev • APU Pulse Sweep Behavior Question]]></title>

<category term="NESdev" scheme="http://forums.nesdev.com/viewforum.php?f=2" label="NESdev"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19285&amp;p=242430#p242430"><![CDATA[
I'm using the sweep for several sound effects. Sometimes, it sounds like the sweep is skipping the first pitch and going directly to the second pitch. It seems to be happening right after playing a different sound effect. I thought maybe the data from the previous sound was affecting the next one, so I tried loading all zeros into the pulse channel before loading the next set of data, but that didn't seem to help. Then I thought that maybe I need to reset the frame counter, so I tried loading $FF into $4017 on every frame, and also right before loading the data into the pulse registers and neither of those worked. I thought maybe the order mattered, so I tried loading the data in reverse (starting at $4003 and going backward to $4000), but I got the same thing. I'm really at a loss. I'm not even sure if I'm doing a good job explaining what my problem is. it's like, if I use the sweep to make an arpeggio sort of sound, sometimes it starts on the second pitch rather than the first one. Does anybody know what I'm talking about?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8320">gravelstudios</a> — Wed Sep 11, 2019 5:19 am — Replies 5 — Views 206</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MLX]]></name></author>
<updated>2019-09-11T02:09:15-07:00</updated>
<published>2019-09-11T02:09:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19284&amp;p=242423#p242423</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19284&amp;p=242423#p242423"/>
<title type="html"><![CDATA[NES Hardware and Flash Equipment • Weird pirate MMC3 PCB]]></title>

<category term="NES Hardware and Flash Equipment" scheme="http://forums.nesdev.com/viewforum.php?f=9" label="NES Hardware and Flash Equipment"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19284&amp;p=242423#p242423"><![CDATA[
While checking the original releases of the infamous <em>Super Bros.</em> hacks, I remembered that my <a href="https://i.imgur.com/yYpvXUX.jpg" class="postlink">two copies</a> of the Jackie Chan one (<em>Super Bros. 10</em>) had different PCBs. The small one revealed to be M196, like most of those hacks. However the large one, which at first was a candidate for an original print with an obscure mapper, showed to be just standard MMC3.<br /><br />Was this meant to be a 2-in-1 MMC3 multicart with two 2x128kB games? Clues on the reason for the 4kB UVEPROM?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8265">MLX</a> — Wed Sep 11, 2019 2:09 am — Replies 2 — Views 203</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Vyle80r]]></name></author>
<updated>2019-09-10T18:02:31-07:00</updated>
<published>2019-09-10T18:02:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19283&amp;p=242418#p242418</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19283&amp;p=242418#p242418"/>
<title type="html"><![CDATA[Reproduction • Does anyone have a NES controller circuit board Eagle file?]]></title>

<category term="Reproduction" scheme="http://forums.nesdev.com/viewforum.php?f=28" label="Reproduction"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19283&amp;p=242418#p242418"><![CDATA[
I have been experimenting around with controllers off and on for a while now. Trying different buttons, adding micro-switches and things like that. I now have a desktop CNC machine and multiple 3D printers. I would like to play around with milling my own controller circuit boards on the CNC but also, I'm looking forward to experimenting around with 3D printing the entire circuit board using a strong material for the substrate and graphene conductive filament for the circuit.<br /><br />I did a search to see if I could find an Eagle file for the circuit board and I found one on these forums for the Snes board but didn't see one for the NES-004. I was hoping maybe someone had a brd file to replicate the pcb that is in the NES-004. I'd appreciate any help I could get.<br /><br />T<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=15397">Vyle80r</a> — Tue Sep 10, 2019 6:02 pm — Replies 0 — Views 52</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Nugem]]></name></author>
<updated>2019-09-10T11:04:51-07:00</updated>
<published>2019-09-10T11:04:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=19282&amp;p=242400#p242400</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=19282&amp;p=242400#p242400"/>
<title type="html"><![CDATA[Homebrew Projects • Metroid - Mother]]></title>

<category term="Homebrew Projects" scheme="http://forums.nesdev.com/viewforum.php?f=22" label="Homebrew Projects"/>
<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=19282&amp;p=242400#p242400"><![CDATA[
I apologize if while looking for hours on the net for the answer it has already been answered, please excuse me.<br /><br />I am awaiting a few hundred dollars in eproms,  programmers,  shells, solder irons,  solder removers, etc<br /><br />My goal is to flash metroid mother on a cart to play.<br /><br />Am I understanding correctly I can use the SNROM? <br /><br />Thanks very much<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=15396">Nugem</a> — Tue Sep 10, 2019 11:04 am — Replies 0 — Views 180</p><hr />
]]></content>
</entry>
</feed>