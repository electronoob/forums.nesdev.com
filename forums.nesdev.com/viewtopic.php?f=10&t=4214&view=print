<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 256 Byte RLE Decompression Routine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">256 Byte RLE Decompression Routine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4214">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4214</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Tue Jul 08, 2008 1:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>256 Byte RLE Decompression Routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I finally came up with a decompression routine in 6502 for my <a href="http://robertlbryant.com/programs/cpp.htm" class="postlink">C++ program RLE</a>. I've tested things, and Tepples' PackBits is more efficient than my byte-for-byte compression, but I thought I would post this anyway, just in case it might help others in their endeavors.
<br />
<br />First, I'll explain my C++ RLE prog. It's VERY basic in how it's implemented. It's just a program that takes the bytes in a file, and adds the count of each byte in front of the bytes that repeat; this is the most basic RLE that I know of, and probably is. Example:
<br />
<br />$00,$00,$00,$00,$17,$11,$ad,$ad,$ad,$00,$00,$00,$00,$00,$00,$00
<br />
<br />Compressed with the most simple of RLE would be:
<br />
<br />$04,$00,$01,$17,$01,$11,$03,$ad,$07,$00
<br />
<br />This is exactly what my C++ prog does. Anyway, Wikipedia offers a VERY easy to understand definition of run-length encoding, so check this out (this is for any newer folk that haven't learned any compression yet) This will explain what I posted above in much better wording:
<br />
<br /><!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/Run-length_encoding">http://en.wikipedia.org/wiki/Run-length_encoding</a><!-- m -->
<br />
<br />It doesn't look like much for compression, but if you have many repeating tiles, it can be useful. Anyway, it took me a while to come up with a decent decompression scheme, mainly because I overlooked one stupid flaw that I was doing in it. Here is how I handle decompressing this in 6502:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #$20<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;ldx #$00<br />&nbsp; &nbsp;stx $2006<br />&nbsp; &nbsp;stx odd_even<br />compressed_screen:<br />&nbsp; &nbsp;lda compressed_nametable,x&nbsp; &nbsp; &nbsp; &nbsp;; Grab the first byte from the<br />&nbsp; &nbsp;tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; nametable indexed by X, then<br />&nbsp; &nbsp;lda odd_even&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; stick that in Y. Test if odd_even<br />&nbsp; &nbsp;bne tile_number&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; is 0 or 1. If it's 0, keep going<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; and stick Y in 'number_of_tiles',<br />&nbsp; &nbsp;sty number_of_tiles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; increment odd_even to 1 so on<br />&nbsp; &nbsp;inc odd_even&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; the next pass it will skip this<br />&nbsp; &nbsp;inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; portion of code, and increment<br />&nbsp; &nbsp;jmp compressed_screen&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; X. Jump back to compressed_screen<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if you got to that point.<br />tile_number:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; If odd_even was 1, stick Y in<br />&nbsp; &nbsp;sty the_tiles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 'the_tiles'. This is the actual place<br />&nbsp; &nbsp;ldy number_of_tiles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; you find the tiles in your chr. Load<br />:&nbsp; lda the_tiles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Y with how many tiles there are<br />&nbsp; &nbsp;sta $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; and stick all of them in $2007<br />&nbsp; &nbsp;dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; until Y is expired. Decrement<br />&nbsp; &nbsp;bne :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; odd_even to put it back to 0,<br />&nbsp; &nbsp;dec odd_even&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; increment X for the overall file read<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #$60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; and test for the size of the compressed file<br />&nbsp; &nbsp;bne compressed_screen&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if it doesn't pass the test, go back<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; to the beginning and keep reading</div>
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">; This represents the size of the compressed file</div>
<br />Like the name of the topic, I haven't pushed this past being more than 256 bytes. Sue me, I'm new to compression haha
<br />
<br />I think this SHOULD be readable, and I hope it is since it's such basic structure, but if anyone is confused, let me know and I will try to comment it further. Basically, you load a byte, check to see if it's the amount of times you put a tile down, or if it's the tile number, and repeat. I have been told that this code looks convoluted though, so I may just be jaded because I've looked at it alot : P
<br />
<br />Also, it uses all 3 registers, so if anyone here has anything they'd like to add to the algorithm that could speed it up and preserve one of them, please do!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anders_A</b> [ Tue Jul 08, 2008 1:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think you're overdoing it. If I had less then 256 RLE-encoded bytes i wanted to decode to PPU-mem I'd just do something like this (requires the RLE-data to be zero-terminated):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #$20<br />stx $2006<br />ldx $00<br />stx $2006<br /><br />loop:<br />&nbsp; &nbsp;ldy compressed, x<br />&nbsp; &nbsp;beq done<br /><br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;lda compressed, x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;:<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;&nbsp; &nbsp;dey<br />&nbsp; &nbsp;&nbsp; &nbsp;bne :-<br /><br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;bne loop<br />done:<br /></div>
<br />
<br />(The last bne will always branch, since if x wraps around to zero we're fucked anyway.)
<br />
<br />I haven't given this alot of thought though since I've never needed it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Tue Jul 08, 2008 1:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Crap! ha, yeah, that works just the same... damn it. I thought I found something good, but I'm glad you posted that. That works 100%, just tried it. Well, I guess that just goes to show that I have alot more to learn than I thought : P Oh well, I _thought_ I did good haha
<br />
<br />Thanks man, this gives me something to think about; being that I may be trying too hard! Thanks alot Anders : )
<br />
<br />EDIT: Tepples, please move this to the Newbie Help section.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Wed Oct 29, 2008 7:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 256 Byte RLE Decompression Routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey guys, I need a bit of help with this. I tried using Anders_A's routine, but it doesn't seem to be working now, I have no clue why. Anyway, the decoder that I originally came up with is working fine, but I need to try and make this routine reusable. It takes up alot of space when I have to have the same routine stuck in over and over.
<br />
<br />Now, I know I will have to make a byte set aside for the size of the file. In this example, the size of the file is #$60, and that's no problem of course. What I need is to figure out how to make the address 'compressed_nametable' be able to be reused. For instance, I have a few screens named similarly to screen1.nam, screen2.nam, screen3.nam, etc. I need to be able to load those addresses into the spot called 'compressed_nametable', then call this as a subroutine so I am not taking up alot of bytes with having this code inserted everytime I need to use it.
<br />
<br />Any ideas?
<br />
<br /><div class="quotetitle">In the original post, I wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #$20<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;ldx #$00<br />&nbsp; &nbsp;stx $2006<br />&nbsp; &nbsp;stx odd_even<br />compressed_screen:<br />&nbsp; &nbsp;lda compressed_nametable,x&nbsp; &nbsp; &nbsp; &nbsp;; Grab the first byte from the<br />&nbsp; &nbsp;tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; nametable indexed by X, then<br />&nbsp; &nbsp;lda odd_even&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; stick that in Y. Test if odd_even<br />&nbsp; &nbsp;bne tile_number&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; is 0 or 1. If it's 0, keep going<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; and stick Y in 'number_of_tiles',<br />&nbsp; &nbsp;sty number_of_tiles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; increment odd_even to 1 so on<br />&nbsp; &nbsp;inc odd_even&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; the next pass it will skip this<br />&nbsp; &nbsp;inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; portion of code, and increment<br />&nbsp; &nbsp;jmp compressed_screen&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; X. Jump back to compressed_screen<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if you got to that point.<br />tile_number:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; If odd_even was 1, stick Y in<br />&nbsp; &nbsp;sty the_tiles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 'the_tiles'. This is the actual place<br />&nbsp; &nbsp;ldy number_of_tiles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; you find the tiles in your chr. Load<br />:&nbsp; lda the_tiles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Y with how many tiles there are<br />&nbsp; &nbsp;sta $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; and stick all of them in $2007<br />&nbsp; &nbsp;dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; until Y is expired. Decrement<br />&nbsp; &nbsp;bne :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; odd_even to put it back to 0,<br />&nbsp; &nbsp;dec odd_even&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; increment X for the overall file read<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #$60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; and test for the size of the compressed file<br />&nbsp; &nbsp;bne compressed_screen&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if it doesn't pass the test, go back<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; to the beginning and keep reading</div><br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 29, 2008 9:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 256 Byte RLE Decompression Routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Roth wrote:</div><div class="quotecontent">What I need is to figure out how to make the address 'compressed_nametable' be able to be reused. For instance, I have a few screens named similarly to screen1.nam, screen2.nam, screen3.nam, etc. I need to be able to load those addresses into the spot called 'compressed_nametable'</div>
<br />You'll probably need to load compressed_nametable into a pair of zero page locations, and then use the (d),y addressing mode to read it. That's what PackBits does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Wed Oct 29, 2008 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What I would do is similar to Tepples but a little bit more generic.  I define in the zero page a temporary variable called zpCopySrcAdr (or any name you want) which mean is a zero page variable which contains the source addresse that I want to copy data from.
<br />
<br />Then, In my function, like tepple said, I would do
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc myNameTableCopyFunction<br /><br />...<br />&nbsp; &nbsp;lda &#40;zpCopySrcAdr&#41;, x<br />...<br />&nbsp; &nbsp;rts<br />.endp<br /></div>
<br />
<br />This way, you can re-use that variable in more than one case when you need the source address to copy data.
<br />
<br />The only thing that you have to be careful is if you call a function inside a function that could call this method. In that case, you may have to use more than one variable or put the value of the address on the stack.
<br />
<br />edit:
<br />
<br />Actually, maybe what I said is the same thing as Tepple -_-;; ... It's too early morning and I'm not awake I guess..  My contribution will just be my naming convention then  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Wed Oct 29, 2008 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, thanks guys, it seems to be working. I guess this is the way that I was shown a few years back on how to load a nametable. I guess it's something I should get used to then, because it seems pretty useful. I had to change how X and Y registers were moving data around, but it worked out it seems:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">odd_even:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.res 1<br />number_of_tiles:&nbsp; &nbsp;&nbsp; &nbsp;.res 1<br />the_tiles:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.res 1<br />comp_addy:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.res 2<br />compress_byte_stop:&nbsp; &nbsp;&nbsp; &nbsp;.res 1<br /><br /><br />...<br /><br />...<br /><br />screen2_init:<br />&nbsp; &nbsp;lda #&lt;screen2_tiles<br />&nbsp; &nbsp;sta comp_addy<br />&nbsp; &nbsp;lda #&gt;screen2_tiles<br />&nbsp; &nbsp;sta comp_addy+1<br />&nbsp; &nbsp;lda #$a0<br />&nbsp; &nbsp;sta compress_byte_stop<br />&nbsp; &nbsp;lda #$21<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;sta odd_even<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;jsr compressed_screen<br />&nbsp; &nbsp;jsr vblank_wait<br />&nbsp; &nbsp;jsr stabilize<br />&nbsp; &nbsp;jsr PPU_with_sprites<br />&nbsp; &nbsp;jmp screen2_loop<br /><br />compressed_screen:<br />&nbsp; &nbsp;lda &#40;comp_addy&#41;,y<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda odd_even<br />&nbsp; &nbsp;bne @tile_number<br />&nbsp; &nbsp;stx number_of_tiles<br />&nbsp; &nbsp;inc odd_even<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;jmp compressed_screen<br />@tile_number:<br />&nbsp; &nbsp;stx the_tiles<br />&nbsp; &nbsp;ldx number_of_tiles<br />:&nbsp; &nbsp;lda the_tiles<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;bne :-<br />&nbsp; &nbsp;dec odd_even<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;cpy compress_byte_stop<br />&nbsp; &nbsp;bne compressed_screen<br />&nbsp; &nbsp;rts<br /></div>
<br />
<br />Thanks for the help guys : )
<br />
<br />
<br />EDIT: Weird, it seems to work sometimes, and other times... not.
<br />
<br />EDIT 2: Okay, figured it out. I wasn't zeroing out the Y register before each call to the decompressor. How silly of me : P  Code updated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>oRBIT2002</b> [ Thu Oct 30, 2008 4:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The RLE could probably be somewhat improved if you've lots of non-similar bytes grouped together.
<br />Assume this scenario of uncompressable bytes
<br />01 02 03 04 05
<br />This would look like this with your RLE
<br />01 01 01 02 01 03 01 04 01 05
<br />
<br />Perhaps you could reserve the 7:th bit of your "count"-byte. For example, if it's set, the value in the byte contains the number of bytes that should be inserted, so you don't have to use one count-byte for every byte that couldn't be compressed. If you get what I mean. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />So it could look like this instead:
<br />85 01 02 03 04 05
<br />
<br />Of course this would limit your RLE to allow maximum 127 bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Oct 30, 2008 8:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">oRBIT2002 wrote:</div><div class="quotecontent">Perhaps you could reserve the 7:th bit of your "count"-byte. For example, if it's set, the value in the byte contains the number of bytes that should be inserted, so you don't have to use one count-byte for every byte that couldn't be compressed.</div>
<br />Et voila: PackBits.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Thu Oct 30, 2008 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />PackBits was the first thing I thought about after seeing orbit's post hehe
<br />
<br />Yeah, I have thought about trying to implement something like that, though my RLE encoder doesn't make it in that format. I'm actually looking forward to trying this in 16-bit sometime though. I don't think I've done hardly anything code-wise with over 8-bits haha Oh well, baby steps for me : )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>albailey</b> [ Fri Oct 31, 2008 6:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Roth, if you're making use of my nes dev tools you can use the Screen Layout Tool, and select RLE compression when saving the nametable.    It uses Apple's packbits algorithm.   I'll upload the assembly subroutines in that thread for making use of it.
<br />
<br />Al

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Oct 31, 2008 8:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In the TI83 scene, the most commonly used RLE routine is one that takes a specific byte as the "Escape" byte, which signals an RLE run, then the next two bytes are the byte and the number of occurrences.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Nov 01, 2008 6:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">In the TI83 scene, the most commonly used RLE routine is one that takes a specific byte as the "Escape" byte, which signals an RLE run, then the next two bytes are the byte and the number of occurrences.</div>
<br />
<br />That's what my RLE code does also.  Often $7D was my escape byte, so to represent that single byte itself in the output it'd just be like $7D,$7D,$01.  So 1 byte becomes 3, but that was a very rare occurrence.  $7D just didn't turn up for me much in my data.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>