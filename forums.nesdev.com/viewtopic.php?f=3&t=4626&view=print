<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Strategies when developing an emulator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Strategies when developing an emulator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=4626">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=4626</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>albailey</b> [ Fri Dec 05, 2008 9:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Strategies when developing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been passively working on a NES emulator.   I find it a very useful way to expand on my knowledge of NES programming. I've read documents here and on the wiki,but I am essentially still in the design phase. (I have the cpu done, and am ready to start the ppu)
<br />
<br />I have some questions for the people on here who have built and rebuilt their own emulators on some of the strategies they used, and on what they wish they had done differently.
<br />
<br />How do your organize the management of the memory accessable by the CPU?   What I had first done was to simply allocate  0x10000 bytes and allow the CPU to directly access it through array accesses.   As I move toward the PPU, I see that this is not a good approach since asking for something like the joypad IO mapped memory needs to be handled completey differently.
<br />
<br />Is the smarter approach to keep all the CPU memory in a MemoryManager class, and have it intercept all the reads and writes.  (I think yes).   Then subclass or augment this when mappers are introduced.
<br />
<br />Should PPU memory, palette, etc.. be managed by a memorymanager class, or is it fine just to control this via a PPU class?
<br />
<br />I hve a ton more questions, but they can wait until I've gotten further in my design and implementation.
<br />
<br />Al

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Dec 05, 2008 12:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For memory, I think my first approach was to break memory into equal-sized blocks, each with a potentially different pair of read/write handler functions (implemented as an array of function pointers). At some point I determined that a simple if/then cascade was faster, because some blocks of memory were accessed much more often than others (RAM is used much more than I/O). It also allows the most often-accessed areas to be handled inline, with the rest handled in a separate function. However, this was if/else approach less-modular, since this single handler had to know about all hardware. So, I finally adopted a hybrid strategy, with an if/else cascade handling memory and the core hardware (PPU, APU), and an array of function pointers for external hardware like mappers and other sound chips.
<br />
<br />The above covers reads/writes that could have side-effects. For reads of instruction bytes, I bypass the above and just use an array of pointers to banks of memory, with a bank size the smallest of what a mapper can switch. I don't think any NES program would ever try to execute from an I/O address.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Only writes are shown; reads would be handled in a similar way.<br />const int shift = 12;<br />typedef void &#40;*write_func&#41;&#40; int addr, int data &#41;;<br />write_func write_funcs &#91;0x10000 &gt;&gt; shift&#93;;<br /><br />void write_outline&#40; int addr, int data &#41;<br />&#123;<br />&nbsp; &nbsp; // write_ppu and write_apu could themselves be inline<br />&nbsp; &nbsp; if &#40; addr &gt;= 0x2000 &amp; addr &lt;= 0x3FFF &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; write_ppu&#40; addr, data &#41;;<br />&nbsp; &nbsp; else if &#40; addr &gt;= 0x4000 &amp;&amp; addr &lt;= 0x4017 &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; write_apu&#40; addr, data &#41;;<br />&nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; write_funcs &#91;addr &gt;&gt; shift&#93;&#40; addr, data &#41;<br />&#125;<br /><br />inline void write&#40; int addr, int data &#41;<br />&#123;<br />&nbsp; &nbsp; if &#40; addr &lt; 0x800 &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; low_ram &#91;addr&#93; = data;<br />&nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; write_outline&#40; addr, data &#41;;<br />&#125;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Dec 05, 2008 8:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I found it better to have all memory in its own namespace / memory manager, even when its internal memory for various processors (eg palette RAM.)
<br />
<br />It does tend to violate OO public / private access levels, but it's very helpful for things like a debugger to have a consistent, unified architecture for all memory.
<br />
<br />It also makes it easier when you have ambiguous ownership of shared memory (eg both CPU and APU can access this external RAM chip -- which class allocates the memory for it?)
<br />
<br />I'm the absolute last person to talk to about efficiency, but I ultimately went with a table of function pointers. One for reading, one for writing.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">memory::bus.write&#40;addr, data&#41; &#123; table&#91;addr &gt;&gt; n&#93;-&gt;write&#40;addr, data&#41;; &#125; // n = table granularity<br />memory::oam.write&#40;addr, data&#41; &#123; oam&#91;addr&#93; = data; &#125;</div><br /><br />You will suffer a significant speed penalty, but it allows for some nice things later on. Eg you can easily chain memory accesses for special hardware or debugging purposes.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void &#40;*writefn&#41;&#40;unsigned, uint8_t&#41; = table&#91;addr&#93;;<br />table&#91;addr&#93; = &amp;hookfn;<br />void hookfn&#40;unsigned, uint8_t&#41; &#123; ... writefn&#40;addr, data&#41;; &#125;</div><br /><br />A major benefit to blargg's approach is not having a fixed granularity size to your table. For instance:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void write&#40;uint16_t addr, uint8_t data&#41; &#123;<br />&nbsp; //order these based on access frequency, most common first<br />&nbsp; if&#40;&#40;addr - 0x2000&#41; &amp; 0x1fff == 0&#41; write_ppu_2k_gran&#40;addr, data&#41;;<br />&nbsp; else if&#40;addr - 0x4000 &lt; 0x18&#41; write_apu_24byte_gran&#40;addr, data&#41;;<br />&nbsp; else if&#40;addr &amp; 0x8000&#41; &#40;*mapper_write&#41;&#40;addr, data&#41;;<br />&#125;</div>
<br />
<br />Now you only have to change a single function pointer to re-map the cart address write handler.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't think any NES program would ever try to execute from an I/O address.</div>
<br />
<br />No commercial one, but I've done that a lot for testing. Fun stuff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Tue Dec 09, 2008 5:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And according to a conversation i had with <a href="http://en.wikipedia.org/wiki/Bill_Heineman" class="postlink">Burger Bill</a> some years back, DOOM for the SuperNES executed code from register space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Dec 10, 2008 12:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, for the NES, the only readable registers are $2002, $2004, $2007, $4015, $4016 and $4017.
<br />Since the first 3 are not consecutive, one could only have an instruction in $4015-$4017, and I guess it would be possible to rely on that.
<br />Reading $4016 or $4017 would exectue typically the RTI instruction or EOR [$xx,X]. Reading $4015 could do many different opcodes in function of the sound's state. In occurence if only Triangle is enabled, it would do the PHP instuction, that could be of some usefullness before a RTI in $4016. So yeah a programm could rely on that if it wants to be insane.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Tue Feb 24, 2009 8:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The above covers reads/writes that could have side-effects. For reads of instruction bytes, I bypass the above and just use an array of pointers to banks of memory, with a bank size the smallest of what a mapper can switch. I don't think any NES program would ever try to execute from an I/O address.</div>
<br />
<br />I have a suggestion for handling that.  If you have an array of "regular" memory and you can arrange so that "special" memory accesses (such as IO ports) always load and store from somewhere else and don't depend on or change the value stored in the array for the "regular" memory at their address, then...
<br />
<br />(1)  Choose an instruction that is not executed very often (a halt instruction or something), and use its opcode byte as a "marker" byte
<br />(2)  Store this marker byte into all "special" memory addresses in the array for the "regular" memory (anything that could not just be executed directly)
<br />(3)  Change your CPU interpreter so that when it executes this particular opcode byte, it goes back and does another ifetch using whatever memory handler is necessary to read an IO port, or whatever (and be a little careful, because you might have counted its cycle already).  If the "proper" read handling returns the same byte again, *then* you fall through to the actual handler for it.  Otherwise, dispatch to the handler for the real instruction.
<br />
<br />This lets you run like you currently do, doing ifetches straight out of the array, but if you ever hit something that's marked as "this is special memory" then it will repeat the ifetch in the proper way.  There is basically no slowdown because the only opcode that gets slower under normal circumstances is the one rarely-executed instruction whose opcode byte you chose as the marker value.  It works because ifetches see the marker value, and other kinds of read/write access never see it because they handle the "special" access without using that memory.
<br />
<br />Of course, if your read/write handlers rely on also being able to use the memory address in the array, then it could be inconvenient to change them all to point somewhere else.  YMMV.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>