<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7463" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-02-20T00:45:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7463</id>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2011-02-20T00:45:15-07:00</updated>
<published>2011-02-20T00:45:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=74246#p74246</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=74246#p74246"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=74246#p74246"><![CDATA[
Awesome.  I don't need this right now, but I might in the future.  May I kindly suggest adding this to the wiki (or ask Tepples to do it)?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Sun Feb 20, 2011 12:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bogax]]></name></author>
<updated>2011-02-19T23:49:17-07:00</updated>
<published>2011-02-19T23:49:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=74242#p74242</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=74242#p74242"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=74242#p74242"><![CDATA[
Here's some code that seems to work.<br />You don't get a remainder.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> ; divide 16 bit number by 3 by multiplying by 1/3<br /> ; enter with <br /> ; A containing the hi byte of the number to be divided by 3 <br /> ; Y containing the lo byte of the number to be divided by 3 <br /> ; the hi byte of the partial product is kept in A or saved <br /> ; on the stack when neccessary <br /> ; the product &#40;N/3 quotient&#41; is returned hi byte in A,<br /> ; lo byte in Y<br /><br /><br /> ; save the number in lo_temp, hi_temp <br /><br /> sty lo_temp <br /> sty lo_product <br /> sta hi_temp <br /><br /> ldy #$09 <br /> clc <br /> bcc ENTER<br /><br /> ; each pass through loop adds the number in<br /> ; lo_temp, hi_temp to the partial product and<br /> ; then divides the partial product by 4 <br /><br />LOOP <br /> pha <br /> lda lo_product <br /> adc lo_temp <br /> sta lo_product <br /> pla <br /> adc hi_temp <br />ENTER<br /> ror <br /> ror lo_product <br /> lsr <br /> ror lo_product <br /> dey <br /> bne LOOP <br /> ldy lo_product<br /> rts<br /></div><br /><br />Here's a couple that do 8 bits one looped, one unrolled.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> ; enter with number to be divided in A<br /> ; answer returned in A<br /><br /> sta temp<br /> ldx #$04<br /> lsr<br /> lsr<br />LOOP<br /> adc temp<br /> ror<br /> lsr<br /> dex<br /> bne LOOP<br /> rts<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> ; enter with number to be divided in A<br /> ; answer returned in A<br /><br /> sta temp<br /> lsr<br /> lsr<br /> adc temp<br /> ror<br /> lsr<br /> adc temp<br /> ror<br /> lsr<br /> adc temp<br /> ror<br /> lsr<br /> adc temp<br /> ror<br /> lsr<br /> rts<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3594">bogax</a> — Sat Feb 19, 2011 11:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bogax]]></name></author>
<updated>2011-02-11T14:53:04-07:00</updated>
<published>2011-02-11T14:53:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73865#p73865</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73865#p73865"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73865#p73865"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />After you multiply by the reciprocal, you'll need to multiply the result by 3 to make sure that the remainder is 0, 1, or 2. Both multiplying by $55/$100 and multiplying by $56/$100 produce<br /></div><br /><br />That was my point about keeping enough accuracy in the partial product.<br />And maybe I confused things by using the term "partial product"<br />inconsistently.<br /><br />Also I was a bit glib especially considering that the code does rounding<br />in the midst of the computations.<br /><br />To put it in your terms (if I understand you) I was saying you need do<br />at least $155/$400 but you should be able to do it with single byte math<br />by defering the divsion as long as possible and keeping as much accuracy<br />in the partial products as possible (and the rounding should help <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" />  )<br /><br /><br />And speaking of the remainder, if you need the remainder, maybe<br />using division by reciprocal multiplication wont be the best way.<br /><br />edit: fixed the fraction after I goofed the conversion really good<br />       ie $CC/$400 should have been $155/$400  <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3594">bogax</a> — Fri Feb 11, 2011 2:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-02-11T13:58:04-07:00</updated>
<published>2011-02-11T13:58:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73861#p73861</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73861#p73861"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73861#p73861"><![CDATA[
After you multiply by the reciprocal, you'll need to multiply the result by 3 to make sure that the remainder is 0, 1, or 2. Both multiplying by $55/$100 and multiplying by $56/$100 produce results that aren't exactly equal to x/3 in some cases. But luckily, multiplying by 3 to check one's work is easy (x + (x &lt;&lt; 1)), so an exact division would look like this Python code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">def divide_by_3&#40;dividend&#41;:<br />    quotient = dividend * 0x55 // 0x100<br />    product = quotient + &#40;quotient &lt;&lt; 1&#41;<br />    if dividend - product &gt;= 3:<br />        quotient += 1<br />    return quotient</div><br />I did the same routine of multiply by reciprocal, multiply, and correct when dividing by 10 in a text formatting routine on the Game Boy Advance, which has hardware mul but lacks hardware div.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 11, 2011 1:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bogax]]></name></author>
<updated>2011-02-14T11:52:00-07:00</updated>
<published>2011-02-11T13:50:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73860#p73860</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73860#p73860"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73860#p73860"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Well I'll recommend to read this wiki article : <a href="http://wiki.nesdev.com/w/index.php/Division_by_a_constant_integer" class="postlink">http://wiki.nesdev.com/w/index.php/Division_by_a_constant_integer</a><br /><br />It is possible (and easy) to divide by 3 using only the accumulator, if the result don't exceed 8-bit that is. (the example code is for 4-bit, therefore there is 4 comparaisons, but if you need more bits in the result you need to do more comparaisons). If the result is 16-bit then you'd have to complicate the example code, splitting it into low and high 8-bits.<br /></div><br /><br /> Caveat: none of this code is tested.<br /><br /> An alternative is to multiply by the reciprocal.<br /> <br /> The reciprocal of 14 is (in binary) .0001001001001...<br /> Since 14 has non power of 2 factors the reciprocal<br /> is a repeating decimal which can be useful.<br /><br /> You need enough partial products to get your desired<br /> accuracy, that is, if you want it accurate to the nearest<br /> integer and the number you're dividing is a single byte<br /> (max value ~256) your smallest partial product needs to be<br /> &lt;1/256 so that that partial product is less than 1<br /> because you want it accurate to the nearest 1<br /> So in that case (one byte divided by 14 accurate to the<br /> nearest integer) you need to multiply by .0001001001<br /><br /> Defer the division of the partial products so that you<br /> retain as much accuracy as possible.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> sta temp<br /> lsr<br /> lsr<br /> lsr       ; A = number x .001 <br /><br /> ; don't clear the carry to get some rounding<br /><br /> adc temp  ; C,A now contain 1.001 x number<br /><br /> ror       ; ror not lsr, gotta keep C<br /> lsr  <br /> lsr<br /> adc temp  ; C,A now contain 1.001001 x number<br /> ror<br /> lsr<br /> lsr<br /> lsr       ; A= .0001001001 x number = number/14<br /></div><br /><br /> Because it'a a repeating decimal you could roll<br /> it up into a loop.<br /> not so useful for a single byte divided by 14<br /> but might be for 16 bits divided by 3<br /> Also since it's a repeating decimal you can<br /> Accumulate a partial product and save some adding.<br /><br /> 1/3 (decimal) = .010101010101... (binary)<br /><br /> And in the case of 1/3 it repeats bytewise so you<br /> can accumulate a byte's worth of partial product<br /> and then shift by bytes.<br /><br /> so you might eg do a loop that accumulates four<br /> of the partial products from the reciprocal and then<br /> add the high byte of that in, shifted one byte,<br /> to get the answer.<br /><br /> you'd generate number x .10101010<br /> then shift that by a byte and add it in to get<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   .10101010<br /> + .000000001010101<br /><br /> = .101010101010101<br /></div><br /> and if you're only doing 16 bits accuracy, you only need<br /> to add in the high byte (shifted by one byte)<br /><br /> some code (like I said, untested)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> ; A contains the number to be divided<br /><br /> ; enter with<br /> ; A containing the hi byte of the number to be divided by 3<br /> ; Y containing the lo byte of the number to be divided by 3 <br /><br /> ; the hi byte of the partial product is kept in A or saved<br /> ; on the stack when neccessary<br /><br /><br /> ; save the number in lo_temp, hi_temp<br /><br /> sty lo_temp<br /> sty lo_product<br /> sta hi_temp<br /><br /> ldy #$03<br /> clc<br /><br /> ; each pass of the loop divides the partial product by 4<br /> ; and then adds number in lo_temp, hi_temp to that<br /><br />LOOP<br /> ror<br /> ror lo_product<br /> lsr<br /> ror lo_product<br /> pha<br /> lda lo_product<br /> adc lo_temp<br /> sta lo_product<br /> pla<br /> adc hi_temp<br /> dey<br /> bne LOOP<br /><br /> ; C,A and lo_product should now contain 1.010101 x number<br /><br /> ror               ; get the high bit of the partial product<br /> ror lo_product    ; from C in to A so that A, lo_product now<br />                   ; contain .1010101 x number<br /> pha               ; save the hi byte of the partial product<br /> adc lo_product    ; and add it back in shifted by one byte<br /> sta lo_product<br /> pla<br /> adc #$00          ; propagate the carry from the lo byte<br />                   ; A, lo_product now contain<br />                   ; .101010101010101 x number <br /> lsr<br /> ror lo_product<br /></div><br /><br /><br />edit: fixed the wrong way shifts jeez what a mistake to make!<br /><br />edit: too many passes through the loop<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3594">bogax</a> — Fri Feb 11, 2011 1:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2011-02-08T02:50:48-07:00</updated>
<published>2011-02-08T02:50:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73685#p73685</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73685#p73685"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73685#p73685"><![CDATA[
Well I'll recommend to read this wiki article : <a href="http://wiki.nesdev.com/w/index.php/Division_by_a_constant_integer" class="postlink">http://wiki.nesdev.com/w/index.php/Division_by_a_constant_integer</a><br /><br />It is possible (and easy) to divide by 3 using only the accumulator, if the result don't exceed 8-bit that is. (the example code is for 4-bit, therefore there is 4 comparaisons, but if you need more bits in the result you need to do more comparaisons). If the result is 16-bit then you'd have to complicate the example code, splitting it into low and high 8-bits.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Feb 08, 2011 2:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2011-02-08T02:39:57-07:00</updated>
<published>2011-02-08T02:39:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73684#p73684</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73684#p73684"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73684#p73684"><![CDATA[
OK thanks I can try<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Tue Feb 08, 2011 2:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2011-02-07T23:57:11-07:00</updated>
<published>2011-02-07T23:57:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73683#p73683</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73683#p73683"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73683#p73683"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />some registers are already in use<br /></div><br /><br />Save them when entering the function. Restore them when exiting. Problem solved!<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It is a sixteen bit number I need to divide<br /></div><br /><br />I think the solution should be obvious here. You take his routine and modify it to use 16-bit variables. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" />  It's not that much work<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Mon Feb 07, 2011 11:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2011-02-07T16:57:48-07:00</updated>
<published>2011-02-07T16:57:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73673#p73673</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73673#p73673"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73673#p73673"><![CDATA[
It is a sixteen bit number I need to divide, and some registers are already in use. But I can learn from the examples. (It is being used in PPMCK, like I said I already have divide by two working, because it is just right shift. Do you know what PPMCK is?)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Mon Feb 07, 2011 4:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sivak]]></name></author>
<updated>2011-02-07T15:57:40-07:00</updated>
<published>2011-02-07T15:57:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73670#p73670</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73670#p73670"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73670#p73670"><![CDATA[
You could make a look up table (LUT), though that'd be 256 bytes.  Effectively, you'd calculate everything out by hand and have a table that'd look like this:<br /><br />.db 0,0,0,1,1,1,2,2,2 ...<br /><br />I have a division by 3 routine for my game, though I just use it to get boss health milestones.  May or may not be suitable for what you're doing...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">DivisionBy3Routine:<br />   LDA #0<br />   LDX #8<br />   ASL &lt;temp + 6<br />.L1: <br />   ROL A<br />   CMP #3<br />   BCC .L2<br />   SBC #3<br />.L2:<br />   ROL &lt;temp + 6<br />   DEX<br />      BNE .L1<br />   RTS<br /></div><br /><br />The result is stored in a variable called temp + 6.  The remainder is in X.  temp + 6 gets loaded with whatever number you want to divide by before calling this routine.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3374">Sivak</a> — Mon Feb 07, 2011 3:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2011-02-07T13:08:17-07:00</updated>
<published>2011-02-07T13:08:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73660#p73660</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73660#p73660"/>
<title type="html"><![CDATA[Divide by three]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7463&amp;p=73660#p73660"><![CDATA[
I have the PPMCK code to divide by two, for selecting the octave. This is good, and I also added a #CUSTOM-TUNING command to make music other than 12-TET. But I also want to add the code to divide by three (which code is selected depends on macro), so that Bohlen-Pierce musics can also be written using PPMCK.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Mon Feb 07, 2011 1:08 pm</p><hr />
]]></content>
</entry>
</feed>