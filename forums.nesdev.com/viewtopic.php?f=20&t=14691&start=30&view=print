<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What instead of indexed addressing modes?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What instead of indexed addressing modes?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=14691">http://forums.nesdev.com/viewtopic.php?f=20&amp;t=14691</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 19, 2018 8:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That gets complicated when each actor ends up with dozens of different <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Uses</tt> flags, one for each possible line that could be in or not in a particular actor's script, that need to get copied from the actor's prototype. It gets doubly complicated when a line in the Grand Unified Script needs to turn a bunch of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Uses</tt> flags on and off when an actor goes in or out of a particular state.<br /><br />Today I decided to look at how commercial games solve the <a href="https://forums.nesdev.com/viewtopic.php?p=211076#p211076" class="postlink">SOA vs. AOS</a> dilemma. But I discovered that very few <a href="http://datacrystal.romhacking.net/wiki/Category:GB/C_games" class="postlink">Game Boy games listed on Data Crystal</a> actually have their RAM map substantially filled in. The first one I found was <a href="http://datacrystal.romhacking.net/wiki/Wario_Land:_Super_Mario_Land_3:RAM_map" class="postlink">that of <em>Wario Land</em></a>, which has an 8-entry actor table at $A200, where the actors occupy $A200-$A213, $A220-$A233, $A240-$A253, ..., $A2E0-$A2F3. I guess this validates the <a href="https://forums.nesdev.com/viewtopic.php?p=210296#p210296" class="postlink">array of 32-byte-aligned actor structures</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Mon Mar 19, 2018 9:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've recently started tumbling down the Z80 rabbit hole.. Only I have a full Z80 at my disposal and 6502 that I can jump back to when the going gets too hot for the Z80 <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> <br /><br />I'm starting to think that the dispatch is the way to solve the issue. <br />We are use to doing<br /><br />Get thing,x<br />and state<br />bne _next<br />    lda otherData,x<br />    adc moreData,x<br />    sta otherData,x<br />and state2<br />bne _next2<br />...thing2<br /><br />while for Z80 it might be better to use the &quot;use bits&quot; as a dispatch. <br />ld use<br />&lt;&lt;2<br />add Base Pointer<br />call<br /><br />this way you put a function that knows what the use cases are and can handle the bits without having to look them up.  Saving the need to index into multiple tables.<br /><br />Not done too much experimentation yet, as I'm still trying to find an assembler that isn't circa 1982. Or one that is 1987 spec but isn't trapped on a machine that is slow...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri May 11, 2018 11:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My bad luck continues. I searched Google for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">8080 record field access</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">8080 struct field access</tt>, hoping to stumble on some idiom that has become common practice, but most results were some website hosted on port 8080, not Intel 8080. I tried <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">8080 assembly struct field access</tt>, and Google tried to second guess me with &quot;Missing: <s>8080</s>&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Fri May 11, 2018 12:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you put a search term in quotes Google won't show you results without it.<br /><br />You might try looking at the output of 8080 or GBZ80 C compilers when interacting with structs to see how they handle the problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri May 11, 2018 5:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">You might try looking at the output of 8080 or GBZ80 C compilers</div><br />In other words, the godbolt solution. I'd've tried that if SDCC were any good. See <a href="https://gist.github.com/ISSOtm/4f4d335c3fd258ad0dfc7d4d615409fd" class="postlink">&quot;To C or not to C?&quot; by ISSOtm</a>.<br /><div class="quotetitle">ISSOtm wrote:</div><div class="quotecontent">[GBDK is] built on an ancient build of SDCC, which is known to generate poor (bloated) and often straight up wrong code.</div><br />What C compilers targeting 8080 are any good? Any luck with, say, <a href="https://www.bdsoft.com/resources/bdsc.html" class="postlink">BDS C</a>?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Fri May 11, 2018 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It might be worth giving SDCC a shot anyway - it's still under active development, and the aforementioned &quot;ancient build of SDCC, which is known to generate poor (bloated) and often straight up wrong code&quot; that GBDK is based on is 17 years old.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu May 24, 2018 8:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In GBDev Discord, ISSOtm announced an <a href="https://github.com/ISSOtm/rgbds-structs" class="postlink">RGBDS macro pack to define structs</a> and is trying to figure out how to best distribute it. Alongside this came some practical idioms for struct field access. <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ; Prep: 3 mcycles each<br />&nbsp; ld de,self<br />&nbsp; ld bc,other_actor<br /><br />&nbsp; ; Random field load/store: 7 mcycles, BC preserved<br />&nbsp; ld hl,offsetof(Actor, xsub)&nbsp; ; 3<br />&nbsp; add hl,de&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; ld a,&#91;hl&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; ; Compare 6502: 5 cycles (minus 1 for load not crossing page)<br />&nbsp; lda actor_xsub,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 4<br /><br />&nbsp; ; Random field arithmetic: 8 mcycles, BC preserved<br />&nbsp; ld hl,offsetof(Actor, xsub)&nbsp; ; 3<br />&nbsp; add hl,de&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; ld l,&#91;hl&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; add a,l&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 1<br />&nbsp; ; Compare 6502: 4 cycles (plus 1 for crossing page)<br />&nbsp; add actor_xsub,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 4<br /><br />&nbsp; ; Store constant in field: 8 mcycles, ABC preserved<br />&nbsp; ld hl,offsetof(Actor, frame)&nbsp; ; 3<br />&nbsp; add hl,de&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2<br />&nbsp; ld &#91;hl&#93;,FRAME_JUMP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; ; Compare 6502: 7 cycles and A is clobbered<br />&nbsp; lda #FRAME_JUMP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2<br />&nbsp; sta actor_xsub,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 5<br /></div><br />Roughly: LR35902 is faster for sequential access, and 6502 is faster for random access. Try counting <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">aaaa,X</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&#40;dd&#41;,Y</tt> accesses in your NES program to estimate what parts might become slower or faster respectively.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>