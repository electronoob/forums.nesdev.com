<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=11649" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-02-13T16:03:50-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=11649</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-13T16:03:50-07:00</updated>
<published>2015-02-13T16:03:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=141134#p141134</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=141134#p141134"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=141134#p141134"><![CDATA[
I've released version 0.05 incorporating improvements based on the suggestions made by koitsu and Espozo.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 13, 2015 4:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2015-02-10T21:14:01-07:00</updated>
<published>2015-02-10T21:14:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140983#p140983</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140983#p140983"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140983#p140983"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The justification for this is that changes to one line often require every line to be edited. That makes it more effort to change, and harder to understand diffs.<br /></div>However, in a tutorial, accessibility ideally trumps all, including creator time. And you probably aren't going to be altering line width THAT much.<br /><br />Should the programming practices discussion get its own threadsplit? <span style="font-size: 50%; line-height: normal">I still think rolled loops are more readable.</span><br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />3. Changed rep #$38 into rep #$30/cld, and moved the cld up to inside of resetstub. This makes it clearer what's going on within reset_fastrom. Also added comment explaining what cld does.<br /></div> I'd use REP #$38 and point out the equivalence in a comment, were I writing it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Tue Feb 10, 2015 9:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-10T18:41:12-07:00</updated>
<published>2015-02-10T18:41:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140971#p140971</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140971#p140971"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140971#p140971"><![CDATA[
Is this an improvement at all?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Feb 10, 2015 6:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-07T09:04:30-07:00</updated>
<published>2015-02-07T09:04:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140733#p140733</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140733#p140733"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140733#p140733"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />ROMSPEED_200NS (not ROMSPEED_120NS, which I think you'd need to fix)<br /></div><br />I've since moved the segments to $808000, etc.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  # The fast ROM area starts at $808000.<br />  # It's mirrored into the slow ROM area.<br />  ROM0:       start =  $808000, size = $8000, fill = yes;<br />  ROM1:       start =  $818000, size = $8000, fill = yes;<br /></div><br /><br />I've also added a snippet to the end of the init code that sets the ROM access speed as specified in the ROM header.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; in snesheader.s<br />.export map_mode:far<br />; ...<br />map_mode:<br />  .byte MAPPER_LOROM|ROMSPEED_200NS<br /><br />; in init.s<br />MEMSEL = $80420D  ; S-CPU I/O: bit 0 enables fast ROM above $808000<br />; inside reset_fastrom<br />  lda map_mode<br />  and #$10<br />  lsr a<br />  lsr a<br />  lsr a<br />  lsr a<br />  sta MEMSEL<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I thought you and thefox said that it was possible to get the address of a MEMORY or SEGMENTS label within code itself? If that's the case, then the STACK_BASE/STACK_SIZE/LAST_STACK_ADDR and ZEROPAGE_BASE stuff shouldn't exist<br /></div><br />Direct page I can do.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.import __ZEROPAGE_RUN__<br /><br />; Mask off low byte to allow use of $000000-$00000F as local variables<br />ZEROPAGE_BASE = __ZEROPAGE_RUN__ &amp; $FF00<br /></div><br /><br />There are two good ways to reserve space for the stack: as a constant address outside any defined <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">MEMORY</tt> area or as the top of a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.RES</tt> inside <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.segment &quot;BSS&quot;</tt>. The program is currently using the former method. To use the latter, I could start BSS at $0100 and have this in init:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;BSS&quot;<br />stack: .res $100<br />stack_end:<br /><br />; Then at the top of init_fastrom:<br />  ldx #stack_end-1<br />  txs<br /></div><br />Would this be a better way?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Spacing of equate/= assignments. These should line up, making it visually easy for the person to know what's what. You (to date) are the only 65xx programmer I've met who doesn't &quot;align&quot; his formatting.<br /></div><br />Apparently other people disagree with you and prefer not lining up the equal signs in a pseudo-tabular form. See <a href="https://stackoverflow.com/questions/101958/code-formatting-is-lining-up-similar-lines-ok" class="postlink">Code formatting: is lining up similar lines ok?</a><br /><blockquote style="margin-left: 1%; padding-left: 1%; border-left: 3px solid #555577;">The justification for this is that changes to one line often require every line to be edited. That makes it more effort to change, and harder to understand diffs.</blockquote><br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />if it was from the start I would be screaming loudly over &quot;just two spaces then a semicolon, who cares&quot;. It really doesn't flow well.<br /></div><br />I guess failure to horizontally align comments is another habit I picked up from C and other high-level languages, where the length of a line of code varies considerably. Even in assembly language, longer expressions such as several constants OR'd together may cause a statement to exceed 24 columns, such as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.byte MAPPER_LOROM|ROMSPEED_200NS</tt>. An editor can be set to make everything after an unquoted <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">;</tt> character pink anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Feb 07, 2015 9:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2015-02-07T05:49:23-07:00</updated>
<published>2015-02-07T05:49:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140731#p140731</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140731#p140731"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140731#p140731"><![CDATA[
Looks right to me.  I was about to throw a tiny tantrum about resetstub being in segment CODE while reset_fastrom was in segment CODE7, but I understand why you did that (and I was going to write a rebuttal against it, but after some deep thought, I figured that actually makes the most overall sense).  I'll assume that the template sets CODE7 to bank $80 or at least between bank $80-FF.<br /><br />Just please remember that the lorom256k.cfg template I saw (when doing stuff for Espozo) used MAPPER_LOROM (mode $20, which is 100% okay -- banks $80-FF get mirrored through bank $00-7D, with $7E/7F lost because of WRAM), and ROMSPEED_200NS (not ROMSPEED_120NS, which I think you'd need to fix).<br /><br />Other nitpicks:<br /><br />1. Use of rep #$38, rather than cld/rep #$30.  This is another example of ridiculous optimisation for little gain -- you save 1 byte and 2 cycles at the expensive of confusing a newbie.  98% of code out there is going to use rep/sep with $10/$20/$30 and nothing else.  We've already seen evidence of this being confusing for Espozo, so clearing of d of P through rep rather than just doing cld is silly, IMO.<br /><br />2. I thought you and thefox said that it was possible to get the address of a MEMORY or SEGMENTS label within code itself?  If that's the case, then the STACK_BASE/STACK_SIZE/LAST_STACK_ADDR and ZEROPAGE_BASE stuff shouldn't exist -- you should just be able to use whatever magic there is to do the equivalent of (pseudo code coming up) ldx #(.SEGMENT(STACK)+.sizeof(.SEGMENT(STACK))-1)/txs, and lda #.SEGMENT(DIRECTPAGE)/tcd.<br /><br />3. The register equates should end up in a separate file if at all possible, and as mentioned before (again your call), use the official SNES label designation.  (No I don't like the names of some of them, but consistency is good)<br /><br />So now onto the formatting, and some of the above integrated:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Make sure these conform to the linker script (e.g. lorom256.cfg).<br />ZEROPAGE_BASE   = $0000<br />STACK_BASE      = $0100<br />STACK_SIZE      = $0100<br />LAST_STACK_ADDR = STACK_BASE + STACK_SIZE - 1<br /><br />PPU_BASE        = $2100<br />CPUIO_BASE      = $4200<br /><br />.segment &quot;CODE&quot;<br />.proc resetstub<br />  sei                 ; turn off IRQs<br />  clc<br />  xce                 ; turn off 6502 emulation mode<br />  cld                 ; disable decimal mode<br />  jml reset_fastrom<br />.endproc<br /><br /><br />.segment &quot;CODE7&quot;<br />.proc reset_fastrom<br />  rep #$30               ; A=16, X/Y=16<br />  ldx #LAST_STACK_ADDR<br />  txs                    ; set the stack pointer<br /><br />  ; Initialize the CPU I/O registers to predictable values<br />  lda #CPUIO_BASE<br />  tcd                    ; temporarily move direct page to SNES MMIO region for fast MMIO access<br /><br />  ; 8&lt; 8&lt; 8&lt; a bunch of stuff omitted &gt;8 &gt;8 &gt;8<br /><br />  lda #ZEROPAGE_BASE<br />  tcd                    ; return direct page to real zero page<br />  jml main               ; this is why I say the program bank is main &gt;&gt; 16<br />.endproc<br /></div><br />Key things changed here:<br /><br />1. Spacing of equate/= assignments.  These should line up, making it visually easy for the person to know what's what.  You (to date) are the only 65xx programmer I've met who doesn't &quot;align&quot; his formatting.  Hate to single you out, but I'm being honest.  Your style is your style and if I was working with you on a project and you did most of the work when I started, I'd conform to your style no matter what (that's the approach I take when collaborating), but if it was from the start I would be screaming loudly over &quot;just two spaces then a semicolon, who cares&quot;.  It really doesn't flow well.<br /><br />2. Comments should be aligned as best as possible.  The way I do this is the following: in the &quot;general area&quot; of the code, I find the longest line/instruction, then add 3 spaces, and that's where the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">;</tt> for comments should &quot;align&quot; to throughout the surrounding code.  If there are large amounts of &quot;alignment&quot; changes, then I tend to add an extra newline between &quot;parts&quot; of code, e.g. between two separate .procs, two separate .segments, etc..  You can see an example of this in resetstub vs. reset_fastrom, and the extra newline before .segment CODE7.  In fact, adding some spacing (newlines) before a new .segment is very useful (to me) -- otherwise it's very easy to &quot;forget&quot; what segment you're working in.<br />  <br />3. Changed rep #$38 into rep #$30/cld, and moved the cld up to inside of resetstub.  This makes it clearer what's going on within reset_fastrom.  Also added comment explaining what cld does.<br /><br />4. I documented what exactly rep #$30 did to A and X/Y sizes.  You can ABSOLUTELY remove this comment if needed; I've gotten in the habit of doing this in the past few weeks due to Espozo, so it's a habit at this point.  If I was writing my own code I wouldn't comment it.<br /><br />5. Moved comment about &quot;temporarily move direct page&quot; to the actual tcd statement, since for your ldx #LAST_STACK_ADDR/txs example above, you had the equivalent of that type of command on the txs line, not the ldx line.  I did the same for the lda #ZEROPAGE_BASE/tcd line.  It's important to be consistent about your comments and where you put them.<br /><br />I hope my comments (pun intended) are taken as constructive.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Sat Feb 07, 2015 5:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-06T23:19:30-07:00</updated>
<published>2015-02-06T23:19:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140721#p140721</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140721#p140721"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140721#p140721"><![CDATA[
You mean like this excerpt from my current init code?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Make sure these conform to the linker script (e.g. lorom256.cfg).<br />ZEROPAGE_BASE = $0000<br />STACK_BASE = $0100<br />STACK_SIZE = $0100<br />LAST_STACK_ADDR = STACK_BASE + STACK_SIZE - 1<br /><br />PPU_BASE = $2100<br />CPUIO_BASE = $4200<br /><br />.segment &quot;CODE&quot;<br />.proc resetstub<br />  sei  ; turn off IRQs<br />  clc<br />  xce  ; turn off 6502 emulation mode<br />  jml reset_fastrom<br />.endproc<br /><br />.segment &quot;CODE7&quot;<br />.proc reset_fastrom<br />  rep #$38   ; go to 16-bit binary mode<br />  ldx #LAST_STACK_ADDR<br />  txs        ; set the stack pointer<br /><br />  ; Initialize the CPU I/O registers to predictable values<br />  lda #CPUIO_BASE     ; temporarily move direct page <br />  tcd<br />  ; 8&lt; 8&lt; 8&lt; a bunch of stuff omitted &gt;8 &gt;8 &gt;8<br /><br />  lda #ZEROPAGE_BASE  ; return direct page to real zero page<br />  tcd<br />  jml main   ; this is why I say the program bank is main &gt;&gt; 16<br />.endproc<br /></div><br /><br />The Game Boy Advance has <em>three</em> different mirrors of ROM that can be set to operate at different speeds. It boots in slow ROM mode (wait states 4n/2s), and most games switch the main mirror to fast ROM (3n/1s). The SuperCard adapter doesn't support fast ROM, so writes to the speed control register actually have to be patched out. I'm not aware of any GBA game that uses fastest ROM (2n/1s), but later GBA flash cartridges support it for enhanced frame rate in 3D games.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 06, 2015 11:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2015-02-06T22:39:23-07:00</updated>
<published>2015-02-06T22:39:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140720#p140720</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140720#p140720"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140720#p140720"><![CDATA[
That doc file looks beautiful and wonderful, tepples.  I fully wholeheartedly approve.  Big, BIG thumbs up.<br /><br />The only thing I think might be wrong in it is the program bank (K).  That should be $00 on power-on.  That's because the CPU starts up in 65c02 emulation mode.  The programmer should sei/clc/xce/jml to the next instruction (this sets K).  phk/plb after is also recommended as you state, but up to the programmer based on their needs.<br /><br />Also, just a general thing, but you should also do a long jump inside of your NMI.  It ensures that your NMI will execute out of bank $80, thus getting the benefits from fastrom (3.58MHz).  I recommend people do this regardless if mode 20, mode 21, slowrom, or fastrom -- it's a good habit in general, and harmless in non-fastrom modes.<br /><br />I've attached the official documentation on why both of these needed.  The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">~</tt> (tilde) on the end of the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">JMP</tt> instructions are to indicate to the Nintendo-sanctioned assembler to use a 24-bit long jump, thus setting K.  Edit: sorry, I guess both are technically &quot;65816 things&quot;, it's just that I'm used to the memory map on the IIGS and I've never experimented with fastrom on the SNES.  (Guilty admission: I used to think you could just toggle CPU speed through that one SNES MMIO register and &quot;everything would work&quot;, it wasn't until I got access to developers docs that explained only certain banks operate at high speed)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Feb 06, 2015 10:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-06T22:23:55-07:00</updated>
<published>2015-02-06T22:23:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140718#p140718</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140718#p140718"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140718#p140718"><![CDATA[
<div class="quotetitle">Khaz wrote:</div><div class="quotecontent"><br />The time difference is irrelevant but loops would save (a tiny amount of) precious rom space.<br /></div><br />ROM space was precious on Atari 2600. It's not quite as precious on Super NES, where the launch titles were literally 128 times as big. But that's why I used the Squenix D=$2100 (saves one byte per write) and 16-bit STZs (cuts about a quarter of the writes).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />For the purpose of an instructional example though I would say it's better to store them all manually if only so you can comment along the way and explain each one.<br /></div><br />Here's the explanation I put in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">docs/init.txt</tt>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A valid Super NES program must write to all writable ports in the<br />S-CPU I/O and S-PPU at the start of a program.  This way, the<br />machine starts in a known state.  The code in init.s establishes<br />the following initial state:<br /><br />S-CPU registers<br /><br />A, X, Y: unspecified<br />Program bank: main &gt;&gt; 16<br />Data bank: unspecified (programs might want to PHK PLB)<br />P: decimal mode off, width 16-bit<br />S: $01FF<br />D: $0000<br /><br />S-CPU I/O<br /><br />4200=00         Disable vblank NMI and htime/vtime IRQ<br />4201=FF         Set pin 6 of controller ports high<br />4202=00         Multiply 0 by 0<br />4203=00<br />4204=00         Divide 0 by 0 (OH SHI--)<br />4205=00<br />4206=00<br />4207=00         htime = top of picture<br />4208=00<br />4209=00         vtime = left side of scanline<br />420A=00<br />420B=00         Stop DMA copies<br />420C=00         Stop HDMA<br />420D=00         Access $808000-$FFFFFF as slow ROM<br /><br />S-PPU<br /><br />2100=80         Forced blanking<br />2101=00         Sprites 8x8 and 16x16, patterns at $0000-$1FFF<br />2102=00         OAM address: $0000<br />2103=00<br />2104: skip      OAM write port<br />2105=00         Background mode 0, all layers using 8x8 pixel tiles<br />2106=00         Mosaic off<br />2107=00         BG1 nametable at $0000, 1x1 screen<br />2108=00         BG2 nametable at $0000, 1x1 screen<br />2109=00         BG3 nametable at $0000, 1x1 screen<br />210A=00         BG4 nametable at $0000, 1x1 screen<br />210B=00         BG1 and BG2 tiles at $0000<br />210C=00         BG3 and BG4 tiles at $0000<br />210D=00 00      BG1 scroll at (0, 1).  The S-PPU skips the first line<br />210E=00 00      of the picture, so Y=0 means start at line 1 of BG.<br />210F=00 00      BG2 scroll at (0, 1)<br />2110=00 00<br />2111=00 00      BG3 scroll at (0, 1)<br />2112=00 00<br />2113=00 00      BG4 scroll at (0, 1)<br />2114=00 00<br />2115=80         Add 1 word to VRAM address after high byte write<br />2116=00         VRAM address starts at 0<br />2117=00<br />2118-9: skip    VRAM write port<br />211A=00<br />211B=00 01      Set the mode 7 matrix to the identity matrix<br />211C=00 00      &#91; 1.0  0.0 &#93;<br />211D=00 00      &#91; 0.0  1.0 &#93;<br />211E=00 01<br />211F=00 00      Mode 7 scroll at (0, 0)<br />2120=00 00<br />2121=00         CGRAM address = 0<br />2122: skip      CGRAM write port<br />2123=00         Disable windows on BG1 and BG2<br />2124=00         Disable windows on BG3 and BG4<br />2125=00         Disable windows on sprites and blending<br />2126=00         Window 1 left side = 0<br />2127=00         Window 1 right side = 0<br />2128=00         Window 2 left side = 0<br />2129=00         Window 2 right side = 0<br />212A=00         Combine background windows using OR logic<br />212B=00         Combine sprites and blending using OR logic<br />212C=00         Enable no layers on main screen<br />212D=00         Enable no layers on sub screen<br />212E=00         Disable no layers on main screen within the window<br />212F=00         Disable no layers on sub screen within the window<br />2130=30         Disable blending and 332 palette<br />2131=00         Disable blending for all layers<br />2132=E0         Set entire COLDATA to 0<br />2133=00         Disable interlace and pseudo-hires, 224 lines<br /></div><br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />[In WLA,] The .base directive is broken and messes with hirom<br /></div><br />So does this template, which is designed for LoROM. I want to make sure it's free of poor practices before I try making a HiROM version.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />If this was a discussion about VRAM clear/init, CGRAM clear/init, OAM clear/init, WRAM clear/init, then that's all fine and dandy<br /></div><br />OAM and nametables are cleared in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ppuclear.s</tt>. CGRAM and pattern tables aren't cleared, but colors and tiles are DMA'd into memory in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bg.s</tt> (for background) and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">player.s</tt> (for sprites). WRAM clear is one of those holy wars; tokumaru probably has a different point of view from the inventors of C.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 06, 2015 10:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2015-02-06T17:53:22-07:00</updated>
<published>2015-02-06T17:53:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140710#p140710</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140710#p140710"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140710#p140710"><![CDATA[
It's a &quot;hot-button issue&quot; because:<br /><br />1) This kind of thing used to happen back in the 90s snesdev days, where &quot;newcomers&quot; would somehow latch on to (get overly obsessed with) the init routine and start &quot;optimising it&quot; even though it doesn't need optimising (just do the register sets like Nintendo says and be done with it).  I'm not kidding when I say I must have seen this 20 times during the snesdev days, and a scary number recently as well (covered below), <br /><br />2) There was <a href="http://forums.nesdev.com/viewtopic.php?p=126447#p126447" class="postlink">a recent thread about it</a> where a bunch of people showed up to try and &quot;optimise&quot; (and some routines flat out had bugs in them) -- to me, it's just another rehash of #1, 20+ years later,<br /><br />3) The code being mentioned/referenced in <a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12268" class="postlink">a different thread</a> contained two separate init routines (InitSNES.asm and InitSNES2.asm), where the comments indicate they're written by the same person, but I think one of them might be from bazz (fellow here on the forum), not sure (and if not, then that means there are at least 3 routines floating around), followed in that same thread by <a href="http://forums.nesdev.com/viewtopic.php?p=140304#p140304" class="postlink">this</a> (which I can't figure out -- maybe it was meant for another thread, I don't know, but once again focusing on the Init routine...), followed by <a href="http://forums.nesdev.com/viewtopic.php?p=140682#p140682" class="postlink">even ANOTHER routine being written</a> (this time using the lda/tcd technique -- I said fine, go ahead and do it because I'm just about finished with all of this, but there's just no point to doing it that way).<br /><br />I want people to seriously look at the <a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12268" class="postlink">16bit table indexing problem</a> thread and actually take the time to look at what a newcomer to SNES development goes through.  I want people to stop their brains, sit down, and imagine being Espozo.  I want people to think about how frustrating it must be to get some code handed to you only to not understand a ton of it -- even an init routine -- because it's written &quot;fancy&quot; <strong>when it doesn't need to be</strong> (with regards to the init routine).  <strong>Please do not forget the subject line of THIS thread!  This is TRAINING MATERIAL!</strong>  Keep it simple/clear!<br /><br />Any arguments about &quot;saving ROM space&quot; I'll ignore simply because they're silly (just my opinion) -- unlike the NES/FC, there are very few SNES/SFC games that were extremely tight with ROM space and thus required the programmer to say &quot;hey I know, I'll try to save some bytes by 'optimising the power-on init routine'&quot;.  There are bigger fish to worry about.  In those situations, the primary focus becomes &quot;how can I decrease my data size (graphics, structures, etc.)&quot; and often resulted in some simple form of compression (e.g. RLE) to deal with it.  The init routine isn't a focus.<br /><br />I hope this clears up why it's a &quot;hot-button issue&quot; for me.  The power-on register init routine is something that a programmer should write once (and it's already been written, a zillion years ago, and does not need changing), total focus time maybe 30 seconds.  If this was a discussion about VRAM clear/init, CGRAM clear/init, OAM clear/init, WRAM clear/init, then that's all fine and dandy (using DMA is usually the best way to nuke those though, given that you have to write a general DMA macro or subroutine for general use anyway).  But the power-on/reset init is something that doesn't need this degree of focus, yet for whatever reason people latch on to it, and continue to latch on to it 20 years later, despite needing absolutely none of this focus.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Feb 06, 2015 5:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-06T17:38:50-07:00</updated>
<published>2015-02-06T17:38:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140708#p140708</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140708#p140708"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140708#p140708"><![CDATA[
Yes. The .base directive is broken and messes with hirom and, more importantly, look at what happened here: (according to my code, the registers that I stored information into are the same one I loaded from, but when WLA assembled it, it went to the wrong register for some reason unknown.)<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />I just learned something new.  WLA is a total piece of crap.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">0082ea ldy #$0000             A:0000 X:0000 Y:0000 S:1fff D:0000 DB:00 nvMxdiZC V:230 H:  30<br />0082ed ldx #$8401             A:0000 X:0000 Y:0000 S:1fff D:0000 DB:00 nvMxdiZC V:230 H:  54<br />0082f0 <em><span style="text-decoration: underline"><strong>sty $1808     [001808]</strong></span></em> A:0000 X:8401 Y:0000 S:1fff D:0000 DB:00 NvMxdizC V:230 H:  78<br />0082f3 <em><span style="text-decoration: underline"><strong>stx $180a     [00180a]</strong></span></em> A:0000 X:8401 Y:0000 S:1fff D:0000 DB:00 NvMxdizC V:230 H: 118<br />0082f6 jsr $820e     [00820e] A:0000 X:8401 Y:0000 S:1fff D:0000 DB:00 NvMxdizC V:230 H: 158<br />00820e php                    A:0000 X:8401 Y:0000 S:1ffd D:0000 DB:00 NvMxdizC V:230 H: 204<br />00820f rep #$10               A:0000 X:8401 Y:0000 S:1ffc D:0000 DB:00 NvMxdizC V:230 H: 226<br />008211 sep #$20               A:0000 X:8401 Y:0000 S:1ffc D:0000 DB:00 NvMxdizC V:230 H: 248<br />008213 <em><span style="text-decoration: underline"><strong>ldy $08       [000008]</strong></span></em> A:0000 X:8401 Y:0000 S:1ffc D:0000 DB:00 NvMxdizC V:230 H: 270<br />008215 <em><span style="text-decoration: underline"><strong>ldx $0a       [00000a]</strong></span></em> A:0000 X:8401 Y:0000 S:1ffc D:0000 DB:00 nvMxdiZC V:230 H: 302<br />008217 lda $00,x     [000000] A:0000 X:0000 Y:0000 S:1ffc D:0000 DB:00 nvMxdiZC V:230 H: 334<br />008219 beq $822e     [00822e] A:0000 X:0000 Y:0000 S:1ffc D:0000 DB:00 nvMxdiZC V:230 H: 364<br />00822e plp                    A:0000 X:0000 Y:0000 S:1ffc D:0000 DB:00 nvMxdiZC V:230 H: 386<br />00822f rts                    A:0000 X:0000 Y:0000 S:1ffd D:0000 DB:00 NvMxdizC V:230 H: 414<br /></div></div><br />There's also some other minor things, but these are the main problems I've seen.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Someone had problems lately. But I'm not sure if they were using up-to-date builds, which also got posted here lately.<br /></div><br />That someone being me. And yes, I was using an up-to-date build, it's just that the aforementioned problems still haven't been fixed. <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Fri Feb 06, 2015 5:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2015-02-06T17:36:04-07:00</updated>
<published>2015-02-06T17:36:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140707#p140707</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140707#p140707"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140707#p140707"><![CDATA[
<a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12268" class="postlink">Someone had problems</a> lately. But I'm not sure if they were using up-to-date builds, which also <a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12334" class="postlink">got posted here</a> lately.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Fri Feb 06, 2015 5:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Khaz]]></name></author>
<updated>2015-02-06T17:32:07-07:00</updated>
<published>2015-02-06T17:32:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140705#p140705</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140705#p140705"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140705#p140705"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">While describing each of the bits in an MMIO register the way you do is understandable (for quick reference), I imagine most people doing development fall into two categories: a) not knowing what the bits do + already have something open (PDF, etc.) that documents them, or b) know what the bits do and don't need the quick reference.<br /></div>I need the quick reference to save me from having to pull up Fullsnes all the time. You might notice I did the same with &quot;pin8gba.h&quot; back when I was homebrewing for GBA.</div>I don't know about anyone else, but a good chunk of the reference documents I've used have been scattered into my source code as comments just so that I don't have to keep looking them up constantly.<br /><div class="quotetitle">Myask wrote:</div><div class="quotecontent"><br />Normally, unrolled loops and heavy-duty for-time optimization are for either a. time-critical code (like in VBLANK on NES) and b. oft-called code. Initialization is neither, and tens of loop iterations are going to lose negligible time.<br /></div>Honestly I'm inclined to agree with Myask's point of view.  The time difference is irrelevant but loops would save (a tiny amount of) precious rom space.  For the purpose of an instructional example though I would say it's better to store them all manually if only so you can comment along the way and explain each one.  They're both easy for me to read but for someone new I think the loops would be an unnecessary complication...<br /><br />By the way, there's a lot of talk of using ca65 instead of wla around here.  Is there something wrong with wla that I should know about?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6817">Khaz</a> — Fri Feb 06, 2015 5:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2015-02-06T16:58:53-07:00</updated>
<published>2015-02-06T16:58:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140703#p140703</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140703#p140703"/>
<title type="html"><![CDATA[Re: The devil needs an advocate]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140703#p140703"><![CDATA[
This seems to be a bit of a hot-button issue for you. I wonder why.<br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Well, the preceding paragraph is badly translated, so it's difficult (without seeing the Japanese docs) to know what exactly they're trying to say. It all sounds flexible up until the very end where it says &quot;...and initial settings must be performed&quot;. The chapter is called &quot;Register Clear (Initial Settings)&quot;, so the way I've always read the paragraph is: &quot;no matter what you do later in the code, you need to make sure these exact values are written to their associated registers on reset (power-on)&quot;.<br /></div>And poor translation from Japanese to English can be horrendous, as I'm sure we all know.<br />Still, this seems a bit cargo-cult-programming-ish to me. You even named it &quot;magic&quot;. (Yes, seems, not is; I looked at the docs and elsewhere it appears to underscore the need to clear the registers.)<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />The official docs <strong>don't include any code</strong> -- they just tell you what each register needs to be set to value-wise on reset. So no, it's simply people being ridiculous and for some reason thinking that this one-time-called routine deserves loops and other nonsense (like &quot;don't bother initialising some registers because we set them in the near future anyway&quot; -- WHO CARES, <strong>do the init exactly like Nintendo says,</strong> do it one time, and stop worrying about the rest!)<br /></div><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />meaning it's the closest to the official init routine Nintendo mandates,<br /></div><br />If all they have is register values, they have not mandated any kind of routine; they don't even mandate an order (in the page you posted).<br /><s>If they&#39;re going to set them soon, then it is a waste to set them up first and there is no good reason to leave it in, save &quot;limited programmer time&quot;.</s>OK, skimmed, various <em>other</em> places appear to say &quot;clear the registers first&quot;.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />I WISH PEOPLE WOULD STOP SCREWING AROUND WITH THE INIT ROUTINES: THERE IS NOTHING TO FIX/OPTIMISE IN THEM. THEY ARE RUN *ONCE* DURING RESET/POWER-ON. JUST USE THE VALUES NINTENDO GIVES YOU IN THE OFFICIAL DOCS AND BE DONE WITH IT. YOU DO NOT NEED LOOPS ETC. (THOSE ARE JUST SLOWER THAN UNROLLED) AND ALL IT DOES IS OBFUSCATE THE CODE. PLEASE STOP WRITING INIT ROUTINES OR &quot;OPTIMISING THEM&quot;.<br /></div><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Again, remember, ROUTINE IS ONLY USED ONCE.<br /></div>So, unlike a routine that gets run incredibly often multiple times, it has the worst possible speed payoff for unrolling. (Well, there is code that NEVER gets run, but...) Normally, unrolled loops and heavy-duty for-time optimization are for either a. time-critical code (like in VBLANK on NES) and b. oft-called code. Initialization is neither, and tens of loop iterations are going to lose negligible time. And, if we really are going to insist on having the <em>best possible init routine</em>, <div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />And yes, there is some redundant code in there<br /></div>then redundant loads are not going to be the way.<br /><br />So, reasons people would write their own init routines (with loops):<ul><li>Not using someone else's code or concept, for either IP reasons, (that is, so they don't have to find you/license your code/credit you/pay you/get sued by you, depending on how paranoid they are)</li><li>-or so that they have no black box, cargo-cult programming.</li><li>-or so they have a personalized understanding of their program; doing generally leads to more learning than reading.</li><li>Practice writing code in this new environment- including </li><li>...what registers are where. (Certainly not something happening with un-named register addresses...but see below.)</li><li>If the routine will be included in all projects, then it would probably be better not to screw with omitting values, but...that means it's also now getting included in more SPACEs.</li><li>Loops are easier to program.</li><li>(style variance) Loops do not &quot;obfuscate code&quot;; they're a lot easier for me to read than that uncommented block of sta/stz you've got there.</li></ul><br />Looking at SNESdevwiki, posting the SnesInit.asm snippet with the comments in naming the registers would have looked better than this block of raw stz's, too.<br /><br />ed: I am curious what led you to believe it's badly translated.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Fri Feb 06, 2015 4:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2015-02-06T12:55:16-07:00</updated>
<published>2015-02-06T12:55:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140698#p140698</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140698#p140698"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140698#p140698"><![CDATA[
Sounds fine to me.  Just make sure that D gets set back to whatever it &quot;should&quot; be (ideally $0000) at the end or the like.  Although this is where I bring up the thing I mentioned in the other thread, re: how I wish ca65 had better comprehension of direct page + a way to get the start address defined in the temple MEMORY area into code, so that you could just say something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #.LOWORD&#40;MEMORY&#40;DP&#41;&#41;/tcd</tt> and be able to relocate things simply by changing the template.<br /><br />Otherwise, well, the simple solution is -- just document it with a comment like I did in the code for Espozo.  :-)  &quot;Make sure this correlates with what's in lorom256k.cfg&quot;.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Feb 06, 2015 12:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-06T11:40:15-07:00</updated>
<published>2015-02-06T11:40:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140695#p140695</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140695#p140695"/>
<title type="html"><![CDATA[Re: A simple sprite demo for teaching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11649&amp;p=140695#p140695"><![CDATA[
Don't worry; I'm not doing loops or any $#!+ like that. I'm doing the unrolled set of sta/stz as you recommend, just with the 16-bit writes (where consecutive registers both get a single $00) before the ones that need to be done 8-bit, and with direct page set to $4200 and $2100 like Square Enix games.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 06, 2015 11:40 am</p><hr />
]]></content>
</entry>
</feed>