<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Spec for HLL targeting NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Spec for HLL targeting NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9143">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9143</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Oct 15, 2012 7:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Lack of forward declarations is the single most annoying part of C and C++.  I write a function, then need to copy-paste the first line somewhere else just so I can call it in code that happens to be before the function.  That is absolutely ridiculous.</div><br />I thought a prototype like that <em>was</em> a forward declaration. You have to do the same thing in ca65 if you want to call a function defined in another translation unit: a .global or .import statement in the caller, and a .global or .export statement in the callee.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">I also hate how there's no real way to include data for the binary to use at runtime, you have to load it from a file and stick it in an array or something. I hate how modern languages work in general honestly. C isn't too bad, but still, could be much better.</div><br />The GBA homebrew community adopted two patterns: converting the data to assembly language at compile time (&quot;bin2s&quot;), and my solution of appending the data to the executable in an archive format (&quot;GBFS&quot;).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Mon Oct 15, 2012 11:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For multiplication, you could add an option to use MMC5 hardware multiplication if it is available.<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Nothing is really wrong with C-style syntax itself, but C itself has some really backwards features in it.</div>Yes there are some.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Lack of forward declarations is the single most annoying part of C and C++.  I write a function, then need to copy-paste the first line somewhere else just so I can call it in code that happens to be before the function.  That is absolutely ridiculous.</div>It doesn't annoy me much, but this is a valid point.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, C doesn't have a good way for a function to return multiple values.  You can return a struct, but that mainly leads to the compiler throwing it on the stack instead of returning it in several registers.</div>Yes, I agree; other programming languages do, even though things like Haskell also would return in a structure (or a pair), in Forth to return on the stack, etc.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What else is wrong with C and C++?  Assignments in If expression.</div>I like this feature actually.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Infinite while loops because you accidentally put a semicolon before the open brace.</div>I like this feature too.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The postincrement operator having undefined meaning when there is more than one use of that variable.</div>I don't think it is wrong; what else would expected in such cases?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The wrong order of operations makes bitwise arithmetic lower priority than expected (OR should be like addition, AND and bit shifts should be like multiplication), but they are all low priority instead.</div>This I agree with you; I don't like this either.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Leading zeroes magically make your numbers octal.  Tons of annoying legacy crap.</div>I think it is OK.<br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I have a note on the whole idea. HLL is a High Level Language, i.e. very abstracted from the low level, the hardware. So there is a dillema - either you target it for effective resulting code, but this brings some hardware limitations back to the abstaction level (like 1D arrays and lack of 32 bit math), thus compicating use of the language, or you target it to simplify programming a lot, hiding all these details, but this leads to not very effective code. </div>What if you add commands for both purpose, and add only the stuff to the compiled binary in the places needed for adding the extra details?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Oct 15, 2012 12:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle">Nioreh wrote:</div><div class="quotecontent">If noism will make it simpler that CC65 to handle bank switching, it can be really useful. I don't have much experience working with bank switching, but in CC65 you basically have to keep your code small enough to fit in one 16K bank, and use the other one for pure data.</div><br />It should be fine to have code in switchable banks in CC65, just make sure the library routines (like stack manipulation) are in the fixed bank. This can be achieved by naming the fixed bank/segment &quot;CODE&quot;. Of course you have to manually make sure the correct functions are mapped in the non-fixed bank whenever calling them. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />I'm currently trying out AOROM/BNROM mappers with cc65. The 32k banks means it's easier to arrange code, though it mostly precludes having DPCM samples (which I'm fine with).<br /><br />Currently I'm putting C code in one bank only, and other banks are used for data or assembly code only. I link each bank separately. cc65's debug symbol output uses the PC to identify their location, rather than the ROM location, so to separate these it's best to build banks individually and combine them in a later step.<br /><br />My ZP/BSS usage for assembly code is in a global include, so the assembly banks won't conflict. C stuff is allowed to use the rest of RAM. I would have to portion each separately if I was to put C in more than one bank; would probably be a bit of a pain. I would also have to make sure do the DATA segment initialization for each bank that has C code.<br /><br />I dunno, so far I haven't run out of code space in the C bank; putting music/graphics/levels in other banks leaves me with a decent amount of room there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Mon Oct 15, 2012 12:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The OP hasn't posted in a few months and his rapidshare link to the tentative specs are gone.  I really wish someone would complete an Atlan/Scratchalan/nBasic-like project :p

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Oct 15, 2012 12:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm working on <strong><em>and</em></strong> and <strong><em>or</em> </strong>in my conditional statements for the IF ca65 macro. It's designed to be as good as raw assembly could be - I'll update it sometime this week. Maybe that will make things highlevel enough for you along with a nice easy to read assignment macro (math could be added..) ? What else are you looking for? ca65 is probably the most flexible solution for coding NES/6502 due to the way it tracks namespaces and segments. Otherwise maybe you should consider cc65.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Mon Oct 15, 2012 1:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">I'm working on <strong><em>and</em></strong> and <strong><em>or</em> </strong>in my conditional statements for the IF ca65 macro. It's designed to be as good as raw assembly could be - I'll update it sometime this week. Maybe that will make things highlevel enough for you along with a nice easy to read assignment macro (math could be added..) ? What else are you looking for? ca65 is probably the most flexible solution for coding NES/6502 due to the way it tracks namespaces and segments. Otherwise maybe you should consider cc65.</div><br /><br />I should definitely consider NESICIDE/cc65.  That's as good as it gets.  I'm still a little perplexed that batari BASIC for Atari 2600 is still a one hit wonder though <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><!-- m --><a class="postlink" href="http://bataribasic.com/">http://bataribasic.com/</a><!-- m --><br /><br />The basic premise seems to be a generic kernel with some conversion of subroutines and mathematical statements to asm - which in turn get compiled.  I almost never go over CPU cycles and it's BASIC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Oct 15, 2012 4:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />batari Basic looks pretty cool. Anyone have experience using it and could give some impressions?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Oct 15, 2012 4:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">cc65's debug symbol output uses the PC to identify their location, rather than the ROM location, so to separate these it's best to build banks individually and combine them in a later step.</div><br />Are you talking about the VICE label listing file that can be generated? In the generated debug file of the snapshot version, you can get the ROM location from any symbol, too, but you have to (or should) use the dbginfo C library to parse that file (this is included in the CC65 source package).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Oct 15, 2012 6:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">cc65's debug symbol output uses the PC to identify their location, rather than the ROM location, so to separate these it's best to build banks individually and combine them in a later step.</div><br />Are you talking about the VICE label listing file that can be generated? In the generated debug file of the snapshot version, you can get the ROM location from any symbol, too, but you have to (or should) use the dbginfo C library to parse that file (this is included in the CC65 source package).</div><br /><br />I've been using the last release, never tried the snapshot. Glad to hear that more info is getting into the debug output in newer versions. I wrote a short python script to parse the VICE label file into FCEUX debug files.<br /><br />So, I guess whenever the next release is it'd be more reasonable to put everything into one link, which would make it easier to keep the RAM usage consistent across the banks (wouldn't have to manage space explicitly for each one; everything could link its variables into the same BSS segment). You'd probably be able to get C in multiple banks in mapper with a fixed bank that you can put the CRT into. One of the problems with AxROM is the you can't link the CRT in two different banks without a conflict (at least, not in one link). Anyhow, still hasn't come up-- I'll consider it whenever I actually exceed 32k of C code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Wed Oct 17, 2012 10:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">batari Basic looks pretty cool. Anyone have experience using it and could give some impressions?</div><br /><br />I tried it once awhile back (While looking into vcs dev) and really just screwed around with some example code.  Attempting to increase the granularity of the playfield &quot;pixels&quot; caused the rom to crash.  But it should be really good if you can think of something to do with it.  One game made with batari is a homebrew release.<br /><!-- m --><a class="postlink" href="http://www.atariage.com/software_page.html?SoftwareID=4107">http://www.atariage.com/software_page.h ... areID=4107</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Wed Oct 17, 2012 10:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">slobu wrote:</div><div class="quotecontent">The OP hasn't posted in a few months and his rapidshare link to the tentative specs are gone.  I really wish someone would complete an Atlan/Scratchalan/nBasic-like project :p</div><br /><br />I got distracted by another pet-project, but what's really eating my free time of all things is the PS1 &quot;classic&quot; Xenogears.  But with this topic coming back up, I feel a little push now.<br /><br />One big snag was how to circumvent a software stack, because that will make the project a bit redundant with C.  What I'm going to try is a function tree that allocates bytes for parameters and local vars to a set of functions that do not share the same call chain.  This means function pointers can't be passed to other functions (But they can be used locally like a switch statement).  If a function is only called once or only global vars are passed to it, no extra bytes for params are used.<br /><br />The tentative specs had some goofy stuff anyway, so once the compiler gets further along new specs will go up.  A new plan is to incorporate signed and unsigned types since I now understand the 'overflow' flag.  Data types will be 8-64 bits wide (including 24-bit).  2D arrays are still unlikely, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Thu Oct 18, 2012 8:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Glad this project isn't indefinitely stalled <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I see that most successful projects parse a relaxed language into assembly:<br />batari Basic <!-- m --><a class="postlink" href="http://bataribasic.com/">http://bataribasic.com/</a><!-- m --><br />BasiEgaXorz <!-- m --><a class="postlink" href="http://devster.monkeeh.com/sega/basiegaxorz/">http://devster.monkeeh.com/sega/basiegaxorz/</a><!-- m --><br />ZX Basic for SMS <!-- m --><a class="postlink" href="http://www.smspower.org/forums/viewtopic.php?t=12902">http://www.smspower.org/forums/viewtopic.php?t=12902</a><!-- m --><br /><br />Regardless if it has a software stack or not it wouldn't be redundant to C if programmers could focus on functional code rather than syntax and formatting.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Oct 18, 2012 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Have you ever heard of <a href="http://en.wikipedia.org/wiki/JAL_%28compiler%29" class="postlink">JAL</a>? It's a vaguely-pascal-like language that targets the PIC16 line fairly efficiently, despite PIC16's lack of particularly useful addressing modes and only having a single first-class register.<br /><br /><span style="font-size: 70%; line-height: normal">edit: make link point to wikipedia page instead of 7-years-stale CVS repository</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Thu Oct 18, 2012 10:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />JAL looks alot like batari Basic.  VERY, very cool.  As a side I wish they'd just make it compatible with an Arduino Uno instead of trying to make yet another sorta-Arduino.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Oct 18, 2012 10:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's a good ... 10? 15? years older than the arduino <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>