<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Enemy placement in screen-by-screen top-down game</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Enemy placement in screen-by-screen top-down game</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16590">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16590</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Oct 17, 2017 12:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What way would you suggest for placing the enemy characters in a top-down game that scrolls screen-by-screen? (I.e. the enemies are loaded anew with every new scren.)<br /><br />Declaring what kinds of enemies and how many appear on every screen is pretty simple.<br /><br />But how do I do their initial placement on the screen if I don't want to have them start in a fixed location?<br /><br />First of all, they shouldn't be allowed to appear too close to the hero. So, when the hero enters the screen from the left, they cannot be positioned too far on the left side, so that he doesn't get hit unfairly.<br /><br />Then there's the problem that they shouldn't be allowed to be placed in tiles that are walls, unless they can fly.<br /><br />I have an array of 16 x 15 bytes that defines which tiles are walls and which are walking ground.<br />So, generating a random number from 0 to 239 isn't a problem.<br />After generating it, I could adjust the value and move the position up, down left or right if the character would be too close to the player's side.<br /><br />And if the value points to a wall, I could simply add 1 until it doesn't anymore, but this would mean that tiles right from a wall are more likely to be picked than other tiles.<br /><br />But do you know of any other, more elegant ways of choosing enemy start positions on a screen?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 17, 2017 12:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Instead of adding 1, make clustering less obvious by choosing the next square Galois-style. Perform one bit of a CRC calculation on it.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr random8<br />placeloop:<br />&nbsp; sta xyposition<br />&nbsp; jsr evaluate_position<br />&nbsp; bcc position_ok<br />&nbsp; lda xyposition<br />&nbsp; asl a<br />&nbsp; bcc :+<br />&nbsp; &nbsp; eor #$D9<br />&nbsp; :<br />&nbsp; dec total_failures_left<br />&nbsp; bne placeloop<br />jmp clear_and_start_over<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Oct 17, 2017 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a bit trouble wrapping my head around this.<br /><br />Can you please explain in prose what this code is doing here?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Tue Oct 17, 2017 12:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In Metal Gear, enemy placement is fixed and deliberate. For the most part, everything is balanced and fair; There's a few tough entryways that aren't, iirc. This has the side effect of rooms being predictable once you've learned them.  <br /><br />Zelda relies more on having enemies appear after a while. MG has that too, but less so. Unlike MG, Zelda will sometimes warn the player of their placement with a puff of smoke. <br /><br />If you have the cpu time, you don't need to go from left to right row by row when placing enemies randomly. You can have a pregenerated array (fixed at assembly time) with all possible positions in a room semi-randomly shuffled. Then when enemy placement begins, pick a number (randomly) in that array to start from. Then step forward (wrapping around the array) until a legit position is found. Optionally draw a new seed for the next monster, or just step on*, rnse and repeat. You can also check for the position tested if it is too close to the player characters' initial position, so it's not only for wall detection.<br /><br />*Just stepping on means certain patterns of enemy placement might appear. On the other hand, it should mean no monster is risking being placed overlapping another.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Oct 17, 2017 12:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One solution would be to have a rough area where an enemy should start. The area would be, say, 5x5 metatiles. Instead of having an exact location for the enemy, you would indicate the location of the area, and have the enemy start in a random non-solid tile within the area. This way you can still design screens with a general sense of where enemies will be when the player enters the screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Oct 17, 2017 1:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">In Metal Gear, enemy placement is fixed and deliberate.</div><br />Of course, fixed placement would be pretty mundane to design. I will actually do this additionally for specific opponents, but not for most.<br /><br /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">Zelda relies more on having enemies appear after a while.</div><br />This one would be a different issue, though. Even if an opponent appears some time later, you still have to apply the basic appearance rules. (Except maybe that you don't need to pay attention anymore to where the hero is standing.)<br />So, the question whether we use timing or not is a separate feature, but it doesn't influence the actual initialization code itself.<br /><br /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">You can have a pregenerated array (fixed at assembly time) with all possible positions in a room semi-randomly shuffled.</div><br />This could require a lot of ROM space.<br />Actual graphics are stored as variable-length meta tiles, so no matter whether it's a stone or a house, it only requires three bytes on the screen (x, y and meta tile index for a lookup array).<br />But also having a list of possible start points could be much. If only 25 % of all tiles are walkable, this is still 60 additional bytes per screen.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">One solution would be to have a rough area where an enemy should start. The area would be, say, 5x5 metatiles.</div><br />I'm not sure whether this solves the issue. It still has pretty much all the problems that I have with the whole screen anyway: I still have to react to placement in solid tiles and I still have to take care that the enemies don't appear too close to the hero's side.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Tue Oct 17, 2017 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This could require a lot of ROM space.</div> You only need one, and that will work for every room/screen. You could have more, but the use is debatable (maybe it could have some subtle effect on an area-for area basis for example, but it doesn't sound like it is worth it). I mean, if you're doing collision checks for monster spawning, that makes up for it not being unique to each particular room. EDIT: For clarity, the purpose of the array is to shuffle the order of positions you're stepping through. It is not directly tied to the layout of any particular room.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 17, 2017 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">I have a bit trouble wrapping my head around this.<br /><br />Can you please explain in prose what this code is doing here?</div><br />I'll take this as a request to repost my code with the comment detail <a href="https://forums.nesdev.com/viewtopic.php?p=204297#p204297" class="postlink">cranked up to &quot;scary&quot;</a>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Choose a random number from $00 to $FF, where one nibble represents<br />; the horizontal (X) position and the other the vertical (Y).<br />jsr random8<br /><br />; This is a label, a place where execution will continue later depending on<br />; decisions taken by other parts of the code.<br />placeloop:<br /><br />&nbsp; ; Save the X and Y positions for later use.<br />&nbsp; sta xyposition<br /><br />&nbsp; ; Call a subroutine that determines whether the position in A is a<br />&nbsp; ; valid placement for this object, based on not overlapping walls,<br />&nbsp; ; distance from the player, etc.<br />&nbsp; jsr evaluate_position<br /><br />&nbsp; ; The routine returns whether the position is blocked in the<br />&nbsp; ; carry flag. Carry set means the position is blocked; carry<br />&nbsp; ; clear means the object may be placed at the position.<br />&nbsp; ; So if carry is clear, continue the rest of placement.<br />&nbsp; bcc position_ok<br /><br />&nbsp; ; Choose a different position based on this one.&nbsp; Start by<br />&nbsp; ; multiplying the X, Y coordinates by 2, allowing the most<br />&nbsp; ; significant bit of the coordinate stored in the low nibble<br />&nbsp; ; to carry into the least significant bit of the coordinate<br />&nbsp; ; stored in the high nibble.<br />&nbsp; lda xyposition<br />&nbsp; asl a<br /><br />&nbsp; ; Linear feedback shift register formula: If the multiplication<br />&nbsp; ; by 2 overflowed, XOR the with the polynomial of the LFSR.<br />&nbsp; bcc :+<br />&nbsp; &nbsp; eor #$D9<br />&nbsp; :<br /><br />&nbsp; ; This routine has a bug: if xyposition is chosen as 0, it never<br />&nbsp; ; gets changed.&nbsp; Fixing this is an exercise for the reader.<br /><br />&nbsp; ; If the placement routine has had to move too many things on<br />&nbsp; ; this screen, it may have fallen into an unfixable situation.<br />&nbsp; ; Remove all randomly placeable objects and start over.<br />&nbsp; dec total_failures_left<br />&nbsp; bne placeloop<br />jmp clear_and_start_over<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Oct 17, 2017 2:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">You only need one, and that will work for every room/screen.</div><br />One start positions array for the whole game (or a major number of screens)?<br />Do you mean it in a way so that all enemies can only appear in, for example, these places?<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=10467" alt="Screen.png" /><br />
			<span class="gensmall">Screen.png [ 2.21 KiB | Viewed 1232 times ]</span>
		

		<br />
	</div><br />I don't think this would work. If the places have to be always walkable, that limits the level design too much (even if I have 10 different arrays).<br /><br />And if I have to include collision checks with the ground, what's the advantage of the array? I could simply generate random numbers for my regular screen array and check the collisions just as well.<br /><br />If this array is just a list of positions in the way that if one position is occupied, the game takes the next one in the array instead of the next closest tile on the screen, I don't really need an array.<br />I could just say:<br />Generate a position in my screen array.<br />If it is occupied, add the value n to it until the position is free.<br />After every check, turn n into another value (for example, n can be 1, 2, 3, 5, 7, 11, 13 or 17).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Oct 17, 2017 2:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I'll take this as a request to repost my code with the comment detail <a href="https://forums.nesdev.com/viewtopic.php?p=204297#p204297" class="postlink">cranked up to &quot;scary&quot;</a></div><br />Thanks.<br /><br />That's the reason why I rather discuss general concepts instead of reading actual example code. It tends to have too much stuff that isn't really necessary for understanding the solution.<br /><br />All in all, the only really important part of your code is this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ; If position is not possible:<br />&nbsp; lda xyposition<br />&nbsp; asl a<br />&nbsp; bcc :+<br />&nbsp; &nbsp; eor #$D9<br />&nbsp; :<br />&nbsp; ; Check again.</div><br />Although I still don't get why it's the value $D9. This is probably some mathematical stuff.<br /><br />By the way, if it doesn't work after a certain amount of tries, instead of starting over I would simply start moving along the array entry by entry from the last position, so that it's guaranteed that I will definitely find a valid location in time. I mean, otherwise, that algorithm might fail hundreds of times.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Oct 17, 2017 2:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">I still have to react to placement in solid tiles and I still have to take care that the enemies don't appear too close to the hero's side.</div><br /><br />This is true. The one nice thing to this approach is that you potentially could get away with manually positioning the areas to always be away from where the player starts. But this could create an issue if you have lots of screens that you can enter from all sides. You would have to position the areas to be away from the edges of the screen.<br /><br />If the whole screen is up for grabs, I would personally go with the approach of picking a random tile on the screen and having a routine that validates whether or not that spot is allowed. The routine would test all scenarios where the tile is <em>not</em> allowed, and if it doesn't meet any of those conditions, it is allowed. The scenarios where a spot is not allowed seem to include:<br /><br />-Solid tile<br />-Too close to player<br />-Another enemy is already in that spot<br /><br />In the event that the routine says the tile is not allowed, you would just pick a new random tile and try again. Don't try to go up or down a tile from what you tested; just test a totally random, different tile.<br /><br />While it's possible that there could be dozens of tests with a &quot;not allowed&quot; result, I doubt it would cause a big delay as the screen is loading.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Tue Oct 17, 2017 2:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you mean it in a way so that all enemies can only appear in, for example, these places?</div>No, i mean the array would cover all coarse positions on the playfield (except outer walls etc, if any) that are nominally eligible for placement, but have their order shuffled in a way decided by the game designer. The point of such an array is that:<br /><br />-You can somewhat finely control the likelyhood a position being a spawn point by including a certain position n times in your array. <br />-The array could potentially do double-duty as a defacto LUT for specific enemy placement when not looked up with a randomized index. <br />-You can easily exclude positions you don't want if your doors/openings will always be in the same spot (zelda dungeons).<br />-Shuffled is not the same as random. Depending on the length of the sequence, it may be possible for the player to detect the &quot;designer's hand&quot;, or more importantly, learn the pattern, which may appear fairer than pure randomness. Tthere may be a connection to the skill roof. The observant player will learn what to expect and act accordingly. <br />-A bit of an afterthought: you can keep different arrays for different types of monsters to differentiate their spawn behaviour. Some may spawn more concentratedly in the middle, in corners, along walls. Some may spawn scattered, others more likely in clusters. <br />-You can have a smaller arrays and assigning it an offset if you can find a use for that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Tue Oct 17, 2017 2:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What kind of game is this? Is it a completely designed interconnected world where you want to apply randomness to the enemy spawning in order to keep the game challenging and keeping the player on their toes?<br /><br />Or is it a somewhat procedurally generated thing, where the &quot;random&quot; layout of each room is the essence of the challenge?<br /><br /><br />I'm a big advocate of well designed RNG in video games, meaning that any random descision isn't just white noise (such as in the image above), but based on a number of recognizable patterns or algorithms. A good example would be a boss fight where the boss has an array of different attacks it can use, but instead of distributing them randomly, some will be more likely than others - but the player can never be sure what to expect, so you'd have to keep your distance to see what the boss does before trying to countering it. And again, once an attack occurs that could be three bullets firing in the general direction of the player, but with a random offset between X and Y pixels, making it more challenging to dodge, forcing the player to gauge the action and react quickly.<br /><br />The reason I'm mentioning this is that I think this applies very much to level design and enemy spawning mechanics, too. So if your games falls in the former camp of moving around through a designed level, I feel like the enemies spawning should be a part of that design, too. A simple example could be a room being set to have four skeletons, one gorgon and three killer robots, and each of those could have 5-10 different possible set spawn points that they populate randomly. That way a player who has played your game before knows what challenges they are going to face in the next room, but will never be able to anticipate the constellation.<br /><br />I'm sorry in advance if this theory is not applicable to your game at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Tue Oct 17, 2017 2:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">meaning that any random descision isn't just white noise </div><br />Well worded. Randomness needs to be tamed/conditioned. It can sometimes be unpleasant without.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Tue Oct 17, 2017 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I agree with Sumez -- it depends on the game design constraints.<br /><br />What I did in my GBA Anguna game (which has more processing time than the NES):  <br />  - some enemies have fixed positions, some are random<br />  - I randomly pick an enemy position, if it's no good, I just try again.  If it can't spawn after X number of tries, it gives up and doesn't spawn<br /><br />What I did in my Atari Anguna game (which is more limited than the NES, and had a limited number of room layouts):<br /><br /> - For every room layout, I picked 8 different possible reasonable enemy spawn locations (far from doors where the player enters, not on a wall, etc), and randomly picked one.  This ran into problems with extra-large enemies, but otherwise worked.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>