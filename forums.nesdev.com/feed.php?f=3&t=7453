<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="https://forums.nesdev.com/feed.php?f=3&amp;t=7453" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="https://forums.nesdev.com/index.php" />
<updated>2011-02-06T02:32:43-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>https://forums.nesdev.com/feed.php?f=3&amp;t=7453</id>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2011-02-06T02:32:43-07:00</updated>
<published>2011-02-06T02:32:43-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73617#p73617</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73617#p73617"/>
<title type="html"><![CDATA[Yet another NSF player]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73617#p73617"><![CDATA[
Here is <a href="http://nesdev.com/nsftool.zip" class="postlink">NSFtool</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It ought to be straightforward to port it over as long as you've got a PWM pin to spare or better yet a DAC, and perhaps button to switch songs. Though I might have to reduce the sample-rate a bit to account for the slower clock.<br />Did you use use an external crystal or the internal oscillator?<br /></div><br /><br />It used a 10mhz crystal with the 4x PLL.  It's 10mips, it seems this PIC you used runs up to 16mips, that's a pretty big speed difference.  I did some audio stuff on there too, and had it doing 4 wavetable channels at around 30khz.  I haven't had the hardware running for a while, but seeing that CPU emulator code makes me curious, heheh.  I had planned to re-do the board later, and use a PIC32.<br /><br />But the way I had the audio going, was to have the PIC interrupt the NES to generate the sample rate, and the NES reads the sample off the PIC's parallel port, then writes it to $4011.  There was some overhead involved for the PIC though, especially since the NES had to acknowledge the IRQ (the NES reading and writing both generated interrupts on the PIC).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Interesting, I'll have to check that out. Do you know if this was an emulator or a data logger? I imagine the former may require external RAM considering the prevalence of compression and self-modifying code in SIDs.<br /></div><br />It was an emulator, and yeah I believe there was an external SRAM.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sun Feb 06, 2011 2:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2011-02-05T03:28:04-07:00</updated>
<published>2011-02-05T03:28:04-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73593#p73593</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73593#p73593"/>
<title type="html"><![CDATA[Yet another NSF player]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73593#p73593"><![CDATA[
<div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />There is an NSF optimizer, I used it when I made my SNES NSF player (so they would compress better). I'll have to try and track it down, it was written by TNSe but he doesn't have it anymore (neither do I, it got left behind on my old PC).  Other people have asked for it too.  Besides zero'ing out unused values, it also does some fancy bankswitching/loading tricks to make the NSF smaller.  When I used it I converted them back to flat 16kB/32kB files because my loader didn't support the bankswitching stuff.<br /></div>Cool. It would be great if you could find it again, I could easily squeeze trim edges of bank the banks or even overlap them if I knew which bytes were unused. I get the feeling that 32k NSFs more often have to do with lazy rippers than the actual size of the songs, though to be fair I don't suppose a few extra kilobytes would matter in the usual course of business.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I wonder if it would run on my old Squeedo cart (with it's PIC18F4525).  Then you could play an NSF on the NES, without using the NES, heheh.<br /></div>Now that sounds like a profoundly useless project ;)<br />It ought to be straightforward to port it over as long as you've got a PWM pin to spare or better yet a DAC, and perhaps button to switch songs. Though I might have to reduce the sample-rate a bit to account for the slower clock.<br />Did you use use an external crystal or the internal oscillator?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Years ago I remember kevtris made a SID player that used a PIC (18F452 IIRC) to emulate the 6502, but used an actual SID chip for the sound.<br /></div>Interesting, I'll have to check that out. Do you know if this was an emulator or a data logger? I imagine the former may require external RAM considering the prevalence of compression and self-modifying code in SIDs.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Sat Feb 05, 2011 3:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2011-02-04T15:12:59-07:00</updated>
<published>2011-02-04T15:12:59-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73575#p73575</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73575#p73575"/>
<title type="html"><![CDATA[Yet another NSF player]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73575#p73575"><![CDATA[
That's pretty damn cool.  Sound seems pretty good in that example.<br /><br />There is an NSF optimizer, I used it when I made my SNES NSF player (so they would compress better). I'll have to try and track it down, it was written by TNSe but he doesn't have it anymore (neither do I, it got left behind on my old PC).  Other people have asked for it too.  Besides zero'ing out unused values, it also does some fancy bankswitching/loading tricks to make the NSF smaller.  When I used it I converted them back to flat 16kB/32kB files because my loader didn't support the bankswitching stuff.<br /><br />I wonder if it would run on my old Squeedo cart (with it's PIC18F4525).  Then you could play an NSF on the NES, without using the NES, heheh.<br /><br />Years ago I remember kevtris made a SID player that used a PIC (18F452 IIRC) to emulate the 6502, but used an actual SID chip for the sound.  Not as simple as NES (because of the filters), but it's still really cool to see the NES CPU/APU emulated on an 8-bit PIC.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Fri Feb 04, 2011 3:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2011-02-04T09:53:20-07:00</updated>
<published>2011-02-04T09:53:20-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73564#p73564</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73564#p73564"/>
<title type="html"><![CDATA[Re: Yet another NSF player]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73564#p73564"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />If what I know of the NT2 source code is any indication, these pages are usually zero page, stack, and one page or half-page of BSS that the planning department has devoted to music playback. So you might be able to statically allocate $0000-$00FF and $01C0-$01FF and demand-page the rest if that simplifies anything.<br /></div>That seems to be how most players do things as far as I can tell, luckily for me.<br />Actually, what you suggest is pretty much the scheme I use now except that I'm forced to allocate a full page for the stack.  Unsurprisingly rippers usually won't bother relocating variables within the stack page unless they collide with the topmost part which the NSF format forces you to use as call stack.<br /><br />The fun part will be figuring out what to do when you run out of memory..<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Fri Feb 04, 2011 9:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-02-03T17:56:34-07:00</updated>
<published>2011-02-03T17:56:34-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73531#p73531</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73531#p73531"/>
<title type="html"><![CDATA[Re: Yet another NSF player]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73531#p73531"><![CDATA[
<div class="quotetitle">doynax wrote:</div><div class="quotecontent"><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">I'm guessing you haven't encountered any soundtracks that use more RAM than the PIC has?<br /></div>No, actually, so far I've yet to see anything use more than four pages. I'm a bit surprised myself that I got away with it, but I guess programmers like to gather their variables for each module into tidy little blocks.</div><br />If what I know of the NT2 source code is any indication, these pages are usually zero page, stack, and one page or half-page of BSS that the planning department has devoted to music playback. So you might be able to statically allocate $0000-$00FF and $01C0-$01FF and demand-page the rest if that simplifies anything.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 03, 2011 5:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2011-02-03T13:21:54-07:00</updated>
<published>2011-02-03T13:21:54-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73518#p73518</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73518#p73518"/>
<title type="html"><![CDATA[Re: Yet another NSF player]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73518#p73518"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Tangenting wildly, but I really like Microchip's K20 series.<br /></div>The hardware is excellent, isn't it? Cheap and efficient and with useful peripherals.<br />They certainly aren't a software house though. The assembler is straight out of the dark ages and I swear they put the interns on the C compiler.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm guessing you haven't encountered any soundtracks that use more RAM than the PIC has?<br /></div>No, actually, so far I've yet to see anything use more than four pages. I'm a bit surprised myself that I got away with it, but I guess programmers like to gather their variables for each module into tidy little blocks.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Only last thought I have is whether it's possible that  compactflash might provide fast enough sustained read times to avoid having to stuff the NSFs into the PIC's code rom.<br /></div>Good question. The read throughput ought to be good enough but I suspect that random-access may be a deal-breaker. The low-capacity cards are apparently byte-addressable but even so there's an awful lot of overhead in issuing two 48-byte commands for something as common as a table lookup. I suppose with a bit of extra RAM some sort of demand-paging scheme may be feasible.<br /><br />Frankly, though, if I go that route I'll probably be lazy and just swap the tunes in at load time. I can always mount a socket if wearing out the FLASH becomes an issue ;)<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Thu Feb 03, 2011 1:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2011-02-03T01:51:24-07:00</updated>
<published>2011-02-03T01:51:24-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73506#p73506</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73506#p73506"/>
<title type="html"><![CDATA[Re: Yet another NSF player]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73506#p73506"><![CDATA[
<div class="quotetitle">doynax wrote:</div><div class="quotecontent"><br />This particular PIC is a bit short on FLASH (about 29k left over for tunes) so a number of my favorite songs just don't fit. Is there a ready-made tool out there for discovering dead code, or perhaps a collection of optimized NSF files?<br /></div> Tangenting wildly, but I really like Microchip's K20 series. I'm guessing you haven't encountered any soundtracks that use more RAM than the PIC has? And I really like the software MMU you're using to map the NES's up-to-10kB of ram to the 1¼kB you've allocated for emulation.<br /><br />Only last thought I have is whether it's possible that  compactflash might provide fast enough sustained read times to avoid having to stuff the NSFs into the PIC's code rom.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Thu Feb 03, 2011 1:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2011-02-02T14:37:31-07:00</updated>
<published>2011-02-02T14:37:31-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73476#p73476</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73476#p73476"/>
<title type="html"><![CDATA[Yet another NSF player]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=7453&amp;p=73476#p73476"><![CDATA[
We recently ordered a programmer for PIC MCUs at work which happened to come with <a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1406&amp;dDocName=en538340" class="postlink">this cute little demo board</a>, and for whatever reason I got it into my head to make an NSF player out of the bloody thing. This kind of thing has already been done half a dozen times but I suppose I had some notion of building myself a simple "mp3" player.<br /><br />I've got it playing most tunes reasonably well by now, but emulation-wise it's wildly inaccurate and I was hoping for some tips on how to improve things. I've ended up cutting any number of corners and I don't really know whether I safely can get away with it. So I/O writes are mostly deferred to the next APU frame, code cannot be executed out of RAM and neither frame/DMC IRQs nor 5-step frames nor even frequency slides are implemented yet. Can you guys suggest some "important" soundtracks which rely on me getting these things right?<br />Oh, and perhaps someone might recommend a good editor for comparing and eyeballing audio waves.<br /><br />This particular PIC is a bit short on FLASH (about 29k left over for tunes) so a number of my favorite songs just don't fit. Is there a ready-made tool out there for discovering dead code, or perhaps a collection of optimized NSF files?<br /><br />Finally here's <a href="http://sites.google.com/site/doynax/BlueShadow.mp3" class="postlink">a little sample</a> along with the <a href="http://sites.google.com/site/doynax/uNSF.7z" class="postlink">code.</a> As for the hardware all I've done is to connect a headphone jack straight to a PWM pin, so there's plenty of room for improvement on that front though I do kind of like the minimalism of it all.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Wed Feb 02, 2011 2:37 pm</p><hr />
]]></content>
</entry>
</feed>