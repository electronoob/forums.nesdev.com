<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Playing with pointers?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Playing with pointers?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12402">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12402</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Feb 19, 2015 5:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm fixing/reviewing my APU sound playback/output code (points to koitsu now).  <img src="./images/smilies/icon_cool.gif" alt="8-)" title="Cool" /> <br /><br />a) There's no need of cast, like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned char *buffer = &#40;unsigned char *&#41;malloc&#40;0x1000&#41;</tt>.<br />b) Here's my problem. Since the sound buffer cache is <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned char</tt> and the samples are <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned short</tt> (16 bit, mono, 2 bytes per sample), the compiler now gives &quot;<em>assigment from incompatible pointer type</em>&quot; warning?<br /><br />What's the Right Thing (TM) to do in this case???  <img src="./images/smilies/icon_cry.gif" alt=":cry:" title="Crying or Very sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Feb 19, 2015 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shouldn't the type of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">buffer</tt> be the same as the data you want to store in it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Feb 19, 2015 5:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well... so what's the result above? Just an example.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">unsigned short *buffer = malloc(5)</div><br />Does <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc</tt> allocate 5 bytes of memory... or 10?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Feb 19, 2015 5:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />malloc's argument is always in bytes... at least, on all machines that I've ever used that have bytes as an available primitive.<br /><br />You might like calloc, for that purpose, because its two arguments are &quot;how many&quot; and &quot;of what size&quot; (i.e. &quot;sizeof unsigned short&quot; here)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Feb 19, 2015 5:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">http://www.tutorialspoint.com/c_standard_library/c_function_calloc.htm wrote:</div><div class="quotecontent">The difference in malloc and calloc is that malloc does not set the memory to zero where as calloc sets allocated memory to zero.</div><br />Since both return a (void *), there's no difference after all. Like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">calloc&#40;5, sizeof&#40;unsigned short&#41;&#41;</tt> sounds the same of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc&#40;5 * sizeof&#40;unsigned short&#41;&#41;</tt>, for my best.<br /><br />EDIT: well, looks like this is the solution - <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned char *buf = malloc&#40;buffer_size * sizeof&#40;unsigned short&#41;&#41;;</tt>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Feb 19, 2015 6:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not actually talking about the RHS but the LHS here.<br />If you're working with an array of shorts, shouldn't it be a pointer to short?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Feb 19, 2015 6:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Trying to keep this simple (bad terminology used here) -- regarding malloc():<br /><br />1. The way this is commonly done is to force-cast the result of malloc() into whatever the type of thing is that you plan on using.  E.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char *foo = &#40;char *&#41;malloc&#40;1024&#41;;</tt>.  malloc() on UNIX machines tends to be <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">void *malloc</tt>, which is why the force-cast is needed.  Same goes for calloc() and others.<br /><br />This is necessary on some compilers and not on others.  For example, with FreeBSD's gcc 4.2.1, I do not need to force-cast in most situations (yes really: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned short *foo = malloc&#40;123&#41;;</tt> emits no warnings with -Wall or other flags).<br /><br />2. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc&#40;5&#41;</tt> will ask for 5 bytes.  However, deep inside of libc, things are broken up into pages of a large size (on most platforms it's 4096, but I've heard of some using 8192) because memory should be aligned appropriately to page sizes, otherwise excessive fragmentation can occur.  So internally to libc what's actually going on is a 4KByte allocation, but from your program's perspective you don't know that (nor do you need to know that).<br /><br />My general guideline (and this is just my preference): I don't bother using malloc() on anything smaller than 512 bytes.  I just use preallocated buffers (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char foo[512]</tt>).  If I have **many** of these, I may end up using malloc and splitting things up into portions myself, or (more commonly) make an array of pointers and use malloc() for all of those (recursively freeing all of them when done).<br /><br />3. As for your char vs. short issue -- if you have <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned short *buf = &#40;unsigned short *&#41; malloc&#40;numberofbytes&#41;;</tt> then that should not be throwing a warning.<br /><br />Just remember: malloc wants bytes, but the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned short *</tt> declaration means allocating a pointer <strong>to</strong> a bunch of unsigned shorts.  It's therefore up to you to ensure that you deal with the byte vs. word (2 bytes) situation in your loops and code.  This is where <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sizeof&#40;unsigned short&#41;</tt> and some simple math (multiplication or division, depending on what you need) can make your life easier.<br /><br />You need to be very careful about not mixing up chars/bytes vs. shorts/words in loops and so on.  It's very easy for someone to forget what they're working with and overrun a buffer (which may or may not cause a segfault, depending on however ld.so and friends chose to allocate the heap, ditto with malloc).<br /><br />Real-world example, with gdb proving that:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 1 #include &lt;stdio.h&gt;<br />&nbsp; 2 #include &lt;stdlib.h&gt;<br />&nbsp; 3 #include &lt;string.h&gt;<br />&nbsp; 4 #include &lt;inttypes.h&gt;<br />&nbsp; 5<br />&nbsp; 6 #define mybufsize_bytes 4096 * sizeof(unsigned short)<br />&nbsp; 7 #define mybufsize_short mybufsize_bytes / sizeof(unsigned short)<br />&nbsp; 8<br />&nbsp; 9 int main(int argc, char *argv&#91;&#93;)<br />&nbsp;10 {<br />&nbsp;11&nbsp; &nbsp;size_t i;<br />&nbsp;12&nbsp; &nbsp;unsigned short *buf = malloc(mybufsize_bytes);<br />&nbsp;13<br />&nbsp;14&nbsp; &nbsp;memset(buf, 0, mybufsize_bytes);<br />&nbsp;15<br />&nbsp;16&nbsp; &nbsp;buf&#91;4094&#93; = 0xfeed;&nbsp; /* Note offset -- this would be byte offsets 8188-8189 of buf */<br />&nbsp;17&nbsp; &nbsp;buf&#91;4095&#93; = 0xface;&nbsp; /* Note offset -- this would be byte offsets 8190-8191 of buf */<br />&nbsp;18<br />&nbsp;19&nbsp; &nbsp;for (i = 0; i &lt; mybufsize_short; i++) {<br />&nbsp;20&nbsp; &nbsp; &nbsp;printf(&quot;buf&#91;%4zu&#93; (short) = 0x%04&quot; PRIx16 &quot;\n&quot;, i, buf&#91;i&#93;);<br />&nbsp;21&nbsp; &nbsp;}<br />&nbsp;22<br />&nbsp;23&nbsp; &nbsp;free(buf);<br />&nbsp;24<br />&nbsp;25&nbsp; &nbsp;return 0;<br />&nbsp;26 }<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$ gdb x<br />GNU gdb 6.1.1 &#91;FreeBSD&#93;<br />Copyright 2004 Free Software Foundation, Inc.<br />GDB is free software, covered by the GNU General Public License, and you are<br />welcome to change it and/or distribute copies of it under certain conditions.<br />Type &quot;show copying&quot; to see the conditions.<br />There is absolutely no warranty for GDB.&nbsp; Type &quot;show warranty&quot; for details.<br />This GDB was configured as &quot;amd64-marcel-freebsd&quot;...<br />(gdb) l<br />3&nbsp; &nbsp; &nbsp; &nbsp;#include &lt;string.h&gt;<br />4&nbsp; &nbsp; &nbsp; &nbsp;#include &lt;inttypes.h&gt;<br />5<br />6&nbsp; &nbsp; &nbsp; &nbsp;#define mybufsize_bytes 4096 * sizeof(unsigned short)<br />7&nbsp; &nbsp; &nbsp; &nbsp;#define mybufsize_short mybufsize_bytes / sizeof(unsigned short)<br />8<br />9&nbsp; &nbsp; &nbsp; &nbsp;int main(int argc, char *argv&#91;&#93;)<br />10&nbsp; &nbsp; &nbsp; {<br />11&nbsp; &nbsp; &nbsp; &nbsp; size_t i;<br />12&nbsp; &nbsp; &nbsp; &nbsp; unsigned short *buf = malloc(mybufsize_bytes);<br />(gdb) l<br />13<br />14&nbsp; &nbsp; &nbsp; &nbsp; memset(buf, 0, mybufsize_bytes);<br />15<br />16&nbsp; &nbsp; &nbsp; &nbsp; buf&#91;4094&#93; = 0xfeed;&nbsp; /* Note offset -- this would be byte offsets 8188-8189 of buf */<br />17&nbsp; &nbsp; &nbsp; &nbsp; buf&#91;4095&#93; = 0xface;&nbsp; /* Note offset -- this would be byte offsets 8190-8191 of buf */<br />18<br />19&nbsp; &nbsp; &nbsp; &nbsp; for (i = 0; i &lt; mybufsize_short; i++) {<br />20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;buf&#91;%4zu&#93; (short) = 0x%04&quot; PRIx16 &quot;\n&quot;, i, buf&#91;i&#93;);<br />21&nbsp; &nbsp; &nbsp; &nbsp; }<br />22<br />(gdb) b 18<br />Breakpoint 1 at 0x40072e: file x.c, line 18.<br />(gdb) r<br />Starting program: /home/jdc/x<br /><br />Breakpoint 1, main (argc=1, argv=0x7fffffffeaa8) at x.c:19<br />19&nbsp; &nbsp; &nbsp; &nbsp; for (i = 0; i &lt; mybufsize_short; i++) {<br />(gdb) p/x (unsigned char&#91;8192&#93;) *buf<br />$1 = {0x0 &lt;repeats 8188 times&gt;, 0xed, 0xfe, 0xce, 0xfa}<br />(gdb) p/x (unsigned short&#91;4096&#93;) *buf<br />$2 = {0x0 &lt;repeats 4094 times&gt;, 0xfeed, 0xface}<br />(gdb) c<br />Continuing.<br />buf&#91;&nbsp; &nbsp;0&#93; (short) = 0x0000<br />buf&#91;&nbsp; &nbsp;1&#93; (short) = 0x0000<br />buf&#91;&nbsp; &nbsp;2&#93; (short) = 0x0000<br />buf&#91;&nbsp; &nbsp;3&#93; (short) = 0x0000<br />...<br />buf&#91;4093&#93; (short) = 0x0000<br />buf&#91;4094&#93; (short) = 0xfeed<br />buf&#91;4095&#93; (short) = 0xface<br /><br />Program exited normally.<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 19, 2015 8:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">1. The way this is commonly done is to force-cast the result of malloc() [...] This is necessary on some compilers and not on others.</div><br />Specifically, among conforming compilers, the explicit cast is necessary on C++ compilers and not on C compilers. Try the same thing with FreeBSD's <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">gcc</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">g++</tt>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Feb 19, 2015 8:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">1. The way this is commonly done is to force-cast the result of malloc() [...] This is necessary on some compilers and not on others.</div><br />Specifically, among conforming compilers, the explicit cast is necessary on C++ compilers and not on C compilers. Try the same thing with FreeBSD's <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">gcc</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">g++</tt>.</div><br />No -- because the code I wrote is C code, not C++ code.  :D

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Fri Feb 20, 2015 5:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">2. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc&#40;5&#41;</tt> will ask for 5 bytes.  However, deep inside of libc, things are broken up into pages of a large size (on most platforms it's 4096, but I've heard of some using 8192) because memory should be aligned appropriately to page sizes, otherwise excessive fragmentation can occur.  So internally to libc what's actually going on is a 4KByte allocation, but from your program's perspective you don't know that (nor do you need to know that).</div>Not exactly.<br /><br />The operating system can only allocate or free a page at a time, but libc is smarter than that. If you make multiple small allocations, they will all be placed within the same page. A small amount of space is used by <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc&#40;&#41;</tt> to keep track of free space, and some space may be wasted keeping things aligned; usually, these are both negligible.<br /><br />As for when to use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc&#40;&#41;</tt>, I'll use it any time I need space for something and don't know at compile-time how big it needs to be. Usually, if I need a huge array of constant size for something, it will be important enough to be a global/<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">static</tt> variable, and end up in .data/.bss instead of the stack.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Feb 20, 2015 6:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As for when to use malloc(), I'll use it any time I need space for something and don't know at compile-time how big it needs to be. Usually, if I need a huge array of constant size for something, it will be important enough to be a global/static variable, and end up in .data/.bss instead of the stack.</div><br />I agree for embedded programming, but strangely when I did that for a PC program, the global/static array ends up eating a lot of space in the &quot;.exe&quot; (or *n*x executable, that has no extensions), just for storing the initial values, typically all 0'ed. I have no idea how to disable this feature, if you do, then please share.<br /><br />(assuming you meant &quot;heap&quot; and not &quot;stack&quot; here)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Fri Feb 20, 2015 8:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I agree for embedded programming, but strangely when I did that for a PC program, the global/static array ends up eating a lot of space in the &quot;.exe&quot; (or *n*x executable, that has no extensions), just for storing the initial values, typically all 0'ed. I have no idea how to disable this feature, if you do, then please share.</div>That's odd, I've never had any trouble getting uninitialized variables into the .bss section. Do you have some example code I could try?<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">(assuming you meant &quot;heap&quot; and not &quot;stack&quot; here)</div>Nope, stack. The heap is only used for dynamic allocations, like malloc() and friends.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Feb 20, 2015 12:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Joe wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I agree for embedded programming, but strangely when I did that for a PC program, the global/static array ends up eating a lot of space in the &quot;.exe&quot; (or *n*x executable, that has no extensions), just for storing the initial values, typically all 0'ed. I have no idea how to disable this feature, if you do, then please share.</div>That's odd, I've never had any trouble getting uninitialized variables into the .bss section. Do you have some example code I could try?</div><br /><br />If you want to initialize a large static block to just 0, or even just initialize the first few values and fill the rest with 0, you should write a loop to do so and leave the definition without an initializer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Fri Feb 20, 2015 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As long as we're asking C pointer questions, let's say I make a struct like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />// Sample fake game object struct<br />typedef struct test test;<br />struct test<br />{<br />&nbsp; int x;<br />&nbsp; int y;<br />&nbsp; short dx;<br />&nbsp; short dy;<br />&nbsp; char anim;<br />&nbsp; char animcount;<br />};<br /><br /></div><br /><br />Then, when I'd like to initialize the struct to all zero, I do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />#include &lt;stdlib.h&gt;<br /><br />void init_test(test *t)<br />{<br />&nbsp; //sizeof(test) should be fine too<br />&nbsp; memset((void *)t, 0, sizeof(*t));<br />}<br /><br /></div><br /><br />Is that considered bad practice if all of the struct members are expected to have a zero?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Feb 20, 2015 1:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think in many cases it's good practice to initialize your structs to zero this way. It's pretty common to need a sparsely populated structure, mostly zeroes, and it makes less code to only initialize what you need. One place this has come up for me is with structures that store parameters to an API call. If the API is ever expanded in the future, new uninitialized values would crop up in the new features, probably with undesired results.<br /><br />This happened to me on an XBox 360 project. At some point rendering performance dropped severely, even though we couldn't find a code change at the build where it dropped. Eventually we realized that was the day someone updated the SDK on that build machine, and we eventually tracked it down to a new parameter in an API struct disabling an important depth pass optimization state.<br /><br />Of course, for Microsoft specific code, they recommend ZeroMemory rather than memset, but they like to do things their own way.<br /><br />The (void*) cast is unnecessary, though; cast to void* is implicit from any compatible type. It should be avoided in C++ code to avoid breaking a const accidentally, but it's not helping in C code either. So, that part is probably bad practice.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>