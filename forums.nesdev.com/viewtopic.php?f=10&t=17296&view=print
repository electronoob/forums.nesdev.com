<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Object collisions - &quot;grouping&quot; / speed benefit</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Object collisions - &quot;grouping&quot; / speed benefit</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17296">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17296</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Thu Apr 26, 2018 5:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey all.  So in trying to twist NESmaker to allot for a bunch of different scenarios, we need to bend it to allow for lots of potential collision circumstances.  For Mystic Searches, we just did the object compare...cycled each through the array, checking the next through the last, and then increasing the index and repeating until we were at the last monster.  This worked ok for *that* engine, but as we progress to more and more possibilities, we start to get slow down pretty quick with not much on the screen.<br /><br />So I'm considering making some classes, essentially...player class needs to check against all other classes, player projectiles/melee checks against 'lethal' objects (monsters).  It seems it would reduce the calls significantly!  But...since objects can sort of be invoked in any order, there would have to be either some level of sorting into proper class arrays, or when an object is created, storing it to available spot in class array and dumping it off the array when deactivated.  I wonder how hefty that logic will be and how deep it goes before it begins to unravel the benefit.  We have the added complication of having to be more malleable than most engines, of course.<br /><br />Curious as to how some of you handled this and if anyone can attest to notable speed gains.<br /><br />*EDIT*...actually seems like most of this could be handled with player objects array and monster objects array.  And I'd never need to check monsters against anything, because the necessary checks would have already happened in checking player / player object collisions.  Hm.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Apr 26, 2018 7:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In my engine I created the concept of object groups. They're basically a set of (4 or 5, can't remember) linked lists. There's one variable for each group, pointing to the object slot that contains the first object of it's respective group, and then one byte in each object's RAM state is used to indicate the next object in the same group. A negative (&gt;$80) value indicates the end of the list. When an object is activated, it adds itself to one of these groups.<br /><br />The groups don't have hardcoded meanings, the game is free to distribute the different objects across the different groups as it sees fit. This affects the order in which objects are processed (e.g. objects in group 2 are guaranteed to be updated before those in group 3 - very useful for moving platforms, for example), and the functions that deal with objects (physics, collision detection, etc.) can iterate over an entire group, so you can do things like have the player go &quot;test for collisions between me and all objects in group 3&quot;, knowing that group 3 is comprised entirely of enemy objects.<br /><br />Another thing you can do is reserve a group for non-interactive stuff, like level ornaments or visual effects, so that nobody wastes time checking for collisions against those.<br /><br />It can be a bit of a challenge to select the optimal way to distribute objects across the different groups, so that the update order allows for the necessary object interactions and the smallest number of iterations is done each frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Apr 26, 2018 9:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All my objects have a type byte. <br /><br />&quot;Object is solid to other objects, object is grab-able, object can be stomped, is player projectile&quot; etc. Those bits can be user defined.<br /><br />An object that could grab things, but couldn't stomp things and didn't care about solidity could run through the list of objects like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />lda OBJtype,y<br />and #OBJECTGRABABLE<br />beq nextcollision<br />;Code that checks if the object is inside the other here, as well as how to handle it<br /><br />nextcollision:<br />dey<br />bpl loop<br /></div><br />To test multiple things, it'd look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda OBJtype,y<br />and #OBJECTGRABBABLE+OBJECTSOLID+OBJECTSTOMPABLE<br /></div><br />so it's not any slower.<br /><br />If the player object didn't need to check collision with its own projectiles, it just wouldn't add the projectile type to the number after the and.<br /><br />As well before the loop you can only check objects with a lower index, as objects that would have a higher index should have already checked lower index objects.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">txa;If our index is zero, we don't need to check other object<br />beq skipallcollision<br />tay<br />dey<br />loop:<br />lda OBJtype,y<br />;More of the code above.<br /><br />skipallcollision:<br /></div><br />To be malleable, all you need to do is let the user define 8 type of things (one for each bit) and then define which bits an object cares about for collision, which would change the and. (If it cares about nothing, don't loop at all.)<br /><br />With just this method, I got 14 things actually collision checking each other without slowdown. (That is, object 14 needed to actually compare its position with 13 other objects, then object 13 needed to actually compare its position with 12 other objects etc.)<br />If some objects didn't need to check each other (the and discarded the needed for the position check), you could push more stuff. <br /><br />Another simple optimization. Store the player character's index. If there's an object that only cares about the player, it's just ldy #playerindex, jsr collisioncheck. In theory you could have your player not check for collisions with anything and just have the monsters check the player. (Wouldn't work for a two player game, of course.)<br /><br />Also, here's actual code of tokumaru's linked list thing: <!-- l --><a class="postlink-local" href="https://forums.nesdev.com/viewtopic.php?f=10&amp;t=13061&amp;p=152230&amp;hilit=linked+list#p152230">viewtopic.php?f=10&amp;t=13061&amp;p=152230&amp;hilit=linked+list#p152230</a><!-- l --><br />And though it's linked in the post above, here is tokumaru's original post where I learned the method from: <!-- m --><a class="postlink" href="http://forums.nesdev.com/viewtopic.php?p=96731#p96731">http://forums.nesdev.com/viewtopic.php?p=96731#p96731</a><!-- m --><br /><br />14 things all colliding with each other is a lot of collisions in one frame, so I've never really thought about grouping in any other way. (The game in question has RAM reserved for 42 objects. Shrinking this number gets a few more collisions out of the frame, but eh.)<br /><br />I might make a run and gun soon, and I'll see if I need to group differently for that. If so, I might make different groups of objects, each with its own linked list as tokumaru described above.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Thu Apr 26, 2018 10:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The traditional method and name is &quot;collision flags&quot;. <br />So given <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">kCollisionFlags .block<br />&nbsp; &nbsp; Player&nbsp; &nbsp; &nbsp; &nbsp;= 1 &lt;&lt; 0<br />&nbsp; &nbsp; PlayerBullet = 1 &lt;&lt; 1<br />&nbsp; &nbsp; Enemy&nbsp; &nbsp; &nbsp; &nbsp; = 1 &lt;&lt; 2<br />&nbsp; &nbsp; EnemyBullet&nbsp; = 1 &lt;&lt; 3<br />&nbsp; &nbsp; Door&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 1 &lt;&lt; 4<br />&nbsp; &nbsp; Fire&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 1 &lt;&lt; 5<br />.bend</div><br />Then you set the player Type to kCollisionFlags.Player and Collides with to kCollisionFlags.(Enemy,EnemyBullet,Door,Fire)<br />Then you set the enemy Type to kCollisionFlags.Enemy and Collides with to kCollisionFlags.(Player,PlayerBullet,Door)<br />Then when you come to do your &quot;should I collide this with&quot; <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda A.Type<br />and B.Collides<br />beq _noCollision<br />...handle collision based upon flags here</div><br />A way to speed this up is, as tokumaru says, you can make a prebuilt lists, so you do less compares per frame. I would not store them as a Linked List although their ability to grow might be better for a generic system, as the over head of walking and keeping the list is higher than a array. Typically the order in which you do the collision is not important, if its is better to make different lists to force the order, or to collapse the array with a shift rather than copy last to hole method.<br /><br />I also trust you are already caching collision results so you don't do things twice, or adjusting your starting indexes to be A vs [A+1.....A+n], A+1 vs [A+2....A+n] etc<br /><br />ninja'd by Kasumi;)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Apr 26, 2018 10:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">I would not store them as a Linked List although their ability to grow might be better for a generic system, as the over head of walking and keeping the list is higher than a array.</div><br />From what I understand, tokumaru mixes the methods. (If not, it's what I do.) Use the linked list to avoid a seek while creating an object, but since all possible entries for the linked list are still an array, you can walk the array instead of the linked list any time you need to do a &quot;seek&quot; of the objects that are already there.<br /><br />You only need to discard objects which don't exist, which can be done with the and is no slower than the array. (In fact, the code to do the two would be identical.) (Essentially just ensure a destroyed object has its type bits all cleared.)<br /><br />Edit: Hmm. Walking the array is<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">dey<br />bpl<br /></div><br />Walking the linked list is<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda OBJlist,y<br />tay<br />bpl<br /></div><br />So four cycles slower. Not too bad as far as things go.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Thu Apr 26, 2018 10:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A linked list implies you have a link, so you have at min a value and nextObject right? Where as an array you just have the value.<br /><br />Now you can put an linked list into an array, so you have 2 arrays, 1 values, 1 next. So to walk though the linked list you do to read value and get next<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">txa<br />tay<br />lda Value,x<br />ldx next,y<br /></div><br />right?<br />And then when you want to remove an object you then have to patch the Next, for the one before it, with the your next. So you need to walk through the list keep the previous index, until you find the one you want to remove, then patch up the prev/next. Unless you go double linked list, to which you now use 3 bytes per value, but it allows for faster insertions and removals. You could keep going until you reach the end, and then move the last node back into the node you just removed, and then patch the next for the 2nd last next to point to the new location. Then dec your allocator index to point to the next free slot. The benefit of this is you can just add a pool and have multiple lists in a pool and not have to fixed alloc any arrays, however adding and removing is expensive, if you don't care about having it in order you can still do a cheap walk thought the &quot;values&quot; array(if you only have one LL in the array). <br /><br />vs An Array where you have an array of Values, and a byte that holds the &quot;head&quot;<br />so to add an item<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx head<br />inc Head<br />sta Array,x</div><br />to remove an item, where x is the item you want to remove<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldy head<br />beq +<br />lda Array-1,y<br />sta Array,x<br />+<br />dec head</div><br />or if you need it to be &quot;in order&quot; you copy the loop items down. I would think that for the number of items you have on a a NES, ie. a handful, that doing a simple copy down loop would be faster than the search and re link of a linked list.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Apr 26, 2018 11:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All I can say is read this post I linked: <!-- m --><a class="postlink" href="http://forums.nesdev.com/viewtopic.php?p=96731#p96731">http://forums.nesdev.com/viewtopic.php?p=96731#p96731</a><!-- m --><br />You remove and add items in fixed time (unless creating the object is not possible), you can go iterate through the list by loading a single byte of RAM that holds the first index and then using the method I described in the last post.<br /><br />I guess, put another way, you don't need next plus value because next is <em>also</em> the value. So if the current object's index is in y<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda next,y<br />tay<br /></div><br />Now the next object's index is in y. Which is only 4 cycles slower than just the dey needed for an array walk.<br /><br />Edit: Maybe destruction/creation does get more complicated if you walk actively walk it, but then walking it would still be the above method. I admit I've only used it for destruction/creation. I don't walk the list.<br /><br />Edit2: I guess I need to write code to test this. Design wise, my object's can only destroy themselves. (If an object wants to destroy another, it request that object destroy itself) Knowing this, I guess I'd just store the previous index in the list to temp RAM, and if an object needed to destroy itself it would use that and still be fixed time without the RAM hit of a &quot;previous&quot; list.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Thu Apr 26, 2018 11:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />WAIT - so you are only using a linked list to hold the &quot;free&quot; list and not your data? <br />If your data is in a Linked List then you have to walk it to get your data right? And to destroy a thing you have to unlink it from somewhere in the list right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Apr 27, 2018 4:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You have to go through the object list in order regardless just to get the object data. (For the array, it's dey to get to the next object. For ... whatever this post describes, it's lda OBJnextline,x tay). What the list(s?) stores is an object index you can use to allocate an object OR access its data through.<br /><br />Knowing you may need to relink, it's easy to store the previous index that was run. Before the object loop runs, set the previous index RAM to $FF. During the loop, store the current index before retrieving the index of the next object. (This is needed to easily relink for destruction, but not for collision, so it's done once per object per frame regardless of how many times you walk the list in other ways.)<br /><br />OBJnext is the next free slot. <em>OBJnextline</em> is the next allocated object. The main loop looks like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #$FF<br />&nbsp; &nbsp;sta &lt;lastrun<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldx &lt;firstobject;If no objects have been created<br />&nbsp; &nbsp;bmi nothing;We shouldn't do anything<br />spritestart:&nbsp; &nbsp;<br />&nbsp; &nbsp;;Run object<br />spriteend:<br />&nbsp; &nbsp;stx &lt;lastrun;Store previous index for easy relinking in case of destruction<br />&nbsp; &nbsp;lda OBJnextline,x<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;bpl spritestart<br />nothing:<br /></div><br />To initialize the object list:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">initializeobjectlist:;{<br />&nbsp; &nbsp;lda #$FF<br />&nbsp; &nbsp;sta &lt;firstobject<br />&nbsp; &nbsp;sta &lt;lastobject<br />&nbsp; &nbsp;ldx #objectnum-1<br />&nbsp; &nbsp;stx &lt;OBJfreeslot<br />&nbsp; &nbsp;ldy #objectnum-2<br />iol.loop:<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;sta OBJnext,x;the next available slot is one index below the current to start<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jsr zeroobject<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$FF;Unless otherwise stated, there are no objects following us<br />&nbsp; &nbsp;sta OBJnextline,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;bpl iol.loop<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;rts;}<br /></div><br />To create and destroy objects, you have to be aware of the first and last object created (they are special cases), but otherwise don't need to walk the list.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">createobject:;{<br />&nbsp; &nbsp;;JSR here with the high byte of the object's address in &lt;reserved0 and the low byte of the object's address in &lt;reserved1<br />&nbsp; &nbsp;;If the object creation was successful, it the negative bit will be clear<br />&nbsp; &nbsp;ldx &lt;OBJfreeslot;If there's not a free object<br />&nbsp; &nbsp;bmi co.fail;We can't do anything<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;firstobject;If there are no objects in the list<br />&nbsp; &nbsp;bpl nochangefirst<br />&nbsp; &nbsp;stx &lt;firstobject;We're the first<br />nochangefirst:<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda OBJnext,x;Next free slot<br />&nbsp; &nbsp;sta &lt;OBJfreeslot<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldy &lt;lastobject;If there are no objects existing<br />&nbsp; &nbsp;bmi nofixlast;We can't link a previously created object to ourselves<br />&nbsp; &nbsp;txa;Otherwise, link our index<br />&nbsp; &nbsp;sta OBJnextline,y<br />&nbsp; &nbsp;<br />nofixlast:<br />&nbsp; &nbsp;stx &lt;lastobject;And claim our spot as the object more things need to link to<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$FF;Nothing follows us<br />&nbsp; &nbsp;sta OBJnextline,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;reserved1;Address to run our code<br />&nbsp; &nbsp;sta OBJaddrlow,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;reserved0<br />&nbsp; &nbsp;and #%01111111<br />&nbsp; &nbsp;sta OBJaddrhigh,x<br />&nbsp; &nbsp;<br />co.fail:<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;rts;}<br /></div><br />And to destroy an object:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">destroyobject:;{<br />;Destroy the object in X<br />&nbsp; &nbsp;lda &lt;OBJfreeslot;Freeing our slot<br />&nbsp; &nbsp;sta OBJnext,x<br />&nbsp; &nbsp;stx &lt;OBJfreeslot<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldy &lt;lastrun;If this is positive, we're not first in the list<br />&nbsp; &nbsp;bpl do.notfirst;<br />&nbsp; &nbsp;;If here, we're the first object<br />&nbsp; &nbsp;;But we're getting destroyed, so now the next object is the new first object<br />&nbsp; &nbsp;ldy OBJnextline,x<br />&nbsp; &nbsp;sty &lt;firstobject<br />&nbsp; &nbsp;cpx &lt;lastobject<br />&nbsp; &nbsp;bne do.return<br />&nbsp; &nbsp;;If we're also the last object<br />&nbsp; &nbsp;lda #$FF;And we're getting destroyed, so let's reset it<br />&nbsp; &nbsp;sta &lt;lastobject<br />&nbsp; &nbsp;<br />do.return:<br />&nbsp; &nbsp;rts<br />&nbsp; &nbsp;<br />do.notfirst:<br />&nbsp; &nbsp;lda OBJnextline,x;So we only need to relink the object ahead of use to the object behind us<br />&nbsp; &nbsp;sta OBJnextline,y<br />&nbsp; &nbsp;bpl do.nofix;If there's an object after us<br />&nbsp; &nbsp;sty &lt;lastobject;If we are, the object behind us becomes the last object<br />do.nofix:;We're not the object<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jsr zeroobject<br />&nbsp; &nbsp;ldx &lt;lastrun<br />&nbsp; &nbsp;rts<br /></div><br /><br />The collision loop looks like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">object.collisionloop:<br />&nbsp; &nbsp;ldy OBJnextline,x<br />&nbsp; &nbsp;bmi object.skipcollision<br />object.collision.start:<br />;You'd do the and type here if you wanted.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jsr generalspritecollision<br />&nbsp; &nbsp;bcc object.nextcollision<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jsr destroyobject<br />&nbsp; &nbsp;jmp spriteend<br /><br />object.nextcollision:<br />&nbsp; &nbsp;lda OBJnextline,y<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;bpl object.collision.start<br />object.skipcollision:<br /></div><br />One of the tricks of this is you can (probably) use OBJnext as a RAM for the object after its created. (Because the data one needs from it gets stored into OBJfreeslot on creation, and restored on destruction.) (I say probably because it was true, but I stopped it from being re-used when I hacked all this list walking stuff in.)<br /><br />Edit 2: So as far as RAM usage, this (probably) just needs objectnum bytes of RAM for OBJnextline. Which is 1 byte per value rather than three. (If I understand how you're measuring.) The head trick you used for the array also works here, but only one byte copy is needed to do the equivalent of &quot;copy down&quot;. (Granted, there's extra logic for the special cases, but a lot of things can probably be optimized. I threw this together.)<br /><br />The above code IS tested, but not thoroughly tested, so I don't guarantee yet that there aren't fragmentation issues here! I wrote this because I was pretty sure the concept I was suggesting would work, but hadn't actually done it!<br /><br />Another note: I definitely don't guarantee destroying the first object works properly, the thing I hacked this into makes it somewhat hard to test that without also removing the ability to test the rest of the collisions. <br /><br />Final verdict: It is ever so slightly faster when you're not maxing out your available objects and have room for more objects than you will probably need. Whether that's worth objectnum bytes of RAM, I don't know. Edit: Maybe I'm not going to bed. If you use the linked list concept in the tokumaru post I linked for object creation and destruction, but then go through the array the normal way you don't need an extra objectnum bytes of RAM. Which... is what I was doing before I tried this. It's neat in that you can create and destroy things without needing to seek and it only costs a byte of RAM. (Because the RAM for the rest of the list can be used by an object once instantiated. That said, in the context of this topic, it's not really any faster unless LOTS of objects are being created in a single frame or something.) <br /><br />If the concepts here aren't clear, let me know. Also let me know if it you find a logic error! I still recommend that if anyone reading wants to do something like that, they steal from this linked post: <!-- m --><a class="postlink" href="https://forums.nesdev.com/viewtopic.php?f=10&amp;t=13061&amp;p=152230&amp;hilit=linked+list#p152230">https://forums.nesdev.com/viewtopic.php ... st#p152230</a><!-- m --><br />Rather than this post. Edit3: As far as object creation without a seek, I truly believe the tokumaru approach is better (It's very similar to the head code for the array, and costs one byte of RAM when you're not trying to maintain a thing to walk through.) As far as if walking a linked list is better than the array approach, I'd have to think more about it, I dunno. This code gave me a decent amount of trouble. I'll probably continue doing what I did before I wrote this post: Linked list for object creation/destruction, walk the array for everything else until some project requires more. <br /><br />I'm now going to bed.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> I hope I don't wake up and find 1,000 errors in this post &gt;_&gt;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Apr 27, 2018 6:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had a the slot solution sort of conceptualized, but I wonder - how much time would it actually take to process these lists in a frame?  If it's just a bit mask read to put an object into the correct list, and object number is always fairly small (sixteen or so), it seems that would be pretty quick.  LDA Object_type,x AND #HARMFUL_TO_PLAYERS puts it in the next slot in &quot;harmful&quot; objects, AND #HARMFUL_TO_MONSTERS puts it into next slot in &quot;weapon&quot; objects.  Could use a pair (or more, if you needed more 'types') of RAM variables to keep track of offset as it loops.  Seems that would be super quick to sort out just prior to collision routine, no?  <br /><br />And then handle collisions accordingly?<br /><br />Might even be able to alternate frames without noticing - handle harmful to player even, harmful to monster odd.  Obviously it adds some time to every frame, but it seems pretty light, so long as you didn't have continue to reiterate through the list, and just did one pass to sort?<br /><br />I think I'll try this and report back.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Apr 27, 2018 7:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">LDA Object_type,x AND #HARMFUL_TO_PLAYERS puts it in the next slot in &quot;harmful&quot; objects, AND #HARMFUL_TO_MONSTERS puts it into next slot in &quot;weapon&quot; objects. Could use a pair (or more, if you needed more 'types') of RAM variables to keep track of offset as it loops. Seems that would be super quick to sort out just prior to collision routine, no? </div><br />Do you mean sort before collision every frame? Because if you need to AND #HARMFUL_TO_MONSTERS to sort, you may as well just do the collision right then. I think you're misunderstanding. You don't do the bitmask to put it into a list, you do the bitmask to decide if a collision check between the objects is wanted. And if you don't mean sort before collision every frame, you can just add things to proper groups when they're created and still not sort.<br /><br />Doing only some collisions every frame can be good.<br /><br />You can also possibly make your collision routine itself faster: <!-- m --><a class="postlink" href="http://atariage.com/forums/topic/71120-6502-killer-hacks/page__st__50#entry1054049">http://atariage.com/forums/topic/71120- ... try1054049</a><!-- m --><br />That looks a bit faster than what you're doing. You have to do some setup for it instead of the constants, but you're already doing some similar setup in the code that's there.<br /><br />And you're counting up, not down which means a compare every loop.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDY #$00<br />;stuff<br />INY<br />CPY #TOTAL_MAX_OBJECTS<br />BNE DO_COLLISION_LOOP<br /></div><br />vs<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDY #TOTAL_MAX_OBJECTS-1<br />;stuff<br />dey<br />bpl DO_COLLISION_LOOP<br /></div><br />Saves you a compare for every iteration.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Apr 27, 2018 7:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good notes.  I meant effectively creating tables every frame.<br /><br />Rather than cycling through, seeing &quot;yes, this should hurt monsters&quot;, and then evaluating every object to see if it's a monster, start by creating a table of weapons and a table of monsters, and then just comparing them against each other.  This seems that it would be faster, but I'm not sure how much.  <br /><br />The other method is what I was working on yesterday - having arrays that fill with FF to designate an empty spot, and when an object is created, it finds an empty spot (otherwise, it can not be created) in a &quot;monster object&quot; table, or a &quot;weapon object&quot; table.  When it's destroyed, its position in the monster object table reverts to FF.  And then every frame, comparing the weapons and monsters against each other.<br /><br />The former seems cleaner and easier, albeit slower.  The question is, HOW much slower, and would it be passably so?  That's sort of what I'm looking at.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Apr 27, 2018 7:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As far as creating the tables every frame: You're going through object list an extra time.<br /><br />Cycle through once to create the lists, cycle through again to run the object logic (and cycle through the list that was created to collide for each object)<br />Vs.<br />Cycle through once, (and cycle through again to collide for each object).<br /><br />I don't think you'd win with the top method. You're loading, then storing the result of the and, only to load it and still branch later on the second go around. Vs. Loading and checking the result of the AND on the first go around, and not going through again.<br /><br />The second thing (separate lists managed at creation) will likely beat both soundly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Apr 27, 2018 7:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah - I see the logic in what you're saying.<br /><br />But I guess what I'm thinking is...rather than checking every object against every object (16*15, 15*14, 14*13...etc), instead I'd be doing a quick run through a single time to see where to put the objects, and then running them against each other (monObjectx*weaponObjectx), which would be significantly less than 16, for both, so the one time through to do the sorting into groups would be significantly less than going through, finding it does collide with monster objects, then looking at every object to see if it's a monster object, and if it is, then fire the collision routine.  Now, I'd already have a list of monsters from that one pass.<br /><br />But I do see how lists being populated on creation/destruction would be even more efficient still than that!  Hm.  Maybe I'll go back to that method.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Apr 27, 2018 7:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Object collisions - &quot;grouping&quot; / speed benefit</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />At some level, the problem involves defining what are your hitboxes, what are your hurtboxes, and what is your terrain. A &quot;hitbox&quot; deals damage when it collides with a &quot;hurtbox&quot;.<br /><br />I'll give an example based on a game I've worked on a couple years ago. <em>The Curse of Possum Hollow</em> puts objects into several pools:<br /><br /><ul><li>Player (1)<br />Move routine is most complex. Hurtbox is body. Hitbox is outside body during attacks.</li><li>Party members (up to 2)<br />The only thing saved is HP. No collision.</li><li>Enemies (up to 5)<br />Move routine can be complex. Hitbox is body, checked against player hurtbox. Hurtbox is body, checked against player attack hitbox and player bullets.</li><li>Bullets (up to 12)<br />Move routine is hardcoded. Hitbox is small, checked against player, enemy, or neither depending on bullet type. Each can be associated with a hardcoded CHR window or with the window of a particular enemy to disappear once the enemy disappears. Weapon hitboxes are represented as invisible bullets. Environmental effects (rain, leaves, splashes) are also bullets, but their collision is skipped.</li><li>Enemies ready to spawn (up to 8)<br />Enemy waiting for there to be fewer than 5 enemies on the screen, an available CHR window, or the camera to proceed to a given point. These collide with nothing.</li><li>Terrain rectangles (no hardcoded limit)<br />To save memory and make collision maps fine down to the 8x4-pixel level, <em>Curse</em> and its predecessor <em>HH85</em> represent terrain as a list of horizontally sorted rectangles in ROM. But unlike the object-based levels in <em>Super Mario Bros.</em>, <em>Super Mario Bros. 3</em>, and <em>Super Mario World</em>, the rectangles are never expanded into a sliding window bitmap. Instead, the collision routine checks them against the rectangles in ROM.</li></ul><br />The following loops check collision:<br /><br /><ul><li>Player against floor heightmap and terrain rectangle list: O(t) </li><li>Player attack hitbox against all enemies: O(n) </li><li>Enemy hitboxes against player: O(n) </li><li>Walking enemies against terrain rectangle list: O(t*n) </li><li>Player bullets against enemies O(b*n) </li><li>Enemy bullets against player: O(b) </li><li>Environmental bullets against floor heightmap: O(b) </li></ul>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>