<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Dynamic Sprite Vram Routine Ideas</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Dynamic Sprite Vram Routine Ideas</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12305">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12305</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Jan 29, 2015 11:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see a couple mistakes.  #$0100 is 256, #$0200 is 512.  TYA and TAY only transfers the low 8-bits of Y because the accumulator is 8-bit, though this would not be a problem with 16x16s and 32x32s.  After counting X up to 8, you didn't reset it.<br /><br />Now this is how to calculate the tile number, when using 16x16s and 32x32s.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">tya<br />asl<br />and #$f0<br />sta TempY<br />tya<br />and #$07<br />ora TempY<br />rep #$20<br />and #$00ff<br />asl<br />sta TempY<br />sep #$20<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Fri Jan 30, 2015 12:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"> Isn't the sprite wrap on the SNES sprite page/bank/whatever, at 16k?</div><br />Huh?<br /><br />SNES has two active 8 kB sprite tables (square, 128x128) at any given moment.  They can be located more or less anywhere in VRAM, with the PPU informed of their locations via OBSEL ($2101); they do not need to be adjacent.  I'm not sure if you can change OBSEL during HBlank (though I certainly hope so, and I should probably test this), but I know you can change it between frames.<br /><br />The format is SNES bitplane 4bpp, of course, and each row of 16 tiles is contiguous in VRAM, followed immediately by the next row down.  That's the only &quot;wrap&quot; I'm aware of.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 30, 2015 9:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can insert a 0 bit into a register by masking off the low bits and adding to itself. I learned this a couple days ago. Here's the basic idea in 6502 or in 65816 8-bit mode (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sep #$20</tt>):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; C&nbsp; A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tmp<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; ?&nbsp; hgfedcba&nbsp; ????????<br />&nbsp; sta tmp&nbsp; &nbsp; &nbsp;; ?&nbsp; hgfedcba&nbsp; hgfedcba<br />&nbsp; and #$F8&nbsp; &nbsp; ; ?&nbsp; hgfed000&nbsp; hgfedcba<br />&nbsp; clc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 0&nbsp; hgfed000&nbsp; hgfedcba<br />&nbsp; adc tmp&nbsp; &nbsp; &nbsp;; h&nbsp; gfed0cba&nbsp; hgfedcba<br /></div><br /><br />Or in 65816 16-bit mode (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rep #$20</tt>), also inserting a bit at the bottom:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; C&nbsp; BA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tmp<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; ?&nbsp; ???????? hgfedcba&nbsp; &nbsp;???????? ????????<br />&nbsp; and #$00FF&nbsp; ; ?&nbsp; 00000000 hgfedcba&nbsp; &nbsp;???????? ????????<br />&nbsp; asl a&nbsp; &nbsp; &nbsp; &nbsp;; 0&nbsp; 0000000h gfedcba0&nbsp; &nbsp;???????? ????????<br />&nbsp; sta tmp&nbsp; &nbsp; &nbsp;; 0&nbsp; 0000000h gfedcba0&nbsp; &nbsp;0000000h gfedcba0<br />&nbsp; and #$01F0&nbsp; ; 0&nbsp; 0000000h gfed0000&nbsp; &nbsp;0000000h gfedcba0<br />&nbsp; adc tmp&nbsp; &nbsp; &nbsp;; 0&nbsp; 000000hg fed0cba0&nbsp; &nbsp;0000000h gfedcba0<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Fri Jan 30, 2015 4:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I see a couple mistakes.  #$0100 is 256, #$0200 is 512.  TYA and TAY only transfers the low 8-bits of Y because the accumulator is 8-bit, though this would not be a problem with 16x16s and 32x32s.  After counting X up to 8, you didn't reset it.</div><br />Oh...<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Now this is how to calculate the tile number, when using 16x16s and 32x32s.Code:tyaasland #$f0sta TempYtyaand #$07ora TempYrep #$20and #$00ffaslsta TempYsep #$20</div><br />Would that work like if a single register represented a single tile, or if a register represented a 16x16 tile? Also, sorry, but where would you put the code? When you jump back?<br /><br />Here's the code I kind of converted, just changing the names of things, fixing the bugs from the other code (y is now 8bit, meaning tya and tay should be fine) and doing some stuff to act like you are using 32x32 sprites.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">look_for_16x16_vram:<br />&nbsp; &nbsp;cpy #$00F0&nbsp; &nbsp; &nbsp; ;512, because there are 128 slots for sprites (this number can be anything, just not over 128)<br />&nbsp; &nbsp;beq no_slot_found&nbsp; &nbsp;;no space left for sprite<br />&nbsp; &nbsp;lda Vram,y&nbsp; &nbsp;<br />&nbsp; &nbsp;beq slot_found&nbsp; &nbsp; &nbsp; ;there is space for another sprite<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;bra look_for_16x16_vram&nbsp; &nbsp;;look again if the space is already occupied<br /><br />look_for_32x32_vram:<br />&nbsp; &nbsp;cpy #$00F0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;512, because there are 128 slots for sprites (this number can be anything, just not over 128)<br />&nbsp; &nbsp;beq no_slot_found&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;no space left for sprite<br />&nbsp; &nbsp;lda Vram,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;upper lefthand corner of square<br />&nbsp; &nbsp;bne prepare_for_look_for_32x32_vram&nbsp; &nbsp;;look again if the space is already occupied<br />&nbsp; &nbsp;lda Vram+1,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;upper righthand corner of square&nbsp; &nbsp;<br />&nbsp; &nbsp;bne prepare_for_look_for_32x32_vram&nbsp; &nbsp;;look again if the space is already occupied<br />&nbsp; &nbsp;lda Vram+8,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;lower lefthand corner of square<br />&nbsp; &nbsp;bne prepare_for_look_for_32x32_vram&nbsp; &nbsp;;look again if the space is already occupied<br />&nbsp; &nbsp;lda Vram+9,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;lower righthand corner of square<br />&nbsp; &nbsp;bne prepare_for_look_for_32x32_vram&nbsp; &nbsp;;look again if the space is already occupied<br />&nbsp; &nbsp;bra 32x32_slot_found&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;there is space for another sprite&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br /><br />prepare_for_look_for_32x32_vram:<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cmx&nbsp; &nbsp;#$04<br />&nbsp; &nbsp;beq&nbsp; &nbsp;next_row<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;bra look_for_32x32_vram<br /><br />next_row:<br />&nbsp; &nbsp;tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;If this is done right, this should skip every other row of tiles<br />&nbsp; &nbsp;adc&nbsp; &nbsp;#$10<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;ldx&nbsp; &nbsp;#$00<br />&nbsp; &nbsp;bra look_for_32x32_vram<br /><br />16x16_slot_found:<br />&nbsp; &nbsp;inc&nbsp; &nbsp;Vram,y&nbsp; &nbsp; &nbsp; ;say that one of the slots is now taken<br />&nbsp; &nbsp;sty&nbsp; &nbsp;TempY&nbsp; &nbsp; &nbsp; ;TempY holds the vram offset<br />&nbsp; &nbsp;rts<br /><br />32x32_slot_found:<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#$01<br />&nbsp; &nbsp;sta&nbsp; &nbsp;Vram,y&nbsp; &nbsp; &nbsp; ;say that four of the slots are now taken<br />&nbsp; &nbsp;sta&nbsp; &nbsp;Vram+1,y<br />&nbsp; &nbsp;sta&nbsp; &nbsp;Vram+8,y<br />&nbsp; &nbsp;sta&nbsp; &nbsp;Vram+9,y<br />&nbsp; &nbsp;sty&nbsp; &nbsp;TempY&nbsp; &nbsp; &nbsp; ;TempY holds the vram offset<br />&nbsp; &nbsp;rts<br /><br />no_slot_found:<br />&nbsp; &nbsp;rts&nbsp; &nbsp;;nothing else you can really do...</div><br /><br />Oh wait, I'm dumb, are you, tepples, speaking of a way how to have one register represent 8 tiles because, you know, each register holds 8 bits?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 30, 2015 5:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm talking about how to efficiently &quot;calculate the tile number, when using 16x16s and 32x32s&quot; as psycopathicteen put it, how to efficiently index into the following sequence:<br /><br />[0, 2, 4, 6, 8, 10, 12, 14, 32, 34, 46, 48, 40, 42, 44, 46, 64, 66, 68, 70, 72, 74, 76, 78, 96, ...]<br /><br />Do I need to draw and post a diagram, as usual?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Fri Jan 30, 2015 5:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry! I just didn't really look at it... <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> (You do have to remember that not everyone is as cool as you. <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Jan 30, 2015 11:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is a way to check individual bits of a byte.  There's an instruction called &quot;bit abs,x&quot; that works like &quot;and abs,x&quot; except it doesn't affect the accumulator, only the zero flag.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Sun Feb 01, 2015 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">I see we have different opinions... Well, I respect yours anyway! <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> The one thing I do have to say though is that having the whole 64KB range for sprites is cool, but maybe not all that practical because of BG tiles.</div><br /><br /> It's not just 64k; there are <em>no </em>page or bank limits on those systems. That's a pretty nice advantage when you're creating games that needs unique sprite frames for each <em>object </em>(unique for the frame) and/or double buffer too, and/or more room for stored animation. For example, a very common setup is <em>32k for sprites</em> and 32k for tilemap and tiles. It's not the full 64k range, but still way more flexible than two banks of 8k (256 cells), and those said banks wrap (no falling through to the next bank). The SNES larger SAT does nothing to address <em>that </em>issue, but having 6 or more sprite sizes available readily in each SAT/OAM entry - <em>does </em>directly address the issue of a smaller SAT/OAM size; it helps negate that issue. Just look at the SNES itself, if you chose sprite sizes of 16x16/32x32 - do you really think you need that full 128 SAT/OAM size?? No. But if you went with something like 8x8/16x16, then <em>anything </em>outside of those two sizes requires <em>more </em>than one OAM entry. 64 entries with a sprite size of 32x32 still has more accumulated pixel coverage than a 256x223/239 screen. I.e. more pixels than you can show. I mean, unless your game has no individual objects larger than 16x16 (Gauntlet clone?)<br /><br /> The larger OAM table entry size is more of a supplement to a <em>specific </em>limitation (8x8/16x16), than a <em>general </em>advantage by comparison. That's not to say there aren't specific case advantages (particle effects, etc). SNES has a <em>lot </em>of advantages in the video department of the other systems, but sprites in general isn't really one of them (with the exception of cells and objects per line). So I don't see it as a matter of opinion (or a difference of opinion), but a matter of application in practice (the proof of the pudding is in the eating?).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's the only &quot;wrap&quot; I'm aware of.</div><br />The wrap on the table of 16x16 cells (8kbyte page in this context), if the sprite size is larger than 8x8.<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">There is a way to check individual bits of a byte.  There's an instruction called &quot;bit abs,x&quot; that works like &quot;and abs,x&quot; except it doesn't affect the accumulator, only the zero flag.</div><br /><br /> Should effect Z, N, and V flags. That's not an advantage in this context, I take it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 01, 2015 8:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The opinion part was mostly that I think that 16x16's and 32x32 on the SNES is about equal with the sprite configuration on the TurboGrafx-16/PC Engine. Either Wikipedia's wrong (wouldn't surprise me <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> ) because it said the PCE used 16x16 sized sprites as its smallest size, unlike the SNES and the Genesis that use 8x8 sprites as the smallest size. Because the PCE has double wide sprites, (excluding the 16×64 size) but only half the number of sprites, the SNES using 16x16 and 32x32 and the PCE can cover the same amount of screen with sprites, (not counting overdraw, but I'd hardly call 16 more pixels an &quot;advantage&quot; <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> ) but there are different advantages for both. In the event you want the entire screen to be filled with 16x64 sized sprites, you can do this on the PCE, but not the SNES because it doesn't have 4x the number of sprites. If you had the entire screen filled with 32x64 sprites on the PCE, you could do the same think with the SNES because although you don't have 32x64 sized sprites, you still have 2x the amount of sprites, and they are 32x32, so you could just piece them together. you could also have a 64x32 sized &quot;sprite&quot; on the SNES and you can do the same thing on the PCE, but it will cost you twice as much. I think that both systems have different advantages, (SNES having x2 the amount of sprites, PCE having more sprite sizes and, more importantly, a lot more flexibility with sprite tiles) so its impossible to really declare a &quot;winner&quot;, as both are better for different situations. <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Feb 01, 2015 8:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">you don't have 32x64 sized sprites</div><br />Yes you do.  Set the top three bits of OBSEL to 110 and that's the Large sprite size.  Small is 16x32.<br /><br />Reportedly the vertical flip function works on each half separately, though, which might be why Nintendo didn't bother telling anyone about this feature...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 01, 2015 8:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I meant with the 16x16 and 32x32 combo. (probably should have specified that... <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> ) Also just thinking, I know this isn't exactly a sprite issue, (its a BG one) but many games on the PCE uses sprites for background elements, reducing the amount of sprites to use by a bit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Feb 02, 2015 1:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm wondering.  If you have the same sprite shown on two or more consecutive frames, and to save on DMA bandwidth, your keeping the sprites in the same place in vram, how were you planning on keeping track of the locations?  I have two ideas:<br /><br />1) Each object slot holds the tile numbers for all sprites in the object's metasprite.<br />2) Each object slot holds a pointer to where in the OAM the object's metasprite was written to in the previous frame, so it can look up the tile numbers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Mon Feb 02, 2015 7:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">I meant with the 16x16 and 32x32 combo. (probably should have specified that... <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> ) Also just thinking, I know this isn't exactly a sprite issue, (its a BG one) but many games on the PCE uses sprites for background elements, reducing the amount of sprites to use by a bit.</div><br /><br /> Depends on the game. It's not that common, but Lords of Thunder and Dracula X:Rondo of blood probably do it the most.<br />I made a video a while back showing a PCE game using sprites for non object stuffs:<br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=Mm4pKt_LE2k">https://www.youtube.com/watch?v=Mm4pKt_LE2k</a><!-- m --><br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=PQX8KfYT-zc">https://www.youtube.com/watch?v=PQX8KfYT-zc</a><!-- m --><br />All real BG stuff is greyscale and all sprites are monochrome (green or red). If it looks like separate scrolling layers in the BG and it's not monochrome green/red, then it's either hsync line scrolls and/or dynamic tiles.<br /><br /> Watch the second video, then watch <a href="http://youtu.be/fqL0ebFmOpg?t=6m41s" class="postlink">this</a>. The pillars are sprites. As much as sprites are on screen at that moment, the SAT isn't maxed out AFAIK. Though it's probably pretty close. But I find those results <em>very </em>acceptable, considering you really <em>don't</em> see snes games with such a number of objects on screen - let alone exceed it. <br /><br /> The problem with using sprites for more complex overlapping BG parts, is that it increases the risk of hitting the sprite scanline pixel limit - <em>not </em>maxing out the SAT. I have a WIP demo that uses a ton of sprites to simulate a large free-directional second BG layer on the PCE, <em>way </em>more than any official game and the SAT isn't maxed (enough entries left for a SMB3 or Sonic style game objects. It's the scanline limit that's the issue, not so much the SAT size). Anyway, I can't think of a better real example than the last video I linked (superhard mode for PCECD; revenge bullets), for how the SAT size isn't an issue at that res. Matter of fact, on the Genesis it's 64 too. It's only bumped to 80 when using 320 mode, because there's 25% more pixel coverage needed for the same screen real estate/area. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Reportedly the vertical flip function works on each half separately,</div><br />Which kinda makes then useless. That, and the fixed rectangle size for both entries. <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">because it said the PCE used 16x16 sized sprites as its smallest size</div><br />That's correct. Though there's a way to make it do vertical cell size of 8 pixel increments (XXby8,XXby16,XXby32), but no official games do this. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you had the entire screen filled with 32x64 sprites on the PCE, you could do the same think with the SNES because although you don't have 32x64 sized sprites, you still have 2x the amount of sprites, and they are 32x32, so you could just piece them together</div><br /><br /> But see, this is my point. As soon as you start to compare/argue/whatever <em><span style="text-decoration: underline">larger </span></em>sprite sizes than 16x16, it really becomes irrelevant. Because you're gonna hit that sprite scanline pixel limit way <em><span style="text-decoration: underline">before </span></em>you hit the full entry of the SAT/OAM. That's my point. From games that I played over the years of that era, 16x16, 32x16, 16x32, and 32x32 seem to be the most common sizes. Or close to those sizes but the same range (Genesis has more options for in between sizes). <br /><br /> Your examples aid my point; the larger SAT/OAM-table is meaning less for sprite sizes outside of 8x8/16x16 - because all these system have a pretty limited sprite scanline limit, and you're gonna hit that limit much before you hit the table limit.<br /><br /> I do think the 8x8/16x16+128OAMsize has a lot of advantages and is the <em>best </em>mode of the SNES. It's just more cpu overhead (and coupled of the upper layout of the OAM table, etc). 16x16/32x32 makes sense for reducing cpu overhead, but I don't think it's a better mode; just more practical in regards to cpu usage. I just don't see how the the 128 table size is advantageous outside of <em>that </em>mode, especially when real world examples show otherwise. <br /><br /><br /> If you're interested in discussing this further (examples, etc), maybe we should start a new thread instead of derailing/side tracking this one?  <br /><br />So this organization routine you're writing - it's for 16x16/32x32 mode right? Because of how the sprites cell rows are interleaved?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Mon Feb 02, 2015 9:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I'm wondering.  If you have the same sprite shown on two or more consecutive frames, and to save on DMA bandwidth, your keeping the sprites in the same place in vram, how were you planning on keeping track of the locations?  I have two ideas:<br /><br />1) Each object slot holds the tile numbers for all sprites in the object's metasprite.<br />2) Each object slot holds a pointer to where in the OAM the object's metasprite was written to in the previous frame, so it can look up the tile numbers.</div><br />The way I was thinking it would be to go through the code, find the result, and then store it in a register offset by what sprite it is currently on. (So there will be 128) When my code jumps to the metasprite routine, it loads the values for the metasprite table in a sprite buffer offset by y. You probably load the tile number byte offset by y (unfortunately, this means using 512 registers...) and then adding the number to the bytes in OAM that hold the Character selection bits. To be completely honest with you, I really haven't even thought this far. (And it's not even far at all... <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Wed Feb 04, 2015 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A bit of a bump but, you know, another thing I'm starting to wonder is how you are going to tell the metasprite routine where to look for the tiles in each sprite. It's easy to do it for x and y position, because you can always find each sprite's position relative to the metasprites x and y, but you cant really do this for character data, because in the routine I made, there are plenty of times where there could be a gap in between sprites in a metasprite do to how it handles double sized sprites. I have my original metasprite code (that still has plenty of work to be done <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> ) right here,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">: lda MetaspriteCount&nbsp; &nbsp; &nbsp; &nbsp;; If MetaspriteCount is zero, then we're done.&nbsp; Otherwise we have<br />&nbsp; beq done&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; metasprites to iterate over and populate for DMA (see VBlank)<br />&nbsp; lda MetaspriteTable,x&nbsp; &nbsp; &nbsp;; 1st byte = sprite X position (value 0-255)<br />&nbsp; adc MetaspriteXPosition<br />&nbsp; and #$00FF<br />&nbsp; sta SpriteBuf1,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Store sprite X position SpriteBuf1+y<br />&nbsp; lda MetaspriteTable+2,x&nbsp; &nbsp;; 2nd byte = sprite Y position (value 0-255)<br />&nbsp; adc MetaspriteYPosition<br />&nbsp; and #$00FF<br />&nbsp; sta SpriteBuf1+1,y&nbsp; &nbsp; &nbsp; &nbsp; ; Store sprite Y position in SpriteBuf1+1,y<br />&nbsp; lda MetaspriteTable+4,x&nbsp; &nbsp;; 2nd byte = sprite Y position (value 0-255)<br />&nbsp; sta SpriteBuf1+2,y&nbsp; &nbsp; &nbsp; &nbsp; ; Store sprite Y position in SpriteBuf1+1,y<br />&nbsp; txa<br />&nbsp; clc<br />&nbsp; adc #$0006<br />&nbsp; tax<br />&nbsp; tya<br />&nbsp; clc<br />&nbsp; adc #$0004&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Increment Y by 4 because each sprite in the OAM table has 4 bytes<br />&nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; dec MetaspriteCount&nbsp; &nbsp; &nbsp; &nbsp;; Decrement MetaspriteCount by 1<br />&nbsp; bra :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Back to the loop...</div><br /><br />and the makeshift one right here. (The hard part was trying to index for 3 different things) I really don't want to jump the routine that finds tile numbers in the metasprite routine, because that would cause me to find the tile number of sprites that aren't even going to undergo any animation change.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">: lda MetaspriteCount&nbsp; &nbsp; &nbsp; &nbsp;; If MetaspriteCount is zero, then we're done.&nbsp; Otherwise we have<br />&nbsp; beq done&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; metasprites to iterate over and populate for DMA (see VBlank)<br />&nbsp; lda MetaspriteTable,x&nbsp; &nbsp; &nbsp;; 1st byte = sprite X position (value 0-255)<br />&nbsp; adc MetaspriteXPosition<br />&nbsp; and #$00FF<br />&nbsp; sta SpriteBuf1,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Store sprite X position SpriteBuf1+y<br />&nbsp; lda MetaspriteTable+2,x&nbsp; &nbsp;; 2nd byte = sprite Y position (value 0-255)<br />&nbsp; adc MetaspriteYPosition<br />&nbsp; and #$00FF<br />&nbsp; sta SpriteBuf1+1,y&nbsp; &nbsp; &nbsp; &nbsp; ; Store sprite Y position in SpriteBuf1+1,y<br />&nbsp; lda MetaspriteTable+4,x&nbsp; &nbsp;; 2nd byte = sprite Y position (value 0-255)<br />&nbsp; sty TempY1<br />&nbsp; ldy MetaspriteCharacterOffsetOffset ;(a bit redundant, but I can't think of a better title right now...)<br />&nbsp; clc<br />&nbsp; adc MetaspriteCharacterOffset,y<br />&nbsp; iny<br />&nbsp; sty MetaspriteCharacterOffsetOffset<br />&nbsp; ldy TempY1<br />&nbsp; and #$01FF<br />&nbsp; sta SpriteBuf1+2,y&nbsp; &nbsp; &nbsp; &nbsp; ; Store sprite Y position in SpriteBuf1+1,y<br />&nbsp; txa<br />&nbsp; clc<br />&nbsp; adc #$0006<br />&nbsp; tax<br />&nbsp; tya<br />&nbsp; clc<br />&nbsp; adc #$0004&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Increment Y by 4 because each sprite in the OAM table has 4 bytes<br />&nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; dec MetaspriteCount&nbsp; &nbsp; &nbsp; &nbsp;; Decrement MetaspriteCount by 1<br />&nbsp; bra :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Back to the loop...</div><br />Just so you know, this is using ca65 assembler.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>