<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=15953" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2017-05-21T19:55:21-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=15953</id>
<entry>
<author><name><![CDATA[creaothceann]]></name></author>
<updated>2017-05-21T17:26:31-07:00</updated>
<published>2017-05-21T17:26:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196294#p196294</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196294#p196294"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196294#p196294"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />not 298/256<br /></div><br />My fault, wrote 298 above before noticing and fixing it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=290">creaothceann</a> — Sun May 21, 2017 5:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2017-05-21T19:55:21-07:00</updated>
<published>2017-05-21T16:47:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196292#p196292</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196292#p196292"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196292#p196292"><![CDATA[
<div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />You can temporarily stretch your image from 256 pixels wide to 298 pixels  wide to preview how your art will look once its showing on an actual SNES.<br /></div><br />The PAR for NTSC is 8:7, which is 292.57/256, not 298/256.  Stretching to 293 is probably close enough; I'm sure it varied a bit between TVs.<br /><br />The PAR for PAL is roughly 11:8, <s>which is 352/256</s> or more accurately 354.86/256.  This means that art drawn for an NTSC SNES will look fat on a PAL SNES.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />however you can opt to use a 16x16 tile mode instead, which would allow for level maps being twice as high and wide in pixels<br /></div><br />It's not quite that simple.  Level maps are usually far larger than tilemaps.  You use map scrolling techniques (using DMA to overwrite rows and/or columns in a tilemap between frames) to seamlessly move around the level map.  Since a lot of developers use metatiles in their level formats, using 16x16 tiles might not even save any ROM, though it could save some CPU time when generating the tilemap data from the level data.<br /><br />The most obvious advantage is that it saves a bit of VRAM, since you only need one map to do horizontal scrolling.  You could also use the same map to handle more than one layer, if you were careful with scroll values; with HDMA to handle mid-screen scroll changes you could even do vertical scrolling of both layers.  This sort of thing can add up fast - horizontal scrolling with three layers of 8x8 tiles takes six tilemaps, or 12 KB, which is a significant chunk of the 64 KB VRAM, but with 16x16 tiles it could be done in about 3 KB if you're clever (you can store tiles in the tilemap area if you know that part of the tilemap isn't going to be onscreen) or 6 KB with no cleverness whatsoever.<br /><br />Basically it covers more real estate for the same amount of VRAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Each layer can use up to 1,024 tiles, limited by the amount of VRAM being used by all other graphical assets.<br /></div><br />Your next statement, regarding tile flipping, notes that Mode 7 is the exception to it.  It's true in this case too.  Mode 7 can only use 256 tiles.<br /><br />It's a severe limitation, especially with the lack of flipping.  You actually can't do a fullscreen full-resolution image in Mode 7 without repeating tiles, because 256 tiles is only a 128x128 square.  Mind you, you can still <em>fill</em> the screen because of the scaling capability afforded by the transform matrix, and if you <em>do</em> reuse tiles the map is an immense 1024x1024 texels; it's just that if you convert an arbitrary image to Mode 7, and it doesn't happen to have repeating patterns that align to an 8x8 grid, it will have to be either blocky or small.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Sun May 21, 2017 4:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bitbeam]]></name></author>
<updated>2017-05-21T09:13:25-07:00</updated>
<published>2017-05-21T09:13:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196262#p196262</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196262#p196262"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196262#p196262"><![CDATA[
I've made the latest corrections and clarifications. I think it's getting close&quot;<br />_____________________________________________________________________________________________________<br /><br /><br /><br />Super Nintendo/Super Famicom<br /><br />Graphical summary<br /><br /><br /><br />Important: The SNES stretched its 256 pixel wide screen image horizontally, resulting in pixels which were wider than they are tall (not perfect squares). As almost all monitors these days use pixels which are very close to perfect squares, your artwork and the entire width of the screen will be wider running on the actual hardware or an emulator which compensates for this pixel aspect ratio difference. You can temporarily stretch your image from 256 pixels wide to 298 pixels  wide to preview how your art will look once its showing on an actual SNES.<br /><br /><br />Standard game resolution: Most games were 256x224 in Japan, the US, and Canada. Other regions such as Europe, Africa and south America used  PAL as opposed NTSC television standard and had a slightly increased vertical resolution (239 pixels instead of 224), but at the cost of games running 10 fps slower and the screen having a subtle but noticeable non-stop flicker due to a 50 FPS refresh rate instead of 60 FPS. The PAL versions of most popular games did not put use to the extra resolution so often just had a larger black bar at the bottom of the screen, nor did they compensate for the 10 FPS slow-down so the games actually ran noticeably slower. For these reasons, most emulators and re-releases of classic SNES games use the NTSC versions of the games.   Higher resolutions up to 512x448 (512x478 for PAL) were possible but since higher resolutions caused “interlace flicker”, and/or had increased limitations on layers and colors (due to memory bandwidth constraints); the higher resolutions were used for less movement and animation-intensive games, in-game menus, text, and high resolution images. <br /><br />color range: The SNES uses 5 bits per color channel, providing a palette of 32,768 colors. <br /><br />Number of color indexes available: 256, but many more on-screen colors were possible via color arithmetic for translucency effects. The three formulas for color overlay effects are additive, subtraction and average.<br /><br />Background graphics color limitations: <br /><br />There are 8 separate modes the SNES can use which offer very different and often complicated combinations of abilities and limitations. I'll only be covering the two most common and useful modes when the goal is multi-layered scrolling games.<br /><br />MODE 1 allows for 3 scrolling layers, where 2 layers allow 15 colors (plus transparent) per tile and the third layer is three colors plus transparent per tile. <br />Every tile in each of the two 16 (15 and transparent) color per tile layers can pick from any of the eight 16 color palettes reserved for backgrounds, where palette 0 is color indexes 0 through 15, palette 1 is color indexes 16 through 31 and so forth.<br />The 4 color (3 plus transparent) per tile layer allows each of its tiles to pick from eight 4 index sub-sets of the first 2 16 color palettes... so, the first 4 color subset would be indexes 0 through 3, the second subset would be indexes 4 through 7.<br /><br />MODE 3 allows for 2 layers of scrolling, where one layer is 15 colors (plus transparent) per tile and the other layer allows for each tile to use the entire range of 256 colors! (255 plus transparent) This mode is often used for title-screens. Keep in mind the cost of having each 8x8 tile being 256 color, it will eat up Vram much faster than 16 color or 4 color tiles, and a background later using 16 color tiles which can each use any of 8 total 16 color palettes means you can easily make 120 color layers at a far smaller cost, and this is before any use of the translucent color blend modes or other available very low-”cost” tricks to increase the number of on-screen colors. This is why most games use mode 1 over mode 3 for actual in-game levels. Also keep in mind, in mode 3, the second set of 128 colors (color indexes) are shared between the 256 color background layer and the sprites.<br /><br />In general sprites can be set to be in front of or behind any of the the background layers. More information on that can be found here: <!-- m --><a class="postlink" href="https://wiki.superfamicom.org/snes/show/Backgrounds">https://wiki.superfamicom.org/snes/show/Backgrounds</a><!-- m --><br /><br />Each scrolling layer is typically made of 8x8 pixel tiles, however you can opt to use a 16x16 tile mode instead, which would allow for level maps being twice as high and wide in pixels, but at the cost of each 16x16 tile grid section in the layer using one 16 color palette as opposed to the ability to pick a different set of 16 colors every 8 pixels across or down on the grid. <br /><br />Each layer can use up to 1,024 tiles, limited by the amount of VRAM being used by all other graphical assets.<br /><br />For all modes except mode 7 (not covered here) background tiles CAN be flipped horizontally or vertically OR BOTH at the same time! <br /><br />On top of the separate background layers, any of them can be individually sliced horizontally in order to add even more layers of “parallax”  (parts of the background scrolling at separate speeds to create the illusion or dept in scrolling games).<br /><br /><br />Sprites<br /><br />Sprites: The SNES can display 32 fifteen color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen). Also, if more than 34 8x8 tiles of sprite image are on a scan line, some sprite tiles will not be drawn.<br /><br />The SNES can display 128 sprites on screen in total, but any more than 32 per scan line will result in some sprites not being displayed. <br /><br />Each sprite can use any of the final eight 16 color palettes starting at color index 128 with the first color index of each 16 color palette being used for transparent pixels. Only sprites using the sprite palettes 4 through 7 (the last 64 color indexes in the 256 total color indexes) can participate in color math (translucency effects)<br /><br />The SNES can use two sizes for its sprites at a time. Following are all the available sprite size option combinations:<br />8x8 and 16x16<br />8x8 and 32x32<br />8x8 and 64x64<br />16x16 and 32x32<br />16x16 and 64x64<br />32x32 and 64x64<br />16x32 and 32x64 (vertical flipping flips each half separately)<br />16x32 and 32x32 (vertical flipping flips each half separately) <br /><br />The SNES lets you use a maximum of 512 8x8 pixel 16 color dedicated tiles at a time for sprites.<br /><br />Sprites can be horizontally or vertically flipped or both at the same time!<br /><br /><br /><br />Color math overlay translucency effects:<br /><br /><br />Any sprite which is using any of the sprite palettes 4 through 7 (the final 64 color indexes in the 256 color palette) can be set to a translucent blending mode. <br /><br />Not just specific sprites, but entire layers (screens and sub-screens) can be be set to blend modes, and this can be used to get around the limitation of only sprites with specific palettes being translucent. There are too many possible combinations to cover here, but the following web page explains it thoroughly: <!-- m --><a class="postlink" href="https://wiki.superfamicom.org/snes/show/TransparencyThe">https://wiki.superfamicom.org/snes/show/TransparencyThe</a><!-- m --> four modes are:<br /><br />The four blending modes are:<br /><br />1) Additive: This ads the color value of the sprite to the color value of the pixels in the Background layer which the sprite is overlapping. This effect always makes color lighter. Great for mist, explosions, fire, magic, beams of light, etc.<br /><br />2) Subtractive: This takes the color of the background layer the sprite is overlapping and subtracts the color of the sprite. This always produces a darker color. This is great for things like shadows, tinted glass, black smoke etc.<br /><br />3) Average: This creates a 50 percent blend between the sprites colors and the colors in the background layer the sprite is overlapping. This effect is perfect for ghosts, light smoke, colored gas, or any other time you want something to look 50 percent translucent.<br /><br />4) Subtract then divide by 2: This creates very dark colors and is not used very often.<br /><br /><br /><br />For more detailed technical references:<br /><!-- m --><a class="postlink" href="https://wiki.superfamicom.org/snes/show/HomePage">https://wiki.superfamicom.org/snes/show/HomePage</a><!-- m --><br /><!-- m --><a class="postlink" href="https://emu-docs.org/Super%20NES/General/snesdoc.html">https://emu-docs.org/Super%20NES/General/snesdoc.html</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8477">Bitbeam</a> — Sun May 21, 2017 9:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2017-05-21T06:45:56-07:00</updated>
<published>2017-05-21T06:45:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196249#p196249</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196249#p196249"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196249#p196249"><![CDATA[
Here's how Alisha's 512x224 title screen looks like with a 8:7 aspect ratio.  I think it looks very arcade-like.<br /><br />Alisha's hires title screen aspect ratio.png<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sun May 21, 2017 6:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[creaothceann]]></name></author>
<updated>2017-05-21T04:48:41-07:00</updated>
<published>2017-05-21T04:48:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196246#p196246</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196246#p196246"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196246#p196246"><![CDATA[
<div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />Important: The SNES stretched its 256 pixel wide screen image horizontally, resulting in pixels which were wider than they are tall (not perfect squares). As almost all monitors these days use pixels which are very close to perfect squares, your artwork and the entire width of the screen will be wider running on the actual hardware or an emulator which compensates for this pixel aspect ratio difference.<br /></div><br />I'd include an example: 256x224 screens <a href="https://wiki.nesdev.com/w/index.php/Overscan#For_game_developers" class="postlink">should be stretched to 293x224</a> temporarily to see the proper aspect ratio.<br /><br /><div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />so, the first 4 color subset would be indexes 0 through 3, the second subset would be indexes 4 through 8.<br /></div><br />4 through 7.<br /><br /><div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />This ads the color value of the sprite to the color value of the pixels in the Background layer under the sprite.<br /></div><br />*adds, also I still don't really like &quot;the background layer under the sprite&quot; - you can't use color math vertically, you can only add/subtract/average the two screens that are rendered at the same time. You could write &quot;This adds the color value of the sprite to the color value of the layer that the sprite is combined with&quot;.<br /><br /><br />EDIT: Maybe it would be best to create a small utility that lets artists fill virtual VRAM+CGRAM+OAM and set the screen parameters and then renders the screen (sort of like vSNES).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=290">creaothceann</a> — Sun May 21, 2017 4:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bitbeam]]></name></author>
<updated>2017-05-20T19:36:27-07:00</updated>
<published>2017-05-20T19:36:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196234#p196234</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196234#p196234"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196234#p196234"><![CDATA[
Here's yet another revised version based on your feedback. Please let me know if I missed or misrepresented anything:<br />________________________________________________________________________________________________________________<br /><br />Super Nintendo/Super Famicom<br /><br />Graphical summary<br /><br /><br /><br />Important: The SNES stretched its 256 pixel wide screen image horizontally, resulting in pixels which were wider than they are tall (not perfect squares). As almost all monitors these days use pixels which are very close to perfect squares, your artwork and the entire width of the screen will be wider running on the actual hardware or an emulator which compensates for this pixel aspect ratio difference.<br />Standard game resolution: Most games were 256x224 in Japan, the US, and Canada. Other regions such as Europe, Africa, and south America used  PAL as opposed NTSC television standard and had a slightly increased vertical resolution (239 pixels instead of 224), but at the cost of games running 10 fps slower and the screen having a subtle but noticeable non-stop flicker due to a 50 FPS refresh rate instead of 60 FPS. The PAL versions of most popular games did not put use to the extra resolution so often just had a larger black bar at the bottom of the screen, nor did they compensate for the 10 FPS slow-down so the games actually ran noticeably slower. For these reasons, most emulators and re-releases of classic SNES games use the NTSC versions of the games.   Higher resolutions up to 512x448 (512x478 for PAL) were possible but since higher resolutions caused “interlace flicker”, and/or had increased limitations on layers and colors (due to memory bandwidth constraints); the higher resolutions were used for less movement and animation-intensive games, in-game menus, text, and high resolution images. <br /><br />color range: The SNES uses 5 bits per color channel, providing a palette of 32,768 colors. <br /><br />Number of color indexes available: 256, but many more on-screen colors were possible via color arithmetic for translucency effects. The three formulas for color overlay effects are additive, subtraction and average.<br /><br />Background graphics color limitations: <br /><br />There are 8 separate modes the SNES can use which offer very different and often complicated combinations of abilities and limitations. I'll only be covering the two most common and useful modes when the goal is multi-layered scrolling games.<br /><br />MODE 1 allows for 3 scrolling layers, where 2 layers allow 15 colors (plus transparent) per tile and the third layer is three colors plus transparent per tile. <br />Every tile in each of the two 16 (15 and transparent) color per tile layers can pick from any of the eight 16 color palettes reserved for backgrounds, where palette 0 is color indexes 0 through 15, palette 1 is color indexes 16 through 31 and so forth.<br />The 4 color (3 plus transparent) per tile layer allows each of its tiles to pick from eight 4 index sub-sets of the first 2 16 color palettes... so, the first 4 color subset would be indexes 0 through 3, the second subset would be indexes 4 through 8.<br /><br />MODE 3 allows for 2 layers of scrolling, where one layer is 15 colors (plus transparent) per tile and the other layer allows for each tile to use the entire range of 256 colors! (255 plus transparent) This mode is often used for title-screens. Keep in mind the cost of having each 8x8 tile being 256 color, it will eat up Vram much faster than 16 color or 4 color tiles, and a background later using 16 color tiles which can each use any of 8 total 16 color palettes means you can easily make 120 color layers at a far smaller cost, and this is before any use of the translucent color blend modes or other available very low-”cost” tricks to increase the number of on-screen colors. This is why most games use mode 1 over mode 3 for actual in-game levels. Also keep in mind, in mode 3, the second set of 128 colors (color indexes) are shared between the 256 color background layer and the sprites.<br /><br />In general sprites can be set to be in front of or behind any of the the background layers. More information on that can be found here: <!-- m --><a class="postlink" href="https://wiki.superfamicom.org/snes/show/Backgrounds">https://wiki.superfamicom.org/snes/show/Backgrounds</a><!-- m --><br /><br />Each scrolling layer is typically made of 8x8 pixel tiles, however you can opt to use a 16x16 tile mode instead, which would allow for level maps being twice as high and wide in pixels, but at the cost of each 16x16 tile grid section in the layer using one 16 color palette as opposed to the ability to pick a different set of 16 colors every 8 pixels across or down on the grid. <br /><br />Each layer can use up to 1,024 tiles, limited by the amount of VRAM being used by all other graphical assets.<br /><br />For all modes except mode 7 (not covered here) background tiles CAN be flipped horizontally or vertically OR BOTH at the same time! <br /><br />On top of the separate background layers, any of them can be individually sliced horizontally in order to add even more layers of “parallax”  (parts of the background scrolling at separate speeds to create the illusion or dept in scrolling games).<br /><br /><br />Sprites<br /><br />Sprites: The SNES can display 32 fifteen color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen). Also, if more than 34 8x8 tiles of sprite image are on a scan line, some sprite tiles will not be drawn.<br /><br />The SNES can display 128 sprites on screen in total, but any more than 32 per scan line will result in some sprites not being displayed. <br /><br />Each sprite can use any of the final eight 16 color palettes starting at color index 128 with the first color index of each 16 color palette being used for transparent pixels. Only sprites using the sprite palettes 4 through 7 (the last 64 color indexes in the 256 total color indexes) can participate in color math (translucency effects)<br /><br />The SNES can use two sizes for its sprites at a time. Following are all the available sprite size option combinations:<br />8x8 and 16x16<br />8x8 and 32x32<br />8x8 and 64x64<br />16x16 and 32x32<br />16x16 and 64x64<br />32x32 and 64x64<br />16x32 and 32x64 (vertical flipping flips each half separately)<br />16x32 and 32x32 (vertical flipping flips each half separately) <br /><br />The SNES lets you use a maximum of 512 8x8 pixel 16 color dedicated tiles at a time for sprites.<br /><br />Sprites can be horizontally or vertically flipped or both at the same time!<br /><br /><br /><br />Color math overlay translucency effects:<br /><br /><br />Any sprite which is using any of the sprite palettes 4 through 7 (the final 64 color indexes in the 256 color palette) can be set to a translucent blending mode. <br /><br />Not just specific sprites, but entire layers (screens and sub-screens) can be be set to blend modes, and this can be used to get around the limitation of only sprites with specific palettes being translucent. There are too many possible combinations to cover here, but the following web page explains it thoroughly: <!-- m --><a class="postlink" href="https://wiki.superfamicom.org/snes/show/TransparencyThe">https://wiki.superfamicom.org/snes/show/TransparencyThe</a><!-- m --> four modes are:<br /><br />The four blending modes are:<br /><br />1) Additive: This ads the color value of the sprite to the color value of the pixels in the Background layer under the sprite. This effect always makes color lighter. Great for mist, explosions, fire, magic, beams of light, etc.<br /><br />2) Subtractive: This takes the color of the background layer under the sprite and subtracts the color of the sprite. This always produces a darker color. This is great for things like shadows, tinted glass, black smoke etc.<br /><br />3) Average: This creates a 50 percent blend between the sprites colors and the colors in the background layer under the sprite. This effect is perfect for ghosts, light smoke, colored gas, or any other time you want something to look 50 percent translucent.<br /><br />4) Subtract then divide by 2: This creates very dark colors and is not used very often.<br /><br /><br /><br /><br />For more detailed technical references:<br /><!-- m --><a class="postlink" href="https://wiki.superfamicom.org/snes/show/HomePage">https://wiki.superfamicom.org/snes/show/HomePage</a><!-- m --><br /><!-- m --><a class="postlink" href="https://emu-docs.org/Super%20NES/General/snesdoc.html">https://emu-docs.org/Super%20NES/General/snesdoc.html</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8477">Bitbeam</a> — Sat May 20, 2017 7:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2017-05-19T20:13:53-07:00</updated>
<published>2017-05-19T20:13:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196206#p196206</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196206#p196206"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196206#p196206"><![CDATA[
I decided to make a 512x224 version of my title screen.<br /><br />title screen background hires.png<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Fri May 19, 2017 8:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Nicole]]></name></author>
<updated>2017-05-19T13:26:14-07:00</updated>
<published>2017-05-19T13:26:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196186#p196186</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196186#p196186"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196186#p196186"><![CDATA[
<div class="quotetitle">Optiroc wrote:</div><div class="quotecontent"><br />I couldn't see it mentioned here so far, yet it's one of the most important things to realize for pixel artists targeting the SNES:<br /><br /><strong>Pixel Aspect Ratio = 8:7</strong><br /><em>(for normal resolutions on NTSC display)</em><br /></div><br />And just to clarify for those who may not be familiar with the term, or may confuse it with screen aspect ratio...<br /><br />Unlike computer monitors, pixels on the SNES are not perfectly square. Instead, pixels are slightly wider than they are tall, by a ratio of 8:7. Because of this, if you want to draw, say, a perfect circle, making it 64 pixels wide and 64 pixels tall won't work, because it'll be slightly too wide. Instead, it would need to be 56 pixels wide and 64 pixels tall.<br /><br />Many emulators and screenshots don't compensate for all of this, simply using a 1:1 PAR instead, since stretching the image will naturally blur it a little on a computer screen due to pixels not matching up, and the PAR difference is not a big problem for most people. However, it is a good thing to be aware of if you want to be sure your art will show up as you intend on a real SNES.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7476">Nicole</a> — Fri May 19, 2017 1:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Optiroc]]></name></author>
<updated>2017-05-19T03:37:06-07:00</updated>
<published>2017-05-19T03:37:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196164#p196164</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196164#p196164"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196164#p196164"><![CDATA[
I couldn't see it mentioned here so far, yet it's one of the most important things to realize for pixel artists targeting the SNES:<br /><br /><strong>Pixel Aspect Ratio = 8:7</strong><br /><em>(for normal resolutions on NTSC display)</em><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5863">Optiroc</a> — Fri May 19, 2017 3:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2017-05-18T14:52:14-07:00</updated>
<published>2017-05-18T14:52:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196125#p196125</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196125#p196125"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196125#p196125"><![CDATA[
That's a good point.  I wonder if that was their reasoning?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Thu May 18, 2017 2:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[HihiDanni]]></name></author>
<updated>2017-05-18T14:31:00-07:00</updated>
<published>2017-05-18T14:31:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196124#p196124</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196124#p196124"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196124#p196124"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />&quot;Flicker&quot; here may refer to the effect of interlace when fed unfiltered high-resolution graphics, rather than to sprite flicker.  &quot;Slowdown&quot; remains unjustified.<br /></div><br />Yep. That is specifically why I mentioned that the PPU operates with constant timing. It can't &quot;slow down&quot; like a graphics processor drawing to a framebuffer can.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The worst part is that they designed the sprite system so that the frontmost sprites will drop out if the limits are exceeded.<br /></div><br />Actually, I can think of one place where this is useful. In Mode 7, if you want to have two backgrounds, you need to use sprites set to appear behind the Mode 7 BG. When you go over on one scanline, it only drops the sprites in front, preventing the fake background from flickering, therefore maintaining the illusion.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7494">HihiDanni</a> — Thu May 18, 2017 2:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-05-18T14:53:13-07:00</updated>
<published>2017-05-18T14:10:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196121#p196121</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196121#p196121"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196121#p196121"><![CDATA[
<s>No, that&#39;s not true. 480i60 is not 30 FPS, it&#39;s 60FPS, and always has been. A CRT displaying NTSC 480i content is <em>still displaying 480 lines of content updated at 59.94 FPS</em>, it&#39;s just that half the data is thrown away before it&#39;s sent over the wire.<br /><br />Interlacing is a form of <em>lossy compression</em>, and saying that 60i content is actually 30p content is actively misleading. Treating it as 30p content is the very reason why <a href="https://en.wikipedia.org/wiki/File:Image_deinterlaced_by_weaving.jpg" class="postlink">&quot;weaving&quot;</a> produces actively wrong results.</s><br /><br />Ok, you were making a pedantic point about &quot;fields&quot; and &quot;frames&quot; but it's still misleading.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Thu May 18, 2017 2:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[creaothceann]]></name></author>
<updated>2017-05-18T14:01:11-07:00</updated>
<published>2017-05-18T14:01:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196118#p196118</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196118#p196118"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196118#p196118"><![CDATA[
<div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />Higher resolutions up to 512x448<br /></div><br />No love for PAL? <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br /><div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />There are 7 separate modes<br /></div><br />8 (0..7)<br /><br /><div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />The SNES can display 128 sprites on screen in total, but any more than 32 per scan line will result in some sprites not being displayed.<br /></div><br />Plus the restriction of 34 8x8 tiles per line.<br /><br /><div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />Additive: This ads the color value of the sprite to the color value of the pixels in the Background layer under the sprite<br /></div><br />That's extremely simplified...<br /><br />The mainscreen and subscreen are rendered <em>without</em> any color math: each pixel on either screen is either a BG pixel, a sprite pixel, or backdrop - no translucency at all (only transparency if a color index is zero). This is where the BG mode matters.<br /><br />Color math is only possible to be used when the mainscreen and the subscreen are combined. The BG mode doesn't matter here: you can have<br />- BG4 enabled on the mainscreen, plus<br />- BG1 enabled on the subscreen, plus<br />- color math enabled only for the backdrop pixels on the mainscreen<br /><br />The result is that BG1 appears to be under BG4.<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />&quot;Flicker&quot; here may refer to the effect of interlace when fed unfiltered high-resolution graphics, rather than to sprite flicker.  &quot;Slowdown&quot; remains unjustified.<br /></div><br />Interlaced mode is <em>technically</em> 30 frames per second...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=290">creaothceann</a> — Thu May 18, 2017 2:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2017-05-18T13:24:54-07:00</updated>
<published>2017-05-18T13:24:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196112#p196112</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196112#p196112"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196112#p196112"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br /><img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><br /></div><br />&quot;Flicker&quot; here may refer to the effect of interlace when fed unfiltered high-resolution graphics, rather than to sprite flicker.  &quot;Slowdown&quot; remains unjustified.<br /><br /><div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />The three formulas for color overlay effects are additive, subtraction and average.<br /></div><br />Actually there are four.  The fourth is colour subtraction followed by halving.<br /><br />You'll note that tepples described &quot;three <em>useful</em> blending modes&quot; (emphasis added), rather than saying there were only three modes.  If you can think of a use for subtraction+halving, go nuts.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There are 7 separate modes<br /></div><br />There are 8.  They run from 0 to 7 because computer.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'll only be covering the two most common and useful modes when the goal is multi-layered scrolling games.<br /></div><br />...no Mode 7?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Each sprite can be set to be in front of or behind any of the the background layers.<br /></div><br />That's <em>kinda</em> true.  Detailed descriptions here:  <!-- m --><a class="postlink" href="https://wiki.superfamicom.org/snes/show/Backgrounds">https://wiki.superfamicom.org/snes/show/Backgrounds</a><!-- m --><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The SNES can display 128 sprites on screen in total, but any more than 32 per scan line will result in some sprites not being displayed.<br /></div><br />It will also drop out sprite <em>tiles</em> if there are more than 34 of them on a scanline.  There simply isn't enough time during HBlank to load any more graphic data than that.<br /><br />The worst part is that they designed the sprite system so that the frontmost sprites will drop out if the limits are exceeded.  If I'm not mistaken, the Mega Drive/Genesis drops the rearmost sprites, which I believe is slightly more complicated to implement but doesn't require any extra bandwidth.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Only sprites using the sprite palettes 4 through 7 (the last 64 color indexes in the 256 total color indexes) can participate in color math (translucency effects)<br /></div><br />You can, however, get around this entirely by using a main screen/subscreen trick explained on the Transparency page you've linked to.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Thu May 18, 2017 1:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2017-05-18T13:13:51-07:00</updated>
<published>2017-05-18T13:13:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196109#p196109</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196109#p196109"/>
<title type="html"><![CDATA[Re: Please help consolidate all info for pixel artists for S]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15953&amp;p=196109#p196109"><![CDATA[
<div class="quotetitle">Bitbeam wrote:</div><div class="quotecontent"><br />Hi everyone, I've updated the document based on your feedback as best I could. Please read this new version and let me know if I've made any mistakes or if anything is worded in a misleading or confusing manner.<br /><br />______________________________________________________________________________________________________________________________<br /><br />Super Nintendo/Super Famicom<br /><br />Graphical summary<br /><br /><br />Standard game resolution: Most games were 256x224. Higher resolutions up to 512x448 were possible but since <strong>higher resolutions caused slowdown and flicker</strong><br /></div><br /><br /> <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Thu May 18, 2017 1:13 pm</p><hr />
]]></content>
</entry>
</feed>