<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - nesdev.com's &quot;not&quot; longest thread ever.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">nesdev.com's &quot;not&quot; longest thread ever.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12189">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12189</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>13</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Wed Dec 31, 2014 2:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>nesdev.com's &quot;not&quot; longest thread ever.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Again, the only reason I am posting this under SNESdev is because it is pretty much my &quot;comfort zone&quot;.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> I remember looking at a discussion where tepples was showing an example of how to optimize code for the 6502 and the 65c816 and psychopathicteen said that those were the kind of &quot;hardcore optimizations&quot; that Space Megaforce uses and I was wondering how he would even know that. The only two ways I can think of (which are about as hard as mapping DNA) are to either open up a game file with a hex editor and look at the machine code and try to turn it into ASM (I'm sure some of file just codes for thing like the name of the file and other stuff though,) or you could possibly open up the game in a debugging emulator and change different values in ram and see what happens. The first method seems like it would take <em>forever</em> and the second would be <span style="font-size: 150%; line-height: normal">way</span> to confusing. (too bad the source code for these games haven't been given out.  <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Wed Dec 31, 2014 4:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You just need experience. I'm not really sure what you're looking for, and I don't think you are either.. What does it mean to hack a game??? Um, whatever you want it to.<br /><br />Some ppl like myself have gone into a game merely to change its color palette and we might call that a hack.. For instance changing a game characters look.. Other people get fancier, and they discover the formats/protocols to parts of the game -- like when someone discovered how the levels to Super Mario World worked, and then they created their own custom level editors and made new &quot;hacks&quot; of Super Mario World with all new levels. That's mega elite. Don't worry about being elite if you're having fun!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Other hacks include figuring out what the game is doing logically and &quot;re-routing&quot; it to do something else.. The smarter you get, the bigger the modifications you can make.. I hope I'm helping you

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Dec 31, 2014 4:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are automatic disassembly tools; some expensive (IDA Pro); some free (nescom, nesrevplus); some not fully automated (e.g. FCEUX+disasm6)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Wed Dec 31, 2014 4:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">There are automatic disassembly tools; some expensive (IDA Pro); some free (nescom, nesrevplus); some not fully automated (e.g. FCEUX+disasm6)</div><br />Based on the titles of these (I haven't looked them up) it looks like they are for the NES, unless the work for both. I have heard that coding for both systems is similar, but I'm not sure because I've never done anything for the NES. (I've always wanted to make a shooter and knew that the NES didn't quite have the &quot;oomph&quot; for what I was trying to do, so the SNES is the first thing I've ever tried programing for.)<br /><br /><div class="quotetitle">bazz wrote:</div><div class="quotecontent">You just need experience. I'm not really sure what you're looking for, and I don't think you are either.. What does it mean to hack a game??? Um, whatever you want it to.<br /><br />Some ppl like myself have gone into a game merely to change its color palette and we might call that a hack.. For instance changing a game characters look.. Other people get fancier, and they discover the formats/protocols to parts of the game -- like when someone discovered how the levels to Super Mario World worked, and then they created their own custom level editors and made new &quot;hacks&quot; of Super Mario World with all new levels. That's mega elite. Don't worry about being elite if you're having fun!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Other hacks include figuring out what the game is doing logically and &quot;re-routing&quot; it to do something else.. The smarter you get, the bigger the modifications you can make.. I hope I'm helping you</div><br />Changing graphics is easy, (Unless they are compressed...  <img src="./images/smilies/icon_mad.gif" alt=":x" title="Mad" />) as you only need a graphics editor. I am actually more interested as to how a lot of these games run instead of actually modifying them, so I can have a better idea as to how to make a game myself.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Wed Dec 31, 2014 4:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's source code to a lot of Anthrox demos.<br />I have a ported BSNES with debugger for OS X here: <!-- m --><a class="postlink" href="https://github.com/bazzinotti/BSNES-0.64-OSX">https://github.com/bazzinotti/BSNES-0.64-OSX</a><!-- m --><br />IT's really useful. If you don't use OSX Get BSNES 0.64 for your OS. compile with DEBUGGER symbol active and whatever other features you need/want.. That debugger is Gold

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed Dec 31, 2014 4:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Me and Tepples were poking fun at how bad programmers were with the 65816 because they were so used to 68000, and how optimizations are often seen as some kind of rocket science.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Wed Dec 31, 2014 4:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, you and tepples sure do have a taste for technicals.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Wed Dec 31, 2014 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">I have heard that coding for both systems is similar</div><br />There's one major difference that's relevant to disassembly - the 65816's status flags can modify the length of instruction operands (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA #$xx</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA #$xxxx</tt>).  If I understand correctly, this means that the disassembler has to be execution-based (ie: it has to step through the code and see what it does) in order to not get out of sync with the opcode/operand sequence.<br /><br />I've actually had this problem with the no$sns debugger; it seems to disassemble code based on the <em>current</em> state of the status register, which can cause it to output nonsense if you're looking at a section of code that's supposed to happen with different settings.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Wed Dec 31, 2014 5:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />^ ^ ^ precisely.<br /><br />You won't have that problem with Byuu's BSNES Debugger

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Dec 31, 2014 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Focusing on just one part:<br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">... The only two ways I can think of (which are about as hard as mapping DNA) are to either open up a game file with a hex editor and look at the machine code and try to turn it into ASM (I'm sure some of file just codes for thing like the name of the file and other stuff though,) or you could possibly open up the game in a debugging emulator and change different values in ram and see what happens. The first method seems like it would take <em>forever</em> and the second would be <span style="font-size: 150%; line-height: normal">way</span> to confusing. (too bad the source code for these games haven't been given out.  :roll: )</div><br /><br />The term you're looking for is reverse-engineering.  And yes, for commercial games that don't provide source code (such is the case of 98% of SNES/SFC games out there), the options you've listed are all that's available.  There isn't any kind of &quot;smart forensics&quot; software that can use heuristics to analyse something and create source code for you, or tell you the hows/whys of a game's design.  I'll go out on a limb here and say: the idea in itself (of such analysis software) is preposterous/ridiculous.  Computers are only as clever as the human using them, but it becomes a recursive mess when a human tries to write something for a computer that analyses compiled/assembled results for a computer that was written by a human (lost yet?).  TL;DR -- humans are clever, computers are not.<br /><br />Disassembly of a game/program, followed by going through it line by line, is pretty much the only way you'll ever truly know what the game is doing.  There are people out there who actually love doing this (psychopathicteen might be one of them); a colleague of mine also loves doing it (for any platform).<br /><br />Furthermore, even if the source code to said commercial games <strong>was</strong> released, what makes you think it'd be more easily understood than a disassembly?  Sure, now you've got multiple files laying around, probably thousands of labels and variables all with names you yourself have no familiarity with -- you <strong>still</strong> have to reverse-engineer the code more or less.  You know what I'm saying?  Just because source code is available to something doesn't mean the person looking at it can easily understand it.<br /><br />But there is something that's kind of in-between these two things though: romhacking.  It's hard to explain tersely, because the methodology varies per skill set of the person doing the romhacking.  A lot of folks do Japanese-to-English translations of games this way, despite not knowing any 6502/65816 (really!).  It greatly depends on the game though, as I'm sure you know.  And a lot of the time, the romhacker (who has no assembly knowledge) gets stuck in their effort, and has to find someone who DOES know assembly to reverse-engineer part of the text drawing routine, or graphics routine, etc. and modify the code there so that it'll work with the desired goal.  I've done romhacking stuff for a while now (usually helping out other romhackers), but I've never actually completed a project fully on my own.  (I have two in progress -- one is massively insanely complex (god damn you Chun Soft!), and the other is less complex and doable but requires a lot of uninterrupted attention and is still complex in its own right (god damn you Konami!))<br /><br />If you want to get into romhacking, there is an entire site and forum filled with people doing just that: <!-- m --><a class="postlink" href="http://www.romhacking.net/">http://www.romhacking.net/</a><!-- m --> (we used to host them at Parodius).  Gideon Zhi also occasionally does Twitch streaming of his romhacking + debugging sessions, so you can watch/listen to him and what he's doing plus chat with him in real-time.<br /><br />Anyway, all that leads to ask something..<br /><br />You seem to do a lot of complaining about the state of programming (particularly in assembly) in these parts, and I get the impression you are very frustrated with the nature of the beast.  Is that the case?  Before responding -- I politely ask that you to read what I've said and sleep on it (trust me!).  I need you to be introspective on this one.  Know that I'm not attacking you (honest!), it's just that many of your posts have a strenuous/stress-induced nature to them, like you're frustrated about development on classic consoles.  If you aren't?  Cool/great!  And if you are?  Then that's okay too, but you should decide how you want to deal with that frustration.  Starting out is difficult; none of this stuff is easy.  But then again, think back to a subject in school (say, mathematics) that you had trouble understanding and got frustrated with (for me that would be advanced algebra, calculus, chemistry, and biology).  As an adult nobody is forcing you to learn anything, so you can go at your own pace, or even simply say &quot;Nah, I don't wanna do this any more&quot;.  There's no shame in any of that!  Don't let anyone tell you otherwise.<br /><br />There is nothing easy about video game development on <strong>any</strong> system.  Programming in itself is not easy, and game development adds a whole new layer of &quot;omfg&quot; to the picture.  And don't even get me started on 3D stuff (I'll NEVER understand it, I find it all ridiculously complex and insane compared to 2D platforms).  I've been doing what I do (with 65xxx and consoles both) since the mid-to-late 80s, and despite all that time I've never written a game.  And there's a reason for that: I've spent so much time working &quot;on&quot; consoles (but not as low-level as guys like, say, lidnariq or kevtris) that my gut says &quot;don't attempt a game, dude.  You will get very very irritated and angry&quot;, so I don't.  I've done <a href="http://www.romhacking.net/documents/121/" class="postlink">a small little demo on the SNES included with my SNES docs (includes source)</a>, and also did the <a href="http://www.romhacking.net/translations/139/" class="postlink">FF2e (NES) intro</a> for Neo Demiforce in their translation project (and <a href="http://www.romhacking.net/translations/1565/" class="postlink">that had wonderful bugs</a> due to us not knowing how the PPU fully worked at the time).  Yet, on the flip side, guys like tepples are able to churn out a game in a few months (depends on how simple/complex) -- we're just different people.<br /><br />I'll note that I did work for a few months on an Apple IIGS game, inspired by Gradius 3 and Space Megaforce (first time I've heard that game mentioned in years is in this thread, how funny!) but gave up because the IIGS's graphical capabilities were simply too limited -- mainly full-screen panning/scrolling wasn't possible (and not enough CPU time to do it all via software in one frame).  My SNES sat next to me the entire time, taunting me.  &quot;Psst... you have 4 overlayed backgrounds here... you can set background X/Y positions for panning in only a few cycles... psst...&quot;  I guess the only &quot;claim to fame&quot; I have is <a href="http://www.ninjaforce.com/html/special_demoscene_dexmas.html" class="postlink">doing an Apple IIGS demo</a> along with a friend of mine.<br /><br />I share these stories as a way to say it's okay to be frustrated (if you are), but that you may want to dig deeper to figure out how to leverage that frustration.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Dec 31, 2014 5:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">There's one major difference that's relevant to disassembly - the 65816's status flags can modify the length of instruction operands (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA #$xx</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA #$xxxx</tt>).  If I understand correctly, this means that the disassembler has to be execution-based (ie: it has to step through the code and see what it does) in order to not get out of sync with the opcode/operand sequence.<br /><br />I've actually had this problem with the no$sns debugger; it seems to disassemble code based on the <em>current</em> state of the status register, which can cause it to output nonsense if you're looking at a section of code that's supposed to happen with different settings.</div><br />Random tidbit point, but for the 6502/NES, specifically FCEUX: its real-time debugger does stupid shit like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$E322:85 DD&nbsp; &nbsp; &nbsp;STA $00DD = #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:01 X:00 Y:06 S:F2 P:nvUbdIzc<br />$E324:A6 DE&nbsp; &nbsp; &nbsp;LDX $00DE = #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:01 X:00 Y:06 S:F2 P:nvUbdIzc<br />$E326:E6 DE&nbsp; &nbsp; &nbsp;INC $00DE = #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:01 X:01 Y:06 S:F2 P:nvUbdIzc<br />$E328:A5 DF&nbsp; &nbsp; &nbsp;LDA $00DF = #$05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:01 X:01 Y:06 S:F2 P:nvUbdIzc<br /></div><br />Look very closely at the instructions here -- these are opcodes which use ZP addressing, yet the addresses shown in the disassembly are full 16-bit absolute addresses (which use a completely different opcode).  Ignore the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">= #$xxx</tt> stuff (that's just showing you, at that moment in time, what the contents of the effective address contained).  Those  instructions <em>should</em> read <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STA $DD</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDX $DE</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">INC $DE</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $DF</tt>, but don't.<br /><br />I can't tell you how many times this has confused me / caused me issues / pissed me off.  It's almost like someone is just doing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">printf&#40;&quot;$%04X&quot;, address&#41;</tt> for all addresses, no matter the opcode used.  It drives me insane.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Dec 31, 2014 5:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Man... Koitsu ninjaing me. Still posting. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">or you could possibly open up the game in a debugging emulator and change different values in ram and see what happens.</div><br />The first step is usually finding RAM, which is pretty easy with a debugging emulator. The process is not changing values randomly, there's a method. You have a goal in mind.<br /><br />A very common feature in debuggers allows you to narrow down RAM locations based on conditions. Say I'm playing a platformer, I want to find out which RAM value represents the player's X speed. If I stand still, it's probably gonna be zero. <br /><br />So I eliminate every single piece of RAM that's not zero.<br />Then, I press right for a few frames to accelerate.<br />I now eliminate every single piece of RAM that either hasn't changed, or decreased.<br /><br />Maybe there's only about three to four bytes of RAM it could be at this point. So I play in real time and watch to see which one corresponds to my movements.<br /><br />Or... if there's still like sixty bytes of RAM, you let the player come to a stop completely. Then eliminate all RAM that isn't zero from your list.<br /><br />Then press left and eliminate all RAM that either hasn't changed or increased.<br /><br />(Just to note, the debugger keeps track of this RAM, and narrows it down. It's not like you've got a notepad file of what RAM it could be, and then have to verify each. You say, &quot;Get rid of RAM that's not zero.&quot; And all RAM that's not zero is instantly gone from that list. You keep doing this until you've found what you're looking for.)<br /><br />By now you've probably found X speed. Now, the above makes a few assumptions. It's not necessarily guaranteed that the RAM representing X speed is 0 when the player is standing still. And it's not necessarily true that the speed increases when you hold right. It could decrease (or do something weirder). But... you think what you'd do as a programmer and look for that. <br /><br />After finding RAM, it's really easy to start to look into code. You can break on read and writes of the X speed variable, which will let you see how the game's acceleration works. Because the very code that is changing the variable is right there once the break happens! A good debugger will break the moment a write or read is detected, and show you the code around it. From there you could figure out what other RAM might represent in the context of code, again just thinking how you'd do it as a programmer.<br /><br />As far as modifying the program, it's a lot like writing a regular program. The thing to understand is that every assembly instruction is represented by an &quot;opcode&quot;. Which is a byte (or some bytes) that tells the CPU what to do. When an NES (or SNES) encounters $18, it clears the carry flag. If you were writing a program and typed CLC, it would become $18 once assembled. If you programmed for either console, you know what CLC does.<br /><br />If you know how to program in the assembly language you're reading, you could look at the code the debugger broke on for X speed. (Which again, a good debugger would display as code and not hex. See what Koitsu posted from FCEUX's debugger.) You'd then figure out what changes you wanted to make, just like if it was your own program. And then you'd look up the opcodes for what you want to do and change what's there. (Or ignore opcodes entirely, and assemble a code snippet and paste the block there.)<br /><br />The caveat with hacking (without a disassembly) is that you cannot simply add instructions in the middle of a routine that's already there, because it would break a bunch of branches and things. So you find some free space in the rom (depending on the rom, this can be tough) to add your new routine. And then you replace a few instructions in the area you want to add something to with a jump to that free space. You put your routine in the free space(with the instructions you just replaced with the jmp before the new routine so the program still executes them). At the end, you jump back. (Or just return.)<br /><br />If you truly understand how to program with a given assembly language for a given system, hacking is not a lot of new knowledge. It can certainly be challenging... but probably not like mapping DNA. If I wanted to find out how other games optimized say... their graphics, I'd break on writes to the system in question's graphics registers. <br /><br />Find how what's put there. Trace how THAT got there. Trace how THAT got there. Until I found it. Whee, crash course on executable hacking. You have the start with a goal, rather than, &quot;I'm gonna read through this entire game line by line.&quot; Even if your goal is eventually making a disassembly, you break it up into smaller parts. First identifying what the RAM is used for, maybe.<br /><br />tl;dr: Learning to program first is highly recommended. If hacking still seems difficult, keep practicing straight programming. I never learned to hack. One day, my friend asked me to make a small hack and I realized I totally could. I've never read anything on the subject.<br /><br />A named edit (though I anticipate doing a few more to fix lots of typos: Knowing if something is hardcore optimized is again, just knowing the language. Sometimes you look at code in a game and just say, &quot;Damn. This is REALLY clever.&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Dec 31, 2014 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">The first step is usually finding RAM, which is pretty easy with a debugging emulator. The process is not changing values randomly, there's a method. You have a goal in mind.<br /><br />A very common feature in debuggers allows you to narrow down RAM locations based on conditions.</div><br />This &quot;cheat finder&quot; is good for some use cases. But if you're aiming to completely understand a game engine, you can start by putting breakpoints on its input and output (I/O). On the NES and Super NES, I/O is done by writing to memory-mapped ports in $2xxx and $4xxx. This lets you find the code that performs I/O, and then you can discover data structures related to what the I/O does.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Say I'm playing a platformer, I want to find out which RAM value represents the player's X speed. If I stand still, it's probably gonna be zero. <br /><br />So I eliminate every single piece of RAM that's not zero.<br />Then, I press right for a few frame to accelerate.<br />I now eliminate every single piece of RAM that either hasn't changed, or decreased.<br /><br />Maybe at there's only about three to four bytes of RAM it could be. So I play in real time and watch to see which corresponds to my movements.</div><br />Or come at it from the other direction. Look for the part that reads the controller, which should be easy with a write breakpoint on $4016 and (in the Super NES's case) read breakpoints on $4218-$421F. This will show you where the game reads the controllers, and watching it read the controllers will show you the RAM address where the game stashes button states. Then you can put a read breakpoint on that address and see where the game makes decisions based on these button states. You'll eventually end up discovering the code that causes movement and jumping.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I wanted to find out how other games optimized say... their graphics, I'd break on writes to the system in question's graphics registers. <br /><br />Find how what's put there. Trace how THAT got there. Trace how THAT got there. Until I found it. Whee, crash course on executable hacking. You have the start with a goal, rather than, &quot;I'm gonna read through this entire game line by line.&quot; Even if your goal is eventually making a disassembly, you break it up into smaller parts. First identifying what the RAM is used for, maybe.</div><br />Heck, you can find the character's position in RAM (and thus the movement code) by looking at the sprite display lists sent to the PPU. Put a write breakpoint on DMA registers ($4014 on NES, $43xx on Super NES) and find copies to OAM. This will give you the address of the buffer that the game uses for the display list. With a write breakpoint on the display list, you can find the sprite drawing routines. Look at what those read from, and you'll know where the position is. Look for what modifies that, and you have movement code.<br /><br /><a href="http://www.mariowiki.com/Toady" class="postlink"><img src="http://www.mariowiki.com/images/a/a8/SMW3-Toady_Artwork.PNG" alt="Image" /><br />Toady artwork from <em>Yoshi's Island</em></a><br /><br />Just keep in mind what Tim Toady says: <a href="http://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it" class="postlink">There is more than one way to do it</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Wed Dec 31, 2014 6:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />koitsu you are so well spoken, today <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />  (hhahaa!)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Wed Dec 31, 2014 10:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What does it mean to &quot;hack&quot; a game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now to reply to koitsu monster post... Don't worry I'm not angry at you.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> (Why would I be anyway?)<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">You seem to do a lot of complaining about the state of programming (particularly in assembly) in these parts, and I get the impression you are very frustrated with the nature of the beast.  Is that the case?</div><br />To be honest with you, I've never done any programing with anything but assembly. The thought of writing code that you know isn't going to be very optimized kind of disgusts me and I like to know exactly what I am doing.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">many of your posts have a strenuous/stress-induced nature to them, like you're frustrated about development on classic consoles.</div><br />Yes, mostly because I almost don't see why I have so much difficulty programing and it seems like everyone else doesn't. (I know I really sounded like a looser there.) It would be like If you took Spanish class and you made terrible grades and everyone else made hundreds all the time even if you did your best. Incase you haven't noticed, I'm a bit of a perfectionist. (I'm sure my OCD doesn't help.) What I think is one of my main flaws is that I like to get ahead of myself. I was originally thought about programing for the NES, but I didn't even do anything for it before I decided that I wanted to work with the SNES, which was the first system I ever programmed for. Heck, I just got into programing a little over four months ago. It seems like most of the people on this website are either in college or are college graduates while I just graduated middle school about a year a go. I should probably slow down a bit... The other thing that I think gets my frustrated is how the SNES was made. Don't get me wrong, It's a great system (my favorite, actually) but I feel like some of the design choices were a bit strange. (Not saying I could have done better, of course.) I do always hear people complain about the CPU speed and that leads to one question... Why didn't Nintendo overclock it? I'm no hardware expert, but I always thought you could keep increasing CPU speed until the CPU melted, which the SNES CPU is far from doing as the console doesn't even generate a half a degree of heat. Heck, isn't the SA-1 just a 65c816 running at 10 megahertz? If it is, that just shows it can be done.<br /><br />Now for the less-personal stuff...<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">even if the source code to said commercial games <strong>was</strong> released, what makes you think it'd be more easily understood than a disassembly?  Sure, now you've got multiple files laying around, probably thousands of labels and variables all with names you yourself have no familiarity with -- you <strong>still</strong> have to reverse-engineer the code more or less.  You know what I'm saying?  Just because source code is available to something doesn't mean the person looking at it can easily understand it.</div><br />I know what you mean. I just figured that it would still be easier to figure out how game works this way than trying to make a code from looking at the machine code and still having to figure out what it means without having any notes written on the side (If the people write any) or having any of the registers given names that say what they are being used for. (Even if the names are not that clear.)<br /><br />And now for the random stuff...<br /><br />I tried the snes demo you made but it didn't work. I looked at vram, cgram, oam, and work ram and they were all blank. I looked at the source code, (not to hard) but from the looks of it, it doesn't look like something I wouldn't be able to make.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I'll note that I did work for a few months on an Apple IIGS game, inspired by Gradius 3 and Space Megaforce (first time I've heard that game mentioned in years is in this thread, how funny!)</div><br />Really? people seem to act like it's the holly grail or something with many people calling it the &quot;best shooter ever&quot;. I'm not saying it's a bad game by any means, but it's just not my cup of tea. I think you can probably guess what my favorite shooter franchise is. (Hint: by the same company that made my profile picture!)<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"> My SNES sat next to me the entire time, taunting me.  &quot;Psst... you have 4 overlayed backgrounds here...</div><br />And then your GBA said, &quot;Psst... you have 4 <strong>actually useful</strong> backgrounds here&quot;.<br /><br />Lastly, what the heck is this? I'm guessing C?<br /><br />printf(&quot;$%04X&quot;, address)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>13</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>