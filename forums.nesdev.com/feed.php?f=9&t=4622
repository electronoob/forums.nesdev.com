<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=4622" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-12-15T15:01:21-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=4622</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-12-15T15:01:21-07:00</updated>
<published>2008-12-15T15:01:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40797#p40797</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40797#p40797"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40797#p40797"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Altough, in most cases 8x16 sprites will increase flickering more than 8x8, exept in the particular case you mentionned.<br /></div><br />Yeah, I see what you mean. My own graphics have a lot of transparent areas wasting pattern table space and interfering with the sprite limit. I try to place such areas at the bottom of the objects, so that when placed on the floor the transparent pixels stay below the ground, where there usually aren't many sprites.<br /><br />I agree with Celius, only 64 8x8 sprites cover a very small area of the screen, and being able to double that is a big advantage. For most games with small characters, 8x8 is probably fine, but when they are somewhat large, the flickering can be unbearable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Dec 15, 2008 3:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2008-12-15T14:47:06-07:00</updated>
<published>2008-12-15T14:47:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40796#p40796</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40796#p40796"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40796#p40796"><![CDATA[
In my game I use 8x16 sprites to reduce the amount of sprites on screen. My status bar alone uses 10 8x16 sprites to display vital information (4 digits of health, 3 digits of MP, 3 digits of heart amount, letters H and M to represent "Health" and "Mana", a heart icon, and an 8x16 pixel reprentation of the current subweapon). Without 8x16 sprites this would take 15 sprites, and that's kind of a waste. 10 sprites may still sound like a lot (and I guess it is), but the player only uses 4-6 sprites, and most enemies take 6(moderate size) to 10(large) sprites, and most of the time there are only 2 to 3 of them on screen at once with about a max of 4 weapons on screen (generally 2-3 sprites). So there are usually about 40 sprites on screen maximum. If I were using 8x8 sprites, this would mean there are ~75 sprites, which is not possible without mega flickering.<br /><br />I use 8x8 sprites for my polygon engine though, because it's way too much complication to deal with on the fly. But that's way off topic.<br /><br />I do agree that it's kind of a waste when something is only 4x4 pixels and you have to use 2 tiles for it though. However, since you can grab from both pattern tables, I think it makes up for it. Being able to draw something as both BG and sprite without wasting tiles is really good.<br /><br />But when using 8x16, I hate that I give up the scanline counter. I have lots of CHR RAM updates I need to do in Vblank, and it would be really handy with a scanline counter so I wouldn't have to do fixed timed code and waste cycles while I could be doing something else.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Mon Dec 15, 2008 2:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-12-15T14:41:49-07:00</updated>
<published>2008-12-15T14:41:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40795#p40795</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40795#p40795"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40795#p40795"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />As an example I mentioned the item boxes (monitors) from the Sonic games. In many places there are rows of 4 or 5 of them. Can you imagine how that would flicker on the NES? But since they just sit there, they could be drawn on the background. However, they can't be always background, because some fall from the top of trees, some are upside down, and other variations that require sprites.<br /></div><br />Oh this make sense. But that is probably because your game is inspired by 16-bit games. I wouldn't have such an idea of object that can be either BG or spirtes in a game I'm making honnestly, but this is a good idea.<br /><br />Altough, in most cases 8x16 sprites will increase flickering more than 8x8, exept in the particular case you mentionned.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Dec 15, 2008 2:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-12-15T12:51:03-07:00</updated>
<published>2008-12-15T12:51:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40793#p40793</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40793#p40793"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40793#p40793"><![CDATA[
tokumaru's explanation is exactly why Color Dreams' Boulder Dash clones (Crystal Mines, Exodus, and Joshua) use 8x16 sprites. But then those games used a board rawther similar to GNROM, having no real need for a scanline counter.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Dec 15, 2008 12:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-12-15T12:35:26-07:00</updated>
<published>2008-12-15T12:35:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40792#p40792</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40792#p40792"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40792#p40792"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />On a side not, while 8x16 sprites have their advantage, I really can't see how they could reduce flickering in any way.<br /></div><br />What I meant was that in some cases, when the conditions of an object are ideal (static object aligned to the name and attribute tables), it could be drawn in the background rather than being represented with sprites, which would prevent flickering.<br /><br />As an example I mentioned the item boxes (monitors) from the Sonic games. In many places there are rows of 4 or 5 of them. Can you imagine how that would flicker on the NES? But since they just sit there, they could be drawn on the background. However, they can't be <strong>always</strong> background, because some fall from the top of trees, some are upside down, and other variations that require sprites. This is why the 8x16 sprites are useful, the same object can be drawn with sprites or background, and when the background is used you avoid sprite flickering as a consequence.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Dec 15, 2008 12:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-12-15T07:37:10-07:00</updated>
<published>2008-12-15T07:37:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40788#p40788</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40788#p40788"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40788#p40788"><![CDATA[
Yes you sure are right that 8x16 sprites from BG may be usefull in some case, and I probably underestimated that.<br /><br />In my project, I want animation frames to take the least possible number of tiles of pattern table, and this is only possible with 8x8 sprites. Using 8x16 would imply a terrible waste of pattern table, and that way I'd be forced to overflow in the background pattern table when the same graphics could be held in the sprite pattern simply by 8x8 sprites. In fact I was planning to use 8x16 originally but I changed my mind as soon I had to draw player's sprite, that way I was able to spare more than 32 tiles in the sprite pattern table for the same animations !!<br /><br />However I'm maybe planning to have projects where the sprites are a fixed size and could be both BG or sprite in a tactical RPG. In that case 8x16 sprites would be really usefull.<br /><br />And I agree that A13 would be better than A12 becuase you get rid of these limitations, and that Nintendo were a little stupid to use A12 that implies that limitations, but you probably exagerate how bad the limitations are. However, in the case of a 74HC board that would feature a scanline counter, I'd be pretty forced to come with A12 if I want any hope to make it with as few chips as possible. Because if the counter is 8-bit (count scanlines), it can be done with fewer chip that if it is 12-bit or 16-bit (counts M2 or 42 times scanlines).<br /><br />On a side not, while 8x16 sprites have their advantage, I really can't see how they could reduce flickering in any way. On the other side, they'd rather increase the potential flickering, as you're forced that all sprites are at least 16 pixels tall, even small bulets that are only 4 pixel tall in reality. My player's sprite is 2x3 tiles big, and if I used 8x16 sprites I would be forced to make is 2x4 (I originally planned to do that), and this implies more potential flickering.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Dec 15, 2008 7:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-12-15T05:45:59-07:00</updated>
<published>2008-12-15T05:45:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40787#p40787</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40787#p40787"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40787#p40787"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Maybe because you wanted so badly to share tiles for BG and Sprites in a particular game you're making<br /></div><br />You guys sometimes seem to underestimate the power of 8x16 sprites fetched from the background side. Let me list a couple of advantages in that:<br /><br /><strong>Dynamic background</strong>: you have the possibility of moving parts of the background, like when a player picks blocks up or hits them from below (and they wobble a bit) without having to waste space defining the tiles twice. If you have different types of blocks that move, replicating them is quite a waste. And if you animate them through CHR-ROM bankswitching, duplicating them is extremely prohibitive, because you'd either have to make another set of animation banks for the sprite side or use the same set and give up on the space occupied by the remaining tiles of the bank (which were meant for the BG).<br /><br /><strong>Reduce flickering</strong>: I have implemented a system where objects are drawn with background tiles or with sprites, depending on what's best at the time. The same object can be drawn with background tiles when it's not in front of anything and it's coordinates are aligned to the name and attribute tables, or with sprites when these conditions are not met. This is particularly useful in Sonic games for the item boxes. It would be impossible to make long runs of them if only sprites could be used. Since they use quite a few tiles (and are animated with bankswitching), it's absolutely necessary that the same tiles are used. Of course this requires you to make 1 or more palettes the same (or pretty close) for sprites and BG, but that's not such a big issue.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />but personally in my project I always have separate pattern tables for BG and sprites<br /></div><br />So, you say I insist on keeping this feature available along with the scanline counter because of my one project, but I might as well say you don't care about it because your projects have never needed it. It's obvious that people will want features related to the kind of program they make, and I sure plan on using my tiles like that in whatever project I work on, not just this one. If I had to pick (and I did) between the 8x16 sprite freedom and a scanline counter, I'd go with the sprites (and I did), but I'd sure like to have both.<br /><br />The fact is that each individual has a different way of making games, and each one favors some features above others. But the deal with the scanline counter issue is that it seems really wrong that to implement a new feature you have to give up on an old one. That one feature might not be important for everyone, but there sure will be some that will miss it, or will simply not accept the loss and not use the new feature (this is me with the MMC3). So I'm just asking, if someone decides to come up with a cool board for the community, that this person implements a scanline counter that doesn't impose such restrictions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Dec 15, 2008 5:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-12-14T15:31:41-07:00</updated>
<published>2008-12-14T15:31:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40784#p40784</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40784#p40784"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40784#p40784"><![CDATA[
The choice of A12 might have had something to do with the possibility that Nintendo might change details of the background fetch in future NES PPU revisions, such as  changing 8 dummy sprite pattern fetches and 8 real sprite pattern fetches to 16 real sprite pattern fetches, or replacing the last (unused) tile data fetch with a sprite pattern fetch. This would invalidate the assumption of 42 nametable and 42 pattern fetches per line.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 14, 2008 3:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2008-12-14T15:19:28-07:00</updated>
<published>2008-12-14T15:19:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40782#p40782</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40782#p40782"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40782#p40782"><![CDATA[
Well then it sounds like using A13 is a much better way to do it than A12. It'll be interesting if someone produces their own board with such capability. I'm sure Tokumaru would appreciate it. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Sun Dec 14, 2008 3:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-12-14T13:48:54-07:00</updated>
<published>2008-12-14T13:48:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40781#p40781</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40781#p40781"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40781#p40781"><![CDATA[
Because A13 toggles 42 frames per scanline, while A12 toggles 1 time if the conditions are correct. Doing a didiver per 42 means additional logic that it hardly doable with 74 chips, but Nintendo could definitely add this in their MMC3. I can't guess why they didn't use it.<br /><br />The only way MMC5 can keep track of all PPU's reads and write is by watching /RD, /WR and A13 I guess, but I can't guess what's inside the chip. It's probably possible to test that by having a FPGA NES and modify the working of the PPU and study how all signals behave, but I don't have the knownledge to do that !<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Dec 14, 2008 1:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2008-12-14T13:45:26-07:00</updated>
<published>2008-12-14T13:45:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40779#p40779</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40779#p40779"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40779#p40779"><![CDATA[
If A13 is so much better than using A12, why didn't Nintendo think of it? If it works as good as you say, do you think that MMC5 uses A13 opposed to A12?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Sun Dec 14, 2008 1:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-12-14T04:03:01-07:00</updated>
<published>2008-12-14T04:03:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40770#p40770</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40770#p40770"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40770#p40770"><![CDATA[
Then what about A13 divided by 42 ? This would allow for Scanline precision, NTSC/PAL conpatibility, and you would be able to use both pattern tables for both BG and Sprite, and maybe even to disable BG or Sprites (but not both) and still have the counter working. Altough I haven't tested how reliable this is, it should work in theory.<br />And I guess you exagerate how bad the A12 idea is. Maybe because you wanted so badly to share tiles for BG and Sprites in a particular game you're making, but personally in my project I always have separate pattern tables for BG and sprites, altough I don't use any scanline counter and I am never limited (but maybe I'll break this "rule" if I place additional graphics for the ending). And with a clever use of CHR bankswitching i guess it's not that much an issue.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Dec 14, 2008 4:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-12-14T03:37:23-07:00</updated>
<published>2008-12-14T03:37:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40769#p40769</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40769#p40769"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40769#p40769"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />If you want a A12 based counter<br /></div><br />I believe this is the reason the MMC3 has those absurd limitations on it's scanline counter, am I right? If so, I'd like to ask anyone that's considering creating a board/mapper for the community to NOT USE A12 FOR IRQ PURPOSES, PLEASE! IMO, a mapper should only add features, not break things that would otherwise work perfectly fine. I think the price is too high for PAL/NTSC compatibility.<br /><br />As kyuusaku suggested, an FME7-like board would be perfect. Great bankswitching scheme and solid IRQ counter. This is as good as it gets without the crazy (although nice) features of the MMC5. It would be good if we could select between CHR-ROM and CHR-RAM (I guess you could simply design the board for CHR-ROM, then you could place a RAM chip as big as you want as well, not limited to 32KB).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Dec 14, 2008 3:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-12-13T15:00:24-07:00</updated>
<published>2008-12-13T15:00:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40755#p40755</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40755#p40755"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40755#p40755"><![CDATA[
There is several way to do a IRQ counters I guess, and it's possible to come with something relatively simple in hardware if one accept to complicate the software in compenation for that.<br /><br />Maybe with two daisy-chained 74HC161's you could load them with some 8-bit value (exaclty like you do when loading them when they act as a latch), but this time their "Count Enable" pin would be connected to the output of another latch (the "enable" bit).<br /><br />If this is a M2 based counter it will work great but you'll only able to count 256 CPU cycles which is about 2 scanlines, and this is not very useful. You'd want to get a divider before the counter so that you get more usefull values, but then there is no way to guarantee you get a clock when writing to the register. However, by doing multiple writes to the register a certain number of times with timed code this should be possible  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> . For example, if you use a divider-by-16 on the M2 clock (easily doable with yet another 161), and if you do 16 consecutive writes with 15 clocks between each, you are 100% sure the register has been loaded at least one time.<br /><br />If you want a A12 based counter (advantage of being NTSC/PAL compatible), then the problem is the same : It should be clocked by M2 when loading but by A12 when counting. Then you'll likely need a clever use of a 74HC138 (or 139) adress decoder combined with some basic gates (or, simpler, a PAL chip), so that the chip is clocked either if you write to it *AND* if A12 have a rising edge.<br /><br />Either way, you write some value to the register, and the counter would count it up and do an interrupt when it reches $ff, but that won't prevent the counter to overflow to $00 if an additional clock occurs. To disable interrupts, simply write $ff to the counter and '0' to the "enbable" bit. To be sure it don't moves.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Dec 13, 2008 3:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2008-12-13T14:28:10-07:00</updated>
<published>2008-12-13T14:28:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40753#p40753</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40753#p40753"/>
<title type="html"><![CDATA[The SX-Flash PCB I made]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4622&amp;p=40753#p40753"><![CDATA[
IRQ counters are relatively simple, but still not very discrete chip friendly; you'd really need 6-7 chips for a decent one. If I were more confident in board making, I'd put together a CPLD based FME7 + 32K CHR RAM, seems like the ideal solution for a game I've been thinking about but it'd probably be smarter to just PowerPak prototype it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sat Dec 13, 2008 2:28 pm</p><hr />
]]></content>
</entry>
</feed>