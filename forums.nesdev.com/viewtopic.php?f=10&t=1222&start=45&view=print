<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hex to Decimal suggestion</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hex to Decimal suggestion</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1222">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1222</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Sep 07, 2006 2:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I'd be kind of a jackass to say it isn't free. I'd prefer if you wrote your own code, but the idea is free to use. As long as I am remembered for coming up with it... I don't think that would happen, but if you're going to use it, maybe you could say my name somewhere in the credits. You could get away with not doing it, I wouldn't go disassemble your game and look for my routine, but I'd appreciate some credit..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Sat Sep 09, 2006 2:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was reading this thread the other day and I got interested in trying to come up with a fast binary-to-decimal algorithm.
<br />
<br />Warning:  I am not a 6502 programmer.  I don't have any 6502 assemblers lying around  =)  <strong>The code below is completely and utterly untested</strong> and probably won't assemble without some fixing up.  So even if you think the idea is sound, you will want to throw my code away and write your own from scratch.  I just hacked this up so I could make a good guess about how large/fast/slow it is.
<br />
<br />....pretending for a moment that this code works as-is (which is highly unlikely!)...
<br />it would be a 244-byte routine that converts a 16-bit unsigned integer into decimal in about 269 cycles or less.   <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" />
<br />(Not counting the cost of actually writing out the decimal char once you decide what digit it is).
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; the algorithm goes like this:<br /><br />; t = 40000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;0&#93;+=4; &#125;<br />; t = 20000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;0&#93;+=2; &#125;<br />; t = 10000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;0&#93;+=1; &#125;<br />; putchar&#40;d&#91;0&#93;&#41;<br />; <br />; t = 6000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;1&#93;+=6; &#125;<br />; t = 3000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;1&#93;+=3; &#125;<br />; t = 2000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;1&#93;+=2; &#125;<br />; t = 1000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;1&#93;+=1; &#125;<br />; putchar&#40;d&#91;1&#93;&#41;<br />; <br />; t = 600; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;2&#93;+=6; &#125;<br />; t = 300; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;2&#93;+=3; &#125;<br />; t = 200; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;2&#93;+=2; &#125;<br />; t = 100; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;2&#93;+=1; &#125;<br />; putchar&#40;d&#91;2&#93;&#41;<br />; <br />; t = 60; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;3&#93;+=6; &#125;<br />; t = 30; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;3&#93;+=3; &#125;<br />; t = 20; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;3&#93;+=2; &#125;<br />; t = 10; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;3&#93;+=1; &#125;<br />; putchar&#40;d&#91;3&#93;&#41;<br />; putchar&#40;n&#41;<br /><br /><br /><br />; In each group of tests &#40;i.e. the 3 or 4 tests for one digit&#41;,<br />; notice that at most 2 of the tests succeed for any given input:<br />;&nbsp; first digit:&nbsp; &nbsp;0-6 = &#123;none, 1, 2, 2+1, 4, 4+1, 4+2&#125;<br />;&nbsp; other digits:&nbsp; 0-9 = &#123;none, 1, 2, 3, 3+1, 3+2, 6, 6+1, 6+2, 6+3&#125;<br /><br />; The if-tests that are short-circuited execute in a mere 4 cycles<br />; most of the time &#40;!!!&#41;.&nbsp; For a few input values &#40;those where the<br />; high byte is equal and we have to compare the low byte also&#41; it<br />; will take 13 cycles.<br />; Worst-case, it takes about 28 cycles when not short-circuited.<br />; Some of the later tests are cheaper &#40;everything 200 and less&#41;<br />; There is also an overhead of 3 bytes per digit &#40;to reset Y to zero&#41;.<br /><br />; Quick back-of-the-envelope calculation for the number of cycles:<br />; Upper bound:&nbsp; 3+&#40;28+28+13&#41; + 3+&#40;28+28+13+13&#41; + 3+&#40;28+28+4+4&#41; + 6+&#40;16+12+4+4&#41;+3 = 269<br />; Typical:&nbsp; &nbsp; &nbsp; 3+&#40;28+17+4&#41;&nbsp; + 3+&#40;28+17+ 4+ 4&#41; + 3+&#40;22+14+4+4&#41; + 6+&#40;16+9+4+4&#41;+3&nbsp; = 197<br /><br />; The code size is approximately 245 bytes &#40;no table needed fortunately&#41;.<br />; It needs two bytes in the zero page &#40;one of which is a read-only constant of zero&#41;.<br /><br />; EVEN IF EVERY SINGLE JUMP WAS NOT TAKEN &#40;which is impossible&#41; the routine would<br />; take at most 316 cycles.<br /><br /><br />; keep d in zeropage memory?<br />; NH in X<br />; NL in zeropage &#40;ZP_NL&#41;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ; TODO: X must contain high byte<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp; &nbsp;ZP_ZERO&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_40000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;40000&#41;&#41; goto L2<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH != HI&#40;40000&#41;&#41; goto L1<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_40000-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />L1:&nbsp; &nbsp; &nbsp;bmi&nbsp; &nbsp; &nbsp;L2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;40000&#41; goto L2<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;HI_40000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 4 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; adc&nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L2:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_20000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;20000&#41;&#41; goto L4<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH != HI&#40;20000&#41;&#41; goto L3<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_20000-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />L3:&nbsp; &nbsp; &nbsp;bmi&nbsp; &nbsp; &nbsp;L4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;20000&#41; goto L4<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;HI_20000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 2 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L4:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_10000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;10000&#41;&#41; goto L6<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH != HI&#40;10000&#41;&#41; goto L5<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_10000-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />L5:&nbsp; &nbsp; &nbsp;bmi&nbsp; &nbsp; &nbsp;L6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;10000&#41; goto L6<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;HI_10000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 1 to digit!<br />L6:<br />&nbsp; &nbsp; &nbsp; &nbsp; ; *************************************************<br />&nbsp; &nbsp; &nbsp; &nbsp; ; TODO: need code here to output first digit from Y<br />&nbsp; &nbsp; &nbsp; &nbsp; ; *************************************************<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp; &nbsp;ZP_ZERO&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_6000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;6000&#41;&#41; goto L8<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH != HI&#40;6000&#41;&#41; goto L7<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_6000-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />L7:&nbsp; &nbsp; &nbsp;bmi&nbsp; &nbsp; &nbsp;L8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;6000&#41; goto L8<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;HI_6000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2 note: cf=0 after this<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 6 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; adc&nbsp; &nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L8:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_3000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;3000&#41;&#41; goto L10<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2&nbsp; if &#40;NH != HI&#40;3000&#41;&#41; goto L9<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_3000-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />L9:&nbsp; &nbsp; &nbsp;bmi&nbsp; &nbsp; &nbsp;L10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;3000&#41; goto L10<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;HI_3000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2 note: cf=0 after this<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 3 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L10:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_2000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;2000&#41;&#41; goto L12<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L11&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH != HI&#40;2000&#41;&#41; goto L11<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_2000-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />L11:&nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;2000&#41; goto L12<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;HI_2000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2 note: cf=0 after this<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 2 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L12:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_1000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;1000&#41;&#41; goto L14<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L13&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH != HI&#40;1000&#41;&#41; goto L13<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_1000-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />L13:&nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;1000&#41; goto L14<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;HI_1000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2 note: cf=0 after this<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 1 to digit!<br />L14:<br />&nbsp; &nbsp; &nbsp; &nbsp; ; **************************************************<br />&nbsp; &nbsp; &nbsp; &nbsp; ; TODO: need code here to output second digit from Y<br />&nbsp; &nbsp; &nbsp; &nbsp; ; **************************************************<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp; &nbsp;ZP_ZERO&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_600&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;600&#41;&#41; goto L16<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L15&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH != HI&#40;600&#41;&#41; goto L15<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_600-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />L15:&nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;600&#41; goto L16<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;HI_600&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2 note: cf=0 after this<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 6 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; adc&nbsp; &nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L16:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;HI_300&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH &lt; HI&#40;300&#41;&#41; goto L18<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;L17&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NH != HI&#40;300&#41;&#41; goto L17<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;&#40;LO_300-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />L17:&nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2&nbsp; if &#40;NL &lt; LO&#40;300&#41; goto L18<br />&nbsp; &nbsp; &nbsp; &nbsp; ; At this point NH must be zero and we can skip a few calculations.<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 3 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L18:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp&nbsp; &nbsp; &nbsp;200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L19&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;200-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 2 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L19:&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; cmp&nbsp; &nbsp; &nbsp;100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;100-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 1 to digit!<br /><br />L20:&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ; *************************************************<br />&nbsp; &nbsp; &nbsp; &nbsp; ; TODO: need code here to output third digit from Y<br />&nbsp; &nbsp; &nbsp; &nbsp; ; *************************************************<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp; &nbsp;ZP_ZERO&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; cmp&nbsp; &nbsp; &nbsp;60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;60-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 6 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; adc&nbsp; &nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L21:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp&nbsp; &nbsp; &nbsp;30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L22&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;30-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 3 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L22:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp&nbsp; &nbsp; &nbsp;20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L23&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;20-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 2 to digit!<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2<br />L23:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp&nbsp; &nbsp; &nbsp;10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; bmi&nbsp; &nbsp; &nbsp;L24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; ; NOTE: cf=0 so sbc will borrow, so subtract one to compensate<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc&nbsp; &nbsp; &nbsp;10-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 : 2<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 1 : 2&nbsp; add 1 to digit!<br />L24:<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;ZP_NL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 : 3<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ; **************************************************<br />&nbsp; &nbsp; &nbsp; &nbsp; ; TODO: need code here to output fourth digit from Y<br />&nbsp; &nbsp; &nbsp; &nbsp; ; **************************************************<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ; *****************************************************<br />&nbsp; &nbsp; &nbsp; &nbsp; ; TODO: need code here to output final digit from ZP_NL<br />&nbsp; &nbsp; &nbsp; &nbsp; ; *****************************************************<br /></div>
<br />
<br />Edit:  DOH... I think my estimate is a little low.  I forgot that taken branches cost a cycle or two.  Still, there should be no more than about 15 of those, and no more than about 9 in the 'upper bound' case.  So its probably still well under 300 cycles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Sep 09, 2006 9:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">I was reading this thread the other day and I got interested in trying to come up with a fast binary-to-decimal algorithm.<br /><br />Warning:  I am not a 6502 programmer.  I don't have any 6502 assemblers lying around  =)</div><br />The <a href="http://www.cc65.org/" class="postlink">cc65 toolchain</a> is rawther popular here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">; the algorithm goes like this:<br /><br />; t = 40000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;0&#93;+=4; &#125;<br />; t = 20000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;0&#93;+=2; &#125;<br />; t = 10000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;0&#93;+=1; &#125;<br />; putchar&#40;d&#91;0&#93;&#41;<br />; <br />; t = 6000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;1&#93;+=6; &#125;<br />; t = 3000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;1&#93;+=3; &#125;<br />; t = 2000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;1&#93;+=2; &#125;<br />; t = 1000; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;1&#93;+=1; &#125;<br />; putchar&#40;d&#91;1&#93;&#41;<br />; <br />; t = 600; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;2&#93;+=6; &#125;<br />; t = 300; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;2&#93;+=3; &#125;<br />; t = 200; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;2&#93;+=2; &#125;<br />; t = 100; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;2&#93;+=1; &#125;<br />; putchar&#40;d&#91;2&#93;&#41;<br />; <br />; t = 60; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;3&#93;+=6; &#125;<br />; t = 30; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;3&#93;+=3; &#125;<br />; t = 20; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;3&#93;+=2; &#125;<br />; t = 10; if &#40;N &gt;= t&#41; &#123; N -= t; d&#91;3&#93;+=1; &#125;<br />; putchar&#40;d&#91;3&#93;&#41;<br />; putchar&#40;n&#41;<br /><br />; In each group of tests &#40;i.e. the 3 or 4 tests for one digit&#41;,<br />; notice that at most 2 of the tests succeed for any given input:<br />;&nbsp; first digit:&nbsp; &nbsp;0-6 = &#123;none, 1, 2, 2+1, 4, 4+1, 4+2&#125;<br />;&nbsp; other digits:&nbsp; 0-9 = &#123;none, 1, 2, 3, 3+1, 3+2, 6, 6+1, 6+2, 6+3&#125;<br /></div></div>
<br />That's pretty much what my code does, except it does 8, 4, 2, 1 on each digit, not 6, 3, 2, 1. Does the lack of a 4, 2, 1 case speed things up significantly?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Sat Sep 09, 2006 10:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">That's pretty much what my code does, except it does 8, 4, 2, 1 on each digit, not 6, 3, 2, 1. Does the lack of a 4, 2, 1 case speed things up significantly?</div><br /><br />I think 6,3,2,1 is better than 8,4,2,1 for the following reason:  If the digit turns out to be a 7, only two if-tests will succeed in my version (the 6-test and the 1-test).  In the other version, the 4-test, 2-test and 1-test would all succeed, which means it would run slower.<br /><br />That's what I meant by this bit:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">; In each group of tests (i.e. the 3 or 4 tests for one digit),<br />; notice that at most 2 of the tests succeed for any given input:<br />;  first digit:   0-6 = {none, 1, 2, 2+1, 4, 4+1, 4+2}<br />;  other digits:  0-9 = {none, 1, 2, 3, 3+1, 3+2, 6, 6+1, 6+2, 6+3} </div>
<br />
<br />Do you mind if I ask, how fast is your code?  If speed is more important than size, unrolling it the way I did probably makes sense.  The routine weighs around 245 bytes and ought to execute in well under 300 cycles (perhaps around 285 cycles??).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Sep 09, 2006 10:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">That's pretty much what my code does, except it does 8, 4, 2, 1 on each digit, not 6, 3, 2, 1. Does the lack of a 4, 2, 1 case speed things up significantly?</div><br />I think 6,3,2,1 is better than 8,4,2,1 for the following reason:  If the digit turns out to be a 7, only two if-tests will succeed in my version (the 6-test and the 1-test).  In the other version, the 4-test, 2-test and 1-test would all succeed, which means it would run slower.</div><br />If the digit turns out to be an 8 or 4, how fast does your version go? And have you tried 6, 3, 2, 1 vs. 7, 4, 2, 1 (<a href="http://en.wikipedia.org/wiki/POSTNET" class="postlink">what the US post office uses</a>)? I just chose 8, 4, 2, 1 because it let me construct the number a bit at a time. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you mind if I ask, how fast is your code?</div>
<br />About 700 cycles, but the way it's written allows it to be easily extended to 24-bit (up to 16 million) numbers as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Sep 09, 2006 10:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry for my almost useless reply, and while I've trouble to understand most of your algoritms, I'd just say in an actual game, speed isn't that much important. Of course, a number doesn't have to waste 25% of the frame just to be converted in decimal, but I think 500 cycles or 700 cyles will make no difference in practice. Due to the limited amound of various numbers you can upload to the PPU in VBlank, you'd never want to convert more numbers anyway in the internal logic than those who will get refreshed on the display.
<br />Also, space isn't that much important, but I don't think unrolling loops is a real big deal, because you'd never want to convert more than about 4 numbers per frame.
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">About 700 cycles, but the way it's written allows it to be easily extended to 24-bit (up to 16 million) numbers as well.<br /></div>
<br />That is quite important, on the other hand. In RPG, there is a lot of large numbers involved, especially money related numbers (your current founds and the price list in shops). 24-bit to 6 digit conversion routine will be required in most RPGs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Sep 09, 2006 10:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If the digit turns out to be an 8 or 4, how fast does your version go?</div>
<br />
<br />It looks like 2 tests would pass then (6+2=8, 3+1=4)
<br />
<br />I'd have to agree with mozz that 6,3,2,1 is the slightly better way to go.  When you look at the numbers:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">digit&nbsp; &nbsp; 6,3,2,1 tests&nbsp; &nbsp; 8,4,2,1 tests<br />================================<br />9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2<br />8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1<br />7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3<br />6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2<br />5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2<br />4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1<br />3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2<br />2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1<br />1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1<br />0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0<br /><br />total&nbsp; &nbsp; &nbsp; 14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;15<br /></div>
<br />
<br />It always comes down to either 1 or 2 checks... except for the worse-case '7' digit for the 8,4,2,1 setup which requires a 3rd check that isn't necessary with the 6,3,2,1 setup.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Sep 09, 2006 10:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">In RPG, there is a lot of large numbers involved, especially money related numbers (your current founds and the price list in shops). 24-bit to 6 digit conversion routine will be required in most RPGs.</div>
<br />Unless you store the numbers in base 100. For instance, the number 314,159 stored in base 100 looks like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .byt 59, 41, 31</div><br />Arithmetic in base 100 is straightforward (untested code). Here's addition:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">base100_addBtoA:<br />&nbsp; clc<br /><br />&nbsp; lda numA<br />&nbsp; adc numB<br />&nbsp; cmp #100<br />&nbsp; bcc :+<br />&nbsp; sbc #100<br />:<br />&nbsp; sta numA<br /><br />&nbsp; lda numA+1<br />&nbsp; adc numB+1<br />&nbsp; cmp #100<br />&nbsp; bcc :+<br />&nbsp; sbc #100<br />:<br />&nbsp; sta numA+1<br /><br />&nbsp; lda numA+2<br />&nbsp; adc numB+2<br />&nbsp; cmp #100<br />&nbsp; bcc :+<br />&nbsp; sbc #100<br />:<br />&nbsp; sta numA+2<br /><br />&nbsp; rts<br /></div>
<br />Conversion of a byte of base 100 into a pair of digits is as easy as 2 table lookups: a /10 table and a mod 10 table.
<br />
<br /><a href="http://www.pineight.com/nes/" class="postlink">Tetramino</a> uses base 100 for the lower 2 digits of the score and base 256 for the rest.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Sep 09, 2006 11:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Tetramino uses base 100 for the lower 2 digits of the score and base 256 for the rest.</div>
<br />Sound like complicated. I'd go rather for either one or the other method, but not a mix of both.
<br />
<br />I still think it is nicer to have numbers in binary, because in RPG shops it is easier to multiply the price per the number of items when the player buy some items, compare if the player has enough money to buy stuff and add/substract numbers to the main money.
<br />Of couse it is absolutely possible to do everything in BCD, but I just prefer in plain decimal, and this decrease the risk to implement math errors. I don't think player will be happy to figure out that they actually don't pay the right price for items just because the programmer did something wrong with its BCD arithmetics and didn't figure it out. Of course that shouldn't happen as long as the programmer knows what he does, but I'm not too good as this kind of stuff. Binary to decimal routines can be tested pretty much easily by testing a large range of various numbers, and binary maths is just easier.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Sep 09, 2006 2:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">That is quite important, on the other hand. In RPG, there is a lot of large numbers involved, especially money related numbers (your current founds and the price list in shops). 24-bit to 6 digit conversion routine will be required in most RPGs.</div>
<br />
<br />Even simpler is that you notice stuff like the score counters on most games, it's impossible to score 1 point.  Because you do score one point, it's just that there's always 2 or more zeros at the end of the score.  Seems to be pretty standard.
<br />
<br />Don't know if that would apply as much to RPGs though, you might want to find 36 gold but still have the cheapest item in the store be 100 gold.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Sep 09, 2006 2:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Tetramino uses base 100 for the lower 2 digits of the score and base 256 for the rest.</div><br />Sound like complicated. I'd go rather for either one or the other method, but not a mix of both.</div>
<br />It actually works rawther well in Tetramino because only soft drop (down on Control Pad) and hard drop (up on Control Pad) can modify the lower digits. Line clearing scores are always 100, 300, 700, or 1500, partly for the reasons that Memblers pointed out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Sep 10, 2006 2:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Even simpler is that you notice stuff like the score counters on most games, it's impossible to score 1 point.  Because you do score one point, it's just that there's always 2 or more zeros at the end of the score.  Seems to be pretty standard.</div>
<br />Well, it seem so in most game. But I found that pretty supid, so I prefer unsing unrounded numbers. I have my monster drop 225 points in the game I'm writting right now. That doesn't sound much wrong. Moslty 5/0 will be used for the lest significant digit, but at least I'm going to make a full use of my 6-digit BCD score variable. (yes, I do everything in BCD because the score is the only number with more than two digits displayed, but I wouldn't do that in a RPG where a lot of numbers are displayed).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sun Sep 10, 2006 5:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have another idea for a BinToDec routine, it's speed varies, though.
<br />
<br />Anyone can come up with code for this idea, I don't care. I don't even know if I'm the first to come up with this.
<br />
<br />Take a value like $FFFF. See how many times $2710 goes into it. Multiply that result by $6000. Let's see, that would be...
<br />
<br />$24000
<br />
<br />Now let's see how many times $3E8 goes into it. That times $600 would be
<br />
<br />$18600
<br />
<br />How many times does $64 go into it? Multiply that by $60, and get
<br />
<br />$F5A0
<br />
<br />Now, last but not least, how many times does $A go into it? Multiply that by $6 and get:
<br />
<br />$9996
<br />
<br />Add those 4 numbers together
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$24000<br />$18600<br />&nbsp;$F5A0<br />&nbsp;$9996<br /></div>
<br />
<br />And get $55536.... Now what? Add the original hex value to it ($FFFF), and get $65535. Isn't that cool? It's just too bad that the idea may not make a faster routine... You can try, it's a new idea at least. (I think...).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 10, 2006 6:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Celius: "See how many times $2710 goes into it" means using division, which on the 6502 is either repeated subtraction or long division. On 6502, generic 16 bit/16 bit division is a comparatively slow operation, and so is 16 bit*16 bit multiplication. Some of the BCD routines posted here are about as fast as <em>one</em> such division.
<br />
<br />Your divisors are all powers of ten:
<br /><ul><li>$2710 is 10000 </li><li>$03E8 is 1000 </li><li>$0064 is 100 </li><li>$000A is 10 </li></ul>
<br />That's a start. But if you select your divisors such that the quotient is always 0 or 1, each division reduces to a single subtraction. For example, the divisors might be 40000, 20000, 10000, 8000, 4000, 2000, 1000, etc. Then each comparison result becomes one bit of the BCD output. This is how my code works, and mozz's works similarly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sun Sep 10, 2006 7:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was about halfway done working on a routine when I posted. I didn't think my code would really be a fast routine for a BinToDec routine, but I thought maybe someone else would come up with better code with my idea. What I was doing was I was checking how many 10000s went into a number, and if 1 went in, that means 10 1000s go into it, and 100 100s go into it, and 1000 10s go into it. When no more 10000s went into it, I'd check how many 1000s go into what was remaining. If 1 1000 goes into it, that means 10 more 100s go into it, and 100 more 10s go into it. You get the point, I'm sure. I wouldn't do a whole check for every divisor. I already know by telling it that 10 100s go into it as well as 1 1000, I'm saving A LOT of time. It didn't seem like it was going to be THAT slow. It'd probably take around 600 cycles though, and my other routine's faster, so I wouldn't use it.
<br />
<br />By the way, I sort of got what you were saying, but I'm just curious, why would you divide a 4 hex-digit number by a 5 hex-digit number? Maybe I wasn't getting what you were saying. Like $40000, why would you use that as the divisor in a 16-bit BinToDec routine?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>