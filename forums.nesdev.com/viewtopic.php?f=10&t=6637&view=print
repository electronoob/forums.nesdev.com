<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Real NES like testing on an Emulator?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Real NES like testing on an Emulator?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6637">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6637</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nadia</b> [ Wed Jul 21, 2010 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Real NES like testing on an Emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now I am able to load 5 room level into RAM and then do scrolling on that. My program has logic to do the below after an NMI:
<br />	- identify controller input if there's any.
<br />	- handle gravity, jumps and horizontal movement of main character based on input. Update sprite area based on the input.
<br />	- get the main character position, calculate its different collision sensitive points and do BG collision detection based on them.
<br />	- Draw the scroll seam and scroll. The level can scroll from left to right only. If required then nametable is updated with 8x8 columns of tiles every 8th increment of the x coordinate of character.
<br />
<br />I dont see any visible problem when running this code on FCEUXD . But I am not sure if all the code will be executed withing the vBlank on a REAL NES. Can a "real NES like testing" be done on an emulator? Which emulator is the closest to NES in this regard?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Jul 22, 2010 12:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nintendulator is a good choice for this.  Otherwise ask someone with a PowerPak to test your ROM for you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jul 22, 2010 1:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In several occasions Nestopia has proven to have better timing then Nintendulator. But these two are the most accurate emulators I know of, so you should definitely make sure your program works on both. But only on the real console you'll be 100% sure.
<br />
<br />When you say "after an NMI" do you mean you do all that during VBlank? You definitely shouldn't be doing all of that in VBlank. VRAM updates should be the first thing in your NMI, it's a waste of precious time to read the controllers and handle game logic during the only time when VRAM can be written to, since that stuff could be done at any other time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nadia</b> [ Thu Jul 22, 2010 1:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">In several occasions Nestopia has proven to have better timing then Nintendulator. But these two are the most accurate emulators I know of, so you should definitely make sure your program works on both. But only on the real console you'll be 100% sure.<br /><br />When you say "after an NMI" do you mean you do all that during VBlank? You definitely shouldn't be doing all of that in VBlank. VRAM updates should be the first thing in your NMI, it's a waste of precious time to read the controllers and handle game logic during the only time when VRAM can be written to, since that stuff could be done at any other time.</div>
<br />
<br />
<br />Actually Yes, after the NMI the things I do(in order) are:
<br />0. NMI
<br />1. read controller input
<br />2. character sprite change, character movements &amp; collision detection
<br />3. Drawing seam and set scroll
<br />4. RTI
<br />
<br />The reason for this is the structure of the template I have been using since I started. In the template program there's the below statement:
<br />
<br />Forever:
<br />  JMP Forever
<br />
<br />I think I can put some useful code in there which can execute even when the screen is being drawn?
<br />How many cycles do we have between the end of one NMI and the start of next?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 22, 2010 5:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are 341 dots on a line, 262 lines on a screen, and 3 dots in a CPU cycle. This means NMIs are spaced about 29780 CPU cycles apart. If you're really hurting for CPU time after having profiled and optimized as much as you can, you could go the Mega Man route and only check collision on half the objects each frame. Or you could go the Micronics route and drop the whole game to 30 fps; a lot of Game Boy games did this anyway to compensate for the slow-ass LCD on the original model.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Thu Jul 22, 2010 5:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Real NES like testing on an Emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nadia wrote:</div><div class="quotecontent">But I am not sure if all the code will be executed withing the vBlank on a REAL NES. Can a "real NES like testing" be done on an emulator? Which emulator is the closest to NES in this regard?</div>
<br />
<br />If you want to know how long your NMI code is taking and you want to see it visually *without* changing your code, NESICIDE has an "Execution Visualizer" feature that can either be used during run-time or compile-time.  Basically you set markers in the code that show up as a colored section in the Execution Visualizer.  
<br />
<br /><img src="http://img687.imageshack.us/img687/7448/exevis.png" alt="Image" />
<br />
<br />Here's an example of various portions of the NMI of SMB1.  Note how the colored regions are all underneath the screen area, which is during VBLANK.  The gray outlined area around the screen is the PPU clock domain (341 horizontal by 262 or 312 vertical depending on NTSC or PAL).  The display is zoomable and will eventually include details like cycle counts of marked regions, frequency of execution of marked regions, etc.
<br />
<br />If you use NESICIDE to build your code, you can use an assembler directive to set up "Permanent Markers" that will always be visible in the Execution Visualizer and will be updated with the appropriate information any time you recompile your ROM.  Say, for example, you add some NMI code...recompile, re-run your ROM, and actually SEE the results.  Like this:
<br />
<br />; NMI
<br />nmi:
<br />.marker red start
<br />; do stuff
<br />.marker red end
<br />
<br />If "do stuff" changes, the marked region will SHOW you the impact.
<br />
<br />No need to mess with things like emphasis bits or other techniques to show where your code is executing...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Jul 22, 2010 8:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Real NES like testing on an Emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NESICIDE wrote:</div><div class="quotecontent">If you want to know how long your NMI code is taking and you want to see it visually *without* changing your code, NESICIDE has an "Execution Visualizer" feature that can either be used during run-time or compile-time.  Basically you set markers in the code that show up as a colored section in the Execution Visualizer.</div>
<br />
<br />Is there a way to obtain this functionality without having to assemble your code with NESICIDE?  I was thinking something like using $3F00-3FFF in <a href="http://wiki.nesdev.com/w/index.php/CPU_memory_map" class="postlink">CPU space</a>.  Yes, I realise these are mirrors of registers $2000-2008, but this feature in NESICIDE would only be available if you were running in some sort of debug mode or explicitly had it turned on.
<br />
<br />For example, $3F00 could be used for controlling draw enable/disable.  Values $04-FF written would represent a 2-bit RGB colour (%rrggbb00) to draw with.  Value $00 would turn tell NESICIDE to disable drawing.
<br />
<br />Then someone assembling outside of NESICIDE could just do:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #%11111100&nbsp; &nbsp; &nbsp;; rr=11, gg=11, bb=11<br />STA $3F00<br />;<br />; Actual code you want to time goes here<br />;<br />LDA #$00<br />STA $3F00</div>
<br />
<br />Sure, doing it this way you lose a bit of accuracy: 12 cycles (due to the LDA immediates and STA absolutes).  So what.
<br />
<br />Food for thought.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jul 22, 2010 9:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nadia wrote:</div><div class="quotecontent">The reason for this is the structure of the template I have been using since I started. In the template program there's the below statement:</div><br />Yeah, unfortunately some tutorials use that structure. It works fine because they hardly do more than move a couple of sprites, but once programs get more complex it's easy to extrapolate the time of VBlank.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think I can put some useful code in there which can execute even when the screen is being drawn?</div><br />Yes, there are several ways to make use of the whole CPU time. In your case, since you have everything in the NMI, the best solution is to keep it like that, but switch around the tasks you perform so that the VRAM writes are the first thing.<br /><br />This way, during each NMI, the data calculated during the previous frame will be sent to the PPU, then the data for the next frame will be calculated, and then the NMI routine ends. When if fires again, the data previously calculated will be sent to the PPU, and so on.<br /><br />Like I said, I think this is the easiest solution in your case, but there are others. Another common solution is to run the game logic in the main thread (i.e. between the "forever:" and "jmp forever" lines) and let the NMI just send data to VRAM as it becomes ready (this is indicated by the main thread). Yet another solution is to to make your NMI simply increment a flag, so that you can run everything in the main thread, processing the game logic first, then pooling the flag waiting for it to change (i.e. detecting when Vblank starts) and then performing the VRAM operations, finally jumping back and doing it all over again for the next frame.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How many cycles do we have between the end of one NMI and the start of next?</div>
<br />There is no "end of the NMI". An NMI is just an interrupt (something that interrupts the CPU and couses it to jump to a specific part of the code) that fires when Vblank starts, so that programmers know when to perform their Vblank tasks, and it ends when you return from it. The vertical blank (VBlank) on the other hand does have a constant duration. In NTSC, VBlank takes only 20 of the 262 scanlines of a frame. That's about 7.6% of the whole frame, which means you are wasting 92.4% of the CPU, if your code is even finishing before VBlank ends, which we do not know for sure. But even if it does, as you expand it it's likely to break sometime, unless your game is ridiculously simple.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 22, 2010 10:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Real NES like testing on an Emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">For example, $3F00 could be used for controlling draw enable/disable.  Values $04-FF written would represent a 2-bit RGB colour (%rrggbb00) to draw with.  Value $00 would turn tell NESICIDE to disable drawing.</div>
<br />How about we map it to $3F01 and use only %bgr1111i? Oh wait, that's how the tint bits in $2001 work. Running with RGB PPU-style tint bit handling (force one component to full scale) and showing the entire video signal would produce almost exactly the behavior you describe.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Thu Jul 22, 2010 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Real NES like testing on an Emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">For example, $3F00 could be used for controlling draw enable/disable.  Values $04-FF written would represent a 2-bit RGB colour (%rrggbb00) to draw with.  Value $00 would turn tell NESICIDE to disable drawing.</div><br />How about we map it to $3F01 and use only %bgr1111i? Oh wait, that's how the tint bits in $2001 work. Running with RGB PPU-style tint bit handling (force one component to full scale) and showing the entire video signal would produce almost exactly the behavior you describe.</div>
<br />
<br />I'm thinking there's a disconnect between us here.  I'm describing a feature of my IDE that *does not* require code modifications, lost cycles due to those code modifications, or complicated schemes in order to trigger its use.  It is simply a compile-time or run-time available hook to profile multiple chunks of code.
<br />
<br />I don't think its reasonable or a good idea to expect an emulator to handle writes to CPU memory that is mapped to PPU registers [even if it isn't the 'accepted' PPU register address range] differently, depending on the address.  I should be able to code a game that uses PPU registers at $3F00-$3F07 and it should behave *identical* to one I code that uses $2000-$2007.
<br />
<br />Another thing...how do you profile code using the emphasis-bit approach if that code is executed during VBLANK?  How do you *see* it?  The PPU isn't rendering...
<br />
<br />EDIT: You do not have to assemble your code in NESICIDE to be able to use it.  I didn't assemble SMB1...I just used the run-time hooks, which are available no matter the source of the ROM image.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jul 22, 2010 3:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Real NES like testing on an Emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NESICIDE wrote:</div><div class="quotecontent">how do you profile code using the emphasis-bit approach if that code is executed during VBLANK?  How do you *see* it?  The PPU isn't rendering...</div>
<br />I usually add a constant delay (preferably a whole number of scanlines, like 24) before the emphasis change so that it shows up in the visible area, and while looking at the results I take the gap into account.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 22, 2010 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Real NES like testing on an Emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NESICIDE wrote:</div><div class="quotecontent">I don't think its reasonable or a good idea to expect an emulator to handle writes to CPU memory that is mapped to PPU registers [even if it isn't the 'accepted' PPU register address range] differently, depending on the address.</div><br />That's why I said $3F01 and use the high 3 bits: because the behavior I described is exactly as if it were a mirror of $2001.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Another thing...how do you profile code using the emphasis-bit approach if that code is executed during VBLANK?</div>
<br />In the special "show blanking" view, show blanked pixels as color $00 (dark gray) so that the effect of the tint bits is visible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sat Jul 24, 2010 4:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Real NES like testing on an Emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">In the special "show blanking" view, show blanked pixels as color $00 (dark gray) so that the effect of the tint bits is visible.</div>
<br />What is a "show blanking" view?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Jul 24, 2010 6:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One where all scanlines are rendered, with the VBL ones rendered as if BG and sprites were off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sat Jul 24, 2010 9:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">One where all scanlines are rendered, with the VBL ones rendered as if BG and sprites were off.</div>
<br />
<br />OIC.  The difference here is that in that method the Execution Visualizer would show what your code is doing because your code is doing it [ie. turning on/off the tint bits].  In my example though the Execution Visualizer shows what your code is doing because you asked the IDE to show it to you...either by setting a marked region in assembled code, or by setting a marked region in your source code and compiling it.
<br />
<br />NESICIDE could support both...no biggie.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>