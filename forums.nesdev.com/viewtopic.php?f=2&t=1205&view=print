<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Efficient compression for NES graphics</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Efficient compression for NES graphics</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=1205">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=1205</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Mar 08, 2006 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Efficient compression for NES graphics</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi guys.
<br />I've been thinking the last few days what would a good compression scheme for NES graphics be.
<br />
<br />I coded a simple implementation of an RLE encoder, and testing it against some rather random data resulted in pretty bad compression, about 10%. I then tried a simple LZ encoder, with a 256 byte window, and I managed to compress the same data to little more than half it's original size.
<br />
<br />However, these LZ an RLE implementations are generic compression schemes acting on bytes. I can't stop asking myself whether an algorithm that was aware of the NES graphics format could perform any better. Anyway, it's not likely that we'll find many rows of repeated pixels, so RLE is pretty much out. Should LZ be aplied at the pixel level, and not at the byte level? The pointers to previous data would be as big as before, but maybe longer matches may compensate for that. I don't know. Maybe compressing each 1-bit plane separatelly will work better?
<br />
<br />What have you guys learnt from your own experiences with compression of NES CHR data?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Mar 08, 2006 8:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The inherent NES graphics scheme already represents the data in a quite compact form. The use of 4-color tiles, a color palette, and multiple sub-palettes selected by attribute bits covering 16x16 pixel areas are all ways of reducing data. Some games using CHR ram probably go further and represent fonts in 1 bit per pixel format. As a guess, run-length encoding and huffman might help a bit at the pixel level (i.e. work on 2-bit entities). At any other level you're adding complexity by giving the compressor groups of pixels to work on, which might hide some patterns. What kind and volume of graphic data are aiming to compress?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Mar 08, 2006 8:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Although this is something that may be usefull for many future things, my aim right now is to fit 8kb of CHR data into 2kb. It's for that minigame compo thing.
<br />
<br />I haven't decided the compression scheme yet, but wichever it may be I'll try to draw art that's somewhat "flat" for this game, to make compression more possible.
<br />
<br />I have some serious doubt that moving to pixel-oriented compression will help. In the LZ implementation I'm using now, 1 byte tells the length of the run (and whether it is a compressed run or an uncompressed string) and, if compressed, another byte points to the data to copy. Two bytes are necessary to describe compression. This is not much, when the primary unit is a byte, but may be pretty heavy if the primary unit is a NES pixel (2 bits). I don't know if I'll be getting many more matches, in wich case it may be worth it.
<br />
<br />I don't know about combining two methods of compression (huffman after the other one), 'cause decompression would be very complicated. You'd either have to go through the first stage of decompression and when all data is avaliable you go through the 2nd stage (wich would require a lot of memory) or run both algorithms in parallel, and that may be complicated, deciding when to switch to the other and all.
<br />
<br />I'm kinda lost on this one...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Mar 08, 2006 8:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If PAQ or WinRK can't shrink 8k down to 2k, nothing will.
<br />Speaking of which, PAQ shrinks the 8k of Super Mario Bros's graphics down to 4.4k, while 7-zip and winrar got it down to 4.7k.
<br />
<br />The 6502 compatible Pucrunch got it down to 5k, and APlib (which needs its decompressor ported) got it down to about the same size.
<br />
<br />Since pucrunch and aplib are reletively fast to decompress (aplib is faster), and both LZ based, it looks like LZ is the way to go, if your game is Super Mario Bros.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Mar 08, 2006 9:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, compressing them down to 2k will be no picnic. I'll probably go with my LZ approach, but since it uses a small 256 byte window I'll try to keep the tiles I find similar close to each other, so they will compress better. I could do some hardcore compression by hand, instead of letting some program find what is similar, but that'd be slow and I doubt I'd benefit much from that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Mar 09, 2006 12:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you use cartridge ram, you could do it windowless, making it decompress the whole thing into ram at once, using anything seen before as a history.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 09, 2006 8:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, but having access to the whole data may not be that great. The pointers to previous data, will have to be larger than 1 bytes, and that may have some impact over the compression ratio. On the other hand, repeated data would be more likely to happen, so the increased compression may account for the bigger pointers.
<br />
<br />Anyway, I've decided something, at least for the background, that doesn't <strong>have</strong> to be so detailed. I'll use <em>variable tile resolution</em>. Groups of tiles hill have a header indicating the vertical and horizontal resolution of the tiles that follow. This will allow me to have detailed tiles when needed, but have very compact ones when resolution isn't needed. With a healthy detailed/simple ratio I could reach a great compression ratio.
<br />
<br />I'm still fuguring things out, but it will most likely be something like I described above.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Mar 09, 2006 10:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think two levels of compression is do-able, as long one of the level is very light compressed.
<br />Typically, to encode text, DTE compression can easily down the size to 60% of what it was just by having dual-letters in a simple byte (since you won't use all the 8 bits for a single letter). You won't need ram, since a text is fully acessible even when DTE compressed (you just need a few more pointers instead of a real buffer). This actually isn't any serious compression, so you could add a "real" compression on the top of this, such as LZ.
<br />The same could happen with mixing RLE and LZ compression. RLE isn't any "serious" compression algorithm.
<br />Another point is that you have to define your own algoritm in function of how your data is. Typically, if you have a meta-tile based map, you probably will use only 5-bit for the metatile index, leaving 3 bytes for a possible repeat counter, this is "packed" RLE compression.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 09, 2006 10:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't intend to compress the levels maps (at least not with general purpose compression schemes), I'll be using indirection (screens composed by blocks that are composed by metatiles) to produce long levels with minimum size.
<br />
<br />I'll be compressing CHR data only. I think that the "variable resolution" is a very good idea. Sure, things may look a bit blocky here and there, but that's better than having a ridiculous ammount of tiles to use. I'd happily sacrifice some resolution in favour of variety. And it's not like it will be too blocky, many tiles in NES games are like that already. The background does not need that much resolution. Sprites are a very different matter, they can get pretty unrecognizable fast.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Mar 09, 2006 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could use vector graphics like the old <em>King's Quest</em> series (before they remade it to use bitmap graphics). Devote a bunch of tiles to a background area and render the graphics at the beginning of the level.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Mar 09, 2006 11:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How about using an algorithm like Scale2x to smooth low-resolution tiles?  I've implemented it in Z80 before for monochrome graphics, and it took 271 bytes.  No clue for the 6502 size.
<br />
<br />Then again, 271 bytes is pretty big for a routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 09, 2006 12:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">How about using an algorithm like Scale2x to smooth low-resolution tiles?</div><br />That is a good idea! Graphics would definatelly be reduced to 1/4 of it's size. I thinks this may be usefull only for the background, though.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I've implemented it in Z80 before for monochrome graphics, and it took 271 bytes.</div>
<br />What algorithm exactly did you use? Any pages describing it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Mar 09, 2006 1:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><!-- m --><a class="postlink" href="http://scale2x.sourceforge.net/algorithm.html">http://scale2x.sourceforge.net/algorithm.html</a><!-- m -->
<br />
<br />A major problem is that you have to arrange the tiles, and decide how to handle edge cases.  If you do it per 8x8 tile, the results will suck.  You need to group large objects together and isolate them for best results.
<br />
<br />You can see the release thread (with Z80 source and screenshots) here:
<br /><!-- m --><a class="postlink" href="http://www.unitedti.org/index.php?showtopic=2068">http://www.unitedti.org/index.php?showtopic=2068</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 09, 2006 1:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You did that using those exact rules? Your sprites look very good after scaling. I guess it works better on black and white images than with color, no?
<br />
<br />And you're right, using it on individual tiles will suck. Maybe I could define the objects as a whole, and have the NES scale them and then convert to individual tiles. That'd be cool.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Mar 09, 2006 2:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you make your objects strictly rectangular, you can define an object with a single byte (the dimensions as nibbles), followed by raw tile data.
<br />So a 16x16 object which would resize to 32x32 would take 65 bytes.  Although, would the overhead of unpacking the nibbles be worth the one byte saved per object?  Probably yes.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>