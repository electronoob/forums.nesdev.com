<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Got any tips for Early NES Emulator Development?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Got any tips for Early NES Emulator Development?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3964">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3964</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Mar 15, 2008 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A trick I came up with for the renderer.  It actually consists of several parts:
<br />
<br />
<br />1)  pre-render CHR to a seperate graphics buffer (where individual pixels are stored in their own byte).  That will make rendering faster and easier so you don't have to decode 2bpp repeatedly.
<br />
<br />For CHR-ROM this can be done once on ROM load
<br />
<br />For CHR-RAM you'll need to re-decode an 8x1 section of the tile every time CHR-RAM is written to via $2007.  This isn't a big deal, since $2007 isn't written to anywhere NEAR as often as pixels are rendered... so this approach still pays off.
<br />
<br />Needless to say you'll still have to maintain the CHR buffers (you can't replace them with these graphics buffers) because you'll still need to respond to $2007 reads and other things.
<br />
<br />
<br />2)  When you decode CHR, each pixel can be one of 4 colors (2bpp).  Have these colors be:
<br />
<br />0x00, 0xFD, 0xFE, 0xFF
<br />
<br />don't use 0,1,2,3.  Read why explained below
<br />
<br />
<br />3)  when you're applying attribute bits to this CHR, your attribute will be 0x00, 0x04, 0x08, or 0x0C as you'd expect.. but don't use those values... OR them with 0x03:
<br />0x03, 0x07, 0x0B, 0x0F
<br />
<br />4)  with this setup, attributes and transparency can be easily applied with a simple AND operation, rather than conditionals and ORs, which you'd might otherwise need:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">outputpixel = decoded_chr_pixel &amp; attribute;<br /></div><br /><br />I found that before I did this trick... I had to have something like the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">output_pixel = decoded_chr_pixel;<br />if&#40;output_pixel != 0&#41;<br />&nbsp; output_pixel |= attribute;<br /></div>
<br />
<br />The single AND is prefereable to the conditional+OR
<br />
<br />
<br />Anyway just a trick.  You don't have to use it... I'm just throwing ideas at you  ^^

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sun Mar 16, 2008 1:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I have quite alot of games running fairly well now. Including UNROM games like MegaMan and Contra. =) 
<br />
<br />For rendering right now I started off with an inaccurate tile based, full screen renderer. 
<br />
<br />For CHRROM games, I decode all tiles on load of the ROM into an array of tiles (enough for 256kb CHRROM). These are used for quicker and easier rendering. I also have an array of pointers to point to the ROM data that is swapped in for reading from the PPU. Sections can be as small as 1K. 
<br />
<br />For CHR-RAM, there is an array (512 bytes) which consists of 0s on load. Anytime CHR-RAM is written to, it figures out which tile was modified and marks that it must be decoded before it can be rendered. Then my renderer checks for needed updates before drawing. 
<br />
<br />As for the values, the tile arrays use 0,1,2,3. I haven't had any issue with that yet. 
<br />
<br />1943 is giving me issues (sprites not appearing) I need to trace so I'll have that to look at tomorrow. But also I will get to work on the "Line Renderer" which will render a line after the CPU completes it, which will allow for the sprite 0# and other split screen scrolling effects. That will get SMB and I think Excitebike working. 
<br />
<br />I have to say working on the graphics has been alot more fun than working on the CPU core was. Not that it wasn't fun, but the CPU was more time consuming, frustrating, and the rewards weren't easily visable. However with graphics today, I went from a static name table display with incorrect colors all the way to a display with correct colors, full sprites, scrolling, etc. 
<br />
<br />Overall I'm just happy to have gotten somewhere with this project. I really wasn't sure I would get anywhere with this until I first saw Donkey Kong plotting something on the name table. And that was trumped when I finally say the actual graphics.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 16, 2008 6:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- Cool tip, but here's how the CHR is decoded:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;unsigned char layerA = &#40;src&#91;8&#93; &amp; 0xAA&#41; | &#40;&#40;*src &gt;&gt; 1&#41; &amp; 0x55&#41;;<br />&nbsp; &nbsp;unsigned char layerB = &#40;&#40;src&#91;8&#93; &amp; 0x55&#41; &lt;&lt; 1&#41; | &#40;*src &amp; 0x55&#41;;<br />&nbsp; &nbsp;unsigned char *buf = dst;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;*buf = &#40;layerA &gt;&gt; 6&#41;; buf++;<br />&nbsp; &nbsp;*buf = &#40;layerB &gt;&gt; 6&#41;; buf++;<br />&nbsp; &nbsp;*buf = &#40;layerA &gt;&gt; 4&#41; &amp; 3; buf++;<br />&nbsp; &nbsp;*buf = &#40;layerB &gt;&gt; 4&#41; &amp; 3; buf++;<br />&nbsp; &nbsp;*buf = &#40;layerA &gt;&gt; 2&#41; &amp; 3; buf++;<br />&nbsp; &nbsp;*buf = &#40;layerB &gt;&gt; 2&#41; &amp; 3; buf++;<br />&nbsp; &nbsp;*buf = layerA &amp; 3; buf++;<br />&nbsp; &nbsp;*buf = layerB &amp; 3;</div>
<br />
<br />- src is a pointer from the CHR data.
<br />- dst is a pointer to the decoded CHR data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sun Mar 16, 2008 11:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I decode CHR by masking the bits needed, bit shifting, and adding them together to get the final value (0,1,2, or 3). It really isn't very hard to do. Infact, I did it before this project. I was making a NES map editor for a homebrew ROM and wanted to be able to load the NES graphics rather than a converted BMP. 
<br />
<br />I'm sure there are many ways to decode CHR. There's no one right way to do it. Your way Fx3, I'd have to give some study to fully understand it. I'm sure it works, but so does my way which I find much easier to understand. Afterall I wrote it. :p
<br />
<br />I'm sure I'll have some questions when it comes time to emulate the APU. But so far the hardest part was getting the CPU up and working.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Mar 16, 2008 3:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Fx3's algorithm appears to have the odd pixels (x=1, 3, 5, 7) in one "layer" and the even pixels (x=0, 2, 4, 6) in the other.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Mon Mar 17, 2008 7:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">It's a bad idea to assume the sizes of the integral types in C and C++.</div><br />Two specifications impose constraints on a C compiler: the C standard and each platform's application binary interface (ABI). In C, char means byte, and C guarantees that char is always at least 8 bits (CHAR_BIT &gt;= 8).<a href="http://home.att.net/~jackklein/c/inttypes.html" class="postlink">[1]</a> The ABIs of the most popular platforms (x86, PowerPC, ARM) guarantee that CHAR_BIT == 8, making unsigned char and uint8_t equivalent.</div>
<br />
<br />There are several things that are not guaranteed in C or C++ (except maybe in C99 or the latest version of the C++ spec, I dunno?).  However, they are true on practically all platforms that anyone has made in the past 20 years, and will continue to be true basically forever:
<br />
<br />(1)  A byte is 8-bits, and types exist which are 8, 16 and 32 bits in size.  Modern compilers all support 64-bit integer types also.  Except, you might not know which types are which size!  What most people do is simply define their own types for known sizes.  Then if you want to support multiple compilers or port it to a different platform, its easy to supply alternate definitions.
<br />
<br />In my own code, I usually use the following definitions:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef unsigned char&nbsp; U8;<br />typedef&nbsp; signed&nbsp; char&nbsp; S8;<br />typedef unsigned short U16;<br />typedef&nbsp; signed&nbsp; short S16;<br />typedef unsigned int U32;<br />typedef&nbsp; signed&nbsp; int S32;<br />typedef unsigned long long U64;<br />typedef&nbsp; signed&nbsp; long long S64;</div><br /><br />Then I use those types everywhere, so that it is easy for me to keep track of what is going on when I do arithmetic or other operations on them.  The only time I would use "int" or "unsigned" is as a loop counter where I'm not doing any operations with the counter that mix it with those fixed-size types.  For example, if I'm only using it to index an array or something, then I might use "int" or "unsigned".  But even then I tend to prefer U32 or S32 for loop counters.  If it makes you feel better, then typedef these to the new language types (uint8_t or whatever) but I've personally never bothered to do that.<br /><br />(2)  Integers are stored using 2's complement representation for negative integers (i.e. the top bit is the sign bit, there is only one representation of zero--with all bits clear--and the representation of -1 is the number with all bits set.  Contrast this with floating-point numbers, where they actually have *two* representations of zero).  No one has made a machine with other int representations for at least 20 years.<br /><br />(3)  NULL pointers to any data type (including void*) can be represented by a bit-pattern of all clear bits.  So you can (for example) use memset(data, 0, sizeof(MyStruct)); to clear a structure, and assume that any pointers in it are now NULL.  The C/C++ languages actually allow the implementation to use almost anything they want for a NULL pointer--even different values for different types!  But nobody does this, and too much existing code would break if they ever tried to change it.  So go ahead and assume it.<br /><br />(4)  Most platforms nowadays are "32-bit", which means sizeof(int)==4 and sizeof(void*)==4 (in fact size of any pointer type except C++ for pointer-to-member types, should be 32 bits).  If you want to be future-proof for 64-bit platforms its a good idea to keep in mind that their pointer types might be 64 bits instead of 32.  But supporting those two combinations should be plenty for most code (unless you plan to port it to cell phones or something... and most of those have 32-bit processors now anyway).<br /><br />(5)  "Natural" alignment: this is not guaranteed on every platform, but it works on all x86-based platforms (as well as all of the common PPC-, Sparc- and ARM-based platforms, and probably most others).  Basically, small types like to be aligned to their size (i.e. a 4-byte integer type should be aligned on a 4-byte boundary, i.e. bottom 2 bits of its address should be zero).  Structures need alignment and size to the largest alignment of any of their members.  *Also a structure's size is rounded up to a multiple of its alignment by adding padding at the end*, so that if you have an array of that struct, the members of the array are all properly aligned.  Classes == structures (but if there are any virtual methods or virtual base classes, assume the compiler added some crud to your structure that you can't see to support the virtual stuff).  On some platforms, a mis-aligned type is harmless (on x86 this is anything 8-byte-aligned or less), though it is probably slower to access.  In other cases it is NOT harmless and causes the program to crash!  So compilers have to insert extra code to do misaligned accesses (which is a lot slower), AND they have to know that they're doing it---so if you cast a structure pointer to an aligned U64* for example, you might get crashes because you tricked the compiler into thinking the data accessed through the pointer would be aligned when it isn't.<br /><br />Anyway, you can avoid nearly all alignment problems if you use "natural alignment" for all of your data:  Simply don't change structure packing from the compiler default (some people like #pragma pack(1) and such, but I always avoid them because of these alignment requirements), and always put the larger members of your structure first, *or* count the sizes of the members to make sure the later ones are properly aligned:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct Foo<br />&#123;<br />&nbsp; &nbsp; U8 m_type;<br />&nbsp; &nbsp; U8 m_flags;<br />&nbsp; &nbsp; U16 m_blockSize;&nbsp; &nbsp; // &lt;-- offset 2,&nbsp; &quot;natural&quot; alignment == 2<br />&nbsp; &nbsp; U8* m_pData;&nbsp; &nbsp;// &lt;-- offset 4, &quot;natural&quot; alignment == 4 &#40;on most platforms anyway&#41;<br />&nbsp; &nbsp; U16 m_dataAge;&nbsp; // &lt;-- offset 8, &quot;natural&quot; alignment == 2<br />&nbsp; &nbsp; U16 m_padding0;&nbsp; // &lt;-- only exists to make the next field 4-byte aligned<br />&nbsp; &nbsp; U32 m_counter;<br />&#125;;</div>
<br />Two things to notice about this little example:
<br />(1)  I assumed that sizeof(U8*) == sizeof(U32) == 4.  You can always check that with a compile-time assertion, but its true on all 32-bit platforms.  (NOT necessarily on some of the newer 64-bit platforms though!  So the compiler would have inserted an extra 4 bytes of padding before the m_pData field!)
<br />(2)  I inserted a 2-byte m_padding0 field, just so that m_counter would have the proper alignment.  Actually, the compiler will insert padding by itself (if its necessary, and unless you've told it not to)... but I prefer to stick to the "natural" alignment rule by inserting padding fields myself so that the compiler never has to add them.  That makes it easier to manually add up the size of the structure at a glance, too.
<br />
<br />[Edit: I forgot to describe the main usefulness of the "natural alignment" rule...  many platforms, such as x86 for example, have rules where a 2-, 4- or 8-byte type can have any alignment you want, but if it happens to cross a cache line boundary then it will be slower to access (sometimes much slower).  Or they have rules where the integer types support misaligned accesses but the floating point types don't.  So if you just stick to "natural alignment", then you guarantee that no 4-byte or 8-byte type is ever going to cross a 32- or 64-byte cache line boundary, and you avoid having to deal with any of those special cases.  "Natural alignment" is a simple rule that's easy to follow, and will avoid 99% of potential alignment problems for most code.]
<br />
<br />Anyway, just some ideas.  Happy coding!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 17, 2008 10:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Two specifications impose constraints on a C compiler: the C standard and each platform's application binary interface (ABI).</div><br />There are several things that are not guaranteed in C or C++ (except maybe in C99 or the latest version of the C++ spec, I dunno?).  However, they are true on practically all platforms that anyone has made in the past 20 years</div><br />That's what I meant by ABI constraints.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(1)  A byte is 8-bits</div><br />CHAR_BIT (number of bits in a byte) can be larger than 8 on some digital signal processors, which might have, say, 32-bit bytes. But I agree that most of us won't ever write NES emulators for such architectures.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In my own code, I usually use the following definitions:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef unsigned char&nbsp; U8;<br />typedef&nbsp; signed&nbsp; char&nbsp; S8;<br />typedef unsigned short U16;<br />typedef&nbsp; signed&nbsp; short S16;<br />typedef unsigned int U32;<br />typedef&nbsp; signed&nbsp; int S32;<br />typedef unsigned long long U64;<br />typedef&nbsp; signed&nbsp; long long S64;</div><br /></div><br />Those names sound familiar. Did you learn them from the GBA scene?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Classes == structures</div><br />That's actually true by the C++ standard. Within C++, the <em>only</em> difference between the two is the privilege of members that precede the first privilege statement.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anyway, you can avoid nearly all alignment problems if you use "natural alignment" for all of your data</div>
<br />You'll also have to use byte-wise I/O for file formats too, as plenty of common file formats (such as .bmp) do <em>not</em> use natural alignment.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Mar 17, 2008 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(3) NULL pointers to any data type (including void*) can be represented by a bit-pattern of all clear bits. So you can (for example) use memset(data, 0, sizeof(MyStruct)); to clear a structure, and assume that any pointers in it are now NULL.</div><br />Being portable costs very little in this case. Instead of<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MyStruct* s = ...<br />memset&#40; s, 0, sizeof *s &#41;;</div><br />you can do<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MyStruct* s = ...<br />static const MyStruct zero = &#123; 0 &#125;;<br />*s = zero;</div><br />This will work properly even if MyStruct has floating-point types in it. If you are declaring MyStruct locally, you can even just do<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MyStruct s = &#123; 0 &#125;;</div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(4) Most platforms nowadays are "32-bit", which means sizeof(int)==4 and sizeof(void*)==4 (in fact size of any pointer type except C++ for pointer-to-member types, should be 32 bits). If you want to be future-proof for 64-bit platforms its a good idea to keep in mind that their pointer types might be 64 bits instead of 32.</div><br />If you're coding for a modern platform, why not use intptr_t (or uintptr_t)? The reader then knows that you're stuffing a pointer into an int, and it's guaranteed portable.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(5) "Natural" alignment: this is not guaranteed on every platform, but it works on all x86-based platforms (as well as all of the common PPC-, Sparc- and ARM-based platforms, and probably most others). Basically, small types like to be aligned to their size.</div>
<br />This pretty much has to be the case, because it's guaranteed that for an array of T, elements will be sizeof (T) bytes apart. So the only way a type's alignment wouldn't be sizeof (T) bytes as well is if it were at some offset, for example if sizeof (int) were 4 and proper alignment required that its address % 4 be some non-zero value.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Mar 17, 2008 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">CHAR_BIT (number of bits in a byte) can be larger than 8 on some digital signal processors, which might have, say, 32-bit bytes. But I agree that most of us won't ever write NES emulators for such architectures.<br /></div>
<br />Who would refer to it as a "Byte" rather than a "Word" if it's more than 8 bits large?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Mon Mar 17, 2008 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">This will work properly even if MyStruct has floating-point types in it. If you are declaring MyStruct locally, you can even just do<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MyStruct s = &#123; 0 &#125;;</div><br /></div><br />Interesting, thanks for that idiom!<br /><br />Usually when memset is used its for something that is not statically initialized (e.g. an array of structures on the stack or something), but memset is pretty slow on some platforms anyway so your way might be faster for individual stack-allocated structs.  And being portable is nice too of course!<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">If you're coding for a modern platform, why not use intptr_t (or uintptr_t)? The reader then knows that you're stuffing a pointer into an int, and it's guaranteed portable.</div><br />That might work, but then you either have to not assume a fixed size for those types (is it 4 bytes or 8? depends on the size of the pointers, *and also the size of int on your platform*) or you have to check sizeof(intptr_t) in your code at which point I'd rather be making my own union type anyway.   <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />   Depending on your reason for doing such tricks (I usually encounter them in the context of a memory size optimization), you might need to know the pointer size, in which case you are better off using your fixed-size types (as well as putting a compile-time assertion near the code that uses it, that serves to both document and check the assumption).  What I've found over the years is that I hate programming with types that I don't know the sizes of.   <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" />   But there is no easy way to avoid it if you want a pointer-sized union... oh well.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(5) "Natural" alignment: this is not guaranteed on every platform, but it works on all x86-based platforms (as well as all of the common PPC-, Sparc- and ARM-based platforms, and probably most others). Basically, small types like to be aligned to their size.</div><br />This pretty much has to be the case, because it's guaranteed that for an array of T, elements will be sizeof (T) bytes apart. So the only way a type's alignment wouldn't be sizeof (T) bytes as well is if it were at some offset, for example if sizeof (int) were 4 and proper alignment required that its address % 4 be some non-zero value.</div>
<br />Close, but don't forget that you can have a type T where sizeof(T)==4 but the alignment required for T is only 1, for example.  The "natural alignment" rule suggests that you align them on their size anyway, even if that is more than the CPU strictly requires, so e.g. 8-byte double variables should be aligned on an 8-byte boundary, even if some platforms would be perfectly happy with a 4-aligned or 1-aligned double.  
<br />
<br />Many compilers will already align structure members to natural alignment for you (all x86 compilers I know of do this by default).  Knowing this rule means you can put the fields in the struct in an order where the compiler doesn't have to insert padding (or inserts only minimal padding).  For example, if you have some U8's and some U32's in the same struct, either put all the U32's first, or make sure you group four U8's together, so that the U32's are 4-byte-aligned.  If you don't do that, the compiler might need to insert more padding in the struct in order to satisfy its alignment rules.  I'm not sure if its legal according to the C/C++ specs for compilers to *re-order* the fields in your struct, but I've never ever seen a compiler that does that, instead they just add padding whenever the next field would not be properly aligned without padding.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 17, 2008 7:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">why not use intptr_t (or uintptr_t)?</div><br />Because not everybody has a C99 compiler. And because C++ compilers aren't yet required to provide C99's new types as an extension.<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">CHAR_BIT (number of bits in a byte) can be larger than 8 on some digital signal processors, which might have, say, 32-bit bytes. But I agree that most of us won't ever write NES emulators for such architectures.</div><br />Who would refer to it as a "Byte" rather than a "Word" if it's more than 8 bits large?</div>
<br /><strong>octet</strong> <em>n.</em> A vector of eight bits. [From Latin <em>octo</em> = eight.]
<br />
<br /><strong>byte</strong> <em>n.</em> A vector of bits whose size is that of an "addressable unit of data storage large enough to hold any member of the basic character set of the execution environment" (C standard, clause 3.6). [From "bite", modified in spelling to distinguish from "bit".]
<br />
<br /><strong>word</strong> <em>n.</em> A vector of bits whose size is a machine's preferred size for integers, floats, or addresses.
<br />
<br />On x86, PowerPC, MIPS, and ARM, a byte is the same size as an octet. On some specialized architectures, a byte is the same size as a word. C makes no explicit provision for architectures that have different sizes of bytes for different regions of memory, such as the VRAM of some Nintendo handhelds.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Thu Mar 20, 2008 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Back to you know, writing emulators.. 
<br />
<br />My emulator is coming along nicely I think. I started working on MMC1 and it was a bitch because of various things that weren't very clear to me. But I've managed to get it working I think for everything with the exception of the 32K switching mode.  Does anyone know of a MMC1 game that uses 32K switching? Also are there any games where I need to worry about what happens to PRG which you change between 32k and 16k modes and what gets mappe where/etc.
<br />
<br />I also finally wrote a real scanline renderer. Prior to this I was just using a hacked up version of my tiled screen renderer. This should allow me to better emulate Sprite 0 hit I think. 
<br />
<br />Most importantly perhaps I found out my emulator timing was totally broken. NMI would happen at a constant rate and all, but it wasn't the correct amount of cycles, and the vblank peroid and such was just missing. Whoops. :p
<br />
<br />Not so important but nice, I looked at Loopy's docs to figure out why SMB's status bar flickered. It fixed that and I'm pretty happy with my progress now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Mar 20, 2008 11:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"> Does anyone know of a MMC1 game that uses 32K switching?</div>
<br />Dragon Warrior 3 + 4 use it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Mar 21, 2008 1:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How bout one that doesn't also use the 512k or 1024k cart banking? :p

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Mar 21, 2008 1:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1024k MMC1 cart banking does not exist, no matter how many DW4 overdumps you find.
<br />"Forbidden Four" multicart example by Tepples uses 32k bankswitching and a size of 256k.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>