<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Metatiles, and memory vs. complexity</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Metatiles, and memory vs. complexity</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=5429">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=5429</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>UncleSporky</b> [ Thu Jul 23, 2009 4:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Metatiles, and memory vs. complexity</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi guys, I've been thinking about the reasoning behind different systems of organizing your backgrounds/level data and I'm looking for a simple method I can use for a platformer.  As such I have a lot of random questions so please forgive the length.
<br />
<br />I'm kind of going off of <a href="http://nesdev.com/bbs/viewtopic.php?t=5122" class="postlink">this topic</a> which has excellent info but I thought the subject was different enough to start a new one.
<br />
<br />The basic 2x2 metatiles have obvious memory-saving advantages.  There aren't many NES games that don't have 16x16 pixel blocks repeated all over the place.  It would be easy to stuff a lot of those together, RLE it and call it a day, though that wouldn't be efficient at all.  (Or <em>would</em> that be sufficient for a 4 to 8 level demo/game?)
<br />
<br />Anyway I'm having a hard time figuring out how I'd put larger metatiles to good use without sacrificing a lot graphically.  32x32 blocks would probably still have a lot of repetitions, but the larger you get the less I see the point.  Isn't the main point of metatiles to use repeatable data more than once?  How often am I going to repeat 64x64 or 128x128?  I understand reused screens the way Mario does it for each flagpole for example, but simply using big blocks while also trying to keep the level layout unique seems needlessly difficult for only mediocre savings.
<br />
<br />When people say they have metatiles of metatiles of metatiles, what do they mean?  I guess the first thing I picture is this:
<br />
<br /><img src="http://img528.imageshack.us/img528/7880/cv3.png" alt="Image" /> <img src="http://img233.imageshack.us/img233/7219/cv3wrong.png" alt="Image" />
<br />
<br />Which is clearly wrong and not the way most games appear to do it.  We need the flexibility to place graphics wherever we need them and in a typically complex screen there is no repeated data on the largest metatile size.  On closer inspection I see this:
<br />
<br /><img src="http://img528.imageshack.us/img528/9750/cv3liketiles.png" alt="Image" />
<br />
<br />But this introduces even more complexity.  Now we have 64x64 blocks mixing with 32x32 blocks, so we have to keep track of additional size/coordinate data rather than letting the sequential data be enough, much like an object based system.  Again, are the savings worth the effort?
<br />
<br />I understand that this example is probably flawed since CV3 is a complicated game made late in the NES's life, but it's representative of what I'm trying to understand: the memory savings vs. map decoding complexity.
<br />
<br />What about priority systems for background graphics - was it ever common to overlay metatiles on top of each other?  For example, writing in a metatile of a statue and overwriting the bottom of it with plant growth a few lines later.  The thought occured to me seeing the two small windows near Trevor with one mostly covered.
<br />
<br />I have seen from a lot of topics here that you don't usually store every tile of every screen; it makes sense for a level to have a default screen that is then modified.  You can seen this when you jump over the flagpole in Mario and you can keep walking forever.  Or like this screen of Kirby:
<br />
<br /><img src="http://img188.imageshack.us/img188/864/kirbysadventure0.png" alt="Image" /> repeats <img src="http://img188.imageshack.us/img188/3826/kirbystrip.png" alt="Image" />
<br />
<br />That doesn't seem too hard to implement.
<br />
<br />Do games use "vector" methods to store backgrounds?  For example in that Kirby screen, does the code detect the top of one of those thin poles and extrapolate it to the ground?  Or in this Mario screen,
<br />
<br /><img src="http://img528.imageshack.us/img528/5082/supermariobrothers31.png" alt="Image" />
<br />
<br />Is the slant defined by its height, and the top becomes the new "ground level" with a grass fill below it?
<br />
<br />Finally, would it be worthwhile to keep a copy of the current screen decoded into RAM on a 16x16 level?  (Meaning, with status bar taken into account, probably 192 bytes.)  It would essentially be for checking collisions or recording changes that need to be made during VBLANK.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 23, 2009 5:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metatiles, and memory vs. complexity</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent">When people say they have metatiles of metatiles of metatiles, what do they mean?</div><br />Mega Man series (32x32px, made of 16x16px). Blaster Master (64x64px, made of 32x32px, made of 16x16px). Sonic 2 for Genesis (128x128px, made of 16x16px). Tokumaru's Sonic clone (256x256px, made of 128x128px, made of 64x64px, made of 32x32px, made of 16x16px).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What about priority systems for background graphics - was it ever common to overlay metatiles on top of each other?</div><br />Super Mario Bros. Super Mario Bros. 3, Super Mario World, and the engine that I've been working on use a sort of object-based storage for area data as (x, y, contents, size) tuples, and objects overwrite objects.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><img src="http://img188.imageshack.us/img188/864/kirbysadventure0.png" alt="Image" /> repeats <img src="http://img188.imageshack.us/img188/3826/kirbystrip.png" alt="Image" /></div><br />SMB1 has three layers of repeating stuff behind the "area data", which doppelganger's disassembly called "background scenery", "foreground scenery", and "terrain".<br /><br /><strong>Background scenery</strong> consists of clouds, hills, bushes, fences, etc. There are 16 16x48px metametatiles, which are used in three different 48-metatile-wide repeating patterns. Notice how there's never a cloud over a hill, or a cloud over a cloud, or a cloud over a <a href="http://www.neogaf.com/forum/showpost.php?p=9490699&amp;postcount=70" class="postlink">Green Cloud That You Can't Unsee</a>.<br /><br /><strong>Foreground scenery</strong> is one of three repeating columns of tiles very similar to the one you plucked out of Kirby: <ul><li>Full-screen water in 2-2, 7-2, and 8-4. </li><li>The water at the bottom of x-4 and 3-1. </li><li>The wall at the back of 8-3. </li></ul><strong>Terrain</strong> is various repeating columns of tiles used for long horizontal stretches. Terrain patterns are bitfields of solid and hollow, where the block type is set by the locale (e.g. bricks and cracked-blocks for most levels, or cloud blocks for coin heaven, or castle blocks for x-4, or wet cracked-blocks for underwater levels other than 8-4).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do games use "vector" methods to store backgrounds?  For example in that Kirby screen, does the code detect the top of one of those thin poles and extrapolate it to the ground?</div><br />I'm not sure, but my engine has a pass called "Markov" or "MLBB" (most likely block below) that sees, for example, a top-of-thin-pole metatile and extends it downward through empty metatiles until it hits a non-empty metatile.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">  Or in this Mario screen,<br /><br /><img src="http://img528.imageshack.us/img528/5082/supermariobrothers31.png" alt="Image" /><br /><br />Is the slant defined by its height, and the top becomes the new "ground level" with a grass fill below it?</div><br />The Super Mario Bros. games are all vector-fests. Go download Lunar Magic or one of the Mario Improvement editors to see how.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Finally, would it be worthwhile to keep a copy of the current screen decoded into RAM on a 16x16 level?  (Meaning, with status bar taken into account, probably 192 bytes.)</div>
<br />SMB1 keeps two such screens side-by-side. But if you're scrolling in more than one direction with a destructible environment (such as ? blocks that can be activated or bricks that can be broken), you'll need some more compact storage to determine what tiles have already been activated/destroyed whenever you redecode part of the level where the player has already been.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>UncleSporky</b> [ Thu Jul 23, 2009 7:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metatiles, and memory vs. complexity</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the info, I'm glad to learn that the above methods are all used.  I guess I should've been more specific - knowing that all the above is possible, how do I figure out what combination of features is going to be efficient for a starter engine?
<br />
<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent">When people say they have metatiles of metatiles of metatiles, what do they mean?</div><br />Mega Man series (32x32px, made of 16x16px). Blaster Master (64x64px, made of 32x32px, made of 16x16px). Sonic 2 for Genesis (128x128px, made of 16x16px). Tokumaru's Sonic clone (256x256px, made of 128x128px, made of 64x64px, made of 32x32px, made of 16x16px).</div><br />I meant, how is this system of metatiles utilized.  What sort of matrix are we looking at, how many bits per entry?<br /><br />I'm not very good at elaborating on this.  Why would you have a 256x256 metatile?  What am I looking at to determine the most optimal size for my largest metatile?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do games use "vector" methods to store backgrounds?  For example in that Kirby screen, does the code detect the top of one of those thin poles and extrapolate it to the ground?</div><br />I'm not sure, but my engine has a pass called "Markov" or "MLBB" (most likely block below) that sees, for example, a top-of-thin-pole metatile and extends it downward through empty metatiles until it hits a non-empty metatile.</div>
<br />Is this efficient enough to use often, considering it requires a little more checking than tossing down a square of tiles?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jul 23, 2009 8:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metatiles, and memory vs. complexity</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent">I meant, how is this system of metatiles utilized.  What sort of matrix are we looking at, how many bits per entry?</div><br />The easiest way to handle them is when the sizes of the metatiles are powers of 2, so that specific bits from a full coordinate can be used to identify all the metatiles. Take my metatile format as an example:<br /><br />If inside a 256x256 metatile (meaning I'm limiting values to 8 bits) I have coordinates %10010010 (x) and %00100110 (y). Ignore the lower 4 bits because those represent pixels inside the smallest metatile, so we have: %1001 and %0010. We're already inside a 256x256 metatile, which is composed by 4 128x128 metatiles. But in which of those 4 are those coordinates? Easy, the highest bit of the x coordinate will indicate if it's the left one or the right one. Similarly, the highest bit of the y coordinate will indicate if it's the top one or the bottom one. OK, my bits are %1 and %0 so we want the 128x128 metatile at the top right corner. Just go to the place where the 256x256 metatiles are stored and get that one.<br /><br />Now, inside the 128x128 metatile the process continues. The next bits are %0 and %0, so we want the 64x64 metatile at the top left corner. This goes on until the 16x16 metatile is reached, at which point you can do anything with it (draw it, collide with it, and so on).<br /><br />This is the process to find the smallest metatile at specific coordinates, but there are cases when we want to read more, such as when drawing a column or a row of metatiles while scrolling. The process is not much complicated. If rendering a column, for example, use the x coordinate of the column to select between the left or right sides of each type metatile, and once the smallest one is found, just read the top and bottom elements of all the metatiles all the way down until the column is complete.<br /><br />In the ROM each type of metatile is encoded individually. Each 256x256 metatiles points to 4 128x128 metatiles. Each of those point to 4 64x64 metatiles, and so on.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why would you have a 256x256 metatile?</div><br />You could ask the programmers of games like Sonic 1 or Mega Man X for their reasons, but the reason I use them is so that I can have huge levels that don't take so much memory.<br /><br />I don't expect to reuse many 256x256 metatiles, except for those that are pure sky or pure ground. Some sections of flat ground can be reused fairly often as well, and you can use tricks like placing decorative objects such as rocks and vegetation over the background so that it looks like a different area.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What am I looking at to determine the most optimal size for my largest metatile?</div>
<br />The amount o redundancy you are willing to tolerate. Some games don't work well with large metatiles, such as RPGs, because their maps don't have many repeated areas. They have areas where specific blocks are reused a lot, so some RLE or LZ-based compression scheme might work better. Platforms in a platformer on the other hand are very similar, and you'll often see large blocks used over and over again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>UncleSporky</b> [ Thu Jul 23, 2009 9:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metatiles, and memory vs. complexity</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent">I meant, how is this system of metatiles utilized.  What sort of matrix are we looking at, how many bits per entry?</div><br />The easiest way to handle them is when the sizes of the metatiles are powers of 2, so that specific bits from a full coordinate can be used to identify all the metatiles. Take my metatile format as an example:<br /><br />etc.</div>
<br />This is a really nice system.  So as the upper four bits handle 128/64/32/16 location, do the lower four go down to 8/4/2/1, or are they flags for something else?  Do you have reason to look up exact pixels in your engine?
<br />
<br />Also, that is a lot of decoding!  Do you keep track of the screen somewhere temporarily, or is it fast enough to find each tile and push it into the nametable?
<br />
<br />This is part of Faxanadu's map, let's say for the sake of example that it scrolls like a Sonic game and each screen is a 256x256 metatile.  Your level data would look like this?
<br />
<br /><img src="http://img190.imageshack.us/img190/3812/faxmap.jpg" alt="Image" />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.db 4, 2&nbsp; &nbsp; &nbsp;;size of map<br />.db %00000001, %00000001, etc. etc.</div>
<br />
<br />It seems really simple but I want to make sure I understand.  Everything is ultimately part of a 256x256 block, even when only used once?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jul 23, 2009 9:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metatiles, and memory vs. complexity</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You got it all!
<br />
<br /><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent">do the lower four go down to 8/4/2/1, or are they flags for something else?  Do you have reason to look up exact pixels in your engine?</div><br />I use them to tell how far into the metatile the coordinates are. This is useful when the ground is not perfectly straight, for example. If each column of the metatile has a different height (as is the case with slopes or irregular surfaces), I have to use the lower bits of the y coordinate in order to tell if a character is touching the ground or not.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, that is a lot of decoding!  Do you keep track of the screen somewhere temporarily, or is it fast enough to find each tile and push it into the nametable?</div><br />I have unrolled loops for decoding rows and columns (for drawing), and those are pretty fast, because I first use the bits of the coordinates to set up a few pointers (one for each type of metatile) and then it's just a bunch of "lda (pointer), y", "tay", "lda (pointer), y", "tay"... because the value you read from a type of metatile is used to read the next type.<br /><br />Reading individual metatiles (for collision detection and such) is also done on the fly, because it also takes just a few "lda", "tay" instructions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Your level data would look like this?</div><br />Exactly!<br /><br />I have some tables with the addresses of each row of the level map, so that I don't have to do any multiplications in order to find a particular 256x256 metatile.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Everything is ultimately part of a 256x256 block, even when only used once?</div>
<br />It's easier to do it like this than treat them differently. I don't see any problems with using a few metatiles only once.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>UncleSporky</b> [ Thu Jul 23, 2009 10:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metatiles, and memory vs. complexity</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent">do the lower four go down to 8/4/2/1, or are they flags for something else?  Do you have reason to look up exact pixels in your engine?</div><br />I use them to tell how far into the metatile the coordinates are. This is useful when the ground is not perfectly straight, for example. If each column of the metatile has a different height (as is the case with slopes or irregular surfaces), I have to use the lower bits of the y coordinate in order to tell if a character is touching the ground or not.</div>
<br />Oh, that makes sense, awesome.
<br />
<br />Of course your method is most suitable for scrolling in all directions with large levels, whereas a game like Mario or Kirby might just have a basic template modified by objects.  I think I understand it a lot better.
<br />
<br />I've been thinking about a non-scrolling game with the format of Zelda or <a href="http://nesdev.com/bbs/viewtopic.php?t=4542&amp;start=0" class="postlink">Sivak's platformer,</a> so in that case I would probably want to encode each screen individually with 64x64 or 32x32 tiles (also similar to Mega Man which has many individual rooms).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jul 24, 2009 8:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Metatiles, and memory vs. complexity</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent">I've been thinking about a non-scrolling game with the format of Zelda or <a href="http://nesdev.com/bbs/viewtopic.php?t=4542&amp;start=0" class="postlink">Sivak's platformer,</a> so in that case I would probably want to encode each screen individually with 64x64 or 32x32 tiles (also similar to Mega Man which has many individual rooms).</div>
<br />Oh yeah, if you only show one screen at a time the best thing to do is encode them individually. I don't think you need more than one layer of metatiles, and 32x32 is a very good size to use because it makes handling attributes much easier. You should also use some conventional compression such as RLE or LZ on each screen.
<br />
<br />This would work well even if you want to have basic scrolling like Zelda, where scrolling is just an animation from one screen to the other and the player has no power over it. All you have to do is decode the new screen to the name table that isn't visible, and when it's done scroll to show it. Of course that if you have hardwired mirroring, vertical for example, you'd have to copy the data a row at a time from the other name table into the visible one as it scrolls up or down. The Mega Man games with hardwired mirroring do this when scrolling vertically.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>