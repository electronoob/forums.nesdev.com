<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Stuff I don't like with object oriented programming...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Stuff I don't like with object oriented programming...</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10350">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10350</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Aug 07, 2013 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">If you're just writing something for yourself, no library, and nobody else is supposed to use your code without having full access to it (in which case he's in his right to modify it as his liking), then I see no point of having such strict encapsulation, other than &quot;because it's good practice&quot;.</div><br /><br />If you don't use it, are you complaining about somebody else's private code?<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">And it's good to know Python supports multiple returns, I've never learnt python but it sounds like this language at least does something right I'd have liked to see in more languages <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />The reason Python has such a simplified syntax for multiple returns is because it has no type safety. So, the difference looks like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">def myfunc:<br />&nbsp; &nbsp; return (1,2)<br /><br />(a, b) = myfunc();</div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct MyfuncT { int a; char b; };<br />struct MyfuncT myfunc()<br />{<br />&nbsp; &nbsp; MyfuncT r = {1,2};<br />&nbsp; &nbsp; return r;<br />}<br /><br />struct MyfuncT m = myfunc();</div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">pair&lt;int,char&gt; myfunc()<br />{<br />&nbsp; &nbsp; return pair&lt;int,char&gt;(1,2);<br />}<br /><br />pair&lt;int,char&gt; p = myfunc();</div><br /><br />So, unless you're counting braces as extra lines, the C++ version is the same number of lines as the python version, really. (The C version has two extra lines.) The extra verbosity is really just about specifying types explicitly for every variable. If you prefer not to have to specify types, it comes with the huge caveat that type errors are now a runtime error, and not a compile time error. This is one of the big reasons I do not like to use Python for some types of projects.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Finally something I'd say, is that it's also annoying how hard it is to get an exact deep copy of an object, without any reference copy, so that any changes to the new object doesn't affect the original one. Usually you have to do this by hand, because the language doesn't support it.</div><br /><br />I'm not aware of any language where a true deep copy is a simple problem. Garbage collected languages make it a little easier. The complexity and relative unsafety of C++ makes it a little harder (though plenty of people use &quot;smart pointer&quot; implementations in C++ to make it easier).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Aug 07, 2013 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Other than these two cases, language verbosity has never been much of an issue to me. Maybe if I was a much slower typist...? I dunno.</div><br />The verbosity can also be combated with a good editor. That said, personally I'm a little bit disappointed in the current state of code editors, I think none of them (that I've tried) are as good as they potentially could be.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Aug 07, 2013 10:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also I think with C++11 you have some type inference ability, so you could do this at the end of the C++ example instead:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">auto p = myfunc();</div><br /><br />Whether or not you want to defeat the explicit type safety with an auto inference is a judgement call, though. Sometimes you want to make sure if that return type changes that you will change the code that uses it as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 07, 2013 11:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">The reason Python has such a simplified syntax for multiple returns is because it has no type safety.</div><br />This looks like type safety to me:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&gt;&gt;&gt; print(1 + '2')<br />Traceback (most recent call last):<br />&nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br />TypeError: unsupported operand type(s) for +: 'int' and 'str'</div><br />There's a difference between &quot;strong&quot; and &quot;weak&quot; typing on the one hand and &quot;static&quot; and &quot;dynamic&quot; typing on the other. What you're seeing is that Python has a <a href="https://en.wikipedia.org/wiki/Top_type" class="postlink">top type</a> (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">object</tt>), and all other types are subtypes of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">object</tt>, and all variables have type <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">object</tt>. Java likewise has a quasi-top type (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">java.lang.Object</tt>), used internally by the implementations of <a href="http://docs.oracle.com/javase/tutorial/collections/" class="postlink">Java collections</a>, but primitive numerics need to be &quot;boxed&quot; into objects first. This boxing happens automatically since JDK 1.5 but incurs some runtime overhead.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm not aware of any language where a true deep copy is a simple problem.</div><br />Any language that supports <a href="https://en.wikipedia.org/wiki/Serialization" class="postlink">serializing</a> (or pickling or marshalling) an object allows deep-copying the object even from one process to another.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Aug 07, 2013 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was referring to its lack of compile-time type safety, which I think I clarified below that statement. Yes, it will fail if your types are incorrect at runtime, at least it's polite enough to do that!<br /><br />Every time I've used serialization/pickling/etc. there's been a whole lot of rules to follow for all the objects you need to serialize. If you follow all the rules (or for simple cases where you're not breaking any rules anyway), yes it's much easier to implement in Python (e.g. more or less built-in) than C++ (usually requires some overhead code in every single class). If you don't follow all the rules and then want to implement it later, unravelling it can be a pain. More of a pain in C++.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Wed Aug 07, 2013 12:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Did you consider Haskell? In Haskell you can easily return a tuple (and you can easily ignore one so you can pattern match on <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&#40;x, _&#41;</tt>, for example), and values can be copied and passed around whatever you want. Field names can be used as functions which read the corresponding field, although you can also make classes which allow many types to share sets of operations and mathematical laws (such as being a number, a <a href="http://en.wikipedia.org/wiki/Functor" class="postlink">functor</a>, a <a href="http://en.wikipedia.org/wiki/Monad_(category_theory)" class="postlink">monad</a>, a <a href="http://en.wikipedia.org/wiki/Monoid" class="postlink">monoid</a>, etc). There are a lot of other things you can do with it too.<br /><br />Having macros would also help with many of the things you mention, and with other things, too. Haskell does have Template Haskell, although they aren't quite real macros.<br /><br />Note that I have wanted the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.=</tt> operator that you have described, too, in things such as JavaScript.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 07, 2013 12:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I was referring to its lack of compile-time type safety, which I think I clarified below that statement. Yes, it will fail if your types are incorrect at runtime, at least it's polite enough to do that!</div><br />Perhaps what I was getting at is that PHP doesn't even do that; it's overly eager to convert things to numbers or to strings in ways that have led to security problems. JavaScript in a function that doesn't <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode" class="postlink">&quot;use strict&quot;</a> is just as bad.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Aug 07, 2013 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So, unless you're counting braces as extra lines, the C++ version is the same number of lines as the python version, really. (The C version has two extra lines.) The extra verbosity is really just about specifying types explicitly for every variable. If you prefer not to have to specify types, it comes with the huge caveat that type errors are now a runtime error, and not a compile time error. This is one of the big reasons I do not like to use Python for some types of projects.</div><br />I don't count braces as extra lines, however, you forgot that I don't want the results of my function to be in an unusable Pair variable, but I want in it two variables. Which means two extra lines of code to extract individual values from the Pair (and that both in C and C++).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 07, 2013 4:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In that case, the advantage of Python and PHP is that unlike C++, they have a <a href="https://en.wikipedia.org/wiki/Syntactic_sugar" class="postlink">sugar</a> for assigning multiple variables out of a compound.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// C++11<br />#include &lt;utility&gt;&nbsp; // for std::pair<br />#include &lt;cstdio&gt;&nbsp; &nbsp;// for std::printf<br />std::pair&lt;int,char&gt; myfunc() {<br />&nbsp; &nbsp; return std::pair&lt;int,char&gt;(1,2);<br />}<br />int main(void) {<br />&nbsp; &nbsp; auto p = myfunc();<br />&nbsp; &nbsp; int a = p.first;<br />&nbsp; &nbsp; char b = p.second;<br />&nbsp; &nbsp; std::printf(&quot;a is %d and b is %d\n&quot;, a, b);<br />&nbsp; &nbsp; return 0;<br />}<br /><br /># Python 2.7<br />def myfunc():<br />&nbsp; &nbsp; return (1, 2)<br /><br />a, b = myfunc()<br />print &quot;a is %d and b is %d&quot; % (a, b)<br /><br />// PHP 5.3<br />&lt;?php<br />function myfunc() {<br />&nbsp; &nbsp; return array(1, 2);<br />}<br />list($a, $b) = myfunc();<br />echo &quot;a is $a and b is $b\n&quot;;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Wed Aug 07, 2013 6:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Again on tuples...<br />Instead of:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">std::tuple&lt;int,char,char&gt; myfunc()<br />{<br />&nbsp; &nbsp;return std::tuple&lt;int,char,char&gt;(1,2,3);<br />}<br /></div><br /><br />you can write for a bit less of verbosity:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">std::tuple&lt;int,char,char&gt; myfunc()<br />{<br />&nbsp; &nbsp;return std::make_tuple(1,2,3);<br />}<br /></div><br />Don't worry about temporaries, as everything is moved when it is possible.<br /><br />(Unfortunately, the &quot;{ }&quot; syntax appears not to work, which would be alot nicer)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 07, 2013 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But what types does <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">std::make_tuple</tt> use? How does it know to make char instead of int? Or is one implicit conversion happening?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Aug 07, 2013 9:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, also I forgot the very common C/C++ paradigms of passing by reference/pointer for multiple &quot;return&quot; values. This I think is used in practice much more than the struct/pair/tuple methods. I've seen it in a zillion places, and used it lots. Dunno why it slipped my mind early. Example off the top of my head: MSVC's fopen_s function. Microsoft even added an &quot;out&quot; keyword for this when they designed C#.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int myfunc(char&amp; b_out)<br />{<br />&nbsp; &nbsp; b_out = 2;<br />&nbsp; &nbsp; return 1;<br />}</div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int myfunc(char* b_out)<br />{<br />&nbsp; &nbsp; if (b_out != NULL) *b_out = 2; // can test for NULL for an &quot;optional&quot; return value<br />&nbsp; &nbsp; return 1;<br />}</div><br /><br />There are valid reasons to choose &amp; vs * for some particular cases, though they are often interchangeable techniques.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Aug 07, 2013 9:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Keeping true to my KISS principle roots -- re: subject line:<br /><br />Almost of it.<br /><br />That is all from me on the subject.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Aug 08, 2013 4:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Keeping true to my KISS principle roots -- re: subject line:<br /><br />Almost of it.<br /><br />That is all from me on the subject.</div><br /><br />I do think people tend to overdo it. Clean interfaces and implementation hiding does not require classes, and not everything needs to be in its own tiny nested namespace when there's zero risk of ambiguity and name collisions in practice. Even hardcore C++ fans (if those exist <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />) often seem to prefer C-style libraries.<br /><br />I usually don't bother with classes unless I need to create multiple instances. A function pointer can be as clean or cleaner than a class hierarchy for simple generic code too, as long as you document where it's set.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Thu Aug 08, 2013 4:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But what types does <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">std::make_tuple</tt> use? How does it know to make char instead of int? Or is one implicit conversion happening?</div>Yes, a tuple can be converted into another one if the types of the rhs can be converted to the types of the lhs.<br /><br />On the topic of OO, I find too many people using getter/setter for <em>every</em> attributes in classes; also, I prefer:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />&nbsp; &nbsp; &nbsp; double radius() const;<br />&nbsp; &nbsp; &nbsp; void radius(double r);<br />...</div>much more than<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />&nbsp; &nbsp; &nbsp; double getRadius() const;<br />&nbsp; &nbsp; &nbsp; void setRadius(double r);<br />...</div><br />which is more typing and more verbose for nothing. Because of my preference in the naming of getters/setters, as a convention I put trailing underscores in attribute names, so they don't clash with method names.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>