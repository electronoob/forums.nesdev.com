<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - bit-shifting and ANDing(masking)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">bit-shifting and ANDing(masking)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3741">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3741</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Thu Nov 29, 2007 8:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />I must stress again, though, that AND can only be used in this way when you want to mod by a power-of-2 value.  The reason for this is because there can't be "gaps" in the bits you're ANDing.  For an example:<br /><br />$17 mod $0A = $03<br /> because:<br />   $17 - (($17 / $0A) * $0A) = $03<br /><br /></div>
<br />
<br />i tried that expresion in PCalc and it played dead "#17 - ( ( #17 / #0A ) * #0A )"
<br />got no result. (#denotes hex in PCalc, according to the instructions)
<br />is that expresion the modulo formula or something?
<br />i understand modulo(i thought i did) and have used it plenty of times in programming and dataflow applications(i don't want you guys to type something that might not be necessary) so masking is just a fancy name for 1 if 1==1(ANDing)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Thu Nov 29, 2007 8:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Think of the equivalent in decimal. You want to get the ones digit of a value. So you divide by 10 and take the remainder. Another way is to keep only the last digit.<br /><br />  1234 / 10 gives remainder of 4<br />  0004  there's the 4<br /><br />If you want to find the remainder after 100, keep the last 2 digits<br /><br /> 1234 / 100 gives remainder of 34<br /> 0034 there's the 34<br /><br />If you instead wanted the remainder after dividing by 9, you wouldn't be able to use this shortcut. So with base 10, you can use it only if your divisor is a power of 10. With base 2, you can use it only if your divisor is a power of 2.</div>
<br />
<br />ahh that's a good way to look at it. ease on the brain.  man i've been a lazy thinker ever since i've moved to this state <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jargon</b> [ Mon Dec 10, 2007 10:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />EOR is the same as XOR,
<br />
<br />it means exclusive or.
<br />
<br />perhaps this chart i frickin had to REMAKE DUE TO LOSING THE ORIGINAL FILE....
<br />
<br />will assist you <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br /><a href="http://mediaplague.com/gallery/jargon/posters/boolean%20beakers%20poster.gif" class="postlink">Timothy Robert Keal's Boolean Beakers Poster</a>
<br />
<br /> <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />
<br />
<br />i remade it using GIMP 2.2.17
<br />
<br />the original version which is now lost to the ages i had made using PhotoShop.
<br />
<br />btw as i mentioned elsewhere in this board:
<br />
<br />On most systems:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Logical Input: NULL is zero and Identity is non-zero.<br />Logical Output: NULL is zero and Identity is 1.<br /></div><br /><br />However in BASIC-A, GW-BASIC, Quick BASIC, and Visual Basic(?):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Logical Input: NULL is zero and Identity is non-zero.<br />Logical Output: NULL is zero and Identity is all bits set.<br /></div><br /><br />Bitwise works the same on all systems for integers:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Each bit offset is paired individually.<br />Bitwise Input: Either the bit in each input mask is off &#40;NULL&#41; or on &#40;Identity&#41;.<br />Bitwise Output: Either the bit in the output mask is off &#40;NULL&#41; or on &#40;Identity&#41;.<br /></div>
<br />
<br />Bitwise however when using IEEE Floating Precision Values does not exist on nearly all systems, at-least not natively.
<br />
<br />Using bitwise operations on IEEE Floating Precision Values generally is a bad idea, as some combination of bits will corrupt the encoding.
<br />
<br /><img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />
<br />
<br />By the way, the chart I made illustrates examples using *Bitwise* Boolean Operations in the programming language 'C'.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Dec 11, 2007 12:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not understanding your boolean logic poster at all. Can you explain it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jargon</b> [ Wed Dec 12, 2007 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />%0000 thru %1111 is the binary truth table for each boolean operation.
<br />
<br />NULL is FALSE
<br />Identity is TRUE.
<br />
<br />the water in the beaker is neither a nor b (%0001)
<br />the orange represents input b. (%0010)
<br />the apple represents input a. (%0100)
<br />the purple overlap between the apple and orange is %1000 in the truth table.
<br />
<br />a is %1100 when including the overlap and a in the venn diagram.
<br />notice in a beaker of only water and an apple this is %10
<br />in a beaker of only water and an orange this is %10 too.
<br />
<br />notice with evey added fruit (circle) into the venn diagram the amount of digits in the binary mask doubles and all existing bits are repeated next to itself once more.
<br />
<br />so %0, %00, %0000 are all FALSE,
<br />and %1, %11, %1111 are all TRUE.
<br />
<br />%10 and %1100 are both a
<br />and %01 and %0011 are both not a.
<br />
<br />likewise %1100 is a while %1010 is b
<br />
<br />likewhise %0100 is just a, while %0010 is just b
<br />
<br />also %1000 is both a and b, but not one or the other by themself.
<br />
<br />
<br />the result of the logic operand is simply ((%mask &gt;&gt; %b) &gt;&gt; (%a&lt;&lt;1)) &amp; %1
<br />
<br />where a and b are either one or zero. each
<br />
<br />with bitwise operations you perform that using each coupling of the bits for a,b outputting to the same bit offset.
<br />
<br />this expands to:
<br />%11110000 which is a for 3 inputs
<br />%11001100 which is b for 3 inputs
<br />
<br />also note:
<br />%11001010 which is c for 3 inputs
<br />
<br />for 3 inputs it goes:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">high bit: 2 to power 7 &#40;128&#41;: all a,b,c<br />2 to 6 &#40;64&#41;: both a,b<br />2 to 5 &#40;32&#41;: both a,c<br />2 to 4 &#40;16&#41;: just a<br />2 to 3 &#40;8&#41;: both b,c<br />2 to 2 &#40;4&#41;: just b<br />2 to 1 &#40;2&#41;: just c<br />low bit: 2 to power 0 &#40;1&#41;: none of a,b,c<br /></div>
<br />
<br />this also expands to %111111110000000 which is a for 4 inputs
<br />
<br />and so on.
<br />
<br />it follows a very predictable pattern of permutations.
<br />
<br />if you dump all the operations in order, counting values for last input to first input (a), it acts as a perfect clock counter.
<br />
<br />for example:
<br />
<br />%0000 thru %1111
<br />
<br />dumps as %0 thru %11111111
<br />
<br />basically adds the dimension c.
<br />
<br />you can recurse this once more in order to add the dimension d. (%0 thru %1111111111111111)
<br />
<br />and so on.
<br />
<br />hope this helps blargg. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />that is basically the grand unified ring theory of boolean logic in a nutshell.
<br />
<br />%0000 thru %1111 basically map to a logic cube, that is a hypercube with each bit as an axis, each segment being 1 bit in length.
<br />
<br />false/true is basically a one bit long line segment. being a beaker either with or without water.
<br />
<br />false,!a,a,true is basically a square with one bit long line segments. being a beaker either with or without water, with or without an apple.
<br />
<br />my poster shows 16 possibilities, and 16 operations has 4 bit truth tables, that being a venn diagram of two overlapping circles master card logo style, of which produces a cube centered in another cube with all nearest vertices connected of which each vertice a beaker containing water or not containing water, containing a partial apple or not containing a partial apple, containing a partial orange or not containing a partial orange, or containing a merged apple and orange or not containing a merged apple and orange, of which each segment is 1 bit long, for a total of 16 vertices and 32 segments <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> each neighbor vertice is only different by a single bit in its truth table. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />i came up with a c code generator for each truth table set called Seles in 2002, using this permutation ring theory i call Morsyl.
<br />
<br />however Seles got corrupted and no longer works.
<br />
<br />i attempted to use Seles to reverse engineer the S-DD1 conversions between input and output for Star Ocean and Street Fighter Alpha 2, but the only existing dumps from Seles are for Star Ocean, and only contain the final output in each part of the dump.
<br />
<br />it should have dawned on me that S-DD1 had to have used barrel shifting due to the massive size of the dumps.
<br />
<br />my final goal was to combine the two models it produced in order to spawn a common conversion for the two games, however the emulator itself if compiled, would have been uncountably larger than the zSNES emulator, the star ocean/street fighter alpha 2 S-DD1 output, and the star ocean/street fighter alpha 2 roms combined.  <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />
<br />
<br />it would prolly have compiled as a binary larger than the entire storage space of all of the net at the time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Tue Feb 12, 2008 5:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ok,
<br />so i've been messing around with 6502 Simulator and decided to do some shifting and masking practice(it's been a while)
<br />
<br />and i'm getting some results that don't look right, when i asked someone on #nesdev about it, he said it was wrong too.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//code<br />;<br />; Test shifting<br />;<br />&nbsp;<br />&nbsp; &nbsp;.ORG $200<br />&nbsp;<br />&nbsp;<br />&nbsp; &nbsp;LDA #$F0<br />&nbsp; &nbsp;STA no1<br />&nbsp; &nbsp;LSR no1<br />&nbsp; &nbsp;LDA no1<br />&nbsp;<br />&nbsp; &nbsp;BRK<br />&nbsp;<br />no1:&nbsp; &nbsp;.DB $00<br />&nbsp;<br />&nbsp;<br />//result<br />0200&nbsp; A9 F0&nbsp; &nbsp; &nbsp;LDA #$F0&nbsp; &nbsp; &nbsp; &nbsp;A:00 X:00 Y:00 F:20 S:1ff <br />0202&nbsp; 8D 0D 02&nbsp; STA $020D&nbsp; &nbsp; &nbsp; A:f0 X:00 Y:00 F:a0 S:1ff <br />0205&nbsp; 4E 0D 02&nbsp; LSR $020D&nbsp; &nbsp; &nbsp; A:f0 X:00 Y:00 F:a0 S:1ff <br />0208&nbsp; AD 0D 02&nbsp; LDA $020D&nbsp; &nbsp; &nbsp; A:f0 X:00 Y:00 F:20 S:1ff <br />020B&nbsp; 00&nbsp; &nbsp; &nbsp; &nbsp; .DB $00&nbsp; &nbsp; &nbsp; &nbsp; A:78 X:00 Y:00 F:20 S:1ff<br /></div>
<br />
<br />any input would be greatly appreciated

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Tue Feb 12, 2008 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmm, maybe it was my sintax or it was right..
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//code<br />;<br />; Test shifting<br />;<br />&nbsp;<br />&nbsp; &nbsp;.ORG $200<br />&nbsp;<br />&nbsp;<br />&nbsp; &nbsp;LDA #$F0<br />&nbsp; &nbsp;LSR <br />&nbsp; &nbsp;STA no1<br />&nbsp;<br />&nbsp; &nbsp;BRK<br />&nbsp;<br />no1:&nbsp; &nbsp;.DB $00<br />&nbsp;<br />//result<br />0200&nbsp; A9 F0&nbsp; &nbsp; &nbsp;LDA #$F0&nbsp; &nbsp; &nbsp; &nbsp;A:00 X:00 Y:00 F:20 S:1ff <br />0202&nbsp; 4A&nbsp; &nbsp; &nbsp; &nbsp; LSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:f0 X:00 Y:00 F:a0 S:1ff <br />0203&nbsp; 8D 08 02&nbsp; STA $0208&nbsp; &nbsp; &nbsp; A:78 X:00 Y:00 F:20 S:1ff <br />0206&nbsp; 00&nbsp; &nbsp; &nbsp; &nbsp; .DB $00&nbsp; &nbsp; &nbsp; &nbsp; A:78 X:00 Y:00 F:20 S:1ff<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Feb 12, 2008 8:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Both are correct. $F0 = %11110000. $78 = %01111000. LSR shifts bits right and fills the left bit with 0. BTW, you don't need to store A at all, just do LDA #$F0 then LSR, and look at the value of A afterwards.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Wed Feb 13, 2008 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Both are correct. $F0 = %11110000. $78 = %01111000. LSR shifts bits right and fills the left bit with 0. BTW, you don't need to store A at all, just do LDA #$F0 then LSR, and look at the value of A afterwards.</div>
<br />
<br />hmm it seems that it just took longer for the operation to affect the accumulator with the extra stuff in there.
<br />
<br />thanks <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Feb 13, 2008 12:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">hmm it seems that it just took longer for the operation to affect the accumulator with the extra stuff in there.</div>
<br />Nope, look more closely. The register values shown after the instruction are BEFORE the instruction executes, not after. Look at the LDA #$F0 for example.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Wed Feb 13, 2008 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">hmm it seems that it just took longer for the operation to affect the accumulator with the extra stuff in there.</div><br />Nope, look more closely. The register values shown after the instruction are BEFORE the instruction executes, not after. Look at the LDA #$F0 for example.</div>
<br />that's my point. in <a href="http://nesdev.com/bbs/viewtopic.php?p=30823#30823" class="postlink">this</a> post's code, the effects of the LSR don't seem to happen until 2 more lines of code

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Feb 13, 2008 2:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Laserbeak43 wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">hmm it seems that it just took longer for the operation to affect the accumulator with the extra stuff in there.</div><br />Nope, look more closely. The register values shown after the instruction are BEFORE the instruction executes, not after. Look at the LDA #$F0 for example.</div><br />that's my point. in <a href="http://nesdev.com/bbs/viewtopic.php?p=30823#30823" class="postlink">this</a> post's code, the effects of the LSR don't seem to happen until 2 more lines of code</div>
<br />In that post, your are LSRing a byte in memory, so the effect will never show in the register display on the right until you load it into a register. Isn't this documented anywhere?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Wed Feb 13, 2008 4:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i dunno, i'm slow and only truly learn with practice  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Sat Sep 27, 2008 6:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i have no idea why i made this so complicated. after this thread ended i left with some understanding, but when i was asked to do and masking on the board the other day it really clicked, and I imediately though of nesdev and became so embarrased. so i thought i'd come here and make fun of myself. wow i can't believe i made such a big deal about it. it's probably me being stubborn insisting that it be harder than it is....

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Sep 27, 2008 12:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh god, if only you could've seen it when I first came here. I've actually read some of my old topics and I had to stop because I was so embarrassed at my attitude/tone. I made things way more complicated than they needed to be. I give one big apology and a thank you to those who dealt with me during that time =). I'm surprised I wasn't banned! XD

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>