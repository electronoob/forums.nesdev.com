<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=12296" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-01-30T18:53:16-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=12296</id>
<entry>
<author><name><![CDATA[Tsutarja]]></name></author>
<updated>2015-01-25T23:22:31-07:00</updated>
<published>2015-01-25T23:22:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139919#p139919</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139919#p139919"/>
<title type="html"><![CDATA[Re: A few questions from a 6502 Assembly noob]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139919#p139919"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I don't see anything wrong with what Pokun said. The only reason the PPU has this idle time is because the TVs (well, old ones) need time to move the electron beam back to the top left corner of the screen after each picture is displayed. It's not &quot;leftover&quot; time, the PPU intentionally &quot;rests&quot; during that time so that the programmer can manipulate VRAM, since the TV isn't drawing anything at that time anyway.<br /></div><br /><br />I see, well I have never heard anyone mention the TV's relation to the PPU any more than just saying that the PPU sends the video signal to it.<br />Also, the &quot;leftover time&quot; I mentioned, is what I meant when you explained it as &quot;rest&quot;. Maybe I just chose a wrong word to describe it...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6724">Tsutarja</a> — Sun Jan 25, 2015 11:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-01-25T23:05:00-07:00</updated>
<published>2015-01-25T23:05:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139917#p139917</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139917#p139917"/>
<title type="html"><![CDATA[Re: A few questions from a 6502 Assembly noob]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139917#p139917"><![CDATA[
<div class="quotetitle">Tsutarja wrote:</div><div class="quotecontent"><br />Not the TV, it's the PPU. VBlank is the leftover time from each frame where the PPU has done rendering that frame.<br /></div><br />I don't see anything wrong with what Pokun said. The only reason the PPU has this idle time is because the TVs (well, old ones) need time to move the electron beam back to the top left corner of the screen after each picture is displayed. It's not &quot;leftover&quot; time, the PPU intentionally &quot;rests&quot; during that time so that the programmer can manipulate VRAM, since the TV isn't drawing anything at that time anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Jan 25, 2015 11:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Tsutarja]]></name></author>
<updated>2015-01-25T22:19:58-07:00</updated>
<published>2015-01-25T22:19:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139911#p139911</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139911#p139911"/>
<title type="html"><![CDATA[Re: A few questions from a 6502 Assembly noob]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139911#p139911"><![CDATA[
<div class="quotetitle">Pokun wrote:</div><div class="quotecontent"><br />The NMI is designed this was so that you know when the TV is in vertical blanking, and it's OK to update graphics.<br /></div><br /><br />Not the TV, it's the PPU. VBlank is the leftover time from each frame where the PPU has done rendering that frame. The article from Nesdev wiki I posted to my post above explains this very well.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6724">Tsutarja</a> — Sun Jan 25, 2015 10:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Pokun]]></name></author>
<updated>2015-01-30T18:53:16-07:00</updated>
<published>2015-01-25T12:17:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139876#p139876</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139876#p139876"/>
<title type="html"><![CDATA[Re: A few questions from a 6502 Assembly noob]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139876#p139876"><![CDATA[
<div class="quotetitle">AlienX wrote:</div><div class="quotecontent"><br />What is the chronological path of this code and why does it work differently than in any other languages, I've used? (They are high-level, but I don't think it should make that big a difference).<br /></div>As others has explained it's about interrupts. The code normally behaves as you expect but if NMI are enabled, every 60th of a second the program counter will stop where it is, jump to your NMI vector, run that code that you put there and finally jump back to wherever it was before the interrupt happened.<br /><br />The NMI is designed this way so that you know when the TV is in vertical blanking, and it's OK to update graphics.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6013">Pokun</a> — Sun Jan 25, 2015 12:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Tsutarja]]></name></author>
<updated>2015-01-25T10:21:23-07:00</updated>
<published>2015-01-25T10:21:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139871#p139871</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139871#p139871"/>
<title type="html"><![CDATA[Re: A few questions from a 6502 Assembly noob]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139871#p139871"><![CDATA[
Adding to what tokumaru said:<br /><br />1. You <em>can</em> update outside NMI, but <strong>you need to turn off the PPU</strong> with the PPU Mask register <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$2002</tt>. Some games uses this type of &quot;bulk drawing&quot; in transitions between levels and such, since the screen goes black when you turn off the PPU. However, most of the graphical updates still should be done in NMI. That's why we have it after all.<br /><br />I'd suggest you read <a href="http://wiki.nesdev.com/w/index.php/The_frame_and_NMIs" class="postlink">this</a>. It helped me a lot trying to understand NMIs and how the PPU works. I had the exact same issues after reading Nerdy Nights as you did, but I don't now if there are any better tutorials. Read bunch of articles around Nesdev's wiki section. I'm sure they will be a big help.<br /><br />2. A good way to update any PPU data is to set up some variables in your game logic for the NMI to use to define things like:<br />-Does this specific data need updating (if not, branch over that section)<br />-Starting address of where you start storing data with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$2007</tt> (two stores to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$2006</tt> after resetting  the latch by reading <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$2002</tt>)<br />-Where the data to be stored to the PPU is located (starting RAM or ROM address depending on whether you have buffered the data or not)<br />-How many bytes you want to store (simple counter to count down by one after every stored byte)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6724">Tsutarja</a> — Sun Jan 25, 2015 10:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-01-25T09:06:57-07:00</updated>
<published>2015-01-25T09:06:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139867#p139867</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139867#p139867"/>
<title type="html"><![CDATA[Re: A few questions from a 6502 Assembly noob]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139867#p139867"><![CDATA[
<div class="quotetitle">AlienX wrote:</div><div class="quotecontent"><br />1. Do all the graphic updates have to happen in the NMI section?<br /></div><br />Yes. The NMI fires when VBlank starts, and the vertical blank is the time when the PPU is &quot;resting&quot;, and not accessing graphics, which means you are free to modify them.<br /><br />You can (and should) however calculate all the data you need to change beforehand and buffer it, so that during VBlank you can blast those buffers into VRAM, instead of wasting precious VBlank time calculating stuff.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So, in his example code, BunnyBoy adds these two Vblankwait loops. From what I understand, every time the screen is being drawn, these loops check if that is happening, and if it is, they keep looping until there's a VBlank (or VBI).<br /></div><br />No, these VBlank waits are part of the initialization code and run only once, when the program first starts. When the console is powered on, the PPU has some internal initialization of its own, so you gotta wait a couple frames before it's ready to be used.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I wonder, when the RTI function is executed, does the CPU go back to the Vblankwait loops?<br /></div><br />No. It probably goes back to an empty loop that runs forever, located after the initialization code. It looks something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Forever: jmp Forever</div><br />Looks weird, but when the whole logic is in the NMI handler, the main thread doesn't have anything to do, so it sits in an empty loop that never ends.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Where does the RTI function lead to? What is the chronological path of this code<br /></div><br />First the initialization runs, cleaning up the room before the game starts and initializing everything that won't be changing every frame. At this time, the PPU is requested to fire IRQs every time VBlank starts, which makes the NMI handler a handy place to put your PPU updates and perform periodical tasks, since VBlanks occur at steady 60Hz (60 times per second).<br /><br />Once the NMIs are enabled, and the NMI handler will take care of both graphical updates and game logic, the main thread doesn't have anything else to do and enters an infinite loop.<br /><br />Note that this was a design decision made by the person writing the tutorial. There are other setups that involve dividing the work between the main thread (game logic) and NMIs (PPU updates), or using only the main thread (NMIs are only used to signal the start of VBlank). Eachmethod has advantages and disadvantages, and programmers often pick the one they're most comfortable with.<br /><br />The CPU will then be stuck in this endless loop doing nothing, bur 60 times per second this loop will be interrupted and the NMI handler will run. The RTI at the end of it causes the CPU to go back to the endless loop, where it waits for the next interruption, when the NMI handler will run again. This will repeat forever, and the NMI handler is responsible for updating the game state and the graphics by 1 frame each time it's called.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />2. When writing values to the palettes, do you have to write all the values?<br /></div><br />No, you can as many/few colors as you'd like. Just write the address of the first color you want to change to $2006 and write the new colors to $2007. This is true for the name tables as well, you can change a few individual tiles if you want to.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Jan 25, 2015 9:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AlienX]]></name></author>
<updated>2015-01-25T08:26:56-07:00</updated>
<published>2015-01-25T08:26:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139862#p139862</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139862#p139862"/>
<title type="html"><![CDATA[A few questions from a 6502 Assembly noob]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12296&amp;p=139862#p139862"><![CDATA[
So, I've been reading BunnyBoy's &quot;Nerdy Nights&quot; tutorials, to learn the basics of 6502 NES Assembly. Everything, featured in the tutorials works great, when I compile the code. However, when I try to experiment, things don't work out at all, for the most part. So, I hope I can get some answers. <br />(Note: I'm on a different computer right now, so unfortunately I can't show any of the code I've written by now. I hope I can explain the problems well.  <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /> )<br /><br />1. Do all the graphic updates have to happen in the NMI section?<br />So, in his example code, BunnyBoy adds these two Vblankwait loops. From what I understand, every time the screen is being drawn, these loops check if that is happening, and if it is, they keep looping until there's a VBlank (or VBI). Then the rest of the code executed. I wonder, when the RTI function is executed, does the CPU go back to the Vblankwait loops? If that's so, then judging by the code, the CPU's RAM would get wiped every frame and it would establish the same colors and sprite positions every single time. But if that was so, how would the sprites be able to move? Is the code executed only once? That would explain why when I try to establish new positions for three other sprites, based on sprite 0's position, it doesn't work in the regular sections, yet it does only in the NMI section. But why? Where does the RTI function lead to? What is the chronological path of this code and why does it work differently than in any other languages, I've used? (They are high-level, but I don't think it should make that big a difference) None of this stuff is explained in the tutorials, so I hope someone can give me a straight-forward explanation.<br /><br />2. When writing values to the palettes, do you have to write all the values?<br />Let's say I just want change one color from the background palette. I write down all the code, telling the CPU to write values to the PPU. Once I start putting in color values, do I have to write every single color for both palettes, or can I just write the value for the first color and then start doing something else?<br /><br />There may be more questions in the future. Sorry if they sounded (or looked) like ramblings. Right now, I hope I can get these answered, since they're vital. What BunnyBoy explains in his tutorials, he explains well. What he doesn't explain... he doesn't explain. This can create some knowledge holes, that will bite a future NES programmer in the ass one day.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6484">AlienX</a> — Sun Jan 25, 2015 8:26 am</p><hr />
]]></content>
</entry>
</feed>