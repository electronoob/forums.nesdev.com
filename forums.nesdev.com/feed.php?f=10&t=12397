<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=12397" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-02-18T09:37:06-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=12397</id>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2015-02-18T09:37:06-07:00</updated>
<published>2015-02-18T09:37:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141459#p141459</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141459#p141459"/>
<title type="html"><![CDATA[Re: Odd / Even issue]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141459#p141459"><![CDATA[
Small suggestion: <br />Use a ROR then branch on the carry to check bit 0. (Unless it helps you later to have the result of that test in the accumulator.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Wed Feb 18, 2015 9:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[JoeGtake2]]></name></author>
<updated>2015-02-17T14:24:24-07:00</updated>
<published>2015-02-17T14:24:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141402#p141402</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141402#p141402"/>
<title type="html"><![CDATA[Re: Odd / Even issue]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141402#p141402"><![CDATA[
Thanks - yeah...as soon as I looked at it posted I chuckled.  Wow.  I've been looking at code too long today, that's the ultimate sign.  haha.<br /><br />Thanks for the input, though!  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" />  Glad to know my method isn't completely crazy.  haha<br /><br />3. And yeah, the actual code has an RTS there.  Thanks!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6590">JoeGtake2</a> — Tue Feb 17, 2015 2:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2015-02-17T14:21:01-07:00</updated>
<published>2015-02-17T14:21:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141401#p141401</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141401#p141401"/>
<title type="html"><![CDATA[Re: Odd / Even issue]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141401#p141401"><![CDATA[
Three things:<br /><br />1. ASL is for multiplication, LSR is for divide.  Your comment says divide by, but you're using ASL.  Think about what does bit-wise.  ASL means shift LEFT, e.g. starting with a value of 2:<br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">%00000010 &#40;2&#41; &lt;&lt; 1 == %00000100 &#40;4&#41;</tt><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">%00000100 &#40;4&#41; &lt;&lt; 1 == %00001000 &#40;8&#41;</tt><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">%00001000 &#40;8&#41; &lt;&lt; 1 == %00010000 &#40;16&#41;</tt><br />...etc..<br /><br />LSR is the opposite of that.<br /><br />2. Your lda/and/beq is correct -- meaning it does exactly what your comments say it does.  It masks off bits 7-1, leaving bit 0 intact. If the result is 0, then the beq will be taken, otherwise it won't be.  Where I come from ( :-) ), 0 == even number, 1 == odd number.<br /><br />3. Don't forget that the code that runs if the beq isn't taken needs to have a jmp or bra or rts or something to ensure the code under itIsEven doesn't get run.  You probably know this but just want to make sure since the code in question doesn't show it (probably just a quick copy/paste job, no biggie).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Tue Feb 17, 2015 2:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[JoeGtake2]]></name></author>
<updated>2015-02-17T14:15:28-07:00</updated>
<published>2015-02-17T14:15:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141400#p141400</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141400#p141400"/>
<title type="html"><![CDATA[Odd / Even issue]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12397&amp;p=141400#p141400"><![CDATA[
So for this one part of my collision detection routine, I am essentially trying to find out where the point of contact will be on the 8x8 px grid, and then compare it to bits 7-4 of the tile byte, which represents a 16x16px area (each bit corresponding to a 'quadrant').  Seems pretty logical.<br /><br />The method was to get the tile info on the 16x16px grid (working fine) and then load the newPosition data on a 32x32px grid and determine whether the position falls on an even numbered tile or odd numbered tile on that grid, which will determine whether to look at bytes 7 and 6 or 5 and 4 for horizontal collision data.<br /><br />So I do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />     LDA newPositionX   ; x position of player + playerSpeed...the new potential position<br />     ASL A                      ; divide by 32 to get spot on the 8px grid<br />     ASL A<br />     ASL A<br />     ASL A<br />     ASL A<br />     STA tileCollsionX   ; store it into this variable<br /><br />........<br /><br /><br />     LDA tileCollisionX ; load the variable<br />     AND #%00000001 ; 'zero' all the bits except the last one<br />                                   ;logically, a zero and one AND witha resulting zero, so<br />                                   ;if the last bit is zero, this will return zero...if it's one, this will return one.<br />     BEQ itIsEven           ; if the last bit is zero, that means it must be aligned on an even tile.  If a 1, an odd tile. <br />     ;;do whatever if it is odd.<br />itIsEven:<br />     ;;do whatever if it is even.<br /><br /></div><br /><br /><br />...however, this ALWAYS seems to return even.  Anyone see a fundamental problem with my understanding here?<br /><br /><br /><br />EDIT:  Wow....nevermind.  All I needed to do was 'write it out' to figure out that should be LSR and not ASL.  *smacks forehead*<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6590">JoeGtake2</a> — Tue Feb 17, 2015 2:15 pm</p><hr />
]]></content>
</entry>
</feed>