<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Super Mario Brother Infinite Loop at: LDA $2000, BPL ....</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Super Mario Brother Infinite Loop at: LDA $2000, BPL ....</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=4891">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=4891</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Thu Feb 26, 2009 4:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now I'm going deeper thanks you all !
<br />Soon I'll be back here to post MANY others questions!
<br />For those that wanna see the project is on <!-- m --><a class="postlink" href="http://code.google.com/p/jnesbr/">http://code.google.com/p/jnesbr/</a><!-- m --> .

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Sat Feb 28, 2009 6:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ASM Super Mario Brothers 1 
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0x8000:&nbsp; &nbsp;SEI&nbsp; &nbsp;;<br />0x8001:&nbsp; &nbsp;CLD&nbsp; &nbsp;;<br />0x8002:&nbsp; &nbsp;LDA #$10&nbsp; &nbsp;;<br />0x8004:&nbsp; &nbsp;STA $2000&nbsp; &nbsp;;<br />0x8007:&nbsp; &nbsp;LDX #$FF&nbsp; &nbsp;;<br />0x8009:&nbsp; &nbsp;TXS&nbsp; &nbsp;;<br />0x800A:&nbsp; &nbsp;LDA $2002&nbsp; &nbsp;;<br />0x800D:&nbsp; &nbsp;BPL&nbsp; &nbsp;;<br />0x800A:&nbsp; &nbsp;LDA $2002&nbsp; &nbsp;;<br />0x800D:&nbsp; &nbsp;BPL&nbsp; &nbsp;;<br />0x800A:&nbsp; &nbsp;LDA $2002&nbsp; &nbsp;;<br />0x800D:&nbsp; &nbsp;BPL&nbsp; &nbsp;;<br />0x800A:&nbsp; &nbsp;LDA $2002&nbsp; &nbsp;;<br />0x800D:&nbsp; &nbsp;BPL&nbsp; &nbsp;;<br />0x800F:&nbsp; &nbsp;LDA $2002&nbsp; &nbsp;;<br />0x8012:&nbsp; &nbsp;BPL&nbsp; &nbsp;;<br />0x8014:&nbsp; &nbsp;LDY #$FE&nbsp; &nbsp;;<br />0x8016:&nbsp; &nbsp;LDX #$5&nbsp; &nbsp;;<br />0x8018:&nbsp; &nbsp;LDA $07D7 ,X &nbsp; &nbsp;;<br />0x801B:&nbsp; &nbsp;CMP #$0A&nbsp; &nbsp;;<br />0x801D:&nbsp; &nbsp;BCS&nbsp; &nbsp;;<br />0x802B:&nbsp; &nbsp;JSR $90CC&nbsp; &nbsp;;<br />0x90CC:&nbsp; &nbsp;LDX #$7&nbsp; &nbsp;;<br />0x90CE:&nbsp; &nbsp;LDA #$0&nbsp; &nbsp;;<br />0x90D0:&nbsp; &nbsp;STA $06&nbsp; &nbsp;;<br />0x90D2:&nbsp; &nbsp;STX $07&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;</div><br /><br />Now my code seems to works better...<br />My question now is in most of CMP (comparison ... x , y ...)<br />I'm setting my flags in this way...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cpu.setupFlagSign&#40;cpu.accumulator - getOperand&#40;&#41;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.setupFlagZero&#40;cpu.accumulator - getOperand&#40;&#41;&#41;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.flagCarry =&#40;cpu.accumulator - getOperand&#40;&#41; &lt; 0x100&#41; ? 1 : 0&#41;;<br /></div>        <br /><br />I'm doing it correct? <br />I can care about carry flag always like that?<br /><br />The game seems to be in another loop but this time I can't see why it don't go out the loop... I believe that this part is waiting to decay the Y register one by one until zero...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0x802B:&nbsp; &nbsp;JSR $90CC&nbsp; &nbsp;;<br />0x90CC:&nbsp; &nbsp;LDX #$7&nbsp; &nbsp;;<br />0x90CE:&nbsp; &nbsp;LDA #$0&nbsp; &nbsp;;<br />0x90D0:&nbsp; &nbsp;STA $06&nbsp; &nbsp;;<br />0x90D2:&nbsp; &nbsp;STX $07&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$45&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$9D&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$6&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$B1&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$C8&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$3&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$44&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$9D&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$6&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$B1&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$0&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$A6&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$A8&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$2&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$65&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$A&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />0x90D6:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90DC:&nbsp; &nbsp;STA &#40;$1&#41;,Y&nbsp; &nbsp;;<br />0x90DE:&nbsp; &nbsp;DEY&nbsp; &nbsp;;<br />0x90DF:&nbsp; &nbsp;CPY #$FF&nbsp; &nbsp;;<br />0x90E1:&nbsp; &nbsp;BNE&nbsp; &nbsp;;<br />0x90D4:&nbsp; &nbsp;CPX #$01&nbsp; &nbsp;;<br />...</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Feb 28, 2009 8:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why does the operand byte differ every time this instruction is executed?
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0x90DC:&nbsp; &nbsp;STA &#40;$45&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$9D&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$6&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$B1&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$C8&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$3&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$44&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$9D&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$6&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$B1&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$0&#41;,Y<br /></div>
<br />Perhaps you just need to <strong>ram</strong> your head into the wall until the purpose of this loop becomes <strong>clear</strong>. (You'll understand what that means later, once you've figured out why the operand dffers.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Feb 28, 2009 10:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're planning on using that as a recompilable disassembly, you have a major problem. I was recently working on a sort of homemade disassembler for myself (which maybe I'll release, but it might be worthless to others), and I used an offered "hex()" function which of course, displayed a value in hex. However, if the number was less than $10, it would display as $F, and not $0F. It didn't seem like it mattered at first, but it could prove to be a horrible disaster. In my disassembly, if there was ever an LDA $Absolute statement where the 16-bit address was say $0023, it would show up as LDA $23, which if you re-assembled it would prove to be interpreted as LDA $ZeroPage. And then the code would shifted back one byte because LDA ZP takes 2 bytes when LDA Absolute takes 3. Just thought I'd mention it.
<br />
<br />So just make sure you're forcing your hex numbers to display at a constant width. Either 2 or 4 hex digits, depending on if it's ZP or Absolute.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Feb 28, 2009 10:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Celius, I don't think this matters to him. He seems to be trying an emulator development strategy where he uses a single game (in this case, SMB1) and tries to fix whatever is wrong until the game runs. Those are just logs from his emulator, that he uses to detect strange behavior.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Sun Mar 01, 2009 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Why does the operand byte differ every time this instruction is executed?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0x90DC:&nbsp; &nbsp;STA &#40;$45&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$9D&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$6&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$B1&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$C8&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$3&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$44&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$9D&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$6&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$B1&#41;,Y<br />0x90DC:&nbsp; &nbsp;STA &#40;$0&#41;,Y<br /></div><br />Perhaps you just need to <strong>ram</strong> your head into the wall until the purpose of this loop becomes <strong>clear</strong>. (You'll understand what that means later, once you've figured out why the operand dffers.)</div>
<br />
<br />Thanks Man I'll remember you... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Sun Mar 01, 2009 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Celius, I don't think this matters to him. He seems to be trying an emulator development strategy where he uses a single game (in this case, SMB1) and tries to fix whatever is wrong until the game runs. Those are just logs from his emulator, that he uses to detect strange behavior.</div>
<br />You are COMPLETLY rigth!
<br />My aproach is that one.... however I change my game , now I'm trying to use PONG because I've got the asms files too then is easier and I don't need to bother you guys.
<br /><img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> thanks soon more questions.
<br />
<br />ps: about the aproach I guess it is the better one because I can see what I'm doing ... little tests, show something on the screen &gt; this definitivilty helps keep the wish to dev the emu... at least to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Sun Mar 01, 2009 6:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">If you're planning on using that as a recompilable disassembly, you have a major problem. I was recently working on a sort of homemade disassembler for myself (which maybe I'll release, but it might be worthless to others), and I used an offered "hex()" function which of course, displayed a value in hex. However, if the number was less than $10, it would display as $F, and not $0F. It didn't seem like it mattered at first, but it could prove to be a horrible disaster. In my disassembly, if there was ever an LDA $Absolute statement where the 16-bit address was say $0023, it would show up as LDA $23, which if you re-assembled it would prove to be interpreted as LDA $ZeroPage. And then the code would shifted back one byte because LDA ZP takes 2 bytes when LDA Absolute takes 3. Just thought I'd mention it.<br /><br />So just make sure you're forcing your hex numbers to display at a constant width. Either 2 or 4 hex digits, depending on if it's ZP or Absolute.</div>
<br />
<br />Thanks I forgot about that... I just made a method
<br />fillIfNeedsWith(2, "0", operandInHexa);
<br />format with 2 "00" the number <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Sat Mar 07, 2009 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Why does the operand byte differ every time this instruction is executed?</div><br />It was a bug I fix that ! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Perhaps you just need to <strong>ram</strong> your head into the wall until the purpose of this loop becomes <strong>clear</strong>. (You'll understand what that means later, once you've figured out why the operand dffers.)</div>
<br />Exactly as you said... when I figured out why operand differs...
<br /> <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> Now I know thanks for open my eyes, I guess it is Clearing the RAM and another pieces of memory, Am I rigth? 
<br />Why the homebrew PONG.NES clean memory setting 20 ? (ps: Super Mario 1 cleans normaly decreasing the X from 6 to 0 and Y every time from FF to 0.    
<br />
<br />I needed to create a way on my debugger to jump N steps of execution... (later I'll try to build something more professional).
<br />
<br /><a href="http://www.uploadimagens.com/" class="postlink"><img src="http://www.uploadimagens.com/upload/dc470fc8d1c3dc9599f0e01e50490fd6.jpg" alt="Image" /></a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Sat Mar 07, 2009 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The homebrew PONG.nes doesn't works...  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />  rsrsr I've tried it on real and good emulators and nothing happening... 
<br />Did you have one game like pong (without mapper) and source?
<br />[because use super mario is good but the game is "big" to debug]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 07, 2009 3:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could always try <a href="http://pineight.com/nes/#t" class="postlink">Tetramino</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Sat Mar 07, 2009 5:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">You could always try <a href="http://pineight.com/nes/#t" class="postlink">Tetramino</a>.</div>
<br />Thanks so much, I'll use that! which document you could indicate me to PPU ('til now I just mock the PPU behavior) ? (can be a set of best oneS)
<br />
<br />And by the way: I have this sequence on memory:
<br />20 CC 90 8D
<br />
<br />It means: JSR 90CC;
<br />..
<br />..
<br />..
<br />RTS; after execute subrotine...
<br />Now I should execute the 8D (STA $xxxx)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Mar 07, 2009 7:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dreampeppers99 wrote:</div><div class="quotecontent">Now I should execute the 8D (STA $xxxx)?</div>
<br />In this case, yes, the $8D will probably be executed after the RTS, but you shouldn't count on it. Typically, a program will call subroutines (JSR) and return from them (RTS), but assembly is a very free language, and somewhere between the execution of those instruction the stack could be manipulated, in which case the RTS would jump to somewhere else, away from that $8D.
<br />
<br />Just simulate the instructions based on what they actually do. JSR stores the return address to the stack and jumps to the specified location. RTS retrieves an address from the stack and jumps to it. If you simulate it that way, you don't have to worry about nasty stack manipulation tricks, because your emulator will be doing exactly what the 6502 does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dreampeppers99</b> [ Mon Mar 09, 2009 5:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I made JSR like that:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; public void interpret&#40;&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.push&#40;cpu.programCounter + 2 &gt;&gt; 8&#41; &amp; 0xFF&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.push&#40;cpu.programCounter + 2 &amp; 0xFF&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.programCounter = getAbsoluteAddress&#40;&#41;;<br />&nbsp; &nbsp; &#125;</div><br /><br />And RTS like that:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; public void interpret&#40;&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.programCounter = cpu.pull&#40;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.programCounter += &#40;cpu.pull&#40;&#41; &lt;&lt; 8&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.programCounter++;<br />&nbsp; &nbsp; &nbsp; &nbsp; cpu.programCounter &amp;= 0xFFFF;<br />&nbsp; &nbsp; &#125;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Mar 09, 2009 8:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your Java code can't be right.  I'm staring at it and see two errors right off the bat (well, one error for sure, the other depends on what your program is really doing with cpu.programCounter).
<br />
<br />I can assure you that cpu.programCounter + 2 &gt;&gt; 8 is flat out wrong.  Did anyone teach you order of operation?
<br />
<br />I don't think anyone on this forum is going to sit here and write your entire program for you.  Most people here won't sift through lines of actual code, but WILL sift through questions about the 6502 arch, as well as sift through emulator problems that you can describe generally.
<br />
<br />Meaning: no one has any idea what your variables and structs actually do or what's in them when the code is run, so debugging that piece is entirely your responsibility.  :-)
<br />
<br />EDIT: I think you could clear up most of your architecture misconceptions if you took some time to <a href="http://www.65xx.com/wdc/documentation/w65c02s.pdf" class="postlink">read this</a>, though be sure to note it's for the 65C02, so there are some opcodes which the NES does not have (6502 != 65C02).  <a href="http://www.obelisk.demon.co.uk/6502/reference.html#JSR" class="postlink">This</a> might also help you (be sure to read RTS as well).  If none of those make any sense, <a href="http://www.cyberroach.com/analog/an21/boot_camp.htm" class="postlink">try this</a>.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>