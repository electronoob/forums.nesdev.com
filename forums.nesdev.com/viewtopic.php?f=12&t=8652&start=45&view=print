<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - fullsnes - new SNES hardware specs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">fullsnes - new SNES hardware specs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=8652">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=8652</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Thu Apr 26, 2012 8:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hey nocash... I can fill in the blank for some of these multi-tap games for number of players through your documentation.</div><br />Thanks! Most of the list is from wikipedia, <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/SNES_Multitap">http://en.wikipedia.org/wiki/SNES_Multitap</a><!-- m --> (so I wouldn't call it "my" list).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Lemmings 2 supports the super scope for shooting lemmings, but it does not appear to have software calibration.</div><br />Whew, one more rare scope-game. Hmmmm, calibration... it seems to randomly add/subtract different offsets each time when starting the game... ah, got it! Works like so: When the game starts, you need to aim the gun at the crosshair; that needs to be done quickly (within the first 1-2 seconds or so).<br />EDIT: With the black screen background &amp; and thin crosshair, I am wondering if the calibration does actually work on real hardware - did anybody ever try that?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Appearently NOCASH is down, just a notice</div>
<br />Nay, I am not down. And emubase.de... yes, it goes down once every some days... as far as I understood, that problem started after road rented a new server. So, he's still motivated running that site - I only hope he'll get around fixing that problems soon.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Fri Apr 27, 2012 4:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Btw. are there any good SNES schematics or service manuals anywhere?
<br />The "best" SNES schematics seem to be these two:
<br />  <!-- m --><a class="postlink" href="http://neviksti.com/wiki/Schematics">http://neviksti.com/wiki/Schematics</a><!-- m -->
<br />  <!-- m --><a class="postlink" href="http://www.caitsith2.com/snes/snes%20schematic.rar">http://www.caitsith2.com/snes/snes%20schematic.rar</a><!-- m -->
<br />the one one at neviksti seems to be sourced on an ultra-low-quality photo copy (so despite of the ultra-high scanning resolution, most of the text isn't legible).
<br />the one at caitsith2 seems to be something rev-engineered by "electronix corp", but with some fundamental mistakes (like assigning an 18bit databus to the PPU for whatever reason).
<br />
<br />Oh, aside from the scanning-quality problem... are there any schematics for the older SNES (with separate APU daughterboard), or for the later (cost-down) SNES version?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun May 13, 2012 1:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />nocash, I've expanded upon the missing information in the SPC7110 MCU (memory control unit).
<br />
<br />It turns out our current emulation of it is <em>incredibly</em> flawed.
<br />
<br /><!-- m --><a class="postlink" href="http://byuu.org/temp/spc7110-mcu.txt">http://byuu.org/temp/spc7110-mcu.txt</a><!-- m -->
<br />I hope this will be helpful.
<br />
<br />I'm all ears if you have speculation on the pathological handling of data ROM mirroring. And if anyone wants to send me Momtarou Dentetsu Happy or Super Power League 4 to borrow, I can confirm (or deny) the behavior on those cartridges as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Sun May 13, 2012 4:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great! Very nice to see the full memory map &amp; details on bank switching, with used (and unused) bits! Thanks for uploading the txt file!
<br />
<br />&gt; $50:0000-ffff is the DCU (data compression unit) port.
<br />That are was always bugging me. As far as I understand, the whole 64K are just a mirror of port 004800h? And there's no difference if one reads from port 004800h, from memory at 500000h, or 501234h?
<br />
<br />&gt; All SPC7110 cartridges contain 32kbit SRAM
<br />64kbit! 8kbytes. (and when you double the size, guess it'd be 128kbit for the translation?)
<br />
<br />&gt; Data ROM size:
<br />&gt; When 0, bank &amp;= 0 ( 8mbit data ROM.)
<br />&gt; When 1, bank &amp;= 1 (16mbit data ROM.)
<br />&gt; When 2, bank &amp;= 3 (32mbit data ROM.)
<br />&gt; When 3, bank &amp;= 7 (64mbit data ROM.)
<br />&gt; Pathological mirroring behavior:
<br />&gt; If data ROM size = 0 and bank &gt;= 4, reads return 0x00 always.
<br />&gt; If data ROM size = 1 and bank &gt;= 4, reads return 0x00 always.
<br />&gt; If data ROM size = 2 and bank &gt;= 4, reads return 0x00 always.
<br />&gt; If data ROM size = 3 and bank &gt;= 4, reads return bank&amp;3.
<br />The 00h's are probably open-bus (from the Data ROM bus, not the SNES bus) (though FFh would be more common for open bus). Anyways, my guesses would be:
<br />  ROM size=0 --&gt; two 8mbit ROMs  (or open bus if 2nd ROM is missing)
<br />  ROM size=1 --&gt; two 16mbit ROMs (or open bus if 2nd ROM is missing)
<br />  ROM size=2 --&gt; two 32mbit ROMs (or open bus if 2nd ROM is missing)
<br />  ROM size=3 --&gt; one 64mbit ROM
<br />size=2..3 would be useful in case 64mbit ROMs haven't been available at time when making the chip. size 0..1 don't seem to be too useful.
<br />
<br />&gt; Mirroring of $00-3f:8000-ffff, $80-bf:8000-ffff
<br />&gt; Assume ROM offset $200000 is mapped to BANK0.
<br />&gt; Reading from $008000 would return ROM offset $208000
<br />Okay, only upper 32K of the 64K banks... so no real LoROM support.
<br />Quite possible that one of the VCC/GND pins (pin 80..86) allows to select LoROM mode.
<br />
<br />&gt; $4830: BANK0 (#$00 at power on)
<br />&gt; d7: SRAM enable (1 = enable; 0 = disable)
<br />&gt; d6-d3: always 0 when read
<br />&gt; d2-d0: bank select ... has no actual effect
<br />&gt; ... suggests to me that this register was meant to control a
<br />&gt; configuration where a cartridge contained *only* a data ROM,
<br />&gt; and no program ROM whatsoever. However, this behavior is not
<br />&gt; controllable by software, so it appears to be hard-coded to the
<br />&gt; boards themselves.
<br />Would make sense. Might be another possible function for pin 80..86.
<br />
<br />Ah, except, one thing: The SRAM enable bit in the same register! That might suggest that the other bits are SRAM related, too. A sram-size option could be useful, so they won't need different PCBs for each RAM size.
<br />For example, on 32kbyte SRAMs, the second chip-enable (CE2, high=on) is replaced by A13. So, in theory, if you try to select a bigger size via 4830h, SRAM should be disabled in each second 8K-byte bank, like so:
<br />  00:6000-7FFF empty (A13 aka CE2 = low)
<br />  01:6000-7FFF RAM (A13 aka CE2 = high)
<br />  02:6000-7FFF empty (etc.)
<br />  03:6000-7FFF RAM
<br />Maybe I am just dreaming there. I've fiddled with a SA-1 board last week, which lacked such feature; except for the solder pads (near the SA-1's battery) that can be used to manually re-wire CE2, VCC, and address lines for different SRAMs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon May 14, 2012 12:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks. This chip definitely needs the most work of any remaining game coprocessors. It was basically emulated just enough to pass the self-test on first boot, with no effort ever extended to verify true hardware behavior. Not surprising, it's a bit of a bitch to run hardware tests on for your average person :P
<br />
<br />I'm in a tough spot. I really need to work on the FEoEZ English translation, so I can't devote a lot of time to this, but at the same time, we really need the chip emulated right before we start hacking the game up. I despise hacks that wouldn't work on real hardware.
<br />
<br />I suppose I'm going to have to at least do a cursory write+read over the entire register range to find more unmapped bits. The data port unit looks particularly screwy to me. It took me a long time to reduce that from the bit-blender that was the original Snes9X implementation.
<br />
<br />Anyway, I'll post with any additional findings. But I can't promise a total RE effort at the moment.
<br />
<br />&gt; That are was always bugging me. As far as I understand, the whole 64K are just a mirror of port 004800h? And there's no difference if one reads from port 004800h, from memory at 500000h, or 501234h?
<br />
<br />There does not appear to be any difference, no.
<br />Indeed it seems like an absolute waste to me as well. If you need to stream from it, just use a fixed source address DMA.
<br />I was careful to verify the range here, it definitely starts at 50:0000 and ends at 50:ffff.
<br />
<br />Perhaps the SPC7110 designers were unaware of fixed transfer DMA (unlikely), or perhaps a fixed DMA from $4800 doesn't work in some instances (some kind of bus watching behavior? Also unlikely.) Hard to say.
<br />
<br />&gt; 64kbit! 8kbytes. (and when you double the size, guess it'd be 128kbit for the translation?)
<br />
<br />Yes, sorry. Last second correction, I specified it as 8KB, but wanted consistency with ROMs in Mbit size. I've fixed the doc, thanks.
<br />
<br />&gt; The 00h's are probably open-bus (from the Data ROM bus, not the SNES bus)
<br />
<br />That is quite possible. $50:xxxx return 0x00 as well. I'll have to log some SPC7110 DMA transfer addresses so that I can fake one and see what happens.
<br />
<br />&gt; Anyways, my guesses would be:
<br />
<br />Appreciate your insight into speculation as well. You seem to have a better knack at this than me (judging by SFC Box and BS-X Satellaview work), so you're probably more right than me.
<br />
<br />It's unfortunate though that we can't really know for sure unless we get another hardware guy to go at the pins.
<br />But at least we can match the cart behavior.
<br />
<br />&gt; size 0..1 don't seem to be too useful.
<br />
<br />I'm betting they are used in SPL4 (1MB Data ROM) and MDH (2MB Data ROM.)
<br />$4834 as a whole really isn't useful at all. Just don't read out of bounds, and auto-mirror if you do (eg upper address lines not connected to the ROM chip.) No need for manual control of this.
<br />
<br />&gt; Quite possible that one of the VCC/GND pins (pin 80..86) allows to select LoROM mode.
<br />
<br />Possible. They sure do allow for a lot of possibilities in a chip that isn't used much. But I guess they didn't know exactly how many games would use the chip when they designed it.
<br />
<br />&gt; Ah, except, one thing: The SRAM enable bit in the same register! That might suggest that the other bits are SRAM related, too. A sram-size option could be useful, so they won't need different PCBs for each RAM size.
<br />
<br />I thought about that. To me it felt like the fact that 4830-4833 all had d0-d2 bits present that it was just an easier internal design to allow all four banks to be remappable. And yet something else is forcing the first bank to always be the program ROM. That you can overmap the program ROM onto the second bank leads further credence. There's probably an SPC7110 pin we can raise or lower that will turn the PROM off entirely, I am betting.
<br />
<br />But either way, it could be SRAM related too. Again, all carts being 64kbit gives us no way to know for sure even with SNES code tests. I did try toggling between 00-07 here, and SRAM still mirrors its 64kbit across every bank exactly the same.
<br />
<br />That $4830.d7 is SRAM chip enable (rather than just a write protect) was surprising. It will be annoying to have to leave that on in order to use the expanded 64kbit as scratch RAM. I like that it actually works, though. SuperFX and SA-1 RAM write protects always seem to give me trouble.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 14, 2012 7:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Perhaps the SPC7110 designers were unaware of fixed transfer DMA (unlikely)</div><br />Or it could be a design adapted from an architecture without fixed transfer DMA, or one where fixed transfer DMA is slower. Or perhaps it was just cheaper to decode that way.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That $4830.d7 is SRAM chip enable (rather than just a write protect) was surprising. It will be annoying to have to leave that on in order to use the expanded 64kbit as scratch RAM.</div>
<br />Do Super NES games actually use cart SRAM as scratch RAM?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon May 14, 2012 10:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm certain that some do, yes. SRAM isn't like Flash where you have to worry about write counts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon May 14, 2012 10:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The SNES is very different in this regard, as an extra 8kb of SRAM is negligible compared to the system's 128kb, so there is no reason to use it for anything other than saves.
<br />
<br />It's not like the NES where adding 8kb of SRAM would multiply the amount of RAM by 5, and therefore it can be used for other purposes than saving games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon May 14, 2012 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's specifically wise to do this for ROM hacks and translations, because otherwise you can never be 100% certain a game isn't going to try and use that same RAM you think is unused and overwrite at some key point much later in the game.
<br />
<br />Even if you beat the entire game (with a logger to flag read from / written to RAM addresses), you may have missed some secret/bonus area or obscure event trigger.
<br />
<br />And considering I want a full line of 16x16 VWF space, I don't want to try and reserve a huge block of 4KB+ of WRAM.
<br />
<br />It would really be nice to know for sure how &gt;8KB of SRAM works on these SPC7110 carts, but unfortunately no boards ever used more, so we kind of have to guess.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon May 14, 2012 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Holy shit. Our entire SPC7110 emulation is substantially wrong in so many, many ways ... this is the most poorly emulated of coprocessor of all at this point, even beating out the terrible SA-1 knowledge.
<br />
<br /><!-- m --><a class="postlink" href="http://byuu.org/temp/spc7110-mmio.txt">http://byuu.org/temp/spc7110-mmio.txt</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://byuu.org/temp/spc7110-mcu.txt">http://byuu.org/temp/spc7110-mcu.txt</a><!-- m --> (updated slightly)
<br />
<br />Where do I even begin ... well, notes are below.
<br />
<br />nocash, if you'd like to work with me on reverse engineering this more (now, or sometime in the future), feel free to reach me on IRC or somewhere else, and I can run hardware tests that you request and see what happens.
<br />
<br /><strong>Decompression Unit</strong>
<br />
<br />$480b.d1 does not select between "0 = stream unmodified data ROM data; 1 = stream decompressed data ROM data." As far as I can tell, it has no effect. At least, not on my sample decompression.
<br />
<br />$480b.d0, however ... wow. Complete mindfuck here. When this bit is set (eg $480b = #$01 or #$03), then $4807 has radical effects on the decompressed output.
<br />
<br />I posted the tables of various values of $4807 in the mmio.txt file to show what effects it has on the sample decompressed output. I tried to replicate it under emulation through various means (add it to table address index, increment the data ROM read offset by $4807 instead of by 1, etc) to no avail. It ... almost looks like higher values 'compacts' the data more, but ... not quite. It's absolutely screwy. I could **really** use some help here. My worst fear is that this isn't a simple change in the decompression engine, and that there's a lot of additional functionality that we don't yet emulate. That algorithm was absolutely brutal even for neviksti to figure out.
<br />
<br />I've also confirmed there's nothing special about $50:xxxx. It's a big literal mirror of $4800. Nothing more, nothing less.
<br />
<br />The DCU status register ($480c) is substantially complex. I've been able to set and clear d0, d1, d2, d4 and d7 bits in it with various parameters. What's most wild is that it seems to start with d7 clear, then after a while d7 gets set forever, until you start a new DMA or read one byte MORE than you set for the compression length. Almost like it forces the chip to start decompressing again? And as we already knew, there's substantial waiting periods that increase more and more when you set a larger index into the decompressed data output (the chip has to decompress up to 64KB before it can start giving valid output.)
<br />
<br />The data ROM read address is affected by $4834 (but not by $4830-4833.)
<br />
<br /><strong>Data ROM read unit</strong>
<br />
<br />First of all, the unlocking stuff is bullshit. It was a really awful guess to pass the SPC7110 first-boot self-test.
<br />Basically, after power on, if you read from $4810 or $481a before writing to either $4813 or $4818, it returns 0x00.
<br />All subsequent reads work as expected. Even without ever writing to any registers.
<br />$4813/$4818 writes fill in the buffer, and reads from the buffer cause the SPC7110 to fetch the next byte then.
<br />
<br />Much worse, however, is that absolutely nothing I try will allow me to read from $481a. The SPC7110 self-test does so, and ends up reading two different values from the port. I mimicked all SPC7110 register writes and reads just like my FEoEZ does, and all I ever get is 0x00.
<br />
<br />Also, I really hate $4818.d5-d6, it feels like we are emulating two unique settings packed into one. And we still need to find out what happens if you force modes 3-255. Harder to do since I can't modify the data ROM, so we'll have to pick an arbitrary spot to start decoding against.
<br />
<br />The data ROM read address is affected by $4834 (but not by $4830-4833.)
<br />
<br /><strong>ALU</strong>
<br />
<br />So there are very, very short delays before MUL/DIV results are valid. The delay length is constant (doesn't short-circuit for easier values, at least as far as my limited testing can tell.) I can't really get exact cycle counts because it completes too fast (1-2 instructions for MUL, 2-3 for DIV.) Reading early gives you pre-computed values. We *may* be able to reverse the algorithm this way, but ... fuck will that be annoying. It was hard enough for the SNES CPU.
<br />
<br />d0 of $482f (ALU status register) returns 1 if the last operation was a multiply, and 0 if it was a division. Nifty.
<br />
<br />At least our division by zero emulation was correct.
<br />
<br />$482e resetting all the registers was complete nonsense. It does no such thing. The only thing that register is for is for setting the signed mul/div mode.
<br />
<br />Side note: nocash, -0x80000000 / -1 = $4828[00 00 00 80; 00 00; 01 00] {482e=1}. Nothing unusual there.
<br />
<br /><strong>MCU</strong>
<br />
<br />Nothing more than I've already found here. Still can't get $4830.d0-2 to do anything useful.
<br />I did verify that even with non-zero data read from $4800 and $4810, when you read from data ROM address 0x400000+ with $4834.d0-2 = #$00-#$02 (eg not #$03), it still always returns 0x00. Same for the empty bits in registers. There doesn't appear to be an exposed MDR for the SPC7110.
<br />
<br /><strong>RTC</strong>
<br />
<br />This thing has a whole ton of commands I don't yet support. But I see you've already realized that yourself. Curious how you verified exactly what type of RTC it was? Does it say it on the PCB or something? Some of the functionality of that chip will be nigh impossible to properly emulate ...
<br />
<br />EDIT: okay, it's a separate chip entirely with a nice part marking, neat.
<br />Can I ask where you got your data sheet from? The one I found is much less verbose.
<br />
<br />I went ahead and emulated all of the chip functionality.
<br />I do have some additional questions that I'm hoping you'll know (or the doc will say.)
<br />
<br />1. you list WRAP for minute, hour, day, month, day of week. But if I set all of those bits to 1 (and clear them all on CE=low of course), it breaks the FEoEZ self-test sequence. Only doing it for minute alone works as expected.
<br />
<br />2. might be easier to understand if you list the duty cycle as 1/128th a second to match the first rate setting's description as 1/64th. Easy enough to figure out.
<br />
<br />3. say you set an hour IRQ, does the bit get set when the hour counter is incremented in R4-R5? Or does it do it an hour after IRQs are enabled? Or does it do it every hour after the cart was powered on, or possibly after CE is set to high?
<br />
<br />4. will the IRQ still fire if the chip is in stop, hold or reset?
<br />
<br />5. what is the difference between stop and hold?
<br />
<br />6. is Epson completely silent about the test register? If it's not too screwy, maybe I'll have to stab at that one myself ...
<br />
<br />7. are the RTC regs cached on CE=low, or are they real-time values? That you say you have to bail out when wrap is set suggests the former ... but that seems wasteful to have all that extra RAM.
<br />
<br />8. how does wrapping of bad values work? Eg we can test if(++seconds &gt;= 60) minute(); or if((seconds %= 60) == 0) minute(); You mention that time/date can be corrupted on changing AM/PM ... is that from the manual? Any details on how it can be corrupted?
<br />
<br />9. there is $4840.d1 ... I wonder what that bit is used for. Boy I sure hope it's another RTC stop bit &lt;/sarcasm&gt;
<br />
<br />10. I don't think our $4842.d7 flag is good enough. It's locking up on rare occasion when I support an actual delay for clearing the flag. I will have to test that further.
<br />
<br />Looks like the start date is limited to 1995-2014. Guess we better get the game translated before then, huh? :P
<br />
<br /><strong>MMIO</strong>
<br />
<br />In general, the CPU MDR doesn't fill in the empty bits of MMIO regs either. They're always zero no matter what.
<br />But there are registers the SPC7110 doesn't respond to at all. Those return the CPU MDR.
<br />And there's no other mirroring other than the repeat in banks $00-3f|80-bf. It's only in $4800-4842.
<br />
<br />There's a slight persistence to the registers even across power cycles.
<br />It's possible to fail out the self-boot test with rapid power cycles (obviously once you pass the test once it never runs again, until you wipe the SRAM.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Tue May 15, 2012 1:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />RTC-4514 Appliction Manual, 21 pages,
<br /><!-- m --><a class="postlink" href="http://download.inventronik.de/MiniFlex/datasheets/rtc4513.pdf">http://download.inventronik.de/MiniFlex ... tc4513.pdf</a><!-- m -->
<br />
<br />The time isn't cached/latched during reading, hence the WRAP bit, which tells you that the time changed during reading.
<br />
<br />Except, I think when setting HOLD, then the is latched, and can be read without wraps. After clearing HOLD it increments the second (if needed). The downside is that it can only "increment by 1" (ie. seconds may get lost if HOLD is set for longer time).
<br />
<br />And STOP should just completely stop the time.
<br />
<br />Hour IRQ should trigger each hour (when minutes=00).
<br />
<br />&gt; there is $4840.d1 ...
<br />Huh. what is that? Is it write-able? Does the software use it... maybe as read/write direction flag? Or is it unused by existing code? Or maybe sth like 4bit/8bit data size selection, or serial transfer clock rate...?
<br />
<br />----
<br />
<br />Division:
<br />&gt; -0x80000000 / -1 = $4828[00 00 00 80; 00 00; 01 00]
<br />Good to know. Not too unusual - but note that result "should" be +80000000h (not -80000000h), though that's, of course, impossible for signed 32bit range.
<br />
<br />Glad to hear that "reset all maths registers to 00" stuff was bogus.
<br />
<br />----
<br />
<br />Your findings about decompression &amp; data rom access look great!
<br />
<br />Don't know if/how I could help there. At the moment I am trying to understand the VS Unisystem (NES-like arcade machine); my brain is currently filled with palettes, checksums, and mapper numbers - and trying to think about decompression just makes me dizzy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Wed May 16, 2012 9:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; On division by zero: quotient = 0, remainder = divisor (low 16-bits)
<br />that should be "remainder = dividend (lower 16 bits)", right?
<br />"divisor" would just mean zero (since it's division by zero).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu May 17, 2012 1:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well ... we're in trouble. More info on my board:
<br /><!-- m --><a class="postlink" href="http://board.byuu.org/viewtopic.php?f=16&amp;t=2800&amp;start=15">http://board.byuu.org/viewtopic.php?f=1 ... 0&amp;start=15</a><!-- m -->
<br />
<br />But basically, $4807 is some kind of bit deinterleave pattern.
<br />I can't even begin to imagine what the hell this could be useful for, since it basically ignores lots of the decompressed output data.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; unsigned stride = 2 * mode, blocksize = 0x20 * mode;<br />&nbsp; for&#40;unsigned dp = 0, sp = 0; sp &lt; buffer.size&#40;&#41; - blocksize;&#41; &#123;<br />&nbsp; &nbsp; for&#40;unsigned base = 0x00; base &lt; 0x20; base += 0x10&#41; &#123;<br />&nbsp; &nbsp; &nbsp; unsigned lp = sp + base;<br />&nbsp; &nbsp; &nbsp; for&#40;unsigned word = 0; word &lt; 8; word++&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; output&#91;dp++&#93; = buffer&#91;lp + 0&#93;, output&#91;dp++&#93; = buffer&#91;lp + 1&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; //this looks evil, but basically add 0x10 every time we cross a 16-byte boundary<br />&nbsp; &nbsp; &nbsp; &nbsp; lp = lp + stride + 0x10 * &#40;&#40;lp + stride&#41; / 16 - lp / 16&#41;;<br />&nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; sp += blocksize;<br />&nbsp; &#125;</div>
<br />
<br />(It is possible this varies per decompression mode. I haven't gotten that far yet.)
<br />
<br />But we have much bigger problems now. Apparently our decompression code is incomplete. It breaks down when you hit an edge case like tons of 0xFF values fed in a row. Kind of reminds me of the problem with the S-DD1 that Andreas Naive didn't emulate. The real SPC7110 seems to die and output a constant stream of the same value. Our emulation just keeps on spitting out noise.
<br />
<br />I cannot emulate $4807 until we emulate register $4800 correctly, because my $4807 falls apart once you start reading past where the SPC7110 dies. And even better, that's a separate issue, because I was trying to deinterleave the data logged from hardware and failed. So the deinterleave goes inside of the decompression, it's not a post-processing effect. Hence, we can't figure it out until we get regular $4800 correct.
<br />
<br />A DMA may fail (since you have to decode basically 0x400 bytes to get each subsequent byte of output), but my read a byte and send via USART is slow enough that the SPC7110 can keep up, even in the monstrous $4807=#$FF case.
<br />
<br />I need help from someone who understands the SPC7110 decompression algorithm. There's no way I can fix this myself :(
<br />I can supply all the hardware logged data anyone would like, however.
<br />
<br />Also, $481a always reads out as 0x00. It does however increment the data ROM address as the current code describes. Still can't make $4808 return anything. RTC BCD is insane. Lots of issues with invalid data, but I should be able to RE that from the tables I dumped. 24H mode won't let you set AM/PM bit, 12M mode won't let you set D5 of Hour. RTC ready flag is set ~64 CPU clocks before it's ready. Read without ~4x NOP after and it fails. RTC has its own MDR. It goes crazy if you write to it or strobe CE while doing a 30ADJ and not waiting the 125uS. And the list goes on and on and on and on.
<br />
<br />&gt; that should be "remainder = dividend (lower 16 bits)", right?
<br />
<br />Yes, sorry for the mistake.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Thu May 17, 2012 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really don't understand the decompression algorithm. You've seen my pseudo-code decompression functions, don't you? They are a bit tighter than the reverse-engineered code, eventuallly making easier to see what is going on, and to spot where overflows might occur.
<br />
<br />Might be useful if you log min+max values for all variables; espcially on the "top" variable. Then decompress some valid data blocks. That should give you the valid min+max ones. Then decompress some stuff that isn't intended to be decompressed, and watch cases where it exceeds the min+max values.
<br />
<br />Timing might be also a problem, at least when using DMAs which expects the decompressed bytes to be ready within 8 clks. But as far as I understood, you are already using non-DMA reads for that purpose? Does that make a visible difference? More distorted results with DMA, and less distorted without DMA?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pichichi010</b> [ Fri May 18, 2012 7:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>MAD 1 and Address Decoder 74LS139</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />can an Address Decoder 74LS139 be soldered in the same socket of a MAD1 chip and work fine? (save, etc?)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>