<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - FDS Version of Family BASIC Video</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">FDS Version of Family BASIC Video</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6895">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6895</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Xious</b> [ Tue Aug 24, 2010 1:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>FDS Version of Family BASIC Video</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Someone sent me a link to this video, which is apparently a Game Doctor disk (for the FDS) of Family BASIC:
<br />
<br /><a href="http://www.youtube.com/watch?v=dxk9m8xbXiU" class="postlink">http://www.youtube.com/watch?v=dxk9m8xbXiU</a>
<br />
<br /><strong>Please don't e-mail him!</strong> I sent a letter to the uploader of the video, and <strong><em>I don't want to flood his mailbox </em></strong>with questions about this to scare him away. <span style="text-decoration: underline">I will directly report what happens</span>, but in the meanwhile, I'm wondering if anybody else has ever seen this.
<br />
<br />I'm curious if the Game Doctor disk will allow saving BASIC programmes to disk or if it is identical to the cart.
<br />
<br />Beyond that, it is an interesting curiosity to find out how the GD port maps the normal FDS RAM to the Family BASIC v3 expansion RAM and how the code of the conversion looks when compared to the ROM from the FB cartridge.
<br />
<br />This could all prove very interesting in making both disk or cartridge versions of Family BASIC programmes and turning cart games into FDS disk games or even Doctor Disk games.
<br />
<br />yes, I know that some of you think this is all pointless, but it is important: It would make it easy to write simple games and distribute them, as well as create interesting hacks or improvements of FDS titles, and possibly provide further insight into the FDS and mapper conversion. 
<br />
<br />I could name a score of reasons that stuff like this is important, beyond my strange FDS fetish. It would also be neat to write Family BASIC programmes and save them to disk, as that alone would make it an easy-peasy step towards creating a compiler to convert the code into ROM format. 
<br />
<br />The FB v3 cart is also battery-backed, and I wonder if the Doctor Disk port makes use of the FDS writing feature to auto-save the address range used for programmes. of course, it could simply be a direct ROM conversion and do naught more than the normal release, but it is worth investigating.
<br />
<br />As I said, just using it to learn how the Doctor Disk mapper conversions work would be a blessing. 
<br />
<br />-Xious

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Aug 24, 2010 11:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: FDS Version of Family BASIC Video</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm curious if the Game Doctor disk will allow saving BASIC programmes to disk or if it is identical to the cart.</div>Of course not, you'd have to hack the game to provide raw FDS read/write functions. Family Basic is just a NROM game which the Game Doctor treats as such.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Beyond that, it is an interesting curiosity to find out how the GD port maps the normal FDS RAM to the Family BASIC v3 expansion RAM and how the code of the conversion looks when compared to the ROM from the FB cartridge.</div><br />Huh? The Family Basic RAM is exactly the same as other cart WRAM (though I think it's 2KiB). Basically all the Game Doctor does is map a few registers into unused space ($42xx-45xx depending on unit) and takes $8000-FFFF for its game. Everything else gets passed through including FDS adapter RAM at $6000-7FFF serving as the WRAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This could all prove very interesting in making both disk or cartridge versions of Family BASIC programmes and turning cart games into FDS disk games or even Doctor Disk games.</div><br />Noooooot reaaaaaallyyyy.... You're thinking too far into it XD You can't easily make your own self-contained games like *snap*. You'd have to hack Family BASIC and link it to your game. Even then you'd have a very limited and poorly performing game... If you want to develop using the FC for the development environment, it'd definitely be better to start from scratch.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">yes, I know that some of you think this is all pointless, but it is important: It would make it easy to write simple games and distribute them, as well as create interesting hacks or improvements of FDS titles, and possibly provide further insight into the FDS and mapper conversion. </div>How would BASIC help you hack FDS games or RE FDS/mapper code? There are already disk editors (with disassembler) as well as character editors for FDS by the Japanese company I2.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The FB v3 cart is also battery-backed, and I wonder if the Doctor Disk port makes use of the FDS writing feature to auto-save the address range used for programmes. </div><br />Everything is lost once you power off. FC copiers don't retain their saves at power off unless they have been modified to do so.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As I said, just using it to learn how the Doctor Disk mapper conversions work would be a blessing. </div>
<br />You mean just put NROM, CNROM UOROM &amp; GNROM on disk? It's very simple, just compare the disk image to the ROM, I figured it out before I could program a "Hello World"... Don't expect it to be easy to hack MMC1/MMC3 etc to Game Doctors though, that requires extensive reverse engineering of the game program and Doctor hardware. Not only do you have to write code to remap mapper writes to corresponding Doctor registers but you have to figure out how to stop the game and upload tons of CHR data to CHRRAM without breaking the program sync. IRQ effects will have to be removed or significantly hacked too. CHR-ROM bankswitching animation will also have to be removed unless you target your hack specifically for TGD6.
<br />Back in the day I think they used a hardware in-circuit-emulator for the hacking. These days it's best to use a software emulator with debugger of course.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Xious</b> [ Tue Aug 24, 2010 4:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: FDS Version of Family BASIC Video</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm curious if the Game Doctor disk will allow saving BASIC programmes to disk or if it is identical to the cart.</div>Of course not, you'd have to hack the game to provide raw FDS read/write functions. Family Basic is just a NROM game which the Game Doctor treats as such.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Beyond that, it is an interesting curiosity to find out how the GD port maps the normal FDS RAM to the Family BASIC v3 expansion RAM and how the code of the conversion looks when compared to the ROM from the FB cartridge.</div><br />Huh? The Family Basic RAM is exactly the same as other cart WRAM (though I think it's 2KiB). Basically all the Game Doctor does is map a few registers into unused space ($42xx-45xx depending on unit) and takes $8000-FFFF for its game. Everything else gets passed through including FDS adapter RAM at $6000-7FFF serving as the WRAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This could all prove very interesting in making both disk or cartridge versions of Family BASIC programmes and turning cart games into FDS disk games or even Doctor Disk games.</div><br />Noooooot reaaaaaallyyyy.... You're thinking too far into it XD You can't easily make your own self-contained games like *snap*. You'd have to hack Family BASIC and link it to your game. Even then you'd have a very limited and poorly performing game... If you want to develop using the FC for the development environment, it'd definitely be better to start from scratch.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">yes, I know that some of you think this is all pointless, but it is important: It would make it easy to write simple games and distribute them, as well as create interesting hacks or improvements of FDS titles, and possibly provide further insight into the FDS and mapper conversion. </div>How would BASIC help you hack FDS games or RE FDS/mapper code? There are already disk editors (with disassembler) as well as character editors for FDS by the Japanese company I2.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The FB v3 cart is also battery-backed, and I wonder if the Doctor Disk port makes use of the FDS writing feature to auto-save the address range used for programmes. </div><br />Everything is lost once you power off. FC copiers don't retain their saves at power off unless they have been modified to do so.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As I said, just using it to learn how the Doctor Disk mapper conversions work would be a blessing. </div><br />You mean just put NROM, CNROM UOROM &amp; GNROM on disk? It's very simple, just compare the disk image to the ROM, I figured it out before I could program a "Hello World"... Don't expect it to be easy to hack MMC1/MMC3 etc to Game Doctors though, that requires extensive reverse engineering of the game program and Doctor hardware. Not only do you have to write code to remap mapper writes to corresponding Doctor registers but you have to figure out how to stop the game and upload tons of CHR data to CHRRAM without breaking the program sync. IRQ effects will have to be removed or significantly hacked too. CHR-ROM bankswitching animation will also have to be removed unless you target your hack specifically for TGD6.<br />Back in the day I think they used a hardware in-circuit-emulator for the hacking. These days it's best to use a software emulator with debugger of course.</div>
<br />
<br />Jeepers, I hate responding to threaded quotes in BBCode. 
<br />
<br />Well, without holding it i your hands, it's impossible to know if the ability to save to the disk has already been implemented by whomever converted it.
<br />
<br />Beyond that, at least with a disk version of Family BAISC it is possible to have the FDS RAM-Adapter connected to the FC during operation.
<br />
<br />I'm certainly not considering writing amazing, graphical games with it I think it is a useful tool for <em>conversions of existing BASIC programmes</em>, at the least, and I was going to write some TBAs or convert some stuff from old mags to the FC for distribution. Honestly I'd like to convert some old mag-based TBAs to FB and find a way to convert them to FDS (self-bootstrapping) or UNROM or something like that, even if it's for my own enjoyment of playing them.
<br />
<br />Having access o the FDS at all would make it possible to create a writing routine, and thus being able to do more interesting things with the software. I may, at some point,  even pay somebody to translate one of those overpriced FB guidebooks into English in order to get a better idea of its capabilities and FC-specific instruction set.
<br />
<br />I don't know how much effort Hudson put into V3, but it was supposed to be something special and maybe it can live up tot hat potential in the right hands 
<br />
<br />I don't have high hopes for this, but I think it would be a fun toy for tinkering and having it in disk form would certainly be a great step closer to making a hack of FB that can write to disk, rather than cassette tapes..
<br />
<br />Do you have any reference material on ROM to FDS and ROM to Doctor Game conversion? I haven't noticed this kind of reference anywhere on-line, but I suppose that it's possible that could have missed it on ToToTek or somewhere
<br />
<br />Learning how to convert MMC1-MMC3 and VRCx ROMs first requires figuring out how the GD hardware conversions work at all, and how they reroute instructions via their custom mapper emulators.
<br />
<br />It's not for everyone, but I find it amusing and it's a break from the soldering iron...and sanity as well, i guess, from your perspective.
<br />
<br />If you have any docs or refs to converting ROMs to the FDS, send'em my way, along with the FDS decompiling utilities. 
<br />
<br />-X

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Aug 24, 2010 6:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: FDS Version of Family BASIC Video</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, without holding it i your hands, it's impossible to know if the ability to save to the disk has already been implemented by whomever converted it.</div><br />But there's an extraordinarily high probability that it wasn't hacked to load/save to the disk. If you think so you're dreaming XD<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Beyond that, at least with a disk version of Family BAISC it is possible to have the FDS RAM-Adapter connected to the FC during operation.</div><br />Of course it is. It would be worth hacking Family BASIC to not even need the Game Doctor since you wouldn't need to rewrite the disk functions and more people would be able to use it. (Maybe PowerPak users too.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm certainly not considering writing amazing, graphical games with it I think it is a useful tool for <em>conversions of existing BASIC programmes</em>, at the least, and I was going to write some TBAs or convert some stuff from old mags to the FC for distribution. Honestly I'd like to convert some old mag-based TBAs to FB and find a way to convert them to FDS (self-bootstrapping) or UNROM or something like that, even if it's for my own enjoyment of playing them.</div><br />The first step would be hacking Family BASIC to a normal FDS game, not too difficult, not too easy since everything will have to be relocated. If you keep it as a Game Doctor game, I don't think you can switch to the BIOS for disk routines. Definitely best to port it to FDS. I'm sure during the process you could strip a lot of silly content out too giving more program space or space for a CHR editor.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you have any reference material on ROM to FDS and ROM to Doctor Game conversion? I haven't noticed this kind of reference anywhere on-line, but I suppose that it's possible that could have missed it on ToToTek or somewhere</div><br />Nope. It doesn't exist online, but thankfully it's not hard to figure out. Mapper hacking however is very complicated since the hardware isn't accurately documented at all (just a few mapper 6,17 documents) and of course you have to be very familiar with NES programming. I've occasionally worked on reverse engineering FC copiers since 2003, I can definitely say it's not easy.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Learning how to convert MMC1-MMC3 and VRCx ROMs first requires figuring out how the GD hardware conversions work at all, and how they reroute instructions via their custom mapper emulators.</div>
<br />How it works is simple:
<br />
<br />- There are 6 mapper modes:
<br />-CNROM (NROM) compatibility
<br />-GNROM compatibility
<br />-UOROM compatibility
<br />-special extended CNROM mode
<br />-GD4M mode (special CNROM mode in a 4x8K register file)
<br />-TGD6 mode (4M mode with extended CHR RAM in 8x1K register file)
<br />
<br />-There is a file in the FDS disk loaded before the game files that is treated as a header. The header contains configuration data (written to configuration registers).
<br />
<br />-Usually old mapper hacks set the mode to UOROM.
<br />
<br />-There is another file loaded before the game called the "trainer". This file is the mapper emulation code and it gets loaded into WRAM.
<br />
<br />-The game gets loaded into RAM, the hardware is switched out of "BIOS" mode into "game" mode then the game is started.
<br />
<br />-Games are hacked so that when a game for example writes to a bankswitch register eg STA $8000 the code gets changed to JSR TRAINER_8000_WRITE (a function in the trainer) which then decodes the mapper write into discrete Doctor register writes.
<br />
<br />That's all the easy part, the hard part is making sure all the time spent in trainer code (especially since a large portion of the screen has to be blanked for CHR bankswitch emulation) doesn't break the game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Xious</b> [ Tue Aug 24, 2010 9:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It just occurred to me: It is also possible to update the FDS BIOS ROM to include Family BASIC, so that BASIC loads instantly instead of the normal 'insert disk' animation.
<br />
<br />I don't know that this would be any better than having it on disk, except that you could potentially do more with BASIC in ROM than on disk.
<br />
<br />I know that somebody put out a utility to save BASIC programmes to disk, but I have very little in the way of information on it. Have you ever heard about this kind of tool?
<br />
<br />If you do a memory dump of the NES once the BASIC programme is running, I think you could pretty much turn that into a ROM that anybody could run, which is one way to do this without all the hullabalou, but it wouldn't be as interesting as coding to disk directly. 
<br />
<br />-Xious

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Wed Aug 25, 2010 4:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Look, all of these ideas suffer from a "bootstrapping" problem.  You'd need to burn ROMs or do hacking to FDS disks to get this BASIC running on a disk, so if you have such technology, why not just program stuff and burn ROMs directly?  Or even if Family BASIC can be put on an FDS disk (via hacking), then that means you're better off writing your own programs directly onto the disk rather than running it through BASIC.
<br />
<br />Alternatively, since Family BASIC uses the tape data recorder, why not just distribute BASIC creations as sound files over the internet?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 25, 2010 8:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ccovell wrote:</div><div class="quotecontent">Alternatively, since Family BASIC uses the tape data recorder, why not just distribute BASIC creations as sound files over the internet?</div>
<br />Because FLAC is big, and psychoacoustic codecs like Vorbis might fornicate up the phase information that all cassette interfaces used to store data. But then if we can emulate the saving code, we can generate a wave file with a tool on the user's side.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Wed Aug 25, 2010 3:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">ccovell wrote:</div><div class="quotecontent">Alternatively, since Family BASIC uses the tape data recorder, why not just distribute BASIC creations as sound files over the internet?</div><br />Because FLAC is big, and psychoacoustic codecs like Vorbis might fornicate up the phase information that all cassette interfaces used to store data. </div>Seriously?  That's a damning problem?  I didn't even mention your dread word MP3 but you get on everyone's case anyway.   <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> 
<br />
<br />A short audio clip in raw PCM format never overloaded anyone's bandwidth.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 25, 2010 7:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If FLAC is big, uncompressed PCM is even bigger. And some of us (e.g. VirtualNES developer Jamie Sanders) are still on dial-up because cable and DSL haven't reached Bufftuck Kansas even if 2 Mbps DSL has reached my sister in <a href="http://www.urbandictionary.com/define.php?term=BFE" class="postlink">Bufftuck</a> Indiana.
<br />
<br />I'm not on anyone's case, just trying to find the most efficient way to distribute binaries. That's what the sentence after what you quoted was about&#058; finding a way to distribute a smaller file that can be used to generate such a PCM file.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Aug 25, 2010 7:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I still need to put this on the main page, but here it is:
<br /><img src="http://nesdev.com/tapedrv.PNG" alt="Image" />
<br />
<br />sepi made this, I haven't built one yet to try it out.  It would be cool to be able to save tracks in Excitebike.
<br />
<br />It couldn't be all that hard to "digitize" the sample, could it?  I mean converting both ways between PCM and the original bits/bytes.  There is already software to do it for other systems that used tape drives, so maybe that same software might already work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Xious</b> [ Mon Aug 30, 2010 3:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, the datacasette samples use the $4016 address line (R1 and W0)?
<br />
<br />That's interesting... I would have thought that the audio line on the FC port would be used for part of it, but I haven't examined the signal paths on a FBKB yet. I guess that the KB converts that datacasette signals directly to $4016 reads and writes.
<br />
<br />I was pondering this when making my pinout charts, as the FC doesn't have audio in available on the EXP port, so I suspected that it went over either $4016 or $4017, but I thought that the FC uses the analogue audio data directly over pin 2 (NES EXP pin 21).
<br />
<br />If this is the case, I will have to add mini audio jack lines to the NESpander using this design as part of the final product., for those without the keyboard. Pretty easy to stick in the design somewhere...
<br />
<br />-Xious

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Aug 30, 2010 6:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because FLAC is big, and psychoacoustic codecs like Vorbis might fornicate up the phase information that all cassette interfaces used to store data. But then if we can emulate the saving code, we can generate a wave file with a tool on the user's side.</div>
<br />
<br />If space is a real concern you could convert the PCM data into PWM, which should reduce its size given the special properties of the waveform. Or better yet, convert it into the corresponding binary file (i.e. the actual machine code, not an audio representation of it).
<br />It should be possible to convert the data back into PCM if you need to put it on an actual cassette tape later. Tools like that have existed for C64 tape processing for a long time AFAIK.
<br />
<br />But for those not living in rural Kansas plain WAV files put in a .7z will probably suffice. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ortega</b> [ Fri Sep 10, 2010 3:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I hope this is relevant, I stumbled up this blog-post yesterday. Either way it's cool:
<br /><a href="http://dabeaz.blogspot.com/2010/08/using-python-to-encode-cassette.html" class="postlink">Using Python to Encode Cassette Recordings for my Superboard II</a>
<br />
<br />It has 2 more parts, and includes sample code. Maybe something similar could fill the niche here, following tepples' suggestion.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>