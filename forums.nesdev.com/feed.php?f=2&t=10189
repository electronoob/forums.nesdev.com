<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=10189" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-05-18T19:20:01-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=10189</id>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-05-18T19:20:01-07:00</updated>
<published>2014-05-18T19:20:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=128913#p128913</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=128913#p128913"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=128913#p128913"><![CDATA[
I released the <a href="http://forums.nesdev.com/download/file.php?id=1537" class="postlink">test program</a> over in <a href="http://forums.nesdev.com/viewtopic.php?p=128842#p128842" class="postlink">this thread</a>...<br />And after having taken and annotated a few photographs (nominally to help FHorse implement this, but in practice to just explain to myself the difference in behavior), I figured I already went to the effort and should include them here:<br />First I configure it to upload these 14 bytes (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">34 56 78 9a bc de f0 00 54 32 10 ec a8 64</tt>):<br />hwE.pngAnd then I shorten it to 7 bytes:hw7.png<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun May 18, 2014 7:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-07-09T00:50:28-07:00</updated>
<published>2013-07-09T00:50:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=114831#p114831</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=114831#p114831"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=114831#p114831"><![CDATA[
I recently wrote a test program that would write 1-15 bytes to OAM_DATA in NMI, but only when the joypad changes. (And never touching OAM_ADDR, relying on its being reset at the end of rendering)<br /><br />Currently, Nestopia assumes that if you start rendering with OAM_ADDR at 8 or more, sprites 0 and 1 are <strong>temporarily</strong> replaced with the pair that was pointed to. This does not seem to be the case: it appears to be the same copying behavior we've seen above when OAM_ADDR is manually changed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Jul 09, 2013 12:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2013-06-25T12:08:49-07:00</updated>
<published>2013-06-25T12:08:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113973#p113973</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113973#p113973"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113973#p113973"><![CDATA[
BTW, do these results affect the earlier OAM readback tests (<!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6424">viewtopic.php?f=2&amp;t=6424</a><!-- l -->) because OAM readback requires the OAM address to be rewritten for each byte that is read?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Tue Jun 25, 2013 12:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2013-06-20T08:27:51-07:00</updated>
<published>2013-06-20T08:27:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113670#p113670</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113670#p113670"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113670#p113670"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Assuming the 2C07 is using the same technology and the same construction for the DRAM cells, it should have the same self-discharge time. Combine that with thefox's comment <a href="http://forums.nesdev.com/viewtopic.php?p=81444#p81444" class="postlink">in this thread</a> about OAM evaluation automatically starting after 20 scanlines on the 2C07, that implies the maximum time between refreshes permissible for the OAM DRAM is between 1.3ms (20 scanlines, but that's probably chosen because it's the same as the 2C02) and 4.5ms (70 scanlines). I'd bet good odds that it's roughly 2ms, given my research about the Intel C2116.<br /></div><br /><br />I didn't figure out the precise time (and I presume there is a temperature factor I haven't even touched on), but 2ms was still too long in my tests with the NTSC PPU (i.e. enough cycles to LDA,X+STA+INX+BNE 256 times). So 2ms is an upper bound, and theoretically 1.3m is the lower bound (unless there's some unknown refresh behaviour during vblank).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Thu Jun 20, 2013 8:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-06-20T08:26:32-07:00</updated>
<published>2013-06-20T08:26:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113668#p113668</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113668#p113668"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113668#p113668"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />* Read 8 bytes from OAM starting at this masked value<br />* Write them starting at $XX in OAM, where $XX is the high byte of the PPU register written to ($20-$3F) masked with $F8<br /></div><br />Does this have anything to do with the OAM corruption caused by disabling rendering mid-frame? In that situation, the corruption is also 8 bytes long, isn't it?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Jun 20, 2013 8:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-06-20T08:05:00-07:00</updated>
<published>2013-06-20T08:05:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113666#p113666</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113666#p113666"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113666#p113666"><![CDATA[
<a href="https://en.wikipedia.org/wiki/Open_top_bus" class="postlink"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/Neoplan_Centroliner_4426_Paris_0211.jpg/640px-Neoplan_Centroliner_4426_Paris_0211.jpg" alt="Image" /></a><br />Not that kind of open bus<br /><br /><br /><div class="quotetitle">Quietust wrote:</div><div class="quotecontent"><br />I'm not quite sure how the &quot;high byte of the PPU register written to ($20-$3F)&quot; could possibly be involved here, since the PPU I/O port would be inactive while the CPU is reading the instruction bytes from memory.<br /></div><br />If the CPU drives A15-A13 before D7-D0, the 74LS139 is generating a chip enable for the PPU while the instruction byte is still sitting on the data bus.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Wonder if Quietust can work out or find this particular behaviour in Visual 2A03, to narrow down exactly what the behaviour is.<br /></div><br />I assume you meant the Visual 2C02, since this is issue has nothing to do with the CPU.</div><br />That depends on to what extent the Visual 2A03 simulates bus capacitance.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Jun 20, 2013 8:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2013-06-20T07:53:27-07:00</updated>
<published>2013-06-20T07:53:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113665#p113665</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113665#p113665"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113665#p113665"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />I bet the &quot;copying&quot; effect is due to the relative size of the capacitance of the DRAM cells (small) compared to the interconnect bus. Maybe pclk0 doesn't go high in between the original value being driven onto the interconnect, and swamps the desired value when the new address gates are enabled?<br /></div><br />That sounds quite similar to what I described <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9912&amp;start=15#p109620" class="postlink">here</a>, and I also wrote a <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9912&amp;start=30#p110019" class="postlink">test program</a> to try and play with it more. In particular, it seemed that it wasn't just writing $2003 that did it, but <strong>waiting a while</strong> between writes to $2003, during which the values in the &quot;destination&quot; row could decay just enough to be overwritten by the values sitting on the bit lines (initialized from the &quot;source&quot; row).<br /><br />I'm not quite sure how the &quot;high byte of the PPU register written to ($20-$3F)&quot; could possibly be involved here, since the PPU I/O port would be inactive while the CPU is reading the instruction bytes from memory.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Wonder if Quietust can work out or find this particular behaviour in Visual 2A03, to narrow down exactly what the behaviour is.<br /></div><br />I assume you meant the Visual 2C02, since this is issue has nothing to do with the CPU.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Thu Jun 20, 2013 7:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-20T01:11:44-07:00</updated>
<published>2013-06-20T01:11:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113659#p113659</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113659#p113659"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113659#p113659"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />or else it would take too long and the data would degrade. (Seemed like data lifetime was just barely long enough to reliably survive vblank.)<br /></div>Assuming the 2C07 is using the same technology and the same construction for the DRAM cells, it should have the same self-discharge time. Combine that with thefox's comment <a href="http://forums.nesdev.com/viewtopic.php?p=81444#p81444" class="postlink">in this thread</a> about OAM evaluation automatically starting after 20 scanlines on the 2C07, that implies the maximum time between refreshes permissible for the OAM DRAM is between 1.3ms (20 scanlines, but that's probably chosen because it's the same as the 2C02) and 4.5ms (70 scanlines). I'd bet good odds that it's roughly 2ms, given my research about the Intel C2116. <br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />So if $2003 was 0 and you wrote $3C to $2003, it'd copy $00-$07 to $20-$27 in OAM, then set the address to $3C. If you then wrote $00 to $2F03, it'd copy $38-$3F to $28-$2F, then set the address back to $00.<br /></div>  Huh. I wonder where the data bus (since the MSB of the address is fetched last) is incorrectly getting mixed in? Is there a little bit of race on either the rising or falling edge of M2 or PPU/CE?<br /><br />I bet the &quot;copying&quot; effect is due to the relative size of the capacitance of the DRAM cells (small) compared to the interconnect bus. Maybe pclk0 doesn't go high in between the original value being driven onto the interconnect, and swamps the desired value when the new address gates are enabled?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Thu Jun 20, 2013 1:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2013-06-20T00:17:17-07:00</updated>
<published>2013-06-20T00:17:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113656#p113656</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113656#p113656"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113656#p113656"><![CDATA[
Don't forget this thread: &quot;Just how cranky is the PPU OAM?&quot; <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9912" class="postlink">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9912</a><br /><br />One thing about writing all of OAM via $2004 is that in my tests it seemed that I needed to get it done rather quickly (e.g. unrolled lda imm + sta) and get rendering turned on, or else it would take too long and the data would degrade. (Seemed like data lifetime was just barely long enough to reliably survive vblank.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Thu Jun 20, 2013 12:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-06-19T22:59:17-07:00</updated>
<published>2013-06-19T22:59:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113655#p113655</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113655#p113655"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113655#p113655"><![CDATA[
Seems that a $2003 write basically does this:<br /><br />* Take old value from $2003 and AND it with $F8<br />* Read 8 bytes from OAM starting at this masked value<br />* Write them starting at $XX in OAM, where $XX is the high byte of the PPU register written to ($20-$3F) masked with $F8<br />* Use new value written to $2003 as OAM address<br /><br />So if $2003 was 0 and you wrote $3C to $2003, it'd copy $00-$07 to $20-$27 in OAM, then set the address to $3C. If you then wrote $00 to $2F03, it'd copy $38-$3F to $28-$2F, then set the address back to $00.<br /><br />But this is just for the &quot;preferred&quot; CPU-PPU alignment. For another, I get totally different corruptions at portions of OAM related to the new value written. It's probably using a different value to write the 8-byte chunk to OAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Jun 19, 2013 10:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-06-19T21:46:58-07:00</updated>
<published>2013-06-19T21:46:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113650#p113650</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113650#p113650"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113650#p113650"><![CDATA[
I have some notes about what happens on a $2003 write. My idea is that there's some refresh logic in OAM that is continually reading/writing a chunk of it ($10 bytes? $20 bytes? I forget). When you write to $2003, it writes the chunk at the wrong place.<br /><br />I just made a random test that runs 65536 iterations. Each one, it randomly chooses one of these actions:<br />* write a random value to $2003 and then do a DMA with random data (to overwrite any corruption from the $2003 write)<br />* do a DMA with random data<br />* write a random value to $2004<br />* read from $2004<br /><br />When doing these it also simulates what should happen, and verifies that $2004 reads match and also periodically verifies that its simulated OAM matches actual OAM. This reminds me of the triangle linear counter test that did similar things. Did this for all four alignments (took about 15 minutes total). All passed. So this pretty much verifies that $2004 and $4014 behave in a sane manner, just $2003 corrupting OAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Jun 19, 2013 9:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2013-06-19T21:26:02-07:00</updated>
<published>2013-06-19T21:26:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113648#p113648</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113648#p113648"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113648#p113648"><![CDATA[
Wonder if Quietust can work out or find this particular behaviour in Visual 2A03, to narrow down exactly what the behaviour is.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Wed Jun 19, 2013 9:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2013-06-19T21:23:53-07:00</updated>
<published>2013-06-19T21:23:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113647#p113647</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113647#p113647"/>
<title type="html"><![CDATA[Re: Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113647#p113647"><![CDATA[
That's very interesting. Seems almost obvious now that you said it, given that pretty much all &quot;broken&quot; applications write to $2003, then only a couple of bytes to $2004. The simplest explanation tends to be the correct one.<br /><br />Now if we could figure out what bytes and how the $2003 write corrupts, we may be able to find a way to do less than 256 $2004 writes in a safe way for the applications that don't want to use the OAM DMA.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Wed Jun 19, 2013 9:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-06-19T21:44:55-07:00</updated>
<published>2013-06-19T20:34:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113642#p113642</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113642#p113642"/>
<title type="html"><![CDATA[Manual OAM write glitchyness]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10189&amp;p=113642#p113642"><![CDATA[
There was <a href="http://forums.nesdev.com/viewtopic.php?p=113503#p113503" class="postlink">some discussion about manual $2004 writes being glitchy</a>. I did more testing and it seems that it's only <em>$2003</em> writes (SPRADDR) that are glitchy; merely changing SPRADDR often corrupts OAM. That's fine if you're about to update all of OAM, but it causes havoc when writing test code. I've found a reliable approach is to only use $2004 reads and writes for test code:<br /><br />* Do initial $2003 write to set address.<br />* Write to OAM, e.g. 256 $2004 writes, either manually or via $4014<br />* Read OAM by reading $2004, then writing that back to $2004 to increment address, 256 times<br /><br />Each step leaves the address at whatever it started as, avoiding the need for a $2003 write.<br /><br />I have some code put a random value in $2003, fill OAM with random bytes, then read them back to verify. Masking off the missing bits in every third byte of a sprite, they are consistently matching on all four CPU-PPU alignments (just ran 250 iterations for each of the four alignments and they all passed).<br /><br />So this might at least narrow down the OAM funkyness we've encountered in the past. I'm going to try some more tests to be sure $2004 doesn't have any weirdness in any alignment.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Jun 19, 2013 8:34 pm</p><hr />
]]></content>
</entry>
</feed>