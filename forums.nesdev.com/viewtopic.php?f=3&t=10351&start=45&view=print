<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Need some help with the PPU</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Need some help with the PPU</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10351">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10351</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Aug 23, 2013 5:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If PC reads work, then zero-page reads should be working.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miker00lz</b> [ Fri Aug 23, 2013 6:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">If PC reads work, then zero-page reads should be working.</div><br /><br />Should be, but not if he reads the opcode from CPU memory then reads some operands from VRAM due to typos. It looks like he's specifying the address space to take the data from each time he pulls in a byte for anything.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Fri Aug 23, 2013 8:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Zeropage reads work correctly on nestest.nes, so I don't understand why they aren't here.<br /><br />I pass the ppu to readRAM so that if $2002 is read I can clear the writeToggle or if $2007 is read I can use/increment the ppuAddress.  I have a separate function for reading from VRAM creativity called readVRAM.<br /><br />Edit: Somehow I screwed my cpu code up and it wasn't passing any of the tests except for basics.  So I reverted back to an older file and everything is working again.  I'm trying to figure out why my ROR instructions won't pass.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miker00lz</b> [ Sat Aug 24, 2013 9:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, okay that makes sense. My mistake.<br /><br />For ROR, you should have a temp variable to store whether bit 0 of the operand is 0 or 1 before changing it. Now shift the value right by a bit. If the actual CPU carry flag is set, now set bit 7 of the operand. Then, replace the actual CPU carry flag with what you saved in the temp variable. Last, calculate the zero and negative flags. That should do it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Sun Aug 25, 2013 9:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For some reason only tests 01-03 print out a pass/fail message.  04, 05, and 06 only output the missed opcodes.  If no opcodes are missed, then nothing gets printed out.  Is that supposed to happen?<br /><br />Here is what I'm getting right now for 04:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">�ްa<br />P<br /><br />�4<br />�<br />�<br />/usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0<br />@<br /><br /><br />�4<br />�<br />�<br />/usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0<br />DONE</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miker00lz</b> [ Mon Aug 26, 2013 1:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, that's normal.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Mon Aug 26, 2013 10:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I'm happy to report that I passed every test except for 11-stack.  I've checked everything that has to do with the stack, and I cannot find my error.<br /><br />Test output:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">48 PHA<br />08 PHP<br />68 PLA<br />28 PLP<br />9A TXS<br />BA TSX<br /><br />11-stack<br /><br />Failed</div><br /><br />I'm guessing that since I'm missing pretty much every instruction that effects the stack, it must be how I wrap around. These are my two stack functions:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const void cpu::pushStack(memory* memory, unsigned char &amp;data, ppu* ppu)<br />{<br />&nbsp; &nbsp;memory-&gt;writeRAM(SP, data, ppu);<br />&nbsp; &nbsp;SP--;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Decrememnt after writing memory.<br />&nbsp; &nbsp;if(SP == 0x00FF) SP = 0x01FF;<br />}<br /><br />const unsigned char cpu::popStack(memory* memory,ppu* ppu)<br />{<br />&nbsp; &nbsp;SP++;<br />&nbsp; &nbsp;if(SP == 0x2000) SP = 0x0100;<br />&nbsp; &nbsp;return( memory-&gt;readRAM(SP, ppu) );<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Aug 26, 2013 11:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">if(SP == <strong>0x2000</strong>) SP = 0x0100;</div><br />There's the problem, 0x2000 instead of 0x200.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Wed Aug 28, 2013 1:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Of course it was a dumb mistake like that.  I checked that function multiplie times and missed it.  Now I passed, which means my CPU checks out.<br /><br />After comparing my VRAM dump of Donkey Kong to the one posted earlier in this thread, I'm way off.  I'm not exactly sure why, though.  I went through and rechecked how all the registers worked and how nametable mirroring worked on the wiki to make sure my code looked ok.  My function that writes to VRAM in my memory class looks ok, so I'm thinking that maybe my ppu is somehow at an incorrect address when I go to write data to VRAM.  Maybe if I ask these few questions I'll be closer to figuring out why my VRAM isn't being filled correctly.<br /><br />1. What is the ppu address supposed to be at startup?  Currently I'm starting it up at $2000, but I have no idea if it matters or not.<br />2. Should the ppu be doing its normal rendering operations during the first few screens at startup?  Right now, mine starts fetching data/shifting registers/outputting pixels from the instant the emulator starts.  To me, this seems like it would be wrong since the game is going to be polling $2002 until Vblank happens - which means that nothing but the chr-rom will actually be filled.  Could my ppu address be incorrect because I'm incrementing it from the get go?<br />3. The only way the game can fill up VRAM is by writing the address it wants to fill with data at $2006 and then the writing data to $2007, correct?<br /><br />This is my code to fill VRAM:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void memory::writeVRAM(unsigned short address, unsigned char &amp;data)<br />{<br />&nbsp; &nbsp;//Address above 0x3FFF wrap around between the 0x0000 and 0x3FFF range.<br />&nbsp; &nbsp;address &amp;= 0x3FFF;<br /><br />&nbsp; &nbsp;if(address &gt;= 0x2000 &amp;&amp; address &lt;= 0x2FFF)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;if(horizontalMirror) <br />&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//$2000 = $2400 and $2800 = $2C00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(address &lt; 0x2400)&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Address in first nametable<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x400&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x1000&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x1400&#93; = data;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else if(address &lt; 0x2800)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address - 0x400&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0xC00&#93; = data;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Mirror for $2000 range<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x1000&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else if(address &lt; 0x2C00)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x400&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x1000&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(address &lt; 0x2B00) VRAM&#91;address + 0x1400&#93; = data;&nbsp; &nbsp;//No mirror above 0x2EFF<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address - 0x400&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(address &lt; 0x2F00) VRAM&#91;address + 0x1000&#93; = data;&nbsp; &nbsp;//No mirror above 0x2EFF<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0xC00&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else &nbsp; &nbsp;//Vertical mirroring<br />&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//$2000 = $2800 and $2400 = $2C00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(address &lt; 0x2400)&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Address in first nametable<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x800&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x1000&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x1800&#93; = data;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else if(address &lt; 0x2800)&nbsp; &nbsp;&nbsp; &nbsp;//$2400 range<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x800&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x1000&#93; = data;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(address &lt; 0x2700) VRAM&#91;address + 0x1800&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else if(address &lt; 0x2C00)&nbsp; &nbsp;&nbsp; &nbsp;//$2800 range<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address - 0x800&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x800&#93; = data;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Mirror for $2000 range<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x1000&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//$2C00 range<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address - 0x800&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(address &lt; 0x2F00) VRAM&#91;address + 0x1000&#93; = data;&nbsp; &nbsp;//No mirror above 0x2EFF<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;address + 0x800&#93; = data;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Mirror for $2400 range<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;}&nbsp; &nbsp;<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;else&nbsp; &nbsp;//Pallete write<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;//Pallete glitch where these areas of BG pallete are also copied to sprite pallete<br />&nbsp; &nbsp;&nbsp; &nbsp;if(address == 0x3F00 || address == 0x3F04 || address == 0x3F08 || address == 0x3F0C)<br />&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Sets and mirrors the data<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for(int i = address; i &lt; 0x4000; i += 0x20)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;i&#93; = VRAM&#91;i + 0x10&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Sets and mirrors the data<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for(int i = address; i &lt; 0x4000; i += 0x20)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM&#91;i&#93; = data;<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;}<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Aug 28, 2013 5:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The PPU begins with NMIs disabled and sprites and background disabled.  If that's not enough, the game will also likely disable NMIs and disable sprites and backgrounds immediately at boot.  So you'll be drawing a bunch of gray pixels (background color) until the game has really started up.  Also before the first frame has rendered completely, writes to 2000 and 2001 are ignored, so you can't enable NMIs or enable spites and backgrounds.<br />The Famicom is different in that the PPU is immediately ready after a system reset, so that's why games will disable NMIs and disable sprites and backgrounds.  While it doesn't matter on the NES, it does on the Famicom.<br /><br />Also, it sounds like you might be having problems with disabling rendering.  When rendering is disabled (sprites and backgrounds turned off), the PPU doesn't do any memory fetches, and doesn't automatically increment its addresses.  So at power on, it won't be incrementing the PPU address at all.<br /><br />Initial VRAM address simply doesn't matter, nothing relies on it at all.  But it's supposed to be 0000.<br /><br />Also, remember that the first 2006 write sets the high byte, and the second 2006 write sets the low byte.  It's the only Big Endian part of the entire system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Aug 28, 2013 5:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dartht33bagger wrote:</div><div class="quotecontent">1. What is the ppu address supposed to be at startup?  Currently I'm starting it up at $2000, but I have no idea if it matters or not.<br />2. Should the ppu be doing its normal rendering operations during the first few screens at startup?  Right now, mine starts fetching data/shifting registers/outputting pixels from the instant the emulator starts.  To me, this seems like it would be wrong since the game is going to be polling $2002 until Vblank happens - which means that nothing but the chr-rom will actually be filled.  Could my ppu address be incorrect because I'm incrementing it from the get go?<br /></div><br />Both questions answered in the Wiki: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_power_up_state">http://wiki.nesdev.com/w/index.php/PPU_power_up_state</a><!-- m --><br /><br />Dwedit's comments on Famicom vs. NES apply as well, naturally.<br /><br />Also, the above &quot;VRAM writing code&quot; (which is really just your code used to handle mirroring and certain PPU memory regions) sheds absolutely no light on how you're handling writes to <a href="http://wiki.nesdev.com/w/index.php/PPU_registers" class="postlink">$2000, $2005, $2006, and $2007</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 28, 2013 6:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The way you're handling mirroring appears sort of suspect. You're executing each write more than once into a space larger than the actual memory. But most ASIC mappers can change the mirroring at runtime, and when it changes, games expect the existing data to get moved around. Say a program writes the following to the nametables while mirroring is set to vertical (not to scale):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Data wri&nbsp; tten to<br />one name&nbsp; table<br />stays th&nbsp; ere when<br />nametabl&nbsp; es move.<br /><br />Data wri&nbsp; tten to<br />one name&nbsp; table<br />stays th&nbsp; ere when<br />nametabl&nbsp; es move.<br /></div><br />If the program then proceeds to switch the mirroring to horizontal, it expects the data to instantly become logically rearranged as follows:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Data wri&nbsp; Data wri<br />one name&nbsp; one name<br />stays th&nbsp; stays th<br />nametabl&nbsp; nametabl<br /><br />tten to&nbsp; &nbsp;tten to<br />table&nbsp; &nbsp; &nbsp;table<br />ere when&nbsp; ere when<br />es move.&nbsp; es move.<br /></div><br />Rad Racer relies on this, as do a lot of games that use a status bar.<br /><br />You'll especially notice this when you try to implement one-screen mirroring as used by mapper 7 and some MMC1 games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Aug 28, 2013 9:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tepples has a pretty good point. Mirroring doesn't mean that the data is written to multiple locations... it means that there's only one physical location, which is accessed through multiple addresses. In emulators this is often implemented with pointers, which can be changed to point anywhere you want (and like tepples said, many mappers do constantly change the mirroring settings as they run).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Wed Aug 28, 2013 1:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I completely forgot that I could use pointers to reference data pieces inside of an array.  I'll come home and re-write my mirror functions accordingly later tonight with pointers.<br /><br />Here is how I handle writes to registers for those who asked:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">switch(address)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0x2000:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress &amp;= ~0x0C00;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Clears bits 10 and 11<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress |= ((data &amp; 0x03) &lt;&lt; 10);&nbsp; &nbsp;//Shifts the nametable select bits to bit 10 and 11 in the temp address<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0x2005:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(ppu-&gt;writeToggle)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress &amp;= 0x8C1F;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Makes bits 5-9 and 12-14 zero<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress |= (data &amp; 0xF8) &lt;&lt; 2;&nbsp; &nbsp;&nbsp; &nbsp;//Shifts the data to fill bits 5-9<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress |= (data &amp; 0x07) &lt;&lt; 12;&nbsp; &nbsp;&nbsp; &nbsp;//Shifts the data to fill bits 12-14<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;writeToggle = false;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress &amp;= ~0x001F;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Makes the first 5 bits zero<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress |= (data &amp; 0xF8) &gt;&gt; 3;&nbsp; &nbsp;&nbsp; &nbsp;//Gets the last 5 bits for the address<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;fineXScroll = data &amp; 0x07;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Gets the first three bits<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;writeToggle = true;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0x2006:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(ppu-&gt;writeToggle) <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress &amp;= 0xFF00;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Clears the lower 8 bits<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress |= data;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Lower byte of address<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuAddress = ppu-&gt;ppuTempAddress;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Set after temp address is filled<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;writeToggle = false;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress &amp;= 0x00FF;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Clears upper 8 bits<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;ppuTempAddress = (data &amp; 0x3F) &lt;&lt; 8;&nbsp; &nbsp;&nbsp; &nbsp;//Upper piece of address<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ppu-&gt;writeToggle = true;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0x2007:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;writeVRAM(ppu-&gt;ppuAddress, data);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(RAM&#91;0x2000&#93; &amp; 0x04) ppu-&gt;ppuAddress += 32;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Checks increment bit<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else ppu-&gt;ppuAddress++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Aug 28, 2013 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need some help with the PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Comment in passing (have much to do today, sorry) -- thumbs up to using pointers for the mirroring.  That's absolutely the proper way to do it, ditto with a large amount of mapper implementation (PRG/CHR page selection).  If I see <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">memcpy&#40;&#41;</tt> I will stab.  ;-)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>