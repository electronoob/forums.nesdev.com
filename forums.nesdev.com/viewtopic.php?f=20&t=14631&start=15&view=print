<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Tetris Adding SRAM Saving Questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Tetris Adding SRAM Saving Questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=14631">http://forums.nesdev.com/viewtopic.php?f=20&amp;t=14631</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Wed Aug 24, 2016 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Tetris Adding SRAM Saving Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">TravistyOJ wrote:</div><div class="quotecontent">everdrive seems to present RAM as FF's, which I imagine is what a brand new game would have on it's SRAM. </div><br />No, SRAM is essentially random on power-up. Each bit cell consists of 2 nand gates connected in feedback. When powered, the feedback keeps the cell stable. But on power-up, a cell has no defined state and could stabilize to either state. Different cells in the array can be more likely to stabilize to either 0 or 1 depending on the design of the chip, which gives interesting patterns in uninitialized SRAM, but it will typically not be all 1 or all 0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>suFami</b> [ Tue Aug 30, 2016 12:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Tetris Adding SRAM Saving Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hey guys, I am Capaneus on the romhacking forum, the guy who started working on this a couple of years ago, and unfortunately got sidetracked by other projects/life. Coincidentally, I thought about this a couple of days ago and found this thread. First, I thought I'd do a little more experimentation, and after fixing the checksums, I've found my original changes do work on real hardware on an EverdriveGB with game type 09 (ROM+RAM+BATTERY) so long as I seed the .srm file with zeros. Obviously, that's just part of the solution as a real SRAM game would be able to initialize the ram (everdrive seems to present RAM as FF's, which I imagine is what a brand new game would have on it's SRAM. I'm completely new to asm, so I imagine you are already farther along on that front, but I wanted to pass along my discovery.</div><br />Hey Capaneus, good to see you here! I wouldn't have even attempted this stuff if you hadn't already wrote all those notes in that thread, so thanks! I'm surprised you got a working way to get SRAM working as a type 09 on the Everdrive. Nothing I've done so far has worked. Just FFFFFF's and and lines of a strange symbol. Would you be willing to share an ips patch of your working rom? Your method of seeding the SRM with zeroes is working for me on bgb, but not the Everdrive.<br /><br />I still plan on writing new ASM code that works with nitro2k01's code he wrote for me. I've just been busy these last couple of weeks (even neglecting to check the thread for updates). When I get some time I will be doing some ASM reading and learning and hope to take a crack at writing the code.<br />Thanks again nitro2k01 for all the help and patience.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>suFami</b> [ Wed Sep 07, 2016 10:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Tetris Adding SRAM Saving Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Got some good news everyone. I've finally gotten a working version of Tetris that save high scores working on real hardware!<br /><br />So when I read that Capaneus got a Type 09 version to save on his Everdrive GB it made me wonder what I was doing wrong. So I decided to try again. Seems it has been working this whole time, but I had the srm file (filled with zeroes) in the wrong SAVES directory on my card so it wasn't seeing the zeroed out save file. After I sorted that out it worked perfectly! I can save high scores for both Type-A and Type-B. I tested it on the Super Gameboy because it will boot the game even if the checksum header is wrong, which is not the case on the actual handheld. It even works WITHOUT the SRAM enable code inserted. I tried to change the rom type to 03h (MBC1) and insert the enable SRAM code<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Enable SRAM.<br />&nbsp; ld a,$0A<br />&nbsp; ld &#91;$0000&#93;,a</div><br />to see if that would work, but it didn't. I replaced the useless jump that nitro2k01 pointed out at address $0058 and put in this code. Not sure if you can call backwards into the rom? Or if this even worked?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">at $0058:<br />CALL $0010; free space<br /><br />at $0010:<br />ld a, 0a<br />ld (0000), a<br />jp $005b; jump back to original code</div><br />It probably showed FFFFFF's in the score spots because of the reasons nitro2k01 explained before that there is no code to zero out the SRAM at the first initial bootup of the game.<br /><br />So it was back to a type 09h rom. I needed to figure how to correctly recalculate a new checksum. The formula is this:<br />&quot;x=0:FOR i=0134h TO 014Ch:x=x-MEM[i]-1:NEXT&quot;<br />I cannot understand this for the life of me. I even tried to convert the hex bytes to binary and then add them up that way (which requires inverting the binary) since I read how to do it that way on the gbdev thread concerning calculating checksum headers. This did not work either. So then I read that a program from the year 2000 called RGBFIX can repair Gameboy checksum headers as one if it's features. However, I couldn't get this program to work. I was minutes away from downloading a Virtualbox to try and run it that way when I read on another GB thread about bgb having a checksum fixer.<br /><br />It's as simple as opening the debugger in bgb, going to File -&gt;  Fix checksums. Then saving the GB file. This repairs both the rom checksum and header checksum. Honestly, I spent hours trying to recalculate this checksum and it only took seconds in bgb and was right in front of me this whole time. So frustrating, haha. Good news is that the game will now boot on the original handheld and any other device that runs Gameboy games (Pocket, Color, GBA).<br /><br />So the only bad news is that it still requires a zeroed out SRM save file to work at first. I would upload this to romhacking.net (with credit to everyone here), but I still want to read up on ASM and see if I can get this working as a proper MBC1 game so that it doesn't need a zeroed out save file and works from the get go. Not to mention I would feel bad that nitro2k01 graciously wrote all of that code just for it to go to waste.<br />For people who are watching the thread and want to download it, if I can't get it working as a MBC1 game in a month or two I will upload what I have now as a patch for everyone (including a zeroed out save file).<br /><br />I took a look at nitro2k01's code again and if I can manage to correctly insert it into the rom I may not have to write new code for the game to save high scores to SRAM since it's already doing that directly (reads/writes them to $A000 and $A654 instead of $D000 and $D654). This is what I'll be looking into next.<br /><br />Also, I tried to do some research on the music side of things to see about putting the Type-A song from v1.0 into the v.1.1 of the game. I've been looking over many documents and I can't tell if there's a specific register that the Gameboy calls for music. I've read up before on MSU-1 for the SNES and how the SNES reads the music track from $2140-$2143. If it doesn't directly load the track number to be played into $2140 you can step back a bit into the code and find what register it uploads the track to. This is very easy with the snes9x Geiger debugger, but honestly the bgb debugger is a mystery to me.<br /><br />So I have no idea where to find the music data for the Type-A song in v1.0, but I had an idea. The GBS music format takes the game rom and condenses it down to only the essential game music. So I downloaded GBS files of v1.0 and v1.1 and compared them in a hex editor and found a large chunk near the beginning which is different and probably the data for the Type-A song. If I look up those hex bytes in the actual rom and then go to them in the debugger I see operations like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ROM1:6F32<br />ld&nbsp; (hl), 6CC<br />inc&nbsp; c<br />jr&nbsp; 6F3b<br />ld a, (bc)<br />inc d<br />jr, z, 6F8B<br />and&nbsp; b<br />ld&nbsp; e, 3C<br />ld&nbsp; a, b<br />nop<br />ld&nbsp; c, 6F<br />ld&nbsp; sp, hl<br />ld&nbsp; a, h<br />rest 38<br />ld&nbsp; a,h<br />ld&nbsp; de, 217D<br />ld&nbsp; a, l<br />nop<br />dec&nbsp; b<br />ld&nbsp; l, a<br />ld&nbsp; c, b<br />ld&nbsp; a, (hl)<br />ld&nbsp; b, h</div><br />etc.<br /><br />I can't really read code so well so for all I know this doesn't have to do with loading the data for Type-A or the data itself. However, in a GBS document about ripping sound from the rom I found this which looks familiar to the code I wrote above:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; ld&nbsp; &nbsp; &nbsp; hl,songs&nbsp; &nbsp; &nbsp; &nbsp; ; point to selection table<br />&nbsp; &nbsp; &nbsp; &nbsp; add&nbsp; &nbsp; &nbsp;a,l&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; add accumulator to L<br />&nbsp; &nbsp; &nbsp; &nbsp; ld&nbsp; &nbsp; &nbsp; l,a<br />&nbsp; &nbsp; &nbsp; &nbsp; jr&nbsp; &nbsp; &nbsp; nc,$+1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; increment H on overflow; if all table entries<br />&nbsp; &nbsp; &nbsp; &nbsp; inc&nbsp; &nbsp; &nbsp;h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; have same address MSB, you can eliminate this<br />&nbsp; &nbsp; &nbsp; &nbsp; ld&nbsp; &nbsp; &nbsp; a,(hl)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; read song number from table into accumulator<br />&nbsp; &nbsp; &nbsp; &nbsp; jp&nbsp; &nbsp; &nbsp; init&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; jump to the init routine<br />songs:&nbsp; .db&nbsp; &nbsp; &nbsp;3,1,5,4,2&nbsp; &nbsp; &nbsp; &nbsp;; selection sequence table</div><br /><br />It doesn't seem there's a set place where music data is stored either. The rom maps for Pokemon Red and Battletoads are uploaded to datacrystal.romhacking.net and their music data are in totally different places.<br />I will open a separate thread about the music because the people who are experts on the Gameboy's sound hardware and GBS ripping and whatnot are probably not reading this thread because SRAM saving is something that might not interest them and this thread is about SRAM saving anyways.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TravistyOJ</b> [ Sun Sep 18, 2016 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Tetris Adding SRAM Saving Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey there, sorry it took so long for me to check in, I was on a long unplugged vacation, but I'm back.  For any interested, you can find the whopping 34 byte patch here: <!-- m --><a class="postlink" href="http://downloads.travistyoj.com/tetris-sram-support.ips">http://downloads.travistyoj.com/tetris-sram-support.ips</a><!-- m --><br /><br />I'm gunna continue fiddling with the ASM already provided in this thread to get it to support SRAM init.  Thanks!

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>