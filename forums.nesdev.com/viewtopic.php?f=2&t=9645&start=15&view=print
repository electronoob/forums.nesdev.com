<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What is the best way to delay events?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What is the best way to delay events?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9645">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9645</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 29, 2012 6:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In the object system of one of my NES games, each object has a &quot;state&quot; and a &quot;state timer&quot;. The state timer can be programmed to subtract 1 every frame, or every tenth of a second (6 frames on NTSC or 5 on PAL), or whatever.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sun Dec 30, 2012 12:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A method I've used for timed events is to use a small structure of addresses with counters. Every NMI they are all checked: Any counters that are set are decremented and any that hit zero are called (the addresses part). The callback procedure that is called can then do it's thing, and reset it's timer (or not). This way, you can setup a timed events and not have to check their timers in your main logic once they are setup.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>johnnystarr</b> [ Tue Jan 15, 2013 9:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">A method I've used for timed events is to use a small structure of addresses with counters. Every NMI they are all checked: Any counters that are set are decremented and any that hit zero are called (the addresses part). The callback procedure that is called can then do it's thing, and reset it's timer (or not). This way, you can setup a timed events and not have to check their timers in your main logic once they are setup.</div><br /><br />This is a really interesting method.  I have a question about the implementation though.<br />Say I have a table of events, the fields would have the counter and the address of the event to fire:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">table &#91;frequency&#93;&#91;current count&#93;&#91;address LSB&#93;&#91;address MSB&#93;<br /><br />every 3 seconds dispatch sub routine at $3300<br />&#91;03&#93;&#91;00&#93;&#91;$00&#93;&#91;$33&#93;<br /><br />every 2 seconds dispatch sub routine at $330A<br />&#91;02&#93;&#91;00&#93;&#91;$0A&#93;&#91;$33&#93;<br /></div><br /><br />So we iterate through our &quot;active&quot; events and decrement the corresponding counter, once we reach 0 we do this?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jmp (vector)<br /></div><br /><br />I've read about indirect <strong>JMP</strong>, and I don't have a problem using it.  However, I'm not sure <br />how to handle it properly.  For instance, how do I return control to where I left off?  Is there some<br />way to combine <strong>JMP</strong> with <strong>RTS</strong> by pushing the program counter on the stack?<br /><br />I'm also open to any suggestions if this approach is stupid <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Jan 15, 2013 9:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">johnnystarr wrote:</div><div class="quotecontent">For instance, how do I return control to where I left off?  Is there some<br />way to combine <strong>JMP</strong> with <strong>RTS</strong> by pushing the program counter on the stack?</div><br />Sure there is:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr Jump<br />&nbsp; &nbsp;(...)<br />Jump:<br />&nbsp; &nbsp;jmp (vector)</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>johnnystarr</b> [ Tue Jan 15, 2013 9:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">johnnystarr wrote:</div><div class="quotecontent">For instance, how do I return control to where I left off?  Is there some<br />way to combine <strong>JMP</strong> with <strong>RTS</strong> by pushing the program counter on the stack?</div><br />Sure there is:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr Jump<br />&nbsp; &nbsp;(...)<br />Jump:<br />&nbsp; &nbsp;jmp (vector)</div></div><br /><br />I see that I didn't explain my intention clearly, thats on me...<br /><br />I want to use the vector within the table in a polymorphic way.  The equivalent in C would be<br />function pointers.  During runtime, there could be any vector stored in the table.  This way, I can<br />add whichever sub routine I fancy.<br /><br />In your above example, I don't see how that is possible.  Could you clarify?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jan 15, 2013 9:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You basically want a JSR (vector). The above does that. First it does the JSR part, then it uses JMP (vector) to do the (vector) part of the JSR. Now it's at the routine like you want, and an RTS returns to just after the JSR like you want.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Jan 15, 2013 10:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I use this to accomplish it:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #&gt;(return-1)&nbsp; &nbsp; &nbsp; &nbsp; ; set return address<br />pha<br />lda #&lt;(return-1)<br />pha<br /><br />lda vectorHI,y<br />pha<br />lda vectorLO,y<br />pha<br /><br />rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; jump<br /><br />return:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; return here<br /></div><br /><br />I have a 'module' for this. I like to set things up and treat them as generic system functions, so my main code would access this through: <br /><br />add_vector (send address, default frames) (This will adjust address so it works with rts)<br />reset_vectors (clear all)<br />The routine that is called needs to do this:<br />set_frame_counter ( send new frames to wait, zero = clear this callback)<br /><br />Actually, if the routine in question does not call set_frame_counter it will default to resetting to the last counter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 16, 2013 4:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">johnnystarr wrote:</div><div class="quotecontent">I want to use the vector within the table in a polymorphic way.  The equivalent in C would be<br />function pointers.  During runtime, there could be any vector stored in the table.  This way, I can<br />add whichever sub routine I fancy.</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx #05 ;vector index<br />&nbsp; &nbsp;jsr CallVector<br />&nbsp; &nbsp;(...)<br />CallVector:<br />&nbsp; &nbsp;lda VectorTableLO, x<br />&nbsp; &nbsp;sta vector+0<br />&nbsp; &nbsp;lda VectorTableHI, x<br />&nbsp; &nbsp;sta vector+1<br />&nbsp; &nbsp;jmp (vector)</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jan 16, 2013 6:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Polly want a morphism? Need some pointers on how to call functions? Start at <a href="http://wiki.nesdev.com/w/index.php/Jump_table" class="postlink">Jump table</a> and <a href="http://wiki.nesdev.com/w/index.php/RTS_Trick" class="postlink">RTS Trick</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Wed Jan 16, 2013 11:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />We've been here before.<br /><br />I can't speak for Blargg of course but I assume he's pointing out<br />a general form for one way to do it and expecting you to be able<br />fill in the details.<br /><br />And I don't see it in the Wiki.<br /><br />If you've got a few bytes in RAM to devote to self-modifying code,<br />you could do something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;lda function_number * 2&nbsp; ; or you could do the * 2<br />&nbsp;jsr DISPATCH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; in DISPATCH with an asl<br /><br />.<br />.<br />DISPATCH<br />&nbsp;sta DISPATCH + 4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; + 4 assumes absolute addressing<br />&nbsp;jmp(xx00)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; and DISPATCH not on zero page<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; xx is the DISPATCH table page<br /></div><br /><br />Two bytes per target address (hence the * 2) gives you room for 128 entries in the table.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Wed Jan 16, 2013 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This seems to be a question about code for handling game objects.<br />Doing stuff like this is really easy if you have the &quot;yield&quot; operation.</div><br /><br />So true. I use it for my AI as it is much more intuitive and readable than designing your state machines explicitly.<br /><br />Here's my variant:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">YieldSub:<br />&nbsp; &nbsp; pla<br />&nbsp; &nbsp; sta actorAddrLo,x<br />&nbsp; &nbsp; pla<br />&nbsp; &nbsp; sta actorAddrHi,x<br />&nbsp; &nbsp; rts<br /><br />.MACRO YIELD<br />&nbsp; &nbsp; jsr YieldSub<br />.ENDMACRO<br /><br />KillSelfSub:<br />&nbsp; &nbsp; pla<br />&nbsp; &nbsp; pla<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; sta actorAddrHi,x<br />&nbsp; &nbsp; rts<br /><br />.MACRO KILL_SELF<br />&nbsp; &nbsp; jmp KillSelfSub<br />.ENDMACRO<br /><br />UpdateActors:<br />&nbsp; &nbsp; ldx #MAX_ACTORS-1<br />@ActorLoop:<br />&nbsp; &nbsp; lda actorAddrHi,x<br />&nbsp; &nbsp; beq :+<br />&nbsp; &nbsp; jsr UpdateActor<br />:<br />&nbsp; &nbsp; dex<br />&nbsp; &nbsp; bpl @ActorLoop<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />UpdateActor:<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; lda actorAddrLo,x<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; rts<br /></div><br /><br />And for checking animations which block user input:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.MACRO CHECK_ANIMATION_DONE<br />&nbsp; &nbsp; jsr CheckAnimationDoneSub<br />.ENDMACRO<br /><br />.macro WAIT_UNTIL_ANIMATION_DONE<br />&nbsp; &nbsp; .LOCAL WaitLoop<br />&nbsp; &nbsp; WaitLoop:<br />&nbsp; &nbsp; &nbsp; &nbsp; YIELD<br />&nbsp; &nbsp; &nbsp; &nbsp; CHECK_ANIMATION_DONE<br />&nbsp; &nbsp; bne WaitLoop<br />.endmacro<br /></div><br /><br />The obvious limitation is of course that in contrast to the yield found in high-level languages, you need to have all the AI update code for an actor type in one long function level and remember to never yield in a subroutine. It is of course possible to make this more generic and handle N levels of subroutine calls for each actor, but not easy to do so in a way that is both efficient and cheap on memory usage AFAICT...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jan 16, 2013 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Personally I did something that allows you to &quot;Yield&quot; (I called this &quot;Wait but it's the same really&quot;) at any level. I really needed it for my boss (yes, for now my game only have one boss, although failing at coding the 2nd boss is what kept me away from my own game for 3 years, no joke).<br /><br />I don't rememeber how exactly I coded it, but basically all objects are given 8 bytes (aprox.) of stack somewhere in the RAM. They also all have a stack count variable. Before calling those objects, I push N bytes from the object's stack to the real stack, and RTS. When an object call the &quot;Yield&quot; function, I pull bytes and copy them to object's internal stack until the stack pointer reach $ff (the objects are called at the lowest level).<br /><br />Now that I think about it, it would be more efficient to simply change the stack pointer to call objects. However I'd have to reserve more than 8 bytes per object, just in case my lag games and an NMI triggers while an object is running... it'd be a shame to crash for this, isn't it ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Wed Jan 16, 2013 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, 8 bytes means four levels of stack which should be enough for most purposes. But it also means using a lot more RAM. You'll probably need about 16-32 actors in a game in general, so that's between 128-256 bytes for the stack. Fine if you are using extra CPU-RAM for your project, but too costly if you're not <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Personally I think the limitation of one stack level is not that bad in practice. Most object's AI are extremely simple, and for the more complicated ones I think I can spend the extra hassle, and use some explicit state variables where necessary. I might change my mind if my game's mechanics was different though, and really needed the extra complexity.<br /><br />It's also worth noting that it's extremely unlikely to yield more than 255 times in an actors subroutine, and the yield spots are fixed addresses in ROM known at assembly time. So if you are low on RAM but not on ROM then instead of storing the address, you could have each yield statement just save the address at assembly and build a table of yield spots for each actor. Then your yield statement would handle a set of fixed yield spots instead, and store the address to resume at in just 1 byte.<br /><br />I have also started using Movax12's excellent high-level macros for ca65 extensively in my AI code, along with a lot of other suboroutines and macros to simplify and unify the AI code. It provides you the retro equivalent of a scripting language for your game AI, where hand-coding everything for best performance is secondary and productivity counts. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Jan 16, 2013 4:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm trying to understand how the yield idea works vs the method I've posted. I suppose it's similar, but with yield, you are marking a location to continue at next time? Does all game code get called in this way? I'm thinking this could be easily combined with timers for more flexibility.<br /><br />Thank you for the feedback regarding my macro code, Banamos.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jan 17, 2013 1:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the best way to delay events?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So if you are low on RAM but not on ROM then instead of storing the address, you could have each yield statement just save the address at assembly and build a table of yield spots for each actor.</div><br />Well I'm in the opposite case. I'm trying to make my whole game fit in 32kb ROM, so I'm very grim for ROM, but I still have ~512 bytes free at BSS RAM (I use $200-$5ff currently).<br /><br />Also I only have 6 actors + the player, so it's all right.<br /><br />EDIT ---<br /><br />I just had a genius idea. That way I will be able to simplify my code to the maximum (= minimize ROM usage) AND save RAM bytes.<br /><br />First I make several assumptions (all of them are already true for my game) :<br />1) You must only call the &quot;objects&quot; at one place in the main program, and it should be at the very root of the main program (SP = $ff)<br />2) Most objects in the game have very simple programs, and do not need to yield somewhere else that at their root of their respective programs.<br />3) However, rare objects are allowed to yield at any level, at the only condition they return to their root level before being &quot;destroyed&quot;. Only one of such objects should exist at a time in memory. Typically, this is for bosses.<br /><br />Then you can just call the yield routine from the bosses (or any other complex objects), at any level, without changing <em>anything</em>. No need for an extra stack. The yield routine will pull the current CPU address, store it in the object's table (which is no stack, just 2 bytes), and return. Of course, instead of returning to SP = $ff like it usually does, it just returns with extra bytes pushed on the stack. However, this will not affect the main program in any way. It will just continue to function normally, with those extra bytes pushed below it.<br /><br />When the object's AI is called again the stack is restored to what it has been before the yield command, and it can effectively push bytes by returning to the object's AI root level, or whathever.<br /><br />In other words, an object on the screen (typically boss) can freely use the stack and yield, while the other object can freely use the stack, but should only yield from their root level. This is really good and I'm going to implement this <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>