<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>74</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Oct 29, 2013 7:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">so when drawing two columns at once... you have to wait on the columns to enter the rightmost attribute table spot before coloring them?  That would be kind of odd.  While playing <em>Super Mario Bros.</em> there wasn't any flickering of the last two columns that I could see.</div><br />Momentary miscoloring occurs at the seam. <em>Super Mario Bros.</em> arranges its nametables horizontally (&quot;vertical mirroring&quot;), letting it keep the seam offscreen. Go play <em>Super Mario Bros. 3</em> once if you want to see color artifacts. <em>SMB3</em> uses two vertically arranged nametables (&quot;horizontal mirroring&quot;) for a 27-metatile-tall playfield plus status bar at the cost of miscoloring the tiles at the far right.</div>When scrolling the screen along to the right using vertical mirroring how does the correct coloring happen when there arent any attribute tables offscreen to color?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 29, 2013 8:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Because when the nametable arrangement matches the scrolling direction, as in SMB1 and Contra (both of which use vertical mirroring), there are attribute tables offscreen. Each nametable has its own attribute table. The attribute table for $2000 is at $23C0-$2FFF, the attribute table for $2400 is at $27C0-$27FF, the attribute table for $2800 is at $2BC0-$2BFF, and the attribute table for $2C00 is at $2FC0-$2FFF.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Oct 29, 2013 9:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah!  Ok I think I get it now... you draw 2 16bit columns to 2400's nametable... and then color it's first 32 bit attribute table column... and then scroll to the right?  <span style="color: #00BFFF">Thank you tepples!</span> <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br /><span style="color: #00BFFF">forgetfulness.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Oct 30, 2013 3:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm trying to create a variable that will have the most rescent column drawn incase my method trys to redraw the same column again.  It shouldn't take over 3 hours to do that.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br /><span style="color: #FFBF80">No it shouldn't take 3 hours... but it did today.  Now each column is drawn only once.</span> <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><span style="color: #FFBF80">edit.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Nov 01, 2013 4:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was going to make a complaint about how it is unfair that I can't press right on my controller and scroll into back into nametable 0 and see why, why do 7 RAMbufferw1 columns appear after it draws my RAMbufferw0 column.  Why?! And then suddenly I realized that yes it's possible to make my computer think I pressed right on my controller... <strong><span style="color: #FFBF00"><span style="font-size: 150%; line-height: normal">ANYTHING IS POSSIBLE!!</span></span></strong>  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> At least that is what I've just realized and I wanted to share this with anyone who is just starting game creation like me.  Tomorrow is going to be incredible cause I will... I still think... I'll know why 7 RAMbufferw1 collumns are drawn after it draws my RAMbuffer0 column!  I'm gonna change some of the status flags and the values in some of my registers... so it will appear that I've scrolled into nametable 0 again! ...it is 6:00pm here in Texas time to eat. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />edit: It's a bit hard to know the time right now... we gain an hour at 2:00am.. it's Sunday morning at 1:25am now.  Want to say that anything is not possible.  Yawn... goodnight.<br /><br />edit2:  Worked for 5 hours and 31 mins today.  I've made progress!  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" />  Anything may be possible... that's correct. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Now it's 10:39pm Sunday night.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Nov 04, 2013 6:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now, here is my problem.  The screen looks like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">121212121234<br />121212121234<br />121212121234<br /></div><br /><br />and now I want it to look like this<br /><s><div class="codetitle"><b>Code:</b></div><div class="codecontent">123412341234<br />123412341234<br />123412341234<br /></div></s><br />edit: like this <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">123456789ABC<br />123456789ABC<br />123456789ABC<br /></div><br /><br />*sigh...  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> this is the same problem I had on page 73.  Well almost the same.  I bet I'll do better with this tomorrow. : )<br /><br />edit2: Guess what happened to me.  There must be an idea you could find for me... I increased the divide by 8 to be a divide by 16.  And suddenly my screen turned into what I have been searching for: <div class="codetitle"><b>Code:</b></div><div class="codecontent">123456789ABC<br />123456789ABC<br />123456789ABC<br /></div> Every column appeared at the correct column spot!  But each column was shifted up a metatile... so the top line of metatiles appear at the bottom of the screen with everything shifted up to be on top of them. (Our metatiles  are 16x16pixels.)  From all of my experiences with my level shifting up... that tells me that something is not correct.  As time has continued on... the game being run and I'm traveling right.  After looping the tiles are shifted a metatile higher... then another loop shifts them a metatile even higher.  You must have experienced this at one point in your game creating career.  So, anyways, then I increased the divide by 16 to be a divide by 32.  And every column is perfectly drawn now... now nothing is shifted up but each column is not correct.  It looks like somone has smeared my sister's level... it's all too wide looking.<br /><br />edit3: I'm looking forward to solving this.  Yesterday, I wasn't detailed with the looping part.  By looping I mean that I'm running along and columns are being drawn... it's when they are redrawn... that's the loop; each time it loops the columns are raised a metatile.  Noone else has experienced this?   <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Nov 14, 2013 10:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">...I wasn't detailed with the looping part.  By looping I mean that I'm running along and columns are being drawn... it's when they are redrawn... that's the loop; each time it loops the columns are raised a metatile.  Noone else has experienced this?   <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /></div>  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> <br /><br />Ok, so you know, today, I successfully rewrote my <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">draw_me_a_column</tt> method.  The main code loop appears only once now. It is run twice... one time for the even column... and then one more time for the odd column. <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;************************************************************************<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;you must dynamically modify p0ointer before jsring draw_me_a_column.<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;lda #&lt;RAMbufferw1<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;sta p0ointer<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;lda #&gt;RAMbufferw1<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;sta p0ointer+1<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; destroys a x and y&nbsp; &nbsp;ooooooooooohhhhh&nbsp; nooooooooooooooooo<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;************************************************************************<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;draw_me_a_column: ;(please)<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;increase valid_left by 1<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; inc valid_left <br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;and draw column valid_left+31<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;set the address<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C6E2 20 AC C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr next<br />0C6E5 A5 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda columnLo<br />0C6E7 C5 45&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cmp playdough<br />0C6E9 F0 39&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; beq +end<br />0C6EB E6 47&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;inc t10 ;sets temporary zeropage variable to 1<br />0C6ED A5 3A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda columnHi<br />0C6EF 8D 06 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $2006<br />0C6F2 A6 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx columnLo<br />0C6F4 8E 06 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stx $2006<br />0C6F7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C6F7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C6F7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;start with even column part<br />0C6F7 4C 0C C7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jmp +even<br />0C6FA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C6FA A0 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -odd: ldy #59<br />0C6FC E8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;inx<br />0C6FD A5 3A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda columnHi<br />0C6FF 8D 06 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $2006<br />0C702 8E 06 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stx $2006<br />0C705 A9 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$00<br />0C707 85 47&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta t10<br />0C709 4C 0E C7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jmp +draw<br />0C70C A0 3A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +even: ldy #58<br />0C70E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+draw: ;draw 16bit column, even and odd parts<br />0C70E B1 43&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - lda (p0ointer),y&nbsp; ;RAMbufferw1, x<br />0C710 8D 07 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $2007<br />0C713 88&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dey<br />0C714 88&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dey ;subtract 2 to stay in even or odd column<br />0C715 10 F7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bpl -<br />0C717&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C717 A5 47&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda t10<br />0C719 F0 03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;beq +complete<br />0C71B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;now go back to odd column part<br />0C71B 4C FA C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jmp -odd<br />0C71E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C71E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+complete&nbsp; &nbsp;<br />0C71E A5 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda columnLo<br />0C720 85 45&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta playdough&nbsp; &nbsp; <br />0C722&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C722 E6 30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc valid_left<br />0C724&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C724&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C724 60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +end: rts ;end of draw_me_a_column scrolllandiii and vblank code<br /></div><span style="color: #FF0080"><span style="font-size: 150%; line-height: normal"><strong>YEAY!</strong></span></span>!  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /><br />So by the end a 16bit column is drawn.   But I don't understand why my columns are one-metatile-too-high... one of yall must have experienced your columns being one-metatile-too-high.  What did you do to fix this problem? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Nov 14, 2013 11:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">  ; destroys a x and y   ooooooooooohhhhh  nooooooooooooooooo</div><br />As a solo developer, I approve of this type of comment.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />Is the only problem that the columns are drawn too high? (One column or both?) Then check if what you're writing to $2006 is correct. Or check if what's written to $2005 is correct.<br /><br />How do you calculate columnLo and columnHi?<br /><br />What's &quot;next&quot; that you jsr to immediately?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Nov 15, 2013 1:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">  ; destroys a x and y   ooooooooooohhhhh  nooooooooooooooooo</div><br />As a solo developer, I approve of this type of comment.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> </div>  haha, I'm glad you approve. Thanks. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  <br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Is the only problem that the columns are drawn too high? (One column or both?)</div>Well there is a small extra grafiti that happens at the end after all the columns are drawn from that nametable.   Also currently I'm trying to think of my columns being drawn - each column is 16 pixels wide... according to tepples. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Then check if what you're writing to $2006 is correct. Or check if what's written to $2005 is correct.</div>  Ok, how could I check that? I am going to guess that I could run the debugger and see what value is written to the accumulator.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">How do you calculate columnLo and columnHi?<br /><br />What's &quot;next&quot; that you jsr to immediately?</div>  columnLo and columnHi are determined inside my next... that's what next does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Nov 15, 2013 2:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ok, how could I check that? I am going to guess that I could run the debugger and see what value is written to the accumulator.</div><br />Or check the code that sets the values that eventually end up getting written there. Like next! <br /><br />Is rendering disabled while this is happening? It may be taking too long if not. I dunno, I'm guessing at this point. I'm either missing something obvious or there's not enough info.<br /><br />When all else fails, just rewrite it. There's lots of tiny things you could do, like just have even first instead of jumping over odd to get to even only to branch back to odd. You may not need t10. CPY #$FF could work if I'm understanding it correctly. The last value of y before that loop ends for even is 0. DEY twice, get #$FE. For odd, it's one. DEY twice, get #$FF, so you may be able to detect it that way instead. A total rewrite can be freeing. No worries about noodling around code you don't want to break when adding new features.<br /><br />The first thing I'd do is make a loop that draws any one tile (say... #$FF. Any one that's different from the usual background) to the even column. This lets you be sure of two things. One: That you're getting the address correct for the update, and also that you're getting the number of loops correct. If it's too many updates, it will bleed into the next column, if you started in the wrong place it will be offset wrong.<br /><br />Then add the loop that draws any different tile (#$80 or anything you didn't use for even that's also different from the usual background) to the odd column. Again, it lets you be sure you're starting in the right place etc.<br /><br />After that, make it read from your buffer. If it was updating in the right places and right number of times before, but looks wrong after loading from the buffer instead of using a fixed tile then something is wrong with whatever code fills the buffer (or sets up the pointer TO the buffer)<br /><br />I don't know what your process was for the current routine (haven't been following too closely recently), but never ever try to do too many things before verifying previous parts work. Lots of things could be wrong, and it makes things easier for both me and you to look at when you know &quot;Column position worked, then I added the buffer code and it looks wrong.&quot; Then we at least know what to look at.<br /><br /><span style="color: #FF2020">Edit: You know what? You can use the same steps to just work backwards, instead of rewriting.</span> After even, add lda #$FF. After odd, add lda #$80. (or whatever tiles you're using.) Comment out &quot;- lda (p0ointer),y  ;RAMbufferw1, x&quot;. That will draw just columns of one tile so you can make sure your offsets/number of loops is correct. You can tell by the tile which is wrong (even or odd), if either one is. (Also, check in FCEUX's nametable viewer, on the off chance your emulator was clipping the top 8 pixels and you compensated for it or something.)<br /><br />If that looks right, the issue is either your buffer or using too much time (assuming rendering is enabled). To check if using too much time, just disable rendering before, and enable it after. If the nametables look right in the nametable viewer, it ain't that. (It also ain't that if rendering is already disabled. <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />)  Which leaves just whatever fills your buffer, or whatever sets up the pointer TO your buffer.<br /><br />If it looks wrong after removing the buffer code, the issue is your number of loops, or what sets ColumnHi/ColumnLo. (Or maybe your vertical scroll value, you can check if it's that by looking at your nametables in the nametable viewer.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Nov 15, 2013 3:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sigh, well I feel that rewriting that wont help me.  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />   I strongly feel that the problem is with the code that fills the buffer.  My coding life all just hasn't been any good.  It seems frustrating  but you are right, there needs to be some check that will guarentee my code is correct.  I'm going to start with what you've suggested here... thank you very much Kasumi! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />edit: Ok very good I see your edit now!  This is going to work. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Thank you for being so helpful Kasumi! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />edit2: I have to go fix supper now... I don't understand why <br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">There's lots of tiny things you could do, like just have even first instead of jumping over odd to get to even only to branch back to odd. You may not need t10. CPY #$FF could work if I'm understanding it correctly. The last value of y before that loop ends for even is 0. DEY twice, get #$FE. For odd, it's one. DEY twice, get #$FF, so you may be able to detect it that way instead.</div>  Detect what instead? Um... I've got a good tile #7E that hasnt been used for the background.  Ooohh wait.  Ok you are talking about me not needing t10.  t10 is the way I've set it to know when to ignore my jump to -odd.  You are correct.. $FE is reached at the end of even and #FF is reached at the end of odd... so you are telling me that I might be able to use that check of Y with CPY #FF.  I do understand!  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Ok, i have to go cook... give me some time to do that.<br /><br /><span style="color: #BFFF00">edit3:  <span style="font-size: 200%; line-height: normal"><strong>INCREDIBLY SWEET THANK YOU SO MUCH Kasumi!!</strong></span></span> <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;************************************************************************<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;you must dynamically modify p0ointer before jsring draw_me_a_column.<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;lda #&lt;RAMbufferw1<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;sta p0ointer<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;lda #&gt;RAMbufferw1<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;sta p0ointer+1<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; destroys a x and y&nbsp; &nbsp;ooooooooooohhhhh&nbsp; nooooooooooooooooo<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;************************************************************************<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;draw_me_a_column: ;(please)<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;increase valid_left by 1<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; inc valid_left <br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;and draw column valid_left+31<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;set the address<br />0C6E2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C6E2 20 AC C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr next<br />0C6E5 A5 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda columnLo<br />0C6E7 C5 45&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cmp playdough<br />0C6E9 F0 33&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; beq +end<br />0C6EB A5 3A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda columnHi<br />0C6ED 8D 06 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $2006<br />0C6F0 A6 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx columnLo<br />0C6F2 8E 06 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stx $2006<br />0C6F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C6F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C6F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;start with even column part<br />0C6F5 4C 06 C7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jmp +even<br />0C6F8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C6F8 A0 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -odd: ldy #59<br />0C6FA E8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;inx<br />0C6FB A5 3A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda columnHi<br />0C6FD 8D 06 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $2006<br />0C700 8E 06 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stx $2006<br />0C703 4C 08 C7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jmp +draw<br />0C706 A0 3A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +even: ldy #58<br />0C708&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+draw: ;draw 16bit column, even and odd parts<br />0C708 B1 43&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - lda (p0ointer),y&nbsp; ;RAMbufferw1, x<br />0C70A 8D 07 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $2007<br />0C70D 88&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dey<br />0C70E 88&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dey ;subtract 2 to stay in even or odd column<br />0C70F 10 F7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bpl -<br />0C711&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C711 C0 FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cpy #$ff ;lda t10<br />0C713 F0 03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;beq +complete<br />0C715&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;now go back to odd column part<br />0C715 4C F8 C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jmp -odd<br />0C718&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C718&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+complete&nbsp; &nbsp;<br />0C718 A5 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda columnLo<br />0C71A 85 45&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta playdough&nbsp; &nbsp; <br />0C71C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C71C E6 30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc valid_left<br />0C71E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C71E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C71E 60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +end: rts ;end of draw_me_a_column scrolllandiii and vblank code</div><br /><br />edit4: Yes thank you so much Kasumi!!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  I got to delete that slow 5 cycle inc t10... and it is so good to learn this way of smart programming.  I really appreciate the cmp and cpy now!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  Ok sleep is going to start soon goodnight.<br /><br />edit5:It's around 11:34am on Monday.  I want to say <span style="font-size: 200%; line-height: normal"><strong>THANK YOU SO MUCH KASUMI!!</strong></span>  I found the part that you started with saying that even should come first... instead of jumping over odd to run even...  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Now everytime it runs odd my code doesn't have to jmp anymore!<br /><br />edit6: Wow, I'm in the middle of this now!  Want to write out here what's going on now so I could read it in the future.  So far I've moved the code back to how it was before it was combined with one draw section.  Then I made it so that the even column was drawn with the tile #$44... and the odd column was drawn with the tile #$45.  It became interesting... the even column was correct... the odd column was kindof correct and there were many grafiti #$45 tiles.  So that must have been a hint that the odd buffer creation code was problemed.  Next I read the bottom part of your response another time and I was blown away!!!  There actually was a solution that could work with the single draw section... I quickly moved the code back to use the single draw section... and loaded the acumulator with #$44 for the even section and loaded the accumulator with #$45 for the odd section.  And I commented the lda (ptr),y line like you suggested.  And then I ran the code and it ran perfectly!!!!!!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />   <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />  Nothing was raised up when it restarted the nametable!  Just kept going.  So now the buffer code must be problem filled... that's my guess from all of your wise teaching Kasumi.  Now I'll go look at my buffer code.<br /><br />edit7: Column position worked, then I added the buffer code and it looks wrong.  Here is my buffer code <div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 0C4C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;*******************************************************<br />0C4C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; uses x for load_screen input... send value of screen to load in x<br />0C4C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; uses y to pick a column (1 16x16 metatile wide).<br />0C4C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;*******************************************************<br />0C4C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;draw_RAMbuffers: ;testing... goodsofar!!<br />0C4C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&quot;Prepare the (new nametable) writes in a RAM buffer during draw time...&quot; tepples pg 59<br />0C4C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C4C5 85 FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sta $ff<br />0C4C7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ;ldx #$02<br />0C4C7 20 44 C1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; jsr load_screen&nbsp; ;&lt; X goes into to load_screen<br />0C4CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <br />0C4CA A9 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; lda #59&nbsp; &nbsp; ;note: each RAMbufferw is 60 bytes long... 0 through 59<br />0C4CC 85 31&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sta t2<br />0C4CE 85 41&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sta goodLocation<br />0C4D0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C4D0 84 34&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sty CurrentColumn+0&nbsp; &nbsp;&nbsp; ;ldy #$03<br />0C4D2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ;---<br />0C4D2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ;<br />0C4D2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C4D2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C4D2 B1 10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --&nbsp; &nbsp;lda ($10), y<br />0C4D4 AA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; tax <br />0C4D5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C4D5 BD DE C9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda MetatileTile3, x<br />0C4D8 8D 31 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw0+1<br />0C4DB BD FF C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda MetatileTile2, x<br />0C4DE 8D 30 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw0+0<br />0C4E1 BD 20 C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda MetatileTile1, x<br />0C4E4 8D 33 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw0+3<br />0C4E7 BD 41 C7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda MetatileTile0, x<br />0C4EA 8D 32 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw0+2<br />0C4ED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <br />0C4ED A6 41&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ldx goodLocation<br />0C4EF AD 33 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda RAMbufferw0+3<br />0C4F2 9D 30 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw0, x<br />0C4F5 CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; dex<br />0C4F6 AD 32 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda RAMbufferw0+2<br />0C4F9 9D 30 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw0, x<br />0C4FC CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; dex<br />0C4FD AD 31 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda RAMbufferw0+1<br />0C500 9D 30 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw0, x<br />0C503 CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; dex<br />0C504 AD 30 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda RAMbufferw0+0<br />0C507 9D 30 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw0, x<br />0C50A 98&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; tya<br />0C50B 18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; clc<br />0C50C 69 10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; adc #$10 ;increment y by 16!!!!<br />0C50E A8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; tay<br />0C50F CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; dex<br />0C510 86 41&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; stx goodLocation<br />0C512 10 BE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; bpl -- ;if not we are ready to do the next metatile<br />0C514&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C514&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C514 A4 34&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ldy CurrentColumn<br />0C516 C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; iny<br />0C517 84 35&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sty CurrentColumn+1<br />0C519 A9 3B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; lda #59<br />0C51B 85 41&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sta goodLocation ;our buffers are both 59 long<br />0C51D&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C51D B1 10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --&nbsp; &nbsp;lda ($10), y<br />0C51F AA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; tax <br />0C520&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C520 BD DE C9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda MetatileTile3, x<br />0C523 8D 6D 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw1+1<br />0C526 BD FF C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda MetatileTile2, x<br />0C529 8D 6C 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw1+0<br />0C52C BD 20 C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda MetatileTile1, x<br />0C52F 8D 6F 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw1+3<br />0C532 BD 41 C7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda MetatileTile0, x<br />0C535 8D 6E 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw1+2<br />0C538&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <br />0C538 A6 41&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ldx goodLocation<br />0C53A AD 6F 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda RAMbufferw1+3<br />0C53D 9D 6C 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw1, x<br />0C540 CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; dex<br />0C541 AD 6E 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda RAMbufferw1+2<br />0C544 9D 6C 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw1, x<br />0C547 CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; dex<br />0C548 AD 6D 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda RAMbufferw1+1<br />0C54B 9D 6C 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw1, x<br />0C54E CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; dex<br />0C54F AD 6C 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; lda RAMbufferw1+0<br />0C552 9D 6C 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sta RAMbufferw1, x<br />0C555 98&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; tya<br />0C556 18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; clc<br />0C557 69 10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; adc #$10 ;increment y by 16!!!!<br />0C559 A8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; tay<br />0C55A CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; dex<br />0C55B 86 41&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; stx goodLocation<br />0C55D 10 BE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; bpl -- ;if not we are ready to do the next metatile<br />0C55F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C55F 20 63 C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jsr colors<br />0C562&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ;lda #11111111b ;true&nbsp; &nbsp;;draw_RAMbufferColors ends with #10100101b in the accumulator<br />0C562&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;sta DrawnRAMbuffers<br />0C562 60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; rts ;end of draw_RAMbuffers<br /></div>  All of that looks correct to me. The jsr colors at the end doesnt do much of anything right now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Nov 19, 2013 4:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">If that looks right, the issue is either your buffer or using too much time (assuming rendering is enabled). To check if using too much time, just disable rendering before, and enable it after. </div>  When doing that my screen just slides down over and over again.   <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ldx #$02 ;load screen number with x<br />&nbsp; ldy visible_left;phase;#$00<br />&nbsp; lda #$00<br />&nbsp; sta PPUMASK1<br />&nbsp; jsr draw_RAMbuffers ;32 bits wide (2 columns) <br />&nbsp; lda #$1e<br />&nbsp; sta PPUMASK1&nbsp; &nbsp;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Nov 19, 2013 5:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ignore what the actual rom displays while running and check the nametable viewer in FCEUX to verify instead. If they don't differ, you're fine.<br /><br />But I think you're fine anyway, based on this:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And I commented the lda (ptr),y line like you suggested. And then I ran the code and it ran perfectly!!!!!!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> Nothing was raised up when it restarted the nametable! Just kept going.</div><br />edit to your post above. Then again, the difference between the two routines (that line commented out vs. not) is at least 360 cycles which isn't that small. draw_me_a_column is run at the beginning of the NMI, I'd assume?<br /><br />Edit: You could actually benchmark it, but I don't know the best way to recommend doing that. I guess grab this build of virtuaNES: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=47911#p47911">viewtopic.php?p=47911#p47911</a><!-- l --><br />Then, whereever jsr  draw_me_a_column is, do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sta $401E<br />jsr&nbsp; draw_me_a_column <br />sta $401F<br /></div><br />It will display on screen how long the routine took each frame. If virtuaNES doesn't work (language plugin complaint and you don't want to dig one up), NintendulatorDX: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?t=6773">viewtopic.php?t=6773</a><!-- l --> can do the same sort of thing. <br /><br />I see the buffer routine, but yo... it's long, I'd just debug. Totally ignore if the code <em>looks</em> right, see if the result is right. Check the RAM this routine writes to.<br /><br />Put a breakpoint at <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">0C562 60                             rts ;end of draw_RAMbuffers</div><br />And look at RAMbufferw1 (or whatever RAM this is supposed to update) using FCEUX's hex editor. Are all 60 values correct? <br /><br />If all 60 are correct, is there a possibility something else writes to this RAM before draw_me_a_column tries to read it? Find out! Break at the start of draw_me_a_column and find out if they're STILL right. If they aren't, break on write to whatever's the first one that's wrong. Use the trace logger to find out what wrote the wrong thing to it. If they are still right at the start of draw_me_a_column, is whatever sets the pointer to RAMbufferw1 doing it properly?<br /><br />Does doing this: <br />lda RAMbufferw1, y;<br />instead of this:<br />lda (p0ointer),y  ;RAMbufferw1, x<br />Make it work? <br />(I'm saying just replace the line that uses a pointer with the absolute location the pointer is supposed point to. For all I know, that's really not still RAMbufferw1, hence this explanation <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />  )<br />If so, the problem is definitely your pointer.<br /><br />If all 60 values aren't correct at the rts from draw_RAMbuffers, put a breakpoint on write for whatever RAM location is the first to have an error. Run FCEUX's trace logger. When the breakpoint hits, find the beginning of draw_RAMbuffers and go down to see what caused the wrong value to be written.<br /><br />That's what I'd do to debug this. I'll read draw_RAMbuffers and see if I find anything off, and edit this post if I find a thing.<br /><br />Edit2: Okay, I read it and I got nothing. So yeah, try 'dem debug steps.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Nov 19, 2013 9:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">And look at RAMbufferw1 (or whatever RAM this is supposed to update) using FCEUX's hex editor. Are all 60 values correct? </div>  WOAH (There's even more hex values to look at)... all 60 values... my sister said she would help me with getting those tomorrow morning.  <br />Goodnight.  <br />Kasumi, thank you for all of this help... your whole post!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />edit: Ok all 60 values are correct inside RAMbufferw1... they are correctly incorrect...<br /><s><div class="codetitle"><b>Code:</b></div><div class="codecontent">0A 0A<br />0A 0A<br />&nbsp;...<br />27 27<br />27 27<br /></div></s><div class="codetitle"><b>Code:</b></div><div class="codecontent">27 27<br />27 27<br />&nbsp;...<br />0A 0A<br />0A 0A<br /></div><s>That&#39;s how it is but  it is incorrect because the 0A 0A 0A 0A metatile is susposed to be at the  bottom &#40;top&#41; ... it&#39;s at the beginning &#40;end&#41;... everything else is shifted down &#40;up&#41;...</s> <span style="color: #40BFFF">That's how it is but it is incorrect because the 0A 0A 0A 0A metatile is susposed to be at the top (not at the bottom) ... it's at the end... everything else is shifted up...</span> so my code is running correctly with incorrect data.  I've gone through our level 1 DAC file twice... everything is correct... so now I'm lost.  But im going to read your post again.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  ...afterlunch<br /><br />edit2: I got  lost in your nintendulator dx link... I read the entire 7 pages... and I was wondering does Nintendulator DX work with asm6 too?  qbradq mentioned learning about ca65 and <span style="color: #FF0080">that</span> he would not like to return to non-ca65 life... but I'm only using asm6 right now. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><span style="color: #FF0080">edit3.</span> <span style="color: #40BFFF">edit4.</span><br /><br />edit5: <div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Then again, the difference between the two routines (that line commented out vs. not) is at least 360 cycles which isn't that small.</div>How do you know this?  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> : )  <div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"> draw_me_a_column is run at the beginning of the NMI, I'd assume?<br /></div>  Draw_me_a_column is called twice in my update_vram method. <div class="codetitle"><b>Code:</b></div><div class="codecontent">0C601&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;update_vram: ;testing... good sofar!<br />0C601 85 FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $ff<br />0C603&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />0C603&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />0C603 A5 33&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda my_copy_of_last_write_to_PPUCTRL<br />0C605 09 04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ora #00000100b&nbsp; ;change $2007 increment to +32<br />0C607 8D 00 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta $2000<br />0C60A 85 33&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta my_copy_of_last_write_to_PPUCTRL<br />0C60C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />0C60C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />0C60C A5 42&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda iBeginAtOne&nbsp; ;ahahahahahhahahahahahahahahaha!&nbsp; it works!!!&nbsp; :)<br />0C60E D0 1C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bne +end<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; ; jsr next ;determines columnHi and columnLo<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; phases&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 4 8 12 16 20 24 28<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; <br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;if columnsDrawn == columnLo<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp; ldx phase<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;txa<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;pha ;----------&gt;<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;lda phases, x<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;sec<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;sbc columnLo<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;bne +end&nbsp; ;only runs with 0<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C610&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C610 A9 30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #&lt;RAMbufferw0<br />0C612 85 43&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta p0ointer<br />0C614 A9 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #&gt;RAMbufferw0<br />0C616 85 44&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta p0ointer+1<br />0C618 20 E2 C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jsr draw_me_a_column&nbsp; ;yes, &lt;this draws one 16bit-wide column.<br />0C61B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C61B 20 40 C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr prepare4new_column<br />0C61E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C61E A9 6C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda #&lt;RAMbufferw1<br />0C620 85 43&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta p0ointer<br />0C622 A9 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda #&gt;RAMbufferw1<br />0C624 85 44&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta p0ointer+1<br />0C626 20 E2 C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr draw_me_a_column<br />0C629&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />0C629 20 2D C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;jsr update_colors&nbsp; &nbsp;&nbsp; &nbsp;<br />0C62C 60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+end:&nbsp; &nbsp;rts ;end of update_vram.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;</div> And update_vram is called near the middle of my vblank procedure.<div class="codetitle"><b>Code:</b></div><div class="codecontent">0C5DC 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vblank: pha<br />0C5DD 98&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tya<br />0C5DE 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;pha<br />0C5DF 8A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;txa<br />0C5E0 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;pha<br />0C5E1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />0C5E1 E6 1E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;inc FRAME_CNT<br />0C5E3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.incsrc &quot;daprg-vblank.asm&quot;<br />0C5E3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+&nbsp; &nbsp;;skip the video updates if the frame calculations aren't over yet <br />0C5E3 24 21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit FrameReady <br />0C5E5 10 08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bpl SkipUpdates <br />0C5E7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5E7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;PERFORM VIDEO UPDATES HERE <br />0C5E7 20 FB C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jsr update_sprite<br />0C5EA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5EA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C5EA 20 01 C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jsr update_vram&nbsp; &nbsp; ;sets increment to +32<br />0C5ED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5ED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5ED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C5ED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5ED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;modify the flag <br />0C5ED E6 21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc FrameReady <br />0C5EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0C5EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SkipUpdates: <br />0C5EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;PERFORM TASKS THAT MUST BE PERFORMED EVEN <br />0C5EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;WHEN THE FRAME IS NOT READY, SUCH AS UPDATING <br />0C5EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;THE MUSIC OR DRAWING A STATUS BAR <br />0C5EF 20 BE DE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jsr FamiToneUpdate<br />0C5F2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&quot;Setting the scroll should ALWAYS be the very last thing in your VBlank handler.&quot; -tokumaru pg 43<br />0C5F2 20 48 C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jsr scroll_screen <br />0C5F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;return from the NMI (vblank) <br />0C5F5 68&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pla<br />0C5F6 AA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tax<br />0C5F7 68&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pla<br />0C5F8 A8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tay<br />0C5F9 68&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pla<br />0C5FA 40&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rti</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Nov 21, 2013 5:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I got lost in your nintendulator dx link... I read the entire 7 pages... and I was wondering does Nintendulator DX work with asm6 too? qbradq mentioned learning about ca65 and that he would not like to return to non-ca65 life... but I'm only using asm6 right now. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />Err... for the source level debugging? I have no idea, I've never used it for that. I was just talking about its cycle timing stuff. What you use to assemble the rom doesn't matter for this.<br /><br />Download it, open it. Run your rom. Open the Debug, Disassembly window, and you'll see a place called timers. If you store to $401E/$401F as I described in my previous post (or before and after the thing you want to benchmark), the number of cycles that routine took will be next to timer 1. (Read the readme to learn how to use more/other timers.) <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How do you know this? <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> : ) </div><br />Hah, 360 is wrong because I looked at the wrong value. It'd really be 300. But... I know because lda (indirect),y (used by lda (p0ointer),y ) <a href="http://www.obelisk.demon.co.uk/6502/reference.html#LDA" class="postlink">takes 5 cycles</a>, and it's used in a loop that runs 60 times (well... it runs 30 times twice, anyway...). If you comment it out, it's no longer doing it so that time is saved.<br /><br />Anyway, none of that matters until you find out how the wrong values get to that RAM in the first place. <a href="http://en.wikipedia.org/wiki/Garbage_in,_garbage_out" class="postlink">Garbage in, garbage out</a> so there's not much point to checking if this taking too long is part of the cause of bad output until you fix the bad input its getting. <br /><br />And, I can't really help beyond steps outlined on my last post. Break on writes to the first wrong value. Which... actually seems to be the first value. If everything moved up as I'm understanding, the data is 100% wrong (because there is no value that is in the right place.). Run trace logger, break on writes to find out how the first thing ends up wrong. Fix it.<br /><br />I'd bet it's the pointer, since you said you're VERY sure your actual level data is correct. So similar to what I asked before, does it work if you replace <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0C4D2 B1 10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --&nbsp; &nbsp;lda ($10), y</div><br /><br />With lda leveldata,y  where leveldata is wherever that pointer is supposed to point? If so, neat! If not, oh well, you gotta debug. Was just a guess.<br /><br />Edit: Heck, other things it could be. I'm gonna guess that the metatile that should be on top is the same for both the column you're trying to read and the column next to it? Then it could be y just has the wrong value (one greater than it should be) when reading from the pointer for the first, and you're offset by 1. (Skipping the first tile in column A, getting the first tile of Column B at the bottom) So check load_screen.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>74</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>