<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=8084" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-05-30T01:07:45-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=8084</id>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-30T01:07:45-07:00</updated>
<published>2012-05-30T01:07:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=94807#p94807</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=94807#p94807"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=94807#p94807"><![CDATA[
Okay so I've got a bit of an update on this thing.<br /><br />First off our "final commercial" of the thing for to finish off the school project is <a href="http://www.youtube.com/watch?v=N39WWX6djpQ" class="postlink">here</a><br /><br />Now I know there is at least one person who's been waiting patiently for this thing for a few years now.  I want to make my plans public as for the release and my current status.  My goal is to have it released before the end of the year, ideally it'll be ready by the end of summer.  But mass production availability kind of depends on demand.  I haven't concluded on price yet, and won't really until I consider my manufacturing options once it's complete.  I expect it will be in the $100 range we'll see.<br /><br />So right now I'm working on the second more final revision of the PCB.  There were a few minor errors and mostly I had some things I wanted to clean up.  Also I decided to step up to one of the larger members of the Mach XO2 family for the CPLD.  It's only a few dollars more and has 3-4x the capability.  One small improvement that has a large effect is 8 more IO.  With those I can do away with the annoying solder jumpers that traded minimum bankswitching size for lower address inputs.  So the final spec will be:<br /><br />*All PRG and CHR addressing available.  This was really required to support some of my dual ported memory goals and other trickery to come.<br />*Smallest PRG banks 2KB to support sound needs<br />*Smallest CHR banks 128bytes.  Hooray animations.<br /><br />Current mapper support:<br />* most discrete mappers (all possible)<br />*MMC1<br />*MMC3<br /><br />Planned mappers before release:<br />*FME7<br />*RAMBO-1<br />*MMC2/4 are likely in the near future but not necessarily before release.<br /><br />The main thing I need to complete before release is the ability to configure the mcu and CPLD via USB.  Currently they require external programmers and the CPLD programmer happens to be $200.  Luckily the CPLD is easily configurable via SPI bus which should make it fairly simple for me to configure with the mcu and will be just as easy as loading new games, just slow though.  Keep in mind that's if you create or modify a mapper, not for switching between preconfigured mappers that are already on there.  Also I need to get the bootloader working for the mcu.<br /><br />I also want to experiment around with boosting the upload speed on this thing.  NROM is done in a few seconds but something the size of SMB3 takes around 15-20 sec.  One easy way I imagine is taylored for development.  Basically it assumes when you make sucessive builds the entire ROM isn't modified.  One easy one is you usually wouldn't modify the CHR and PRG at the same time.  So basically only the modified code would be uploaded.  But this would be done by the app and unseen by the user.  I've got some other optimizations in the programming sequence that should allow for decent speed ups as well.<br /><br />The last thing I would to implement is a test rom of sorts.  Basically do a quick check of cartridge connectivity and a simple splash screen or something.  The idea would be that this would be stored on the FLASH memory.  So if you just booted up the cart without loading if via USB you'd have the test run by default.  This could easily be removed by the user if desired especially if you wanted to use the flash for something else.  But it would provide some verification that everything is working properly and any bugs found in your build wouldn't be as easily blamed on connection and such.<br /><br />Once I've got all that done it's pretty much ready for the public as far as I'm concerned.  I'll also have the bear of writing up all the documentation including the source files and schematics for everything.  I don't want anything about this thing to be secret.  <br /><br />After I release it I'll still be working on improvements such as crazy mappers that will create much controversy I'm guessing.  I also want to test out some sound features with the 8910 and such.  At that point I'd also like to work on creating some simple tutorials on how to create and modify mappers and the mcu code and everything.  Basically much more to come if I can help it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Wed May 30, 2012 1:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-05-10T18:58:44-07:00</updated>
<published>2012-05-10T18:58:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93649#p93649</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93649#p93649"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93649#p93649"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />Do you take (multi-bit) PWM output from the significant accumulator bits?<br /></div><br />That or I could run the adder all the time in delta-sigma (PDM) mode. Something like N163 that inherently processes one channel at a time could benefit just as well from this architecture, as it'd already have the sequencer.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu May 10, 2012 6:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2012-05-10T18:36:29-07:00</updated>
<published>2012-05-10T18:36:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93648#p93648</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93648#p93648"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93648#p93648"><![CDATA[
Do you take (multi-bit) PWM output from the significant accumulator bits? Looks fine for that if the entries are unsigned and the logic runs at 1.79 MHz. Or if you have a wide DAC the adder can be left out for TDM which will sound better. If you're meant to take PCM from it... hm, not sure. Are the table entries signed and the accumulator clamped against over/underflow? Then I think fryz. A lot of people want PCM since they have an AC'97 DAC to work with.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Thu May 10, 2012 6:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-10T16:11:22-07:00</updated>
<published>2012-05-10T16:11:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93644#p93644</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93644#p93644"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93644#p93644"><![CDATA[
Yeah you get your fries Tepples.<br /><br />Should be able to run it at a fairly wide range of frequencies on the sequencer by running it off the PLL in the CPLD and find out what works best.  Now I just need to study up on VHDL so I can understand what is going on exactly with this code and try to test something out.  Being a verilog guy it's mostly greek at the moment...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Thu May 10, 2012 4:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-05-10T14:29:44-07:00</updated>
<published>2012-05-10T14:29:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93642#p93642</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93642#p93642"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93642#p93642"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />you'd have to think outside the bun (R) to calculate logarithmic attenuation, average 3 channels, scale to 16-bit and normalize in hardware.<br /></div><br />As I understand the logarithmic output of an AY-3-8910 or SN76489A, we'll need a 3-cycle sequencer, a mux, a 16-entry log to linear table, and a pair of registers.<br /><br />Cycle 1: Latch previous accumulator value into DAC output, look up channel 1's volume in 16-entry table, and load it into an accumulator.<br />Cycle 2: Look up channel 2's volume in 16-entry table and add it to the accumulator.<br />Cycle 3: Look up channel 3's volume in 16-entry table and add it to the accumulator.<br /><br />I can has free french fryz nao? Or what did I get wrong in the above pseudo-HDL?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu May 10, 2012 2:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-10T12:01:52-07:00</updated>
<published>2012-05-10T12:01:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93629#p93629</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93629#p93629"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93629#p93629"><![CDATA[
Yeah that's what I've come to realize kyuusaku.  I tried compiling it on a smaller Mach XO2 that didn't have much flash memory and when I used the larger tables the thing exploded because it filled up the flash and started using logic cells.  It wanted to consume several thousand logic units that weren't available.  It was okay with the smaller table or a device with more flash.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Thu May 10, 2012 12:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2012-05-10T12:02:17-07:00</updated>
<published>2012-05-10T11:44:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93628#p93628</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93628#p93628"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93628#p93628"><![CDATA[
The YM2149 is only around 200 PLD macrocells and the chip itself doesn't have any ROM unlike the FM chips. The cheeseburger cores online use ROM for a 3D volume LUT since you'd have to think outside the bun (R) to calculate logarithmic attenuation, average 3 channels, scale to 16-bit and normalize in hardware.<br /><br />Edit: Of course Xilinx devices have block RAM, nobody in their right mind would use distributed RAM (or ROM in Altera's case) to hold 64 KiB, I don't think even the latest chips have that much.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Thu May 10, 2012 11:44 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2012-05-10T11:03:22-07:00</updated>
<published>2012-05-10T11:03:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93627#p93627</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93627#p93627"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93627#p93627"><![CDATA[
I am more familiar with Altera FPGAs and they got nice chunks of SRAM to use in your stuff with minimal extra cost. Optimized for storing LUTs and ROM etc. At least so datasheets say ^^<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Thu May 10, 2012 11:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-10T10:35:08-07:00</updated>
<published>2012-05-10T10:35:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93625#p93625</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93625#p93625"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93625#p93625"><![CDATA[
It's my understanding that the FPGA would be storing the tables in SRAM cells but there are only a few cells per logic element.  The Xilinx FPGAs are very homogenous as I understand it, they don't have a separate area for SRAM it's distributed throughout the logic elements.  So when you use that distributed SRAM (in the logic elements) your taking up the entire element for a few bits of SRAM.  So the cost isn't minimal and the 64Kb of tables sucks up lots of cells in the xilinx FPGA.<br /><br />I haven't researched the details of the Xilinx architecture, so take what I'm saying with a grain of salt.  But if the YM2149 really does utilize 10% of the XC2S300 like the wiki says I'm not sure what else could explain why the Lattice devices have such a huge advantage.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Thu May 10, 2012 10:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2012-05-10T04:20:57-07:00</updated>
<published>2012-05-10T04:20:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93607#p93607</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93607#p93607"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93607#p93607"><![CDATA[
That's very cool ^^<br /><br />Now I'm thinking shouldn't the tables and stuff end up in SRAM cells of the FPGAs ...? You can easily use them to store LUTs with minimal extra cost...?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Thu May 10, 2012 4:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-10T01:48:16-07:00</updated>
<published>2012-05-10T01:48:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93603#p93603</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93603#p93603"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93603#p93603"><![CDATA[
<div class="quotetitle">TmEE wrote:</div><div class="quotecontent"><br />I think you need  a quite large CPLD to put the YM in it, people put YMs in FPGAs and they use up fair chunk of them.<br /></div><br /><br />Yeah I know it supposedly sucks up around 6000 logic elements on a Xilinx FPGA.  Sounds like a problem when the largest Mach XO2 has 7000 elements right?  WRONG!  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  I compiled it on the Mach XO2 and it only took up 200-250 LUTs depending on the implementation.  The reason is these babies have built in 'User Flash Memory' which is great for things like the tables in the 8910/2149.  So where the Xilinx FPGA sucks up a TON of logic just for ROM, the Mach XO2 puts that data in Flash leaving plenty of room to spare for actual logic use.  I've got it compiled on my current CPLD and the 2149 takes up about (EDIT 30-40%) of available logic.  Which is pretty awesome when you consider it's only a $5-8 CPLD <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  There is still plenty of room for a MMC5 with extras on my current device.  But I kind of already decided to step up to a larger device since it doesn't cost much more.  So on that device It would only use about 10% leaving room for MMC5ish capabilities along with other boards on the same configuration.<br /><br />Tepples:  I like your delta-sigma DAC idea especially since it wouldn't take up much for CPLD pins and only add discrete components.  I've had plans to run your DEC $4011 from when I was designing it as well.  My thought was to have circuitry to support both the DEC $4011 option and the EXP2/6 method for those modding the NES/exp jumper/or FC.<br /><br />80sFREAK:  Sorry the RCA cable hanging off it isn't artistic enough for this  <a href="http://nesdev.com/bbs/viewtopic.php?t=8426&amp;start=75" class="postlink">cheeseburger.</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Thu May 10, 2012 1:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-05-09T08:46:59-07:00</updated>
<published>2012-05-09T08:46:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93571#p93571</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93571#p93571"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93571#p93571"><![CDATA[
How would the audio from the RCA or 3.5mm jack be mixed with the audio from the NES?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed May 09, 2012 8:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[80sFREAK]]></name></author>
<updated>2012-05-09T06:57:43-07:00</updated>
<published>2012-05-09T06:57:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93567#p93567</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93567#p93567"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93567#p93567"><![CDATA[
If it's for NES, why not to make sound output from cart? <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /> RCA or 3.5mm jack will do the job<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4994">80sFREAK</a> — Wed May 09, 2012 6:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-05-09T06:03:56-07:00</updated>
<published>2012-05-09T06:03:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93563#p93563</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93563#p93563"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93563#p93563"><![CDATA[
<div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br />I plan to implement [Sunsoft 5B audio] once I toss a DAC on the board.<br /></div><br />A <a href="http://en.wikipedia.org/wiki/Delta-sigma_modulation" class="postlink">delta-sigma DAC</a> can be as simple as an adder and a register as wide as the digital signal. Every M2 cycle, add the DAC's current value to the register. Put the adder's carry out on one pin, and that's your audio signal. There'll be a bunch of noise well over 100 kHz in the signal, but a simple low-pass filter will remove that.<br /><br />The other problem is that most 72-pin consoles haven't been modified for expansion sound. Your DAC would operate by causing an IRQ whenever the audio signal level changes and providing the digital signal on $4011 reads in the range 1 through 127. Then the IRQ handler reads the value from the mapper, writes it back, and returns:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">irq:<br />  dec $4011<br />  rti</div><br />Yeah, I know, 19 CPU cycle overhead to process, but it could be worth it for slower-paced parts of a game.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed May 09, 2012 6:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2012-05-09T04:03:48-07:00</updated>
<published>2012-05-09T04:03:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93556#p93556</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93556#p93556"/>
<title type="html"><![CDATA[NESDEV1 development board progress]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8084&amp;p=93556#p93556"><![CDATA[
I think you need  a quite large CPLD to put the YM in it, people put YMs in FPGAs and they use up fair chunk of them.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Wed May 09, 2012 4:03 am</p><hr />
]]></content>
</entry>
</feed>