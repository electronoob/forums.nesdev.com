<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=4822" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-05-28T00:33:01-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=4822</id>
<entry>
<author><name><![CDATA[frantik]]></name></author>
<updated>2009-05-28T00:33:01-07:00</updated>
<published>2009-05-28T00:33:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47310#p47310</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47310#p47310"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47310#p47310"><![CDATA[
<div class="codetitle"><b>Code:</b></div><div class="codecontent">@echo off<br />asm6 &quot;%1&quot; &quot;%1.nes&quot; -L &gt; ASM6.log.txt<br /></div><br /><br />using this batch file you can drag your asm files onto the batch file in explorer, or use windows 'Open With...' feature to add a right click option to run the batch file on .asm files<br /><br />it saves the output into a log file for review<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3841">frantik</a> — Thu May 28, 2009 12:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-05-25T20:04:10-07:00</updated>
<published>2009-05-25T20:04:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47255#p47255</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47255#p47255"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47255#p47255"><![CDATA[
<div class="quotetitle">eleventhirtyfour wrote:</div><div class="quotecontent"><br />It seems like most programs that I try to run (including ASM6) do this thing where they pop up for about a half-second and then disappear.<br /></div><br />If you run command-line applications by double-clicking them, that's probably what will happen. Command-line applications do not have a visual interface, they work based on parameters you give them when you call them, and you are not giving them any parameters when you double-click them. Without parameters, most applications have nothing to do, and will immediately terminate.<br /><br />In order to use such applications you have to either open a command prompt window and do it all with text commands, or create batch scripts that will execute the commands for you. For example, if you want to assemble some asm file with asm6, and you have both asm6.exe and the source file in the same folder, just create an "assemble.bat" file in the same folder and put the following text in it:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">asm6 source.asm<br />pause</div><br /><br />When the batch file is double-clicked, the comands inside it are executed. The first line will call the program using the name of the source file as a parameter. The second line will keep the window from closing after the program is done until you press something, so that you have time to read any error messages it might throw.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon May 25, 2009 8:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-05-25T19:14:27-07:00</updated>
<published>2009-05-25T19:14:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47253#p47253</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47253#p47253"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47253#p47253"><![CDATA[
<div class="quotetitle">eleventhirtyfour wrote:</div><div class="quotecontent"><br />It seems like most programs that I try to run (including ASM6) do this thing where they pop up for about a half-second and then disappear.<br /></div><br />It's a command-line program. It prints a message to the screen, probably giving hints on how to use it, but when it finishes, Windows closes its window. If you want the message to stay on the screen, you have to run it from the Windows command prompt. If you have never used MS-DOS or the Windows command prompt, try reading the "command line interface" section of <a href="http://nesdevwiki.org/wiki/Before_the_basics" class="postlink">this page</a> and some of <a href="http://www.google.com/search?q=ms-dos+tutorial" class="postlink">these tutorials</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon May 25, 2009 7:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[eleventhirtyfour]]></name></author>
<updated>2009-05-25T18:23:05-07:00</updated>
<published>2009-05-25T18:23:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47250#p47250</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47250#p47250"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47250#p47250"><![CDATA[
Also, how the hell can you get ASM6 to work on Windows Vista? (or most everything else for that matter?!)<br /><br />It seems like most programs that I try to run (including ASM6) do this thing where they pop up for about a half-second and then disappear.<br /><br />If anyone knows what I'm talking about and has a suggestion (besides a different OS) let me know. Thanks. Sorry for slightly off-topic rant.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3855">eleventhirtyfour</a> — Mon May 25, 2009 6:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[frantik]]></name></author>
<updated>2009-05-19T17:40:50-07:00</updated>
<published>2009-05-19T17:40:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47024#p47024</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47024#p47024"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47024#p47024"><![CDATA[
here's nes101 in asm6<br /><br /><!-- m --><a class="postlink" href="http://home.comcast.net/~olimar/NES/NES101_asm6.zip">http://home.comcast.net/~olimar/NES/NES101_asm6.zip</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3841">frantik</a> — Tue May 19, 2009 5:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2009-05-19T06:18:04-07:00</updated>
<published>2009-05-19T06:18:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47002#p47002</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47002#p47002"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=47002#p47002"><![CDATA[
Personally I found it instructive to translate Michael Martin's NES101 tut from P65 to NESASM and then to ASM6 (using ASM6's readme). In retrospect, it may have been easier to go straight from P65 to ASM6. They share some features.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Tue May 19, 2009 6:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Gil-Galad]]></name></author>
<updated>2009-05-18T13:51:29-07:00</updated>
<published>2009-05-18T13:51:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=46970#p46970</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=46970#p46970"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=46970#p46970"><![CDATA[
Is there any ASM6 NES program source files that I can look at for reference? That way I can get a better idea on how to use this assembler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=43">Gil-Galad</a> — Mon May 18, 2009 1:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-02-03T13:23:18-07:00</updated>
<published>2009-02-03T13:23:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42768#p42768</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42768#p42768"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42768#p42768"><![CDATA[
Correct @ all of that.<br /><br />The iNES file is layed out like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$10 byte header<br />X * $4000 PRG-ROM banks<br />X * $2000 CHR-ROM banks<br /></div><br /><br />The example in loopy's first post works the assembler to output all the data in this format.  First with the $10 byte header, then the PRG (code/data) which is padded to be exactly $4000 bytes with the .pad directive.  Followed by the $2000 bytes of CHR with the .incbin line.<br /><br />And yes -- your .chr file should be exactly 8K ($2000 bytes) in size.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Feb 03, 2009 1:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[noattack]]></name></author>
<updated>2009-02-03T12:54:18-07:00</updated>
<published>2009-02-03T12:54:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42766#p42766</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42766#p42766"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42766#p42766"><![CDATA[
Thanks, that makes a lot of sense. <br /><br />So that explains why the CHR-ROM/RAM sits at the end of the source code, since it's not in that $4000 memory space allocated to the single bank of PRG.  It sits on separate hardware, so it has its own memory allocation.  I assume the .chr file is padded as well, since it's expected to fill 8k.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=2462">noattack</a> — Tue Feb 03, 2009 12:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-02-03T09:08:44-07:00</updated>
<published>2009-02-03T09:08:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42752#p42752</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42752#p42752"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42752#p42752"><![CDATA[
<div class="quotetitle">noattack wrote:</div><div class="quotecontent"><br />the initial .ORG sets the ROM address at $C000, then executes the code directly following.  Then the .PAD tells the assembler to fill all bytes past the code <em>up to</em> address $FFFA, at which point the three vectors are defined?<br /></div><br /><br />Correct<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And then even if I had a second .ORG in lieu of the .PAD, ASM6 assembles as if it were the latter, since it is the second .ORG in the source.<br /></div><br /><br />The best way to visualize this is to look at the assembled file in a hex editor.  Given the following example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.org $C000<br />foo:<br />  LDA #1<br /><br />.pad $C008<br />bar:<br />  LDA #2<br /></div><br /><br />This would Assemble to the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A9 01 00 00 00 00 00 00 A9 02<br /></div><br /><br />If you replace that .pad with an .org, you'd get the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A9 01 A9 02<br /></div><br /><br />However in both cases... 'foo' would be a constant in the assembler representing the address $C000 -- and 'bar' would be $C008.<br /><br />The reason you need to pad is because label names and .org statements are simply for the assembler's use and are not assembled into the final binary.  Once your ROM is assembled, all the data is just clumped together in a mesh.  The emulator (or NES) will take the data as-is and stick it in ROM addressing space (in this case, $C000 since you only have 1 PRG bank).<br /><br />The latter example without the .pad would result in the bytes "A9 01 A9 02" appearing at address $C000 in an emulator, which means the code in the 'bar' label is <em>really</em> at address $C002.  However because you told the assembler to .org over to $C008, all the references to that label in your code will jump to address $C008 instead of $C002.<br /><br />This is a pretty long winded explanation.  Hopefully I didn't confuse you more than help you.  Heh.  The key thing to remember is that the NES doesn't see any of this .org/.pad crap.. that stuff just configures the assembler to assemble the code a certain way.  You need to get your code to match the file format accepted by the NES and emulators.  In this case, that means exactly $4000 bytes of data, starting at address $C000.  With the last 6 bytes (address $FFFA) being the vector table.  To accomplish this, you need to fill/pad unused space between $C000-FFFA with zeros, otherwise the vector table will be in the wrong spot.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Feb 03, 2009 9:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[noattack]]></name></author>
<updated>2009-02-03T08:27:58-07:00</updated>
<published>2009-02-03T08:27:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42751#p42751</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42751#p42751"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42751#p42751"><![CDATA[
So in the following snippet:<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  <br />.org $C000 <br />RESET: <br /><br />  ...... <br />  ...... <br />  ...... <br /><br />NMI: <br />  RTI <br /><br />  .pad $FFFA     ;first of the three vectors starts here <br />  .dw NMI        ;when an NMI happens &#40;once per frame if enabled&#41; the <br />                 ;processor will jump to the label NMI: <br />  .dw RESET      ;when the processor first turns on or is reset, it will jump <br />                 ;to the label RESET: <br />  .dw 0          ;external interrupt IRQ is not used in this tutorial <br /><br /><br /></div><br /><br />the initial .ORG sets the ROM address at $C000, then executes the code directly following.  Then the .PAD tells the assembler to fill all bytes past the code <em>up to</em> address $FFFA, at which point the three vectors are defined?<br /><br />And then even if I had a second .ORG in lieu of the .PAD, ASM6 assembles as if it were the latter, since it is the second .ORG in the source.<br /><br />I appreciate the help.  It's taking a while to wrap my brain around the concept of addressing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=2462">noattack</a> — Tue Feb 03, 2009 8:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[loopy]]></name></author>
<updated>2009-02-03T00:32:55-07:00</updated>
<published>2009-02-03T00:32:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42739#p42739</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42739#p42739"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42739#p42739"><![CDATA[
<div class="quotetitle">noattack wrote:</div><div class="quotecontent"><br />Thank you both.  Everything is working properly now.<br /><br />So, if I understand correctly, an .ORG statement should only be used once, since it 'sets the starting address'?  Or not at all, since it seems easier to use the "$ = ADDR" format instead.<br /></div><br /><br />Yes, use it once at the beginning of your code to set the starting address.  You'll see it multiple times in the same NESASM code, to set the address of each bank.  I would keep using .ORG since it's the standard way of doing things and understood by everyone, whereas the "$=addr" thing is specific to ASM6.<br /><br />Regarding .ORG, perhaps I should mention ASM6 diverges from other assemblers in another way - it allows you to output data before an origin is set, where other assemblers might complain or assume a default value. This is only allowed in cases where an ambiguous address doesn't matter.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; iNES identifier <br />.byte &quot;NES&quot;,$1a <br />.byte $01 ; 1 PRG-ROM block <br />.byte $01 ; 1 CHR-ROM block <br />.byte $00 ; unsure about these...which is mapper? <br />.byte $00 ; <br />.byte 0,0,0,0,0,0,0,0  ; pad header to 16 bytes <br /><br />;;;;;;;;;;;;;; <br /><br />  .org $C000 <br />RESET:<br />   SEI<br /></div><br /><br />With your code here for example, it outputs 16 header bytes, then starts assembling at $C000.  With another assembler, you might be expected to have ".org $C000-16" before the header.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">foo:    .byte 0<br />        .org $8000<br />        lda foo<br /></div><br /><br />This, on the other hand, does make ASM6 throw an error since it doesn't know where foo is located.  (I suppose I could be clever and make it infer an origin of $7fff, but I digress...)<br /><br /><div class="quotetitle">noattack wrote:</div><div class="quotecontent"><br />.PAD, on the other hand, fills a particular memory location, rather than moving to that address in the actual execution of code, right?<br /></div><br />.PAD fills memory UP TO a particular address.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4">loopy</a> — Tue Feb 03, 2009 12:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beneficii]]></name></author>
<updated>2009-02-02T23:48:55-07:00</updated>
<published>2009-02-02T23:48:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42736#p42736</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42736#p42736"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42736#p42736"><![CDATA[
noattack:<br /><br />Basically, when you set a label like "label:", when the assembler reaches that label definition, it will assign an address to it based on the current ROM address it calculates.  When you set ".org addr" for the first time or "$ = addr", it tells the assembler what address to start counting from as it assembles each instruction and each byte.  If an instruction takes up 3 bytes in the ROM, then it counts 3 bytes from where it was.  Doing "$ = addr" again simply tells the assembler to start counting from that new address.<br /><br /> ".org addr" the second or subsequent times or ".pad addr" will cause the assembler to fill bytes from the address the .org or .pad statement is at, counting each byte along the way, until it reaches the address specified as "addr".<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=156">beneficii</a> — Mon Feb 02, 2009 11:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[noattack]]></name></author>
<updated>2009-02-02T23:16:38-07:00</updated>
<published>2009-02-02T23:16:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42735#p42735</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42735#p42735"/>
<title type="html"><![CDATA[Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42735#p42735"><![CDATA[
Thank you both.  Everything is working properly now.<br /><br />So, if I understand correctly, an .ORG statement should only be used once, since it 'sets the starting address'?  Or not at all, since it seems easier to use the "$ = ADDR" format instead.<br /><br />.PAD, on the other hand, fills a particular memory location, rather than moving to that address in the actual execution of code, right?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=2462">noattack</a> — Mon Feb 02, 2009 11:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[loopy]]></name></author>
<updated>2009-02-02T22:21:51-07:00</updated>
<published>2009-02-02T22:21:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42733#p42733</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42733#p42733"/>
<title type="html"><![CDATA[Re: Adapting a NESASM tutorial for ASM6]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4822&amp;p=42733#p42733"><![CDATA[
Header should be 16 bytes, and chr data should be moved to the end.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />; iNES identifier<br />.byte &quot;NES&quot;,$1a<br />.byte $01 ; 1 PRG-ROM block<br />.byte $01 ; 1 CHR-ROM block<br />.byte $00 ; unsure about these...which is mapper?<br />.byte $00 ;<br />.byte 0,0,0,0,0,0,0,0  ; pad header to 16 bytes<br /><br />;;;;;;;;;;;;;;<br /><br />  .org $C000<br />RESET:<br /><br />  ......<br />  ......<br />  ......<br /><br />NMI:<br />  RTI<br /><br />  .org $FFFA     ;first of the three vectors starts here<br />  .dw NMI        ;when an NMI happens &#40;once per frame if enabled&#41; the<br />                 ;processor will jump to the label NMI:<br />  .dw RESET      ;when the processor first turns on or is reset, it will jump<br />                 ;to the label RESET:<br />  .dw 0          ;external interrupt IRQ is not used in this tutorial<br /><br /><br />;;;;;;;;;;;;;;<br /><br />  .incbin mario.chr   ;includes 8KB graphics file from SMB1<br /><br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4">loopy</a> — Mon Feb 02, 2009 10:21 pm</p><hr />
]]></content>
</entry>
</feed>