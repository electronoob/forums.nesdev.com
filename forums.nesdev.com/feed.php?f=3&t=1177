<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=1177" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-03-02T06:13:33-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=1177</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-03-02T06:13:33-07:00</updated>
<published>2006-03-02T06:13:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10266#p10266</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10266#p10266"/>
<title type="html"><![CDATA[Color emphasis effects on YIQ elements?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10266#p10266"><![CDATA[
Saturation adjustment ("color" knob) multiplies each U and V by a scale factor. For hue adjustment ("tint" knob), shift the basis functions (sin() and cos() in this case). Given hue in radians, you can do this shift when setting up sintable[]:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void initSintable&#40;float hue&#41; &#123;<br />    int i;<br />    for&#40;i = 0; i &lt; 15; i++&#41;<br />        sintable&#91;i&#93; = sin&#40;i * M_PI / 6 + hue&#41;;<br />&#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Mar 02, 2006 6:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-03-01T22:04:00-07:00</updated>
<published>2006-03-01T22:04:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10257#p10257</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10257#p10257"/>
<title type="html"><![CDATA[Color emphasis effects on YIQ elements?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10257#p10257"><![CDATA[
How do you work Hue and Saturation adjustment settings into that?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Wed Mar 01, 2006 10:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-03-01T21:01:48-07:00</updated>
<published>2006-03-01T21:01:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10255#p10255</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10255#p10255"/>
<title type="html"><![CDATA[Color emphasis effects on YIQ elements?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10255#p10255"><![CDATA[
The discrete Fourier transform is essentially dot-producting your signal by a sine wave at each frequency that you want to test. Here's a straightforward way to do it, untested and unoptimized:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static float sintable&#91;15&#93;;<br /><br />void initSintable&#40;void&#41; &#123;<br />    int i;<br />    for&#40;i = 0; i &lt; 15; i++&#41;<br />        sintable&#91;i&#93; = sin&#40;i * M_PI / 6&#41;;<br />&#125;<br /><br />float getYUV&#40;const float *signal, float *outY, float *outU, float *outV&#41; &#123;<br />    double y = 0, u = 0, v = 0;<br />    int i;<br /><br />    for&#40;i = 0; i &lt; 12; i++&#41;<br />        y += signal&#91;i&#93;;<br />    for&#40;i = 0; i &lt; 12; i++&#41;<br />        u += signal&#91;i&#93; * sintable&#91;i&#93;;<br />    for&#40;i = 0; i &lt; 12; i++&#41;<br />        v += signal&#91;i&#93; * sintable&#91;i + 3&#93;;<br /><br />    if&#40;outY&#41;<br />        *outY = y / 12.0;<br />    if&#40;outU&#41;<br />        *outU = u / 6.0;<br />    if&#40;outV&#41;<br />        *outV = v / 6.0;<br />&#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Mar 01, 2006 9:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-03-01T20:46:23-07:00</updated>
<published>2006-03-01T20:46:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10254#p10254</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10254#p10254"/>
<title type="html"><![CDATA[Color emphasis effects on YIQ elements?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10254#p10254"><![CDATA[
Some of us don't know how to do a Fourier transform, though, and the Wikipedia article doesn't exactly explain it in a crystal-clear manner...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Wed Mar 01, 2006 8:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-03-01T20:28:35-07:00</updated>
<published>2006-03-01T20:28:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10252#p10252</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10252#p10252"/>
<title type="html"><![CDATA[Color emphasis effects on YIQ elements?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10252#p10252"><![CDATA[
The accurate way is to take the <a href="http://en.wikipedia.org/wiki/Discrete_Fourier_transform" class="postlink">discrete Fourier transform</a> of the 12-point signal and discard all but the DC and the first AC coefficient. The DC gives you Y, and the real and imaginary parts of AC give you U and V. YUV is the same thing as YIQ modulo tint. Because you only need three coefficients (real DC, real AC[1], imaginary AC[1]), it'll probably take only 7 multiplies and 29 adds.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Mar 01, 2006 8:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-03-01T20:03:22-07:00</updated>
<published>2006-03-01T20:03:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10251#p10251</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10251#p10251"/>
<title type="html"><![CDATA[Color emphasis effects on YIQ elements?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10251#p10251"><![CDATA[
I've implemented this in Nintendulator, though I have no idea if it is actually accurate:<br /><br />1. Given each palette entry, construct the chroma waveform (in an array of 12 floats or doubles).<br />2. Given the desired emphasis bits, attenuate the chroma signal.<br />3. Find the phase offset of your chroma signal. In my emulator, I used a function to find it within 1/5th of a degree in 3 passes (once within 30 degrees, another within 2.5 degrees, and finally within 0.208333 degrees) by comparing the chroma signal to a sine wave (with the same amplitude and offset) at 12 different phases and focusing on the one which resulted in the least absolute error.<br />4. Find the amplitude of your chroma signal. In my emulator, I simply subtracted the DC offset of the signal (the mean of all 12 values, also used as the luminance) and used its quadratic mean (otherwise known as RMS).<br />5. Feed your hue, saturation, and luminance into a YIQ-&gt;RGB converter [Y = luminance, I = saturation * sin(hue), Q = saturation * cos(hue)] and collect the results.<br /><br />The results look fairly close to what my composite monitor and TV tuner display when running my <a href="http://qmt.ath.cx/~nes/demos/colors2.zip" class="postlink">Color Bars v2</a> test program on my CopyNES.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Wed Mar 01, 2006 8:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Josh]]></name></author>
<updated>2006-03-01T19:52:31-07:00</updated>
<published>2006-03-01T19:52:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10250#p10250</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10250#p10250"/>
<title type="html"><![CDATA[Color emphasis effects on YIQ elements?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1177&amp;p=10250#p10250"><![CDATA[
When using a YIQ-based method to generate a NES palette, like <a href="it's now http://h1.ripway.com/blargg/temp/nes_ntsc_palette.c" class="postlink">this one by Blargg</a>, what's the most accurate way to do color emphasis? Someone once posted a table of floating point constant factors for each of the 8 color emphasis values, which would be applied to the RGB values to make "emphasized" palettes. However, in the actual hardware, wouldn't the emphasis happen <em>before</em> the YIQ decoding? Does anyone know how to do accurate color emphasis on the YIQ components rather than the resulting RGB?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=110">Josh</a> — Wed Mar 01, 2006 7:52 pm</p><hr />
]]></content>
</entry>
</feed>