<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - DMA operation in APU</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">DMA operation in APU</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6100">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6100</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Jul 18, 2010 7:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- How did you manage to get this test to pass? I mean, do you control the number of "eaten" CPU cycles by the DMC DMA?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Mon Jul 19, 2010 2:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">- How did you manage to get this test to pass? I mean, do you control the number of "eaten" CPU cycles by the DMC DMA?</div>
<br />
<br />Yes.  My PPU/CPU/APU are all cycle driven.  Most emulators (Nestopia 1.40, for one) do the sprite DMA all in one big chunk (a quick for loop) on any write to $4014 and just let the cycle accounting mechanisms take care of the held-off CPU time.  My PPU does the sprite DMA inline with its cycle emulation, one cycle at a time, for 513 or 514 cycles.  A write to $4014 simply sets up the internal state, the cycle-by-cycle emulate method does the rest.
<br />
<br />Thus, whenever a DMC DMA occurs, I know whether or not I'm in the middle of a sprite DMA or not.  And, because the PPU actually does the 513/514 cycle DMA one cycle at a time, I know exactly where in the sprite DMA I am when the DMC DMA occurs.  My CPU also provides the necessary "read/fetch, or write" information about the most recent cycle (useful, of course, only if the PPU isn't in the middle of a sprite DMA).  From there it's just a few easy checks to see whether to have 3, 2, or 1 wait state cycles before the DMC DMA cycle.
<br />
<br />I now pass both of the sprdma_and_dmc_dma test ROMs and have shifted attention over to trying to pass the $4016/DMC effect test ROMs.
<br />
<br />My code is all up on <a href="http://www.gitorious.org/nesicide/nesicide2-master/trees/master" class="postlink">Gitorious</a> if you're curious.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Jul 19, 2010 6:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> And, because the PPU actually does the 513/514 cycle DMA one cycle at a time, I know exactly where in the sprite DMA I am when the DMC DMA occurs.</div>
<br />The 2A03 does the DMA, not the PPU, as far as I know. I'm pretty sure the PPU just sees it as a series of $2004 writes every other CPU cycle.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Mon Jul 19, 2010 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NESICIDE wrote:</div><div class="quotecontent"> From there it's just a few easy checks to see whether to have 3, 2, or 1 wait state cycles before the DMC DMA cycle.</div>
<br />
<br />- That's my question, what checks do you do? I couldn't locate anything in your code. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Mon Jul 19, 2010 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent"><div class="quotetitle">NESICIDE wrote:</div><div class="quotecontent"> From there it's just a few easy checks to see whether to have 3, 2, or 1 wait state cycles before the DMC DMA cycle.</div><br /><br />- That's my question, what checks do you do? I couldn't locate anything in your code. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />
<br />@Zepper:  Look for calls to C6502::STEALCYCLES and calls to C6502::DMA.  Also look at CPPU::PPU(unsigned short addr, unsigned char data) for IOSPRITEDMA (where $4014 is written and the transfer is set up).
<br />
<br />@blargg:  I agree the DMA cycles originate from the 6502...I just left the implementation in the PPU because I originally just did the quick 256-byte for-loop copy there.  I only do a DMA or STEALCYCLES call once every 3 or 3.2 PPU cycles.  I'll look into moving it to be more correct.
<br />
<br />EDIT: files are emulator/cnes6502.h and .cpp, emulator/cnesppu.h and .cpp, and emulator/cnesapu.h and .cpp.
<br />
<br />I'm struggling with an APU/SDL sync problem at the moment tho so even though the APU is "flawless" according to blargg's tests it sounds like poop warmed over.  I really hate the SDL callback interface.  Not flexible *at all*!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Wed Dec 22, 2010 6:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey all, this is a bit of a bump but I think it's worth it.  I recently posed my question #1 (from wayyyyy back in the original post that created this thread) to Kevtris over PM.  We had a few back and forths, but this is the ultimate answer that he provided:
<br />
<br /><div class="quotetitle">kevtris wrote:</div><div class="quotecontent">In my implementation, the sprite DMA takes precidence as it must, to prevent graphics corruption. The sample DMA is not stalled though and it will attempt to fetch a sample if it needs one, which happens to be sprite data at the time.<br /><br />Be that as it may, I have not heard any audible artifacts from this happening even when it plays a byte of sprite data as sample data; probably because the samples are really noisy as-is, and 8 samples doesn't make much difference because the rest of the waveform is noisy as hell.<br /><br />A test would be to play a continuous DPCM stream of 00 or ff to peg the DAC counter at one of the ends, then sprite DMA the opposite.<br /><br />like if you DPCM 00h's sprite DMA ff's and watch the output. if it blips then I am doing it right. if not, either sprite fetches are getting screwed, or DPCM is being deferred or injecting extra reads (doubtful).</div>
<br />I think this is incredibly interesting.  Essentially what Kevtris' is saying is that a DMC DMA operation will never be stalled when an OAM DMA operation is in progress - nor will an OAM DMA operation be stalled as a result of an in-progress DMC DMA operation.  The DMC DMA (at least in his design) will just receive corrupted data (which will actually be sprite data) whenever an OAM DMA xfer needs to occur.  Given how accurate Kevtris' emulator has been touted to be, especially for the most bizarre and picky games, I would expect that this is the correct implementation.  Not only that but for some reason it just seems to me like the kind of thing Nintendo would do to save engineering time and money.
<br />
<br />So it's pretty funny because the short, one-word answer to my original question #1 is: Neither.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Anyway, I just wanted to share that bit of info and make sure that it got out into the community.  Kevtris said he was cool with me sharing his answer.  I'm curious if anyone has any additional thoughts on it.
<br />
<br />Pz!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Jun 08, 2012 11:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bump, has the behavior (corrupted DMC samples during sprite DMA) been confirmed?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Tue Jun 12, 2012 1:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hiya dwedit,
<br />
<br />I'm pretty positive that Kevtris' implementation is correct. I tested the following three different implementations using Duck Hunt:
<br />
<br />Method 1: Stop OAM DMA while DMC DMA is occurring
<br />Result: duck/dog sprites visually corrupted on screen whenever "Quack!/Arff!" sounds occurred
<br />
<br />Method 2: Stop DMC DMA while OAM DMA is occurring
<br />Result: heard audible distortion in "Quack!/Arff!" sounds
<br />
<br />Method 3: Do not pause DMC DMA if OAM DMA occurs, but DMC receives sprite data while OAM DMA is occurring (this is kevtris' method)
<br />Result: no audible or visual distortion whatsoever
<br />
<br />I also tested it with Kung Fu and received similar (and worse) results. Kung Fu will eventually freeze if you use method 1. Likely because it uses the DMC channel much more frequently than Duck Hunt.
<br />
<br />Hope that helps!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Jun 12, 2012 1:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After re-reading the thread, Blargg mentioned that DMC used two cycles if it happened during a 4014 sprite dma transfer.  So does it interrupt the sprite DMA to perform the DMC read?  What's it doing during those two cycles?
<br />
<br />Why would stopping Sprite DMA to do a DMC read corrupt the sprites?
<br />
<br />Also wondering because Nintendulator doesn't pass the timing tests for DMC reads during sprite DMA.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sun Jun 17, 2012 5:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">After re-reading the thread, Blargg mentioned that DMC used two cycles if it happened during a 4014 sprite dma transfer.  So does it interrupt the sprite DMA to perform the DMC read?  What's it doing during those two cycles?<br /><br />Why would stopping Sprite DMA to do a DMC read corrupt the sprites?<br /><br />Also wondering because Nintendulator doesn't pass the timing tests for DMC reads during sprite DMA.</div>
<br />I finally found the post I wanted to reply to with <a href="http://nesdev.com/bbs/viewtopic.php?t=9009&amp;highlight=" class="postlink">this topic post</a>.  I plan to implement what I'm observing from my Visual2A03 trials in my emulator.  As you said, it does indeed interrupt the sprite DMA to perform the DMC read...for two cycles.  The read/write/read beat of the sprite DMA is kept such that the DMC read occurs where the sprite read from the sprite memory page would otherwise occur.  Then in the cycle that should be a write to 2004 there's just a CPU read from the PC value before the sprite DMA started.  Then the sprite DMA picks up where it left off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Mon Aug 26, 2013 6:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DMA operation in APU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is source code available for the sprdma_and_dmc_dma test roms?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Aug 26, 2013 11:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DMA operation in APU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looks like it was an off-the-cuff test. I've located the source and will package it the next time I'm on my old Mac.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Mon Aug 26, 2013 11:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DMA operation in APU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Looks like it was an off-the-cuff test. I've located the source and will package it the next time I'm on my old Mac.</div><br /><br />Would be appreciated. Could PM it too if you have it and feel like it - off-the-cuff state if better than nothing. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Tue Aug 27, 2013 12:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DMA operation in APU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haven't traced through the code to figure out what's going on yet, but for some reason the output ends up way off. I pass all the apu_test, apu_reset, and cpu_interrupts_v2 tests (and all the ppu_vbl_nmi tests except 07-nmi_on_timing.nes (off by 1-2 ticks - might be some analog thing going on there)).<br /><br />I end up with<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">tests/sprdma_and_dmc_dma/sprdma_and_dmc_dma.nes FAILED<br />T+ Clocks (decimal)<br />00 3768<br />01 3767<br />02 3768<br />03 3767<br />04 3768<br />05 3767<br />06 3766<br />07 3765<br />08 3766<br />09 3765<br />0A 3766<br />0B 3765<br />0C 3766<br />0D 3765<br />0E 3766<br />0F 3765<br /><br />7461977F<br />SPRDMA and DMC DMA<br /><br />Failed<br /><br />tests/sprdma_and_dmc_dma/sprdma_and_dmc_dma_512.nes FAILED<br />T+ Clocks (decimal)<br />00 3766<br />01 3765<br />02 3766<br />03 3765<br />04 3766<br />05 3765<br />06 3766<br />07 3767<br />08 3768<br />09 3767<br />0A 3768<br />0B 3767<br />0C 3768<br />0D 3767<br />0E 3768<br />0F 3767<br /><br />2EA11D4D<br />SPRDMA and DMC DMA<br /><br />Failed</div><br /><br />Here's the DMC code in case anyone can spot any obvious bugs/misunderstandings. The sample loading timing is ballparked at the moment and misses some corner cases, though I don't think by enough to warrant the huge error. <strong>channel_updated</strong> is for sample generation and can be ignored.<br /><br /><strong>Registers:</strong><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// $4010<br />void write_dmc_reg_0(uint8_t value) {<br />&nbsp; &nbsp; static uint16_t const dmc_ntsc_periods&#91;&#93; =<br />&nbsp; &nbsp; &nbsp; { 428, 380, 340, 320, 286, 254, 226, 214, 190, 160, 142, 128, 106, 84, 72, 54 };<br /><br />&nbsp; &nbsp; if (!(dmc_irq_enabled = value &amp; 0x80)) {<br />&nbsp; &nbsp; &nbsp; &nbsp; dmc_irq = false;<br />&nbsp; &nbsp; &nbsp; &nbsp; update_irq_status();<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; dmc_loop_sample = value &amp; 0x40;<br />&nbsp; &nbsp; dmc_period&nbsp; &nbsp; &nbsp; = dmc_ntsc_periods&#91;value &amp; 0x0F&#93;;<br />}<br /><br />// $4011<br />void write_dmc_reg_1(uint8_t value) {<br />&nbsp; &nbsp; unsigned const old_dmc_counter = dmc_counter;<br /><br />&nbsp; &nbsp; dmc_counter = value &amp; 0x7F;<br /><br />&nbsp; &nbsp; if (dmc_counter != old_dmc_counter)<br />&nbsp; &nbsp; &nbsp; &nbsp; channel_updated = true;<br />}<br /><br />// $4012<br />void write_dmc_reg_2(uint8_t value) {<br />&nbsp; &nbsp; dmc_sample_start_addr = 0x4000 | (value &lt;&lt; 6);<br />}<br /><br />// $4013<br />void write_dmc_reg_3(uint8_t value) {<br />&nbsp; &nbsp; dmc_sample_len = (value &lt;&lt; 4) + 1;<br />}</div><br /><br /><strong>Clocking:</strong><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void tick_apu() {<br />&nbsp; &nbsp; ...<br />&nbsp; &nbsp; if (--dmc_period_cnt == 0) {<br />&nbsp; &nbsp; &nbsp; &nbsp; dmc_period_cnt = dmc_period;<br />&nbsp; &nbsp; &nbsp; &nbsp; clock_dmc();<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; ...<br />}<br /><br />static void clock_dmc() {<br />&nbsp; &nbsp; if (dmc_bits_remaining &gt; 0) {<br />&nbsp; &nbsp; &nbsp; &nbsp; if (dmc_sample_buffer &amp; 1) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (dmc_counter &lt; 126) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dmc_counter += 2;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; channel_updated = true;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (dmc_counter &gt; 1) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dmc_counter -= 2;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; channel_updated = true;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; dmc_sample_buffer &gt;&gt;= 1;<br />&nbsp; &nbsp; &nbsp; &nbsp; if (--dmc_bits_remaining == 0 &amp;&amp; dmc_bytes_remaining &gt; 0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; load_dmc_sample_byte();<br />&nbsp; &nbsp; }<br />}</div><br /><br /><strong>Status:</strong><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// $4015<br />uint8_t read_apu_status() {<br />&nbsp; &nbsp; uint8_t const res =<br />&nbsp; &nbsp; &nbsp; (dmc_irq&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; 7) |<br />&nbsp; &nbsp; &nbsp; (frame_irq&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; 6) |<br />&nbsp; &nbsp; &nbsp; (cpu_data_bus&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp; 0x20) | // Open bus<br />&nbsp; &nbsp; &nbsp; ((dmc_bytes_remaining &gt; 0) &lt;&lt; 4) |<br />&nbsp; &nbsp; &nbsp; ((noise_len_cnt&nbsp; &nbsp; &nbsp; &nbsp;&gt; 0) &lt;&lt; 3) |<br />&nbsp; &nbsp; &nbsp; ((tri_len_cnt&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&gt; 0) &lt;&lt; 2) |<br />&nbsp; &nbsp; &nbsp; ((pulse&#91;1&#93;.len_cnt&nbsp; &nbsp; &gt; 0) &lt;&lt; 1) |<br />&nbsp; &nbsp; &nbsp; &nbsp;(pulse&#91;0&#93;.len_cnt&nbsp; &nbsp; &gt; 0);<br />&nbsp; &nbsp; frame_irq = false;<br />&nbsp; &nbsp; update_irq_status();<br />&nbsp; &nbsp; return res;<br />}<br /><br />// $4015<br />void write_apu_status(uint8_t value) {<br />&nbsp; &nbsp; ...<br /><br />&nbsp; &nbsp; // We need to clear the DMC IRQ before handling the DMC enable/disable in<br />&nbsp; &nbsp; // case a one-byte sample is loaded below, which will immediately fire a<br />&nbsp; &nbsp; // DMC IRQ<br />&nbsp; &nbsp; dmc_irq = false;<br />&nbsp; &nbsp; update_irq_status();<br /><br />&nbsp; &nbsp; // DMC enable bit. We model DMC enabled/disabled through the number of<br />&nbsp; &nbsp; // sample bytes that remain (greater than zero =&gt; enabled).<br />&nbsp; &nbsp; if (!(value &amp; 0x10))<br />&nbsp; &nbsp; &nbsp; &nbsp; dmc_bytes_remaining = 0;<br />&nbsp; &nbsp; else {<br />&nbsp; &nbsp; &nbsp; &nbsp; if (dmc_bytes_remaining == 0) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dmc_sample_cur_addr = dmc_sample_start_addr;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dmc_bytes_remaining = dmc_sample_len;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // If a sample byte is currently being played, the sample is<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // restarted only after it has finished<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (dmc_bits_remaining == 0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; load_dmc_sample_byte();<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; ...<br />}</div><br /><br /><strong>Sample loading:</strong><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static void load_dmc_sample_byte() {<br />&nbsp; &nbsp; // Timing: http://forums.nesdev.com/viewtopic.php?p=62690#p62690<br />&nbsp; &nbsp; // TODO: Open bus?<br />&nbsp; &nbsp; assert(dmc_bytes_remaining &gt; 0);<br />&nbsp; &nbsp; assert(dmc_bits_remaining == 0);<br /><br />&nbsp; &nbsp; dmc_sample_buffer = prg(dmc_sample_cur_addr);<br /><br />&nbsp; &nbsp; // We use tick() since the PPU as as well as the rest of the APU should<br />&nbsp; &nbsp; // keep ticking during the fetch.<br />&nbsp; &nbsp; // TODO: Is this done before or after the IRQ is generated? (Should be<br />&nbsp; &nbsp; // invisible though.)<br />&nbsp; &nbsp; unsigned const delay = doing_oam_dma ? 2 : doing_read ? 4 : 3;<br />&nbsp; &nbsp; for (unsigned i = 0; i &lt; delay; ++i) tick();<br /><br />&nbsp; &nbsp; dmc_sample_cur_addr = (dmc_sample_cur_addr + 1) &amp; 0x7FFF;<br /><br />&nbsp; &nbsp; // Putting this after the delay ensures that we can't get a recursive<br />&nbsp; &nbsp; // invocation of load_dmc_sample_byte(), since it can only called be called<br />&nbsp; &nbsp; // through dmc_bits_remaining going from 1 to 0 while the CPU is stalled<br />&nbsp; &nbsp; dmc_bits_remaining = 8;<br /><br />&nbsp; &nbsp; if (--dmc_bytes_remaining == 0) {<br />&nbsp; &nbsp; &nbsp; &nbsp; if (dmc_loop_sample) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dmc_sample_cur_addr = dmc_sample_start_addr;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dmc_bytes_remaining = dmc_sample_len;<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (dmc_irq_enabled) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dmc_irq = true;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; update_irq_status();<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; }<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Aug 27, 2013 2:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DMA operation in APU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Full sources + rom: <a href="http://blargg.8bitalley.com/nes-tests/sprdma_and_dmc_dma.zip" class="postlink">sprdma_and_dmc_dma.zip</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>