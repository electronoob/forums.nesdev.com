<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8513" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-01-13T08:02:52-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8513</id>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-01-13T08:02:52-07:00</updated>
<published>2012-01-13T08:02:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88812#p88812</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88812#p88812"/>
<title type="html"><![CDATA[Re: Interrupt behavior]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88812#p88812"><![CDATA[
<div class="quotetitle">beannaich wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        apuSource.Reset&#40;&#41;;<br />        Interrupt&#40;0xFFFE&#41;;<br />...<br />        dmcSource.Reset&#40;&#41;;<br />        Interrupt&#40;0xFFFE&#41;;<br />...<br />        extSource.Reset&#40;&#41;;<br />        Interrupt&#40;0xFFFE&#41;;<br /></div><br /></div><br />I'm assuming Interrupt() is an API that causes your CPU core to vector to the interrupt.  I'm not sure what the .Reset() APIs are doing, but if they're clearing the fact that the APU or DMC caused an interrupt in the APU or DMC itself, then this is being done prematurely.  The interrupt shouldn't be cleared by the fact that it's being vectored to...the interrupt handler that's vectored to should read/write to $4015 or whatever the 'interrupt clear' stimulus is.  Inside *that* code is where I'd think you'd want to do your .Reset() call.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Fri Jan 13, 2012 8:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-01-13T07:59:41-07:00</updated>
<published>2012-01-13T07:59:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88811#p88811</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88811#p88811"/>
<title type="html"><![CDATA[Interrupt behavior]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88811#p88811"><![CDATA[
<div class="quotetitle">beannaich wrote:</div><div class="quotecontent"><br />PLP and RTI undergo the same latency as CLI, correct? And does SEI have any latency, or is it's effect immediate?<br /></div><br /><br />There's a <a href="https://gitorious.org/nesicide/nes-test-roms/trees/master/cpu_interrupts_v2" class="postlink">set of well-documented test ROMs</a> for this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Fri Jan 13, 2012 7:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2012-01-13T00:24:10-07:00</updated>
<published>2012-01-13T00:24:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88799#p88799</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88799#p88799"/>
<title type="html"><![CDATA[Interrupt behavior]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88799#p88799"><![CDATA[
PLP and RTI undergo the same latency as CLI, correct? And does SEI have any latency, or is it's effect immediate?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Fri Jan 13, 2012 12:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-01-13T00:08:20-07:00</updated>
<published>2012-01-13T00:08:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88798#p88798</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88798#p88798"/>
<title type="html"><![CDATA[Interrupt behavior]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88798#p88798"><![CDATA[
IRQs are level activated, they stick around until you've told the IRQ source to clear the flag.  Entering an interrupt handler will set the processor's IRQ disable flag, so it won't immediately end up in an infinite loop before it can tell the IRQ source that it has handled it.<br /><br />The CLI, PLP, and RTI instructions can change the state of the processor's interrupt disable flag.  If there's an interrupt waiting, that can cause it to jump to the IRQ handler.<br /><br />Don't know of any interrupts that expire if you don't handle them in time, but I know the GBA has some of those.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Fri Jan 13, 2012 12:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2012-01-12T23:59:13-07:00</updated>
<published>2012-01-12T23:59:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88797#p88797</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88797#p88797"/>
<title type="html"><![CDATA[Interrupt behavior]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8513&amp;p=88797#p88797"><![CDATA[
Hello all,<br /><br />I've been testing games to see what bugs I need to fix, and while playing "Gimmick!" I noticed that my IRQs aren't too stable. I was wondering what the best way to emulate IRQs would be, as currently it's implemented as:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if &#40;apuSource.Asserted&#41;<br />&#123;<br />    if &#40;!sr.i&#41;<br />    &#123;<br />        apuSource.Reset&#40;&#41;;<br />        Interrupt&#40;0xFFFE&#41;;<br />    &#125;<br /><br />    continue;<br />&#125;<br /><br />if &#40;dmcSource.Asserted&#41;<br />&#123;<br />    if &#40;!sr.i&#41;<br />    &#123;<br />        dmcSource.Reset&#40;&#41;;<br />        Interrupt&#40;0xFFFE&#41;;<br />    &#125;<br /><br />    continue;<br />&#125;<br /><br />if &#40;extSource.Asserted&#41;<br />&#123;<br />    if &#40;!sr.i&#41;<br />    &#123;<br />        extSource.Reset&#40;&#41;;<br />        Interrupt&#40;0xFFFE&#41;;<br />    &#125;<br /><br />    continue;<br />&#125;</div><br /><br />But I'm not sure if that's correct. So to start off with, are the APU Frame, DPCM, and Mapper interrupt lines continuously asserted until acknowledged? Do only some mappers follow this behavior? What happens when the interrupt flag is set, is the IRQ ignored, or does that flag only inhibit the interrupt routine from occurring?<br /><br />Say the DPCM asserts /IRQ, and the interrupt inhibit flag is set. The CPU ignores that request. Then say about 6 instructions later, a CLI instruction is executed (ignore CLI latency for now), what happens after that? Would /IRQ still be asserted from the DPCM assertion 6 instructions prior?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Thu Jan 12, 2012 11:59 pm</p><hr />
]]></content>
</entry>
</feed>