<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SPC7110 Reverse Engineering Project</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SPC7110 Reverse Engineering Project</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>19</strong> of <strong>21</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Mon Jul 14, 2008 3:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ummm, i have failed both trying to figure out how every bitplane #0's context is "splitted" in 2 contexts for bitplane #1 and the exact way the "MPS" works for bitplane #0 (the "prediction" thing we saw in type 0). 
<br />
<br />In my tests, the selection of the context for bitplane #1 *seems* to depend on the output symbol for context #0, but that's not the only data to consider... and though i have seen some ideas that "seemed" to work, they fail when advancing in the stream.
<br />
<br />Due to that, i changed to study the "prediction" thing for bitplane #0; in the first pixels, it seemed like only the inversion of bit #0 of the previous pixel was used, but after some more bits, things started to get more complex... so i haven't draw any conclusion.
<br />
<br />At this point i'm not sure if i'm looking at the data the wrong way, if my approaches were too simplistic or if the programs i have used are buggy, so just take your chance and make us know what you get.
<br />
<br />Time for sleeping. Good luck.
<br />
<br />EDITED: Back from bed to make an important observation:
<br />I have been working under the implicit assumption that the 'MPS' thing worked on the bit level; i mean: that, for every pixel, the first symbol determine one full bit, while the second one (whose context should be dependent of the first) determined the second one. This is, of course, just a wild guess (i assumed it as first hypothesis as i was expecting, like neviksti, that the first bit of the pixel determined which one of the 2 bitplane #1's contexts was selected), as the "MPS" thing could be more complex that just two 'orthogonal' values tracking the mps for the fist and second bit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jul 15, 2008 9:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">EDITED: Back from bed to make an important observation:<br />I have been working under the implicit assumption that the 'MPS' thing worked on the bit level; i mean: that, for every pixel, the first symbol determine one full bit, while the second one (whose context should be dependent of the first) determined the second one. This is, of course, just a wild guess (i assumed it as first hypothesis as i was expecting, like neviksti, that the first bit of the pixel determined which one of the 2 bitplane #1's contexts was selected), as the "MPS" thing could be more complex that just two 'orthogonal' values tracking the mps for the fist and second bit.</div>
<br />Hmm... maybe my terminology choices were unclear before, but the whole reason the prob calculator failed at first was because each symbol was NOT one-to-one related to a bit.  Every two symbols decides one pixel (otherwise the updated prob calculator would not work), but it seems to be more of an index into some lookup table than it is directly related to the bit values.
<br />
<br />Since you have been able to figure out the context for the first symbol of each pixel (there are five), have you tried just selecting the context for the second symbol something like: 
<br />5 + context of first symbol*2 + 1 if first symbol is lps?
<br />Or if that doesn't work then something like:
<br />5 + context of first symbol*2 + 1 if first symbol (lps^invert)?
<br />
<br />Sorry if these are obvious things you already tried.  I haven't had time to play with the data myself yet.
<br />
<br />EDIT: I did take time to give the patent a quick read last night, but on the first time through I didn't understand their method of encoding the pixel.  They did seem to indicate the symbols didn't directly relate to the bit values, but beyond that I didn't understand the details.  I definitely need to give it a second read with more care, but if someone already understands that part of the patent... please share your interpretation of that.
<br />
<br />EDIT(2): To be more explicit, I've seen the two bits of the pixel show up in this order in the current "range" of the arithmetic encoder:
<br />
<br />something like this
<br />
<br />10
<br />01
<br />00
<br />11
<br />
<br />and sometimes something like
<br />
<br />01
<br />10
<br />00
<br />11
<br />
<br />etc.
<br />
<br />That's why I don't believe each symbol relates directly to a bit, but the two symbols together are somekind of lookup into a table.  The patent mentions prior art used a lookup into a table of the pixel values in order of frequency, and that they improved on this somehow.  The patent seems to still use the symbols as a index into some table (the patent comments on some ROM precalculated table based on states or something), but I don't fully understand it yet.  Like I mentioned, I really need to give the patent a second read.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Jul 15, 2008 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">5 + context of first symbol*2 + 1 if first symbol is lps?<br />Or if that doesn't work then something like:<br />5 + context of first symbol*2 + 1 if first symbol (lps^invert)?</div><br /><br />Yeah, i tried that and much more ideas. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">something like this<br /><br />10<br />01<br />00<br />11<br /><br />and sometimes something like<br /><br />01<br />10<br />00<br />11<br /></div><br /><br />OK. It's more clear now. But... then, when an "invert" occur, what is happening with that order? You mentioned maybe you could modify your program to be able to reproduce that full order; maybe knowing what happens when an invert occur in a context for bitplane #0 could be valuable... (or even we could see whether or not that order is related with the choice of contexts for bitplane #1).<br /><br />Indeed, in your description:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">bit 7 - first bit of 2bit color at top of current input range<br />bit 6 - second bit of 2bit color at top of current input range </div>
<br />
<br />i'm not sure what you refer to as the "current input range" after the first symbol for a pixel. Till now i have simply ignored those 2 bits.
<br />
<br />As for the patent, i just did a "diagonal" read, so i suppose i should take another look if you think something interesting about the encoding of the pixels is said there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Jul 15, 2008 12:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK. I took another look at the patent. I don't have the patiente to do a careful read (as i still it's too generic to pay too much attention to it), but i looked again at the PBP thing, as that seem what we are lacking to know how to select the context for bitplane #1.
<br />
<br />If i have understood it correctly, it seems it would chose one or another based on the output for the first bit in the pixel.
<br />
<br />However, if i have followed neviksti's explanations, we can have a symbol ordering for a pixel of the form
<br />01
<br />10
<br />00
<br />11
<br />in which case the first symbol (the one from bitplane #0) doesn't give us an output symbol that could be used to determine the context for bitplane #1.
<br />
<br />However, if the ordering is like
<br />01
<br />00
<br />10
<br />11
<br />then the first symbol effectively correlate with the first output bit for the pixel.
<br />
<br />So... i was wondering if indeed the context choice for bitplane #1 is decided based on if the first symbol has determined a full bit. That way, one of the contexts would be intended to optimize the compression in the case when the second bit can be understood as "independent" to the first one, while the other context would be optimized to take into account the "joint probability estimation" for the 2 bits.
<br />
<br />This is, of course, just (another) wild guess, and i don't even consider it very probable, but i thought i should share it. Now i'm not sure if i can check this with the available data. neviksti, could you explain what exactly those 2 bits are? (Which is the "top" of the current input range? The pixel value corresponding to the LPS/LPS pair? And what is it when referred to the second symbol for a pixel? The pixel value corresponding to an LPS as second symbol when the value for the first symbol have been fixed?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jul 15, 2008 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">Now i'm not sure if i can check this with the available data. neviksti, could you explain what exactly those 2 bits are? (Which is the "top" of the current input range? The pixel value corresponding to the LPS/LPS pair? And what is it when referred to the second symbol for a pixel? The pixel value corresponding to an LPS as second symbol when the value for the first symbol have been fixed?)</div>
<br />Yes, for the first symbol it is the pixel value for the lps/lps pair.  And for the second symbol it is the pixel value corresponding to an lps with the first symbol fixed to the chosen path.
<br />
<br />For this reason, it is not possible to construct the correspondance to all four pixel values.
<br />
<br />Where I saw the cases where the bits don't correspond directly to the symbols and I could finally see what was going on, was from the "firstbyte" data for mode 1 (from way back with the first data runs with the original cartridge).  So that may be a good place to start until I get a chance to change the program and give you more appropriate data.  (I may not be able to get to it tonight as I'm having some friends over for a cookout... but given my sleeping habits lately, who knows.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Lord Nightmare</b> [ Tue Jul 15, 2008 11:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This stuff is going so far over my head its not funny. I need to read up on the arithmetic coding techniques used here...
<br />
<br />LN

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jul 15, 2008 11:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Lord Nightmare wrote:</div><div class="quotecontent">This stuff is going so far over my head its not funny.</div>
<br />
<br />I'm glad it's not just me ... and I really, really want to help, too :(

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jul 15, 2008 11:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah!  I finally had time to look at the data.  With Andreas' explanation of the 5 contexts, everything is making decent sense now.  I seem to be able to follow all the prob evolution.
<br />
<br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">5 + context of first symbol*2 + 1 if first symbol is lps?<br />Or if that doesn't work then something like:<br />5 + context of first symbol*2 + 1 if first symbol (lps^invert)?</div><br /><br />Yeah, i tried that and much more ideas.</div>
<br />Hmm... I meant "invert" as it was for mode 0 (ie. the invert value used for that symbol).  I think you may have used instead the invert value after it was updated from that symbol.  For the second option seems to work fine.
<br />
<br />I haven't rewritten the SNES program yet, but looking at the first byte data it look like the following to me:
<br />the symbols are just indexes into a table and the output is somehow xor'd with one of the reference pixels?
<br />
<br />I don't know.  I still have a ways to go on that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Wed Jul 16, 2008 12:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This stuff is going so far over my head its not funny. I need to read up on the arithmetic coding techniques used here... </div><br /><br />As a first reading, i would suggest this document:<br /><a href="http://msp.csie.ncu.edu.tw/DC/pdf/QM.pdf" class="postlink">http://msp.csie.ncu.edu.tw/DC/pdf/QM.pdf</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hmm... I meant "invert" as it was for mode 0 (ie. the invert value used for that symbol). I think you may have used instead the invert value after it was updated from that symbol. For the second option seems to work fine. </div>
<br />
<br />Ummm, yes, maybe we were given different meanings to the "invert" thing. I will recheck it when at home.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Wed Jul 16, 2008 1:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK. I took a look at your implementation for the type 0. Definitively we were talking of different things. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />
<br />Besides that, it's clear for me that that 0x7f "extrange limit case" is only an artifact derived from the way you have chosen your internal states. If you look at the way QM-coders are implemented in reference documents, you can see the choice i did for the internal states is the standard one ('A' is what i was naming 'cutoff', and 'C' what i was naming 'value', but that's all). Then, instead of initializing top=0xff, you can do A=0x100=0x00(modulus 0x100)  and drop both the extrange border case and the "&lt;&lt;1 + 1" thing when renormalizing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Wed Jul 16, 2008 1:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">Besides that, it's clear for me that that 0x7f "extrange limit case" is only an artifact derived from the way you have chosen your internal states.</div>
<br />It is not an artifact.  Yes there are several ways to choose your internal variables.  But regardless of how you write them, if the current range of values being considered is constrained to the range:
<br />0x000000..... to 0x7FFFFF....
<br />
<br />It is possible to renormalize. They don't.  That is why it is a strange border case.
<br />
<br />Instead they wait until the range is constrained to something like:
<br />0x000000..... to 0x7<span style="text-decoration: underline">E</span>FFFF....
<br />
<br />This fact is independant of the choice of internal state variables.  
<br />
<br />;------------
<br />I like the top=0xFF (all lower bits are implied 1's) instead of top=0x00 (when 0x00 imply the next higher bit is 1), because the "implied bits" are always the same in the first case, where they aren't in the second case (once you subtract and top=0xA6 for example, the bit is no longer implied so that top=0x1A6).  I find the 'consistency' of the first one nicer for conceptual simplicity.  Actually it is this "inconsistency" that probably causes that strange border case out of convenience (for if you actually renormalized every time it was possible, you would have to test for two conditions "is A&lt;=0x80 &amp;&amp; A!=0x00 then shift"... instead they change this to "is A&lt;0x80" for convenience of only needing to test one condition and in doing so introduce a small error).
<br />
<br />It of course is merely a choice of preference at this point, that's just my personal preference and reason.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Wed Jul 16, 2008 1:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, I rewrote the SNES code to record enough data that we can see evolving "order of likely pixel values".
<br />
<br /><!-- m --><a class="postlink" href="http://neviksti.com/SPC7110/output1_7030_an1.dat2">http://neviksti.com/SPC7110/output1_7030_an1.dat2</a><!-- m -->
<br />
<br />format:
<br />Each pixel has 8 bytes worth of data
<br />0 - bit4/bit0 show pixel value for lps then lps
<br />1 - bit4/bit0 show pixel value for lps then mps
<br />2 - bit4/bit0 show pixel balue for mps then lps
<br />3 - first symbol prob value
<br />4 - bit 7 (lps?), lower bits are number of renormalization shifts after handling symbol
<br />5 - (not needed, just a consistency check) bit4/bit0 show pixel value for second symbol lps given decided first symbol
<br />6 - second symbol prob value
<br />7 - bit 7 (lps?), lower bits are number of remormalizaiton shifts after handling symbol
<br />
<br />
<br />EDIT:
<br />The data is very bizarre.  I'm glad I took this because I can test ideas quicker ... unfortunately they are all failing <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />
<br />
<br />The part I am having trouble conceptually with most, is how they handle the fact that we might be in context (A=B!=C), but the predicted values probably depend on A somehow.  How do they depend on A?
<br />
<br />The easiest way to see this now is look at the first time a new context is used, the list of pixels is 00 01 10 11 only if the context pixels are all zero.  That very first prediction for each context should be the easiest ... yet I fail at even that.  I'm clearly missing something.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Wed Jul 16, 2008 2:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I like the top=0xFF (all lower bits are implied 1's) instead of top=0x00</div><br />You are missing the point here. Your "top" doesn't play the same role than "A" in the standard implementations. To say it this way, your "top" try to indicate the maximum value of a certain range, while the 'A' try to indicate the lesser value not included in that range. That's why you continuously have to add 1 after shifting bits while that is not needed for A.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A&lt;=0x80 &amp;&amp; A!=0x00</div><br />A can *never* be less than 0x80-0x5a=0x26 but in the initialization.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">in doing so introduce a small error</div><br />This is a funny sentence. The theoretical base for all this is to try to maintain the interval range as close to 1 as possible (to avoid discretization errors); by shifting a bit when A's MSb is 0 they try to maintain the interval length in the [0.75-1.5] range. Even if i believed that the way you are doing this is the natural one (which i don't), to consider a 1/128 shift in the extremes of that "length range" as an "error" is funny when considered how small it is when compared with the discretization errors you are commiting when situated in the extremes of that interval.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It of course is merely a choice of preference at this point, that's just my personal preference and reason.</div><br />Yes, of course. At this point it is clear that we have different states of mind about this, but that is not very important as, indeed, we can see the arithmetic decoder as a black box for what is now discussed.<br /><br />EDITED:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A&lt;=0x80 &amp;&amp; A!=0x00</div><br />A can *never* be less than 0x80-0x5a=0x26 but in the initialization.</div>
<br />Oh, i now understand what you referred to with the "A!=0x00". But, not, it's not only a reason of convenience for implementation purposes; it is more "unnatural" to shift when A=0x80 than when A=0x7f because when A is near 0x80 the interval length to which your internal variables are mapped is near 0.75 in the [0.75-1.5] range, and, from the point of view of the "natural" things"  it's preferred to not shift as long as possible at that point, as if you shift, the interval to which your internal variables will have a length near 1.5 and, of course, the discretization errors will be bigger when located in the 1.5 neiborhood. So, indeed, if this were exclusively driven by the "most natural choice" we should renormalize at mush lesser values but, of couse, just checking 1 bit is a big convenience for implementation purposes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Wed Jul 16, 2008 3:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">You are missing the point here. Your "top" doesn't play the same role than "A" in the standard implementations. To say it this way, your "top" try to indicate the maximum value of a certain range, while the 'A' try to indicate the lesser value not included in that range. That's why you continuously have to add 1 after shifting bits while that is not needed for A.</div><br />I fully understand that.  It is a choice of having your state variable mark what the current range is "less than", or "less than or equal to".  Hence the choice of having your intial value be "0x00" or "0xFF" with different implications for the "unnamed bits".  This doesn't change the fact that they don't renormalize when they can.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A&lt;=0x80 &amp;&amp; A!=0x00</div><br />A can *never* be less than 0x80-0x5a=0x26 but in the initialization.</div><br />Yes, because of their choice to renormalize only when A &lt; 0x80, instead of renormalizing whenever possible (which would be "top" &lt; 0x80 or equivalently "A&lt;=0x80 &amp;&amp; A!=0x00").<br /><br />The compresion would be more efficient if they actually multiplied by the probabilities (true arithmetic compression), but instead we are of course making the approximation:  range * prob ~= prob.  The further the range gets from 0000.... to FFFF... the worse this approximation becomes.<br /><br />So I don't understand why not renormalizing whenever possible wouldn't be considered a small error.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">...by shifting a bit when A's MSb is 0 they try to maintain the interval length in the [0.75-1.5] range.</div>
<br />
<br />Wait what?  What is giving 1.5?
<br />
<br />
<br />Ahhhh! I finally get it now.
<br />I was considering the $80 as 0.5, and the probability values just down sized a bit to alleviate the fact that we are in the range 0.5 - 1.0 all the time.
<br />
<br />Instead you are suggesting we consider something like  0xAA = 1.0  (so the initial range is called 1.5 and the we always try to 'renormalize' to keep the range in $80-$FF  ~ 0.75 - 1.5).  While the result (the "black box") is the same, this interpretation does make much more sense.  For now the discretation errors can appear more "balanced" as we can be above and below the optimal value... and now it makes it easier to understand and interpret $5A as roughly 50%.
<br />
<br />Now I also understand your complaint about my calling the lack of renormalization of 0000....7FFF  an error, for the prob values were calculated such that they actually work slightly better at this extreme than at the "1.5" extreme.
<br />
<br />Thank you for taking the time to prod me a bit more with that.  I definitely learned more by finally thinking that through the rest of the way.  Makes good sense.  Thanks.
<br />
<br />EDIT: Oh, I see you clarified now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Wed Jul 16, 2008 3:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Instead you are suggesting we consider something like 0xAA = 1.0 (so the initial range is called 1.5 and the we always try to 'renormalize' to keep the range in $80-$FF ~ 0.75 - 1.5). While the result (the "black box") is the same, this interpretation does make much more sense. For now the discretation errors can appear more "balanced" as we can be above and below the optimal value... and now it makes it easier to understand and interpret $5A as roughly 50%. </div>
<br />
<br />Exactly. I'm not only suggesting it. It is clearly described in IBM's documents.
<br />The representation for 1 is 0xaaaaaaaaa... If they use 0x5a instead 0x 0x55 (as an aproximation to 0x55555555...) is because they applied a probability estimation technique over real data based on Markov chain to adjust those values.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>19</strong> of <strong>21</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>