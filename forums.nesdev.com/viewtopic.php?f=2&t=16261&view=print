<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - UNROM: Reading the current bank number</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">UNROM: Reading the current bank number</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16261">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16261</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Wed Jul 26, 2017 11:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there a way to read the number of the currently active bank in an UNROM game? Or do I always have to save this as a separate variable?<br /><br />If I have to save it as a variable: How do I make sure that an interrupt doesn't get into the situation where the bank variable is different from the actually set bank, simply because the interrupt activated right in the moment when one of the two was already set, but the other one wasn't?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jul 26, 2017 11:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Put it in a constant location in every ROM bank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jul 26, 2017 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there an intrinsic way in hardware? No. Tokumaru's suggestion is it.<br /><br />If you always update the shadow copy of the bank number <em>before</em> you change it, it can't get out of sync due to NMI or IRQ interruption. The same method works safely for MMC3 $8000.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jul 26, 2017 11:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If an interrupt needs to change banks, such as the NMI handler having to map in the sound engine/data bank, just read the current bank's number from ROM and push it to the stack before bankswitching, and when you're done, pull it from the stack and map that bank back in. This should work even if multiple interrupts that need to switch banks occur on top of each other.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Wed Jul 26, 2017 4:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">If you always update the shadow copy of the bank number <em>before</em> you change it, it can't get out of sync due to NMI or IRQ interruption. </div><br /><br />But if an interrupt were to occur in between the shadow update and bank write, the interrupt routine can't properly learn the current bank number by reading the shadow copy.  Right?  If the interrupt routine doesn't care about the current bank then this isn't an issue.  Even if the ISR tries to restore the bank based on the shadow copy, it isn't a problem.  The ISR will just align the shadow with the current bank before the main thread gets does the same swap again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jul 26, 2017 4:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">But if an interrupt were to occur in between the shadow update and bank write, the interrupt routine can't properly learn the current bank number by reading the shadow copy.  Right?<br /></div>Right. I was assuming that the interrupt wouldn't care about the current value, only that it be saved.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Wed Jul 26, 2017 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Put it in a constant location in every ROM bank.</div><br />Thanks. That's what I needed.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If an interrupt needs to change banks, such as the NMI handler having to map in the sound engine/data bank, just read the current bank's number from ROM and push it to the stack before bankswitching, and when you're done, pull it from the stack and map that bank back in.</div><br />Yeah, using the stack in interrupts is of course logical. That's what I did anyway.<br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">But if an interrupt were to occur in between the shadow update and bank write, the interrupt routine can't properly learn the current bank number by reading the shadow copy.  Right?  If the interrupt routine doesn't care about the current bank then this isn't an issue.</div><br />Yes, if your interrupt never acually reads the original bank value and only sets and resets a new value, then writing the bank variable before setting the bank itself should be sufficient.<br />But I still prefer the version where each bank has its own number in the same place in ROM because this one works in every constellation, even if the interrupt tries to read the value and not just set/reset it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jul 26, 2017 5:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">But I still prefer the version where each bank has its own number in the same place in ROM because this one works in every constellation, even if the interrupt tries to read the value and not just set/reset it.</div><br />That's fine for UNROM or MMC1, not so fine for something like MMC3 where you might load two consecutive bank numbers into adjacent windows (e.g. 25 in $8000 and 26 in $A000) and expect to read an array that continues from one to the next. Background tile streams, background map streams, and compressed sprite tile pages in <em>The Curse of Possum Hollow</em> are stored this way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Thu Jul 27, 2017 2:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">How do I make sure that an interrupt doesn't get into the situation where the bank variable is different from the actually set bank, simply because the interrupt activated right in the moment when one of the two was already set, but the other one wasn't?</div><br /><br />Make sure you always write to the shadow bank register before the hardware bank register. That way, if the interrupt fires in the middle of changing a bank, the bank number the interrupt thread sees will match the bank the main thread is <em>about</em> to set, which is what you want in order to restore the bank at the end of the interrupt.<br /><br />If your interrupt thread needs to actually read data or execute code from a bank that was set by the main thread (I'm not sure why you'd ever need to do this), the interrupt thread can re-set the bank itself.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sdm</b> [ Fri Aug 18, 2017 7:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I do not want to create a separate topic, so I will ask here:<br />Is switching a bank in UNROM (and not just in UNROM) taking up some CPU time? How many cycles / times does a bank switch take?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Aug 18, 2017 7:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No more cycles than any other kind of CPU write.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Aug 18, 2017 7:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, it takes just the time used by the instructions that write to the mapper (in the case of UNROM that'd be something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda Bank : tax : sta $XXXX, x</tt>, or about 9 cycles - could be less if the bank is constant), there's no extra delay after the switch command, the new bank is available immediately.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sdm</b> [ Fri Aug 18, 2017 8:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks. And are MMC1 or MMC3 somehow significantly &quot;faster&quot; than UNROM?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 18, 2017 8:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />MMC1 is slower, at 28 cycles.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro mmc1_mode_A<br />&nbsp; sta $8000<br />&nbsp; lsr a<br />&nbsp; sta $8000<br />&nbsp; lsr a<br />&nbsp; sta $8000<br />&nbsp; lsr a<br />&nbsp; sta $8000<br />&nbsp; lsr a<br />&nbsp; sta $8000<br />.endmacro<br /><br />.macro mmc1_prg_A<br />&nbsp; sta $E000<br />&nbsp; lsr a<br />&nbsp; sta $E000<br />&nbsp; lsr a<br />&nbsp; sta $E000<br />&nbsp; lsr a<br />&nbsp; sta $E000<br />&nbsp; lsr a<br />&nbsp; sta $E000<br />.endmacro<br /></div><br />Because it's also bigger (19 bytes), this switching is often done as a subroutine instead of inline, and it takes 12 seconds to get in and out of a subroutine. It's also a lot trickier to get correct if there's a possibility that NMI or IRQ may interrupt the switch. So I sort of treat MMC1 PRG bank switch overhead as analogous to that of a <a href="https://en.wikipedia.org/wiki/Translation_lookaside_buffer#Performance_implications" class="postlink">TLB miss</a>.<br /><br />Not to be confused with MMC1 is <a href="https://wiki.nesdev.com/w/index.php/INES_Mapper_206" class="postlink">MIMIC</a>, the mapper used in Namco 108/109/118/119. It's almost as fast as UNROM:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MMC3_MODE = $00<br /><br />.macro mimic_prg_8000_A<br />&nbsp; ldx #MMC3_MODE | $06<br />&nbsp; stx $8000<br />&nbsp; sta $8001<br />.endmacro<br /><br />.macro mimic_prg_A000_A<br />&nbsp; ldx #MMC3_MODE | $07<br />&nbsp; stx $8000<br />&nbsp; sta $8001<br />.endmacro<br /></div><br />MMC3 is an enhanced MIMIC that needs a bit more work to account for its PPU $0000/$1000 swapping and CPU $8000/$C000 swapping features. But if you use those features the same way throughout your entire game by setting these in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">MMC3_MODE</tt>, there's no extra overhead.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Aug 18, 2017 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: UNROM: Reading the current bank number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The speed of bankswitching operations is dictated by the complexity of the interface used to communicate with the mapper (the more writes you have to do to &quot;talk&quot; to the mapper, the slower it'll be to complete a bank switch command), but once the CPU is done sending the command, the new bank is immediately available.<br /><br />The reason it works like this is because mappers are constantly routing memory accesses, for every single read/write. A bank switch merely changes a route, there's no copying of data or any other slow operations involved, so the very next read/write is already routed to the newly mapped bank.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>