<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - speeding up and slowing down</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">speeding up and slowing down</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=2305">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=2305</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Oct 28, 2006 2:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Again, I prefer myself use only one byte for speed, and the high nyble is the integer part and the low nybble the fraction part.
<br />You will never want to have something move less than 1/16th pixel per frame nor anything moving faster than 7+15/16th pixel per frame.
<br />So :
<br />$10 is move one pixel per frame forward
<br />$18 is move one pixel and a half per frame forward
<br />$e8 is the same speed as above, but backwards
<br />etc...
<br />You can also use the whole full 8-bits to allow to move up to 15+15/16th pixel per frame, and have a sign bit in a separate variable, I do that in my current game. (because when a monster is knocked back, I "cheat" and make it moving 15+15/16th pixel per frame for one frame, making them go back arround 16 pixels).
<br />This will make you write a programm a little bit more complex, dealing with shifts and all, but save significant size of RAM arrays. Plus if you're new to the dev scene that will make you a good exercice, and it's nothing near impossible to deal with shifts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Oct 28, 2006 3:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">This will make you write a programm a little bit more complex, dealing with shifts and all, but save significant size of RAM arrays.<br /></div>
<br />
<br />Do you mean ROM?  Because using a full 8-bits for the sub-pixel resolution still only requires one byte of RAM (unless you want the adjustable speeds in RAM. then you'll want a wider ranger of speeds anyways and it'll require 2 bytes, but I seriously doubt anyone would do that for much more than their main sprites).  I guess it depends on the type of game.  If you have a lot of individual objects, the extra processing for the shifts and stuff will really add up.  If you have fewer objects made up of several sprites that move together, it won't matter as much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Oct 28, 2006 5:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No, I mean RAM, because the speed of projectiles is kept in RAM.
<br />Only the speed of ennemies is kept in ROM, but they act just the same (they just are consant) in my game. But that all depdends of the game. But anyway I think it is easier to work with one single byte in most cases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>VanOccupanther</b> [ Sat Oct 28, 2006 10:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">www.freewebs.com/the_bott/ScrollSpeedTest.nes</div>
<br />
<br />That was useful to me for figuring out how fast and slow the one byte speed method could go. (7+15/16th and 1/16th)
<br />----------
<br />
<br />Well, i tried the one byte method and it ended up using two bytes.  Here's what's there: 
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;&nbsp; &nbsp;lda $18<br />&nbsp; &nbsp;&nbsp; &nbsp;sta speed<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;lda speed<br />&nbsp; &nbsp;&nbsp; &nbsp;and #%00001111<br />&nbsp; &nbsp;&nbsp; &nbsp;sta speed_low<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda speed<br />&nbsp; &nbsp;&nbsp; &nbsp;and #%11110000<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;sta speed_high<br /></div>
<br />
<br />Is that the only way to do it?  You said use one byte, but really, it ended up using two.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Oct 28, 2006 12:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wait, you got the thing, but now you don't have to use two bytes. I'll just show you some example :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda Speed<br />asl A<br />asl A<br />asl A<br />asl A<br />clc<br />adc PositionL<br />sta PositionL<br />lda Speed<br />lsr A<br />lsr A<br />lsr A<br />lsr A<br />adc PositionH<br />sta PositionH</div><br />Note that only the 4 high bits of Position L are used, and the low bits aren't affected at all so they can be used for anything else.<br />To do it signed, just test the sign of the original Speed variable, and then do the whole thing using one routine that add, and one routine that substract in function of the original sign (but the negative bit must be masked when substractuing after the 4 "LSR A"s).[/code]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>VanOccupanther</b> [ Mon Oct 30, 2006 5:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Having problems.  Here's the code:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;&nbsp; &nbsp;;**************<br />&nbsp; &nbsp;&nbsp; &nbsp;;&nbsp; &nbsp;movement_speed start<br />&nbsp; &nbsp;&nbsp; &nbsp;;**************<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #$10<br />&nbsp; &nbsp;&nbsp; &nbsp;sta speed<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;lda y_portion_decimal<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look2<br />&nbsp; &nbsp;&nbsp; &nbsp;sta multiplicand&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda speed<br />&nbsp; &nbsp;&nbsp; &nbsp;asl <br />&nbsp; &nbsp;&nbsp; &nbsp;asl<br />&nbsp; &nbsp;&nbsp; &nbsp;asl<br />&nbsp; &nbsp;&nbsp; &nbsp;asl<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look4<br />&nbsp; &nbsp;&nbsp; &nbsp;jsr multiply<br />&nbsp; &nbsp;&nbsp; &nbsp;lda product<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look6<br />&nbsp; &nbsp;&nbsp; &nbsp;sta bullettable+1&nbsp; &nbsp;;y_portion_decimal<br />&nbsp; &nbsp;&nbsp; &nbsp;lda y_portion<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;sta multiplicand<br />&nbsp; &nbsp;&nbsp; &nbsp;lda speed<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look3<br />&nbsp; &nbsp;&nbsp; &nbsp;jsr multiply<br />&nbsp; &nbsp;&nbsp; &nbsp;lda product<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look5<br />&nbsp; &nbsp;&nbsp; &nbsp;sta bullettable&nbsp; &nbsp;&nbsp; &nbsp;;y_portion<br /><br /><br />&nbsp; &nbsp;&nbsp; &nbsp;lda x_portion_decimal<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look8<br />&nbsp; &nbsp;&nbsp; &nbsp;sta multiplicand&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda speed<br />&nbsp; &nbsp;&nbsp; &nbsp;asl <br />&nbsp; &nbsp;&nbsp; &nbsp;asl<br />&nbsp; &nbsp;&nbsp; &nbsp;asl<br />&nbsp; &nbsp;&nbsp; &nbsp;asl<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta lookA<br />&nbsp; &nbsp;&nbsp; &nbsp;jsr multiply<br />&nbsp; &nbsp;&nbsp; &nbsp;lda product<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta lookC<br />&nbsp; &nbsp;&nbsp; &nbsp;sta bullettable+3&nbsp; &nbsp;&nbsp; &nbsp;;x_portion_decimal<br />&nbsp; &nbsp;&nbsp; &nbsp;lda x_portion&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look7<br />&nbsp; &nbsp;&nbsp; &nbsp;sta multiplicand<br />&nbsp; &nbsp;&nbsp; &nbsp;lda speed<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta look9<br />&nbsp; &nbsp;&nbsp; &nbsp;jsr multiply<br />&nbsp; &nbsp;&nbsp; &nbsp;lda product<br />&nbsp; &nbsp;&nbsp; &nbsp;;sta lookB<br />&nbsp; &nbsp;&nbsp; &nbsp;sta bullettable+2&nbsp; &nbsp;&nbsp; &nbsp;;x_portion<br /><br /><br /><br />&nbsp; &nbsp;&nbsp; &nbsp;;**************<br />&nbsp; &nbsp;&nbsp; &nbsp;;&nbsp; &nbsp;movement_speed end<br />&nbsp; &nbsp;&nbsp; &nbsp;;**************<br /></div><br /><br />here is multiply's header:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">multiply:&nbsp; &nbsp;;******<br />&nbsp; &nbsp;&nbsp; &nbsp;;must give multiplicand a value<br />&nbsp; &nbsp;&nbsp; &nbsp;;multiplier value should be stored in accumulator<br />&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;&nbsp; &nbsp;;answer will be stored in product<br />&nbsp; &nbsp;&nbsp; &nbsp;;******<br />&nbsp; &nbsp;&nbsp; &nbsp;<br /></div>
<br />
<br />Multiply works multiplying a byte with a byte.
<br />
<br />The problem.. for example when shooting toward the southwest
<br />
<br />y_portion = 00
<br />y_portion_decimal = D6
<br />
<br />speed = 10 (one pixel per frame)
<br />
<br />so speed_high = 01
<br />and speed_low = 00
<br />
<br />so y_portion * speed_high = 00
<br />and y_portion_decimal * speed_low == 00
<br />
<br />
<br />It takes 00D6 and changes it to 0000.  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />  It should take 00D6 and give back 00D6.  Since this is multiplication maybe each 00 should be changed to a 01, but i don't know.  The x_portion and x_portion decimal is FF72.  But, it gives FF72 [-.72] * 0100 [1.0] = FF00 [-1.0].
<br />
<br />Please help me to figure out what's wrong with the multiplication here?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>VanOccupanther</b> [ Fri Nov 03, 2006 9:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Multiplying two two byte numbers is hard.  Here is my attempt (A,B,C,and D are variables.)
<br />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; A.B<br />x C.D<br />-----<br /><br />step1 = D * B<br />step2 = carry_from_step3 + C * A<br />step3 = C * B<br />step4 = carry_from_step1 + D * A<br /><br />step1 x 1 =&nbsp; &nbsp;val1<br />step2 x 100 = val2<br />step3 x 10 =&nbsp; val3<br />step4 x 10 =&nbsp; val4<br /><br />val1 + val2 + val3 + val4 = answer<br /><br /><br />lda answer<br />tay<br />asl<br />asl<br />asl<br />asl<br />sta y_portion_decimal<br />tya<br />lsr<br />lsr<br />lsr<br />lsr<br />sta y_portion</div><br /><br />But there's a problem with the answer.  For example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 00.FC<br />x 01.00<br />-------<br />&nbsp; 0C.00</div>
<br />
<br />When calculating val3, it moves the bits 4 to the left, that's why we lost the F.  Also, the answer should look like 00.FC00 so the whole number part is lost too.  How can you do this?  How would you do this?  Please help me fix this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Nov 03, 2006 10:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Multiplying 16 bits by 16 bits should be straightforward. The classic algorithm does four calls to the 8x8 multiply followed by several adds:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; $aabb<br />&nbsp; * $ccdd<br />&nbsp; &nbsp; -----<br />&nbsp; &nbsp; &nbsp;bdbd<br />&nbsp; &nbsp;bcbc00<br />&nbsp; &nbsp;adad00<br />+acac0000<br />---------<br />&nbsp; &nbsp; value<br /><br /></div>
<br />I don't see where nibble-wise operation ever comes into play.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>