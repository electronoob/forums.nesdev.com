<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES Programming Tutorial : Background</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES Programming Tutorial : Background</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=15648">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=15648</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FARID</b> [ Sat Mar 11, 2017 11:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NES Programming Tutorial : Background</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NES graphic :<br /><br />* NES uses a very complex method to compress and store graphic data, why? Maybe because memory was expensive back then<br /><br />* There are two kinds of graphic on screen : 1) Background 2) Sprites<br /><br />* Anything that moves on the screen is a sprite (for example Mario), other fixed graphics are background<br /><br />* Background and sprites are made from small tiles<br /><br />* Tiles are stored inside of CHR (an EPROM memory inside of the cartridge)<br /><br />* Each tile is 8x8 pixel<br /><br /><img src="http://s9.picofile.com/file/8289759118/10.PNG" alt="Image" /><br /><br />* To see and edit those tiles you can use <a href="http://www.geocities.jp/yy_6502/yychr/yychr_net.zip" class="postlink">YY-CHR.NET</a> or <a href="https://www.zophar.net/fileuploads/1/2735rwngp/tlp11.zip" class="postlink">Tile Layer Pro</a><br /><br /><img src="http://s9.picofile.com/file/8289759142/11.PNG" alt="Image" /><br /><br />* Need more info? then read this : <a href="https://wiki.nesdev.com/w/index.php/PPU_pattern_tables" class="postlink">PPU pattern tables</a><br /><br />* Background and Sprites needs color, right? But you know NES hardware is not very powerful, it can only produce maximum of 64 different colors! Also it is not possible to use all of those 64 colors at the same time! <br /><br />* You can choose and apply only 13 colors to background, and 13 other colors for sprites.<br /><br />* Fortunately with some programming methods you can overcome these limitations, well to some extent! For example you can choose different colors for each stage of the game!<br /><br />* For more info about colors read this : <a href="https://wiki.nesdev.com/w/index.php/PPU_palettes#Palettes" class="postlink">PPU palettes</a><br /><br />* Yeah I know, NES has a lot of limitations, it is really disappointing, then again if you are a NES enthusiast then you have to live with its limitations<br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />Extracting graphic data from a NES game :<br /><br />* Run Super Mario Bros. (W) [!].nes with <a href="http://www.fceux.com/web/download.html" class="postlink">FCEUX emulator</a><br /><br />* Start the game and then press Pause on the keyboard<br /><br />* Go to Debug &gt; PPU Viewer. On the left you can see the tiles for sprites, on the right there are tiles of background<br /><br /><img src="http://s9.picofile.com/file/8289759442/12.PNG" alt="Image" /><br /><br />* There are some colors on the button. The first row is the colors of background. The second row is the colors of sprites.<br /><br />* Go to Debug &gt; Name Table Viewer. You can see the background picture here.<br /><br /><img src="http://s8.picofile.com/file/8289759450/13.PNG" alt="Image" /><br /><br />* Go to Debug &gt; Hex Editor &gt; View &gt; PPU Memory <br /><br /><img src="http://s9.picofile.com/file/8289759718/14.PNG" alt="Image" /><br /><br />* Do not confuse PPU memory address with CPU memory address, they are completely separated from each other<br /><br />* PPU has its own address space starting from $0000 to $3FFF<br /><br />* From $0000 to $0FFF (4KB) is data of Left pattern table (sprites tiles)<br /><br />* From $1000 to $1FFF (4KB) is data of right pattern table (background tiles)<br /><br />* From $2000 to $2400 (1KB) is data of first name table (background graphic)<br /><br />* From $3F00 to $3F0F (16bytes) is data of background colors<br /><br />* From $3F10 to $3F1F (16Bytes) is data of sprites colors<br /><br />* Copy those values and by using HxD save them separately : mario_spt.chr, mario_bg.chr, mario_bg.nam, mario_bg.pal, mario_spt.pal, <br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;NES Programming Tutorial<br />;Level 5 : Background<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;Constants<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;Variables<br />L_byte&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= $0000<br />H_byte&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= $0001<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;iNES header data (16bytes)<br />;32KB PRG + 8KB CHR + NROM-256 + Vertical Mirroring<br />&nbsp; .db $4E,$45,$53,$1A,$02,$01,$01,$00<br />&nbsp; .db $00,$00,$00,$00,$00,$00,$00,$00<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;PRG codes $8000 ~ $FFFF (32KB)<br />&nbsp; .base $8000<br /><br />RESET:<br />&nbsp; &nbsp;SEI<br />&nbsp; &nbsp;CLD<br /><br />;Turn off NMI and rendering<br />&nbsp; &nbsp;LDA #%00000000<br />&nbsp; &nbsp;STA $2000<br />&nbsp; &nbsp;LDA #%00000000<br />&nbsp; &nbsp;STA $2001<br /><br />;PPU warm up<br />&nbsp; &nbsp;LDA $2002<br />vBlank_wait1:<br />&nbsp; &nbsp;BIT $2002<br />&nbsp; &nbsp;BPL vBlank_wait1<br />vBlank_wait2:<br />&nbsp; &nbsp;BIT $2002<br />&nbsp; &nbsp;BPL vBlank_wait2<br /><br />;Clear RAM<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;LDX #$00<br />clear_loop:<br />&nbsp; &nbsp;STA $0000, X<br />&nbsp; &nbsp;STA $0100, X<br />&nbsp; &nbsp;STA $0200, X<br />&nbsp; &nbsp;STA $0300, X<br />&nbsp; &nbsp;STA $0400, X<br />&nbsp; &nbsp;STA $0500, X<br />&nbsp; &nbsp;STA $0600, X<br />&nbsp; &nbsp;STA $0700, X<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$00<br />&nbsp; &nbsp;BNE clear_loop<br /><br />;Name table + Attribute<br />&nbsp; &nbsp;LDA $2002<br />&nbsp; &nbsp;LDA #$20<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #&lt;bg_nam<br />&nbsp; &nbsp;STA L_byte<br />&nbsp; &nbsp;LDA #&gt;bg_nam<br />&nbsp; &nbsp;STA H_byte<br />&nbsp; &nbsp;LDX #$00<br />&nbsp; &nbsp;LDY #$00<br />nam_loop:<br />&nbsp; &nbsp;LDA ($00), Y<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INY<br />&nbsp; &nbsp;CPY #$00<br />&nbsp; &nbsp;BNE nam_loop<br />&nbsp; &nbsp;INC H_byte<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$04<br />&nbsp; &nbsp;BNE nam_loop<br /><br />;Background color setup<br />&nbsp; &nbsp;LDA $2002<br />&nbsp; &nbsp;LDA #$3F<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDX #$00<br />bg_pal_loop:<br />&nbsp; &nbsp;LDA bg_pal, X<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$10<br />&nbsp; &nbsp;BNE bg_pal_loop<br /><br />;Reset Scroll<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2005<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2005<br />&nbsp; &nbsp;<br />;Turn on NMI and rendering<br />&nbsp; &nbsp;LDA #%00000000<br />&nbsp; &nbsp;STA $2000<br />&nbsp; &nbsp;LDA #%00001010<br />&nbsp; &nbsp;STA $2001<br /><br />;Infinite loop<br />Forever:<br />&nbsp; &nbsp;JMP Forever<br />;---------------------------;<br />NMI:<br />&nbsp; &nbsp;RTI<br />;---------------------------;<br />IRQ:<br />&nbsp; &nbsp;RTI<br />;---------------------------;<br />bg_nam:<br />&nbsp; .incbin &quot;mario_bg.nam&quot;<br /><br />bg_pal:<br />&nbsp; .incbin &quot;mario_bg.pal&quot;<br />;---------------------------;&nbsp; <br />&nbsp; .pad $FFFA,$FF&nbsp; &nbsp;<br />;Vectors<br />&nbsp; .org $FFFA<br />&nbsp; .dw NMI<br />&nbsp; .dw RESET<br />&nbsp; .dw IRQ<br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />;CHR data $0000 ~ $1FFF (8KB)<br />&nbsp; .base $0000<br />&nbsp; .incbin &quot;mario_bg.chr&quot;<br />&nbsp; .pad $2000,$FF<br /></div><br /><br />Output :<br /><br /><img src="http://s8.picofile.com/file/8289766076/18.PNG" alt="Image" /><br /><br /><br />Explanation :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">L_byte&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;= $0000</div><br /><br />* With this code we simply assign a name to an address. Remembering the names is easier than remembering some bunch of address numbers, right?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #%00001010<br />&nbsp; &nbsp;STA $2001</div><br /><br />* We want to show the background so we have to set 1st and 3rd bits<br /><br />* To make graphic on screen you have to write graphic data to PPU memory<br /><br />* But you can't write directly to PPU memory, you have to use PPU ports : $2006 and $2007<br /><br />* By using $2006 you declare the address of PPU memory then by using $2007 you write the desired value to that address<br /><br />* PPU Memory addresses are 16bit starting from $0000 ~ $3FFF (4KB)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #$20<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006</div><br /><br />* So you need to write twice to $2006 to declare it's address, the first write declares high byte of address, the second write declares the low byte of address<br /><br />* Each time you write a value to $2007, the PPU address is automatically adjusted to the next address, so you don't need to declare the PPU address with $2006 for sequential PPU memory addresses<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bg_nam:<br />&nbsp; .incbin &quot;mario_bg.nam&quot;</div><br /><br />* We can add any data file by using .incbin to the source code file<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #&lt;bg_nam</div><br /><br />* bg_nam is a label right? So it has 16bit address. By using &lt; we take its low byte of address and then store it into A<br /><br />* We assigned L_byte to $0000 already<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;STA L_byte</div><br /><br />* Also we take the high byte of the address of bg_nam and then store it into $0001<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #&gt;bg_nam<br />&nbsp; &nbsp;STA H_byte</div><br /><br />* LDY is similar to LDA. Y is another register like A<br /><br />* From $0000 to $00FF is ram right? but it is kind of special, because we can show those address with this : $00 to $FF, we call those address Zero Page<br /><br />* LDA ($00), Y : Let's imagine : $0000 = #$00 / $0001 = #$90 / Y = #$44. Then : $9000 is made. Then $9000 + #$44 = $9044. Then the value inside of $9044 is loaded into A<br /><br />* INY stands for INcrement Y, For example if the value of Y is #$44 then it will be #$45<br /><br />* CPY stands for ComPare Y register. It compares the value of X with its following value<br /><br />* INC H_byte, increase the value inside of $0001 by one<br /><br />* The codes of ;Name table + Attribute actually transfers a total of 1KB (= 400 bytes in hex) data of background to PPU memory ($2000 ~ $2400)<br /><br />* The codes of ;Background color setup actually transfers a total of 16 bytes (= 10 bytes in hex) data of background color to PPU memory ($3F00 ~ $3F0F)<br /><br />* $2005 is another PPU port which is used to move the background<br /><br />* Need more info about PPU ports? then read this : <a href="https://wiki.nesdev.com/w/index.php/PPU_registers" class="postlink">PPU registers</a><br /><br />* Need to learn about 6502 opcodes? then read this : <a href="http://nesdev.com/6502guid.txt" class="postlink">Assembly In One Step</a><br /><br />* Need a reference for assembly 6502 opcodes? then check this : <a href="http://www.6502.org/tutorials/6502opcodes.html" class="postlink">NMOS 6502 Opcodes</a><br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />Editing a background :<br /><br />* You can edit the exiting backgrounds<br /><br />* Download <a href="https://leech.thoaimedia.com/files/p8nes.zip" class="postlink">8name</a> which is a background editor<br /><br />* Make a new text file<br /><br />* Write this inside of it :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">name mario_bg -f</div><br /><br />* Save it with this name : Bg_Editor.bat<br /><br />* Make sure these files are in the same folder : <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">name.exe<br />Bg_Editor.bat<br />alleg42.dll<br />mario_bg.nam<br />mario_bg.pal<br />mario_bg.chr<br /></div><br /><br />* Run Bg_Editor.bat to start editing the background :<br /><br /><img src="http://s8.picofile.com/file/8289760100/15.PNG" alt="Image" /><br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />NES Screen Tool :<br /><br />* You can edit your extracted graphic files with <a href="https://shiru.untergrund.net/files/nesst.zip" class="postlink">NES Screen Tool</a><br /><br />* Use &quot;Patterns &gt; Open CHR&quot; to load &quot;mario_bg.chr&quot;<br /><br />* Use &quot;Nametable &gt; Open nametable or map&quot; to load &quot;mario_bg.nam&quot;<br /><br />* Use &quot;Palettes &gt; Open palettes&quot; to load &quot;mario_bg.pal&quot;<br /><br /><img src="http://s8.picofile.com/file/8289767418/21.PNG" alt="Image" /><br /><br />* After editing use &quot;All &gt; Save&quot; to save the files<br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />Exercise :<br /><br />Extract graphic data from other games and use them instead of mario_bg.nam, mario_bg.pal, mario_bg.chr.<br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />Files :<br />asm6.exe<br />Assembler.bat<br />Game.asm<br />name.exe<br />Bg_Editor.bat<br />alleg42.dll<br />mario_bg.nam<br />mario_bg.pal<br />mario_bg.chr<br /><br />/////////////////////////////////////////////////////////////////////////////////////////////////<br /><br />Former Level : <a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=15652" class="postlink">NES Programming Tutorial : Init Code</a><br />Next Level : <a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=15653" class="postlink">NES Programming Tutorial : Move Background</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>