<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=6509" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-06-19T09:55:17-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=6509</id>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-06-19T09:55:17-07:00</updated>
<published>2010-06-19T09:55:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63111#p63111</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63111#p63111"/>
<title type="html"><![CDATA[Mapper idea]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63111#p63111"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Another problem is to detect ALE cycles. Normal cycles can be detected by ANDing /RD and /WR, but as far I know there is no way to detect ALE cycles<br /></div><br />Would /ALE = /RD NAND /WR work?</div><br /><br />That's what I've wondered, but unlike the 6502, we don't have a detailed datasheets to show all the timing characteristics of the PPU.<br /><br />The dual-port SRAMs available are pretty expensive, not really worth looking at (especially since like mentioned, you can only write one side at a time - seems nearly useless).<br /><br />I bet if one searches "dual-port RAM" on here, there would be all sorts of discussions that would turn up for it (could try on the old forum too).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sat Jun 19, 2010 9:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-06-19T04:37:42-07:00</updated>
<published>2010-06-19T04:37:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63106#p63106</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63106#p63106"/>
<title type="html"><![CDATA[Mapper idea]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63106#p63106"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Another problem is to detect ALE cycles. Normal cycles can be detected by ANDing /RD and /WR, but as far I know there is no way to detect ALE cycles<br /></div><br />Would /ALE = /RD NAND /WR work?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jun 19, 2010 4:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-06-19T02:08:48-07:00</updated>
<published>2010-06-19T02:08:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63099#p63099</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63099#p63099"/>
<title type="html"><![CDATA[Mapper idea]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63099#p63099"><![CDATA[
I think dual ported SRAMs do exist. Yes you can only access them one "side" at a time, but it could be possible to do the following :<br />- Writes to a mapper reigster which last the value<br />- On the next ALE cycle, the value latched is written to the SRAM.<br /><br />In fact it's likely how the MMC5 work internally I guess.<br />Another problem is to detect ALE cycles. Normal cycles can be detected by ANDing /RD and /WR, but as far I know there is no way to detect ALE cycles, since the ALE signal isn't driven to the cart connector (and not even the bottom connector).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Jun 19, 2010 2:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-06-18T16:33:53-07:00</updated>
<published>2010-06-18T16:33:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63088#p63088</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63088#p63088"/>
<title type="html"><![CDATA[Mapper idea]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63088#p63088"><![CDATA[
I drew up a schematic to allow the NES CPU to write to CHR-RAM whenever, but using discrete logic it needed 6 chips (5 74xx573 and 1 74xx245) just to handle switching the RAM between bus's.  There were plenty of other problems left in that.  If you use a CPLD or FPGA it's still a lot of I/Os.<br /><br />With the PowerPak, I'm not sure at the moment if there is any reason that one couldn't make a mapper to do stuff similar to that.<br /><br />In my Squeedo redesign, I'm actually planning to use just a single fast SRAM for PRG/CHR/MCU.  Won't be a problem, and there could be some pretty interesting results when you can push that many pixels around. Blast processing! <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Fri Jun 18, 2010 4:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-06-18T15:58:17-07:00</updated>
<published>2010-06-18T15:58:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63086#p63086</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63086#p63086"/>
<title type="html"><![CDATA[Re: Mapper idea]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63086#p63086"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />* We could only write to RAM that was on the cart itself, so we'd either have to supply our own RAM for the nametables<br /></div><br />Such a mapper might have a 32 KiB RAM and twelve 5-bit registers, each controlling a 1 KiB chunk from $0000 to $2C00.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />or have fast PRGRAM+ROM on the cart (~70ns) and do our reads/writes in the first quarter of ph2.<br /></div><br />If what you want to do is allow direct CPU writes to VRAM, you can do that without hooking into ALE. Maintain a queue of RAM locations that the PPU wrote and execute the writes during the dummy nametable fetches during sprite rendering. It limits bandwidth to 16 bytes per scanline, but the CPU can't do much more than that during vblank anyway.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />so if we're not just blitting data out of ROM (and if we are, why not use CHRROM with nice bankswitching?)<br /></div><br />Because "nice" bankswitching isn't perfect bankswitching. Some people want it even finer than 1 KiB chunks, such as a 256-byte area for a single 32x32 pixel sprite cel.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />In any case, the point of all of this is: I've been trying and failing to brainstorm how you'd use this ability. Any ideas?<br /></div><br />One idea: Bankswitchable ExRAM. Map $5C00-$5FFF to a selectable 1 KiB chunk of the 32 KiB CHR RAM. Execute reads and writes during the next ALE cycle; it might be cheaper to require double reads to load the latch.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Jun 18, 2010 3:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2010-06-18T15:24:41-07:00</updated>
<published>2010-06-18T15:24:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63085#p63085</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63085#p63085"/>
<title type="html"><![CDATA[Mapper idea]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6509&amp;p=63085#p63085"><![CDATA[
So, the PPU has a lot of cycles that it's not actively using its bus. On each rendering scanline, of the 341 pixels&amp;cycles per scanline, 170 are spent reading the bus, 1 is idle (on almost all scanlines), and 170 are spent latching the lower 8 bits of the address bus (because A0..7 and D0..7 are multiplexed. I'll call these ALE cycles because that's the 8051 term). ALE cycles are one pixel long, or ~180ns, so definitely long enough to cheaply get RAM fast enough that we can have a whole extra access cycle.<br /><br />So we could build a mapper that could DMA data to or from the CHRRAM by disconnecting CHRRAM from the PPU on these ALE cycles. Plus we could do this while rendering is enabled, although we'd have to be careful about not tearing.<br /><br />The downsides:<br />* We could only write to RAM that was on the cart itself, so we'd either have to supply our own RAM for the nametables, or not be able to DMA to them.<br />* (for PRG-&gt;CHR) We have no way to force the CPU to stop reading, so we either have to piggyback on the existing read cycles (and feed the CPU fake data like "ORA #0")<br />* (for CHR-&gt;PRG) We'd have to force PRGRAM off the bus while we were writing to it -- i.e. code that read/wrote/ran from it during DMA wouldn't work.<br />* (either direction) or have fast PRGRAM+ROM on the cart (~70ns) and do our reads/writes in the first quarter of ph2. Regardless, external hardware can't rapidly read or write to the 2kB of RAM inside the NES, so if we're not just blitting data out of ROM (and if we are, why not use CHRROM with nice bankswitching?) we need PRGRAM too.<br /><br /><br />In any case, the point of all of this is: I've been trying and failing to brainstorm how you'd use this ability. Any ideas?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Jun 18, 2010 3:24 pm</p><hr />
]]></content>
</entry>
</feed>