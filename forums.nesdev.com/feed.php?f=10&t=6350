<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=6350" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-05-08T05:41:19-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=6350</id>
<entry>
<author><name><![CDATA[UncleSporky]]></name></author>
<updated>2010-05-08T05:41:19-07:00</updated>
<published>2010-05-08T05:41:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61152#p61152</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61152#p61152"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61152#p61152"><![CDATA[
I have to agree with koitsu, it makes a lot more sense to think of it as being organized in columns vs. rows, not structure vs. array.<br /><br />I also don't see much difference either way; if you've got incrementing x and y variables for stepping through it, one way you'll increment x and the other you'll use y.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3438">UncleSporky</a> — Sat May 08, 2010 5:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-05-07T11:54:04-07:00</updated>
<published>2010-05-07T11:54:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61119#p61119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61119#p61119"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61119#p61119"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Terms that make sense would be something like "row-based data set" vs. "column-based data set".<br /></div><br />In most languages, "column-oriented" connotes 2-dimensional arrays with two integer indices that represent two axes along which measurements are taken, as seen in <a href="http://en.wikipedia.org/wiki/Row-major_order#Column-major_order" class="postlink">Fortran's column-major order</a>. But <a href="http://en.wikipedia.org/wiki/Column-oriented_DBMS" class="postlink">column-oriented</a> might be more familiar to people with experience in, say, SQL, where a record is called a "row" and a field is called a "column". In this case, the rows represent different things and the columns represent different aspects of the things.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />When they see the term "structure of arrays", they're going to think "struct foobar { char *arrA[16]; char *arrB[16]; };"<br /></div><br />struct foobar { int x[16]; int y[16]; int dx[16]; int dy[16]; }; is how a column-oriented or SoA store of coordinates might look.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri May 07, 2010 11:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-05-07T10:25:00-07:00</updated>
<published>2010-05-07T10:25:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61110#p61110</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61110#p61110"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61110#p61110"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />No offence intended, but these terms you've created don't make any sense.  Terms that make sense would be something like "row-based data set" vs. "column-based data set".<br /></div><br />I think your opinion is purely based on the simple example I gave, because your proposed terms would hardly suit all possibilities. If you consider that structures can be more complex than several single-byte fields, or that due to memory limitations these tables could be scattered all around RAM and ROM, you'll see that not always the data will look like neatly organized rows and columns.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />...when C programmers see...<br /></div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />...when perl programmers see...<br /></div><br /><br />But this is assembly, and if C and pearl programmers already disagree between themselves there will hardly be universal terms understood by everyone. I didn't come up with these terms, but I think they are pretty descriptive (the first time I heard them I knew exactly what they meant).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri May 07, 2010 10:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2010-05-07T10:06:43-07:00</updated>
<published>2010-05-07T10:06:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61108#p61108</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61108#p61108"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61108#p61108"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Gradualore wrote:</div><div class="quotecontent">Could you or tokumaru explain the difference between arrays of structures and structures of arrays?<br /></div><br />You probably know the difference, but not these names.<br /><br />Array of structures:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Metatiles:<br />   .db $00, $01, $02, $03<br />   .db $04, $05, $06, $07<br />   .db $08, $09, $0a, $0b<br />   .db $0c, $0d, $0e, $0f<br />   .db $10, $11, $12, $13<br />   .db $14, $15, $16, $17<br />   &#40;...&#41;</div><br /><br />Structure of arrays:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Metatiles:<br />   .db $00, $04, $08, $0c, $10, $14, &#40;...&#41;<br />   .db $01, $05, $09, $0d, $11, $15, &#40;...&#41;<br />   .db $02, $06, $0a, $0e, $12, $16, &#40;...&#41;<br />   .db $03, $07, $0b, $0f, $13, $17, &#40;...&#41;</div></div><br /><br />No offence intended, but these terms you've created don't make any sense.  Terms that make sense would be something like "row-based data set" vs. "column-based data set".  You can replace the word "data set" with "structure" if you want, but it'll probably confuse people.  Why? Because there's no explanation of what the "data set" *or* "structure" means -- if there's a length associated with them (e.g. "16 bytes of pointers"), what each byte or word represents, what each row represents, etc...  Comments are incredibly important here.<br /><br />Worse, when C programmers see the term "array of structures", they're going to think "struct foo blah[4]".  When they see the term "structure of arrays", they're going to think "struct foobar { char *arrA[16]; char *arrB[16]; };" (though technically this is a "structure of array of pointers").<br /><br />And when perl programmers see the term "array of structures" or "structure of arrays", they're probably going to think of an "array of X" (where X is either scalars, arrays, or hashes).<br /><br />:-)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri May 07, 2010 10:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-05-06T08:59:40-07:00</updated>
<published>2010-05-06T08:59:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61032#p61032</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61032#p61032"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61032#p61032"><![CDATA[
never-obsolete, I handle my objects exactly like that.<br /><br /><div class="quotetitle">never-obsolete wrote:</div><div class="quotecontent"><br />I do agree that making these types of "mistakes" was helpful because I understood the <strong>why</strong> behind it.<br /></div><br />I strongly believe that in order to be a good coder a person has to go through all of it, they can't take shortcuts, or else they are being trained, not taught, and will not have full understanding of what they are doing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu May 06, 2010 8:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-05-06T08:49:00-07:00</updated>
<published>2010-05-06T08:49:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61031#p61031</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61031#p61031"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61031#p61031"><![CDATA[
<div class="quotetitle">Gradualore wrote:</div><div class="quotecontent"><br />I guess what you're saying is that it would be better to have several arrays, one for each "member" of the struct, and avoid having to add the size of your struct to your index register in every iteration of a loop?<br /></div><br />Yeah, that's exactly it. Instead of worrying about the size of the structure you can just INX or INY to access the next item.<br /><br />You still have to use pointers if you need dynamic access to the different members though. But even then this way is better because you can access up to 256 items before having to mess with the pointers again. The downside is that you'd need a pointer for each member.<br /><br />It's not always that structures of arrays are better, there are times when the other way is simpler. I don't think quicker though, just simpler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu May 06, 2010 8:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[never-obsolete]]></name></author>
<updated>2010-05-06T08:46:37-07:00</updated>
<published>2010-05-06T08:46:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61030#p61030</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61030#p61030"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61030#p61030"><![CDATA[
I had that problem when I first started out. I'd store my objects like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">obj0_status:    .rs 1<br />obj0_fracX:     .rs 1<br />obj0_fineX:     .rs 1<br />obj0_coarseX:   .rs 1<br />obj0_fracY:     .rs 1<br />obj0_fineY:     .rs 1<br />obj0_coarseY:   .rs 1<br /><br />obj1_status:    .rs 1<br />...<br />...<br /></div><br /><br />When it came time to do anything useful (collision detection) I had to use indirection to access the data fields. In the end it became a nightmare to maintain and the code was just all around slower.<br /><br />Now I structure my objects like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">obj_status:     .rs MAX_NUM_OBJ<br />obj_fracX:      .rs MAX_NUM_OBJ<br />obj_fineX:      .rs MAX_NUM_OBJ<br />obj_coarseX:    .rs MAX_NUM_OBJ<br />obj_fracY:      .rs MAX_NUM_OBJ<br />obj_fineY:      .rs MAX_NUM_OBJ<br />obj_coarseY:    .rs MAX_NUM_OBJ<br /></div><br /><br />Using indexing to access data fields simplified the code.<br /><br />I do agree that making these types of "mistakes" was helpful because I understood the <strong>why</strong> behind it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=187">never-obsolete</a> — Thu May 06, 2010 8:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-05-06T08:41:06-07:00</updated>
<published>2010-05-06T08:41:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61029#p61029</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61029#p61029"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61029#p61029"><![CDATA[
Hmm, I think I am using arrays of structures then. I have some reserved locations in RAM comprised of 16 byte chunks of data, each being an "instance" of a structure. I guess what you're saying is that it would be better to have several arrays, one for each "member" of the struct, and avoid having to add the size of your struct to your index register in every iteration of a loop? Or is there more to it?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Thu May 06, 2010 8:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-05-06T08:42:04-07:00</updated>
<published>2010-05-06T08:33:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61028#p61028</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61028#p61028"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61028#p61028"><![CDATA[
<div class="quotetitle">Gradualore wrote:</div><div class="quotecontent"><br />Could you or tokumaru explain the difference between arrays of structures and structures of arrays?<br /></div><br />You probably know the difference, but not these names.<br /><br />Array of structures:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Metatiles:<br />   .db $00, $01, $02, $03<br />   .db $04, $05, $06, $07<br />   .db $08, $09, $0a, $0b<br />   .db $0c, $0d, $0e, $0f<br />   .db $10, $11, $12, $13<br />   .db $14, $15, $16, $17<br />   &#40;...&#41;</div><br /><br />Structure of arrays:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Metatiles:<br />   .db $00, $04, $08, $0c, $10, $14, &#40;...&#41;<br />   .db $01, $05, $09, $0d, $11, $15, &#40;...&#41;<br />   .db $02, $06, $0a, $0e, $12, $16, &#40;...&#41;<br />   .db $03, $07, $0b, $0f, $13, $17, &#40;...&#41;</div><br /><br />The difference is that in an array of structures each element of the array is an structure (duh), and since structures can be kinda large the array grows pretty quickly as information is added to it, which means you can't access it quickly by using indexed addressing, you have to use pointers, which wastes RAM and CPU cycles.<br /><br />By using structures of arrays instead you reduce the size of each element of the array by splitting it into several arrays, which you can easily access using indexed addressing if you know which element of the structure you need to access.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu May 06, 2010 8:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-05-06T08:23:47-07:00</updated>
<published>2010-05-06T08:23:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61027#p61027</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61027#p61027"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=61027#p61027"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I honestly think that knowing 6502 assembly is at most 10% of what's necessary to make a NES game. Mastering the PPU and the concepts of game logic are way more important, and harder.<br /></div><br />But you do need to understand the 6502 in depth in order to implement game logic that doesn't slow down when more than three critters are in play:<br /><ul><li>How to organize your data, because the 6502 prefers structure-of-arrays logic over array-of-structures logic </li><li>How to perform coordinate math efficiently, including implementing your own multiplication, division, and trigonometry in order to get a critter to aim at something </li><li>How to make the best use of registers X and Y vs. local variables in zero page </li></ul></div><br /><br />Could you or tokumaru explain the difference between arrays of structures and structures of arrays? I haven't heard these specific terms before. Could you give some examples? From the names, I think I may be using arrays of structures in a lot of my code. If there's a strong reason for not doing this, I'd definitely like to learn what that is!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Thu May 06, 2010 8:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-05-03T18:34:45-07:00</updated>
<published>2010-05-03T18:34:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60856#p60856</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60856#p60856"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60856#p60856"><![CDATA[
One of the most important things you'll need is to actually get started with an Assembler so you can start writing code. In my opinion real world experience is going to help you out more than any formal reading alone will. <br /><br />I recommend ASM6 along with one of the templates Tokumaru posted. <!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=6160">http://nesdev.com/bbs/viewtopic.php?t=6160</a><!-- m --><br /><br />If you understand the concept of programming then so long as you do something rather than nothing you'll make progress. You want to avoid things that cause you to just idle and not really do anything. Don't expect to crank out something like Super Mario Bros 3 right away. Set reasonable goals and set out to achieve them. One of the easiest things to do to get used to the NES would be to make a Pong/Table Tennis game. It's simple but will allow you to learn to deal with drawing characters (sprites) to the screen, input from the player, game logic, perhaps a background, program flow, etc. <br /><br />Just build up from there.<br /><br />Also for larger projects it's VERY useful to have some kind of PC programming experience so you can make applications to create data for your game. Almost any language will do, BASIC, C, C++, C#, whatever. This way you can program something like a level editor. <br /><br />You could make these tools as separate NES programs but it's probably easier if you can make PC programs.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Mon May 03, 2010 6:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2010-05-03T17:58:40-07:00</updated>
<published>2010-05-03T17:58:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60853#p60853</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60853#p60853"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60853#p60853"><![CDATA[
Work through the first series of Nerdy Nights tutorials.  They have pictures and are very good for explaining how to work with the PPU:   <!-- m --><a class="postlink" href="http://nintendoage.com/forum/messageview.cfm?catid=22&amp;threadid=7155">http://nintendoage.com/forum/messagevie ... eadid=7155</a><!-- m --><br /><br />And stay far far away from GBAGuy's tutorials.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Mon May 03, 2010 5:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-05-03T15:37:15-07:00</updated>
<published>2010-05-03T15:37:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60847#p60847</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60847#p60847"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60847#p60847"><![CDATA[
For starting out, once you understand 2 vital instructions instructions (LDA immediate, STA absolute) you could in theory blast out an entire hello world program (LDA #$00 / STA $2007 basically in tons of variations).  That's kind of like how I did everything when I started out, which proves that one can program the NES without really knowing 6502, heheh.<br /><br />I think it would help to look at other people's sources, try messing around with those maybe, once you can get it to assemble.<br /><br />Yeah I pretty much agree with what tokumaru's latter point, seems like 80% of the challenge is making the PPU do what you want, within it's limitations.  There's no immediately obvious limitation to the CPU, you really have to be doing a lot of stuff to run out of time during a frame.<br /><br />So yeah the program logic doesn't need to be efficient usually (if you start near a slow-down point in worst-case situations, that's when to go back and optimize), however when it comes to using the PPU there are some time limits (vblank time) involved, so in that case you do need to write optimized code pretty much all the time.<br /><br />For a first program though you can just turn the screen off (LDA #0 / STA $2000 / STA $2001) and be safe doing whatever you want with the PPU, before turning the screen on.<br /><br />I guess it depends on what you want to do first too.  I got into it because I wanted to write music for it (before Nerdtracker, Famitracker, and NTRQ existed).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Mon May 03, 2010 3:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-05-03T10:22:33-07:00</updated>
<published>2010-05-03T10:22:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60809#p60809</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60809#p60809"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60809#p60809"><![CDATA[
I agree with you, and part of my point is that you'll hardly learn those things from a book. At least the ones I've seen were too superficial and wouldn't talk about those subjects in depth, or at all. By experimenting, you tend to find the best way to do things naturally, because you run into the problems yourself. In my opinion, this gives a person better understanding of why things are done a certain way than if they were simply told that way is correct.<br /><br />I think it's important that coders go through all the steps. It's important that their first programs aren't very efficient, and that they realize that arrays-of-structures are a pain to work with. If you simply tell them that structures-of-arrays are better they will just think that "this is the weird way the 6502 works and we must all follow blindly" (look at GBAGuy's tutorials for example: they are full of "this is how the NES works, I don't know why but here it is lol").<br /><br />The rest of my point is that it's still just a language, a way to communicate. Of course it is important to learn how to communicate with the system, but I think it's more important to know <em>what</em> you are going to communicate then <em>how</em> you are gonna do it. If you don't have anything to say, there is no point in learning the language. This is just my opinion though, I'm sure others will give different levels of importance to the components needed to make a NES game.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon May 03, 2010 10:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-05-03T09:55:29-07:00</updated>
<published>2010-05-03T09:55:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60805#p60805</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60805#p60805"/>
<title type="html"><![CDATA[So, I'm getting into NESdev..]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6350&amp;p=60805#p60805"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I honestly think that knowing 6502 assembly is at most 10% of what's necessary to make a NES game. Mastering the PPU and the concepts of game logic are way more important, and harder.<br /></div><br />But you do need to understand the 6502 in depth in order to implement game logic that doesn't slow down when more than three critters are in play:<br /><ul><li>How to organize your data, because the 6502 prefers structure-of-arrays logic over array-of-structures logic </li><li>How to perform coordinate math efficiently, including implementing your own multiplication, division, and trigonometry in order to get a critter to aim at something </li><li>How to make the best use of registers X and Y vs. local variables in zero page </li></ul><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon May 03, 2010 9:55 am</p><hr />
]]></content>
</entry>
</feed>