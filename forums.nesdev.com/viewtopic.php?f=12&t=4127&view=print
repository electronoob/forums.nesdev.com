<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SPC questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SPC questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4127">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4127</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri May 23, 2008 5:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>SPC questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know accurate knownledge about the SPC currently is, but I've a couple of questions :
<br />
<br />- What kind of delay there is with key on/key off operations ? I've tried to make test programms, if I key on without ever keying off, I get an annoying slapping sound (I don't know about on the real hardware). If I key off right before I key on, on some SPC players/emulators the key on is ignored. Is the solution to key off a decent time before each key on the only accurate/viable solution ?
<br />
<br />- About the DIV instruction.... It takes 16 bit input and only 8-bit output. What happen if you do 65535/1 ? The result would sure not fit 8-bit quotient+8-bit remainder. I guess you only get low 8 bits of result but the real remainder (that's the only thing that make sense when using shift-and-substract method). What does division by zero output ? I guess result is always $ff and remainder is the original dividend (that would make the most sense again) but no doccument specifies that.
<br />
<br />- Is it possible to change echo delay during playback very quickly to get reverb ?
<br />
<br />- When echo is enabled back on a channel after being disabled, I suppose this only allow output from that channel to go into the echo buffer to be heard again later at lower volume. I've seen some SPC players/emulators emulate it so that as soon as echo is enabled past sound data is heard from that channel even if it was disabled before. As I don't see how the past data could go into the echo buffer (unless each channel has its own individual echo buffer, which isn't the case), I guess this can only be wrong, but again I'm not sure.
<br />
<br />- The processor have DI and EI instruction to enable/disable interrups. But is there any other source of interrupt than reset ? (I doubt reset is maskable). It's said that reset vector is stored at $fffe but I don't see any other interrupt vector mentionned in docs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri May 23, 2008 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SPC questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- What kind of delay there is with key on/key off operations ?</div><br /><br />Key On / Off are both polled once every 64 cycles (every other sample).<br /><br />With Key Off, the voice switches to Release mode (but envelope is not changed).<br /><br />With Key On, the voice switches to Attack, Envelope is reset to 0, and BRR decoding resets.  Those last two can cause a very ugly pop if done carelessly (this is probably the "slap" you're talking about).<br /><br />If you Key On / Key Off at the same time (or within the same 64 cycle window), iirc Key On takes priority, but the channel will be keyed off 64 cycles later because Key On is automatically cleared, whereas Key Off isn't.  In either case, the end result would be abrupt silence because envelope is reset to 0 on keyon, then switched to Release on keyoff -- and there's not enough time in between them for any samples to become audible (keying on causes about 5 samples of silence to allow for the BRR decoder to get samples ready)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is the solution to key off a decent time before each key on the only accurate/viable solution ?</div><br /><br />Pretty much, yeah.  Abrupt envelope changes will cause ugly pops, and the best way I can think of to avoid that is to let Release finish its job before restarting.  At full envelope ($7FF) it'll take 256 samples (8192 cycles) for the envelope to release completely.  So:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">mov $F2, #$5C<br />mov $F3, #%00000001&nbsp; &nbsp;; key off voice 0<br /><br />; ~8192 cycles later<br />mov $F2, #$5C<br />mov $F3, #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; clear keyoff<br />mov $F2, #$4C<br />mov $F3, #%00000001&nbsp; &nbsp;; key on voice 0<br /></div><br /><br />Since keyon is cleared automatically once processed, you don't have to clear it yourself.  However that is not true for keyoff -- you must manually clear it.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">About the DIV instruction.... It takes 16 bit input and only 8-bit output. What happen if you do 65535/1 ?</div><br /><br />Any division that results in a quotient higher than $200 will return more-or-less meaningless results.  Programs can check the V flag after division to make sure such a case didn't happen (V will be set when quotient &gt;= $100).<br /><br />The shift algorithm in Anomie's doc can't be right -- I tried it with some sample numbers and got incorrect results ($1000 / $80 got me $1F) -- unless the SPC's division really is that unreliable?<br /><br />I took the following code from BSNES:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ya = regs.ya;<br />//overflow set if quotient &gt;= 256<br />&nbsp; regs.p.v = !!&#40;regs.y &gt;= regs.x&#41;;<br />&nbsp; regs.p.h = !!&#40;&#40;regs.y &amp; 15&#41; &gt;= &#40;regs.x &amp; 15&#41;&#41;;<br />&nbsp; if&#40;regs.y &lt; &#40;regs.x &lt;&lt; 1&#41;&#41; &#123;<br />&nbsp; //if quotient is &lt;= 511 &#40;will fit into 9-bit result&#41;<br />&nbsp; &nbsp; regs.a = ya / regs.x;<br />&nbsp; &nbsp; regs.y = ya % regs.x;<br />&nbsp; &#125; else &#123;<br />&nbsp; //otherwise, the quotient won't fit into regs.p.v + regs.a<br />&nbsp; //this emulates the odd behavior of the S-SMP in this case<br />&nbsp; &nbsp; regs.a = 255&nbsp; &nbsp; - &#40;ya - &#40;regs.x &lt;&lt; 9&#41;&#41; / &#40;256 - regs.x&#41;;<br />&nbsp; &nbsp; regs.y = regs.x + &#40;ya - &#40;regs.x &lt;&lt; 9&#41;&#41; % &#40;256 - regs.x&#41;;<br />&nbsp; &#125;<br />//result is set based on a &#40;quotient&#41; only<br />&nbsp; regs.p.n = !!&#40;regs.a &amp; 0x80&#41;;<br />&nbsp; regs.p.z = &#40;regs.a == 0&#41;;<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- Is it possible to change echo delay during playback very quickly to get reverb ?<br /></div><br /><br />Not entirely sure what you're trying to accomplish, but probably not.  The Echo delay reg is only used when the echo comes full circle back to the start of the ring buffer.  So if you have an echo size of $1000 samples (EDL=8), and you change EDL to 0 -- it could be up to $1000 samples before the newly written delay takes effect.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- When echo is enabled back on a channel after being disabled, I suppose this only allow output from that channel to go into the echo buffer to be heard again later at lower volume.</div><br /><br />Correct -- though it doesn't <em>necessarily</em> have to be a lower volume  ;P  (but it probably should for the sake of not damaging your eardrums)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- The processor have DI and EI instruction to enable/disable interrups. But is there any other source of interrupt than reset ? (I doubt reset is maskable). It's said that reset vector is stored at $fffe but I don't see any other interrupt vector mentionned in docs.</div>
<br />
<br />Not that I know of.  I look at the I flag on the SPC like I look at the D flag on the 2A03.  The only impact it really has is changing the value pushed when status is put on the stack.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri May 23, 2008 4:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The shift algorithm in Anomie's doc can't be right -- I tried it with some sample numbers and got incorrect results ($1000 / $80 got me $1F) -- unless the SPC's division really is that unreliable?</div><br />Anomie's and my division algorithm are both correct, I believe. I'm pretty sure I compared his for every input with mine. My version was compared with hardware for <em>all</em> 16.8 million possible inputs (took about 13 minutes to run on a SNES). bsnes uses mine, which just takes advantage of the host's division operator, rather than doing itcloser to how the SPC-700 probably does it in hardware, as Anomie's does.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The processor have DI and EI instruction to enable/disable interrups. But is there any other source of interrupt than reset ? (I doubt reset is maskable).</div>
<br />No interrupt pin known, so EI, DI, and SLEEP are almost useless. Presumably SLEEP would halt the processor until an interrupt was received, much like WAI on the 65816.
<br />
<br />Bregalad, bsnes should handle all the things you mention accurately. Are you unable to run it for some reason?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat May 24, 2008 1:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, it's a good thing to know BSNES is that accurate. I knew it was accurate when it comes to video, but I wouldn't exept it to mean the SPC is accurate too, becuase as far I know Nintendulator is very very accurate for vido it isn't that accurate for sound.
<br />
<br />Thanks for the usefull replies. BTW using the hosts division wouldn't throw an exeption if divizor is zero, as opposed to the old shift method which would work in all cases ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat May 24, 2008 3:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">BTW using the hosts division wouldn't throw an exeption if divizor is zero, as opposed to the old shift method which would work in all cases ?</div>
<br />The denominator can never be zero in the above code. In the first case, for y to be &lt; x*2, x must be non-zero. In the second case, 256-x is always non-zero.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat May 24, 2008 7:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Anomie's and my division algorithm are both correct, I believe. I'm pretty sure I compared his for every input with mine.</div>
<br />
<br />Could I have transcribed it wrong or something?
<br />
<br />Here is the algorithm in question:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; uint17 yva=YA<br />&nbsp; uint17 x=X&lt;&lt;9<br />&nbsp; loop 9 times &#123;<br />&nbsp; &nbsp; &nbsp; ROL yva<br />&nbsp; &nbsp; &nbsp; if&#40;yva&gt;x&#41; yva=yva XOR 1<br />&nbsp; &nbsp; &nbsp; if&#40;yva&amp;1&#41; yva-=x&nbsp; &nbsp; &nbsp; &nbsp;// remember, clip to 17 bits<br />&nbsp; &#125;<br /></div><br /><br />A test program I wrote:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;&nbsp; &nbsp;// YA and X gotten from user<br />&nbsp; &nbsp;&nbsp; &nbsp;yva = YA;<br />&nbsp; &nbsp;&nbsp; &nbsp;x = X &lt;&lt; 9;<br />&nbsp; &nbsp;&nbsp; &nbsp;for&#40;i = 0; i &lt; 9; ++i&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;yva &lt;&lt;= 1;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;yva &amp; 0x20000&#41;&nbsp; &nbsp;yva ^= 0x20001;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;yva &gt; x&#41;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;yva ^= 1;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;yva &amp; 1&#41;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;yva = &#40;yva - x&#41; &amp; 0x1FFFF;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;printf&#40;&quot;YVA=%02X,%d,%02X&quot;,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;yva &gt;&gt; 9,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#40;yva &gt;&gt; 8&#41; &amp; 1,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;yva &amp; 0xFF&#41;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;X&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;printf&#40;&quot; -- mod=%02X, quo=%02X\n&quot;,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;YA % X,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;YA / X&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;printf&#40;&quot;\n&quot;&#41;;<br /></div>
<br />
<br />output of program when given "1000 80" is:
<br />
<br />YVA=80,0,1F -- mod=00, quo=20
<br />
<br />That would be right if you subtract 80 from Y and add 1 to A (which I just saw, now, actually.  When I ran this test before, somehow I didn't see that).  So I guess you'd have to do an additional "if(Y&gt;=X)" check afterward?
<br />
<br />Also, while I didn't test it, it looks theoretically possible for V to be clear with Anomie's algorithm when the quotient is &gt; $1FF, whereas with your C version, V would always be set in that case.  I'll have to look at that closer and come up with an example for that though -- I could be wrong.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat May 24, 2008 8:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How odd, the older version of anomie's algorithm had &gt;= x, not &gt;x. Here's code that I've tested for all 2^24 combinations against mine, and against the output when tested on the SNES:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int x9 = x &lt;&lt; 9; <br />int yva = y*0x100 + a; <br />for &#40; int i = 0; i &lt; 9; i++ &#41;<br />&#123; <br />&nbsp; &nbsp; yva = yva * 2;<br />&nbsp; &nbsp; if &#40; yva &amp; 0x20000 &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; yva = &#40;yva ^ 1&#41; &amp; 0x1FFFF;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; if &#40; yva &gt;= x9 &#41; // this differs from anomie's doc<br />&nbsp; &nbsp; &nbsp; &nbsp; yva = yva ^ 1;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; if &#40; yva &amp; 1 &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; yva = &#40;yva - x9&#41; &amp; 0x1FFFF;<br />&#125;<br /><br />v_flag = &#40;yva &amp; 0x100&#41; != 0;<br />y = yva&gt;&gt;9 &amp; 0xFF; <br />a = yva &amp; 0xFF;</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>