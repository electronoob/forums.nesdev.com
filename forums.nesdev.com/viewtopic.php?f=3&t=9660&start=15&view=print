<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - C++ WTF</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">C++ WTF</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=9660">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=9660</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Jan 05, 2013 10:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you come across a bug like that, IMO you should find out its root cause even if you can fix it by changing something unrelated. Otherwise the bug may resurface at some other time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jan 06, 2013 12:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">When you come across a bug like that, IMO you should find out its root cause even if you can fix it by changing something unrelated. Otherwise the bug may resurface at some other time.</div><br />+1<br /><br />Any time a programmer describes an issue as &quot;or something&quot; it indicates they didn't take the time to find out what was really going on/causing the issue.  I have a friend who writes code like this and makes preposterous claims like &quot;calloc() crashes my program but using malloc() works just fine so the compiler or underlying C libraries obviously are broken&quot; (I gave up talking to him about this sort of thing long ago).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sun Jan 06, 2013 6:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">When you come across a bug like that, IMO you should find out its root cause even if you can fix it by changing something unrelated. Otherwise the bug may resurface at some other time.</div><br /><br />+1<br /><br />Couldn't agree more. But to be honest I think that if it was getting stuck in the PPU loop because there were not enough cycles being emulated then the problem has since gone away. Of course I will go over all my code at some point to check for the like of buffer overflows.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 06, 2013 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Any time a programmer describes an issue as &quot;or something&quot; it indicates they didn't take the time to find out what was really going on/causing the issue.</div><br />It could be that, or it could be that he did consult the documentation and found it incomplete. This was the case for some of the OAM refresh &quot;bugs&quot; in the NES PPU that were characterized starting in early 2009.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I have a friend who writes code like this and makes preposterous claims like &quot;calloc() crashes my program but using malloc() works just fine so the compiler or underlying C libraries obviously are broken&quot;</div><br />I seem to remember one version of the C library for Windows segfaulting on <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">free&#40;NULL&#41;;</tt> when that's supposed to be a no-op according to the C standard. If a difference between the library's behavior and the standard can be demonstrated in a 20-line program, isn't it the library's fault?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zelex</b> [ Mon Jan 07, 2013 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Any time a programmer describes an issue as &quot;or something&quot; it indicates they didn't take the time to find out what was really going on/causing the issue.</div><br />It could be that, or it could be that he did consult the documentation and found it incomplete. This was the case for some of the OAM refresh &quot;bugs&quot; in the NES PPU that were characterized starting in early 2009.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I have a friend who writes code like this and makes preposterous claims like &quot;calloc() crashes my program but using malloc() works just fine so the compiler or underlying C libraries obviously are broken&quot;</div><br />I seem to remember one version of the C library for Windows segfaulting on <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">free&#40;NULL&#41;;</tt> when that's supposed to be a no-op according to the C standard. If a difference between the library's behavior and the standard can be demonstrated in a 20-line program, isn't it the library's fault?</div><br /><br />Possibly, but these situations are exceedingly rare. 99.9999% of the time it is user error.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Jan 07, 2013 1:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd say I encounter a bug produced by a compiler about once every year or two. It's pretty common for the programmer to blame the compiler at first, but yeah, it's generally pretty rare that this is really the case. Slightly more common is being able to crash/fatal-error the compiler, which doesn't produce a bug since it failed to build your code, but can be pretty annoying to resolve. Library errors are not terribly uncommon, I'd say, especially with younger ones, or platform specific things that don't have as wide a testing net.<br /><br />One of my favourite bugs that we tried to blame on a compiler was corruption of 32 bit floating points that were being endian swapped for big-endian platforms. The process involved reinterpreting a float as a 32 bit int, swapping its bytes, then reinterpreting it back into a float. This occasionally produced a NAN, which if loaded into the floating point unit would end up changing a few bits. However, with optimization on sometimes the conversion back to a float was optimized away, and the FPU was bypassed, leaving it intact. The result was something that produced occasional corrupt data if run in debug, and very little corrupt data if run in release, so this bug actually lived for maybe 6 months before somebody figured out that something was wrong with the data being produced, and yeah, our initial reaction was to blame the compiler, until we looked hard at the assembly and couldn't find anything wrong with it. (The lesson learned was never to put the data back into a float type after endian swapping it, just keep it as an integer until you write it to disk.)<br /><br />Anyhow, it's a valid instinct to suspect the compiler, I think. It will be wrong most of the time, but on those few occasions where you can follow through and actually find a problem with the code it's producing, it pays off when you can report the bug and the compiler gets fixed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Jan 07, 2013 2:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />int Mapper;<br />int Mirror&#91;4&#93;;<br />int NMI;<br />...<br /></div><br /><br />becomes<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />int WhatFetch;<br />int X;<br />int Mirror&#91;4&#93;;<br /></div><br /><br />...fixes most of my errors.<br /><br />W. T. F.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Jan 07, 2013 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Stack corruption?  Out of bounds writes on that last array?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Jan 07, 2013 3:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No out of bound writes on that array whatsoever. How would I check for stack corruption?<br /><br />...btw I did uninstall Visual Studio from D: and reinstall to C: WITHOUT reinstalling the OS. When it first ran I did get a load of wierd error messages. Could that affect something?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Jan 07, 2013 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you find a variable is getting an unexpected value in it, put a data breakpoint on it. This will break whenever it gets written to, and you can often find the offending piece of code quite easily this way. (You can even make it break only when the offending value gets written.)<br /><br />Stack corruption can be really hard to deal with, since it usually leaves you with unreadable/garbage callback information in the debugger. I've usually had to do a lot of printf-style instrumentation of the code to try and figure out exactly how far it gets before crashing to figure out where to look.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Jan 07, 2013 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The 4 Mirror[] entries are 240, 4, 14 and 0 when the debugger is run. At no point in the code are they set to anything other than 0, 1, 2 or 3 for obvious reasons.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Mon Jan 07, 2013 3:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">The 4 Mirror[] entries are 240, 4, 14 and 0 when the debugger is run. At no point in the code are they set to anything other than 0, 1, 2 or 3 for obvious reasons.</div><br /><br />Then you're memcpy()ing or otherwise walking beyond the end of some other nearby array in memory...<br /><br />If you ever see something in memory you know your code isn't writing there, you're usually wrong.  Your code is writing it there but not the code you'd expect.  For example, looking at all of your accesses to Mirror[] will not lead you to the culprit--it may actually lead you to some other problem if you discover that you're accessing Mirror[] with an out-of-bounds index, but that's not what's causing this problem.  Looking at accesses to nearby arrays could help...but it's a long shot.<br /><br />Set a breakpoint somewhere that you'll hit each time through a frame.  See if you can narrow down when the corruption is occurring.  Does it start out bad?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Jan 07, 2013 5:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">cpow wrote:</div><div class="quotecontent"><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">The 4 Mirror[] entries are 240, 4, 14 and 0 when the debugger is run. At no point in the code are they set to anything other than 0, 1, 2 or 3 for obvious reasons.</div><br /><br />Then you're memcpy()ing or otherwise walking beyond the end of some other nearby array in memory...<br /></div><br />Given <a href="http://forums.nesdev.com/viewtopic.php?p=104659#p104659" class="postlink">this</a> showing exactly that, I would say your theory is likely.  Not picking on ya WedNESday!  Just saying cpow's proposal sounds likely given some established history.<br /><br />Too bad Windows doesn't have native valgrind; it can usually detect this kind of thing.<br /><br />I'll expand on what cpow wrote here with something that's a little more technical but might make more sense to you:<br /><br /><div class="quotetitle">cpow wrote:</div><div class="quotecontent">If you ever see something in memory you know your code isn't writing there, you're usually wrong.  Your code is writing it there but not the code you'd expect.  For example, looking at all of your accesses to Mirror[] will not lead you to the culprit--it may actually lead you to some other problem if you discover that you're accessing Mirror[] with an out-of-bounds index, but that's not what's causing this problem.  Looking at accesses to nearby arrays could help...but it's a long shot.</div><br />The reason it's a &quot;long shot&quot; and so on has to do with how OSes handle memory allocation.  When a program starts there's actually a boatload of memory allocated all over the place (based on relevant executable header data and all the underlying segments defined in the executable itself -- yes I'm greatly and intentionally simplifying).  A crash/exception (again keeping it simple) only happens when trying to access memory that is outside of the allocated space for your program -- anything that your program has allocated (either intentionally, or the kernel allocating for your program as a result of the program loading, etc.) is game for being accessed (read or written) without any complaint.<br /><br />Memory allocation schemes in an OS do so in pages -- sequential amounts of memory that are not necessarily back-to-back linear.  Phrased differently, let's say you have this line: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">foo = malloc&#40;65536&#41;; bar = malloc&#40;65536&#41;;</tt>  You might be inclined to think that the underlying VM might allocate both 64KBytes back-to-back so that you could technically access <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">foo[65536]</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">foo[65537]</tt> and actually be accessing memory allocated pointed to by the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bar</tt> pointer.  That assumption is wrong -- however, there may be memory (for other reasons) allocated for your program past that 64KByte allocation (referring to what <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">foo</tt> points to) that can be accessed without an exceptions generated.  It could be for some variables you allocated on the heap or the stack (either or).  It could be for some underlying API bits that your program uses that allocates memory itself.  All this is memory your program technically owns, which means you're actually free to access it in whatever ways you wish -- intentional or unintentional.  This is how, for lack of better term, &quot;memory gets corrupted&quot; when a program does something it shouldn't be doing.<br /><br />The result of this is often the programmer resorting to stupid ideas that &quot;seem&quot; to work and make him/her think they've solved the problem.  Things like &quot;I turned off optimisation and the problem is gone&quot;, &quot;the issue doesn't happen if I enable debug symbols&quot;, &quot;if I run 5 instances of the program the 4th one works fine&quot;, or screwing around with stack size (I really hate it when I see people do this).  All these result in the programmer suddenly believing the underlying OS or system &quot;is unstable&quot; when in fact it's their software that's broken.<br /><br />I've <a href="http://forums.nesdev.com/viewtopic.php?p=104706#p104706" class="postlink">mentioned this before</a> (in the same thread I linked above actually).  My point in bringing that up is that depending on where the VM decided to allocate memory for the pointer called <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Pixel</tt>, it could be next to memory used for other things.  When I say &quot;other things&quot; I mean quite literally <strong>anything</strong> relating to your program.  Again: accessing something out-of-bounds that's still associated with your process memory space won't result in an exception.<br /><br />I myself learned about this the hard way, maybe a year or so after I had started learning C.  I had a piece of code (a simple <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fread&#40;&#41;</tt> call and nothing more) that worked when using -O2 (optimisation level 2, i.e. more optimisations), but broke (crashed) when using -O1 or -O0.  I had no idea why; I started blaming the compiler because the situation seemed backwards (I'd heard of optimiser bugs but generating working code with -O2 but crashing code with -O1 or no optimisation?) and I was pompous.  It wasn't until &quot;other mysterious issues&quot; happened a week later that I compared my code to that of an open-source program.  It took me a while to understand what was going on, but it was quite simply the exact same thing you experienced above with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">COLORREF *Pixel</tt> (but for me it was with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">FILE *fp</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">FILE fp</tt> and how -- or rather, what -- I was passing to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fread&#40;&#41;</tt>).<br /><br />Tracking down out-of-bounds accesses like this is somewhat difficult and often requires that you build your binaries with a kind of &quot;guard&quot; or &quot;wrapper&quot; that may wrap itself around every single system or library call in attempt to try and do the messy work for you.  I mentioned valgrind above; it does some of this as a wrapper, but there are other solutions that involve compiler features or third-party libraries that inject themselves into things (i.e. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc&#40;&#41;</tt> might now actually call a third-party library to do some tracking, then gets handed off to the real <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc&#40;&#41;</tt>).  I'm sure there are tools for this under Windows I just don't have familiarity with Windows development to be able to recommend any.  :(

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Jan 07, 2013 7:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not sure if anyone mentioned, but enabling all warnings and adjusting code to quiet them is a good way to let the compiler help you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Jan 07, 2013 8:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: C++ WTF</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Not sure if anyone mentioned, but enabling all warnings and adjusting code to quiet them is a good way to let the compiler help you.</div><br />...until you find people forcing typecasts to squelch said warnings (which in my experience is only necessary maybe 20-30% of the time; the rest are usually indicators of something anomalous).  I strongly recommend <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-Wall -Werror</tt>.  I still remember back in the early 90s when I was learning C and literally everyone I knew who did C kept telling me to &quot;just ignore warnings&quot;.  This came from a good 8 or 9 people.  To this day it was the worst advice a large number of people (who now do professional programming) ever gave me.  They were so incredibly wrong.<br /><br />For folks using gcc, this is what I've used for many years on my own projects for debug/beta builds, and only are all of these removed for final production releases:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">-g3 -ggdb -Werror -Wall -Waggregate-return -Wbad-function-cast -Wcast-align -Wdeclaration-after-statement -Wdisabled-optimization -Wfloat-equal -Winline -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wold-style-definition -Wpacked -Wpointer-arith -Wredundant-decls -Wsign-compare -Wstrict-prototypes -Wunreachable-code -Wwrite-strings</div><br /><br />For production, the only thing I use is:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">-fno-inline</div><br /><br />HTH.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>