<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Source code collection</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Source code collection</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=141">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=141</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SnowBro</b> [ Sun Jan 09, 2005 6:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello. I'm releasing some NES source code I've written.
<br />It basically contains most stuff necessary to make a full 2D scroller; a graphics engine, music+sfx engine, object engine (including collision detection, physics), animation, Huffman text decoding, palette fading, and a virtual machine for scripting game logic.
<br />I've also integrated everything into a small demo which shows some of the capabilities. The total amount is 11,000+ lines of code split across 70 linkable units, which should be conveniently browsable by name.
<br />
<br />The source code is currently at
<br /><!-- m --><a class="postlink" href="http://www.stud.ntnu.no/~kenth/ntxdev.zip">http://www.stud.ntnu.no/~kenth/ntxdev.zip</a><!-- m -->
<br />
<br />You'll need the latest version of my assembler+linker, and (GNU) Make, to build it:
<br /><!-- m --><a class="postlink" href="http://www.stud.ntnu.no/~kenth/xorcyst">http://www.stud.ntnu.no/~kenth/xorcyst</a><!-- m -->
<br />
<br />I've compiled a ROM for those interested in that:
<br />
<br /><!-- m --><a class="postlink" href="http://www.stud.ntnu.no/~kenth/ntxdev.nes.zip">http://www.stud.ntnu.no/~kenth/ntxdev.nes.zip</a><!-- m -->
<br />
<br />I have made a number of tools to create levels, encode text, assemble game logic scripts etc., but it takes some effort to package it and document it properly, so I'll hold off releasing it until someone asks.
<br />
<br />Most of the source code and internal data formats are well documented (I hope). I should really write some detailed articles though, but it takes a lot of time... 
<br />
<br />The code is still under heavy development, as there's much to be done before I'll be back at the functional level I was with the old X816 code base, but there's enough stuff in there already for starters.
<br />
<br />Have fun!
<br />
<br />(And thanks to Tootai for the monochrome bird used as test enemy (the image before conversion was much better, sorry about that...))

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jan 09, 2005 1:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, sick !!
<br />Looks really great.
<br />
<br /><div class="quotetitle">SnowBro wrote:</div><div class="quotecontent">I should really write some detailed articles though, but it takes a lot of time... </div>
<br />Yeah, that would be really cool. Thanks a lot for your work !
<br />
<br />By the way, I've got a few questions about your assembler :
<br />-What's the use of the "proc" stuff ? What's the difference between a jsr to a procedure and a standard label ?
<br />- Is it possible to pad the code into a file (for example I've main code at $e000-$exxx, DPCM samples at $f000-$fxxx and vectors at $fffa-$ffff, am I obligated to imput 3 different asm files ?
<br />- Is there a way to definite an automatic-public data segment without definite 2 times a public variable ?
<br />- What's the use of this below stuff ? Isn't is simpler to just remember wich bit has wich use ?
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Records which describe PPU reg layouts.<br />.record ppu_ctrl0 nmi_on_vblank:1, pad0:1, sprite_size:1, bg_table:1, sprite_table:1, ppu_addr_inc:1, name_table:2<br />.record ppu_ctrl1 emph:3, sprite_on:1, bg_on:1, sprite_clip:1, bg_clip:1, mono:1<br />.record ppu_status vblank:1, sprite0:1, sprite_overflow:1, pad0:5<br /><br />; Field masks.<br />PPU_CTRL0_NMI&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.equ&nbsp; &nbsp;mask ppu_ctrl0::nmi_on_vblank<br />PPU_CTRL0_SPRITE_SIZE&nbsp; &nbsp;&nbsp; &nbsp;.equ&nbsp; &nbsp;mask ppu_ctrl0::sprite_size<br />PPU_CTRL0_BG_TABLE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.equ&nbsp; &nbsp; mask ppu_ctrl0::bg_table<br />PPU_CTRL0_SPRITE_TABLE&nbsp; &nbsp;&nbsp; &nbsp;.equ&nbsp; &nbsp;mask ppu_ctrl0::sprite_table<br />PPU_CTRL0_PPU_ADDR_INC&nbsp; &nbsp;&nbsp; &nbsp;.equ&nbsp; &nbsp;mask ppu_ctrl0::ppu_addr_inc<br />PPU_CTRL0_NAME_TABLE&nbsp; &nbsp;&nbsp; &nbsp;.equ&nbsp; &nbsp;mask ppu_ctrl0::name_table</div><br /><br />Is it possible to assign more than one letter to one byte in a *.char file (for example : the=0x80; every=0x81;  each=0x82; etc...) This could be an usefull and easy to code way to compress text data and many commercial NES games uses it (letters never takes a whole 8-bit table).<br />- What on God's green earth (lol) is an union ?<br />- Same as above for the enumerations<br />- When indirect indexed or indexed indirect adressing (i.e. lda  [$00],Y or ldx [$00,X]) shall the argument be a byte or a word (I tried the word thig but it didn't work). So, is that right to imput .byte[2] ?<br />- Is there a way to mix up user-defined variables and auto-assigned variables, for example, to be sure to have save buffer to the SRAM at $6000-$7fff ?<br />Thanks in advance ![/code]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Sun Jan 09, 2005 11:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">-What's the use of the "proc" stuff ? What's the difference between a jsr to a procedure and a standard label ?<br /></div><br /><br />No, at the moment there's really no difference between "proc" and a normal label. However, I have fun ideas for it, such as being able to inline a function defined in another unit, or the linker being able to extract a single procedure from one unit, as opposed to having to link in the whole unit. The basis of these expansions would be that the size of the procedure (in bytes) has to be known, which the assembler can find out if it's told that the label is a procedure and not a generic label (the procedure ends at the "endp" statement).<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- Is it possible to pad the code into a file (for example I've main code at $e000-$exxx, DPCM samples at $f000-$fxxx and vectors at $fffa-$ffff, am I obligated to imput 3 different asm files ?<br /></div><br /><br />You can't pad to an absolute address, but you can use the current PC symbol, $, to achieve the proper result if you don't want to split up the files. For example,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.pad $FFFA - $<br /></div><br />simulates absolute padding to $FFFA.<br />Perhaps I should just change ".pad XXXX" to mean ".dsb XXXX - $", since people are probably used to the pad directive taking an absolute address (right now pad is an alias for dsb).<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- Is there a way to definite an automatic-public data segment without definite 2 times a public variable ?<br /></div><br /><br />Hmm, I think you just found a bug. You're supposed to be able to start a data segment with<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.dataseg public<br /></div><br />to make all the variables auto-public. But it doesn't work, even though it should, so I have to fix that.<br />You can also use<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.public my_var .byte<br /></div><br />Which is equivalent to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">my_var .byte<br />.public my_var<br /></div><br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- What's the use of this below stuff ? Isn't is simpler to just remember wich bit has wich use ?<br /></div><br /><br />I'm just showing off the .record directive. <img src="./images/smilies/icon_wink.gif" alt=";-)" title="Wink" /> For the PPU regs, I agree, it's just as simple to type the masks directly, since they're not gonna change. But I think records are a life-saver for user-defined bitfields, and especially the ability to initialize the fields like a normal structure and have the assembler do the tiresome shifting, ANDing and ORing for you. Check out "warp2d.h"; back in the old days I had to generate the packed bytes of (area, section, location) manually, now the assembler does it for me, so I can easily change bitfield values when I build the level data.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Is it possible to assign more than one letter to one byte in a *.char file (for example : the=0x80; every=0x81;  each=0x82; etc...) This could be an usefull and easy to code way to compress text data and many commercial NES games uses it (letters never takes a whole 8-bit table).<br /></div><br /><br />Nope, not yet. I'm using Huffman coding for my text, which gives very good compression. But I have to release the tools I've made for compressing text in order for it to be any good for others.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- What on God's green earth (lol) is an union ?<br /></div><br /><br />A union is like a structure, only all the fields share the same storage in memory. Check "effect.h" for example, which contains the data structures for the music player's effect generator. At any time, a sound channel can have only one effect, but there are several different effects to choose from. In order to use the most meaningful names according to the effect type, the effect states share the same data storage, I just use the effect.kind field to figure out which of the unions to use.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- Same as above for the enumerations<br /></div><br /><br />If you search for a C tutorial I'm sure you will find good explanations of both unions and enumerations. An enumeration is just a convenient way of defining a set of strictly increasing constants, without having to actually type the values in manually. It's a way of raising the abstraction level of your code and make it less error-prone.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- When indirect indexed or indexed indirect adressing (i.e. lda  [$00],Y or ldx [$00,X]) shall the argument be a byte or a word (I tried the word thig but it didn't work). So, is that right to imput .byte[2] ?<br /></div><br /><br />The argument is an 8-bit address, but the actual data at that address is a 16-bit pointer. I use the "ptr" datatype defined in "ptr.h", so I can access it as my_ptr.lo and my_ptr.hi. Remember to specify the "zeropage" modifier when defining the pointer, otherwise it might not get mapped to zeropage and you will get an error message during linking.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- Is there a way to mix up user-defined variables and auto-assigned variables, for example, to be sure to have save buffer to the SRAM at $6000-$7fff ?<br /></div><br /><br />Well yeah, sort of... You can define a label to point to WRAM:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.label wram = $6000<br /></div><br />But you can't map an entire data segment to a specific location. However, you can use a structure, since a structure's field are guaranteed to be mapped sequentially in memory. So for example<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.struc wram_state<br />savegames .savegame&#91;10&#93; ; savegame struc defined elsewhere<br />temp_array .word&#91;128&#93;<br />...<br />.ends<br /><br />.label wram = $6000 : wram_state<br /></div><br />Then you can use wram.savegames etc. in your code. Just remember to not specify your reserved parts of WRAM in the linker script, so the linker won't try to allocate them.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Thanks in advance !<br /></div>
<br />
<br />Thank you, I'm the only one who's used the assembler up until now I'm pretty sure, so I'm glad for all feedback on how others see it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 10, 2005 12:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Anonymous wrote:</div><div class="quotecontent">No, at the moment there's really no difference between "proc" and a normal label. However, I have fun ideas for it, such as being able to inline a function defined in another unit, or the linker being able to extract a single procedure from one unit, as opposed to having to link in the whole unit.</div><br />Sounds like <a href="http://www.cc65.org/doc/ca65-10.html#ss10.56" class="postlink">.ifref in .CA65</a>. In addition, <a href="http://www.cc65.org/doc/ca65-10.html#ss10.75" class="postlink">CA65's .proc</a> allows for procedure-local labels. Do you plan on adding that?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For example,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.pad $FFFA - $<br /></div><br />simulates absolute padding to $FFFA.<br />Perhaps I should just change ".pad XXXX" to mean ".dsb XXXX - $"</div><br />Such a change would at least help maintain consistency with x816. CA65, on the other hand, prefers that the linker script put a 6-byte "vectors" section into the ROM_C000 bank.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But I think records are a life-saver for user-defined bitfields, and especially the ability to initialize the fields like a normal structure and have the assembler do the tiresome shifting, ANDing and ORing for you. Check out "warp2d.h"; back in the old days I had to generate the packed bytes of (area, section, location) manually</div><br />If your assembler can handle the | operator, you don't need it. Define the masks in a header file, and OR them together in your constant data. Even better is to make a custom graphical editor for each data type, separate from your assembler.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm using Huffman coding for my text</div><br />I've read in <em>Managing Gigabytes</em> that a technique called "huffword", where each Huffman code maps to a word, provides good compression.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can define a label to point to WRAM:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.label wram = $6000<br /></div><br />But you can't map an entire data segment to a specific location.</div><br />CA65 can.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">However, you can use a structure, since a structure's field are guaranteed to be mapped sequentially in memory.</div><br />In fact, I use a technique like this in my GBA headers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thank you, I'm the only one who's used the assembler up until now I'm pretty sure, so I'm glad for all feedback on how others see it.</div>
<br />What do you plan on making your assembler do that CA65 doesn't already do?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Mon Jan 10, 2005 5:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What do you plan on making your assembler do that CA65 doesn't already do?</div>
<br />
<br />It's not really a matter of what an assembler can do, but how easy it allows the programmer to do it. I'm sure you can see that
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda my_var + my_struc1::field1 + my_struc2::field2<br /></div><br />is less intuitive than<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda my_var.field1.field2<br /></div>
<br />
<br />How can you define an array of structures with ca65's language? (xasm: like in C)
<br />How can you initialize structures and unions statically (ROM data)? (xasm: like in C)
<br />How can you index structures statically? (xasm: like in C)
<br />I can't find directives equivalent to .DS(B|W|D) (.RES? Nah...).
<br />And I still say records is more elegant than manual ORing in the way you describe. Besides, it doesn't HURT to have that feature since you can use |, &amp; and &lt;&lt; to your heart's content anyway if you want. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />These are all features I found crucial for keeping my code "sane". A large part of the explanation for the omission of these features in ca65 is probably that it's meant to process code generated by a compiler, whereas my assembler targets code generated by mortal humans.
<br />
<br />I don't see any point in listing more reasons why I wrote my own assembler instead of using ca65; I haven't used it anymore than you've used my assembler. If you're happy with ca65, there's no reason to switch. But I'm sure the code I've released (which is the real topic here) would look a lot uglier if I wrote it for ca65 since it's heavily based on (nested) unions and structs. Besides, writing the assembler and linker was a fun exercise, and I'm really comfortable with using it now. Hope I haven't offended you by releasing it to the public. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />
<br />And if you have suggestions for features that can make it "stand out" more, I'm all ears. Constructive discussion on tools is fun.
<br />
<br />And you're right about the graphical editor... I have an old, old one which just doesn't cut it anymore, so I eventually have to write a new one, but it's a timeconsuming project. I also have to write a new version of my old tool NSA (NES Screen Arranger) which is platform-independent and doesn't suck as much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SnowBro</b> [ Mon Jan 10, 2005 5:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cripes, forgot to enter my nick in the previous reply, I guess I should register here soon (I might be already though, it's been a while since I frequented the board).
<br />Anyway, while we're talking about assemblers, I would like to give some heads up to Brian Provinciano. When I released version 1.0, I was perfectly content with releasing an "X816 clone", to put it blunt. But when I saw the screenshots of his NESHLA assembler on the Grand Theftendo page, I got inspired to add all the high-level junk I hadn't had the motivation to do before... And without that, there would be no NES source code to release now. So cheers for that! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 10, 2005 5:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">snowbro wrote:</div><div class="quotecontent">I also have to write a new version of my old tool NSA (NES Screen Arranger) which is platform-independent and doesn't suck as much.</div>
<br />You could try starting with the source code for 8Name, an NSA clone I wrote when I couldn't get NSA to work reliably on Windows 2000. Find it along with my clone of (old) Tile Layer in <a href="http://www.pineight.com/pc/#ted" class="postlink">Pin Eight NES Tools</a>.
<br />
<br /><img src="http://www.pineight.com/pc/8name.png" alt="Image" />
<br />8Name screenshot

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>RedComet</b> [ Mon Jan 10, 2005 8:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />[quote="SnowBro"I have made a number of tools to create levels, encode text, assemble game logic scripts etc., but it takes some effort to package it and document it properly, so I'll hold off releasing it until someone asks.
<br />[/quote]
<br />
<br />I'm rather interested in the tools for encoding text, is there any way you could upload those?
<br />
<br />Anyway, great stuff there SnowBro.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SnowBro</b> [ Tue Jan 11, 2005 1:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">You could try starting with the source code for 8Name, an NSA clone I wrote when I couldn't get NSA to work reliably on Windows 2000. </div>
<br />Have you seen my latest graphics editor, <a href="http://www.stud.ntnu.no/~kenth/tm" class="postlink">Tile Molester</a>? I want to create a nametable editor with the same standard, modern software functionality: cut/copy/paste/move chunks of nametable data, undo/redo.
<br />By the way, I tried "name" under MandrakeLinux 10.1, and when I right-click on the nametable, everything hangs for about 10-15 seconds, with the mouse flashing rapidly. I'm using Allegro 4.0.3. Must be something in the loop in the right_click() function that's causing it not to terminate. It's fine on XP.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SnowBro</b> [ Tue Jan 11, 2005 4:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">RedComet wrote:</div><div class="quotecontent">I'm rather interested in the tools for encoding text, is there any way you could upload those?<br /></div>
<br />
<br />I uploaded it <a href="http://www.stud.ntnu.no/~kenth/nesdev/huffpuff" class="postlink">here</a>. You'll also need the file huffman.asm from the source archive (see top of this post) to actually decode the text; it's all very hastily described in the README.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jan 11, 2005 11:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">No, at the moment there's really no difference between "proc" and a normal label. However, I have fun ideas for it, such as being able to inline a function defined in another unit, or the linker being able to extract a single procedure from one unit, as opposed to having to link in the whole unit. The basis of these expansions would be that the size of the procedure (in bytes) has to be known, which the assembler can find out if it's told that the label is a procedure and not a generic label (the procedure ends at the "endp" statement). </div><br />So is the ".proc / .endp" needed for every subroutine (so for 99% of the code) ?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can't pad to an absolute address, but you can use the current PC symbol, $, to achieve the proper result if you don't want to split up the files.</div><br />Hem, you say I can't and you after show me how to do it, so I don't get it right.<br />So .pad $xxxx - $ would tell the linker to full all datas between current adress and ardess $xxxx, is that right ?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can also use <br />Code: <br /><br />.public my_var .byte <br /> <br /><br />Which is equivalent to <br />Code: <br /><br />my_var .byte <br />.public my_var  </div><br />OK thanks. By the way, the .byte is there an alias for .db and could also be .db[64] for a buffer of 64 bytes, right ?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm just showing off the .record directive.  For the PPU regs, I agree, it's just as simple to type the masks directly, since they're not gonna change. But I think records are a life-saver for user-defined bitfields, and especially the ability to initialize the fields like a normal structure and have the assembler do the tiresome shifting, ANDing and ORing for you. Check out "warp2d.h"; back in the old days I had to generate the packed bytes of (area, section, location) manually, now the assembler does it for me, so I can easily change bitfield values when I build the level data. </div><br />Oh, it's horrible, I'm unable to understand a single line in thoose .h files. Does this mean that the .record thing can automatically add logic instruction in your code ? So the carry flag or something could be affected in the programm, and this could be a source of bugs.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Nope, not yet. I'm using Huffman coding for my text, which gives very good compression. But I have to release the tools I've made for compressing text in order for it to be any good for others. </div><br />I guess that the MTE compression rate is as high than Huffman one, and it's much better to use and code (I didn't understand 100% how huffman works, trough. It's just a pointer pointing on other pointers, pointing themselves on other pointers, etc.... isn't it ?)<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you search for a C tutorial I'm sure you will find good explanations of both unions and enumerations. An enumeration is just a convenient way of defining a set of strictly increasing constants, without having to actually type the values in manually. It's a way of raising the abstraction level of your code and make it less error-prone. </div><br />Ah, okay, I got the enumeration thing. So<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.enum Color<br />Blue, Green<br />Yellow=4, Orange, Red</div><br />Is the equivalent to :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Blue = 0<br />Green = 1<br />Yellow = 4<br />Orange = 5<br />Red = 6<br /></div><br />Is that right ? (so What's the use of the enumeration's name ?)<br />I'm still not understanding <em>anythiny</em> to unions and structures. The C manual I looked at, were, let's say too "proffesionnal" for me. It's seeing examples of list of names, ages, and other thing like that (what's the use of names and ages for NES programming ??)<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But you can't map an entire data segment to a specific location. However, you can use a structure, since a structure's field are guaranteed to be mapped sequentially in memory.</div><br />Ah, the day I'll got the structures may help me to understand that.<br />However, I found better to organize the RAM myself. OK I could make an error and assignate to variables to the same location, but I'm still sure of what I'm doing and I know witch part of the code I'm seeing while tracing/debuging my code.<br />For example, the tracers shows something like this<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ldx $67<br />lda $39<br />sec<br />sbc $9f<br />asl A<br />sta $20<br />.label<br />lda $38<br />and $654,X<br />ora $20<br />sta $23f,X<br />dex<br />bne .label</div><br />You'll be totally lost if you don't know wich variables are $20, $38, $39, $68 and $9f (may $23f,X and $654,X could be resolved with a RAM wiewer). If you additionnaly adds automatic-logic instructions, thing will get worse.<br />Also, SRAM bankswitching like in a SOROM or ETROM game would be impossible, isn't it ?<br />Imagine a code like this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda $200,X<br />cpx #$40<br />bcs .next<br />pha<br />lda #$00<br />sta #WRAMBankSwitchReg<br />pla<br />sta $7fc0,X&nbsp; &nbsp;;Oh, the RAM allocator overflowed the first bank<br />jmp .next2<br />.next<br />pha<br />lda #$01<br />sta #WRAMBankSwitchReg<br />pla<br />sta $5fc0,X&nbsp; &nbsp; ;And cut the buffer into two parts &#40;this ones writes to the SRAM because x is greather than $40&#41;<br />.next2<br />.....</div><br />instead of :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda Buffer1,X<br />sta Buffer2,X<br />....</div><br />Wouldn't it be stupid, heh ? (the first code looks like a C generated code)<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thank you, I'm the only one who's used the assembler up until now I'm pretty sure, so I'm glad for all feedback on how others see it.</div>
<br />You just shall doccument it correctly. Otherwise your work could become useless and that would be a shame.
<br />I'm interessing to switch from NESAsm to XRORCyst for my Ecological Evolution project, but I'm still in trouble (NESAsm really have a lack of options, but the XROCyst have too much, and not the one who I'm checking for, heh !)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>RedComet</b> [ Tue Jan 11, 2005 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">SnowBro wrote:</div><div class="quotecontent"> You'll also need the file huffman.asm from the source archive (see top of this post) to actually decode the text; it's all very hastily described in the README.</div>
<br />
<br />Thanks for uploading that. I've always thought huffman compression was a bit too difficult for the 6502 to accomplish, but I guess its not afterall! 
<br />
<br />What kind of a compression rate have you managed to squeeze out with huffman as opposed to say dictionary encoding or dual/multi tile encoding?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jan 11, 2005 1:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The dos version of the thing looks like to don't work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SnowBro</b> [ Wed Jan 12, 2005 10:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The dos version of the thing looks like to don't work.</div>
<br />
<br />huffpuff &lt; README &gt; test.asm
<br />
<br />works here (standing in the folder where you uncompressed it).
<br />
<br />The program reads input from stdin and writes output to stdout, which is why you have to use &lt; &gt; to redirect the streams from/to file. You could just start the program without any redirection, in which case the input is read from your keyboard and the output appears on your console.
<br />
<br />There's only one (optional) argument: The name of a .tbl (character map) file of the same format as used in my assembler (I forgot to include example.tbl in the binary releases of huffpuff, but it's in the source code release). It's only necessary to use a character map if you use a different character coding than ASCII. Then you can write the input file in ASCII, and huffpuff will convert the characters according to your custom character map BEFORE the string is Huffman-encoded.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SnowBro</b> [ Wed Jan 12, 2005 11:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Source code collection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">RedComet wrote:</div><div class="quotecontent">What kind of a compression rate have you managed to squeeze out with huffman as opposed to say dictionary encoding or dual/multi tile encoding?</div>
<br />I've only tried it on Final Fantasy 1.
<br />Original (DTE):  13,284 bytes
<br />Huffman: 10,638 bytes
<br />
<br />I haven't taken the size of the DTE table itself into account (anyone know the size?).
<br />The Huffman decoding table is 266 bytes.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>