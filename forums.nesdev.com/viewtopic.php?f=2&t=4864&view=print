<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Simulating arguments passing to functions with zero page</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Simulating arguments passing to functions with zero page</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4864">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4864</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Sat Feb 14, 2009 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Simulating arguments passing to functions with zero page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm rewriting my library in asm, but still offering an API to be called from C.
<br />cc65 implements arguments passing to function with a stack in $500 - $5FF, but I figured out a faster (I think) way to do that without the stack.
<br />
<br />I declare some zero page variables which will be used to simulate the arguments, let's say _byte_arg_0, etc.
<br />Then I defined a macro function with arguments, which is what the user really calls in his code, which in turn sets those zero page vars with the values of the arguments, and then calls the real .proc
<br />The .proc reads the arguments from the zero page vars and does what it has to do, with faster zero page vars instead of a stack.
<br />
<br />With this method, of course a routine like this cannot call itself recursively or call another routine that uses the same zero page vars. Anyway, no routine of my library will do any of both.
<br />
<br />Also, if one of this routines, gets interrupted by an interrupt which in turn calls another of this routines, and both use the same zero page vars, there's a problem there too. I'l have to look over that.
<br />
<br />Besides what I mentioned, does anyone think this method is good?
<br />Does anyone detect any other problem?
<br />Would you use this method? or is the stack method better?
<br />( One of the reasons I don't use cc65's stack, appart from zp being faster, is that I don't fully understand it yet )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Feb 14, 2009 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds like a solid approach, with the limitations you cover, but is this optimization necessary? What sort of performance are you aiming for? What functions would this be used for? I guess thre real question is of the general API you're planning. It's a good approach overall, to write core routines in asm so that more work is done in the library and less in the inefficient C code of the user.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Sun Feb 15, 2009 12:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The functions in my library are mostly writes to PPU, OAM, APU registers, Joypad reads, and so on.
<br />
<br />The main performance aim is already covered by re writing everything in asm as oposed to C, which was a quick approach to get things done.
<br />
<br />I don't know how necessary this optimization is, but I think every optimization is good in NESdev, also, using a stack for arguments is only needed for recursive calls and functions which call other functions, which won't happen in my library.
<br />This approach is not only faster ( maybe unnecessarily ) but also simpler (at least for me)
<br />
<br />The idea of the library is to cover all NES specifics, while leaving the user only the need to code the game logic in C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Wed Feb 18, 2009 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You should take a look at HuC (and the source). It's a small C compile for PCE (which has a 65x variant). All the functions are written in ASM in the Clib (library).  It has a "pragma fastcall" system for setting up how the arguments are going to be passed to the function in the ASM side.
<br />
<br /> An example on the C side:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/*<br />&nbsp;* sgx_vreg&#40; char reg &#41;<br />&nbsp;* sgx_vreg&#40; char reg, int data &#41;<br />&nbsp;*/<br /><br />#pragma fastcall sgx_vreg&#40; byte acc &#41;;<br />#pragma fastcall sgx_vreg&#40; byte acc, word ax &#41;;<br /><br />/*<br />&nbsp;* sgx_load_map&#40;int vaddr, int *bat_data, char w, char h&#41;<br />&nbsp;*/<br />#pragma fastcall sgx_load_map&#40;word di, farptr bl:si, byte cl, byte ch&#41;<br /><br /></div>
<br />
<br /> The asm library of HuC reserves some ZP registers for argument passing and such. Funny enough, their named ax,bx,cx,dx,si,di,etc even though there's no intel processor (the naming was taken from the official documentation). And the first four having al/ah, bl/bh, etc. Acc is the accumulator reg and if you specify a WORD then it's passed in A:X.
<br />
<br /> As you can see above, you can do argument overloading - having the same function name with different # of calling arguments. On the ASM side, you suffix a label with .1 or .2 - like _sgx_vreg.1. And no suffix means no arguments called.
<br />
<br /> Since the entire back end library is in ASM, tweaks / modifications / optimizations can be made with ease (relatively speaking). It's faster and more optimal than doing "user" functions for creating/extending the library. HuC builds out a rom file and also builds out an assembly and symbol file.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Tue Feb 24, 2009 1:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Petruza, i think you're doing some good work here. A simple CRT for NES is a solid idea!
<br />I'm wondering why you think it's really necessary to recode everything in ASM. To be honest, the basic hardware setup and status reads done in the library aren't going to benefit orders of magnitude from ASM optimization. If your library included arithmetic-intensive algorithms like Bresenham or AABB-collision detection, i could see 6502 being a win, but it seems like you might want to focus on usability first, then tear down to the metal if bottlenecks present themselves.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Tue Feb 24, 2009 7:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks baisoku!
<br />Well, the reason of doing it in assembler is the following: No matter if you gain a lot of efficiency or not so much, but assembler code will always be more efficient than c code translated by cc65.
<br />
<br />Then, doing everything in assembler would be the best option about efficiency. From my point of view, coding the game logic would be hard to do and hard to maintain in the future. But coding simple basic functions, like access to registers, is easy to do in assembler.
<br />
<br />Then in some way there's a compensation of the efficiency lost in the game logic that the library user codes in C, and the efficiency gained in the library written in assembler.
<br />Besides, as the NES hardware doesn't evolve, the library, hopefully, will reach a final version and never have to be touched again.
<br />
<br />You're right, usability should be the main focus first, and the first version in C showed no bottlenecks so far, but to be honest, I felt like learning assembler  and what better than coding the library with it? <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Feb 24, 2009 2:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The reason to not code in asm is that the cost outweighs the benefit in most cases. You spend time doing the asm and you end up with something worse than before. <a href="http://en.wikipedia.org/wiki/Optimization_%28computer_science%29%23When_to_optimize" class="postlink">Premature optimization</a> is a root of evil.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>