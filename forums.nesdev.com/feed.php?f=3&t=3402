<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=3402" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-06-11T09:20:31-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=3402</id>
<entry>
<author><name><![CDATA[ZeroFusion]]></name></author>
<updated>2007-06-10T11:29:47-07:00</updated>
<published>2007-06-10T11:29:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24859#p24859</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24859#p24859"/>
<title type="html"><![CDATA[Sprite Overlapping Problem]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24859#p24859"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />And transparent colors are still transparent even if their respective entry in the palette does not match $3F00.<br /></div><br /><br />Thanks a lot, this seems to explain my problem with conditions: while (pixels0 || pixels1) condition tests only if the pixel is or isn't transparent by checking whether it's pallete entry is dividable by 4, the (colorIndexOffset != bgColorIndex) checkes whether current pixels color index isn't same as the "transparent's" color index.<br /><br />According to what you've just written, the first condition could never possibly give good result - it would never prevent from drawing those pixels whose colorIndex was same as transparent color index (having palette offset dividable by 4) and offset of those pixel's color was not dividable by 4 (ie. there's color entry in the palette on the position not dividable by 4, and the color is still the same as the transparent one).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3351">ZeroFusion</a> — Sun Jun 10, 2007 11:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2007-06-11T09:20:31-07:00</updated>
<published>2007-06-10T07:53:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24851#p24851</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24851#p24851"/>
<title type="html"><![CDATA[Sprite Overlapping Problem]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24851#p24851"><![CDATA[
you shouldn't be matching background colors to anything.  The actual color used anywhere is completely irrelevent as far as transparency goes.<br /><br />"Color 0" on the 4-color CHR is <em>always</em> transparent, regardless of what is in the palette, or what palette the current sprite/bg is using.  That is to say -- opacity can be determined by doing a simple check:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if&#40; pixel &amp; 3 &#41;<br />&#123;<br />  // pixel is opaque<br />&#125;<br />else<br />&#123;<br /> // pixel is transparent<br />&#125;<br /></div><br /><br />Where 'pixel' is the pixel <em>before</em> any palette lookup.<br /><br />Absolutely nothing else matters when determining opacity/transparency.  opaque pixels can still be opaque even if their color matches the BG color.  And transparent colors are still transparent even if their respective entry in the palette does not match $3F00.<br /><br /><br />EDIT<br />---------------------<br /><br />To elaborate on my approach... I actually do a 2-stage rendering process.  While slower overall (since it essentially involves rendering everything twice), it's quite easy to work with, and allows for emulation of the pipelining effect of fetching BG tiles (not really applicable in your case though... since you're doing scanline based rendering)<br /><br />The idea involves having 2 intermediate buffers -- one for BG pixels and one for sprite pixels.  The sprite buffer would be flushed and refilled with <em>sprite pixels only</em> during HBlank on each scanline.  The BG buffer would be filled as tiles are fetched (and the end of the previous scanline, and during rendering) during the scanline.<br /><br />The gimmick here is that these intermediate buffers would only have the palette index of the color to render ($00-$0F for BG, and $00-$1F for sprites ... see below).  Because of this, I can use the high bits of the sprite render buffer for some flags to hold additional properties of the pixel.  For example -- $80 would indicate the sprite pixel has background priority.. and $40 would indicate the pixel belongs to sprite 0 (so you can do sprite-0 hit checks later, when the pixel is rendered).<br /><br />Note that I reserve $00 as a fully transparent pixel in the intermediate buffers.  Therefore, $10 would never be in the sprite intermediate buffer, since $10 would be transparent.<br /><br />Actual factual last-stage rendering would then simply have to examine the appropriate sprite and BG pixels from the intermediate buffers, and choose whichever one takes priority (if any).  This makes priorty checks during rendering pretty simple:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">u8 a, b;<br /><br />a = bg_intermediate_buffer&#91; current_x + fine_h_scroll &#93;;<br />b = spr_intermediate_buffer&#91; current_x &#93;;<br /><br />// this is a neat trick to handle BG/Spr disabling, as well as clipping<br />//  in the left 8-pixel column.  I'll discuss this more later<br />if&#40;current_x &lt; bg_clip&#41;        a = 0;<br />if&#40;current_x &lt; sprite_clip&#41;   b = 0;<br /><br />if&#40;a &amp;&amp; &#40;b &amp; 0x40&#41; &amp;&amp; &#40;current_x != 255&#41;&#41;<br />  ppu_status_2002 |= 0x80;    //  sprite 0 hit!<br /><br />if&#40;b &amp; 0x80&#41;   // low sprite prio<br />&#123;<br />  if&#40;!a&#41;  // if BG pixel transparent<br />    a = b &amp; 0x1F;    // use sprite pixel instead &#40;mask out unwanted flags&#41;<br />&#125;<br />else if&#40;b&#41;    // high sprite prio and opaque sprite pixel<br />  a = b &amp; 0x1F; // use sprite pixel<br /><br />lookup_palette_and_output_pixel&#40; a &#41;;<br /></div><br /><br />A note about my clipping:<br /><br />$2001 can enable/disable clipping of the left 8-pixel column for sprites and BG independently.  It can also disable BG or sprite rendering in full.  All this clipping or disabling does is replace the output BG/sprite pixel with transparency where appropriate (note that this is done before sprite-0 hit checks).  Also note theis does not include the special case where BG and sprite rendering are both disabled -- in which case the PPU enters an "off" state and operates quite differently.<br /><br />I emulate this simply by keeping two variables, labelled above as 'bg_clip' and 'sprite_clip'.  These would either be set to 256 (disabled), 8 (enabled with clip), or 0 (enabled, no clip) during my $2001 write handler.<br /><br />&lt; /rambling&gt;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Jun 10, 2007 7:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ZeroFusion]]></name></author>
<updated>2007-06-10T01:35:09-07:00</updated>
<published>2007-06-10T01:35:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24846#p24846</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24846#p24846"/>
<title type="html"><![CDATA[Sprite Overlapping Problem]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24846#p24846"><![CDATA[
Thanks, tepples.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />Just wanted to note that you can draw the background first, and that it can still be efficient (I'm able to process four sprite pixels at a time, using some bit manipulation to replace only non-transparent pixels appropriately).<br /></div><br /><br />Yeah I thought so, but I was absolutely desperate and could not find any mistake, so I tried to render sprites first as dvdmth suggested.<br /><br />Anyway, I've made a further investigation into Duck Hunt. FceUXD's debug shows me that there aren't any entries in the sprite or image palette that match background color and aren't on address dividable by 4. In my opion, this can only mean that the grass BG tile behind wich the dog's hidden, really has transparent pixels and my palette mirroring has to be wrong somewhere (otherwise the (pixels0 || pixels1) condition would pass).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3351">ZeroFusion</a> — Sun Jun 10, 2007 1:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-06-09T19:58:56-07:00</updated>
<published>2007-06-09T19:58:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24841#p24841</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24841#p24841"/>
<title type="html"><![CDATA[Sprite Overlapping Problem]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24841#p24841"><![CDATA[
In my NES emulator I draw the background scanline first, then sprites in order. For each pixel I have an extra flag. When set, it prevents further modification of that pixel. The background clears this flag, and sprite drawing sets it for non-transparent sprite pixels. Sprites that are behind the background set the flag and modify the pixel itself only if it was transparent, causing the correct behavior of forcing the background pixels in <em>front</em> of other sprites after the current one. Just wanted to note that you can draw the background first, and that it can still be efficient (I'm able to process four sprite pixels at a time, using some bit manipulation to replace only non-transparent pixels appropriately).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Jun 09, 2007 7:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-06-09T16:48:21-07:00</updated>
<published>2007-06-09T16:48:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24836#p24836</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24836#p24836"/>
<title type="html"><![CDATA[Sprite Overlapping Problem]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24836#p24836"><![CDATA[
<div class="quotetitle">ZeroFusion wrote:</div><div class="quotecontent"><br />And I would like to ask one more question: which sprites count to the total of 8 per scanline? Do I have to count every sprite, that spans current scanline, or just those sprites where at least one of the (non-transparent?) pixels is on the current scanline?<br /></div><br />There are 8 sprite sliver registers in the PPU. In order for the PPU to determine that there are no nontransparent pixels in an 8x1 pixel sprite sliver, it still has to fetch that sprite sliver from CHR memory. So yes, you count all sprites that span this scanline.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jun 09, 2007 4:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ZeroFusion]]></name></author>
<updated>2007-06-09T14:42:18-07:00</updated>
<published>2007-06-09T14:42:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24831#p24831</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24831#p24831"/>
<title type="html"><![CDATA[Sprite Overlapping Problem]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24831#p24831"><![CDATA[
Thanks very much, dvdmth, I tried what you suggested, but with no luck. I tried to solve it whole afternoon a now I found out that my emulator behaves very strangely: <br /><br />After drawing all apropriate sprites on current scanline, I do this to determine the color of current BG pixel:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        if &#40;!&#40;pixels0 || pixels1&#41;&#41; &#123;<br />          colorIndex = ppu.readMemory&#40;0x3f00&#41;;<br />        &#125; else &#123;<br />          colorIndex = ppu.readMemory&#40;0x3f00 + &#40;pixels32 | &#40;&#40;&#40;pixels1 &amp; pixelTileOffset&#41; &gt;&gt; &#40;7 - j&#41;&#41; &lt;&lt; 1&#41; | &#40;&#40;pixels0 &amp; pixelTileOffset&#41; &gt;&gt; &#40;7 - j&#41;&#41;&#41;&#41;;<br />        &#125;<br /></div><br /><br />So far it seems no problem to me. Then I tried to draw all BG pixels where there was no foreground pixel and (there wasn't background pixel or the current color wasn't the transparent one) - just like you suggested. I looked like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        if &#40;!frontSprites&#91;i * 8 + j&#93; &amp;&amp; &#40;!backSprites&#91;i * 8 + j&#93; || &#40;pixels0 || pixels1&#41;&#41;&#41; &#123;<br />          SDL_LockSurface&#40;ppu.scanline&#41;;<br />            putPixel&#40;ppu.scanline, i * 8 + j, 0, SDL_MapRGB&#40;ppu.scanline-&gt;format, NES_PALETTE&#91;colorIndex&#93;.r, NES_PALETTE&#91;colorIndex&#93;.g, NES_PALETTE&#91;colorIndex&#93;.b&#41;&#41;;<br />          SDL_UnlockSurface&#40;ppu.scanline&#41;;<br />        &#125;<br /></div><br /><br />The funny thing is (and I don't know why it behaves this way) that only solution that worked for me was to exchange the condition when to draw BG pixel like this (where bgColorIndex = ppu.readMemory[0x3f00]):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        if &#40;!frontSprites&#91;i * 8 + j&#93; &amp;&amp; &#40;!backSprites&#91;i * 8 + j&#93; || &#40;colorIndex != bgColorIndex&#41;&#41;&#41; &#123;<br />          SDL_LockSurface&#40;ppu.scanline&#41;;<br />            putPixel&#40;ppu.scanline, i * 8 + j, 0, SDL_MapRGB&#40;ppu.scanline-&gt;format, NES_PALETTE&#91;colorIndex&#93;.r, NES_PALETTE&#91;colorIndex&#93;.g, NES_PALETTE&#91;colorIndex&#93;.b&#41;&#41;;<br />          SDL_UnlockSurface&#40;ppu.scanline&#41;;<br />        &#125;<br /></div><br /><br />My palette mirroring seems to be working correctly, so I don't understand why if-and-only-if operation (pixels0 || pixels1) &lt;=&gt; (colorIndex != bgColorIndex) fails  <img src="http://forums.nesdev.com/images/smilies/icon_question.gif" alt=":?:" title="Question" /><br /><br />EDIT: I forgot to say that between code 1 and code 2, there're NO addtional lines in my emulator source (ie. there's absolutely no change of pixels0, pixels1 or colorIndex being changed). Really strange<br /><br />And I would like to ask one more question: which sprites count to the total of 8 per scanline? Do I have to count every sprite, that spans current scanline, or just those sprites where at least one of the (non-transparent?) pixels is on the current scanline?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3351">ZeroFusion</a> — Sat Jun 09, 2007 2:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[dvdmth]]></name></author>
<updated>2007-06-09T09:49:18-07:00</updated>
<published>2007-06-09T09:49:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24814#p24814</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24814#p24814"/>
<title type="html"><![CDATA[Sprite Overlapping Problem]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24814#p24814"><![CDATA[
I suggest drawing sprites first, then the background second.<br /><br />When drawing sprites, be sure to draw only the first eight sprites that exist on the scanline.  Also, sprite 0 has highest priority and should be drawn over top of all other sprites.  Sprite 63 has lowest priority.  Even if sprite 0 is background and sprite 1 is foreground, sprite 0 will still cover sprite 1.<br /><br />When drawing the background, draw only where a foreground sprite pixel doesn't already exist.  Background sprites should be covered only by non-transparent background pixels.<br /><br />Sprite vs. sprite priority MUST be done before sprite vs. background priority.  Suppose sprite 0 is background, sprite 1 is foreground, and the two overlap at a point where the background is not transparent.  Because sprite 0 has priority over sprite 1, it will be drawn over top of sprite 1.  However, since sprite 0 is a background sprite, it will be covered by the background, causing the background to be visible at that location.  (This "priority quirk" causes some graphical glitches in certain games, by the way.  Other games take advantage of it, however, so you have to emulate it.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=360">dvdmth</a> — Sat Jun 09, 2007 9:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ZeroFusion]]></name></author>
<updated>2007-06-09T08:33:09-07:00</updated>
<published>2007-06-09T08:33:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24810#p24810</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24810#p24810"/>
<title type="html"><![CDATA[Sprite Overlapping Problem]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3402&amp;p=24810#p24810"><![CDATA[
Hi, I'm trying to get my NES emulator to work, but I found big problem. In Duck Hunt, everything seems all right until the duck flies out. When it hides behind the tree on the left or the bushes on the right, it's weirdly clipped. Also, when the dog laughs out loud on me for having missed the duck, the grass behind which he is is NOT transparent (as it should be). See the screenshot:<br /><br /><img src="http://img167.imageshack.us/img167/4480/dh2ko1.gif" alt="Image" /><br /><br />I'm using per scanline engine (I know it's less accurate than per pixel engine, but just right now, I need at least some of the mapper 0 games working and I can switch to per pixel engine later).<br /><br />Here's what do I do during drawing a scanline:<br /><br />1. Draw any pixels of the background tiles being on the current scanline (non-transparent and transparent). I keep a flag of which pixel is transparent and which is not.<br /><br />2. Draw non-transparant sprite pixels on the current scanline (from sprite 0 to sprite 63):<br />a) If the sprite is in the foreground, i simply draw it's pixels<br />b) If the sprite is in the background, i draw all it's pixels where BG is transparent<br />Anytime I draw a sprite pixel, I set appropriate flag that background is no longer transparent there.<br /><br />Here's the code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">            if &#40;&#40;colorAddressOffset &amp; 0x0003&#41; &amp;&amp; &#40;&#40;!&#40;ppu.sprRAM&#91;k+2&#93; &amp; 0x20&#41;&#41; || &#40;transparencyMap&#91;ppu.sprRAM&#91;k + 3&#93; + j&#93;&#41;&#41;&#41; &#123; // Not transparent<br />              colorIndex = ppu.readMemory&#40;0x3f10 + colorAddressOffset&#41;;<br />              SDL_LockSurface&#40;ppu.scanline&#41;;<br />                putPixel&#40;ppu.scanline, ppu.sprRAM&#91;k + 3&#93; + j, 0, SDL_MapRGB&#40;ppu.scanline-&gt;format, NES_PALETTE&#91;colorIndex&#93;.r, NES_PALETTE&#91;colorIndex&#93;.g, NES_PALETTE&#91;colorIndex&#93;.b&#41;&#41;;<br />              SDL_UnlockSurface&#40;ppu.scanline&#41;;<br />              transparencyMap&#91;ppu.sprRAM&#91;k + 3&#93; + j&#93; = false;<br />            &#125;             <br /></div><br /><br />Can anyone tell me what do I do wrong? I want to implement scrolling in my emulator, but no sooner than the sprites are drawn correctly.<br /><br />Thanks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3351">ZeroFusion</a> — Sat Jun 09, 2007 8:33 am</p><hr />
]]></content>
</entry>
</feed>