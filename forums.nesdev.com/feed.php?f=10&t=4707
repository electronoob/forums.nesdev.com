<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=4707" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-01-09T18:46:22-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=4707</id>
<entry>
<author><name><![CDATA[UncleSporky]]></name></author>
<updated>2009-01-09T18:46:22-07:00</updated>
<published>2009-01-09T18:46:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41657#p41657</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41657#p41657"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41657#p41657"><![CDATA[
<div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent"><br />Great idea for a thread.  This thread should be stickied.  The first few posts especially will help first-time newbies get an idea of what they need to do.<br /></div><br />Well I don't know if it's exactly beginner material, reading that to-do list without quite a bit of programming and 6502 knowledge makes it sound like nonsense.  But if I elaborated more and cleaned it up it might be a good tutorial.  The whole point is, once you know what things are, how do you accomplish something?<br /><br />Most of it I just got straight from NES101 which is excellent but technical for a new person.  It takes a little knowledge to realize it's a quick hack way to set up a little demo, like how you wouldn't <em>really</em> just read and deal with keypresses one at a time, or write a nametable once and leave it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3438">UncleSporky</a> — Fri Jan 09, 2009 6:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2009-01-09T17:50:08-07:00</updated>
<published>2009-01-09T17:50:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41656#p41656</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41656#p41656"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41656#p41656"><![CDATA[
Great idea for a thread.  This thread should be stickied.  The first few posts especially will help first-time newbies get an idea of what they need to do.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Fri Jan 09, 2009 5:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-09T04:06:04-07:00</updated>
<published>2009-01-09T04:06:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41624#p41624</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41624#p41624"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41624#p41624"><![CDATA[
Oh of couse I don't mind that you use my idea. And it's really just an improvement of your idea, not really my idea.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />But yeah, my game really needs a variable NMI routine. I have 2D cutscenes, polygonal cutscenes, full screen menus, action-RPG platforming, the title screen, menus on the title screen, and probably more that I'm not thinking of. That can't be handled with the same code.<br /></div><br />Mine does't for now. <img src="http://forums.nesdev.com/images/smilies/icon_cool.gif" alt="8)" title="Cool" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Jan 09, 2009 4:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-01-09T03:56:39-07:00</updated>
<published>2009-01-09T03:56:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41623#p41623</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41623#p41623"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41623#p41623"><![CDATA[
Oh yes, your idea of doing "jsr $xxxx" in RAM is actually a lot better. That way, you'd save cycles, and it would prevent the whole updating half of the address then interrupt problem. I think I might switch to this method (you don't mind do you, it being mostly your idea?).<br /><br />But yeah, my game really needs a variable NMI routine. I have 2D cutscenes, polygonal cutscenes, full screen menus, action-RPG platforming, the title screen, menus on the title screen, and probably more that I'm not thinking of. That can't be handled with the same code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri Jan 09, 2009 3:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-09T03:25:35-07:00</updated>
<published>2009-01-09T03:25:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41619#p41619</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41619#p41619"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41619#p41619"><![CDATA[
Celius' trick is interesting, but again this is only needed for really big projects with disconnected engines.<br /><br />And it may become more optimised to use a jsr table in RAM rather than a jmp indirect table in ROM. The only inconvenient is that each entry is 3 bytes longs ($20 plus two for the adress) but it will execute faster. Also you can replace the first jsr per a rti ($20 by $40) so that it disables NMI alltogether when changing the table itself (you don't want a NMI to happen when you changed the low byte but not the high byte or something like that).<br />This method should also be good if more than one people are working on the same project, and use disconnected engines.<br /><br />Personally I prefer to stuck with the standard method (ROM pointer to a ROM routine that is fixed) as long as it doesn't cause problems to me. But yeah the day where I write a game that has one engine that needs special NMI like Battletoads, and some part who are just normal (no tricky tricks) I'd definitely want to use disconnected NMI routines for each cases.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Jan 09, 2009 3:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2009-01-08T22:32:25-07:00</updated>
<published>2009-01-08T22:32:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41602#p41602</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41602#p41602"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41602#p41602"><![CDATA[
The only thing that I have to add is if you use a mapper, don't forget to initialize it properly.  Even if you use CHR-RAM your banks must be set properly.  I had this issue recently with an MMC3 board.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Thu Jan 08, 2009 10:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-01-08T21:25:05-07:00</updated>
<published>2009-01-08T21:25:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41588#p41588</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41588#p41588"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41588#p41588"><![CDATA[
My NMI is actually set up like this:<br /><br />NMI:<br /> jmp ($00)<br /> jmp ($02)<br /> jmp ($04)<br /> ....<br /> jmp ($1E)<br /> lda #NMI(Low)<br /> sta $20<br /> lda #NMI(High)<br /> sta $21<br /> rti<br /><br />Return:<br /> clc<br /> lda $20<br /> adc #3<br /> sta $20<br /> jmp ($20)<br /><br />So that I have a list of 16 routines that I can jump to in the NMI. In my endless loop I place different addresses in this list to jump to different places. And anywhere I jump has to end with "jmp Return". At the "Return" label, it jumps to the next "JMP ($xx)" instruction. The reason I have this system is so I can just tell it to "update a column of tiles" or "update a row of attributes", or even "update a column of tiles then update a row of tiles". So there are different "slots" to stick routine addresses in.<br /><br />Oh, and about the NMI and endless loop relationship, I had this same problem a while back. What I think you'll want to do is make sure that you have flags which indicate whether or not the NMI is ready to read a calculation. So for example, a routine in the NMI might take a buffer of tiles to draw as a column, and you have to make sure that there's a flag that indicates whether or not it's fully written to. There are still some things that I'm unsure of though. What if your loop gets interrupted, and the PPU buffer isn't ready to be updated, but then your loop loops again, and it scrolls the screen over 8 pixels, and then when it gets interrupted, it is ready, but didn't get the chance to update the previous column? This = really really bad. I don't know how you'd prevent that besides slowing your frame rate down to exactly 30 FPS when it takes a bit longer than 1 frame to execute the loop.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Thu Jan 08, 2009 9:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-01-08T21:10:47-07:00</updated>
<published>2009-01-08T21:10:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41584#p41584</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41584#p41584"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41584#p41584"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />This is definitely true for very complex games with disconnected engines, but not for an average game. You can have differents title screen, options screen, gameplay screen, and so on, but have all of them fill the same buffer to update their data to the screen, and the same NMI engine which will empty the buffer to write to $2007.<br /></div><br />You are right, this is possible. In fact, this backs up the idea that there should be systems for everything, and what you said is possible if you have the same video system active across the whole program.<br /><br />I can still see what I described earlier being used, like you said, in complex scenarios. That would probably be the case when video tricks are used and things like that, that are not valid across the whole program.<br /><br /><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent"><br />One thing I'm not too clear on yet is the balance between a main loop and NMI.  I know that some simple games and many demos have an empty loop and do everything in NMI, and others hardly use NMI at all.  What seems to be most common and natural?  Should I stuff NMI until it just starts taking too long?  I have a hard time conceptualizing two threads of execution intersecting.<br /></div><br />Having everything in the main loop or everything in the NMI has the disadvantage I mentioned earlier: when the frame calculations take too long, everything is delayed (even music), which may cause a bad impression on the player.<br /><br />The ideal balance is to do frame calculations in the main loop, and PPU and sound updates in the NMI. Video and sound code must use a predictable amount of time, so you just know they won't take too long. The other "thread", on the other hand, can vary a lot depending specially on the number of active objects. So, if that one "thread" ends up taking to long, the other one can still execute as planned. Of course you will not want to update the video when frames are incomplete, but audio is something you should.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I know they aren't simultaneous, but are there ever issues with the main loop being halfway through a calculation that NMI needs?<br /></div><br />Yes, and that's why the main loop should set a flag when it's done with all the calculations, so that the NMI routine knows when everything is OK or if it should update only what's critical and independent from the main loop calculations (such as the playing music or the ticking of a clock).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Jan 08, 2009 9:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[UncleSporky]]></name></author>
<updated>2009-01-08T20:43:05-07:00</updated>
<published>2009-01-08T20:43:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41580#p41580</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41580#p41580"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41580#p41580"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Yeah you pretty much got it. Also a buffer is needed to have buffered writes (and possibly reads) to $2007 during VBlank. A buffered palette is aslo necessary.<br /></div><br />Ah, so a similar thing to the sprite data?  Except you're talking a few kb of info...how is this usually done?  I had only thought of decoding level data right out of ROM and writing it in when necessary.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />There is one thing that is rarely discussed for simple programs, but are essential for actual games: You must have some kind of module handler. The reason for that is mainly the hardcoded NMI vector. In different parts of the game (title screen, options screen, gameplay screen, and so on), different operations are executed during VBlank, which would require different NMI routines.<br /><br />It's true that you can use the have the NMI simply increment a variable, and whatever program module active at the time would use this flag to detect VBlanks. However, this works only for programs that NEVER or VERY RARELY have their frame calculations last longer than a frame. In complex games that might lag under stressful conditions (such as multi-scrollers with tons of active entities) and there are operations that must be performed at 60Hz even in such situations (such as the sound engine), there must be different NMI routines.<br /><br />One solution to this problem is having the NMI vector point to RAM, or make it a JMP ($XXXX) instruction where $XXXX is RAM, so that the actual address of the NMI routine can be changed depending on the active module.<br /><br />The module handler shouldn't be a complex thing, just some code capable of starting a new module by fetching its starting address from a table of modules. Modules themselves would should set their respective NMI routines as necessary.<br /><br />This scheme makes it possible to have an array of main loops and NMI routines (essential for an actual game), while the first impression that we get from reading the documents is that there can be only one of each.<br /></div><br />Very interesting, I love that idea of NMI just being a jump to a variable routine.  Alternatively there's just good old case selection based on game state which you'd probably have to do anyway to set the NMI jump...but it's better to set that outside of NMI to save precious cycles.<br /><br />One thing I'm not too clear on yet is the balance between a main loop and NMI.  I know that some simple games and many demos have an empty loop and do everything in NMI, and others hardly use NMI at all.  What seems to be most common and natural?  Should I stuff NMI until it just starts taking too long?  I have a hard time conceptualizing two threads of execution intersecting.  I know they aren't simultaneous, but are there ever issues with the main loop being halfway through a calculation that NMI needs?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3438">UncleSporky</a> — Thu Jan 08, 2009 8:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-08T15:01:22-07:00</updated>
<published>2009-01-08T15:01:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41537#p41537</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41537#p41537"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41537#p41537"><![CDATA[
Yeah I mostly agree with tokumaru, but...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There is one thing that is rarely discussed for simple programs, but are essential for actual games: You must have some kind of module handler. The reason for that is mainly the hardcoded NMI vector. In different parts of the game (title screen, options screen, gameplay screen, and so on), different operations are executed during VBlank, which would require different NMI routines.<br /></div><br />This is definitely true for very complex games with disconnected engines, but not for an average game. You can have differents title screen, options screen, gameplay screen, and so on, but have all of them fill the same buffer to update their data to the screen, and the same NMI engine which will empty the buffer to write to $2007. I do it that way and it works very well I have to say.<br /><br />And yes it's much better to come with a sound engine and so on, but I've seen some early Squaresoft games (Rad Racer, 3D World Runner, Final Fantasy) that directly write to sound registers from the main code to do their sound effects, and that reserves some location in OAM for fixed sprites, tough I agree it's really not a good idea (exept for sprite zero hits of course).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Jan 08, 2009 3:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-01-08T13:18:17-07:00</updated>
<published>2009-01-08T13:18:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41516#p41516</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41516#p41516"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41516#p41516"><![CDATA[
There is one thing that is rarely discussed for simple programs, but are essential for actual games: You must have some kind of module handler. The reason for that is mainly the hardcoded NMI vector. In different parts of the game (title screen, options screen, gameplay screen, and so on), different operations are executed during VBlank, which would require different NMI routines.<br /><br />It's true that you can use the have the NMI simply increment a variable, and whatever program module active at the time would use this flag to detect VBlanks. However, this works only for programs that NEVER or VERY RARELY have their frame calculations last longer than a frame. In complex games that might lag under stressful conditions (such as multi-scrollers with tons of active entities) and there are operations that must be performed at 60Hz even in such situations (such as the sound engine), there must be different NMI routines.<br /><br />One solution to this problem is having the NMI vector point to RAM, or make it a JMP ($XXXX) instruction where $XXXX is RAM, so that the actual address of the NMI routine can be changed depending on the active module.<br /><br />The module handler shouldn't be a complex thing, just some code capable of starting a new module by fetching its starting address from a table of modules. Modules themselves would should set their respective NMI routines as necessary.<br /><br />This scheme makes it possible to have an array of main loops and NMI routines (essential for an actual game), while the first impression that we get from reading the documents is that there can be only one of each.<br /><br />EDIT: There is another thing I forgot to mention: You can't keep interfacing with the hardware (sound, video, controllers, etc) directly everywhere in your program. You have to come up with engines that handle those things, and your program modules only interface with those engines.<br /><br />I see this is pretty unanimous when it comes to sound, because it seems everyone is used to sound engines, and to telling them what song or effect to play, instead of messing with the registers all around the program. For video, however, I'm not so sure. Everyone should have routines to draw metatiles to the background, to render metasprites to the OAM, to manipulate a "virtual palette" (for fading or flashing effects, for example), yet, we see many people writing directly to palette RAM whenever they want to change it, hardcoding sprites to OAM slots, and other atrocious things (atrocious from a software engineering point of view).<br /><br />What I mean is that everyone should have their libraries for this kind of thing. They can even be reused across projects, provided that the projects share enough characteristics in order to benefit from the same set of sub-systems. These sub-systems could even be seen as "a console inside a console". Think about it: The NES has its features, limitations and interfacing methods. What you do is look at a game design idea and come up with a set of features limitations and interfacing methods that are enough to make that idea tick and can be implemented as a subset of the console's own features, limitations and interfacing methods.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Jan 08, 2009 1:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-08T07:47:45-07:00</updated>
<published>2009-01-08T07:47:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41505#p41505</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41505#p41505"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41505#p41505"><![CDATA[
Yeah you pretty much got it. Also a buffer is needed to have buffered writes (and possibly reads) to $2007 during VBlank. A buffered palette is aslo necessary. And it's best to come with a full sound engine which is able to play music and sound effects.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Jan 08, 2009 7:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[UncleSporky]]></name></author>
<updated>2009-01-08T07:53:46-07:00</updated>
<published>2009-01-08T07:41:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41504#p41504</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41504#p41504"/>
<title type="html"><![CDATA[The essentials of a NES program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4707&amp;p=41504#p41504"><![CDATA[
I wanted to get some of this straight and list all the essential things that will probably be common to every NES program.  There's a lot of good information at nesdev about the 6502 and the NES in particular, but not a lot of practical data for new programs from what I've seen.  This forum is the best place for practical info but sometimes it takes some digging!<br /><br />Anyway, if you want to get picky I'm sure that not all of these things are absolutely necessary, but what I'm looking for is stuff that makes good sense in most situations, such that you could make a pretty good shell of a program from it.  A starting template.  This is all going to be obvious to the regulars but I thought it might be helpful to lay it out for myself and for others starting out.<br /><br /> - First off you're going to want to use the reset interrupt to initialize everything.  The wiki includes good init code for this.  This includes ignoring IRQs, disabling decimal mode, waiting two vblanks, resetting the stack pointer, and resetting all RAM to 0.<br /><br /> - You will want to initialize your graphics, input and sound in some way; this depends on the type of program but you may as well set up the jsrs and labels.  Don't forget to turn off the display and disable VBLANK before that first write.<br /><br /> - Similarly you'll have subroutines in a main loop for graphics, input and sound.  The main loop will be set up to repeat infinitely.<br /><br /> - At the end of your PRG-ROM, pad out to $FFFA and store the pointers to vblank, reset and irq.<br /><br /> - Include your CHR-ROM seperately after PRG-ROM, and make sure you have a standard iNES header.<br /><br /> - You will want to declare at least two general use temporary variables on the zero page.  Additionally you'll probably want an additional two bytes for a temporary address to use as a pointer.  This is the bare minimum.<br /><br /> - NMI will probably be used in some way.  Have an incrementing variable for timekeeping, and if you plan to do anything with the registers, set up three extra temp bytes on the zero page for backing them up.<br /><br /> - You will want a whole page of RAM for DMA sprite transfer.  Might as well make this page $0200.  Initialize every byte to $FF to make sure nothing is visible.<br /><br /> - A system for dealing with more than 8 sprites per scanline is not manditory but probable, so consider how you will accomplish this.<br /><br /> - Your input handler will probably not deal with each key "on the fly."  Declare a variable to store the state of every button and another to store the previous state of every button.  In your handler, strobe the joypad and read the data out into your variable, then deal with each button from there.<br /><br /> - This is more general, but it is good game coding practice to have an object system for organizing your sprites and their movement logic.  Height and width in tiles and which tiles to use will be needed for defining objects.  X and Y position, velocity, and a number of flags are some of the standard bits of information you will need for active instances of those objects.<br /><br />Did I get any of that wrong?  Did I miss anything that should be common to most programs?  Something might be said of nametables and pattern tables, and there is more general info that you could include depending on if the game is a platformer, uses scrolling etc.<br /><br />Just looking for good, time-saving general advice.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3438">UncleSporky</a> — Thu Jan 08, 2009 7:41 am</p><hr />
]]></content>
</entry>
</feed>