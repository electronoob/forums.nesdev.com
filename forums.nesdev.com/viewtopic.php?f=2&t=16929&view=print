<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sprite data caching or reuse?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sprite data caching or reuse?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16929">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16929</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 10:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, after some profiling I've realized that a lot of my precious CPU time is being spent on calculating sprites. Not just the reads and writes, but also all the meta stuff, picking the right palette, doing offsets to read out animation data, flipping the sprite if it's turned around, etc. I got a neat animation system that I'm very happy with, but it's a little costy.<br /><br />I've been optimizing all of this to be as fast and clever as possible, but the one thing that really irks me is that <strong>most object's sprites end up being exactly the same each frame</strong>, so I'm constantly recalculating the same results over and over.<br /><br />So I've been trying to implement some sort of caching mechanism, so that I don't have to recalculate everything if nothing has changed. I usually know when things have changed (changed object state, scrolled the background, etc) so I know exactly when to reuse the cache and when to refresh it.<br /><br />But building an efficient and lightweight cache has proved difficult.<br /><br />The simplest and fastest way would be to simply reuse my DMA's Sprite RAM, and not clear it every frame. Maybe adjusting some x and y positions if the game has scrolled. <strong><span style="color: #FF5522">But, all the sprite flickering techniques I know involves scrambling the order of the sprites every frame, which means no object ever gets the same Sprite RAM position twice in a row. This ruins everything.</span></strong><br /><br />Next up I tried allocating some more RAM as a temporary buffer, so that objects could put their sprite data there, and then it could be copy-scrambled over to the real Sprite RAM right before the DMA. <strong><span style="color: #FF5522">But, to allow for all 64 sprites that's 256 bytes of RAM down the drain. Ouch. Not sure I want to spend that much memory.</span></strong><br /><br />According to the wiki, a &quot;simple OAM cycling technique&quot; can be implemented by using a write to OAMADDR before the DMA transfer. <strong><span style="color: #FF5522">However, due to OAMADDR writes also having a &quot;corruption&quot; effect this technique is not recommended. Also, if the technique works like how I think it does, the OAM cycling would be very crude and might leave objects invisible for several frames.</span></strong><br /><br />So, is my quest impossible, or are there some other ideas or techniques?  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pubby</b> [ Fri Jan 12, 2018 11:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Post some code? It's surprising to me that sprites would be so expensive.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But, all the sprite flickering techniques I know involves scrambling the order of the sprites every frame</div><br />I've never implemented flickering, but I thought you could write OAMADDR before OAMDMA to do the shuffle on the DMA. I don't think you have to reorder the sprites in CPU RAM, but maybe I'm wrong.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Fri Jan 12, 2018 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Metasprite rendering continues to be the bottleneck for me, too. There are some improvements I could make, but the biggest I got so far was to simply move to 8x16 sprites, halving the number of iterations the meta sprite drawing routines must do. That's been good enough for now and has given me the performance I want for the game I'm building.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 11:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pubby wrote:</div><div class="quotecontent">Post some code? It's surprising to me that sprites would be so expensive.</div><br />I'll write up an explanation, it's a tad complex so it might take some minutes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I've never implemented flickering, but I thought you could write OAMADDR before OAMDMA to do the shuffle on the DMA. I don't think you have to reorder the sprites in CPU RAM, but maybe I'm wrong.</div><br /><br />The wiki recommends against this technique, but maybe it's too conservative? Does anybody know the ups and downs in more detail?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jan 12, 2018 11:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But, all the sprite flickering techniques I know involves scrambling the order of the sprites every frame, which means no object ever gets the same Sprite RAM position twice in a row. This ruins everything.</div><br />Well, as usual in computing and in particular in retro-computing, you have to sacrifice thigns in order to get the desired features. You should just have two OAM pages, one where the sprites are not shuffled, which is your cache, and one where you shuffle the sprites from the cache so they're re-ordered and flickers properly when there's more than 8 per line instead of disappearing. That sounds rather simple to do.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ouch. Not sure I want to spend that much memory.</div><br />Well, that's the price for your sprite caching system. You can save memory by caching only some of the 4 parameters if RAM usage is really this much a problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Jan 12, 2018 11:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sprite updates are indeed pretty expensive. Some switch to 8x16 sprites purely so less time is spent rendering an object. <br /><br />If your game has larger objects, having a separate render routine when you know the object is entirely onscreen can skip a lot of extra logic for checking offscreen per sprite. (Alternatively... don't check for offscreen per sprite.)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro DMSNORMALBODY<br />&nbsp; &nbsp;;35 bytes<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y;Y position<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc &lt;reserved2<br />&nbsp; &nbsp;sta OAM,x<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y;X Position<br />&nbsp; &nbsp;;clc<br />&nbsp; &nbsp;adc &lt;reserved0<br />&nbsp; &nbsp;sta OAM+3,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;iny<br /><br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y<br />&nbsp; &nbsp;;clc<br />&nbsp; &nbsp;adc &lt;reserved7;This should guarantee a clear carry<br />&nbsp; &nbsp;sta OAM+1,x<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y<br />&nbsp; &nbsp;sta OAM+2,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;;clc;guaranteed clear above<br />&nbsp; &nbsp;adc #4<br />&nbsp; &nbsp;tax;Carry not guaranteed anything after that add since oampos wraps<br />&nbsp; &nbsp;.endm<br /></div><br />Reserved0 is low X, reserved2 is low Y, reserved7 is a tile offset. You can totally get rid of that if the tiles used to render your object don't &quot;move&quot; in CHR. <br /><br />Checking offscreen is not much harder, but you lose the guarantee of the clear carry.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">dms.partial.o.loop:;{<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y;Y position<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc &lt;reserved2<br />&nbsp; &nbsp;sta OAM,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;reserved3<br />&nbsp; &nbsp;adc #$00<br />&nbsp; &nbsp;bne dms.partial.o.yoffscreen<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y;X Position<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc &lt;reserved0<br />&nbsp; &nbsp;sta OAM+3,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;reserved1<br />&nbsp; &nbsp;adc #$00<br />&nbsp; &nbsp;bne dms.partial.o.skipsprite.twoiny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;iny<br /><br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc &lt;reserved7<br />&nbsp; &nbsp;sta OAM+1,x<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y<br />&nbsp; &nbsp;and #%11111100;Clear out the palette<br />&nbsp; &nbsp;ora &lt;reserved8<br />&nbsp; &nbsp;sta OAM+2,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;;clc;guaranteed clear above<br />&nbsp; &nbsp;adc #4<br />&nbsp; &nbsp;tax;Carry not guaranteed anything after that add since oampos wraps<br /><br />&nbsp; &nbsp;dec &lt;reserved6<br />&nbsp; &nbsp;bne dms.partial.o.loop<br />dms.partial.o.end:<br />&nbsp; &nbsp;rts<br />dms.partial.o.yoffscreen:<br />&nbsp; &nbsp;iny;move to next OAM entry<br />dms.partial.o.skipsprite.twoiny:<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$FF<br />&nbsp; &nbsp;sta OAM,x;Set it offscreen<br /><br />&nbsp; &nbsp;;Just repeat what we'd branch to and save a branch<br />&nbsp; &nbsp;dec &lt;reserved6<br />&nbsp; &nbsp;bne dms.partial.o.loop<br />&nbsp; &nbsp;rts;}<br /></div><br />Reserved1 is high X, reserved 3 is high Y. Reserved6 is how many sprites are left.<br /><br />But I made this note as an optimization (untested, so I'm not including it with the code I know works)<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Indivisible's rolled drawmetasprite loop can probably be made faster. They end with <br /><br />	dec &lt;reserved6<br />	bne dms.o.loop<br />	<br />But:<br />	cpy &lt;reserved6; (or some other zero page variable, since reserved6 can't really be changed<br />	bne dms.o.loop; without making the other code slower)<br />	<br />cpy is 2 cycles faster than dec, but it also ensures a clear carry when the loop begins again. <br />	<br />Basically the setup code should just add &lt;reserved6 *4 to y and store it somewhere. I imagine the reason I didn't is because reserved6 is technically variable (due to the greater than 64 sprite stuff), but it wouldn't really affect this if the loop were set up properly.</div><br /><br /><s>I also have a separate subroutine when I want to do &quot;versatile&quot; things like dynamically changing the palette of every sprite in the object.</s><br />Edit: Oh wait, no it's just the one above. That's what the reserved8 thing is. So basically I have a fast and a slow one.<br /><br />Basically I recommend having a different routines for every case. Usually you don't want to do anything advanced, so at least have one for the fastest possible case. (Guaranteed on screen, no dynamic anything.)<br /><br />But post some of your advanced code, maybe we can improve it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 12, 2018 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The use of OAMADDR with values other than zero is heavily discouraged, since that can result in sprite corruption.<br /><br />The best method for caching sprites I can think of is indeed using another 256-bytes for a second OAM shadow, so you can alternate between them every frame and copy data from one to the other if the sprites are known to not have changed.<br /><br />What kind of sprite cycling method are you currently using? Are you willing to change that to accommodate the sprite caching? Maybe you can come up with a solution that swaps individual OAM entries when they need to be kept, and simply overwrites the ones that don't.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 11:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ouch. Not sure I want to spend that much memory.</div><br />Well, that's the price for your sprite caching system. You can save memory by caching only some of the 4 parameters if RAM usage is really this much a problem.</div><br /><br />That's fair enough, and it's probably what I will fall back to if no other secret technique pops up. I've been playing around with doing an &quot;in place&quot; shuffle of the original Sprite RAM so that objects have a new position in the buffer every frame, yet still retain their old values. The shuffling process is fairly expensive though, since you gotta shuffle 256 different values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pubby wrote:</div><div class="quotecontent">Post some code? It's surprising to me that sprites would be so expensive.</div><br /><br />Now, I haven't posted any code in this post. It's not like my code is secret, but I'd much rather explain what it does (and why it's slow) instead of posting a big blob of asm and forcing everybody to decrypt what's going on. Also, I haven't commented it yet  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> <br /><br />Some games like Super Mario Bros 3 has a lot of restrictions on what game objects can exist where, doing tricks like hardcoding the available palettes and CHR banks to the level. So if this is a Goomba+Koopa Troopa level, you simply can't use the Boo or Thwomp enemies or they will look strange and miscolored, and vice versa.<br /><br />I've been working on a system to defeat such restrictions, by dynamically loading and unloading CHR and palettes as they are needed. The way things work, when an ingame object is created, it attempts to grab an 8k sprite CHR page and a palette for itself. I use a lot of techniques to maximize their potential like reusing as much as possible, having optional alternative graphics and color schemes, and even splitting palettes in two (and if it's just utterly impossible to fit in, the object simply despawns before it's seen).<br /><br />But all of this only happens when the object is created, not every frame, so it's not the expensive part. But the point is, any object might end up with any of the CHR pages or any of the palettes. So, while SMB3 can optimize it's Koopa Troopa drawing routine by always refering to palette 2, my system has to do a lookup to see which of the four palettes my object was assigned.<br /><br />Then there is animation data, and some extra goodies I've baked in there like allowing small x/y offsets on the sprites or vflip/hflip flags on individual sprites in the meta-sprite. Despite having so much more stuff than SMB3, my system is still faster due to better coding.<br /><br />Still, I can see the potential for massive gains by reusing those values rather than having to recalculate them every frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 11:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Sprite updates are indeed pretty expensive...</div><br /><br />Thanks for the routines, I'll compare them to my own and see if there are any places I can shave off some cycles.<br /><br />I do indeed have different drawing routines, with varying levels of functionality. Objects, in their initialization routine, pick one that they know will be enough for them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Jan 12, 2018 11:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then there is animation data, and some extra goodies I've baked in there like allowing small x/y offsets on the sprites or vflip/hflip flags on individual sprites in the meta-sprite.</div><br />That shouldn't really affect rendering at all. Whether an individual sprite is flipped or not doesn't matter to the block copy, whether an individual sprite is offset a little doesn't matter to the block copy.<br /><br />Is the issue that you're also trying to save space? I stored every frame twice, once flipped and once not, rather than flipping it at runtime and I don't feel bad about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 11:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">That shouldn't really affect rendering at all. Whether an individual sprite is flipped or not doesn't matter to the block copy, whether an individual sprite is offset a little doesn't matter to the block copy.<br /></div><br /><br />The thing is, I don't block copy my animation data right to the sprite buffer, I do stuff like XOR the global flip flags with the individual flip flags, and add the global x/y coordinate with the sprite's local x/y offset. I also have to fish out the correct palette since it's not hardcoded.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is the issue that you're also trying to save space? I stored every frame twice, once flipped and once not, rather than flipping it at runtime and I don't feel bad about it.</div><br /><br />Huh....I hadn't thought about that. That's genius! It totally saves me the XOR of the flip flags. I could even use a macro, and potentially do it for other things too. Thanks mate!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Jan 12, 2018 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I also have to fish out the correct palette since it's not hardcoded.</div><br />The palette thing is easy, if the object only uses one palette. (Which, if you're dynamically allocating palettes is probably the common case) It's one instruction:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda &#91;reserved4&#93;,y<br />ora SPRpalette<br />sta OAM+2,x<br /></div><br />You store the palette the object wants to SPRpalette before rendering and lose 3 cycles per sprite, oh well.<br /><br />In a case where palette 0 is like... a shared palette (reserved for player one or something, that enemies can also use)... you could maybe get cute with the data and store it shifted right one bit.<br /><br />Now the highest bit is free to use as a flag for that.<br />Essentially:<br />Bit 7: Use Palette 0<br />Bit 6: Flip Sprite Vertically<br />Bit 5: Flip Sprite Horizontally<br />etc.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda &#91;reserved4&#93;,y<br />asl a;Whether to use palette 0 is now in the carry, flip sprite vertically is in bit 7 where OAM expects it, etc.<br />bcs storepalette;If the high bit was set, we use palette zero<br />ora SPRpalette<br />storepalette:<br />sta OAM+2,x<br /></div><br />Admittedly that's still a bit heavy 64 times, but well...<br />Edit: Just to say it, I'm not sure how much help caching sprite data will be in a game that scrolls. But I'll think about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 12, 2018 12:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">The palette thing is easy, if the object only uses one palette. (Which, if you're dynamically allocating palettes is probably the common case) It's one instruction.</div><br /><br />I am saving the palette per sprite per frame, for the entire metasprite, but in hindsight it's just as you say, maybe 90% of all metasprites use only one palette. I'll make a faster drawing routine they can use instead of the full one, that doesn't need to look up the palette byte each time.  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Edit: Just to say it, I'm not sure how much help caching sprite data will be in a game that scrolls. But I'll think about it.</div><br /><br />That's a good point, but I think it could be worked around since scrolling most of the time only happens on one axis even for games with multi-directional scrolling like SMB3. You'd simply have to loop over every 4th byte and do an addition <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> The carry flag will tell you if the sprite is now off-screen.<br /><br />But even if it's not viable, just being able to reuse the pattern and attribute bytes would still be a boon.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Jan 12, 2018 12:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite data caching or reuse?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For each object, do you have a register holding the palette bits?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>