<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What do we need to know to create a NES emulator?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What do we need to know to create a NES emulator?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4696">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4696</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>songuke</b> [ Sun Jan 04, 2009 7:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>What do we need to know to create a NES emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi all, I'm a newbie here and my interest is to create a NES emulator from scratch (just for learning). So what is the basic things to know to create such an emulator? 
<br />
<br />My thinking that is knowledge in 6502 and NES hardware architecture is necessary. I think rendering is not a big problem and the problem is to know all the things in the architecture of NES.
<br />
<br />But can anyone please tell me what is the fundamental principle that lies under the emulator? Let's say, the memory manegement part, the instruction execution part, etc. 
<br />
<br />Thanks in advance.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Jan 04, 2009 10:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we need to know to create a NES emulator?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Making an emulator requires an understanding of the emulated system (in this case, the NES) and of programming for the target platform (in this case, probably Windows or whatever OS you're using).  Emulators do everything that regular video games do... so if you don't know enough of whatever programming language to make a simple game for your platform, an emulator might be a pretty big challenge.
<br />
<br />You don't need to know everything up front, though.  Writing an emu is a great way to fill in the gaps of your knowledge about both PC programming and NES behavior.
<br />
<br />The NES is split into several seperate and distinctly different sections, so you can bite off chunks at a time, rather than working on the whole package at once.  However one of the big challenges for beginning emudevers is that the chunks are pretty large, and you'll have to write a LOT of code before you'll be able to test ANY of it.  You might spend a week writing hundreds of lines of code for your 6502 core, and when you finally fire it up to try it out, it doesn't work and you have no idea why (this happens to everyone their first time)
<br />
<br />Programming skills and experience are really all you need coming into NES emu dev.  There's enough information about the NES floating around so that any capable programmer willing to put in the time can make an emulator.
<br />
<br />Really the only things I can say are:
<br />
<br />1) focus on the CPU first (6502 emulation)
<br />
<br />2) CPU instructions consist of several reads and writes.  Do not read/write from any array directly anywhere in your code.  Hide all reads and writes in a macro or something so that the way your emu does them can be easily changed later.
<br />
<br />3) put in a simplistic memory system (CPU addressing space -- $0000-07FF is RAM, etc).  A very simple way to do this is to just have a 0x10000 byte buffer that you read/write to.  This is very simple and easy to set up and use, so it's good to start out with, however you'll find that it's terribly impractical for a full emulator.  So you'll want to change it later... hence point #2 above.
<br />
<br />4) don't worry so much about interrupts until you have a mostly functioning 6502 core.
<br />
<br />5)  -WRITE A TRACER-  I can't stress this enough.  Just something which makes a text log of each 6502 instruction your emu is running and some other information (like A,X,Y contents, status flags, etc).  It's a lot of additional work, but trying to debug your core is next to impossible unless you can step through each instruction and watch what your core is doing.  It's a 100% guarantee that your 6502 code won't work the first time you run it (or even after the first dozen fixes), and without tracing it to see what it's doing wrong and how, trying to fix it is like looking for a needle in a haystack.
<br />
<br />6)  throw together a simple file loader so that you can load test ROMs and whatnot, but make it easily replacable.
<br />
<br />7)  WRITE A TRACER.  Seriously.  Will save your life.
<br />
<br />8)  I'd recommend starting with test ROMs like the ppu-free version of nestest.nes, which doesn't require <em>any</em> PPU functionality in an emu and puts your CPU through rigorous tests.  It's important to get the CPU working solid first, so that when you add PPU support and stuff, you don't have to worry about whether a graphical glitch is caused by your PPU code  or your CPU code.
<br />
<br />9)  WRITE A TRACER.  Just have to mention it one last time.  You'll never run out of uses for it.  Once you solve all your CPU bugs, it will help track down and fix PPU bugs.  Then APU bugs.  And mapper bugs.  And any other kind of bug in your program.
<br />
<br />
<br />Anyway hope that helps.  Dunno if that's really what you were asking about -- I'm not quite sure what you meant by the "fundamental principle" of an emulator.  I mean I guess the fundamental principle is emulation -- but something tells me that's not the answer you were looking for  XD

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 04, 2009 11:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The fundamental principle of an emulator is that it runs the same sequence of instructions that another machine runs given the same input. Put a tracer in your emulator (as a macro so you can condition it out at compile time), and compare your emulator's trace logs to those from another emulator that has a tracer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sun Jan 04, 2009 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have to agree with Disch, writing some form of Tracer is very important so you can really see what is happening. Otherwise how would you ever know?
<br />
<br />I also agree that your first steps are a simple ROM loader and the CPU core. Lots of bad things will happen when your cpu core is wrong, so there's not much point in trying to emulate graphics or sound or complex mappers until your cpu core is debugged. The NES has a great cpu test rom you can run without any real graphics emulation. That's what I used which helped me catch what I did wrong. 
<br />
<br />I'd also like to throw out there that the NES is probably one of the easiest systems to get started emulating. It's harder to emulate it with high accuracy, but a decent emulator that will run some games isn't that hard.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>albailey</b> [ Mon Jan 05, 2009 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I actually started working on an emulator not too long ago.
<br />
<br />I started with the 6502 CPU.   The problem was, how to test it.  So I worked on a disassembler, which is really just a tracer.    I had my own code which I could compare to the traced output.  It ended up helping a lot.   I ended up breaking the disassembler, but keeping and  enhancing the tracing since I've needed it a lot (like when I messed up my RTI routine to always push the start of a reset as the address).
<br />
<br />For me, the next step is the PPU.   I'm actually breaking the work apart since I've been able to work this long without anything graphical so I know I dont need the entire PPU working from the start.  I'm focusing on background first, then scrolling and mirroring, then sprites, and then supporting input, and someday mappers.     Last will be the APU, and then I'll start adding additional mappers, etc..
<br />
<br /> It helps that I have some very basic NROM code done so I dont need a lot of stuff working right away.
<br />
<br />I can't say i my way is good and I know I'll be bitten later on,  but its a way to see demonstable progress and yes you definitely learn a lot.
<br />
<br />Al

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>