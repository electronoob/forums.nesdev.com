<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=22&amp;t=12180" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-03-13T22:43:33-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=22&amp;t=12180</id>
<entry>
<author><name><![CDATA[mrmmaclean]]></name></author>
<updated>2015-03-13T22:43:33-07:00</updated>
<published>2015-03-13T22:43:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=143005#p143005</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=143005#p143005"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=143005#p143005"><![CDATA[
That's actually quite brilliant, tokumaru. Thanks for your in-depth response and diagram!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6204">mrmmaclean</a> — Fri Mar 13, 2015 10:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-03-12T20:10:38-07:00</updated>
<published>2015-03-12T20:10:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142882#p142882</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142882#p142882"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142882#p142882"><![CDATA[
<div class="quotetitle">mrmmaclean wrote:</div><div class="quotecontent"><br />From reading about tokumaru's raycaster, he gets the distance from precomputed tables and adding and even that doesn't lend itself well to getting a precise x-coordinate...<br /></div><br />Since you mentioned my raycaster, I can tell you how I did it:<br /><br />Like you said, I have a table of pre-computed ray lengths, which are the distances between one block boundary to the next, for each angle. To calculate distances, I start with only a portion of the distance (calculated from the player's position within the block) to find the first boundary, and then I add the whole distance over and over until a solid block is hit.<br /><br />Once I know the orientation of the wall, I find the side of the triangle the exact same thing I did to find the hypotenuse. I have a table of sides for all angles, I use a portion of the side for the first intersection (based on the player's position within the block), and add the full side as many times as I added the full distance. From that I can easily extract the X coordinate of the texture.<br /><br />EDIT: Figure I'd try to illustrate it:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">+----------------+----------------+--X-------------+<br />|                |                | /|             |<br />|                |                |/ |             |<br />|                |                /  |             |<br />|                |               /|  |             |<br />|                |              / |  |             |<br />|                |             /  |  |             |<br />|                |            /   |  |             |<br />+----------------+-----------*----+--|-------------+<br />|                |          /|    |  |             |<br />|                |         / |    |  |             |<br />|                |        /  |    |  |             |<br />|                |    H  /   | 1  |  |             |<br />|                |      /    |    |  |             |<br />|                |     /     |    |  |             |<br />|                |    /      |    |  |             |<br />+----------------+---O-------*----+--*-------------+<br />|                |       S       S|                |<br />|                |                |                |<br />|                |                |                |<br />|                |                |                |<br />|                |                |                |<br />|                |                |                |<br />|                |                |                |<br />+----------------+----------------+----------------+</div><br />Here's a ray starting at the &quot;O&quot;, moving upwards to the right until it hits a wall &quot;X&quot;. &quot;H&quot; is the hypotenuse (ray length), which comes from a table. &quot;S&quot; is the side, which also comes from a table. The other side is always 1 (i.e. a full block). As I extend the hypotenuse, I also extend the side, and you can see that when the ray hits the all at the very top, the side tells me exactly where within that block the wall was hit, and that's where I get the texture's X coordinate from.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Mar 12, 2015 8:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mrmmaclean]]></name></author>
<updated>2015-03-12T16:01:37-07:00</updated>
<published>2015-03-12T16:01:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142872#p142872</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142872#p142872"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142872#p142872"><![CDATA[
Wow, this is pretty impressive considering the hardware!!!<br /><br />Without using trig, how is it that you're able to get the texture x-coordinate for mapping in your demo? Is that even possible without a look-up table?!?!<br />From reading about tokumaru's raycaster, he gets the distance from precomputed tables and adding and even that doesn't lend itself well to getting a precise x-coordinate...<br /><br />If either of you have any input I'd be interested to hear it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6204">mrmmaclean</a> — Thu Mar 12, 2015 4:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[8bitMicroGuy]]></name></author>
<updated>2015-03-08T14:24:44-07:00</updated>
<published>2015-03-08T14:24:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142637#p142637</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142637#p142637"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=142637#p142637"><![CDATA[
Very good! You really pushed up the NES's power. What I'd like to see is enemy sprites for an RPG battle like Orcs and Elves.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6924">8bitMicroGuy</a> — Sun Mar 08, 2015 2:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Alp]]></name></author>
<updated>2015-01-21T18:20:38-07:00</updated>
<published>2015-01-21T18:20:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=139743#p139743</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=139743#p139743"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=139743#p139743"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Animation<br /></div><br /><br />Huh. Interesting!<br /><br />Many first-person dungeon crawlers used a similar method to prevent using up too much processing time. The optimal method was to read map cells from the foreground, towards the background, and set flags, disabling other cells from being tested. Freeing up memory, and speeding up draw time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6715">Alp</a> — Wed Jan 21, 2015 6:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2015-01-08T00:55:17-07:00</updated>
<published>2015-01-08T00:55:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138875#p138875</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138875#p138875"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138875#p138875"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />It's still unclear to me how the textures would be rendered. How to &quot;stamp&quot; the texture without messing up the perspective on walls that are being interpolated?<br /></div><br /><br />I also wondered about this. Assuming you still have strictly vertical walls, you can get the perspective for free for the &quot;Y&quot; axis of the textures. Picture that all of your textures were just walls with horizontal stripes. You would be able to find where these stripes land on each end of the wall, and connect the dots using line drawing. But that only takes care of 1 dimension.<br /><br />This might defeat the purpose of the method tepples suggested, but what if you performed those checks against sub-cells instead of the entire cell (assuming 1 wall is a cell, and each texture slice is 1 subcell)? So you would determine the end points for each color in each texture slice, and connect the dots. That would take care of the perspective issue. But it would probably defeat the purpose, as doing that many checks and drawing all those separate lines could get really slow.<br /><br />Another way to think of it is, if you know how tall a given texture slice should appear, how can you find the point at which the apparent distance between the top and bottom of the wall are equal to that apparent height? If you can find the X position of that point, that must be where the texture slice has to go. I'll try and post a picture later with what I'm trying to say.<br /><br />EDIT: So I tried to draft up some images to explain what I was getting at earlier. Not sure if it's a good idea, or even a new idea (I'm sure it's been thought of already and refined). This is just what I came up with on my own.<br /><br />RaycastTextureIdea1.png<br /><br />RaycastTextureIdea2.png<br /><br />Then again, you still have to know the texture slice height. I'm not sure if this would be easy to figure out by itself.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Thu Jan 08, 2015 12:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2015-01-07T12:36:24-07:00</updated>
<published>2015-01-07T12:36:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138836#p138836</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138836#p138836"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138836#p138836"><![CDATA[
To get perspective correct texture mapping, instead of interpolating texture coordinates u, v linearly across space, divide the endpoints by depth z, then interpolate u/z, v/z and 1/z linearly as you rasterize. To recover the perspective correct u, v divide the interpolated u/z, v/z by the interpolated 1/z.<br /><br />It's probably faster than trying to trace a ray for every pixel, but can you do it fast/accurate enough on the NES? At least you only have to perspective correct the horizontal texture coordinate for the walls.<br /><br />You can also compromise by subdividing, i.e. break the rasterized object into two parts with perspective correction at the break, but linearly interpolate from there. This way you can trade speed for accuracy by choosing how many times to subdivide.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Wed Jan 07, 2015 12:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-01-07T12:07:49-07:00</updated>
<published>2015-01-07T12:07:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138834#p138834</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138834#p138834"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138834#p138834"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />If you had solid walls, you could theoretically just find the on-screen coordinates of a wall side's 4 corners, and use a line drawing algorithm to connect the dots. Then after that, use something like XOR filling to fill them in.<br /></div><br />I have always considered something like this. I thought about defining rooms as polygons (which could result in worlds more complex than those built with boxes), and finding the angle and distance to all the corners relative to the player (much like is done with objects) in order to render the graphics. A line drawing algorithm would be used to interpolate the wall heights between adjacent corners, like you said.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Though, this would get more complicated when you have partial walls sicking out from behind another wall in the distance.<br /></div><br />Yeah, but I bet there's a decent algorithm that can be used to sort the distances out and avoid wasting processing power on stuff that's not visible. We just have to think carefully.<br /><br />It's still unclear to me how the textures would be rendered. How to &quot;stamp&quot; the texture without messing up the perspective on walls that are being interpolated? I'm sure there's something about that in 3D literature, but is it feasible on the NES? I'm talking about this:<br /><br />perspective-correction.png<br />With typical raycasting, that fires one ray for each screen column, you get the correct perspective for free, but if you only detect the edges of the wall and use a line drawing algorithm (linear) to interpolate between them, you'd get what's shown on the left side.<br /><br />There's an interesting Game Boy demo called <a href="http://pdroms.de/files/gameboy/back-to-earth-3d" class="postlink">Back to Earth</a> that has slanted walls and decent texture mapping. Maybe their algorithm is worth checking out.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Jan 07, 2015 12:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2015-01-07T10:58:26-07:00</updated>
<published>2015-01-07T10:58:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138832#p138832</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138832#p138832"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138832#p138832"><![CDATA[
This is a cool idea. I'd always thought about how something like this would work.<br /><br />If you had solid walls, you could theoretically just find the on-screen coordinates of a wall side's 4 corners, and use a line drawing algorithm to connect the dots. Then after that, use something like XOR filling to fill them in. Though, this would get more complicated when you have partial walls sicking out from behind another wall in the distance. But if implemented correctly, this might make for a fast, high resolution raycaster.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Wed Jan 07, 2015 10:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-01-07T06:05:31-07:00</updated>
<published>2015-01-07T06:05:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138826#p138826</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138826#p138826"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138826#p138826"><![CDATA[
Oh, now I see what you meant by &quot;strips&quot;. Cool idea! I still don't know how to properly select a texture slice for each rendered column though...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Jan 07, 2015 6:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-01-06T21:54:45-07:00</updated>
<published>2015-01-06T21:54:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138807#p138807</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138807#p138807"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138807#p138807"><![CDATA[
Animation<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jan 06, 2015 9:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-01-06T20:14:00-07:00</updated>
<published>2015-01-06T20:14:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138804#p138804</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138804#p138804"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138804#p138804"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Do I need to expand the illustration to an animated GIF of the entire rendering process, or produce a renderer myself in Python?<br /></div><br />Coding an example seems overkill if you don't plan on using it for a project of your own... but I'll definitely take you up on that GIF! =)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Jan 06, 2015 8:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2015-01-06T19:30:02-07:00</updated>
<published>2015-01-06T19:30:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138801#p138801</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138801#p138801"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138801#p138801"><![CDATA[
I was wondering about the effectiveness of simplifying calculations by restricting angles?<br /><br />For instance, a 90-degree restriction is fairly straightforward; all walls are box-shaped and you rotate at 90-degree angles. What if we did it at 30 degrees? Everything would turn at 30 degree increments, and all walls could only be at a 30 degree angle.<br /><br />Maybe this offers no improvements, but it feels like you'd be able to calculate things a little faster and have smaller tables, or higher resolution tables.<br /><br />Also, an animation would be helpful, Tepples. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Tue Jan 06, 2015 7:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-01-06T16:05:12-07:00</updated>
<published>2015-01-06T16:05:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138791#p138791</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138791#p138791"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138791#p138791"><![CDATA[
By &quot;strips&quot;, I was referring to horizontal strips of potentially visible tiles in the map, colored dark blue in the illustration. &quot;Nearest&quot; is such a strip of tiles that is closest to the camera position (the intersection of the orange line segments). When facing north, the closest strip is the southernmost strip. The left and right side of each strip is determined by projecting the rays at the corners of already-drawn map tiles backward. When the camera is facing west or east more than north or south, use vertical strips in the map instead of horizontal strips in the map.<br /><br />The procedure is sort of a hybrid between the ray casting of Wolf3D and the arbitrarily shaped sectors of Build, the Duke 3D engine.<br /><br />Do I need to expand the illustration to an animated GIF of the entire rendering process, or produce a renderer myself in Python?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jan 06, 2015 4:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2015-01-06T15:13:14-07:00</updated>
<published>2015-01-06T15:13:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138788#p138788</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138788#p138788"/>
<title type="html"><![CDATA[Re: Another Raycasting Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12180&amp;p=138788#p138788"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />RLE ray casting starts with a visible sector with a left and right side. You scan the visible sector in strips from nearest to farthest. When you hit a wall, you schedule the wall to be drawn, and then you divide the visible sector into the interval to the left of the tile and the interval to its right. After you've finished enumerating all walls in this strip, you scan the next farther strip. Repeat until all visible sectors have been cleared.<br /><br />portalcasting.png<br /><ul><li>Orange: Sides of initial visible sector </li><li>Green: Visible wall segments </li><li>Blue: Floor within visible area </li><li>Light gray: Sides of subsectors </li><li>Light blue: Subsector sides extended toward camera origin </li><li>Black: Floor areas that are skipped </li></ul><br />The difference here is that each cell in the map is visited once, not once for each pixel column that intersects it. And for the typical 90 degree FOV, you'll never have more intervals active at once than max(width, height) of your map.<br /></div><br /><br />I think I follow you. But I'm not sure how to implement that, exactly. So once the ray hits that tiled block (wall/edge/whatever), you calculate angle of the wall, and render out that tile for that angle, then proceed to the next tiled block/wall the ray hits? Or at least, something along those lines? I wonder if that's what <a href="https://www.youtube.com/watch?v=WBMsjAAgPO0gasega68k" class="postlink">gasega68k</a> did for his Wolfenstein 3D port for the Genesis.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Tue Jan 06, 2015 3:13 pm</p><hr />
]]></content>
</entry>
</feed>