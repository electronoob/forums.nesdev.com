<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - The Legends of Owlia passwords</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">The Legends of Owlia passwords</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16850">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16850</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BacteriaMage</b> [ Fri Dec 22, 2017 2:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Greetings Friends,<br /><br />I'm not exactly new since I've be skulking about in the shadows for sometime now but only recently have I tried to post anything. I did recently put together a piece about the password system used by the homebrew game <a href="http://www.gradualgames.com/p/the-legends-of-owlia_1.html" class="postlink">The Legends of Owlia</a> (recently re-released as a free ROM) which I thought I was pretty good and would be interesting to the right audience.<br /><br />I tried <a href="https://twitter.com/BacteriaMage/status/944260354179239936" class="postlink">tweeting</a> it but nobody cared. Then I thought that it might be appropriate to post in the general section here and that the more technical audience might appreciate it more anyway. (A shameless plug; I know. Sorry.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />)<br /><br /><a href="https://bacteriamage.wordpress.com/2017/12/22/an-analysis-of-the-legends-of-owlia-password-system/" class="postlink">https://bacteriamage.wordpress.com/2017/12/22/an-analysis-of-the-legends-of-owlia-password-system/</a><br /><br />Cheers!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NovaSquirrel</b> [ Sat Dec 23, 2017 1:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I haven't developed any games that would have called for passwords myself, so I never really looked into them much, and it was interesting to build on what I knew a little. Owlia's password reminds me of <a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=7631&amp;p=76316#p76316" class="postlink">tepples's suggestion for an RPG password</a> with its &quot;chapter&quot; and &quot;event flags for chapter&quot; bits.<br /><br />I had no idea that it was common for games to include decoy password characters.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bavi_H</b> [ Sat Dec 23, 2017 3:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for sharing your investigation into Owlia's password system. When I saw Owlia's password, I noticed the total number of possible passwords didn't match up to a whole number of bits and wondered how the conversion dealt with that. The decoy characters makes it much simpler!<br /><br />Did you use FCEUX's debugger during your work? In the two password systems I have analyzed, I did lots of analysis myself first, but eventually used the debugger to help me figure things out.<br /><br />Here's my <a href="http://rnhart.net/programs/ufouria.htm" class="postlink">encoder and decoder for Ufouria's passwords</a>. It uses a method to scramble the password that I didn't completely understand, I just copied the algorithm I saw the code was doing. Also, I remember having problems getting the table of data that it uses for the scrambling method because the right bank wasn't switched in.<br /><br />I figured out how the password system in the <a href="http://lizardnes.com/" class="postlink">Lizard demo</a> works, but didn't write up the details. (I still have the files from when I worked on it, maybe I'll write up some notes sometime.) I remember I had assumed the checksum would be at the end of the password, but it was actually in the middle! Sneaky.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 23, 2017 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I too recognized parallels between the algorithm in <em>Owlia</em> and what I had suggested, but I didn't want to be so quick to shill my own posts after having taken heat for mentioning Pently too much in the FamiTracker users' Discord server.<br /><br />What I would have done differently:<br /><br /><ol style="list-style-type: lower-alpha"><li>Run a <a href="https://simple.wikipedia.org/wiki/Confusion_and_diffusion" class="postlink">diffusion algorithm</a> on the whole password. This would obscure the relationship between an individual character and an individual part of the state, and it would make invalid money values behave as a stronger checksum. </li><li>Use vowels as the decoys, if only so that a valid password can never include well-known obscenities (such as an infamous <em>Metroid</em> password that begins <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ENGAGE RIDLEY MOTHER</tt>). </li></ol>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BacteriaMage</b> [ Sat Dec 23, 2017 3:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NovaSquirrel wrote:</div><div class="quotecontent">Owlia's password reminds me of tepples's suggestion for an RPG password with its &quot;chapter&quot; and &quot;event flags for chapter&quot; bits.</div><br /><br />Yeah, that looks like good advice to me too. I think the really great thing about this is that a lot of different programmers have independently approached this problem over the years and come up with similar solutions. When I first looked into this about 10 years ago there didn't seem to be much information about it at all which is one of the reasons I ended up digging in myself.<br /><br />I didn't know that homebrewers would eventually pick up the mantle. I wonder how much NES programmers back in the day collaborated?<br /><br /><div class="quotetitle">NovaSquirrel wrote:</div><div class="quotecontent">I had no idea that it was common for games to include decoy password characters.</div><br /><br />I can only speak to what I've seen personally but yes I've seen this in multiple games. One is the <a href="https://www.gamefaqs.com/nes/587291-gi-joe-a-real-american-hero/faqs/58672" class="postlink">GI Joe NES game</a> which lets you select from a larger set but only uses 16 of the total characters and it changes which subset it uses based on the checksum.<br /><br /><div class="quotetitle">Bavi_H wrote:</div><div class="quotecontent">I noticed the total number of possible passwords didn't match up to a whole number of bits and wondered how the conversion dealt with that. The decoy characters makes it much simpler!</div><br /><br />Yeah, I can only think of one other way to deal with the fractional bits by grouping digits but I've never seen anything that does anything other than just use a subset that is an even number of bits.<br /><br /><div class="quotetitle">Bavi_H wrote:</div><div class="quotecontent">Did you use FCEUX's debugger during your work? In the two password systems I have analyzed, I did lots of analysis myself first, but eventually used the debugger to help me figure things out.</div><br /><br />When I first started I always used the debugger. With experience I am now able to break the simpler systems without examining the code. Owlia didn't try hard to hide the encoding or the key so it was easy to decipher by hand. I couldn't have done it if I haven't already worked with other systems before though.<br /><br /><div class="quotetitle">Bavi_H wrote:</div><div class="quotecontent">Here's my encoder and decoder for Ufouria's passwords. It uses a method to scramble the password that I didn't completely understand, I just copied the algorithm I saw the code was doing. Also, I remember having problems getting the table of data that it uses for the scrambling method because the right bank wasn't switched in.</div><br /><br />Wow, that's a big one! I've seen programs like that for games like Metroid but I've only worked with games that use short single line strings usually 5 to 12 characters. I have a spreadsheet that I use and just keep writing Excel macros to encode and decode as a reverse new games.<br /><br /><div class="quotetitle">Bavi_H wrote:</div><div class="quotecontent">I figured out how the password system in the Lizard demo works, but didn't write up the details. (I still have the files from when I worked on it, maybe I'll write up some notes sometime.) I remember I had assumed the checksum would be at the end of the password, but it was actually in the middle! Sneaky.</div><br /><br />Awesome, post it! From Brad's screenshots looks like he's changed the system in the final version. His kickstarter was before I knew about homebrew so I hope I can snag a copy once he ships.<br /><br />I don't think there's any particular pattern on this. Gargoyle's Quest for the GameBoy splits the checksum between the front and end. I think it does that so the those characters of the password change more so it creates more apparent randomness to the player. <br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Run a diffusion algorithm on the whole password. This would obscure the relationship between an individual character and an individual part of the state, and it would make invalid money values behave as a stronger checksum.</div><br /><br />Yeah, I've wondered about using more modern cryptographic techniques but everything seems to just use simple classical encryption like substitution or transposition. Modern cryptography might be overkill for this application and probably more code on the NES in 6502 assembly. Most of the math for real modern encryption is a little above my head.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Use vowels as the decoys, if only so that a valid password can never include well-known obscenities (such as an infamous <em>Metroid</em> password that begins ENGAGE RIDLEY MOTHER.</div><br /><br />I didn't know about that. I did know about the one password that works that is somebody's name. I've always thought about that if I ever make a game I'd design the password encoding so that my name would be some super-powered password.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Dec 23, 2017 4:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Lizard's final password system is essentially the same implementation concept as in the alpha demo, but I think it had 3 bits of parity before and I had to cut it down to 2 bits to accommodate &gt;256 rooms. Also it uses the numbers 1-8 instead of letters now, which I thought would be easier to understand, and not so subject to accidentally offensive words.<br /><br />The basics of it:<br /><ul><li>1. Each digit of the password encodes 3 bits as an number 1-8.</li><li>2. Each piece of information is interleaved across the digits, trying to stick each bit in a different digit. The goal is that changes won't be easily localized/isolated in a single digit.</li><li>3. Unused bits are used to store some XOR parity of a set of the other bits, with 2 bits this makes 3/4 &quot;random&quot; passwords invalid.</li><li>4. After encoding a few chosen bits are flipped with XOR, basically so if all the incoming info is 0 it doesn't still come out as an obvious 00000 password.</li><li>5. Since everything is binary encoded, information that isn't power-of-two in size leaves means there's some invalid possible values for each decoded piece of info, which again invalidates many passwords.</li><li>6. Unless using a cheat, passwords only work at a checkpoint, which means normally like 99.6% of passwords are invalid by not going to a checkpoint. (It's very useful for debugging that every room has a valid cheat password though, and I don't mind it as an accessible cheat method.)</li></ul><br />My only real goal here was to make it so that there's no &quot;obvious&quot; way to generate passwords. Like I didn't want people to just be able to change XXXX2 to XXXX3 and see their lizard change, etc. Obviously anyone motivated can crack it (and I'm going to open source it later anyway) but really all I wanted was to prevent being able to edit/guess passwords without doing some real analysis.<br /><br />My more general goals:<br /><ul><li>Make sure a large percentage of passwords are invalid to discourage guessing.</li><li>Try to make sure valid passwords aren't distributed close to each other, i.e. changing a valid password single digit by 1 shouldn't produce another valid password.</li><li>Try to make a single change in the input information produce more than one digit of change in the password.</li><li>Try not to make the value of inputs obvious, e.g. &quot;0&quot; shouldn't look like &quot;0&quot; in the password.</li><li>Do not let any possible password produce an invalid/corrupt game state.</li></ul><br />I think for larger passwords I might like to try some kind of variation of autokey encryption, maybe generating a CRC for the start of the password and then using that to seed something that chaotically-but-deterministically (PRNG) swizzles or flips bits in the rest of the password.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Dec 23, 2017 9:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been really tempted to write a BCH-21,31 (a forward-error correction system) encoder/decoder to the NES specifically for passwords. On the down side, it does inflate your passwords by 150%, but on the plus side you can intentionally encode errors (that will be corrected out) into your password and only accept a password with the correct number of errors.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BacteriaMage</b> [ Sat Dec 23, 2017 9:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Each digit of the password encodes 3 bits as an number 1-8</div><br /><br />Just my personal feeling with no good factual basis but as a child I felt like games that used only numbers in the password were somehow less advanced. Guess, I'm number-biased? <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />Might be the fact that the set of digits is smaller than the set of letters.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I think for larger passwords I might like to try some kind of variation of autokey encryption, maybe generating a CRC for the start of the password and then using that to seed something that chaotically-but-deterministically (PRNG) swizzles or flips bits in the rest of the password.</div><br /><br />That's an interesting idea. I really agree on the wanting to create the high-degree of randomness and protect from causal and accidental modification as a design goal.<br /><br />After having reversed a number of these systems and been thinking about it for a while the method I'd like to use someday would be to include a 2 or 3-bit counter plus some portion of the checksum in the first character. The counter would just increment each time a password was issued to ensure that the first character always changes. The character values would be pre-assigned at random and then when encoding, the current character value would be offset by the value of the previous character. I think that would result in even small changes giving completely different passwords that appeared heavily random and you'd get a kind of cascading effect.<br /><br /><a href="https://en.wikipedia.org/wiki/Gargoyle%27s_Quest" class="postlink">Gargoyle's Quest</a> on the Game Boy did something similar which is where I drew some inspiration on this. It has a 3 bit field which is just used to pick a different XOR key used to scramble the rest of the password. Obviously, these bits get set after the rest are scrambled since they'd otherwise scramble themselves.<br /><br />This results in very different passwords being generated for all of the different possible values of this field. What's a little odd though is that the value of this field is just randomly assigned each time the password is issued. Since this an RPG like game where the passwords are issued by NPCs in towns you can just keep talking to the NPC and he'll give you a different but equivalent one most times from the set of possible 8 variations.<br /><br />As a child playing this I noticed how the passwords were usually very different but then sometimes pretty similar. I noticed that if I kept talking to the NPC in the next town he'd eventually give me a password that was very close to the original one. This always struck me as odd but it would still be more than a decade before I eventually discovered why.<br /><br />The way I think this should have worked was to increment the value each time so that all the possible variations were cycled through. That way once you circled around hopefully the data had changed enough that the two passwords using the same key were now different enough to no longer appear very similar. The other important thing would be to only increment the counter if something actually changed since the last issuing so that you can't just talk to the same NPC over and over again and immediately cycle through the set.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 23, 2017 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">I've been really tempted to write a BCH-21,31 (a forward-error correction system) encoder/decoder to the NES specifically for passwords.</div><br />If you do, I'd like to use it to display a 2D barcode for Internet ranking, seeing as I can't seem to figure out the math behind QR code ECC myself.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NovaSquirrel</b> [ Sun Dec 24, 2017 3:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Over on the <em>far</em> end of trying to make passwords difficult to figure out, you've got Animal Crossing for GameCube, using the <em>RSA encryption algorithm</em> on top of substitution ciphers and shuffling bits and bytes around multiple times, in ways that vary based on the input. Kind of makes me wonder what sort of stuff is going on for, say, PlayStation 1 games that provide both a memory card and password option since they easily have the CPU power to do something strong.<br /><br />I think in Owlia, or really any homebrew game, barely obfuscating the password is fine since cheaters are going to find a way no matter what. Passwords are really just a convenience to the player, and I would probably focus on making them pleasant to use (catching incorrectly typed passwords, not having similarly looking characters, short, etc.).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Dec 24, 2017 7:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Previously on Security Stack Exchange: <a href="https://security.stackexchange.com/q/117525/36212" class="postlink">Which block cipher for a very short (40-bit) message?</a><br /><br /><div class="quotetitle">In that question, tepples wrote:</div><div class="quotecontent">I'm worried about online attacks and pencil-and-paper attacks by bored gamers, as have been posted in the &quot;Classified Information&quot; section of <em>Nintendo Power</em> magazine. But I'm not quite as concerned about automated attacks by someone reading the algorithm and symmetric key out of the game's code and using this information to put a password generator on a website, as this would take conscious effort on a player's part to cheat at the game.</div><br />Suggestions in answers include the <a href="http://web.cs.ucdavis.edu/~rogaway/papers/thorp.pdf" class="postlink">Thorp shuffle</a>, <a href="http://arxiv.org/pdf/1208.1176v2.pdf" class="postlink">Swap or Not</a>, and <a href="https://www.cryptolux.org/index.php/Lightweight_Block_Ciphers" class="postlink">ciphers with a 32-bit block size</a>. My <a href="https://forums.nesdev.com/viewtopic.php?p=64656#p64656" class="postlink">previous demo</a> ended up using a homemade cipher with a structure inspired by <a href="https://en.wikipedia.org/wiki/XXTEA" class="postlink">XXTEA</a>.<br /><br />The complexity of the <em>Animal Crossing</em> example probably has something to do with wanting to avoid modification of the recipient name and town for potentially valuable items, where playground children may be trading pocket change for item codes. There's a bit more incentive to cheat at something like that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bavi_H</b> [ Sun Dec 24, 2017 4:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The Legends of Owlia passwords</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bavi_H wrote:</div><div class="quotecontent">I figured out how the password system in the Lizard demo works, but didn't write up the details. (I still have the files from when I worked on it, maybe I'll write up some notes sometime.)</div><div class="quotetitle">BacteriaMage wrote:</div><div class="quotecontent">Awesome, post it!</div><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Lizard's final password system is essentially the same implementation concept as in the alpha demo [...]. <br />The basics of it: [...]</div><br />I posted my additional <a href="http://forums.nesdev.com/viewtopic.php?p=210718#p210718" class="postlink">notes about Lizard Demo's password system</a> in the Lizard thread.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>