<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=6107" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-03-05T20:04:43-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=6107</id>
<entry>
<author><name><![CDATA[sahib]]></name></author>
<updated>2010-03-05T20:04:43-07:00</updated>
<published>2010-03-05T20:04:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57609#p57609</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57609#p57609"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57609#p57609"><![CDATA[
<div class="quotetitle">NESICIDE wrote:</div><div class="quotecontent"><br />I don't currently use timers.  In implementing frame limiting I don't think I would use timers, either.  I would just grab some "tick" from some cross-platformy method and do math on it.<br /></div><br /><br />I don't use timers for my frame-limiter, I just use a QTimer to set the update interval for the emulators' update-loop. The frame-timing currently uses a SDL_Delay-call, which on win32 equals a call to Sleep(), which, gets called from within the update-loop.<br /><br /><br />I reckon I'll just get around to implement the APU next, and hopefully that'll provide a better platform for frame timing...<br /><br />thanks for the input, guys <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4182">sahib</a> — Fri Mar 05, 2010 8:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2010-03-05T09:06:36-07:00</updated>
<published>2010-03-05T09:06:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57556#p57556</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57556#p57556"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57556#p57556"><![CDATA[
My emu is crossplatform as well (wxWidgets + SDL), although I think I used wxWidgets' timer functions instead of SDL's.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Qt doesn't provide any sleep/delay as long as I'm not using threads, which I am not.<br /></div><br /><br />That's kind of lame.  I guess you could always #ifdef your own in if SDL's aren't cutting it.  It's kind of a pain, but it's only 2 functions we're talking about, and they're both really small.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I notice audible clicks at about 1Hz. I haven't been able to diagnose the source of those clicks yet. I suppose it is due to the callback being delayed past the end of the playing audio stream. I have read that the callback doesn't actually post the data to the audio stream until after it returns. This all makes sense but I am currently at a loss for how to make the callback more responsive!<br /></div><br /><br />Ah.  Yeah this is a challenge.<br /><br />Running the emulator from the callback is not a good idea.  The callback should just fill the audio buffer asap and return.  Running a whole frame of emulation will take considerably longer.<br /><br />I had to double buffer audio in my system.  Basically the idea is I have a ring buffer which my emu fills with audio, and the callback empties audio from.<br /><br />You can keep the latency on SDL fairly low, and just have a larger ring buffer.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Fri Mar 05, 2010 9:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2010-03-05T06:18:46-07:00</updated>
<published>2010-03-05T06:18:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57539#p57539</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57539#p57539"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57539#p57539"><![CDATA[
<div class="quotetitle">sahib wrote:</div><div class="quotecontent"><br />disch: <br /><br />I'm going completely cross-platform, it currently compiles and runs on linux, win32 and mac os. I've got two versions, one with front-end and one without. It seems that when I use SDL_Delay from within the front-end version (which utilizes Qt), the delay is somewhat arbitrary, at least on win32. It might be due that I update the emulator (&amp; SDL) with a timer set to 0 ms which, in theory at least, means that it's constantly firing. Qt doesn't provide any sleep/delay as long as I'm not using threads, which I am not.<br /><br /><br />However, it doesn't misbehave as such when I'm using the version without a frontend, so I think I've worked it out for myself. I need to find a different approach in the GUI version.<br /></div><br /><br />I am also using Qt/SDL and notice some audio anomalies.  I use a QSemaphore to kick off emulation in my SDL callback.  The callback takes the previous frame's audio data and mixes it into the stream.  I notice audible clicks at about 1Hz.  I haven't been able to diagnose the source of those clicks yet.  I suppose it is due to the callback being delayed past the end of the playing audio stream.  I have read that the callback doesn't actually post the data to the audio stream until after it returns.  This all makes sense but I am currently at a loss for how to make the callback more responsive!  <br /><br />I don't currently use timers.  In implementing frame limiting I don't think I would use timers, either.  I would just grab some "tick" from some cross-platformy method and do math on it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Fri Mar 05, 2010 6:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[sahib]]></name></author>
<updated>2010-03-04T22:07:13-07:00</updated>
<published>2010-03-04T22:07:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57533#p57533</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57533#p57533"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57533#p57533"><![CDATA[
disch: <br /><br />I'm going completely cross-platform, it currently compiles and runs on linux, win32 and mac os. I've got two versions, one with front-end and one without. It seems that when I use SDL_Delay from within the front-end version (which utilizes Qt), the delay is somewhat arbitrary, at least on win32. It might be due that I update the emulator (&amp; SDL) with a timer set to 0 ms which, in theory at least, means that it's constantly firing. Qt doesn't provide any sleep/delay as long as I'm not using threads, which I am not.<br /><br /><br />However, it doesn't misbehave as such when I'm using the version without a frontend, so I think I've worked it out for myself. I need to find a different approach in the GUI version.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4182">sahib</a> — Thu Mar 04, 2010 10:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-03-03T09:25:23-07:00</updated>
<published>2010-03-03T09:25:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57469#p57469</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57469#p57469"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57469#p57469"><![CDATA[
I think you use MMTimers, combined with polling which scanline the display is on, and maybe also check if too much time has passed since the last timer event.<br />Then go bug the Allegro people to replace their vblank code with that.<br /><br />Edit: Use TimerQueue instead of MultimediaTimer on Windows 2000 and higher.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Wed Mar 03, 2010 9:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-03T08:57:27-07:00</updated>
<published>2010-03-03T08:57:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57468#p57468</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57468#p57468"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57468#p57468"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />Specifically, avoid calls do the DirectX vblank wait function.<br /></div><br />Then what do you recommend to wait for vblank so that a blit doesn't tear? The GBA and DS versions of one of my games call the SWI for VBlankIntrWait(), but the PC version calls Allegro vsync(), which sends the CPU to 100% usage.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Mar 03, 2010 8:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-03-03T08:36:52-07:00</updated>
<published>2010-03-03T08:36:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57466#p57466</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57466#p57466"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57466#p57466"><![CDATA[
Make sure you don't use a really bad frame limiter that makes the CPU go to 100% usage.  Specifically, avoid calls do the DirectX vblank wait function.  I've seen tons of emulators do this, and it makes me mad.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Wed Mar 03, 2010 8:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2010-03-03T08:08:28-07:00</updated>
<published>2010-03-03T08:08:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57464#p57464</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57464#p57464"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57464#p57464"><![CDATA[
I never had problems with SDL's time functions.<br /><br />What OS are you on?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Mar 03, 2010 8:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[sahib]]></name></author>
<updated>2010-03-02T18:08:13-07:00</updated>
<published>2010-03-02T18:08:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57432#p57432</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57432#p57432"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57432#p57432"><![CDATA[
thanks for the help, disch! I'm going to see if I can implement something similar right off... Much appreciated!<br /><br /><br />really smart idea to keep the emulator synchronized with the audio, btw! I'm definitely going to do that once I've implemented a working APU... which right now seems somewhat difficult, given that I've never done any audio signal programming whatsoever.<br /><br />edit:<br /><br />Got it to work! Except that I use SDL for delaying and getting ticks, and as it turns out, SDL_Delay (equivalent to sleep()) is not playing ball with the OS scheduler, and thus delays are unpredictable.<br /><br />ohwell, thanks a lot!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4182">sahib</a> — Tue Mar 02, 2010 6:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2010-03-01T23:11:12-07:00</updated>
<published>2010-03-01T23:11:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57398#p57398</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57398#p57398"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57398#p57398"><![CDATA[
Frame limiters can get complex when you start working in fastforward and frame skipping.<br /><br />Here's the frame limiter from my emu (well the one that's based on ticks, anyway).  It's pretty damn good if I say so myself.  I've used emulators that had some pretty terrible frame limiters (older versions of VBA come to mind right away):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void Emulator::RegulateFrameRate_Clock&#40;int fps&#41;<br />&#123;<br />   // change 'fps' to number of milliseconds between frames<br />   if&#40;fps &lt;= 0&#41;<br />   &#123;<br />      if&#40;bPALMode&#41;      fps = 20;<br />      else            fps = 17;<br />   &#125;<br />   else<br />      fps = 1000 / fps;<br /><br />   // get time between next frame and now<br />   s32 dif = &#40;signed&#41;&#40;::GlbGetTick&#40;&#41; - nNextFrame&#41;;<br /><br />   if&#40;dif &lt; 0&#41;   // not yet time for next frame<br />   &#123;<br />      ::GlbSleep&#40;1&#41;;<br />      return;<br />   &#125;<br /><br />   nNextFrame += fps;<br /><br />   if&#40;dif &gt;= &#40;fps*nSkipFramesBehind&#41;&#41;<br />   &#123;<br />      if&#40;nFramesSkipped &gt;= nMaxFrameSkip&#41;<br />         ResyncFrameTime&#40;0&#41;;<br />      else<br />      &#123;<br />         ++nFramesSkipped;<br />         DoFrame&#40;0,1&#41;;<br />         return;<br />      &#125;<br />   &#125;<br /><br />   nFramesSkipped = 0;<br />   DoFrame&#40;1,0&#41;;<br />&#125;<br /></div><br /><br />Notes:<br />- fps (passed to the function) is 0 normally.  But it could be something much higher if the player is holding the fastforward button to speed up the game.<br /><br />- ::GlbGetTick() is just a function that returns the current tick in milliseconds.  On Windows, you can use GetTickCount()<br /><br />- ::GlbSleep() is just a function that sleeps the given number of milliseconds.  On Windows, you can use Sleep()<br /><br />- nNextFrame is the tick on which you'd do the next frame<br /><br />- nSkipFramesBehind is the number of frames at which point the emu will start skipping frames in order to start catching up.  IE:  if it's 5, it'll start skipping frames once you fall 5 frames behind.  Don't set it too low or it'll get very choppy.  I have it user defined in my emu.<br /><br />- nMaxFrameSkip is the maximum number of frames the emu will skip before "giving up" trying to catch up.  Lower values = emu will opt to run "slower".  Higher values = emu will opt to run "choppier"  (assuming it can't run full speed)<br /><br />- ResyncFrameTime just "catches up" without actually doing any emulation.  IE:  <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nNextFrame = ::GlbGetTick&#40;&#41;;<br />nFramesSkipped = 0;<br /></div><br /><br />It's important that ResyncFrameTime be called whenever emulation resumes from a paused state to prevent the emu from trying to "catch up" to make up for time where it wasn't spent emulating.  Like for instance, when the user goes in a menu or in a config screeen or the like.<br /><br />- DoFrame(0,1) skips a frame (emulates a frame without drawing it -- faster)<br /><br />- DoFrame(1,0) emulates and draws a frame (normal, slower than skipping a frame)<br /><br />- Intended use is as follows:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">while&#40; emulator_running &#41;<br />&#123;<br />   ProcessMessagesAndUserInput&#40;&#41;;<br /><br />   if&#40; user_is_pressing_fastforward&#41;<br />      RegulateFrameRate_Clock&#40; fastforward_fps &#41;;<br />   else<br />      RegulateFrameRate_Clock&#40;0&#41;;<br />&#125;<br /></div><br /><br />- It doesn't do exactly 60 FPS for NTSC (it does 17 ms per frame which is a little slower .. 60 FPS would be 16.6667 ms per frame).  I didn't care about getting it exact because this was my secondary limiter (my primary one works on audio samples to keep things synced to sound)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Mar 01, 2010 11:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Hangin10]]></name></author>
<updated>2010-03-01T22:34:31-07:00</updated>
<published>2010-03-01T22:34:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57397#p57397</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57397#p57397"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57397#p57397"><![CDATA[
It's far from the best method, but if you don't care about being exact, you can update a counter of how many frames have gone by in the current second. When the counter hits 60, just loop until the value returned by time(NULL) has changed.<br /><br />That should slow things down plenty syscall and all.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3934">Hangin10</a> — Mon Mar 01, 2010 10:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[sahib]]></name></author>
<updated>2010-03-01T21:58:45-07:00</updated>
<published>2010-03-01T21:58:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57395#p57395</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57395#p57395"/>
<title type="html"><![CDATA[frame limiter - need suggestions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6107&amp;p=57395#p57395"><![CDATA[
I've come to the point where my emulator runs most (all?) mapper-0 games pretty well, but the frame rate is so high that it renders the games unplayable. my PPU implementation is currently scanline-based, and the whole thing is currently wildly inaccurate, but that's beside the point.<br /><br />So, what's the best way of implementing a frame limiter?<br /><br />I was thinking about doing it like I would do if I was programming a video game, that is, calculate a delta time and match it against my desired frame rate (60 Hz)<br />something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">starttime = getticks&#40;&#41;;<br /><br />emulate_one_frame&#40;&#41;;<br /><br />delta = getticks&#40;&#41;-starttime;<br /><br />if&#40;delta &lt; some_value&#41;<br />delay&#40;some_value - delta&#41;;<br /></div><br /><br />I do realize that this might not be completely kosher though, and it might waste a lot of CPU cycles for nothing.<br /><br />here is some pseudocode of my emulators main loop:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />while&#40;cpu_cycles&#40;&#41; &lt; 113&#41;<br />run_cpu&#40;&#41;;<br /><br />nextscanline&#40;&#41;;<br />clear_cpu_cycles&#40;&#41;;<br /><br />check_for_irqs&#40;&#41;<br />if&#40;nmi_occured&#41;<br />&#123;<br />do_nmi_stuff&#40;&#41;;<br />draw_to_screen&#40;&#41;;<br />&#125;<br /><br /></div><br /><br />any suggestions or good advice?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4182">sahib</a> — Mon Mar 01, 2010 9:58 pm</p><hr />
]]></content>
</entry>
</feed>