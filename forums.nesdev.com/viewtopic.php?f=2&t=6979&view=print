<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 4-Way scroll compression?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">4-Way scroll compression?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6979">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6979</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Sep 26, 2010 10:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>4-Way scroll compression?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well just thinking about the development of a 4-way scrolling game...since the data goes to the RAM horizontally, and is probably compressed, when you player goes to the left....how the heck does it get that without taking a billion clocks to do the math to find out what tiles are where?
<br />
<br />
<br />And also another qucik question....8K of WRAM, 2K of that could be used for 4-screen "mirroring", right?
<br />
<br />
<br />
<br />It's magical how even after reading it, playing a game that does this really bring a light onto how complex these "old" games are. It's amazing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Sep 26, 2010 11:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I used big metatiles of 16x16 tiles to pull it off easily.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Sep 26, 2010 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So you just looked up a meta lookup table so you then didn't have to compress it to get it to fit? Hmm....

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 26, 2010 11:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is the problem of compression of a 2D data set with random access. Make a map of the first level in a paint program and I might be able to offer suggestions as to how to store the level or how to move things around to make it easier to compress.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 26, 2010 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 4-Way scroll compression?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">65024U wrote:</div><div class="quotecontent">since the data goes to the RAM horizontally</div>
<br />There is your problem, you are assuming that the data is encoded/stored in a certain way that prevents you from doing what you want with it rather than designing the encoding method based on what you want to do with the data in the first place. Good design is the key.
<br />
<br />The obvious solution would be to use lots of RAM and decompress the whole map to it. I'm not too fond of that solution because not only it requires extra hardware but even 8KB can't hold really big levels if your metatiles are small.
<br />
<br />The ideal solution in my opinion is to not compress the whole map as a single entity, but divide it into entities of fixed dimensions (such as "screens") that you can have random access to and compress those individually using your method of choice. Of course there is a hit in compression efficiency, but nothing is free in this world.
<br />
<br />For platformers, big metatiles are great, since they allow you to make huge levels that don't occupy a lot of memory. For RPG they are not so good, because maps aren't as repetitive. Another solution that helps reduce the size of level maps and allows for reasonably quick random access is using several layers of metatiles. If your map is made of big metatiles, those metatiles can be made of smaller metatiles, and so on. The more layers you have the more compact (and more repetitive) the maps will be.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Sep 26, 2010 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmmm that way of doing it in sections of a fixed is a clever thing!
<br />
<br />
<br />And as to the map, I don't really have anything in mind but just how to access and set it up and move it around, thats what I am trying to wrap my head around. And yeah I guess your right but yet....thats just how it goes, the data would be stored horizontally, row for row....Why not plan for it?
<br />
<br />
<br />
<br />And yeah doing it screen-by screen would enable dumping maps to RAM in sections a lot easier I guess and quicker to be able to decompress the map on the fly, so that seems like a good idea. I was thinking of just the compression scheme that was talked about where it is just the TILE# byte then the REPEAT byte.
<br />
<br />
<br />Also, if you were making an RPG game, how would you know when to decompress the map and change something before it enters the screen?  So many difficulties to this! XD Maybe a adventure scrolling game isn't a good idea. :/

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Sep 26, 2010 2:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dragon Quest 2 (with no cartridge RAM) did maps by using up to 676 bytes of RAM for the map.  The overworld was different, it was RLE, and you can do sequential access to RLE in a reasonable amount of time, provided you have row pointers.  Dragon Warrior 4 needed more CPU time for the overworld, so it divided the map in half down the middle so it could seek to the right half of the map.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 26, 2010 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">you can do sequential access to RLE in a reasonable amount of time, provided you have row pointers.</div><br />That's an example of "dividing the map into entities of fixed dimensions", the rows being such entities, because you have random access through them via those pointers.<br /><br />I don't think row RLE is a good choice for free scrolling though, unless the length of the rows was small enough for you to not have to process a lot of data you don't need when scrolling horizontally.<br /><br /><div class="quotetitle">65024U wrote:</div><div class="quotecontent">And yeah doing it screen-by screen would enable dumping maps to RAM in sections a lot easier I guess and quicker to be able to decompress the map on the fly, so that seems like a good idea.</div><br />Yeah, if your largest metatiles are between 256 and 64 pixels wide/tall, keeping a good number of them in RAM is not such a big deal. You just have to update that RAM as the camera scrolls, by progressively decompressing the map.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was thinking of just the compression scheme that was talked about where it is just the TILE# byte then the REPEAT byte.</div><br />That's RLE.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, if you were making an RPG game, how would you know when to decompress the map and change something before it enters the screen?</div><br />Look at the camera's coordinates. When they move a certain number of pixels (usually the dimension of the blocks you keep in RAM) you have to update a row/column of data.<br /><br />For example, say I'm using 32x32-pixel metatiles to build my map. I then decided to set aside 256 bytes of RAM to represent an area of 16x16 of those blocks, covering a total area of 512x512 pixels. That's an area much larger than the screen, so it should be enough for the "active" map. <br /><br />Now, to keep my "active map" always updated, I have to change it as the camera moves. To detect if I need a new column of metatiles, I have to detect when the camera completes 32 pixels of movement to the left or to the right. The easiest way to do that is to save its old X coordinate, move it, and EOR both coordinates. Then check bit 5 (since 32 in binary is %100000), if it's 1, the camera crossed a 32-pixel boundary and you need to decode a new column. Check the direction in which the camera moved to know if the new column is at the left or at the right. It works the same way for vertical movements.<br /><br />It's not mandatory that you update the "active map" every metatile though... Depending on your compression scheme you could update it every 2, 4 or even a whole screen of metatiles, as long as you have at least a screen worth of valid data and enough CPU time to decode larger portions of data.<br /><br />You'd use the same basic technique for rendering tiles to the name tables. You can detect when the camera has moved 8 or 16 pixels (depends on how fast you scroll and how many tiles you are able to update every frame - 8 pixels is OK for most games, but Sonic for example needs 16) and read the metatiles from your "active map" to get tiles out of it, tiles that you will write to the name tables during VBlank. The source and destination coordinates are always calculated based on the camera coordinates.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Maybe a adventure scrolling game isn't a good idea. :/</div>
<br />That's up to you. If the idea isn't clear in your head, you probably shouldn't do it. You shouldn't take my word for it, when I explain solutions like I just did I do it hoping that it will give you ideas, and not that you will try to follow my explanation like some sort of guide, believing that it will work just because I said so.
<br />
<br />So if what people here are telling you makes sense, and gives you better ideas on how to implement scrolling, go ahead. If not, go with something simpler, like horizontal scrolling only, which is infinitely simpler than horizontal+vertical.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Sep 26, 2010 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I know firsthand if you don't have a good idea of how you do something, you might as well know nothing, and this has really helped. I usually think of the screen just that, a screen, but thinking of it as a map with a camera is a hard thing to understand, but is so helpful to wrapping your head around everything. Such a big help bringing all of these details to light guys! This has to be the most concentrated game programming information site ever, not only for NES.
<br />
<br />
<br />And as for updating the screen as it scrolls, I understand the 1 column move tell the game to update the row is it has to be modified because of progress in the game, but yet......It seems like there's nothing that can be done to store that easy. XD Oh well. Somethings gotta take up a lot of room.
<br />
<br />
<br />Well I need to get back on my old project, but creating a scrolling demo is deffinently something I am doing next, and then just expand on the engine from there and maybe get something playable. Maybe if I take it slow enough, it'll come together better? I hope so.
<br />
<br />
<br />Wow....yet again, thanks guys. You guys are the biggest help ever! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Sep 27, 2010 7:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, scrolling on the NES sure takes a lot of planning.  It makes the SNES look good.
<br />
<br />My "Project SNES" engine does scrolling in a way that would be impossible on the NES.  The whole level is copied in the RAM stored with a 16x16 tile per byte.  Every frame it processes an entire screen of tiles (2 if in dual collision mode) using a LUT to convert the bytes into the attribute words.  During forced blank, it uploads the entire screen (2 if in dual collision mode) to v-ram, using 16x16 tile mode.
<br />
<br />It might sound like a waste of hardware, but if you want to make 50 blocks explode at one time, it becomes useful.
<br />
<br />This would never work on the NES because:
<br />1) smaller amount of RAM
<br />2) slower CPU
<br />3) lack of 16x16 tile mode
<br />4) lack of DMA
<br />
<br />Reasons 1 &amp; 3 also apply to the Sega Genesis.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Sep 27, 2010 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">The whole level is copied in the RAM stored with a 16x16 tile per byte.</div><br />Some NES games do that, but AFAIK they all have 8KB of extra RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Every frame it processes an entire screen of tiles (2 if in dual collision mode) using a LUT to convert the bytes into the attribute words.  During forced blank, it uploads the entire screen (2 if in dual collision mode) to v-ram, using 16x16 tile mode.</div><br />Yeah, drawing a full screen every frame is out of the question on the NES.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It might sound like a waste of hardware, but if you want to make 50 blocks explode at one time, it becomes useful.</div><br />Another advantage I can think of is that you can easily animate tiles without having to update patterns, which are typically slower to update than tile maps. On the NES, background tile animation can of course be done with CHR-ROM bankswitching at no CPU cost whatsoever, but this depends on mapper features, obviously.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Wow, scrolling on the NES sure takes a lot of planning. It makes the SNES look good. </div>
<br />Things are not that bad on the NES. Most of the games out there would work well with the NES-friendly "update only the edges of the tile map as you scroll" technique. Background animations are done through bankswitching or CHR-RAM updates, although the latter is much more limited. My engine has special functions to handle the modification of tiles that are in the middle of the screen, so it's possible to update a decent amount of blocks every frame (surely not 50 though... maybe 10).
<br />
<br />And there are several ways to compress level maps that allow for random access of the data, so you can simply access them directly from ROM. In my game, not a single byte of RAM contains level map data. The only RAM I use that's related to that are pointers used to read the maps/blocks, which stay exclusively in ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Tue Sep 28, 2010 6:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Crystalis used a different approach.  If you have played the game then you will notice that many areas have identical looking "screens" (even though the game implements 8-way scrolling).
<br />
<br />The game world is composed of 100+ disjoint "areas".  Special areas on each map are "warps" that cause the game to load a new area when the player steps on this spot.
<br />
<br />The "areas" are defined in a largish table at 0x14310 to 0x17D09.
<br />
<br />At the beginning of the ROM are 256 "screens" of meta-tiles.  Each meta-tile is 2x2 NES tiles (so 16x16 pixels).  Each area is a rectangular grid of screens.
<br />
<br />There is no RLE compression.  The game engine can determine if a tile is passable/not passable but doing a simple look up (and bank switching the screen data as appropriate).  The game only decompresses what is visible on the screen, as off-screen enemies don't move (so no need to do collision detection, so no need to store off-screen map tiles in a readily accessible format).  Personally, I think that off-screen enemies _should_ move around, but I didn't design the game.
<br />
<br /><!-- m --><a class="postlink" href="http://datacrystal.romhacking.net/wiki/Crystalis:ROM_map">http://datacrystal.romhacking.net/wiki/ ... is:ROM_map</a><!-- m -->
<br />
<br />All of the game maps can be viewed here:
<br />
<br /><!-- m --><a class="postlink" href="http://www.vgmaps.com/Atlas/NES/index.htm#Crystalis">http://www.vgmaps.com/Atlas/NES/index.htm#Crystalis</a><!-- m -->
<br />
<br />
<br />Disclaimer: Crystalis is one of my most favorite NES games.  Back in 2001 I reverse engineered about 30% of the ROM, creating a commented disassembly, and wrote a tool to extract the maps.  I was going to write a full game editor but ran out of steam and moved on to other projects.  I still have my map decompresser code, but lost the commented disassembly. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 28, 2010 6:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">clueless wrote:</div><div class="quotecontent">Personally, I think that off-screen enemies _should_ move around, but I didn't design the game.</div>
<br />The designers/programmers probably thought they should move too, but since CPU time is very limited not moving them was probably a practical decision.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 28, 2010 7:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">clueless wrote:</div><div class="quotecontent">Crystalis used a different approach.  If you have played the game then you will notice that many areas have identical looking "screens"</div>
<br />Super Mario Land for Game Boy uses this as well. It's so repetitive that the first time I played it, I thought 1-1 was a trap level like SMB1's 4-4 and 7-4.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Tue Sep 28, 2010 12:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Crystalis is my favorite game too! I have played it....alot! But truthfully with it I have never noticed how repetitive it it. I just never have. And a commented disassembly? 0_o Thats insane! Too bad it is lost :'( 
<br />
<br />
<br />As for it not being compressed thats pretty hardcore, and the special areas like villages and other places like bosses. I was looking at the pattern tables as since it had 4-way scrolling but watching how it did the MMC3 interrupts and did some funky stuff to scroll the screen, I was impressed and confused to hell and back of how it did it. XD
<br />
<br />
<br />Well now after thinking of this really hard, I think that it'd be better just to use single-screen mirroring to scroll all 4 ways, and just do it a battle-kid sytle and just have one screen at the time where the "characters" travels along the screen the whole time and it scroll when he hits a certain point and then it puts the nametable in one of the 4 slots then scrolls the required way to the next screen. But yet, I still really would want to scroll 4-ways because.....I don't know. It seems like the challenge is worth it, and doing such a thing would give so much more to a game and you could add alot with it..... hmm :/ I really wish this was easier. :/

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>