<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=22&amp;t=12441" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-03-05T19:44:26-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=22&amp;t=12441</id>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2015-03-03T23:31:59-07:00</updated>
<published>2015-03-03T23:31:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12441&amp;p=142389#p142389</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12441&amp;p=142389#p142389"/>
<title type="html"><![CDATA[Re: Famizork II and Nintendulator mapper DLL]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12441&amp;p=142389#p142389"><![CDATA[
The NES 2.0 supporting in Unofficial-MagicKit was defective, but I have fixed it now: <a href="http://zzo38computer.org/nes_program/ppmck.zip" class="postlink">http://zzo38computer.org/nes_program/ppmck.zip</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Tue Mar 03, 2015 11:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2015-03-05T19:44:26-07:00</updated>
<published>2015-02-28T13:28:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12441&amp;p=142213#p142213</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12441&amp;p=142213#p142213"/>
<title type="html"><![CDATA[Famizork II and Nintendulator mapper DLL]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12441&amp;p=142213#p142213"><![CDATA[
Although I have made much progress it still is not completed; once it is the full source-codes will be release by public-domain. Please you can write on here whatever comment/question/answers/complaints/etc.<br /><br />The mapper in use is <a href="http://wiki.nesdev.com/w/index.php/User:Zzo38/Mapper_I" class="postlink">User:Zzo38/Mapper I</a>; an implementation for Nintendulator (in C, not C++) is listed below. This implemention tries to emulate bus conflicts too, although I do not recommend their use. It does not attempt to consider race conditions; you should still try to avoid race conditions in a program that uses it though.<br /><br />I fixed interface.h to add the following codes immediately after the pragmas:<div class="codetitle"><b>Code:</b></div><div class="codecontent">#ifndef __cplusplus<br />typedef struct EmulatorInterface EmulatorInterface;<br />typedef struct MapperInfo MapperInfo;<br />typedef struct ROMInfo ROMInfo;<br />typedef struct DLLInfo DLLInfo;<br />typedef enum COMPAT_TYPE COMPAT_TYPE;<br />typedef enum RESET_TYPE RESET_TYPE;<br />typedef enum STATE_TYPE STATE_TYPE;<br />typedef enum CFG_TYPE CFG_TYPE;<br />typedef enum ROM_TYPE ROM_TYPE;<br />#endif</div>Maybe you should also include it into the official file too. It can then allow mapper plugins written in C rather than only C++ mapper plugins.<br /><br />Here is the implementation in Nintendulator:<div class="codetitle"><b>Code:</b></div><div class="codecontent">/*<br />  Nintendulator mapper interface for Famizork II<br />  This program is in the public domain.<br />*/<br /><br />#include &lt;stdlib.h&gt;<br />#include &quot;interface.h&quot;<br /><br />HWND hWnd;<br />HINSTANCE hInstance;<br />const EmulatorInterface*EMU;<br />const ROMInfo*ROM;<br />static uint16 MapperNum=380;<br /><br />static uint32 story_rom_mask;<br />static uint32 story_ram_mask;<br />static uint16 story_addr;<br />static uint8*story_ram&#91;64&#93;;<br />static uint8*story_rom&#91;64&#93;;<br />static FCPURead orig_read1;<br />static FCPURead orig_read3;<br />static FCPURead orig_read5;<br />static FCPUWrite orig_write1;<br />static FCPUWrite orig_write3;<br />static FCPUWrite orig_write5;<br /><br />static int MAPINT Read(int Bank,int Addr) {<br />  int v=255;<br />  switch(Bank) {<br />    case 1: v=orig_read1(Bank,Addr); break;<br />    case 3: v=orig_read3(Bank,Addr); break;<br />  }<br />  if(Addr&amp;2048) {<br />    if(Addr&amp;4) {<br />      v&amp;=story_rom&#91;((story_addr|(Addr&lt;&lt;16))&amp;story_rom_mask)&gt;&gt;12&#93;&#91;story_addr&amp;story_rom_mask&amp;0xFFF&#93;;<br />    } else {<br />      v&amp;=story_ram&#91;((story_addr|(Addr&lt;&lt;16))&amp;story_ram_mask)&gt;&gt;12&#93;&#91;story_addr&amp;story_ram_mask&amp;0xFFF&#93;;<br />    }<br />  }<br />  if(Addr&amp;16) story_addr=(story_addr&amp;0xFF00)|(v&amp;255);<br />  if(Addr&amp;32) story_addr=(story_addr&amp;0x00FF)|((v&amp;255)&lt;&lt;8);<br />  return v;<br />}<br /><br />static void MAPINT Write(int Bank,int Addr,int Val) {<br />  int v=Val&amp;255;<br />  if(Addr&amp;2048) {<br />    if(Addr&amp;4) {<br />      v&amp;=story_rom&#91;((story_addr|(Addr&lt;&lt;16))&amp;story_rom_mask)&gt;&gt;12&#93;&#91;story_addr&amp;story_rom_mask&amp;0xFFF&#93;;<br />    } else {<br />      story_ram&#91;((story_addr|(Addr&lt;&lt;16))&amp;story_ram_mask)&gt;&gt;12&#93;&#91;story_addr&amp;story_ram_mask&amp;0xFFF&#93;=v;<br />    }<br />  }<br />  if(Addr&amp;16) story_addr=(story_addr&amp;0xFF00)|(v&amp;255);<br />  if(Addr&amp;32) story_addr=(story_addr&amp;0x00FF)|((v&amp;255)&lt;&lt;8);<br />  switch(Bank) {<br />    case 1: orig_write1(Bank,Addr,v); break;<br />    case 3: orig_write3(Bank,Addr,v); break;<br />  }<br />}<br /><br />static int MAPINT SaveLoad(STATE_TYPE mode,int offset,unsigned char*data) {<br />  SAVELOAD_WORD(mode,offset,data,story_addr);<br />  return offset;<br />}<br /><br />static BOOL MAPINT Load(void) {<br />  return TRUE;<br />}<br /><br />static void MAPINT Reset(RESET_TYPE typ) {<br />  int i;<br />  if(ROM-&gt;INES_Flags&amp;1) EMU-&gt;Mirror_V(); else EMU-&gt;Mirror_H();<br />  switch(ROM-&gt;INES_PRGSize) {<br />    case 1: // 8K story + 8K interpreter<br />      story_rom_mask=0x1FFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,1);<br />      EMU-&gt;SetPRG_ROM8(0xA,1);<br />      EMU-&gt;SetPRG_ROM8(0xC,1);<br />      EMU-&gt;SetPRG_ROM8(0xE,1);<br />      break;<br />    case 2: // 16K story + 16K interpreter<br />      story_rom_mask=0x3FFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,2);<br />      EMU-&gt;SetPRG_ROM8(0xA,3);<br />      EMU-&gt;SetPRG_ROM8(0xC,2);<br />      EMU-&gt;SetPRG_ROM8(0xE,3);<br />      break;<br />    case 3: // 16K story + 32K interpreter<br />      story_rom_mask=0x3FFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,2);<br />      EMU-&gt;SetPRG_ROM8(0xA,3);<br />      EMU-&gt;SetPRG_ROM8(0xC,4);<br />      EMU-&gt;SetPRG_ROM8(0xE,5);<br />      break;<br />    case 4: // 32K story + 32K interpreter<br />      story_rom_mask=0x7FFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,4);<br />      EMU-&gt;SetPRG_ROM8(0xA,5);<br />      EMU-&gt;SetPRG_ROM8(0xC,6);<br />      EMU-&gt;SetPRG_ROM8(0xE,7);<br />      break;<br />    case 5: // 64K story + 16K interpreter<br />      story_rom_mask=0xFFFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,8);<br />      EMU-&gt;SetPRG_ROM8(0xA,9);<br />      EMU-&gt;SetPRG_ROM8(0xC,8);<br />      EMU-&gt;SetPRG_ROM8(0xE,9);<br />      break;<br />    case 6: // 64K story + 32K interpreter<br />      story_rom_mask=0xFFFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,8);<br />      EMU-&gt;SetPRG_ROM8(0xA,9);<br />      EMU-&gt;SetPRG_ROM8(0xC,10);<br />      EMU-&gt;SetPRG_ROM8(0xE,11);<br />      break;<br />    case 9: // 128K story + 16K interpreter<br />      story_rom_mask=0x1FFFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,16);<br />      EMU-&gt;SetPRG_ROM8(0xA,17);<br />      EMU-&gt;SetPRG_ROM8(0xC,16);<br />      EMU-&gt;SetPRG_ROM8(0xE,17);<br />      break;<br />    case 10: // 128K story + 32K interpreter<br />      story_rom_mask=0x1FFFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,16);<br />      EMU-&gt;SetPRG_ROM8(0xA,17);<br />      EMU-&gt;SetPRG_ROM8(0xC,18);<br />      EMU-&gt;SetPRG_ROM8(0xE,19);<br />      break;<br />    case 17: // 256K story + 16K interpreter<br />      story_rom_mask=0x3FFFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,32);<br />      EMU-&gt;SetPRG_ROM8(0xA,33);<br />      EMU-&gt;SetPRG_ROM8(0xC,32);<br />      EMU-&gt;SetPRG_ROM8(0xE,33);<br />      break;<br />    case 18: // 256K story + 32K interpreter<br />      story_rom_mask=0x3FFFF;<br />      EMU-&gt;SetPRG_ROM8(0x8,32);<br />      EMU-&gt;SetPRG_ROM8(0xA,33);<br />      EMU-&gt;SetPRG_ROM8(0xC,34);<br />      EMU-&gt;SetPRG_ROM8(0xE,35);<br />      break;<br />  }<br />  if(ROM-&gt;INES_CHRSize) EMU-&gt;SetCHR_ROM8(0,0);<br />  story_ram_mask=(64&lt;&lt;((ROM-&gt;INES2_PRGRAM|(ROM-&gt;INES2_PRGRAM&gt;&gt;4))&amp;15))-1;<br />  if(ROM-&gt;INES_Flags&amp;2) EMU-&gt;Set_SRAMSize(64&lt;&lt;(ROM-&gt;INES2_PRGRAM&gt;&gt;4));<br />  EMU-&gt;SetPRG_ROM4(6,story_rom_mask&gt;&gt;12);<br />  for(i=0;i&lt;64;i++) {<br />    EMU-&gt;SetPRG_ROM4(6,i&amp;(story_rom_mask&gt;&gt;12));<br />    story_rom&#91;i&#93;=EMU-&gt;GetPRG_Ptr4(6);<br />  }<br />  EMU-&gt;SetPRG_RAM4(6,story_ram_mask&gt;&gt;12);<br />  for(i=0;i&lt;64;i++) {<br />    EMU-&gt;SetPRG_RAM4(6,i&amp;(story_ram_mask&gt;&gt;12));<br />    story_ram&#91;i&#93;=EMU-&gt;GetPRG_Ptr4(6);<br />  }<br />  EMU-&gt;SetPRG_OB4(6);<br />  orig_read1=EMU-&gt;GetCPUReadHandler(1);<br />  orig_read3=EMU-&gt;GetCPUReadHandler(3);<br />  orig_read5=EMU-&gt;GetCPUReadHandler(5);<br />  orig_write1=EMU-&gt;GetCPUWriteHandler(1);<br />  orig_write3=EMU-&gt;GetCPUWriteHandler(3);<br />  orig_write5=EMU-&gt;GetCPUWriteHandler(5);<br />  EMU-&gt;SetCPUReadHandler(1,Read);<br />  EMU-&gt;SetCPUReadHandler(3,Read);<br />  EMU-&gt;SetCPUReadHandler(5,Read);<br />  EMU-&gt;SetCPUReadHandler(7,Read);<br />  EMU-&gt;SetCPUWriteHandler(1,Write);<br />  EMU-&gt;SetCPUWriteHandler(3,Write);<br />  EMU-&gt;SetCPUWriteHandler(5,Write);<br />  EMU-&gt;SetCPUWriteHandler(7,Write);<br />}<br /><br />static const MapperInfo the_mapper={<br />  .MapperId=&amp;MapperNum,<br />  .Description=_T(&quot;Famizork II&quot;),<br />  .Compatibility=COMPAT_FULL,<br />  .Load=Load,<br />  .Reset=Reset,<br />  .SaveLoad=SaveLoad,<br />};<br /><br />static void MAPINT UnloadMapper(void) {<br />  ROM=0;<br />}<br /><br />static const MapperInfo*MAPINT LoadMapper (const ROMInfo*_ROM) {<br />  ROM=_ROM;<br />  if(ROM-&gt;ROMType!=ROM_INES || ROM-&gt;INES_MapperNum!=MapperNum) {<br />    UnloadMapper();<br />    return 0;<br />  }<br />  return &amp;the_mapper;<br />}<br /><br />DLLInfo   DLL_Info={<br />  _T(&quot;famizorkii_mapper.dll by zzo38&quot;),<br />  0x20150303,<br />  0x00010000,<br />  LoadMapper,<br />  UnloadMapper<br />};<br /><br />__declspec(dllexport) void MAPINT UnloadMapperDLL (void) {<br />  EMU = NULL;<br />  hWnd = NULL;<br />}<br /><br />__declspec(dllexport) DLLInfo*MAPINT LoadMapperDLL (HWND hWndEmu, const EmulatorInterface *_EMU, int VersionRequired) {<br />  hWnd = hWndEmu;<br />  EMU = _EMU;<br />  if(VersionRequired != CurrentMapperInterface) {<br />    UnloadMapperDLL();<br />    return NULL;<br />  }<br />  return &amp;DLL_Info;<br />}<br /><br />BOOL   WINAPI   DllMain (HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)<br />{<br />   hInstance = hinstDLL;<br />   return TRUE;<br />}<br /></div>Note: I compile using GNU C on MinGW, not using Microsoft. (I didn't get any compiler errors/warnings.)<br /><br />I will also show you a few of the macros right now (maybe you can learn the working of macros in Unofficial-MagicKit then):<div class="codetitle"><b>Code:</b></div><div class="codecontent">   ; Z-character-decoding assigning macro<br />   macro def_zchars<br />   if \#=1<br />   macset 2,4,\1<br />   else<br />   macset 2,4,\2<br />   endif<br />   macset 1,4,\1<br />   macset 3,4,*<br />   macset 4,4,?B<br />   bank bank(zchad)<br />   macgoto def_zchars_0<br />   endm<br /><br />   macro def_zchars_0<br />   macset 5,4,\1=\2<br />   org zchad+\1<br />   db low(\3-1)<br />   if \3&lt;$FE01<br />   fail &quot;Z-character routine out of range&quot;<br />   endif<br />   if \3&gt;$FF00<br />   fail &quot;Z-character routine out of range&quot;<br />   endif<br />   macset 1,4,\1+1<br />   macgoto def_zchars_\5<br />   endm<br /><br />   macro def_zchars_1<br />   bank \4<br />   org \3<br />   endm<br /><br />   ; Instruction assigning macro<br />   macro def_inst<br />   macset 2,4,*<br />   macset 3,4,?B<br />   bank bank(instadl)<br />   org instadl+(\1)<br />   db low(\2-1)<br />   org instadh+(\1)<br />   db high(\2-1)<br />   bank \3<br />   org \2<br />   endm<br /><br />   macro def_inst_2op<br />   def_inst (\1)+$00<br />   def_inst (\1)+$20<br />   def_inst (\1)+$40<br />   def_inst (\1)+$60<br />   def_inst (\1)+$C0<br />   endm<br /><br />   macro def_inst_2op_eq<br />   def_inst (\1)+$00<br />   def_inst (\1)+$20<br />   def_inst (\1)+$40<br />   def_inst (\1)+$60<br />   endm<br /><br />   macro def_inst_1op<br />   def_inst (\1)+$00<br />   def_inst (\1)+$10<br />   def_inst (\1)+$20<br />   endm<br /><br />   macro def_inst_0op<br />   def_inst (\1)+$00<br />   endm<br /><br />   macro def_inst_ext<br />   def_inst (\1)+$00<br />   endm</div><br /><br />If you have other questions about Famizork II, please write it on here<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Sat Feb 28, 2015 1:28 pm</p><hr />
]]></content>
</entry>
</feed>