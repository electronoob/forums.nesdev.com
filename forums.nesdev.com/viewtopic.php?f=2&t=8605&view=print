<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Which variables should get ZeroPage priority?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Which variables should get ZeroPage priority?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8605">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8605</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zack S</b> [ Fri Feb 10, 2012 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Which variables should get ZeroPage priority?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm creating an Assembler targeted solely for nes dev and I allow variables to be defined without any address assigned to them. The compiler will then arrange them in memory as it sees fit. Which means it needs to decide which variables to stuff in the Zero Page and which don't get the privilege of residing in the ZP. (Variables can be forced in or out of the ZeroPage as well, but those don't matter here)
<br />
<br />My thought is to hand out ZeroPage locations to variables in the following order:
<br />1. Most referenced.
<br />2. Arrays
<br />3. Structures
<br />
<br />Does this make sense?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 10, 2012 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So you're trying to make an automated tool to decide whether a variable should be placed in the equivalent of ca65's "ZEROPAGE" segment or its "BSS" segment. I could see a use for that. In that case:
<br />
<br />Before 1 should be "0. Variables used with addressing modes that work only on zero page". This includes (d,x) used for pointer tables and (d),y used for pointers into big arrays.
<br />
<br />And near the bottom should be "4. Arrays that need to be aligned to the start of a 256-byte page, or arrays that need to not cross a page". Pretty much every game will use a page for the display list that gets copied to OAM through $4014. LJ65 uses two more: a page for player 1's matrix, and a page for player 2's matrix.
<br />
<br />And you may want to include a way to <a href="http://nesdev.com/bbs/viewtopic.php?t=6197" class="postlink">shuffle the allocation order at compile time</a>, so that buffer overflows become easier to spot as they spill onto different variables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Feb 10, 2012 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think it is a good idea to automatically allocate data between ZP and normal RAM. You lose important bit of control with this.
<br />
<br />And why yet another assembler, anyway? Isn't there are a lot of them already?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Feb 10, 2012 9:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think it's best left up the user honestly. With things like Tepples' mentioned (ZEROPAGE segment, or .zp for nesasm), variables can already be assigned to the zero page or not without a specific address.
<br />
<br />That said, most referenced and anything in something that will loop a lot of times should be in the zero page. Any non static RAM should be as well, because it can be reused without costing much extra. As well, any variable referenced in the NMI routine should probably get priority. 
<br />
<br />I actually <em>wouldn't</em> put arrays and structures there, because of the space they'd take up. Most of my actual arrays take an entire page/half a page/a quarter of a page, and need to be consistent across frames.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zack S</b> [ Fri Feb 10, 2012 9:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You make a very good point tepples. If STX addr0,Y or STY addr0,X is called on that variable it will need to be place in the ZP before all others.
<br />
<br />There is still the ability to mark a variable as ZP or not. Additionally you can flat out specify the address too. So #4 is already covered. I simply lock my Sprite[64] array to 0x300 or whever else I decide to store the Sprite ram for the DMA.
<br />
<br />I'll make a note about non-static variables. Right now I'm not supporting them because I don't have anything in place to prevent collisions. Definately going on the backlog though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 10, 2012 9:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The kind of arrays that would be put on zero page might include
<br /><ul><li>an array of anything with one element for each player </li><li>an array of pointers with one element for each music channel </li></ul>
<br />A static analysis of the most-referenced variables might help when trying to trim size from your code. So might an actual profile when trying to add speed to your code.
<br />
<br />There is a way to handle non-static variables, and it depends on assembling a call graph of the program. Leaf functions, those that don't call anything else, have their variables at the very start, and if function A calls function B, function A's variables come after function B's. It breaks for recursive calls, but then recursive functions should be saving things on the stack anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zack S</b> [ Fri Feb 10, 2012 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So based on everyone's feedback this is the order I think will work best:
<br />
<br />-Variables that have an address specified in the source
<br />-Variables referenced by STX zp,Y and STY zp,x must be placed in ZP (Compile error if this is not possible)
<br />-Variables marked as ZP (Compile warning for each one that doesn't fit)
<br />-Most referenced
<br />-Arrays
<br />-structures
<br />
<br />Additionally the build ouput will note how many bytes, pointers, chars, arrays, structs etc were promoted to the ZP

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Feb 10, 2012 11:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It shouldn't be that crucial either way. ZP is slightly faster and uses one less byte of memory. It's only required for certain instructions to use things like the ZP(Y) indirection. Otherwise it's just about trying to optimize performance some I suppose. Unless your project is really needing to crunch every cycle you don't need to stress about what is in ZP and what isn't. Just in general put the main variables in there. Whatever gets used the most often to improve performance some.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 10, 2012 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I default to putting everything in ZP, except for large structures and arrays, which usually fill up the other pages. Once I run out of space in ZP I start demoting some variables, but that's almost never necessary.
<br />
<br />Maybe you should be generous at first, and start demoting the variables only when ZP space runs out, based on the priorities you have set.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>