<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - VERY easy way to make code for objects</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">VERY easy way to make code for objects</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3939">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3939</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thoduv</b> [ Sun Sep 14, 2008 1:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Stopping a process isn't hard when it's an enemy, it's just stopping whenever it goes off-screen (automatically) or when the enemy is defeated and has finished exploding.<br />For non-enemy process (script, shading, ?) this would seems harder to know when they start and when they finishes. </div><br />Yeah, when graphical/game engine objects are directly tied to their coroutines, it should be easy.<br />Problems come when coroutines are only generic functions. More problems come when they need to allocate memory, or make changes that will have to be reversed when they end (may they end in unexpected conditions), etc.<br /><br />In my case, handling fadings (for example) with this system was a complete pain, because I needed to know the state of fading before starting another one: so I had to keep a pointer of the fading thread, but that way, I couldn't automatically delete the memory allocated for thread, or I will lose its state information. Moreover, I had to take care it was correctly restoring temporary palettes, to free the stack AFTER it has really finished, etc. Perhaps my design was bad after all... mmm.. perhaps I should give this method another try ?<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Could you please explain how you got rid of it and still get the features/ease of code it allows ?</div>
<br />I got rid of it at the cost of the ease of code, indeed...  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Sep 15, 2008 9:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So in summary, this method is good for enemies or other graphical events, but bad for things that should normally be done by the core game engine, right ?
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I got rid of it at the cost of the ease of code, indeed... Confused</div>
<br />So eventually you decided that handling objects with a jump table in fuction of their "state" was better than doing some kind of multithreading ?
<br />
<br />Personally, the more I think about it the more I find the jump table approach horrible. However that's what Konami and Nintendo seems to do, they LOVE using jump tables and do it all the way arround. Their game engines are all done inside the NMI routine (no main thread) and they use jump table to do different things in frame, something I tried earlier in my coding life and found absolutely horrible to do.
<br />
<br />Probably the programmers at Konami did found a programming approach to make jump tables more efficient/easier to manage, because they coded the game with the most complex gameplay at their time, containing enemies which a shielded side, enemies that follow other enemies and act togeter, and often complex interaction with the background (typically seen in games from the <em>Gradius</em> series).
<br />I feel like I missed something about jump tables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Sep 15, 2008 1:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">So in summary, this method is good for enemies or other graphical events, but bad for things that should normally be done by the core game engine, right ?</div><br />Initially I planned to use the object system only for game entities such as player, enemies, items and so on. Things like fading were hardcoded to the main loop, if not only to spare the RAM an extra object would use (I can have 32 active objects).<br /><br />But recently I read about Another World, because of all that talk about vector FMVs (revolving around Celius' engine). Well, it seems to use objects for everything, as well as a simple made up scripting language (the only programming the objects are allowed to have). Take a look at the <a href="http://www.anotherworld.fr/anotherworld_uk/another_world.htm" class="postlink">author's page</a> and you'll see (relevant part <a href="http://www.anotherworld.fr/anotherworld_uk/page_realisation.htm" class="postlink">here</a>). That seemed like a pretty simple way to code a game, although I don't think I'd have the guts to try something so extreme.<br /><br />However, that still inspired me to make more use of the object system, having it active at all times (not only during the main game), so that the title screen, title cards and other screens could benefit from it. And it seems like it's a real benefit to give tasks to individual objects instead of hardcoding loops, recycling RAM locations (since each object receives a slice of RAM, they have quite a bit to work with) and so on.<br /><br />So now I plan on having my title card elements as objects, the level loader as an object, and that will make the main code smaller and simpler. Of course there are many things that remain hardcoded. Anyway, I'm still figuring out if this will work as well as I expect. I'll let you know.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So eventually you decided that handling objects with a jump table in fuction of their "state" was better than doing some kind of multithreading ?</div><br />The Mega Drive Sonics use jump tables, and the games work quite well. I'm still not sure about the best method. The multithread way is good for objects whose code flows naturally from one part to the other. If it's not like that, You'll need a lot of JMP instructions followed by addresses that would use as much space as a jump table when added up.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">they coded the game with the most complex gameplay at their time, containing enemies which a shielded side, enemies that follow other enemies and act togeter, and often complex interaction with the background</div>
<br />Doesn't seem terribly complex to me... Following enemies could be done with a shared function that changes the coordinates of an object based on another one's, and each enemy holds the index of the one it follows in order to be able to call this routine. Interaction with the background should also use shared routines, often used by the player (usually the most complex object), but an occasional complex enemy could make use of them too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Sep 16, 2008 12:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, using multithread/object system outside of gameplay really sound weird to me. Then you're somewhat just coding an operating system and programms running into them.
<br />Yeah that would be an advantage for RAM usage, but the RAM I allocate to object have predefined uses (like Position, FrameAnimation, HitPoints, etc...) that only make sense with enemies or projectiles. I plan to use some other non-enemies and non-projectiles objects like a door that would only open on some conditions or something like that.
<br />
<br />Also the routine that draw sprites is NOT in the objects themselves for me, it's in the main code and looks at object's variable to know what to draw. I like this system, but objects that aren't supposed to be visible are forced to use an "empty" sprite, and to have a dummy value for their HP, reward score, etc... But this isn't really an issue.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 16, 2008 8:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Yeah that would be an advantage for RAM usage, but the RAM I allocate to object have predefined uses (like Position, FrameAnimation, HitPoints, etc...) that only make sense with enemies or projectiles.</div><br />I just give each object a number of bytes, how they are used is up to the objects. Of course, there are a few supporting functions that expect certain things to be on certain locations... like, an acceleration routine must have access to the object's speed, but if an object doesn't move it may use the byte normally used for speed for anything else, as long as it doesn't call the acceleration routine (and it won't, because it doesn't move).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also the routine that draw sprites is NOT in the objects themselves for me, it's in the main code and looks at object's variable to know what to draw. I like this system, but objects that aren't supposed to be visible are forced to use an "empty" sprite, and to have a dummy value for their HP, reward score, etc... But this isn't really an issue.</div>
<br />I don't have this problem because although the actual sprite drawing is not part of the object code, each object that wants to be displayed calls the routine that draws sprites sending the index of the object slot as a parameter. If they don't call the routine, they don't get drawn, it's pretty simple.
<br />
<br />I have to give objects the power to use their RAM and call supporting routines at will because there are so many kinds of objects. Some are rendered with sprites, some with background tiles, some with both, and some aren't rendered at all. Some are relative to the level, some relative to the camera (HUD elements). Each one has to know what they are and make use of the appropriate supporting routines.
<br />
<br />Maybe this is why I don't think it's weird to have the object system active during the whole game, because my objects are already pretty generic, while yours were created very specifically for in-game use.
<br />
<br />Today I coded a bit and was already able to see the benefits of incorporating some previously hardcoded behaviors as objects. Before I used some really complex code to load the level and draw the first screen, but now I use objects that take care of the heavy work of loading and drawing levels, and I can do it all inside the main loop, without a bunch of weird, repetitive surrounding code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Sep 17, 2008 9:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Who needs C++ for object-oriented programming? You're doing it in assembly!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 17, 2008 10:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah somewhat. If it can be more efficient or easier to code I have nothing against it altough I love assembly. I personally just use "objects" for enemies and simpler handling of them, not anything to do with multi-taking OS, or object oriented or anything. It's true that complex BG bosses should interact with background as well.
<br />
<br />I still find that object-oriented programming is SO different to regular assembly programming it is almost impossible to convert from one type to another (I haven't much experence with object-oriented but enough to have a small idea).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 17, 2008 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Who needs C++ for object-oriented programming? You're doing it in assembly!</div>
<br />Well, there are some similarities... for example, the shared routines used by the objects could be methods of a class the objects belong to. But there are still a lot of object oriented concepts missing, such as encapsulation. I'm trying to group all the routines and variables related to each subsystem isolated from everything else, because this is where I screwed up last time. I was messing with variables when I shouldn't, reusing RAM that wasn't yet free... So I'm trying to recode everything as object oriented as possible to avoid such problems.
<br />
<br />Like I said, it is helping a lot. But I can't have everything in the game be isolated objects, it's just not practical in assembly. The camera, the level map, and stuff like that (mostly things of which there is only one instance) must remain hardcoded into the main program.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>