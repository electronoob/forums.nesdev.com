<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Need Help With Basic Animation</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Need Help With Basic Animation</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9779">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9779</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Sun Feb 03, 2013 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi All,<br /><br />I was  hoping you guys could give me an idea on where to go with this. This is what I'm trying to accomplish, and unfortunately, my newbie feeble brain isn't yet to the task of figuring out the logic on its own. <br /><br />I'm trying to develop my first animated character. Right now my game consists of a static sprite(s) and when moved on the screen, the sprite moves position but doesn't animate. I'm trying to implement the animation.<br /><br />The animation is a simple two frame animation, when the character moves right.<br /><br />Frame one of the animation is the standing position. Frame 2 of the animation is the right leg extended out in a walking position. Then Repeat.<br /><br />My logic to accomplish this is:<br /><br />1. Prior To Reading The Controller, Set Sprite in Frame1<br />2. When Controller is read and right button is pressed, update sprite to Frame 2.<br /><br />Unfortunately, I do not know how to update the sprite back to Frame 1 while the right button is still pressed. <br /><br />Basically, when I do a read on the controller, I update all the sprites to the new vertical position and horizontal position on the screen. I also change the tile to Frame 2. In my forever loop I set the sprite to Frame1. Under this logic, Frame 1 basically overrides frame 2 so I don't see the animation. If I take the Frame 1 out of the forever loop, the character stays stuck on frame 2 while the right button is pressed rather than alternating between frame 1 and 2.<br /><br />So I guess what I'm saying is, can you give me some ideas on how to get frame 1 and 2 to alternate between each other while I'm holding down the right button?<br /><br />Here is my code. The first portion of it just updates the horizontal position of the sprites which compose the character. The code that changes the sprites of the character to frame 2 are the writes to 0221 and 0225.<br /><br />Thanks for any help. It is always highly appreciated.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;Read Right;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br /><br />&nbsp; &nbsp; lda buttons1&nbsp; &nbsp; &nbsp; &nbsp; ;load the current button state for controller1<br />&nbsp; &nbsp; and #%00000001&nbsp; &nbsp;;isolate the bit representing &quot;right&quot;, by clearing all the other bits<br />&nbsp; &nbsp; BNE UpdateDaveRight<br />&nbsp; &nbsp; JMP READRIGHTDONE&nbsp; &nbsp; &nbsp; &nbsp;;if the result was not 0, then the &quot;up&quot; bit was clear (thus not pressed), so skip the following code<br /><br />&nbsp; &nbsp; UpdateDaveRight:&nbsp; &nbsp;;code for moving paddle position up here<br />&nbsp; &nbsp; LDA $0207&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0207&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; &nbsp; LDA $020B&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $020B&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; &nbsp; LDA $020F&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $020F&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; &nbsp; LDA $0213&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0213&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; &nbsp; LDA $0217&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0217&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $021B&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $021B&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $021F&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $021F&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0223&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0223&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ;;Update Leg Tile For 0223<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; LDA #$F4<br />&nbsp; &nbsp; STA $0221<br />&nbsp; &nbsp; ;;;;;;;;;;;;;;;;<br /><br />&nbsp; &nbsp; LDA $0227&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0227&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ;;Update Leg Tile For $0227<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; LDA #$F5<br />&nbsp; &nbsp; STA $0225<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ;;;;;;;;;;;;;;;;;;;;;;;<br /><br />&nbsp; &nbsp; LDA $022B&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $022B&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sun Feb 03, 2013 8:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mysteriousity wrote:</div><div class="quotecontent">My logic to accomplish this is:<br /></div><br />I haven't accomplished this yet myself, but I think it'd be easier to think of your character as &quot;an object&quot;.  This object can have &quot;states&quot;.  One state is &quot;standing still&quot;.  Another is &quot;walking&quot;.  So instead of having the controller input directly alter the object's image [or even...position], simply have the controller input alter the object's state.  If nothing is pressed, the state becomes &quot;standing still&quot;.  If right or left is pressed, the state becomes &quot;walking&quot; perhaps with some other data indicating direction.<br /><br />Then in your game update logic you'd check the object state.  If it's &quot;walking&quot; then you keep a counter for how many frames you want one &quot;walking image&quot; displayed.  Every frame you change this counter.  When it hits 0, you change the object's &quot;walking image&quot;.<br /><br />If the object's state goes back to &quot;standing still&quot;, then you change the image to the &quot;standing still&quot; image and reset the &quot;walking frame counter&quot; so that there's no strange misstep the next time you press a direction and the character starts walking.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Feb 03, 2013 8:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's a demo of character animation in my <a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=7991&amp;hilit=simple+sprite+demo+for+teaching" class="postlink">simple sprite demo</a>. It shows how to time the frames for a walk cycle.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Sun Feb 03, 2013 9:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Appreciate it Tepples, but your code is still pretty beyond me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Sun Feb 03, 2013 9:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />CPOW<br /><br />So in trying to come up with a way to implement your logic, I made this code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;Right Leg Animation Counter<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;Player1MoveRightAnimation:<br /><br />&nbsp; &nbsp;LDX #$05<br /><br />&nbsp; &nbsp;Frame1AnimationState: ;;Frame 1 of Character.<br /><br />&nbsp; &nbsp;LDA #$F4<br />&nbsp; &nbsp;STA $0221<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #$F5<br />&nbsp; &nbsp;STA $0225<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;DEX<br />&nbsp; &nbsp;CPX #$00<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;BNE Frame1AnimationState<br /><br />&nbsp; &nbsp;LDY #$05<br />&nbsp; &nbsp;Frame2AnimationState:&nbsp; ;;Frame 2 of Character<br /><br />&nbsp; &nbsp;LDA #$F1<br />&nbsp; &nbsp;STA $0221<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #$F2<br />&nbsp; &nbsp;STA $0225<br /><br />&nbsp; &nbsp;DEY<br />&nbsp; &nbsp;CPY #$00<br />&nbsp; &nbsp;BNE Frame2AnimationState<br />&nbsp; &nbsp;<br />&nbsp; JSR Player1MoveRightAnimation</div><br /><br />The Code does actually alternate the frames (blindingly fast) but of course, crashes the program due to the JSR at the end of it.<br /><br />I'm basically using the counters to try and keep the two different states of animation timed out correctly. Any thoughts on where to go from here?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Mon Feb 04, 2013 8:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mysteriousity wrote:</div><div class="quotecontent">CPOW<br /><br />So in trying to come up with a way to implement your logic, I made this code:<br /></div><br />Nowhere in my suggestion did I say anything about looping.<br /><br />Your object state is a static thing, updated once per frame--if necessary--by controller inputs.<br /><br />Your object's movement is a set of &quot;discrete events&quot; made at frame-rate or lower to provide the illusion of movement.<br /><br />To achieve the &quot;lower than frame-rate&quot; objective, use a counter in object the that's incremented or decremented once in each NMI, for each &quot;behavior&quot; of your object that has a &quot;rate&quot; associated with it.  In your example so far you only have need for one such counter, a &quot;walking frame change&quot; counter.  Say you want the walking frame image to change at 5Hz.  Then on NTSC your counter needs to count 12 NMIs.  On PAL it needs to count 10.  It doesn't need to loop to do this...it just does it once in each NMI.  The NMI is, in some sense, a built in &quot;loop iterator&quot;.<br /><br />In your NMI routine where you collect controller inputs, if you note that the controller has gone from &quot;no movement&quot; to &quot;movement&quot;, you simply update the object's state to reflect this change.  Make no decisions in the controller input logic that are specific to the object's behavior.<br /><br />In your NMI routine where you run your object's state machine, if there's been no posted change to it of controller input, you'd simply keep doing whatever it was you'd previously been doing.  In the case of &quot;walking&quot; that'd be update the &quot;walking frame change&quot; counter and, if it's exceeded the &quot;rate&quot; threshold, change the animation frame.  No need to loop...just update the counter, update the image if the counter's hit the threshold, and get out of there.<br /><br />Then at the end of your NMI you blitz the updated RAM OAM to PPU by DMA and the PPU magically displays your object's changed state.<br /><br />No need to loop...<br /><br />I really should try this myself, though.  For now, take this as &quot;what I'd try&quot; advice with no experiential backing. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Feb 04, 2013 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />mysteriousity, if you have just performed an operation on a register or memory, the appropriate flags will be set and there is no need for a cmp #$00. So something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;DEY<br />&nbsp; &nbsp;CPY #$00<br />&nbsp; &nbsp;BNE Frame2AnimationState<br /></div><br />Can be changed to:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;DEY<br />&nbsp; &nbsp;BNE Frame2AnimationState<br /></div><br />Because DEY will set the zero flag if it results in zero.<br />As far as NMI maybe you should see: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/NMI_thread">http://wiki.nesdev.com/w/index.php/NMI_thread</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Mon Feb 04, 2013 9:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">mysteriousity, if you have just performed an operation on a register or memory, the appropriate flags will be set and there is no need for a cmp #$00. So something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;DEY<br />&nbsp; &nbsp;CPY #$00<br />&nbsp; &nbsp;BNE Frame2AnimationState<br /></div><br />Can be changed to:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;DEY<br />&nbsp; &nbsp;BNE Frame2AnimationState<br /></div><br />Because DEY will set the zero flag if it results in zero.<br />As far as NMI maybe you should see: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/NMI_thread">http://wiki.nesdev.com/w/index.php/NMI_thread</a><!-- m --></div><br /><br />Thanks Movax, that cleared up some questions I had on what the flags of the processor are doing <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Mon Feb 04, 2013 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">cpow wrote:</div><div class="quotecontent"><div class="quotetitle">mysteriousity wrote:</div><div class="quotecontent">CPOW<br /><br />So in trying to come up with a way to implement your logic, I made this code:<br /></div><br />Nowhere in my suggestion did I say anything about looping.<br /><br />Your object state is a static thing, updated once per frame--if necessary--by controller inputs.<br /><br />Your object's movement is a set of &quot;discrete events&quot; made at frame-rate or lower to provide the illusion of movement.<br /><br />To achieve the &quot;lower than frame-rate&quot; objective, use a counter in object the that's incremented or decremented once in each NMI, for each &quot;behavior&quot; of your object that has a &quot;rate&quot; associated with it.  In your example so far you only have need for one such counter, a &quot;walking frame change&quot; counter.  Say you want the walking frame image to change at 5Hz.  Then on NTSC your counter needs to count 12 NMIs.  On PAL it needs to count 10.  It doesn't need to loop to do this...it just does it once in each NMI.  The NMI is, in some sense, a built in &quot;loop iterator&quot;.<br /><br />In your NMI routine where you collect controller inputs, if you note that the controller has gone from &quot;no movement&quot; to &quot;movement&quot;, you simply update the object's state to reflect this change.  Make no decisions in the controller input logic that are specific to the object's behavior.<br /><br />In your NMI routine where you run your object's state machine, if there's been no posted change to it of controller input, you'd simply keep doing whatever it was you'd previously been doing.  In the case of &quot;walking&quot; that'd be update the &quot;walking frame change&quot; counter and, if it's exceeded the &quot;rate&quot; threshold, change the animation frame.  No need to loop...just update the counter, update the image if the counter's hit the threshold, and get out of there.<br /><br />Then at the end of your NMI you blitz the updated RAM OAM to PPU by DMA and the PPU magically displays your object's changed state.<br /><br />No need to loop...<br /><br />I really should try this myself, though.  For now, take this as &quot;what I'd try&quot; advice with no experiential backing. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /></div><br /><br /><br />OK, so on a really basic level, this is what I have set up so far. <br /><br />For Object State I've basically made two sets of graphics data. One for Frame one and Frame 2 of the MetaSprite. Shown Here.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />DaveNinjaStand:&nbsp; &nbsp; ;Dave Ninja Sprites Standing Position<br /><br />&nbsp; .db $50, $C0, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite<br />&nbsp; .db $58, $D0, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 2<br />&nbsp; .db $60, $E0, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 3<br />&nbsp; .db $68, $F0, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 4<br />&nbsp; .db $50, $C1, $02, PADDLE1X2&nbsp; &nbsp;;Dave Paddle Sprite 5<br />&nbsp; .db $58, $D1, $02, PADDLE1X2&nbsp; &nbsp;;Dave Paddle Sprite 6<br />&nbsp; .db $60, $E1, $02, PADDLE1X2&nbsp; &nbsp;;Dave Paddle Sprite 7<br />&nbsp; .db $68, $F1, $02, PADDLE1X2&nbsp; &nbsp;;Dave Paddle Sprite 8<br />&nbsp; .db $68, $F2, $02, PADDLE1X3&nbsp; &nbsp;;Dave Paddle Sprite 9<br />&nbsp; .db $60, $E2, $02, PADDLE1X3&nbsp; &nbsp;;Dave Paddle Sprite 10<br />&nbsp; <br />&nbsp;;Dave Ninja Sprites Walking Position Right (Frame 2)<br /><br />&nbsp; DaveNinjaWalkRight:&nbsp; &nbsp; ;Dave Ninja Sprites Standing Position<br /><br />&nbsp; .db $50, $C0, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite<br />&nbsp; .db $58, $D0, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 2<br />&nbsp; .db $60, $E0, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 3<br />&nbsp; .db $68, $F0, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 4<br />&nbsp; .db $50, $C1, $02, PADDLE1X2&nbsp; &nbsp;;Dave Paddle Sprite 5<br />&nbsp; .db $58, $D1, $02, PADDLE1X2&nbsp; &nbsp;;Dave Paddle Sprite 6<br />&nbsp; .db $60, $E1, $02, PADDLE1X2&nbsp; ;Dave Paddle Sprite 7<br />&nbsp; .db $68, $F4, $02, PADDLE1X2&nbsp; ;Dave Paddle Sprite 8<br />&nbsp; .db $68, $F5, $02, PADDLE1X3&nbsp; ;Dave Paddle Sprite 9<br />&nbsp; .db $60, $E2, $02, PADDLE1X3 ;Dave Paddle Sprite 10<br /><br /></div><br /><br />The horizontal and vertical positions of the sprite are being update by a series of ads in the read controller routine, as shown here. The following code updates the horizontal position of the sprite.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&nbsp;lda buttons1&nbsp; &nbsp; &nbsp; &nbsp; ;load the current button state for controller1<br />&nbsp; &nbsp; and #%00000001&nbsp; &nbsp;;isolate the bit representing &quot;right&quot;, by clearing all the other bits<br />&nbsp; &nbsp; BNE UpdateDaveRight<br />&nbsp; &nbsp; JMP READRIGHTDONE&nbsp; &nbsp; &nbsp; &nbsp;;if the result was not 0, then the &quot;up&quot; bit was clear (thus not pressed), so skip the following code<br /><br />&nbsp; &nbsp; UpdateDaveRight:&nbsp; &nbsp;;code for moving paddle position right here<br /><br />&nbsp; &nbsp; LDA $0207&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0207&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; &nbsp; LDA $020B&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $020B&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; &nbsp; LDA $020F&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $020F&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; &nbsp; LDA $0213&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0213&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; &nbsp; LDA $0217&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0217&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $021B&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $021B&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $021F&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $021F&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0223&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0223&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0227&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0227&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br />&nbsp; &nbsp; <br /><br /><br />&nbsp; &nbsp; LDA $022B&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $022B&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br /></div><br /><br />To load the graphics Into the PPU I am using the following Loops for Frame 1 and Frame 2. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ;;Load Dave Ninja Standing Sprite<br /><br />&nbsp; &nbsp; LoadDaveStandingLoop:<br />&nbsp; &nbsp; LDA DaveNinjaStand, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (sprites +&nbsp; x)<br />&nbsp; &nbsp; STA $0204, x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; store into RAM address ($0200 + x)<br />&nbsp; &nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; &nbsp; CPX #$28&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $28, decimal 40<br />&nbsp; &nbsp; BNE LoadDaveStandingLoop&nbsp; &nbsp;; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 4, keep going down<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ;;Load Dave Ninja Sprite Walk Right Frame<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; LoadDaveWalkRightLoop:<br />&nbsp; &nbsp; LDA DaveNinjaWalkRight, x<br />&nbsp; &nbsp; STA $0204, x<br />&nbsp; &nbsp; INX<br />&nbsp; &nbsp; CPX #$28<br />&nbsp; &nbsp; BNE LoadDaveWalkRightLoop<br /><br /><br /></div><br /><br />So my question is then, how do I create a counter inside the NMI that counts to 12 as you suggested, so that I can then set a flag to select the appropriate graphics update to load in frame 1 or frame 2 to the ppu?<br /><br />I'm sorry if this isn't exactly what you've explained to do. I'm hacking through it the best I can given my limited knowledge. And as always, the help is highly appreciated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Feb 05, 2013 9:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Suggestion.<br /><br />It looks like you have an object made up of a number of sprites. You probably shouldn't use the sprite OAM area as your variable for positioning the object. It may work but something like this is probably better:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&nbsp; &nbsp; SPRITE_OAM_BASE = $0200<br />&nbsp; &nbsp; SPRITE_Y = 0<br />&nbsp; &nbsp; SPRITE_TILE = 1<br />&nbsp; &nbsp; SPRITE_ATT = 2<br />&nbsp; &nbsp; SPRITE_X = 3<br />&nbsp; &nbsp; SPRITE_SIZE = 4<br /><br />UpdateDaveRight:&nbsp; &nbsp;;code for moving paddle position up here<br /><br />&nbsp; &nbsp; lda PaddleX&nbsp; &nbsp; ; create this variable for storing X<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc #4<br />&nbsp; &nbsp; sta PaddleX&nbsp; &nbsp;<br /><br />&nbsp; &nbsp; ; it looks like you have 8 sprites for your paddle<br />&nbsp; &nbsp; ; so update all sprites with x<br /><br />&nbsp; &nbsp; ldx #0<br />&nbsp; &nbsp; loop:<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; access sprite number 1's X position indexed with reg x<br />&nbsp; &nbsp; sta SPRITE_OAM_BASE + ( SPRITE_SIZE * 1 ) + SPRITE_X,&nbsp; x&nbsp; &nbsp; &nbsp; &nbsp;; save dave paddle sprite X position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$08&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 8 for next sprite X<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; cpx #8*4&nbsp; &nbsp;; 7 * 4 = total 28 or $1C, $0207 + $1C = $0223, so one more than that<br />&nbsp; &nbsp; bcc loop<br /><br /></div><br /><br />As far as NMI, update a counter in NMI. The logic is:<br /><br />- Set counter to a value (number of frames per change, so approx in 60ths of a second)<br />- Every NMI, decrement that value<br />- If it is zero, set a flag that the frame should change, and reset the counter<br />- Later when you check that the flag is set, change the frames.<br /><br />OR<br /><br />You can setup a framecounter variable that is incremented every frame and check against a mask:<br /><br />Framecounter AND #%00001000 -&gt; This would be 'true' (non-zero, so bne would branch) for 8 frames and 'false' (zero) for 8 frames. So you could select a frame based on that if you are moving. This method is limited to what information you can get from masking the counter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Feb 05, 2013 11:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For testing purposes, it's fine to hardcode incrementing the X/Y coordinates of a sprite on button press. However, this is typically not how metasprites move in games.<br /><br />What I would recommend doing is storing the coordinates of the entire object somewhere in RAM outside of the OAM page. On a button press, adjust these coordinates as needed. These coordinates will not be bound to anything on the screen, but what you'd do is every frame, redraw each individual sprite in the metasprite based on those &quot;object coordinates&quot;. It's a hard concept to understand at first, but it's important as no game logic should be tied directly to hardware sprites*. Move the object, then figure out later how you are going to draw it. Do not assume you know how the object looked the previous frame; redraw it as if the object weren't even there before.<br /><br /><br />*Except for sprite #0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Feb 05, 2013 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mysteriousity wrote:</div><div class="quotecontent">The horizontal and vertical positions of the sprite are being update by a series of ads in the read controller routine</div><br />I know this is not directly related to your current problem, but this is not advised. From now on, try to separate the different areas of your program. Input routines should only read the controllers and store the data somewhere for later use, nothing else. If you mix input with game logic in the same routine you'll have a really hard time maintaining this code later on.<br /><br />Similarly, graphics shouldn't be hardwired to OAM positions either. Sprites should be the graphical representation of a game object, not the game object itself. So yes, like other said, you should store player information (coordinates, health, animation frame, etc.) elsewhere, and only after all motion has been calculated by the game logic you would translate that information into sprite entries. This is how &quot;real&quot; games (NES or otherwise) work.<br /><br />It's OK if you don't want to worry about this now, since you are just beginning, but keep in mind that you will eventually need to separate things if you expect to get anywhere. Those blobs of mixed code are OK for simple demos, but when games start becoming larger they just become impossible to maintain. Even sprite animation, which is your current problem, becomes easier when you modularize things.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So my question is then, how do I create a counter inside the NMI that counts to 12 as you suggested, so that I can then set a flag to select the appropriate graphics update to load in frame 1 or frame 2 to the ppu?</div><br />As almost everything in games, animation frames are controlled by states, so you need a few variables to keep track of the current animation state. You need at least 2 variables, one that indicates which is the current frame and another that indicates how long this frame should stay active before you switch to the other one. If you want to switch between standing and walking, you also need another state variable indicating what the player is currently doing. Normally this would begin as &quot;standing&quot;, and would change to &quot;walking&quot; based on input. At the same time as the state changes to &quot;walking&quot;, the frame and the counter need to be set. Then, every NMI, decrement the counter, and whenever it expires, switch to the next frame and reset the counter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Wed Feb 13, 2013 9:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help With Basic Animation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you everyone for the help. With the help of a friend I was able to put together some code that basically accomplishes what I was trying to do. Based on your advice here, its really not the best way to do it, as modifying it is a pain in the ass, and in the future I hope to be able to code in a more &quot;object oriented&quot; fashion as others have suggested. Still, I think its good to post the code so others can see it.<br /><br />First off it requires some variables as shown here:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;Ninja Slap Animation<br /><br />dave_slap_animation&nbsp; .rs 1<br />DAVE_SLAP_ANIMATION_FRAMES = $02<br />DAVE_SLAP_FRAMECOUNT = $02<br /></div><br /><br />Then this is the code to make the animation happen. It has a delay counter built in to slow the animation down or speed it up if need be.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Dave_Slap:<br /><br />&nbsp; INC dave_slap_framecount<br />&nbsp; LDA dave_slap_framecount<br />&nbsp; CMP #DAVE_SLAP_FRAMECOUNT<br />&nbsp; BCC .rts<br />.reset_framecount:<br />&nbsp; LDA #$00<br />&nbsp; STA dave_slap_framecount<br /><br />.animate:<br />&nbsp; LDY dave_slap_animation<br />&nbsp; CPY #DAVE_SLAP_ANIMATION_FRAMES<br />&nbsp; BCC .load_frames<br />.reset:<br />&nbsp; LDA #$00<br />&nbsp; STA dave_slap_animation<br /><br />.load_frames:<br />&nbsp; LDY dave_slap_animation<br />&nbsp; LDA daveslap_anim_index, y<br />&nbsp; TAX<br />&nbsp; LDY #$00<br />.loop:<br />&nbsp; LDA daveslap_anim_frames, x<br />&nbsp; STA $021D, y&nbsp; ;;;CHANGE THIS!!!!<br />&nbsp; INY<br />&nbsp; INY<br />&nbsp; INY<br />&nbsp; INY<br />&nbsp; INX<br />&nbsp; CPY #$28<br />&nbsp; BCC .loop<br />&nbsp; INC dave_slap_animation<br />&nbsp; <br /><br />.rts<br />&nbsp; &nbsp; RTS<br /><br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>