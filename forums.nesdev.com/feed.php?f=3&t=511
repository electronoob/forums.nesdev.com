<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=511" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2005-08-29T10:41:37-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=511</id>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2005-08-29T10:41:37-07:00</updated>
<published>2005-08-29T10:41:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=511&amp;p=4140#p4140</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=4140#p4140"/>
<title type="html"><![CDATA[Caching Optimization for CHR Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=4140#p4140"><![CDATA[
It definitely needed some help from the graphics card to run well. The data stays planar all the way to the backend, and the sprite/bg interaction is dealt with 32 pixels at a time in a tight logic op loop.<br /><br />As it turns out, this just results in most of the time getting spent converting from planar to chunky. I was trying to get the transparency handling as slim as possible, and also try and eliminate a lot of the BG fetch logic for the trivial cases. If I went back to do it all over, I'd probably just use OpenGL to handle things.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Mon Aug 29, 2005 10:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-08-25T17:44:06-07:00</updated>
<published>2005-08-25T17:44:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=511&amp;p=4061#p4061</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=4061#p4061"/>
<title type="html"><![CDATA[Caching Optimization for CHR Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=4061#p4061"><![CDATA[
<div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent"><br />The crazy idea I was kicking about at the time involved caching entire screen lines, to try and take advantage of the fact that most of the time the BG lines aren't changing that often...<br /></div><br /><br />Interesting. With this you'd invalidate the cache when the nametable or pattern table was changed.<br /><br />I've found that drawing tiles is actually faster than a simple pixel copy, due to the higher memory bandwidth used by the latter and modern processors being "faster" than memory. With tiles you get the advantage of cached access for often-used tiles and smaller source data (if tiles are packed). Caching the background might be faster if the graphics card is used to compose the screen.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Aug 25, 2005 5:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-08-22T15:29:19-07:00</updated>
<published>2005-08-22T15:29:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3984#p3984</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3984#p3984"/>
<title type="html"><![CDATA[Caching Optimization for CHR Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3984#p3984"><![CDATA[
Well, RockNES uses CHR caching since year ~2000 I guess. ^_^;; Like blargg wrote, CHR-ROM requires full decoding once, CHR-RAM is dynamic. Of course you could map out the ROM, but it would be a pain in the neck. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> For every tile written into VRAM space, it's decoded &amp; stored. I don't know if this is the best/alternate way, but it saves CPU time.<p>Statistics: Posted by Guest — Mon Aug 22, 2005 3:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Nessie]]></name></author>
<updated>2005-08-22T13:11:02-07:00</updated>
<published>2005-08-22T13:11:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3980#p3980</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3980#p3980"/>
<title type="html"><![CDATA[Caching Optimization for CHR Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3980#p3980"><![CDATA[
Perhaps one could convert each tile to a DirectDraw surface and render them even faster... Sprite priority, sprite #0 and the sprite overflow flag would be somewhat tricky to implement though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=12">Nessie</a> — Mon Aug 22, 2005 1:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2005-08-22T12:52:16-07:00</updated>
<published>2005-08-22T12:52:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3978#p3978</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3978#p3978"/>
<title type="html"><![CDATA[Caching Optimization for CHR Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3978#p3978"><![CDATA[
I did something similar back in the stone age. I found it worked beautifully for most of the CHR-RAM games.<br /><br />I put off predecoding the CHR-ROM, as I worked in 32bpp.<br /><br />The crazy idea I was kicking about at the time involved caching entire screen lines, to try and take advantage of the fact that most of the time the BG lines aren't changing that often...<br /><br />Never really got around to implementing it though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Mon Aug 22, 2005 12:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-08-22T10:40:26-07:00</updated>
<published>2005-08-22T10:40:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3974#p3974</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3974#p3974"/>
<title type="html"><![CDATA[Caching Optimization for CHR Rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=511&amp;p=3974#p3974"><![CDATA[
CHR data is rendered to the screen vastly more often than it is changed, so it makes sense for a NES emulator to store it in a format best suited to rendering. In my experimental NES emulator I've optimized CHR rendering (background and sprites) by caching an optimized representation of CHR data and updating it whenever CHR data changes. The cache has two main aspects: determining when it needs updating, and the format of the cached data.<br /><br />The cache stores a transformation of the CHR data, so it needs to be updated whenever CHR data changes. This is handled by keeping a flag for each tile and setting it when that tile's data is written to. A global flag is also kept to indicate whether any CHR changes have occurred since the cache was last updated. Then when CHR rendering is about to occur the cache is updated if necessary.<br /><br />For CHR ROM the cache only needs to be generated once since the data will never change. Bank switching in the CHR area (PPU $0-$1FFF) doesn't matter since the cache is of the actual CHR data in VRAM or VROM, not of what the PPU sees with current mapping.<br /><br />In my emulator I render graphics to an offscreen graphics buffer with 8 bits per pixel. I use palette entries 32-63 for the 32 NES palette entries, leaving room for the host system at the beginning of the palette. The cached CHR data is just a reordering of the original data to allow shifting and masking to quickly generate the 8-bit-per-pixel format. This keeps the cached data to a minimum size, lessening impact on the host's processor cache. There is also a separate cache with pixels horizontally flipped.<br /><br />Each cached tile consists of four pairs of lines, and each pair is stored in a 4-byte integer. The 2-bit pixels for the two lines are reordered in the cache to allow for quick extraction:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">12345678          CHR pixels &#40;2 bits per pixel&#41;<br />ABCDEFGH<br /><br />A1E5B2F6C3G7D4H8  Cache &#40;4 bytes&#41;<br />-1---2---3---4--  Masked pixels<br />---5---6---7---8<br />A---B---C---D---<br />--E---F---G---H-<br /><br />uint32_t* pixels = ...                       // pixel buffer to draw into<br />uint32_t mask = 0x03030303;                  // mask to extract pixels<br />int attrib = 2;                              // attribute bits &#40;0-3&#41;<br />uint32_t offset = &#40;8 + attrib&#41; * 0x04040404; // distribute to 4 pixels<br /><br />uint32_t pair = *cache++;                    // read pair of lines from cache<br />pixels &#91;0&#93; = &#40;&#40;pair &gt;&gt; 4&#41; &amp; mask&#41; + offset;  // extract pixels 1234<br />pixels &#91;1&#93; = &#40;&#40;pair &gt;&gt; 0&#41; &amp; mask&#41; + offset;  // extract pixels 5678<br />pixels += pitch;                             // next line<br />pixels &#91;0&#93; = &#40;&#40;pair &gt;&gt; 6&#41; &amp; mask&#41; + offset;  // extract pixels ABCD<br />pixels &#91;1&#93; = &#40;&#40;pair &gt;&gt; 2&#41; &amp; mask&#41; + offset;  // extract pixels EFGH<br />pixels += pitch;                             // next line<br /></div><br /><br />On a 64-bit CPU, groups of four lines (rather than two) could be stored in each cache word, doubling the performance.<br /><br />To handle masked graphics, the mask can be efficiently calculated from the pixels by subtracting the base pixels (before offset) from 0x80808080 and shifting right by 2. The result will have the lower 5 bits clear for transparent pixels and set for opaque pixels; the upper bits don't matter because those are always zero. For example, (0x80808080 - 0x02030001) &gt;&gt; 2 = 0x1F9F601F.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint32_t bg = *pixels;                           // get background pixels<br />uint32_t sp = &#40;line &gt;&gt; 4&#41; &amp; cache_mask;          // extract sprite pixels<br />uint32_t mask = 0x80808080 - sp;                 // calculate mask<br />*pixels = &#40;&#40;sp + offset&#41; &amp; mask&#41; | &#40;bg &amp; ~mask&#41;; // combine sprite and background<br /></div><br /><br />My emulator only handles PPU changes every 8 scanlines. Relaxing this to each scanline wouldn't be too complex. Handling mid-line changes would probably be simpler to handle without using the cache at all.<br /><br />For completeness, here is a function that converts CHR data to the cached format:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Expands each of the 8 bits in n into separate nybbles of result.<br />// In: 12345678  Out: 0x15263748<br />uint32_t expand&#40; uint32_t n &#41;<br />&#123;<br />    //                         12345678<br />    //                  12345678<br />    //           12345678<br />    //    12345678<br />    // ---1---5---2---6---3---7---4---8<br />    return &#40;&#40;n &lt;&lt; 21&#41; | &#40;n &lt;&lt; 14&#41; | &#40;n &lt;&lt; 7&#41; | n&#41; &amp; 0x11111111;<br />&#125;<br /><br />void convert_tile&#40; const uint8_t* chr, uint32_t* cache &#41;<br />&#123;<br />    // convert one chr tile to a cached tile<br />    for &#40; int n = 4; n--; &#41;<br />    &#123;<br />        *cache++ =  &#40;expand&#40; chr &#91;0&#93; &#41; &lt;&lt; 0&#41; |<br />                    &#40;expand&#40; chr &#91;8&#93; &#41; &lt;&lt; 1&#41; |<br />                    &#40;expand&#40; chr &#91;1&#93; &#41; &lt;&lt; 2&#41; |<br />                    &#40;expand&#40; chr &#91;9&#93; &#41; &lt;&lt; 3&#41;;<br />        chr += 2;<br />    &#125;<br />&#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Aug 22, 2005 10:40 am</p><hr />
]]></content>
</entry>
</feed>