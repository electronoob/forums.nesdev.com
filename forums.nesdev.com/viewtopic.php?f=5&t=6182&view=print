<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - [C] right shifting an int number</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">[C] right shifting an int number</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=6182">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=6182</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Mar 16, 2010 4:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>[C] right shifting an int number</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- From what I know, for an integer number (let's say 32bit long), the MSB is 1 if the value is negative; else, equals to 0.
<br />
<br />- By using a shifting decay, like value -= value &gt;&gt; n; does the MSB take effect? In code:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;let's say the binary 1000 0000 0000 0000 0000 0000 0000 0000<br /><br />would right shift 1 result... 0100 0000 0000 0000 0000 0000 0000 0000 ?</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 16, 2010 4:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This behavior is implementation-defined. You cannot rely on it if you expect your program to be portable to all platforms capable of running C or C++ programs.
<br />
<br />But if you care only about popular compilers for popular architectures (x86, PowerPC, ARM), operator &gt;&gt; behaves as follows: <ul><li>Shifting an unsigned integer zero-extends the result. </li><li>Shifting a signed integer sign-extends the result. </li><li>Both shifts "round" toward negative infinity. </li></ul>
<br />You'll want to use a compile-time assertion in any module that relies on this theoretically nonportable behavior.
<br />
<br />But your shifting decay itself looks suspect. Ask yourself this: what happens once it gets within (1&lt;&lt;n) of the zero? The behavior becomes inconsistent for positive and negative numbers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Mar 16, 2010 5:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want a portable semi-equivalent, divide by 2. A smart compiler will convert a divide by 2 into a shift and round internally.
<br />
<br />If you must have a shift but want it portable and don't trust the compiler to optimize /2, convert to offset binary, shift right, then convert back to signed (you might note that the last operation is equivalent to sign the last step of sign extension on the <a href="http://graphics.stanford.edu/~seander/bithacks.html#VariableSignExtend" class="postlink">Bit Twiddling Hacks page</a>):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// equivalent to i&gt;&gt;1 with sign preservation, without depending on<br />// host platform performing said preservation. Can be generalized<br />// to i&gt;&gt;n easily.<br />inline int fast_right_shift&#40; int i &#41;<br />&#123;<br />&nbsp; &nbsp; // i: INT_MIN&nbsp; &nbsp;...&nbsp; &nbsp;-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;... INT_MAX<br />&nbsp; &nbsp; unsigned u = &#40;unsigned&#41; i; // no-op on most CPUs<br />&nbsp; &nbsp; // u: INT_MAX+1 ... UINT_MAX&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;... INT_MAX<br />&nbsp; &nbsp; u += &#40;unsigned&#41; INT_MIN;<br />&nbsp; &nbsp; // u: 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;... INT_MAX&nbsp; &nbsp;INT_MAX+1&nbsp; &nbsp; &nbsp;... UINT_MAX<br />&nbsp; &nbsp; u &gt;&gt;= 1;<br />&nbsp; &nbsp; // u: 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;... INT_MAX/2 &#40;INT_MAX+1&#41;/2 ... UINT_MAX/2<br />&nbsp; &nbsp; i = &#40;int&#41; u - &#40;int&#41; &#40;&#40;unsigned&#41; INT_MIN &gt;&gt; 1&#41;;<br />&nbsp; &nbsp; // i: INT_MIN/2 ...&nbsp; &nbsp;-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;... INT_MAX/2<br />&nbsp; &nbsp; return i;<br />&#125;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Thu Mar 18, 2010 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In C (and C++) you can just right shift an ordinary signed integral type, it will extend the sign bit (MSB) and the value will be rounded toward negative infinity (that is, -1 &gt;&gt; 1 == 1) -- what you could call a ASR. If you right shift a unsigned integral type though, it will just put a zero at the MSB -- like a LSR.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Mar 18, 2010 10:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent">In C (and C++) you can just right shift an ordinary signed integral type, it will extend the sign bit (MSB) and the value will be rounded toward negative infinity (that is, -1 &gt;&gt; 1 == 1) -- what you could call a ASR.</div>
<br />That's implementation-defined, as tepples noted. You could just as well have -1&gt;&gt;1 == INT_MAX. If you want divide by two, write i/2 (unfortunately C99 has standardized on round to zero, rather than the more useful round to negative, which can be implemented by ASR).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>