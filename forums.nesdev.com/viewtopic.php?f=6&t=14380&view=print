<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Help with playing .nsf music in a homebrew project.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Help with playing .nsf music in a homebrew project.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=14380">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=14380</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 11:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey guys. I need help with playing my .nsf song made in Famitracker in my project.  I have followed all the instructions on <a href="http://forums.nesdev.com/viewtopic.php?t=2026" class="postlink">http://forums.nesdev.com/viewtopic.php?t=2026</a>. Including removing the 128-byte header of the NSF. I don't know if I did that right though so if anyone can give me a brief explanation on how to do that, that'd be great! My load, init, and play addresses are as follows, $E6A0, $99A9, and $9CA9. I'm following the background tutorial of Nerdy Nights for the base of my game just in case anybody needs to know that.<br /><br />Here's my code,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .ineschr 1&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; .inesmap 0&nbsp; &nbsp;; mapper 0 = NROM, no bank swapping<br />&nbsp; .inesmir 1&nbsp; &nbsp;; background mirroring<br />&nbsp; <br /><br />;;;;;;;;;;;;;;;<br /><br />&nbsp; .org $E6A0<br />&nbsp; .incbin &quot;fnaf.nsf&quot;<br />&nbsp; .bank 0<br />&nbsp; .org $C000<br />RESET:<br />&nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable IRQs<br />&nbsp; CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; LDX #$40<br />&nbsp; STX $4017&nbsp; &nbsp; ; disable APU frame IRQ<br />&nbsp; LDX #$FF<br />&nbsp; TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; STX $2000&nbsp; &nbsp; ; disable NMI<br />&nbsp; STX $2001&nbsp; &nbsp; ; disable rendering<br />&nbsp; STX $4010&nbsp; &nbsp; ; disable DMC IRQs<br />&nbsp; lda #$01&nbsp; &nbsp;;or whatever number song you want<br />&nbsp; jsr $99A9<br /><br />vblankwait1:&nbsp; &nbsp; &nbsp; &nbsp;; First wait for vblank to make sure PPU is ready<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait1<br /><br />clrmem:<br />&nbsp; LDA #$00<br />&nbsp; STA $0000, x<br />&nbsp; STA $0100, x<br />&nbsp; STA $0300, x<br />&nbsp; STA $0400, x<br />&nbsp; STA $0500, x<br />&nbsp; STA $0600, x<br />&nbsp; STA $0700, x<br />&nbsp; LDA #$FE<br />&nbsp; STA $0200, x<br />&nbsp; INX<br />&nbsp; BNE clrmem<br />&nbsp; &nbsp;<br />vblankwait2:&nbsp; &nbsp; &nbsp; ; Second wait for vblank, PPU is ready after this<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait2<br /><br /><br />LoadPalettes:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$3F<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $3F00 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $3F00 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadPalettesLoop:<br />&nbsp; LDA palette, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (palette + the value in x)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 1st time through loop it will load palette+0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2nd time through loop it will load palette+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3rd time through loop it will load palette+2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; etc<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites<br />&nbsp; BNE LoadPalettesLoop&nbsp; ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 32, keep going down<br /><br /><br /><br />LoadSprites:<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start at 0<br />LoadSpritesLoop:<br />&nbsp; LDA sprites, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (sprites +&nbsp; x)<br />&nbsp; STA $0200, x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; store into RAM address ($0200 + x)<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $10, decimal 16<br />&nbsp; BNE LoadSpritesLoop&nbsp; &nbsp;; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 16, keep going down<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />LoadBackground:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$20<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $2000 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $2000 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadBackgroundLoop:<br />&nbsp; LDA background, x&nbsp; &nbsp; &nbsp;; load data from address (background + the value in x)<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $80, decimal 128 - copying 128 bytes<br />&nbsp; BNE LoadBackgroundLoop&nbsp; ; Branch to LoadBackgroundLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 128, keep going down<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />LoadAttribute:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$23<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $23C0 address<br />&nbsp; LDA #$C0<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $23C0 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadAttributeLoop:<br />&nbsp; LDA attribute, x&nbsp; &nbsp; &nbsp; ; load data from address (attribute + the value in x)<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $08, decimal 8 - copying 8 bytes<br />&nbsp; BNE LoadAttributeLoop&nbsp; ; Branch to LoadAttributeLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 128, keep going down<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />&nbsp; STA $2000<br /><br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br /><br />Forever:<br />&nbsp; JMP Forever&nbsp; &nbsp; &nbsp;;jump back to Forever, infinite loop<br />&nbsp; <br />&nbsp;<br /><br />NMI:<br />&nbsp; LDA #$00<br />&nbsp; STA $2003&nbsp; &nbsp; &nbsp; &nbsp;; set the low byte (00) of the RAM address<br />&nbsp; LDA #$02<br />&nbsp; STA $4014&nbsp; &nbsp; &nbsp; &nbsp;; set the high byte (02) of the RAM address, start the transfer<br />&nbsp; jsr $9CA9<br /><br /><br />LatchController:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016&nbsp; &nbsp; &nbsp; &nbsp;; tell both the controllers to latch buttons<br /><br /><br />ReadA: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - A<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadADone&nbsp; &nbsp;; branch to ReadADone if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0203&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0203&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadADone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br />&nbsp; <br /><br />ReadB: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - B<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadBDone&nbsp; &nbsp;; branch to ReadBDone if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0203&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure carry flag is set<br />&nbsp; SBC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0203&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadBDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br /><br />&nbsp; ;;This is the PPU clean up section, so rendering the next frame starts properly.<br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />&nbsp; STA $2000<br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br />&nbsp; LDA #$00&nbsp; &nbsp; &nbsp; &nbsp; ;;tell the ppu there is no background scrolling<br />&nbsp; STA $2005<br />&nbsp; STA $2005<br />&nbsp; <br />&nbsp; RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; return from interrupt<br />&nbsp;<br />;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 1<br />&nbsp; .org $E000<br />palette:<br />&nbsp; .db $22,$29,$1A,$0F,&nbsp; $22,$36,$17,$0F,&nbsp; $22,$30,$21,$0F,&nbsp; $22,$27,$17,$0F&nbsp; &nbsp;;;background palette<br />&nbsp; .db $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C,&nbsp; $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C&nbsp; &nbsp;;;sprite palette<br /><br />sprites:<br />&nbsp; &nbsp; &nbsp;;vert tile attr horiz<br />&nbsp; .db $80, $32, $00, $80&nbsp; &nbsp;;sprite 0<br />&nbsp; .db $80, $33, $00, $88&nbsp; &nbsp;;sprite 1<br />&nbsp; .db $88, $34, $00, $80&nbsp; &nbsp;;sprite 2<br />&nbsp; .db $88, $35, $00, $88&nbsp; &nbsp;;sprite 3<br /><br /><br />background:<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;row 1<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;all sky<br /><br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;row 2<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;all sky<br /><br />&nbsp; .db $24,$24,$24,$24,$45,$45,$24,$24,$45,$45,$45,$45,$45,$45,$24,$24&nbsp; ;;row 3<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$53,$54,$24,$24&nbsp; ;;some brick tops<br /><br />&nbsp; .db $24,$24,$24,$24,$47,$47,$24,$24,$47,$47,$47,$47,$47,$47,$24,$24&nbsp; ;;row 4<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$55,$56,$24,$24&nbsp; ;;brick bottoms<br /><br />attribute:<br />&nbsp; .db %00000000, %00010000, %01010000, %00010000, %00000000, %00000000, %00000000, %00110000<br /><br />&nbsp; .db $24,$24,$24,$24, $47,$47,$24,$24 ,$47,$47,$47,$47, $47,$47,$24,$24 ,$24,$24,$24,$24 ,$24,$24,$24,$24, $24,$24,$24,$24, $55,$56,$24,$24&nbsp; ;;brick bottoms<br /><br /><br /><br />&nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens (once per frame if enabled) the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br />&nbsp; <br />&nbsp; <br />;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 2<br />&nbsp; .org $0000<br />&nbsp; .incbin &quot;fnaf.chr&quot;&nbsp; &nbsp;;includes 8KB graphics file from SMB1</div><br /><br />Any sort of help would be much appreciated!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Spoiler Alert! I'm porting Five Nights at Freddy's to the NES! Even if you hate FNaF though, please still help me if you can because I'll be able to use this knowledge towards other projects as well. Thanks in advance!

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> Here's a download link to my edited .nsf after removing the header. So anybody who can, can check to see if I did it right! Thanks to whoever does it!</span><br />
		
			<span class="genmed">
				<img src="./images/upload_icons/mid.gif" alt="" /> 
				<a href="./download/file.php?id=5986">fnaf.nsf</a> [7.28 KiB]
			</span><br />
			<span class="gensmall">Downloaded 83 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> Here's a download link to my original .nsf without removing the header. So anybody who can, can check to see if my three addresses are right. Thanks to whoever does it!</span><br />
		
			<span class="genmed">
				<img src="./images/upload_icons/mid.gif" alt="" /> 
				<a href="./download/file.php?id=5985">FNaFSong.nsf</a> [9.28 KiB]
			</span><br />
			<span class="gensmall">Downloaded 84 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jun 09, 2016 12:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mariogamemaster wrote:</div><div class="quotecontent">My load, init, and play addresses are as follows, $E6A0, $99A9, and $9CA9.</div><br />You've misread all three of these with the wrong endian. Your LOAD/INIT/PLAY are: $A0E6, $A999, and $A99C.<br /><br />The big hint here is that LOAD should be lower than INIT and PLAY, otherwise INIT/PLAY would be pointing to empty space. There is format reference here, if you need it: <a href="http://wiki.nesdev.com/w/index.php/NSF#Header_Overview" class="postlink">http://wiki.nesdev.com/w/index.php/NSF#Header_Overview</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 12:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><div class="quotetitle">mariogamemaster wrote:</div><div class="quotecontent">My load, init, and play addresses are as follows, $E6A0, $99A9, and $9CA9.</div><br />You've misread all three of these with the wrong endian. Your LOAD/INIT/PLAY are: $A0E6, $A999, and $A99C.<br /><br />The big hint here is that LOAD should be lower than INIT and PLAY, otherwise INIT/PLAY would be pointing to empty space. There is format reference here, if you need it: <a href="http://wiki.nesdev.com/w/index.php/NSF#Header_Overview" class="postlink">http://wiki.nesdev.com/w/index.php/NSF#Header_Overview</a></div><br /><br />Thanks man! Gonna try out the new addresses right now! I'll tell ya if it works!<br />EDIT: It didn't work. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> Is there anything else I'm doing wrong? <br /><br />Here's my new code,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .ineschr 1&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; .inesmap 0&nbsp; &nbsp;; mapper 0 = NROM, no bank swapping<br />&nbsp; .inesmir 1&nbsp; &nbsp;; background mirroring<br />&nbsp; <br /><br />;;;;;;;;;;;;;;;<br /><br /><br />&nbsp; .bank 0<br />&nbsp; .org $A0E6<br />&nbsp; .incbin &quot;fnaf.nsf&quot;<br />&nbsp; .org $C000<br />RESET:<br />&nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable IRQs<br />&nbsp; CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; LDX #$40<br />&nbsp; STX $4017&nbsp; &nbsp; ; disable APU frame IRQ<br />&nbsp; LDX #$FF<br />&nbsp; TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; STX $2000&nbsp; &nbsp; ; disable NMI<br />&nbsp; STX $2001&nbsp; &nbsp; ; disable rendering<br />&nbsp; STX $4010&nbsp; &nbsp; ; disable DMC IRQs<br />&nbsp; lda #$01&nbsp; &nbsp;;or whatever number song you want<br />&nbsp; jsr $A999<br /><br /><br />vblankwait1:&nbsp; &nbsp; &nbsp; &nbsp;; First wait for vblank to make sure PPU is ready<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait1<br /><br />clrmem:<br />&nbsp; LDA #$00<br />&nbsp; STA $0000, x<br />&nbsp; STA $0100, x<br />&nbsp; STA $0300, x<br />&nbsp; STA $0400, x<br />&nbsp; STA $0500, x<br />&nbsp; STA $0600, x<br />&nbsp; STA $0700, x<br />&nbsp; LDA #$FE<br />&nbsp; STA $0200, x<br />&nbsp; INX<br />&nbsp; BNE clrmem<br />&nbsp; &nbsp;<br />vblankwait2:&nbsp; &nbsp; &nbsp; ; Second wait for vblank, PPU is ready after this<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait2<br /><br /><br />LoadPalettes:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$3F<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $3F00 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $3F00 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadPalettesLoop:<br />&nbsp; LDA palette, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (palette + the value in x)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 1st time through loop it will load palette+0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2nd time through loop it will load palette+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3rd time through loop it will load palette+2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; etc<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 <br /><br />sprites<br />&nbsp; BNE LoadPalettesLoop&nbsp; ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 32, keep going down<br /><br /><br /><br />LoadSprites:<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start at 0<br />LoadSpritesLoop:<br />&nbsp; LDA sprites, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (sprites +&nbsp; x)<br />&nbsp; STA $0200, x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; store into RAM address ($0200 + x)<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $10, decimal 16<br />&nbsp; BNE LoadSpritesLoop&nbsp; &nbsp;; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 16, keep going down<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />LoadBackground:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$20<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $2000 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $2000 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadBackgroundLoop:<br />&nbsp; LDA background, x&nbsp; &nbsp; &nbsp;; load data from address (background + the value in x)<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $80, decimal 128 - copying 128 bytes<br />&nbsp; BNE LoadBackgroundLoop&nbsp; ; Branch to LoadBackgroundLoop if compare was Not Equal to <br /><br />zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 128, keep going down<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />LoadAttribute:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$23<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $23C0 address<br />&nbsp; LDA #$C0<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $23C0 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadAttributeLoop:<br />&nbsp; LDA attribute, x&nbsp; &nbsp; &nbsp; ; load data from address (attribute + the value in x)<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $08, decimal 8 - copying 8 bytes<br />&nbsp; BNE LoadAttributeLoop&nbsp; ; Branch to LoadAttributeLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 128, keep going down<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern <br /><br />Table 1<br />&nbsp; STA $2000<br /><br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br /><br />Forever:<br />&nbsp; JMP Forever&nbsp; &nbsp; &nbsp;;jump back to Forever, infinite loop<br />&nbsp; <br />&nbsp;<br /><br />NMI:<br />&nbsp; LDA #$00<br />&nbsp; STA $2003&nbsp; &nbsp; &nbsp; &nbsp;; set the low byte (00) of the RAM address<br />&nbsp; LDA #$02<br />&nbsp; STA $4014&nbsp; &nbsp; &nbsp; &nbsp;; set the high byte (02) of the RAM address, start the transfer<br />&nbsp; jsr $A99C<br /><br /><br />LatchController:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016&nbsp; &nbsp; &nbsp; &nbsp;; tell both the controllers to latch buttons<br /><br /><br />ReadA: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - A<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadADone&nbsp; &nbsp;; branch to ReadADone if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0203&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0203&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadADone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br />&nbsp; <br /><br />ReadB: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - B<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadBDone&nbsp; &nbsp;; branch to ReadBDone if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0203&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure carry flag is set<br />&nbsp; SBC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0203&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadBDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br /><br />&nbsp; ;;This is the PPU clean up section, so rendering the next frame starts properly.<br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern <br /><br />Table 1<br />&nbsp; STA $2000<br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br />&nbsp; LDA #$00&nbsp; &nbsp; &nbsp; &nbsp; ;;tell the ppu there is no background scrolling<br />&nbsp; STA $2005<br />&nbsp; STA $2005<br />&nbsp; <br />&nbsp; RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; return from interrupt<br />&nbsp;<br />;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 1<br />&nbsp; .org $E000<br />palette:<br />&nbsp; .db $22,$29,$1A,$0F,&nbsp; $22,$36,$17,$0F,&nbsp; $22,$30,$21,$0F,&nbsp; $22,$27,$17,$0F&nbsp; &nbsp;<br /><br />;;background palette<br />&nbsp; .db $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C,&nbsp; $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C&nbsp; &nbsp;;;sprite <br /><br />palette<br /><br />sprites:<br />&nbsp; &nbsp; &nbsp;;vert tile attr horiz<br />&nbsp; .db $80, $32, $00, $80&nbsp; &nbsp;;sprite 0<br />&nbsp; .db $80, $33, $00, $88&nbsp; &nbsp;;sprite 1<br />&nbsp; .db $88, $34, $00, $80&nbsp; &nbsp;;sprite 2<br />&nbsp; .db $88, $35, $00, $88&nbsp; &nbsp;;sprite 3<br /><br /><br />background:<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;row 1<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;all sky<br /><br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;row 2<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;all sky<br /><br />&nbsp; .db $24,$24,$24,$24,$45,$45,$24,$24,$45,$45,$45,$45,$45,$45,$24,$24&nbsp; ;;row 3<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$53,$54,$24,$24&nbsp; ;;some brick <br /><br />tops<br /><br />&nbsp; .db $24,$24,$24,$24,$47,$47,$24,$24,$47,$47,$47,$47,$47,$47,$24,$24&nbsp; ;;row 4<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$55,$56,$24,$24&nbsp; ;;brick bottoms<br /><br />attribute:<br />&nbsp; .db %00000000, %00010000, %01010000, %00010000, %00000000, %00000000, %00000000, <br /><br />%00110000<br /><br />&nbsp; .db $24,$24,$24,$24, $47,$47,$24,$24 ,$47,$47,$47,$47, $47,$47,$24,$24 ,$24,$24,$24,<br /><br />$24 ,$24,$24,$24,$24, $24,$24,$24,$24, $55,$56,$24,$24&nbsp; ;;brick bottoms<br /><br /><br /><br />&nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens (once per frame if enabled) the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br />&nbsp; <br />&nbsp; <br />;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 2<br />&nbsp; .org $0000<br />&nbsp; .incbin &quot;fnaf.chr&quot;&nbsp; &nbsp;;includes 8KB graphics file from SMB1</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jun 09, 2016 1:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You might clarify what &quot;doesn't work&quot; means. Do you know how to use a <a href="http://www.fceux.com/web/help/Debugger.html" class="postlink">debugger</a>?<br /><br />At a glance, I would suggest moving your OAM page to $700 instead of $200. It's likely that Famitracker puts its variables there. I don't see any use of variables in RAM or ZP but similarly put them at the high end of the range; Famitracker will be using space at the low end of RAM and ZP.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Jun 09, 2016 1:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NESASM, right?<br /><div class="quotetitle">mariogamemaster wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .bank 0<br />&nbsp; .org $A0E6<br />&nbsp; .incbin &quot;fnaf.nsf&quot;<br />&nbsp; .org $C000<br />&nbsp; .bank 1<br />&nbsp; .org $E000<br /></div></div><br />Because NESASM, these look very suspicious to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 1:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You might clarify what &quot;doesn't work&quot; means. Do you know how to use a debugger?<br /><br />At a glance, I would suggest moving your OAM page to $700 instead of $200. It's likely that Famitracker puts its variables there. I don't see any use of variables in RAM or ZP but similarly put them at the high end of the range; Famitracker will be using space at the low end of RAM and ZP.</div><br /><br />Thanks, I'll try that as well. What I mean by &quot;doesn't work&quot; is that when I load the ROM into fceux then It comes out as completely gray screen with none of my graphics. It does play that short sound initialization sound when I start the ROM up though. Nothing else. I do somewhat know how to use a debugger but don't know the basics really I guess.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 1:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">NESASM, right?<br /><div class="quotetitle">mariogamemaster wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .bank 0<br />&nbsp; .org $A0E6<br />&nbsp; .incbin &quot;fnaf.nsf&quot;<br />&nbsp; .org $C000<br />&nbsp; .bank 1<br />&nbsp; .org $E000<br /></div></div><br />Because NESASM, these look very suspicious to me.</div><br /><br />Yes, NESASM I believe. I'm using the NESASM3 Compiler which I believe compiles NESASM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 1:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">You might clarify what &quot;doesn't work&quot; means. Do you know how to use a <a href="http://www.fceux.com/web/help/Debugger.html" class="postlink">debugger</a>?<br /><br />At a glance, I would suggest moving your OAM page to $700 instead of $200. It's likely that Famitracker puts its variables there. I don't see any use of variables in RAM or ZP but similarly put them at the high end of the range; Famitracker will be using space at the low end of RAM and ZP.</div><br /><br />P.S. Where in my code might my OEM page be?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>soiaf</b> [ Thu Jun 09, 2016 2:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your fnaf.nsf file seems to be too short.<br />FNaFSong.nsf is 9498 bytes in size, so removing the first 128 bytes it should be 9370 bytes (yours is 7450)<br /><br />To edit files I use the HxD hex editor. Open the file - Edit - Select Block - Click the 'length' radio button and enter 128 and make sure dec is selected.<br />Select 'delete' from the edit menu.<br />Then 'save as' your new edited file.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jun 09, 2016 2:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, clear memory <em>before</em> calling INIT. See: <a href="http://wiki.nesdev.com/w/index.php/NSF#Initializing_a_tune" class="postlink">http://wiki.nesdev.com/w/index.php/NSF#Initializing_a_tune</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 2:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">soiaf wrote:</div><div class="quotecontent">Your fnaf.nsf file seems to be too short.<br />FNaFSong.nsf is 9498 bytes in size, so removing the first 128 bytes it should be 9370 bytes (yours is 7450)<br /><br />To edit files I use the HxD hex editor. Open the file - Edit - Select Block - Click the 'length' radio button and enter 128 and make sure dec is selected.<br />Select 'delete' from the edit menu.<br />Then 'save as' your new edited file.</div><br /><br />Thanks bro! I had a feeling I did something wrong there! Will do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 2:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Also, clear memory <em>before</em> calling INIT. See: <a href="http://wiki.nesdev.com/w/index.php/NSF#Initializing_a_tune" class="postlink">http://wiki.nesdev.com/w/index.php/NSF#Initializing_a_tune</a></div><br /><br />I see. Could you also tell me where in my code I have to change $200 to $700?<br /><br />My New Code But Still No Luck,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .ineschr 1&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; .inesmap 0&nbsp; &nbsp;; mapper 0 = NROM, no bank swapping<br />&nbsp; .inesmir 1&nbsp; &nbsp;; background mirroring<br />&nbsp; <br /><br />;;;;;;;;;;;;;;;<br /><br /><br />&nbsp; .bank 0<br />&nbsp; .org $A0E6<br />&nbsp; .incbin &quot;fnaf.nsf&quot;<br />&nbsp; .org $C000<br />RESET:<br />&nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable IRQs<br />&nbsp; CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; LDX #$40<br />&nbsp; STX $4017&nbsp; &nbsp; ; disable APU frame IRQ<br />&nbsp; LDX #$FF<br />&nbsp; TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; STX $2000&nbsp; &nbsp; ; disable NMI<br />&nbsp; STX $2001&nbsp; &nbsp; ; disable rendering<br />&nbsp; STX $4010&nbsp; &nbsp; ; disable DMC IRQs<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Init registers for loading the tune<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; Call music init<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr $A999<br /><br /><br />vblankwait1:&nbsp; &nbsp; &nbsp; &nbsp;; First wait for vblank to make sure PPU is ready<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait1<br /><br />clrmem:<br />&nbsp; LDA #$00<br />&nbsp; STA $0000, x<br />&nbsp; STA $0100, x<br />&nbsp; STA $0300, x<br />&nbsp; STA $0400, x<br />&nbsp; STA $0500, x<br />&nbsp; STA $0600, x<br />&nbsp; STA $0700, x<br />&nbsp; LDA #$FE<br />&nbsp; STA $0200, x<br />&nbsp; INX<br />&nbsp; BNE clrmem<br />&nbsp; &nbsp;<br />vblankwait2:&nbsp; &nbsp; &nbsp; ; Second wait for vblank, PPU is ready after this<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait2<br /><br /><br />LoadPalettes:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$3F<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $3F00 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $3F00 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadPalettesLoop:<br />&nbsp; LDA palette, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (palette + the value in x)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 1st time through loop it will load palette+0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2nd time through loop it will load palette+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3rd time through loop it will load palette+2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; etc<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 <br /><br />sprites<br />&nbsp; BNE LoadPalettesLoop&nbsp; ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 32, keep going down<br /><br /><br /><br />LoadSprites:<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start at 0<br />LoadSpritesLoop:<br />&nbsp; LDA sprites, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (sprites +&nbsp; x)<br />&nbsp; STA $0700, x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; store into RAM address ($0700 + x)<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $10, decimal 16<br />&nbsp; BNE LoadSpritesLoop&nbsp; &nbsp;; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 16, keep going down<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />LoadBackground:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$20<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $2000 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $2000 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadBackgroundLoop:<br />&nbsp; LDA background, x&nbsp; &nbsp; &nbsp;; load data from address (background + the value in x)<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $80, decimal 128 - copying 128 bytes<br />&nbsp; BNE LoadBackgroundLoop&nbsp; ; Branch to LoadBackgroundLoop if compare was Not Equal to <br /><br />zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 128, keep going down<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />LoadAttribute:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$23<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $23C0 address<br />&nbsp; LDA #$C0<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $23C0 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadAttributeLoop:<br />&nbsp; LDA attribute, x&nbsp; &nbsp; &nbsp; ; load data from address (attribute + the value in x)<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $08, decimal 8 - copying 8 bytes<br />&nbsp; BNE LoadAttributeLoop&nbsp; ; Branch to LoadAttributeLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 128, keep going down<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern <br /><br />Table 1<br />&nbsp; STA $2000<br /><br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br /><br />Forever:<br />&nbsp; JMP Forever&nbsp; &nbsp; &nbsp;;jump back to Forever, infinite loop<br />&nbsp; <br />&nbsp;<br /><br />NMI:<br />&nbsp; LDA #$00<br />&nbsp; STA $2003&nbsp; &nbsp; &nbsp; &nbsp;; set the low byte (00) of the RAM address<br />&nbsp; LDA #$07<br />&nbsp; STA $4014&nbsp; &nbsp; &nbsp; &nbsp;; set the high byte (02) of the RAM address, start the transfer<br />&nbsp; jsr $A99C<br /><br /><br />LatchController:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016&nbsp; &nbsp; &nbsp; &nbsp;; tell both the controllers to latch buttons<br /><br /><br />ReadA: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - A<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadADone&nbsp; &nbsp;; branch to ReadADone if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0203&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0203&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadADone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br />&nbsp; <br /><br />ReadB: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - B<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadBDone&nbsp; &nbsp;; branch to ReadBDone if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0203&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure carry flag is set<br />&nbsp; SBC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0203&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadBDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br /><br />&nbsp; ;;This is the PPU clean up section, so rendering the next frame starts properly.<br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern <br /><br />Table 1<br />&nbsp; STA $2000<br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br />&nbsp; LDA #$00&nbsp; &nbsp; &nbsp; &nbsp; ;;tell the ppu there is no background scrolling<br />&nbsp; STA $2005<br />&nbsp; STA $2005<br />&nbsp; <br />&nbsp; RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; return from interrupt<br />&nbsp;<br />;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 1<br />&nbsp; .org $E000<br />palette:<br />&nbsp; .db $22,$29,$1A,$0F,&nbsp; $22,$36,$17,$0F,&nbsp; $22,$30,$21,$0F,&nbsp; $22,$27,$17,$0F&nbsp; &nbsp;<br /><br />;;background palette<br />&nbsp; .db $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C,&nbsp; $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C&nbsp; &nbsp;;;sprite <br /><br />palette<br /><br />sprites:<br />&nbsp; &nbsp; &nbsp;;vert tile attr horiz<br />&nbsp; .db $80, $32, $00, $80&nbsp; &nbsp;;sprite 0<br />&nbsp; .db $80, $33, $00, $88&nbsp; &nbsp;;sprite 1<br />&nbsp; .db $88, $34, $00, $80&nbsp; &nbsp;;sprite 2<br />&nbsp; .db $88, $35, $00, $88&nbsp; &nbsp;;sprite 3<br /><br /><br />background:<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;row 1<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;all sky<br /><br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;row 2<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24&nbsp; ;;all sky<br /><br />&nbsp; .db $24,$24,$24,$24,$45,$45,$24,$24,$45,$45,$45,$45,$45,$45,$24,$24&nbsp; ;;row 3<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$53,$54,$24,$24&nbsp; ;;some brick <br /><br />tops<br /><br />&nbsp; .db $24,$24,$24,$24,$47,$47,$24,$24,$47,$47,$47,$47,$47,$47,$24,$24&nbsp; ;;row 4<br />&nbsp; .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$55,$56,$24,$24&nbsp; ;;brick bottoms<br /><br />attribute:<br />&nbsp; .db %00000000, %00010000, %01010000, %00010000, %00000000, %00000000, %00000000, <br /><br />%00110000<br /><br />&nbsp; .db $24,$24,$24,$24, $47,$47,$24,$24 ,$47,$47,$47,$47, $47,$47,$24,$24 ,$24,$24,$24,<br /><br />$24 ,$24,$24,$24,$24, $24,$24,$24,$24, $55,$56,$24,$24&nbsp; ;;brick bottoms<br /><br /><br /><br />&nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens (once per frame if enabled) the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br />&nbsp; <br />&nbsp; <br />;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 2<br />&nbsp; .org $0000<br />&nbsp; ;.incbin &quot;fnaf.chr&quot;&nbsp; &nbsp;;includes 8KB graphics file from SMB1</div><br /><br />P.S. If possible could someone just edit my code to work then explain to me what they had to do. I know that might be asking a little too much but I really want to add music. Everyone's been a big help so far by the way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Thu Jun 09, 2016 2:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">moving your OAM page to $700 instead of $200<br />...<br />Where?<br /></div><br />LoadSprites:<br />...<br />  STA $0200, x (change to 0700, x)<br /><br />....<br /><br />NMI:<br />  LDA #$00<br />  STA $2003  <br />  LDA #$02 (change to #$07)<br />  STA $4014

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 3:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">moving your OAM page to $700 instead of $200<br />...<br />Where?<br /></div><br />LoadSprites:<br />...<br />  STA $0200, x (change to 0700, x)<br /><br />....<br /><br />NMI:<br />  LDA #$00<br />  STA $2003  <br />  LDA #$02 (change to #$07)<br />  STA $4014</div><br /><br />Thanks man!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mariogamemaster</b> [ Thu Jun 09, 2016 3:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with playing .nsf music in a homebrew project.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can somebody help me figure out the code to do these things?<br /><br />1. Write $00 to all RAM at $0000-$07FF and $6000-$7FFF.<br />2. Initialize the sound registers by writing $00 to $4000-$4013, $0F to $4015.<br />3. Initialize the frame counter to 4-step mode ($40 to $4017).<br />4. If the tune is bank switched, load the bank values from $070-$077 into $5FF8-$5FFF.<br />5. Set the A register for the desired song.<br />6. Set the X register for PAL or NTSC.<br /><br />And if I'm doing it wrong,<br /><br />7. Call the music INIT routine.<br /><br />Thanks in advance

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>