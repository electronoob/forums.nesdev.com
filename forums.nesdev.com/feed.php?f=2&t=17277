<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=17277" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-04-19T00:01:50-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=17277</id>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2018-04-19T00:01:50-07:00</updated>
<published>2018-04-19T00:01:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17277&amp;p=217107#p217107</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17277&amp;p=217107#p217107"/>
<title type="html"><![CDATA[Macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17277&amp;p=217107#p217107"><![CDATA[
To stop derailing the other thread I'm pealing this one off<br />From the other thread<br /><div class="quotetitle">Garth wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Macros are nice, but they are mermaids.. they sing a sweet song and send you to your doom if you are not careful. If you make the &quot;safe&quot; its mostly ok. But you have to really plan to properly and understand how they work etc. I did have a lot of macros but I found they tend to make the code less readable and maintainable after a while. ADCB_W, ADCBX_W, IFBLT, IFBLTE, BAGTE etc.<br /></div><br />Take a different approach.  Instead of using cryptic names, make it really clear what they're doing, and use the parameters to make like a sentence.  If your ADCB_W means &quot;Do a double-precision (16-bit) add-with-carry of B and W,&quot; you could change the macro name to something like _16bit_ADC, and make the line say for example,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        _16bit_ADC   B, _and, W    ; B=B+W</div><br />(Unfortunately the assembler requires separating parameters with a comma, which is why there's a comma after the _and.)  The &quot;_and&quot; (with the underscore or other character to keep the assembler from confusing it with the mnemonic) is an equate that does not actually get used by the macro.  It's only there to make things more readable to humans.  The comment clarifies where the answer goes.  So this would assemble the same as<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        CLC<br />        LDA   B<br />        ADC   W<br />        STA   B<br />        LDA   B+1<br />        ADC   W+1<br />        STA   B+1</div><br />The same macro can be used to add different variables which you specify in the parameters, rather than being confined to B and W.  Conditional assembly in the macro definition can do optimizations if necessary.  Some assemblers let you say in essence, &quot;If there's a fourth parameter, do the following;&quot; so you could use the same macro to add more than just two numbers, and you could invoke it something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        _16bit_ADC   B, W, _and, offset3    ; B=B+W+offset3</div><br /><br />If your IFBLT means &quot;if: branch if less than,&quot; and only assembles a BMI, it's not really clarifying or shortening anything.  How about something like this instead, where a portion is skipped if the N flag is set:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        IF_POSITIVE    ; Negative result above causes it to skip the following lines.<br />           &lt;do_stuff&gt;<br />           &lt;do_stuff&gt;<br />           &lt;do_stuff&gt;<br />        END_IF</div><br />or to branch back to the beginning of a loop as long as the result is negative:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        BEGIN           ; (Or name it &quot;DO&quot; if you like)<br />           &lt;do_stuff&gt;<br />           &lt;do_stuff&gt;<br />           &lt;do_stuff&gt;<br />        UNTIL_POSITIVE</div><br />Then you don't even need a label (although you can still use one if you want to).</div><br /><br />The idea of using dummy strings to improve readability is a nice one. (note if you want to avoid the , issue you can switch to tass64. the .fucntion form of macros lets you do thing a,x,_and,b,y and it will work it out just fine <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> )<br />For me the issue with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">_16_ADC B, W, _and, offset3</tt> is it puts me in to a C/C++ intrinsic function mindset to which point I start to forget about # although in the example you give you then need <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">_16_ADC_Immed B,W</tt> or if the assembler lets you determine a parameter type <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">_16_ADC B,#W</tt> but then getting it to be able to do <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">#&lt;#W</tt> might be tricky...<br />The Mermaid part comes from the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">_16 ADC_8_Immed</tt> case<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda B<br />clc<br />adc #W<br />sta B<br />bcc +<br />inc B+1<br />+</div><br />say given <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  ldx #7<br />- lda 2<br />  bit 4<br />  bpl +<br />  _16_ADC_8_Immed 8,40<br />  jmp _next<br />+ _16_ADC_8_Immed 8,20<br />_next<br />  dex<br />  bpl -</div><br />spot the bug <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br />I would think that your DO/WHILE LOOP/UNTIL would have the same issue. Unless your assembler is that rare beast that lets you make unique labels? can you Loop in a Loop? <br /><br />My point with <br />#ADCBW Add With Carry Byte to Word <br />#DXP Decrement X branch if Positive <br />was to make &quot;instructions&quot; and keep the Assembly look and flow. <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BALT - Branch A Less Than<br />BALT immediate/address branch_target<br />IF A &lt; value THEN branch<br />BALT .segment<br />   cmp \1<br />   bcc \2<br />.endm<br /><br />ISALT - IS Address Less Than<br />ISALT address immediate/address branch_target<br />IF (address) &lt; value THEN branch<br />ISALT .segment<br />   lda \1<br />   cmp \2<br />   bcc \3<br />.endm<br /></div> this way I don't have to remember which way 6502 does the comparasing. Does it branch if A is &lt; CMP or if CMP is less than A - ISALT Thing,cmp,dest - however as I said this was stupid <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br />As mentioned I have since abandoned this idea in favor of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">!!if Thing &lt; Other then DEST</tt> and then <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">!!Dest += #5</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">!!Dest &amp;|= #$f0,#$02</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">!!Dest = Src + other - #40</tt>, loops and 16bit versions of the maths are the next big things to tackle though...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Thu Apr 19, 2018 12:01 am</p><hr />
]]></content>
</entry>
</feed>