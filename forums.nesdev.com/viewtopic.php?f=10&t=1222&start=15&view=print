<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hex to Decimal suggestion</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hex to Decimal suggestion</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1222">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1222</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Mar 15, 2006 8:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can easily write a routine to <em>print</em> how long something takes. Wait for NMI (<em>not</em> VBL, since polling $2002 can miss frames), run the code you want to time, then wait for the next NMI while counting how many cycles it takes. Counting cycles in this case means counting how many times your loop iterates, which translates to 2+4+3 = 9 cycles per iteration, plus whatever an outer loop needs when incrementing the high byte of the counter. This is a bit more complex to initially implement. It could even be extended to cycle accuracy by having the loop check successive NMIs, refining from its initial ~9 cycle accuracy measurement.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Mar 15, 2006 8:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or just set the bg color to red, run it 20 times, set it back to black, and see how many scanlines it takes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Mar 15, 2006 10:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I counted the cycles manually, and to be quite honest, it's not as fast as tepples'. But the amount of time it takes is relative. The max amount of time it can take (if the number going through is 9999 in decimal,) is around 1300 cycles. I think that's pretty okay. I'm going to comment my code and put it up in a little while. I don't know if you will fully understand it if you just read the raw code. I only use these instructions:
<br />
<br />beq - 2
<br />beq (if succeeds) - 3
<br />
<br />bmi - 2
<br />bmi (if succeeds) - 3
<br />
<br />bne - 2
<br />bne (if succeeds) - 3
<br />
<br />clc - 2
<br />
<br />adc immidiate- 2
<br />
<br />sec - 2
<br />
<br />sbc immidiate- 2
<br />
<br />inc  zeropage - 5
<br />
<br />dec  zeropage - 5
<br />
<br />jmp absolute - 3
<br />
<br />lda immidiate - 2
<br />
<br />lda zeropage  - 3
<br />
<br />sta zeropage - 3
<br />
<br />rts - 6
<br />
<br />
<br />The RTS is at the end of the routine, of course. I have this bad habbit of making sure the routine doesn't come out with unwanted values, so for instance, I'll do things like this:
<br />
<br />lda SomeVar
<br />lsr a
<br />lsr a
<br />lsr a
<br />lsr a
<br />sta SomeVar
<br />lda SomeVar
<br />
<br />See the unneccissary lda SomeVar at the end? Yeah, I do that all the time, and it's a bad habbit, I know. You may see things like that in my routine. So don't freak out when you see that.
<br />
<br />Edit: Here it is: <!-- m --><a class="postlink" href="http://www.freewebs.com/the_bott/subroutines.asm">http://www.freewebs.com/the_bott/subroutines.asm</a><!-- m --> . I've put comments on it. I'm a little out of it right now because I have a fever over 100 degrees, and I just took some medicine, so I may have put really bad comments on it. Tell me if you don't understand what's going on. And you'll notice that I have how many cycles it takes for each section of the code. And I also have how many cycles it takes for it to go through 10 times. I've counted each branch as 2 cycles, but don't murder me for it. The amount of cycles is really relative. But if every part of the code was executed, and the 16-bit number going through was $270F, it'd be around 1300 cycles.
<br />
<br />Also, you'll notice I have completely stupid names for lables. I always do that. I name lables off the top of my head. Sorry, if that bothers any of you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Mar 15, 2006 10:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />An easy way to know how fast a code execute is to write $1f to $2001 at its begining and $1e to $2001 at its end. The white bar on the screen is the smaller, the faster is your programm. That is VERY usefull, I use this VERY often. It give also good indiction about when the routine is called in the frame, etc...
<br />You'll most probably NEED to write longer number for EXPs and Gils. Once you got the concept for 16-bit, it isn't much complicated to do it for 24-bit. Such routines don't need to be *very* quick, since you'll call them hadly ever more than once a frame. But it shouldn't be too slow, too. I think you don't have to worry much about speed unless your routines takes a whole frame to execute or so.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Mar 15, 2006 10:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry, my code that I posted has a bug, but I fixed it. I can't explain it now. I am really out of it, and I feel so dizzy, it sucks. I have another bug and I can't figure out what's wrong. I will talk more later, when I feel better. Hopefully that's soon. Sorry, once again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Mar 15, 2006 10:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Since we're sharing BIN2DEC routines, here's mine:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BinToDec:<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta Decimal+0<br />&nbsp; &nbsp;sta Decimal+1<br />&nbsp; &nbsp;sta Decimal+2<br />&nbsp; &nbsp;sta Decimal+3<br />&nbsp; &nbsp;sta Decimal+4<br />&nbsp; &nbsp;ldx #$10<br />BitLoop:<br />&nbsp; &nbsp;asl Binary+0<br />&nbsp; &nbsp;rol Binary+1<br /><br />&nbsp; &nbsp;ldy Decimal+0<br />&nbsp; &nbsp;lda Table, y<br />&nbsp; &nbsp;rol<br />&nbsp; &nbsp;sta Decimal+0<br /><br />&nbsp; &nbsp;ldy Decimal+1<br />&nbsp; &nbsp;lda Table, y<br />&nbsp; &nbsp;rol<br />&nbsp; &nbsp;sta Decimal+1<br /><br />&nbsp; &nbsp;ldy Decimal+2<br />&nbsp; &nbsp;lda Table, y<br />&nbsp; &nbsp;rol<br />&nbsp; &nbsp;sta Decimal+2<br /><br />&nbsp; &nbsp;ldy Decimal+3<br />&nbsp; &nbsp;lda Table, y<br />&nbsp; &nbsp;rol<br />&nbsp; &nbsp;sta Decimal+3<br /><br />&nbsp; &nbsp;rol Decimal+4<br /><br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;bne BitLoop<br />&nbsp; &nbsp;rts<br /><br />Table:<br />&nbsp; &nbsp;.db $00, $01, $02, $03, $04, $80, $81, $82, $83, $84</div>
<br />
<br />This converts a 16-bit binary value into 5 decimal digits, each one using a byte. It's not as fast as tepples', it always takes 920 cycles no matter the input value. I'm sure this can be optimized, some day I'll figure out how. =)
<br />
<br />As for timing the routines, I like the graphical way, it's quick and easy. But the other method that can give you the exact cycle count is pretty good too, but requires some special setup, if I understand it correctly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Mar 15, 2006 10:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To count cycles, Blargg method is technically interesting, but in practice, nobody would do that. Because implement it is ANOYING, and it prevents you to use any other routine in parallel during the frame.
<br />
<br />Tokumaru, your method is interesting. Do you found it is the best to have a routine always slow, or that can vary from slow to fast ? If I remember correctly, this has been discuted LONG ago, and you were saying that a routine is better if it always take long time to accomplish, but that the time doesn't vary regarless of parameters.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Mar 15, 2006 10:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, I'm still a little out of it, but I have a question. What is your "equation" to do hex to decimal? What is the main idea of your routine? Do you get what I'm asking?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Mar 15, 2006 11:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">To count cycles, Blargg method is technically interesting, but in practice, nobody would do that. Because implement it is ANOYING, and it prevents you to use any other routine in parallel during the frame.</div>
<br />
<br />I thought the point was to time a piece of code in isolation. If you use modular design methods, you can write code once and use it many times afterwards without any rewriting. This allows you to invest more time than you would normally for a limited-scope routine. If one wrote what I described, one would be able to accurately time any routine with very little effort. Make a few changes and retime, "Ahhh, that's 10 clocks faster." etc.
<br />
<br />As always, it is the designer's job to choose what's appropriate for the job at hand. I only offer ideas that might be useful in some contexts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Mar 15, 2006 11:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">To count cycles, Blargg method is technically interesting, but in practice, nobody would do that. Because implement it is ANOYING, and it prevents you to use any other routine in parallel during the frame.</div><br />I guess it's interesting to test standalone routines (such as binary to decimal conversions), but doing it to a piece of code within a bigger game would suck.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Tokumaru, your method is interesting. Do you found it is the best to have a routine always slow, or that can vary from slow to fast ? If I remember correctly, this has been discuted LONG ago, and you were saying that a routine is better if it always take long time to accomplish, but that the time doesn't vary regarless of parameters.</div><br />Yeah, we had a long talk about this. This code is the best I came up with after that talk. I'm really not sure if I prefer slow but constant code. The logical choice would be to have stuff execute faster when possible. But when you have a lot of those, the total time can get pretty unpredictable.<br /><br />If you were able to code a game where all the logic is constant-timed, you'd never loose a frame, 'cause you just know how much time everything will take. I know it's impossible to code a full constant-timed game engine, but that was just hypothetical.<br /><br />I woudn't like to be surprised if by any chance all the variable-timed routines in my game decided to have their worst cases all together. I know it is unlikely, but anyway.<br /><br />So I'm not really sure what I prefer. I try to mix variable and constant-time stuff together, so that the absolute worst case (all routines in the worst case) won't be so heavy.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">What is your "equation" to do hex to decimal? What is the main idea of your routine?</div>
<br />
<br />Celius, the basic idea behind this method is that you shift bit by bit out of a number (the binary one) into another (in this case, the decimal one). For example, if you shifted all bits from a binary number into another binary number, you'll get the same value (it would be useless, sure but I said that to show you can reconstruct a number from the bits shifted out of another).
<br />
<br />Each shift doubles the value (x2). To make the second number decimal, not binary/hex, this code changes every number higher than 4 (5, 6, 7, 8 or 9). That is because if those numbers were doubled normally, they'd result in $A, $C, $E, $10 and $12, digits that woudn't match their decimal representation (digits 0, 1, 2, 3 and 4 are doubled to 0, 2, 4, 6 and 8 wich are the same in decimal and in hex, so they need no special handling). 5 is changed to $80. Bit 7 is set so that it is shifted to the next byte and represents the "1" from the number "10" (ten decimal), wich is 5 doubled. 6 is changed to $81, so that when it is doubled (shifted) the "1" of bit 7 moves to the next byte and becomes the "1" of the number "12" (twelve decimal) and the "1" in bit 0 is doubled to become the "2" of "12". That's the idea for all the other digits.
<br />
<br />You basically force an overflow when there wouldn't be any. Hex digits only overflow after digit $F. To simulate the decimal system we force them to overflow after digit $9. This routine only does it before the number is doubled, so the transformations are applied from digit 5 on. And I like to do it all through a table instead of checking if the digit is bigger than 4. You could check if the number is higher than 4 and apply the changes accordingly, and you'd get a variable-time routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Mar 15, 2006 12:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, the advantage of eachother :
<br />- Executing time that vary a lot : You don't have to break your head to do your code faster as possible, since it will usually not run the slowest it could. Unfortunataly, your game may be a victim to slowdowns if the worst case is encountered (typically a lot of ennemies on screen, wich does more sprites to draw, more collisions to check and more AI to execute).
<br />- Executing time that doesn't vary at all : You can make sure your game will never slow down, and you can do stuff like check for sprite zero AFTER doing game logic, wich allow a status bar at the bottom of the screen or so. Unfortunately, you'll have to always break your head and waste ROM to have your code as fast as possible, and since you'll have to never get past of a frame, you'll have to reduce your engine's possibilities.
<br />
<br />I think Konami and Nintendo games does EVERYTHING in the NMI, so make sure that game logic will never be longer than a single is necessary to not have interrupt chains, so another NMI occuring before the first returned.
<br />Most other developpers did it the "standard" way (I say standard because it is the way I use, Nintendo or Konami may not find it standard).
<br />Has anyone ever have Mario, Zelda, Metal Gear, Castlevania, Contra or whatever slow-downed ? The only game I remember to have serious slowdowns is Megaman 3.
<br />
<br />I ask how Contra handle so much ennemies and bullets without slowing down. The game I'm developping now supports 8 objects per screen, that can be bullets, ennemies or items. The ennemies and some items are loaded, and the other would be automatically generated from AI code (not done yet). But each object takes a lot of time, for both AI and sprite-mazing. Especially when moving fast, an object have to check for collision with each pixels after other else the object would penetrate in walls.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Mar 15, 2006 12:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A constant-timed game is just a dream. No serious game could be like that. But even when I make variable-time routines I try not to variate so much. Of course there is no other option for the active objects, you must handle all that are present, and that varies a lot. Unless you wasted some time for objects that are not present, but that feels stupid.
<br />
<br />As for objects moving too fast and going throug walls, I don't worry to much about it now. At first I thought I should check all the pixels between 2 points, so I wouldn't miss a thing. But that seemed like a huge waste of time. In that project, the worlds are composed by 16x16-pixel blocks, so I just restrict movement to 16 pixels at a time. There is no way you'll miss a block like this. and 16 pixels per frame is pretty fast... I don't think I'll ever want something moving this fast. I guess it depends on the details of the world and the speed the object is moving.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Mar 15, 2006 1:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Speaking of code profiling, I have a version of Virtuanes with some code profiling features that Norix sent to me a while back.  It's pretty nice, you write to a couple registers at the start/stop of the routine you want to profile and it displays the cycles used (also the average and maximum if it runs several times).  Anyone want that?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Mar 15, 2006 1:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Speaking of code profiling, I have a version of Virtuanes with some code profiling features that Norix sent to me a while back.  It's pretty nice, you write to a couple registers at the start/stop of the routine you want to profile and it displays the cycles used (also the average and maximum if it runs several times).  Anyone want that?</div>
<br />Sound cool, and I like Virtua NES a lot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Mar 15, 2006 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tokumaru, to be quite honest, I have no idea what's going on in your routine. You should comment it, so I can follow it a bit better. You use so many shifts, it's hard to follow. I understand when you say If you shift SomeVar ($81) left, you'll have 1 in the carry flag, and 2 in SomeVar, which represents 12 in decimal, which divided by two equals 6. Yes, I get that, but what good does that do? I'm sorry, I just don't get your routine. Would you comment it for me? I won't make this another "Object Collision" thread, I promise. Unlike then, I actually understand the 6502 now. I didn't realize it, but back then, I actually didn't understand the 6502 at all.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>