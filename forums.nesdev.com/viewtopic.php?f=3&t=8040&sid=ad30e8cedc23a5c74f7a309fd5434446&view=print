<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - HQ2X Algorithm Ported to Verilog</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">HQ2X Algorithm Ported to Verilog</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8040">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8040</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Sat Aug 13, 2011 9:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>HQ2X Algorithm Ported to Verilog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello all!
<br />
<br />I have some very exciting news! Well, it's exciting me to at least. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I have successfully ported the HQ2X pixel scaling algorithm to Verilog HDL.  Here are some of my test image results directly out of my emulator (captured from my FPGA emulator using my VGA capture card). I also provide links to zoomed-in/magnified versions of the test images because the actual images are so small.
<br />
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_2/test_2_in.png" class="postlink">Test 2 Image (Input - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_2/test_2_in_magnified.png" class="postlink">Test 2 Image (Input - Magnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_2/test_2_out_hdl.png" class="postlink">Test 2 Image (Output - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_2/test_2_out_hdl_magnified.png" class="postlink">Test 2 Image (Output - Magnified)</a>
<br />
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_3/test_3_in.png" class="postlink">Test 3 Image (Input - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_3/test_3_in_magnified.png" class="postlink">Test 3 Image (Input - Magnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_3/test_3_out_hdl.png" class="postlink">Test 3 Image (Output - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_3/test_3_out_hdl_magnified.png" class="postlink">Test 3 Image (Output - Magnified)</a>
<br />
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_4/test_4_in.png" class="postlink">Test 4 Image (Input - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_4/test_4_in_magnified.png" class="postlink">Test 4 Image (Input - Magnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_4/test_4_out_hdl.png" class="postlink">Test 4 Image (Output - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_4/test_4_out_hdl_magnified.png" class="postlink">Test 4 Image (Output - Magnified)</a>
<br />
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_5/test_5_in.png" class="postlink">Test 5 Image (Input - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_5/test_5_in_magnified.png" class="postlink">Test 5 Image (Input - Magnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_5/test_5_out_hdl.png" class="postlink">Test 5 Image (Output - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_5/test_5_out_hdl_magnified.png" class="postlink">Test 5 Image (Output - Magnified)</a>
<br />
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_6/test_6_in.png" class="postlink">Test 6 Image (Input - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_6/test_6_in_magnified.png" class="postlink">Test 6 Image (Input - Magnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_6/test_6_out_hdl.png" class="postlink">Test 6 Image (Output - Unmagnified)</a>
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/results_6/test_6_out_hdl_magnified.png" class="postlink">Test 6 Image (Output - Magnified)</a>
<br />
<br />I will be posting a gameplay video of the scalar operating live on my VeriNES very soon!
<br />
<br />UPDATE: Videos have been added in a later post. Enjoy! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Pz!
<br />
<br />Jonathon

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zelex</b> [ Sat Aug 13, 2011 9:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awesome <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sat Aug 13, 2011 11:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I barely know what this is, but it's sweet! Good job.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Aug 14, 2011 12:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is some pretty awesome stuff you've got here.  I can only hope to have verilog skills like yourself someday.
<br />
<br />So do you have an application of this planned for the NES or your NOAC?  Or just playing around with the stuff?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun Aug 14, 2011 3:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's probably too late, especially considering you've already made it.
<br />
<br />But I have a 6KB C++ implementation of HQ2x that relies on a 256-byte condensed pattern table and rotation of the pattern tree for the four corners. blargg helped with much of this, too. Compiles down to maybe 1KB of binary code. Might be more suitable for saving transistors.
<br />
<br />Source here if you're interested, consider it public domain.
<br />
<br /><!-- m --><a class="postlink" href="http://pastebin.com/YXpmqvW5">http://pastebin.com/YXpmqvW5</a><!-- m -->
<br />
<br />You'd want to do the YUV conversion manually instead of via table, of course.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Aug 14, 2011 5:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">I barely know what this is, but it's sweet! Good job.</div>
<br /><a href="http://www.hiend3d.com/hq2x.html" class="postlink">hq2x</a> is one of the well-known <a href="http://en.wikipedia.org/wiki/Pixel_art_scaling_algorithms" class="postlink">pixel art interpolation algorithms</a>.
<br />
<br />Oh and thanks byuu.
<br />
<br />jwdonal: That's the oldest trick in the book <img src="./images/smilies/icon_wink.gif" alt=";-)" title="Wink" /> You made the "output" images slightly brighter than the input images. And <a href="http://www.hydrogenaudio.org/forums/index.php?showtopic=79249" class="postlink">studies show louder is better</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Sun Aug 14, 2011 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you all for the kind words. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">It's probably too late, especially considering you've already made it.<br /><br />But I have a 6KB C++ implementation of HQ2x that relies on a 256-byte condensed pattern table and rotation of the pattern tree for the four corners. blargg helped with much of this, too. Compiles down to maybe 1KB of binary code. Might be more suitable for saving transistors.</div><br />It absolutely is more resource efficient for both software and hardware implementations.  To be totally honest....I'm slightly bummed by your post because that was going to be the "upgrade" that I implemented today and was going to post about it! (Less the rotation of the pattern tree for the corners - I don't know what that means yet but I'll definitely check it out.) But you and blargg beat me to it! <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />I will post here again once I complete the upgrade. Thanks byuu!<br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">So do you have an application of this planned for the NES or your NOAC? Or just playing around with the stuff?</div>
<br />Yes, I will be integrating it into my VeriNES and will post some videos on Youtube.  But I want to make some optimizations to the code first (e.g. what was stated above).
<br />
<br />
<br />tepples: <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun Aug 14, 2011 11:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">To be totally honest....I'm slightly bummed by your post because that was going to be the "upgrade" that I implemented today and was going to post about it!</div><br /><br />Oops, sorry about that :(<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(Less the rotation of the pattern tree for the corners - I don't know what that means yet but I'll definitely check it out.)</div>
<br />
<br />Okay, the original HQ2x code is here:
<br />
<br /><!-- m --><a class="postlink" href="http://code.google.com/p/hqx/source/browse/trunk/src/hq2x.c">http://code.google.com/p/hqx/source/bro ... src/hq2x.c</a><!-- m -->
<br />
<br />Basic pattern explanations:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define PIXEL00_0&nbsp; &nbsp; &nbsp;*dp = w&#91;5&#93;;<br />#define PIXEL00_10&nbsp; &nbsp; Interp1&#40;dp, w&#91;5&#93;, w&#91;1&#93;&#41;;<br />#define PIXEL00_11&nbsp; &nbsp; Interp1&#40;dp, w&#91;5&#93;, w&#91;4&#93;&#41;;<br />#define PIXEL00_20&nbsp; &nbsp; Interp2&#40;dp, w&#91;5&#93;, w&#91;4&#93;, w&#91;2&#93;&#41;;<br />#define PIXEL01_0&nbsp; &nbsp; &nbsp;*&#40;dp+1&#41; = w&#91;5&#93;;<br />#define PIXEL01_10&nbsp; &nbsp; Interp1&#40;dp+1, w&#91;5&#93;, w&#91;3&#93;&#41;;<br />#define PIXEL01_11&nbsp; &nbsp; Interp1&#40;dp+1, w&#91;5&#93;, w&#91;2&#93;&#41;;<br />#define PIXEL01_20&nbsp; &nbsp; Interp2&#40;dp+1, w&#91;5&#93;, w&#91;2&#93;, w&#91;6&#93;&#41;;</div><br /><br />PIXEL00 = top-left, 01=top-right, 10=bottom-left, 11=bottom-right<br /><br />Then there is a 256-entry switch on the 8-diff pattern for each pixel of input that produces four unique outputs:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 177:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PIXEL00_20<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PIXEL01_22<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PIXEL10_20<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PIXEL11_12<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;</div>
<br />
<br />Case 177 = rule 4: blend2(E, D, B);
<br />
<br />In HQ2x official, the pixel grid around the current pixel is used:
<br />123
<br />456
<br />789
<br />
<br />So for rule 1, PIXEL00_20 = 542. Blend what is above and to the left only.
<br />
<br />(side-note: blend rules only ever work with five adjacent pixels, for the top-left, that's 12468, IIRC.)
<br />
<br />Yet PIXEL01_20 = 526. Blend with what is above and to the right only. This leads way to a symmetry. We don't even need to look at PIXEL10_20 to know that it will be 584.
<br />
<br />So rather than encode four rule sets per output pixel, we only really need to store the first rule set, that is, PIXEL00.
<br />
<br />So we ignore 5, since we don't "diff" (compare to see if two pixels are similar or not) 5 to 5. So our pattern is actually "12346789" in one byte.
<br />123
<br />4X6
<br />789
<br />
<br />So after rendering the top-left, we can rotate the pattern matches by two steps: each step moves everything counter-clockwise two times. So let's do this:
<br />
<br />369
<br />2X8
<br />147
<br />
<br />Notice how 01_20 = 526 in the same spot that 00_20 had 542?
<br />
<br />The 256-byte rotate table stores this calculation for us, since there's no easy bit-twiddling way to do it. So our new pattern byte after rotation is 74182963. We can do this again for the bottom right, and one last time for the bottom left pixel.
<br />
<br />The PIXEL01/10/11 rules are only different because they're all considering 1-9 patterns to be the same for each corner.
<br />
<br />So in our case 177, PIXEL01_22 is used: Interp2(dp+1, w[5], w[3], w[2]);
<br />
<br />177=B1=pattern match:
<br />101
<br />1X0
<br />001
<br />
<br />Rotated:
<br />
<br />101
<br />0X0
<br />110
<br />
<br />=10100110=$a5=rule 165. And surprise, there we have: PIXEL01_20
<br />
<br />I built my symmetry table off of PIXEL00 only. And as it turns out, there are actually six? cases where the symmetry does not hold up in MaxSt's original tables.
<br />
<br />I believe them to be unintentional bugs as a result of MaxSt presumably building this table by hand. I did a blind test on my forum of my rotation HQ2x versus MaxSt's HQ2x table, and everyone favored mine, as it eliminated a couple extra jaggy points. But I admit that is subjective.
<br />
<br />The difference was something like 6 pixels per video frame, because the differences were in very uncommon pattern matches.
<br />
<br />I do wish I knew how MaxSt generated his initial switch table, or if he really just did it painstakingly by hand. I'd like to think there is some sort of computer algorithm that can build that comparison table, and that we can improve upon that algorithm to consider more than five surrounding pixels, to make a super-HQNx algorithm. But ... I haven't been able to figure it out.
<br />
<br />&gt; But you and blargg beat me to it!
<br />
<br />Let's see if I remember ...
<br />
<br />I came up with the pattern table + rotation, and used a script to build the pattern[] array by parsing the original hq2x.c file.
<br />
<br />The 16-&gt;32-&gt;16 bit-packing for simple blending rules without having to split things out per channel came from Allegro's alpha-blending code, that I remembered from the '90s.
<br />
<br />blargg took the original pixel differencing code, and implemented a much faster version using a simplified YUV table and some magic constants. He also came up with a distinction between same/diff that is used in there at some point. This differencing is also not a 100% match to the original algorithm, but is 99.9% the same, and way faster.
<br />
<br />I came up with a tiny optimization where the pattern match for 6 can be moved to 4 for the next pixel, but it didn't seem to help performance and required extra code.
<br />
<br />blargg had some amazing non-grow/pack variants for the most common blend cases using his clamped-RGB add/sub code, but it turned out to be slower on more modern x86 processors for some crazy reason (I guess multiplies have gotten a lot faster lately.)
<br />
<br />blargg also has a lot of optimizations that help on the PowerPC more than on the x86. I kept them out to keep the code simpler.
<br />
<br />Hopefully that's everything. I'd be really appreciative if anyone can find a way to reduce my code even more. The algorithm becomes somewhat beautiful with the symmetry, and the smaller it is, the more impressive it is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Mon Aug 15, 2011 8:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />byuu, that - is - freakin - awesome !  I'm still deciphering your notes and matching them up to your C code but just from skimming it it's really cool!  It's amazing that you guys figured all this out.  I will post a more in-depth reply once I implement these upgrades myself but I can't thank you enough for sharing this. <img src="./images/smilies/icon_biggrin.gif" alt=":-D" title="Very Happy" />
<br />
<br />If I figure out any more optimizations I will def be happy to tell you what they were (if they relate to something that could be done in software and not just hardware).
<br />
<br />UPDATE: <div class="quotetitle">byuu wrote:</div><div class="quotecontent">So our pattern is actually "12346789" in one byte.</div>
<br />Very minor fix, but that should say "98764321". <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Aug 17, 2011 7:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; It's amazing that you guys figured all this out.
<br />
<br />I really have no idea how I came up with the pattern rotation. I think I just got really lucky.
<br />
<br />I still don't understand blargg's super-optimized YUV diff/same functions, but they're definitely a lot faster than the LGPL-C version from MaxSt.
<br />
<br />&gt; Very minor fix, but that should say "98764321".
<br />
<br />Sorry, it's all pretty much from memory. May be other small mistakes as well, as I did this quite a long time ago.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Thu Aug 18, 2011 10:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, so I've finally figured out how (or moreso why) this works.  And just for everyone's benefit I'm going to go ahead and re-post what byuu posted with some corrections because the errors threw me off for a while (no offense _whatsoever_ intended toward byuu - I am very thankful for his help. The errors, like he said, are just because he was doing everything from memory.).
<br />
<br />Anyway, the errors result from the incorrect assumed pattern of "12346789".  There were actually just a couple of errors as a result of that first error, but I figured it would make more sense to re-post without snipping just so people don't have to look back and forth between the two posts.  Here goes...
<br />
<br />-------------------------------------------------------
<br />So we ignore 5, since we don't "diff" (compare to see if two pixels are similar or not) 5 to 5. So our pattern is actually "98764321" in one byte.
<br />123
<br />4X6
<br />789
<br />
<br />So after rendering the top-left, we can rotate the pattern matches by two steps: each step moves everything counter-clockwise two times. So let's do this:
<br />
<br />369
<br />2X8
<br />147
<br />
<br />Notice how 01_20 = 526 in the same spot that 00_20 had 542?
<br />
<br />The 256-byte rotate table stores this calculation for us, since there's no easy bit-twiddling way to do it. So our new pattern byte after rotation is 74182963. We can do this again for the bottom right, and one last time for the bottom left pixel.
<br />
<br />The PIXEL01/10/11 rules are only different because they're all considering 1-9 patterns to be the same for each corner.
<br />
<br />So in our case 177, PIXEL01_22 is used: Interp2(dp+1, w[5], w[3], w[2]);
<br />
<br />177=B1=10110001=[98764321]=pattern match:
<br />100
<br />0X1
<br />101
<br />
<br />Rotated counter-clockwise by 2 positions:
<br />
<br />011
<br />0X0
<br />101
<br />
<br />New pattern=[74182963]=10100110=$A6=rule 166
<br />
<br />And surprise, there we have: PIXEL01_12
<br />
<br />The significance of this (i.e. the "surprise") is that PIXEL01_12 blends the (now rotated) pixels at locations 5 &amp; 6.  Which are the exact same pixels (i.e. pixels 5 &amp; 8) that PIXEL11_12 would have blended had we stuck with rule 177 using the non-rotated pattern.
<br />-------------------------------------------------------
<br />
<br />The optimization that byuu created is extremely elegant which consequently makes it difficult to explain really well with just words.  I plan on adding some hand-drawn graphs to this post to visually describe this process.  Fixing the errors, and then drawing all this out is the only thing that allowed me to finally understand it. :-P  I just need to clean up what I've already created and scan it into my machine.  I'll put the files on dropbox and post a link.
<br />
<br />UPDATE:
<br />Here ya go.  Hopefully this doesn't just confuse people more. :(  lol
<br /><a href="http://dl.dropbox.com/u/36237540/hq2x/hq2x_min_example.pdf" class="postlink">http://dl.dropbox.com/u/36237540/hq2x/hq2x_min_example.pdf</a>
<br />
<br />Pz!
<br />
<br />Jonathon W. Donaldson

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Aug 19, 2011 2:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; The significance of this (i.e. the "surprise") is that <strong>PIXEL01_12</strong> blends the (now rotated) pixels at locations 5 &amp; 6. Which are the exact same pixels (i.e. pixels 5 &amp; 8) that PIXEL11_12 would have blended had we stuck with rule 177 using the non-rotated pattern. 
<br />
<br />Typo in bold should be PIXEL11_12.
<br />
<br />Yeah, sounds like you have it now, you're reminding me how it works again :D
<br />I unfortunately had my forum in purge mode to conserve space, and lost the old post where I explained this when I first figured it out.
<br />
<br />Thanks for the corrections.
<br />
<br />Always felt some sort of animation showing the rotation in real-time would be kinda neat to explain this.
<br />
<br />You can technically forgo the need to rotate if you store a 1024-byte table, but I like the smaller version. Would be really cool if someone could come up with a better 'rotate' bit-twiddling algorithm so that we don't need the second 256-byte table.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">n = &#40;&#40;n &gt;&gt; 2&#41; &amp; 0x11&#41; | &#40;&#40;n &lt;&lt; 2&#41; &amp; 0x88&#41;<br />&nbsp; | &#40;&#40;n &amp; 0x01&#41; &lt;&lt; 5&#41; | &#40;&#40;n &amp; 0x08&#41; &lt;&lt; 3&#41;<br />&nbsp; | &#40;&#40;n &amp; 0x10&#41; &gt;&gt; 3&#41; | &#40;&#40;n &amp; 0x80&#41; &gt;&gt; 5&#41;;</div>
<br />
<br />Oh, I also don't think I mentioned it, but I load in all eight surrounding pixels, but since there are only five "points" that HQ2x ever blends against, I rearrange their order when calling the blend functions, which is based around the same rotation, but I saw no reason to shuffle eight 16-bit values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 19, 2011 5:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To make rotation as easy as rotation, order the bits as
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0 1 2<br />7 x 3<br />6 5 4</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Fri Aug 19, 2011 11:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Typo in bold should be PIXEL11_12.</div>
<br />Not as I understand the algorithm.  01_12 is correct as I have it.  Maybe it's just that I worded it funny or something.
<br />
<br />01_12 is blending 5 &amp; 6.  Pixel 6 _was_ the pixel that was in location 8 prior to the matrix rotation. And prior to the rotation you would have had to use 11_12 to blend 5 &amp; 8.  So, 01_12 (5,6) in rule 166 has taken the place of 11_12 (5,8) in rule 177.
<br />
<br />Maybe the new wording will help.  I drew this all out on paper and it does work.  Maybe I should scan that one too. We may just be thinking about it differently.  I'm guessing there is more than one way to look at this optimization - maybe that's what happening.
<br />
<br />Pz!
<br />
<br />Jonathon

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Aug 19, 2011 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; To make rotation as easy as rotation, order the bits as
<br />
<br />0 1 2
<br />7 x 3
<br />6 5 4
<br />
<br />Reordering won't help.
<br />
<br />01273654 ROL 2 = 27365401
<br />273
<br />6x5
<br />401
<br />
<br />That is not rotated in any way. We would want:
<br />
<br />234
<br />1x5
<br />076
<br />
<br />&gt; Not as I understand the algorithm
<br />
<br />Okay, I'll just defer to your judgment then, you've studied a lot more than I have lately now =)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>