<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=5107" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-04-24T04:01:56-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=5107</id>
<entry>
<author><name><![CDATA[dreampeppers99]]></name></author>
<updated>2009-04-24T04:01:56-07:00</updated>
<published>2009-04-24T04:01:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46146#p46146</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46146#p46146"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46146#p46146"><![CDATA[
thank VERY MUCH you all !   <img src="http://forums.nesdev.com/images/smilies/icon_surprised.gif" alt=":o" title="Surprised" />  <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  <img src="http://forums.nesdev.com/images/smilies/icon_surprised.gif" alt=":o" title="Surprised" /> <br />I work on Jpcsp emulator and in it the instruction (MIPS) are all with same size ! Then I was trying to do the same way...  <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <br /><br />I will try for the dynamic disassembling.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=912">dreampeppers99</a> — Fri Apr 24, 2009 4:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-04-23T12:25:14-07:00</updated>
<published>2009-04-23T12:25:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46112#p46112</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46112#p46112"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46112#p46112"><![CDATA[
Yeah, well, the sentence was already too long as it was, which is why I left that detail out.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Apr 23, 2009 12:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2009-04-23T11:46:32-07:00</updated>
<published>2009-04-23T11:46:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46111#p46111</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46111#p46111"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46111#p46111"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />[RTS's] actual behaviour is that of jumping to the location pointed by the top of the stack<br /></div><br />the byte just AFTER the location pointed to (that is, plus one).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Apr 23, 2009 11:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-04-23T11:11:22-07:00</updated>
<published>2009-04-23T11:11:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46110#p46110</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46110#p46110"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46110#p46110"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />So if you're doing a static disassembly, you really have to follow the JMP, JSR, and branch instructions just to get started.<br /></div><br />Also remember that RTS can be used as a jump instruction too. Although this instruction is commonly used to return from subroutines, it's actual behaviour is that of jumping to the location pointed by the top of the stack, and there's a very well known trick that is manually placing an address there with 2 PHA instructions and then RTS'ing. That's probably impossible to follow in a static disassembly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Apr 23, 2009 11:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-04-23T10:59:55-07:00</updated>
<published>2009-04-23T10:59:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46106#p46106</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46106#p46106"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46106#p46106"><![CDATA[
If the reset code starts at $C000, then it might jump to code in $8000-$BFFF. A lot of games that use mappers are like this. Because the mapper's power-on state is unpredictable except that $C000-$FFFF is fixed to the last bank of the ROM, they reset into a piece of code in $C000-$FFFF that sets up the mapper and then jumps into code in $8000-$BFFF. So if you're doing a static disassembly, you really have to follow the JMP, JSR, and branch instructions just to get started.<br /><br />But if your ROM has only one 16 KiB PRG bank, then it's replicated in both $8000-$BFFF and $C000-$FFFF.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Apr 23, 2009 10:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-04-23T10:55:16-07:00</updated>
<published>2009-04-23T10:55:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46105#p46105</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46105#p46105"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46105#p46105"><![CDATA[
<div class="quotetitle">dreampeppers99 wrote:</div><div class="quotecontent"><br />Suposse that the initial address is $C000 this mean that all the code on $8000-$BFFF range is unuseless? (there is no subrotine on that)<br /></div><br />No, there could be routines there. You simply can't disassemble it all linearly and expect to get something meaningful. Machine language is very versatile, sometimes you'll even have code mixed with data, instructions that intentionally provoke code misalignment (see <a href="http://nesdev.com/bbs/viewtopic.php?t=3732" class="postlink">here</a>), and other things that making disassembling a very complicated task.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Apr 23, 2009 10:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[dreampeppers99]]></name></author>
<updated>2009-04-23T10:44:58-07:00</updated>
<published>2009-04-23T10:44:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46104#p46104</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46104#p46104"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46104#p46104"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Nothing requires a game to store any code at $8000-$80FF. It could be a data table for all anyone cares, and in the case of games with non-trivial mappers, it often is. The only restriction is that $FFFC (the reset vector) has to point to a valid instruction. So read the starting location from $FFFD and $FFFC, and start disassembling from there.<br /></div><br /><br />Suposse that the initial address is $C000 this mean that all the code on $8000-$BFFF range is unuseless? (there is no subrotine on that)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=912">dreampeppers99</a> — Thu Apr 23, 2009 10:44 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-04-23T10:48:43-07:00</updated>
<published>2009-04-23T10:41:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46103#p46103</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46103#p46103"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46103#p46103"><![CDATA[
Since you disassemble everything beforehand, the resulting disassembly is probably not correctly aligned to the code. This most likely happens because you interpreted data as code and that screwed up actual code.<br /><br />For example, if I have the source of my game starts like the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   .org $8000<br /><br />Reset:<br />   lda $2002</div><br />You'll probably disassemble it without problems. But what if I decide to add some data before that code, such as the number of lives the player starts with:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   .org $8000<br /><br />Lives:<br />   .db $05<br /><br />Reset:<br />   lda $2002</div><br />Execution will still start at "Reset", and the program will still work fine. However, if you try diassembling from $8000, that $05 will become a zero page ORA instruction, which requires an operand (the zero page location of the variable). Your disassembler will then interpret the LDA as this operand, so you'll get the instruction "ORA $AD", which is obviously wrong. Then it will interpret the next byte ($02) as an instruction, but that's an invalid instruction.<br /><br />Well, you get the picture. Data will cause the code to not be aligned properly. Even if it is correct in some places, it might be wrong in others. I believe that most emulators with integrated diassemblers do it on the fly, disassembling only what they are currently displaying, and since they know the alignment of the current instruction they can correctly display the surrounding ones (although there will still be errors if this code is near some data).<br /><br />EDIT: tepples' solution (starting from the location pointed by the reset vector) is the way to go if you insist on static disassembly, but keep in mind that there will still be errors, as that solution only guaranties the alignment of the reset code. Subroutines could still show up misaligned. One way to improve that is to follow every branch, JMP and JSR and keep disassembling from the locations pointed by those instructions, but still, there are many cases when a program jumps to a dynamic address stored in RAM, which you won't know until you actually execute the program. So I insist, the best way is probably to dynamically disassemble only the instructions that surround the current one while you emulate, instead of doing it all beforehand.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Apr 23, 2009 10:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-04-23T10:22:09-07:00</updated>
<published>2009-04-23T10:22:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46102#p46102</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46102#p46102"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46102#p46102"><![CDATA[
Nothing requires a game to store any code at $8000-$80FF. It could be a data table for all anyone cares, and in the case of games with non-trivial mappers, it often is. The only restriction is that $FFFC (the reset vector) has to point to a valid instruction. So read the starting location from $FFFD and $FFFC, and start disassembling from there.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Apr 23, 2009 10:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[dreampeppers99]]></name></author>
<updated>2009-04-23T09:30:44-07:00</updated>
<published>2009-04-23T09:30:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46101#p46101</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46101#p46101"/>
<title type="html"><![CDATA[Disassembler for NES 6502 - Problem with size of opcodes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5107&amp;p=46101#p46101"><![CDATA[
On the trying of writting a debugger I wrote a disassembler to make a great tool like that:<br />Nintendulator<br /><img src="http://rveach.romhack.org/Nintendulator/screen4.gif" alt="Image" /><br /><br />I'm walking to this way:<br />Look Mine<br /><img src="http://www.uploadimagens.com/upload/292a209bf4dff96a0eeba3a5e1d8dc7d.jpg" alt="Image" /><br /><br />But...<br />In some games as Super Mario Brothers and Others the disassembler works fine but on Excite Bike the disassembler generates an output that doesn't show correct.  (mainly for the reset vector)<br /><br />I'm always disassembler from the $8000 to $FFFA, reading and disassembling.... <br /><br />After get all the asm code...<br /><br />I just point the cursor to RESET place.... in the Super Mario and others games fine! but on Excite Bike the cursor doesn't find the "correct" local.<br /><br />On Excite Bike case:<br /><br />The reset indicates the $C184 and my disassembler generated <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C17D:CMP $E800, X<br />C180:NOT IMPLEMENTED &#91;0X17&#93;<br />C181:ORA &#40;$00,X&#41;<br />C183:ORA &#40;$78,X&#41;<br />C185:CLD<br /></div><br /><br />So to my disassembler I don't have the $C184 to go...<br /><br />The initial address $8000 to forward shows... <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">8000:LSR $C3<br />8002:STA $C3, X<br />8004:TXS<br />8005:CMP #$2C<br />8007:NOT IMPLEMENTED &#91;0XCB&#93;<br />8008:ADC $C4<br />800A:TXS<br />800B:CMP #$2C<br />800D:NOT IMPLEMENTED &#91;0XCB&#93;<br />800E:ADC $C4<br />8010:LDA $7CC3 ,X <br />8013:CMP #$9A<br />8015:CMP #$2C<br />8017:NOT IMPLEMENTED &#91;0XCB&#93;<br />8018:AND $1CC4, X<br />801B:CPY $00<br />801D:ORA &#40;$02,X&#41;<br />801F:NOT IMPLEMENTED &#91;0X03&#93;<br />8020:NOT IMPLEMENTED &#91;0X04&#93;<br />8021:NOT IMPLEMENTED &#91;0X02&#93;<br />8022:NOT IMPLEMENTED &#91;0X03&#93;<br />8023:NOT IMPLEMENTED &#91;0X04&#93;</div><br /><br />So I thougth that it was because the compiler puts some garbages which my disassember is trying to figure out what is it. am I rigth?<br /><br />The compiler generates Illegal opcodes or garbage just to padding the left memory? (or even parameters or something...)<br /><br />Or need I to change my way to disassembler ? I mean don't start on $8000 and finish on $FFFA.<br /><br />ps1: I also believe that one of my opcodes must be with wrong size long.<br />ps2: some games tells 2 PRG banks but two of them are identical in this case I just ignore the address which holds the VECTORS.<br />ps3: sorry for my lack of knolegde on english language... if my thougths aren't well explained I can try to do it another way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=912">dreampeppers99</a> — Thu Apr 23, 2009 9:30 am</p><hr />
]]></content>
</entry>
</feed>