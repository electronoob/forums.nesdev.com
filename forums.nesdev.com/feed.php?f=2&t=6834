<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=6834" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-08-17T21:51:41-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=6834</id>
<entry>
<author><name><![CDATA[Sivak]]></name></author>
<updated>2010-08-17T21:51:41-07:00</updated>
<published>2010-08-17T21:51:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=66214#p66214</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=66214#p66214"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=66214#p66214"><![CDATA[
Well, I managed to get something utilizing that atan2 routine that was suggested.  I already had angular bullets, so using the atan2 thing, I just applied the angle I got to the angular bullet routine and bingo.<br /><br />So thanks for suggesting that routine.  It's bulky, but I have 256kb to work with.  Heheheh...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3374">Sivak</a> — Tue Aug 17, 2010 9:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-08-14T16:42:49-07:00</updated>
<published>2010-08-14T16:42:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=66009#p66009</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=66009#p66009"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=66009#p66009"><![CDATA[
1) delta x = x1-x2 and delta y = y1-y2<br /><br />2) determine the +/- signs of delta x and delta y<br /><br />3) find |delta x| and |delta y|<br /><br />4) slope = |delta y| / |delta x|<br /><br />5) velocity x = cos(arctan(slope)) and velocity y = sin(arctan(slope).  Use a look up table for each.<br /><br />6) apply delta x and delta y +/- signs to velocity x and velocity y<br /><br />7) add the signed velocity values to both coordinates<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sat Aug 14, 2010 4:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bogax]]></name></author>
<updated>2010-08-13T10:52:43-07:00</updated>
<published>2010-08-13T10:52:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65937#p65937</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65937#p65937"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65937#p65937"><![CDATA[
<div class="quotetitle">doynax wrote:</div><div class="quotecontent"><br />This probably is quite useless but just to satisfy my own curiosity I tried to work out something similar, and it does seem that you can draw a Bresenham line at a constant speed without any arithmetic beyond addition and subtraction if you keep a running count of the squared x, y, and hypotenuse terms.<br /></div><br /><br />Actually I rather like that because I'm always trying to think of ways<br />to "leverage" a table of squares in case I have one laying around<br />(eg for quarter-square multiplication)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3594">bogax</a> — Fri Aug 13, 2010 10:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2010-08-13T10:20:00-07:00</updated>
<published>2010-08-13T10:20:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65932#p65932</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65932#p65932"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65932#p65932"><![CDATA[
<div class="quotetitle">bogax wrote:</div><div class="quotecontent"><br /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">Another possible method, if you want to avoid bulky tables but have cycles to spare, is to trace the bullet's path using Bresenham's line algorithm while limiting the number of steps taken each frame. That is every frame you'd add the desired speed to a fixed-point distance allowance, then keep taking Bresenham steps and subtracting one for a straight step and sqrt(2) for a diagonal one until the counter reaches zero.<br />To be honest I've never actually gotten around to testing this approach, but it ought to work.. ;)<br />edit: Actually, I doesn't seem to be anywhere near accurate. Oh well.<br /></div><br /><br />Bresenhams seems an obvious choice but I don't think sqrt(2) for a<br />diagonal step is going to be very accurate.<br />eg for one horizontal and one diagonal ie for tan= .5, angle= 26.56<br />the distance would be 2/cos (26.56) = 2.23<br />sqrt(2) + 1 would give you 2.4<br />you'll lose one pixel for every 24 or something like that (at 26.56 degrees)</div><br />This probably is quite useless but just to satisfy my own curiosity I tried to work out something similar, and it does seem that you can draw a Bresenham line at a constant speed without any arithmetic beyond addition and subtraction if you keep a running count of the squared x, y, and hypotenuse terms.  <br /><br />Here's a quick-and-dirty example which plots an x-major line towards dx/dy at speed v.<div class="codetitle"><b>Code:</b></div><div class="codecontent">void trace&#40;int dx, int dy, int v&#41; &#123;<br />   int x, y;<br />   int e, d;<br />   int v2;<br /><br />   x = 0;<br />   y = 0;<br /><br />   e = dy;<br />   dx *= 2;<br />   dy *= 2;<br /><br />   /* In practice you'd avoid this multiplication by keeping pre-squared velocities */<br />   v *= v;<br />   v2 = v;<br />   v *= 2;<br /><br />   d = 0;<br /><br />   for&#40;;;&#41; &#123;<br />      printf&#40;&quot;&#40;%d, %d&#41; - %f\n&quot;, x, y, sqrt&#40;x * x + y * y&#41;&#41;;<br />      getchar&#40;&#41;;<br /><br />      d += v2;<br />      v2 += v;<br /><br />      while&#40;d &gt;= 0&#41; &#123;<br />         if&#40;e -= dy, e &lt; 0&#41; &#123;<br />            e += dx;<br />            d -= y++ * 2 + 1;<br />         &#125;<br />         d -= x++ * 2 + 1;<br />      &#125;<br />   &#125;<br />&#125;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Fri Aug 13, 2010 10:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Tom]]></name></author>
<updated>2010-08-13T10:04:12-07:00</updated>
<published>2010-08-13T10:04:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65931#p65931</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65931#p65931"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65931#p65931"><![CDATA[
For the tanks/turrets in Wraith I did something similar to the arctan approach, but did a bunch of comparisons to compute a quantized<br />arctan.  Something like<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">dx = | x0 - x1 |<br />dy = | y0 - y1 |<br /><br />if dx &lt; 2*dy<br />    angle = 90<br />else if dy &lt; 2*dx<br />    angle = 0<br />else<br />    angle = 45<br /></div><br /><br />Then used a small table from the quantized angles to precomputed x and y speeds.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=120">Tom</a> — Fri Aug 13, 2010 10:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bogax]]></name></author>
<updated>2010-08-13T10:33:47-07:00</updated>
<published>2010-08-13T10:00:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65930#p65930</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65930#p65930"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65930#p65930"><![CDATA[
<div class="quotetitle">doynax wrote:</div><div class="quotecontent"><br />Another possible method, if you want to avoid bulky tables but have cycles to spare, is to trace the bullet's path using Bresenham's line algorithm while limiting the number of steps taken each frame. That is every frame you'd add the desired speed to a fixed-point distance allowance, then keep taking Bresenham steps and subtracting one for a straight step and sqrt(2) for a diagonal one until the counter reaches zero.<br />To be honest I've never actually gotten around to testing this approach, but it ought to work.. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br />edit: Actually, I doesn't seem to be anywhere near accurate. Oh well.<br /></div><br /><br />Bresenhams seems an obvious choice but I don't think sqrt(2) for a<br />diagonal step is going to be very accurate.<br />eg for one horizontal and one diagonal ie for tan= .5, angle= 26.56<br />the distance would be 2/cos (26.56) = 2.23<br />sqrt(2) + 1 would give you 2.4<br />you'll lose one pixel for every 24 or something like that (at 26.56 degrees)<br /><br />edit:<br />that didn't come out right I'm trying to agree and disagree at the same<br />time <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />probably good enough especially for speed<br />certainly better than 1 : 1.4<br />I'd guess that you could do better for similar effort<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3594">bogax</a> — Fri Aug 13, 2010 10:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2010-08-13T10:18:48-07:00</updated>
<published>2010-08-13T09:03:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65926#p65926</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65926#p65926"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65926#p65926"><![CDATA[
I used a rather table-heavy method to aim bullets towards the player in my old shooter project.<br /><br />Essentially I calculated the angle for one octant with the usual arctan(y / x) formula, using a logarithm table for the division and an arctan table with logarithmic indices. Then there was a bit of twiddling to expand the result to every octant, and finally a sine table to calculate final velocities. Feel free to use the code if you feel like wasting some ROM: <a href="http://codebase64.org/doku.php?id=base:8bit_atan2_8-bit_angle" class="postlink">http://codebase64.org/doku.php?id=base:8bit_atan2_8-bit_angle</a><br /><br />Another possible method, if you want to avoid bulky tables but have cycles to spare, is to trace the bullet's path using Bresenham's line algorithm while limiting the number of steps taken each frame. That is every frame you'd add the desired speed to a fixed-point distance allowance, then keep taking Bresenham steps and subtracting one for a straight step and sqrt(2) for a diagonal one until the counter reaches zero.<br />To be honest I've never actually gotten around to testing this approach, but it ought to work.. ;)<br /><br />edit: Actually, I doesn't seem to be anywhere near accurate. Oh well.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Fri Aug 13, 2010 9:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sivak]]></name></author>
<updated>2010-08-13T07:47:27-07:00</updated>
<published>2010-08-13T07:47:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65923#p65923</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65923#p65923"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65923#p65923"><![CDATA[
Interesting approaches.<br /><br />I was thinking of making some kind of LUT that has values for the various angles in case I want an enemy that's shoot them in a pre-determined angle.  I had this vision of a tri-gunner that'd shoot one in straight line and others at maybe 30 degrees or something.<br /><br />I don't think I'd use values for ALL the angles of course...  Plus anything beyond 180 could be flipped horizonally pretty easily.<br /><br />Thanks for the insight.  I'll look into it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3374">Sivak</a> — Fri Aug 13, 2010 7:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-08-13T05:26:55-07:00</updated>
<published>2010-08-13T05:26:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65916#p65916</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65916#p65916"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65916#p65916"><![CDATA[
I adjust projectile speeds in one of my unreleased projects (which you might see as an entry in Jeroen's compo) with three divisions, two multiplications, and a few lookup tables for sine, cosine, and tangent, in a space where 32 angle units make 1 rotation.<br /><ol style="list-style-type: decimal"><li>Reflect displacement (Δx, Δy) into first octant, producing run (longer distance) and rise (shorter distance). </li><li>Slope = rise/run. </li><li>Angle = arctan(slope) = table lookup. </li><li>Unit vector along this angle = (cos(angle), sin(angle)). </li><li>Distance to target = (run, rise) projected onto unit vector = unit vector <a href="http://en.wikipedia.org/wiki/Dot_product" class="postlink">dot</a> (run, rise) = cos(angle) * rise + sin(angle) * run. </li><li>Travel time = distance / speed (not counted as a division because it's constant and can be inlined with shifts). </li><li>Velocity = displacement / travel time. </li></ol><br />It's accurate to within one or two pixels even with only 32 angle units, and it also produces angle (used to choose which frame of rotation the sprite uses) and travel time.<br /><br />To save one div and two muls if you don't need angle and can afford distance being off by up to 10.6% (but not 41.4%), I found one shortcut to approximate distance in <em>Black Art of 3D Game Programming</em> by Andre LaMothe: replace steps 2-5 with Distance = run - rise / 2.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Aug 13, 2010 5:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2010-08-12T23:20:43-07:00</updated>
<published>2010-08-12T23:20:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65908#p65908</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65908#p65908"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65908#p65908"><![CDATA[
Cut the distance down to distance in tiles, and use that X/Y to index some LUTs. Anything on-screen is going to be &lt; 32 tiles away in any direction, so 1024 entries in the LUT. <br /><br />Cut it to 16x16 metatiles, and you're looking at a couple of 256 entry luts, though if you encoded the velocities as 1.3 unsigned fixed point in the table, and handled the signs seperately, you'd get x and y in one 256 byte table.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Thu Aug 12, 2010 11:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sivak]]></name></author>
<updated>2010-08-12T22:34:41-07:00</updated>
<published>2010-08-12T22:34:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65907#p65907</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65907#p65907"/>
<title type="html"><![CDATA[Aiming bullets and heavy computation...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6834&amp;p=65907#p65907"><![CDATA[
Well, I DID accomplish aimed bullets in BK1, but the method was a little sloppy in order to avoid potential heavy computation.<br /><br />Here's what I did and these were spread across two states to avoid a HUGE amount of computation:<br />-Take the center points of player and bullet, call them X1,Y1 and X2,Y2<br />-X2-X1 and Y2-Y1 (do 2's complement if neg and save a flag)<br />-Determine which is bigger<br />-Take the X difference as the high byte, 0 as the low byte and divide the Y difference.  A decimal value is then stored.<br />-Whichever was bigger from before moves at a speed of 1.  The smaller moves at the decimal point speed.<br />-If the flag was set for either of these, do the 2's complement on either one.<br /><br />-In the next state, I'd do multiplication for faster speeds on the values.  Generally just with shifting.<br /><br />So anyway, this WORKED and the shots were indeed aimed, but the downside is that the closer a bullet got to a 45 degree angle, the faster it went.  At exactly 45, it'd be moving the square root of 2 times faster than the intended speed.  Not horrible, but still not as nice as I would like.<br /><br />An approach of possibly using look up tables has been proposed, although that sounds like one gigantic table.<br /><br />The other approach is doing the computation of:  sqrt((X2-X1)^2 + (Y2-Y1)^2)<br />Y speed = Y / distance * speed<br />X speed = X / distance * speed<br /><br />Square root alone is a huge operation, not to mention that I'd probably need the possibility of 4 bytes if the differences are huge.<br /><br />I guess I'm at a point of wondering what would be best...  The old imperfect method or something different.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3374">Sivak</a> — Thu Aug 12, 2010 10:34 pm</p><hr />
]]></content>
</entry>
</feed>