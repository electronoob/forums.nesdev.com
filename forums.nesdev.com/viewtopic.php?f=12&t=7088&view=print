<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 65816 software sprite rotation algorithm</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">65816 software sprite rotation algorithm</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=7088">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=7088</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Oct 22, 2010 11:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>65816 software sprite rotation algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">!add = &quot;clc : adc&quot;<br />!sub = &quot;sec : sbc&quot;<br /><br /><br />sep #$20<br />lda #$88<br />sta $2115<br />lda !bank<br />pha<br />plb<br /><br /><br />rep #$30<br /><br />lda !angle<br />asl<br />and #$01fe<br />tax<br />lda sine_table+$000000,x<br />sta !sine<br />txa<br />!add #$0080<br />and #$01fe<br />tax<br />lda sine_table+$000000,x<br />sta !cosine<br /><br />lda !sine<br />!add !cosine<br />asl #2<br />sta !x_displacement<br /><br />lda !cosine<br />!sub !sine<br />asl #2<br />sta !y_displacement<br /><br />lda !width<br />tay<br />asl #2<br />xab<br />!add !x_pixel<br />find_x_pixel:<br />sub !x_displacement<br />dey<br />bne find_x_pixel<br />sta !x_pixel<br /><br />lda !width<br />tay<br />asl #2<br />xab<br />!add !y_pixel<br />find_y_pixel:<br />sub !y_displacement<br />dey<br />bne find_y_pixel<br />sta !y_pixel<br /><br /><br />render_sprite:<br />lda !x_pixel<br />pha<br />lda !y_pixel<br />pha<br />lda !width<br />pha<br />lda !destination<br />sta $2116<br />render_line:<br />jsr make_affine_plane<br />dec !width<br />bne render_line<br />rep #$20<br />pla<br />sta !width<br />pla<br />!add !cosine<br />sta !y_pixel<br />pla<br />!add !sine<br />sta !x_pixel<br />lda !destination<br />!add #$0020<br />sta !destination<br />dec !height<br />bne render_sprite<br />rts<br /><br /><br /><br /><br /><br /><br />make_affine_plane:<br />rep #$30<br />lda !y_pixel<br />sta !pixel_address_1<br />!sub !sine<br />sta !pixel_address_2<br />!sub !sine<br />sta !pixel_address_3<br />!sub !sine<br />sta !pixel_address_4<br />!sub !sine<br />sta !pixel_address_5<br />!sub !sine<br />sta !pixel_address_6<br />!sub !sine<br />sta !pixel_address_7<br />!sub !sine<br />sta !pixel_address_8<br />!sub !sine<br />sta !y_pixel<br />lda !x_pixel<br />sta !pixel_address_1-1<br />!add !cosine<br />sta !pixel_address_2-1<br />!add !cosine<br />sta !pixel_address_3-1<br />!add !cosine<br />sta !pixel_address_4-1<br />!add !cosine<br />sta !pixel_address_5-1<br />!add !cosine<br />sta !pixel_address_6-1<br />!add !cosine<br />sta !pixel_address_7-1<br />!add !cosine<br />sta !pixel_address_8-1<br />!add !cosine<br />sta !x_pixel<br />sep #$20<br />lda &#40;!pixel_address_1&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_2&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_3&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_4&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_5&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_6&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_7&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_8&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !bit_plane_1<br />stx $2118<br />ldx !bit_plane_2<br />stx $2118<br />rts<br /><br /><br /><br /><br />sine_table:<br />dw 0,6,13,19,25,31,38,44,50,56,62,68,74,80,86,92<br />dw 98,104,109,115,121,126,132,137,142,147,152,157,162,167,172,177<br />dw 181,185,190,194,198,202,206,209,213,216,220,223,226,229,231,234<br />dw 237,239,241,243,245,247,248,250,251,252,253,254,255,255,256,256<br />dw 256,256,256,255,255,254,253,252,251,250,248,247,245,243,241,239<br />dw 237,234,231,229,226,223,220,216,213,209,206,202,198,194,190,185<br />dw 181,177,172,167,162,157,152,147,142,137,132,126,121,115,109,104<br />dw 98,92,86,80,74,68,62,56,50,44,38,31,25,19,13<br />dw 0,-6,-13,-19,-25,-31,-38,-44,-50,-56,-62,-68,-74,-80,-86,-92<br />dw -98,-104,-109,-115,-121,-126,-132,-137,-142,-147,-152,-157,-162,-167,-172<br />dw -177,-181,-185,-190,-194,-198,-202,-206,-209,-213,-216,-220,-223,-226,-229,-231<br />dw -234,-237,-239,-241,-243,-245,-247,-248,-250,-251,-252,-253,-254,-255,-255,-256<br />dw -256,-256,-256,-256,-255,-255,-254,-253,-252,-251,-250,-248,-247,-245,-243,-241<br />dw -239,-237,-234,-231,-229,-226,-223,-220,-216,-213,-209,-206,-202,-198,-194,-190<br />dw -185,-181,-177,-172,-167,-162,-157,-152,-147,-142,-137,-132,-126,-121,-115,-109<br />dw -104,-98,-92,-86,-80,-74,-68,-62,-56,-50,-44,-38,-31,-25,-19,-13,-6</div>
<br />
<br />I haven't tested this out yet, but I was too excited not to post it.  This is can be used during load times between levels.  This uses the PPU for the purpose of memory organization since I wanted to avoid sloppy 65816 code.  This wouldn't work during active display for said reason, but thanks to 128 kB of work ram, you don't need to.
<br />
<br />Something I like about storing rotated sprites in work ram is they can take less memory than most people think.  Angles 180-360 degrees are equivelant to 0-180 degrees with vertical and horizontal flipping applied.  You can further minimize the amount of availeable memory by making use of symetrical sprites so that angles 0-90 become mirror images of angles 90-180.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Oct 22, 2010 12:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So that people don't compare your game to Midnight Club or WWE for PSP, how many tiles of rotation can be created per second of blank-screen load time?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Oct 22, 2010 12:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">So that people don't compare your game to Midnight Club or WWE for PSP, how many tiles of rotation can be created per second of blank-screen load time?</div>
<br />
<br />approxmately 180 16x16 sprites per second

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Oct 22, 2010 12:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This sounds pretty good to me. You're right that 128k of WRAM is a lot and that it can be put to good use that way. Rotating sprites during gameplay could look good in a SNES game.
<br />
<br />(too bad this wouldn't be applicable on the NES as you only have much less WRAM and less time to update tiles dynamically).
<br />
<br />What bothers me though is the completely uncommented code. Not only it is recommended to put some comments in your code stricly for personal use, but if you want to share code with other people, then you <em>must</em> comment it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Oct 22, 2010 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">you <em>must</em></div>
<br />That <em>could</em> sound bossy. When confronted with a generous donation of library code like this, it's nicer not to give the donor an excuse to take his <a href="http://en.wiktionary.org/wiki/take_one%27s_ball_and_go_home" class="postlink">proverbial</a> ball and go home.
<br />
<br />The dw was originally all one line before I split it up so as not to widen the page.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Oct 22, 2010 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">!add = &quot;clc : adc&quot;<br />!sub = &quot;sec : sbc&quot;<br /><br /><br />sep #$20<br />lda #$88<br />sta $2115&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; full graphics 4-bit v-ram loading 0aaaaaaabbbccccc -&gt; 0aaaaaaacccccbbb<br />lda !bank&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; the bank that holds the 8-bit 256x256 bitmap<br />pha&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; of sprite being rotated<br />plb<br /><br /><br />rep #$30<br /><br />lda !angle&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find sine and cosine<br />asl<br />and #$01fe<br />tax<br />lda sine_table+$000000,x<br />sta !sine<br />txa<br />!add #$0080<br />and #$01fe<br />tax<br />lda sine_table+$000000,x<br />sta !cosine<br /><br /><br />lda !sine<br />!add !cosine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find the negative x displacement<br />asl #2&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; 4 pixels up left from center<br />sta !x_displacement<br /><br />lda !cosine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find the negative y displacement<br />!sub !sine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; 4 pixels up left from center<br />asl #2<br />sta !y_displacement<br /><br />lda !width&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; add center of sprite to x pixel coordinate<br />tay<br />asl #2<br />xab<br />!add !x_pixel<br />find_x_pixel:<br />sub !x_displacement&nbsp; &nbsp;&nbsp; &nbsp;;; subtract &#40;x displacement&#41;*width from x pixel<br />dey&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; coordinate<br />bne find_x_pixel<br />sta !x_pixel<br /><br />lda !width&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; add center of sprite to y pixel coordinate<br />tay<br />asl #2<br />xab<br />!add !y_pixel<br />find_y_pixel:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; subtract &#40;y displacement&#41;*width from y pixel<br />sub !y_displacement&nbsp; &nbsp;&nbsp; &nbsp;;; coordinate<br />dey<br />bne find_y_pixel<br />sta !y_pixel<br /><br /><br />render_sprite:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; push x and y pixel coordinates<br />lda !x_pixel&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; and width onto stack to save<br />pha&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; for rendering the line after it<br />lda !y_pixel<br />pha<br />lda !width<br />pha<br />lda !destination<br />sta $2116<br />render_line:<br />jsr render_8_pixels<br />dec !width<br />bne render_line&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; repeat rendering 8-pixels &quot;width&quot; times<br />rep #$20<br />pla&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; recover x and y coordinates and width<br />sta !width&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; next line of pixels<br />pla<br />!add !cosine<br />sta !y_pixel&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find new starting point for y coordinate<br />pla<br />!add !sine<br />sta !x_pixel&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find new starting point for x coordinate<br />lda !destination<br />!add #$0020<br />sta !destination&nbsp; &nbsp;&nbsp; &nbsp;;; set v-ram address reg at the next line of pixels<br />dec !height<br />bne render_sprite<br />rts<br /><br /><br /><br /><br /><br /><br />render_8_pixels:<br />rep #$30<br />lda !y_pixel<br />sta !pixel_address_1&nbsp; &nbsp;&nbsp; &nbsp;;; unrolled loop for finding y coordinate of 8 pixels<br />!sub !sine<br />sta !pixel_address_2<br />!sub !sine<br />sta !pixel_address_3<br />!sub !sine<br />sta !pixel_address_4<br />!sub !sine<br />sta !pixel_address_5<br />!sub !sine<br />sta !pixel_address_6<br />!sub !sine<br />sta !pixel_address_7<br />!sub !sine<br />sta !pixel_address_8<br />!sub !sine<br />sta !y_pixel<br />lda !x_pixel<br />sta !pixel_address_1-1&nbsp; &nbsp;&nbsp; &nbsp;;; unrolled loop for finding x coordinate of 8 pixels<br />!add !cosine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; top byte &#40;whole number&#41; of x coordinate is written over<br />sta !pixel_address_2-1&nbsp; &nbsp;&nbsp; &nbsp;;; bottom byte &#40;decimal&#41; of y coordinate creating<br />!add !cosine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; 16 bit pixel addresses in the form of yyyyyyyyxxxxxxxx<br />sta !pixel_address_3-1<br />!add !cosine<br />sta !pixel_address_4-1<br />!add !cosine<br />sta !pixel_address_5-1<br />!add !cosine<br />sta !pixel_address_6-1<br />!add !cosine<br />sta !pixel_address_7-1<br />!add !cosine<br />sta !pixel_address_8-1<br />!add !cosine<br />sta !x_pixel<br />sep #$20<br />lda &#40;!pixel_address_1&#41;&nbsp; &nbsp;&nbsp; &nbsp;;; unrolled loop for fetching pixels and<br />ror&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; turning 8-bit packed pixel format into 4-bit planar<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_2&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_3&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_4&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_5&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_6&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_7&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />lda &#40;!pixel_address_8&#41;<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !bit_plane_1<br />stx $2118&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; send the 4 bytes to v-ram address port and let the PPU do the rest<br />ldx !bit_plane_2<br />stx $2118<br />rts<br /><br /><br /><br /><br />sine_table:<br />dw 0,6,13,19,25,31,38,44,50,56,62,68,74,80,86,92,98,104,109,115,121,126,132,137,142<br />dw 147,152,157,162,167,172,177,181,185,190,194,198,202,206,209,213,216,220,223,226,229<br />dw 231,234,237,239,241,243,245,247,248,250,251,252,253,254,255,255,256,256,256,256,256<br />dw 255,255,254,253,252,251,250,248,247,245,243,241,239,237,234,231,229,226,223,220,216<br />dw 213,209,206,202,198,194,190,185,181,177,172,167,162,157,152,147,142,137,132,126,121<br />dw 115,109,104,98,92,86,80,74,68,62,56,50,44,38,31,25,19,13,0,-6,-13,-19,-25,-31,-38<br />dw -44,-50,-56,-62,-68,-74,-80,-86,-92,-98,-104,-109,-115,-121,-126,-132,-137,-142<br />dw -147,-152,-157,-162,-167,-172,-177,-181,-185,-190,-194,-198,-202,-206,-209,-213,-216<br />dw -220,-223,-226,-229,-231,-234,-237,-239,-241,-243,-245,-247,-248,-250,-251,-252,-253<br />dw -254,-255,-255,-256,-256,-256,-256,-256,-255,-255,-254,-253,-252,-251,-250,-248<br />dw -247,-245,-243,-241,-239,-237,-234,-231,-229,-226,-223,-220,-216,-213,-209,-206,-202<br />dw -198,-194,-190,-185,-181,-177,-172,-167,-162,-157,-152,-147,-142,-137,-132,-126,-121<br />dw -115,-109,-104,-98,-92,-86,-80,-74,-68,-62,-56,-50,-44,-38,-31,-25,-19,-13,-6</div>
<br />
<br />Hope this helps.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This sounds pretty good to me. You're right that 128k of WRAM is a lot and that it can be put to good use that way. Rotating sprites during gameplay could look good in a SNES game. <br /></div>
<br />
<br />Whenever I go from a 2D game on the GBA/DS/Wii to an SNES game, the lack of rotating sprites become very apparant, especially during boss fights.  It is that missing 2D element that makes SNES games look bland in comparison to more modern 2D games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Oct 22, 2010 3:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Hope this helps.</div><br />Thank you.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Whenever I go from a 2D game on the GBA/DS/Wii to an SNES game, the lack of rotating sprites become very apparant, especially during boss fights.  It is that missing 2D element that makes SNES games look bland in comparison to more modern 2D games.</div>
<br />For a 16-angle rotation, you'd need to generate 8 intermediate steps per sprite cel. VH-flipping would give you all 16 angles, and V-flipping or H-flipping alone would give the flipped versions of same. This corresponds roughly to preloading the GBA's 32 matrices with 16 steps of rotation and 16 steps of flipped rotation. An NES-size (128x128 pixel) sprite sheet has 64 16x16 pixel sprite cels on it, needing 512 intermediate steps. At 128 bytes each, these take 64 KiB, so if your engine is already frugal with work RAM, you still have plenty of room.
<br />
<br />I guess the limiting factor would be time: At 180 per second, it takes almost three blank-screen seconds to load them. Can this be interleaved with APU loading? Or in the age of GBA nostalgia and widescreen TV, would it be a good idea to use a 256x160 pixel visible window and forced blanking to free up enough PPU time to generate one rotated cel each frame? If that's not practical, perhaps you could generate them linearly (SMS-style) into work RAM while displaying something, and then load them into VRAM using interleaving mode $88 at run time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Oct 24, 2010 4:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">!add = &quot;clc : adc&quot;<br />!sub = &quot;sec : sbc&quot;<br />!angle = &quot;$00&quot;<br />!bank = &quot;$01&quot;<br />!sine = &quot;$02&quot;<br />!cosine = &quot;$04&quot;<br />!x_pixel = &quot;$06&quot;<br />!y_pixel = &quot;$08&quot;<br />!x_displacement = &quot;$0a&quot;<br />!y_displacement = &quot;$0c&quot;<br />!width = &quot;$0e&quot;<br />!height = &quot;$10&quot;<br />!destination = &quot;$12&quot;<br />!pixel_address = &quot;$20&quot;<br />!bit_plane_1 = &quot;$40&quot;<br />!bit_plane_2 = &quot;$41&quot;<br />!bit_plane_3 = &quot;$42&quot;<br />!bit_plane_4 = &quot;$43&quot;<br /><br /><br /><br />sprite_rotation:<br /><br /><br />sep #$20<br />lda #$84<br />sta $2115&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; full graphics 4-bit v-ram loading 0aaaaaaabbbccccc -&gt; 0aaaaaaacccccbbb<br />lda !bank&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; the bank that holds the 8-bit 256x256 bitmap<br />pha&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; of sprite being rotated<br />plb<br /><br /><br />rep #$30<br /><br />lda !angle&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find sine and cosine<br />asl<br />and #$01fe<br />tax<br />lda sine_table+$000000,x<br />sta !sine<br />txa<br />!add #$0080<br />and #$01fe<br />tax<br />lda sine_table+$000000,x<br />sta !cosine<br /><br /><br />lda !sine<br />!add !cosine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find the negative x displacement<br />asl #2&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; 4 pixels up left from center<br />sta !x_displacement<br /><br />lda !cosine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find the negative y displacement<br />!sub !sine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; 4 pixels up left from center<br />asl #2<br />sta !y_displacement<br /><br />lda !width&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; add center of sprite to x pixel coordinate<br />tay<br />asl #2<br />xba<br />!add !x_pixel<br />find_x_pixel:<br />!sub !x_displacement&nbsp; &nbsp;&nbsp; &nbsp;;; subtract &#40;x displacement&#41;*width from x pixel<br />dey&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; coordinate<br />bne find_x_pixel<br />sta !x_pixel<br /><br />lda !width&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; add center of sprite to y pixel coordinate<br />tay<br />asl #2<br />xba<br />!add !y_pixel<br />find_y_pixel:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; subtract &#40;y displacement&#41;*width from y pixel<br />!sub !y_displacement&nbsp; &nbsp;&nbsp; &nbsp;;; coordinate<br />dey<br />bne find_y_pixel<br />sta !y_pixel<br /><br /><br />render_sprite:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; push x and y pixel coordinates<br />lda !x_pixel&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; and width onto stack to save<br />pha&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; for rendering the line after it<br />lda !y_pixel<br />pha<br />lda !width<br />pha<br />lda !destination<br />sta $2116<br />render_line:<br />jsr render_8_pixels<br />dec !width<br />bne render_line&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; repeat rendering 8-pixels &quot;width&quot; times<br />rep #$20<br />pla&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; recover x and y coordinates and width<br />sta !width&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; next line of pixels<br />pla<br />!add !cosine<br />sta !y_pixel&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find new starting point for y coordinate<br />pla<br />!add !sine<br />sta !x_pixel&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; find new starting point for x coordinate<br />lda !destination<br />!add #$0020<br />sta !destination&nbsp; &nbsp;&nbsp; &nbsp;;; set v-ram address reg at the next line of pixels<br />dec !height<br />bne render_sprite<br />rts<br /><br /><br /><br /><br /><br /><br />render_8_pixels:<br />rep #$30<br />lda !y_pixel<br />sta !pixel_address+2&nbsp; &nbsp;&nbsp; &nbsp;;; unrolled loop for finding y coordinate of 8 pixels<br />!sub !sine<br />sta !pixel_address+6<br />!sub !sine<br />sta !pixel_address+10<br />!sub !sine<br />sta !pixel_address+14<br />!sub !sine<br />sta !pixel_address+18<br />!sub !sine<br />sta !pixel_address+22<br />!sub !sine<br />sta !pixel_address+26<br />!sub !sine<br />sta !pixel_address+30<br />!sub !sine<br />sta !y_pixel<br />lda !x_pixel<br />sta !pixel_address+1&nbsp; &nbsp;&nbsp; &nbsp;;; unrolled loop for finding x coordinate of 8 pixels<br />!add !cosine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; top byte &#40;whole number&#41; of x coordinate is written over<br />sta !pixel_address+5&nbsp; &nbsp;&nbsp; &nbsp;;; bottom byte &#40;decimal&#41; of y coordinate creating<br />!add !cosine&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; 16 bit pixel addresses in the form of yyyyyyyyxxxxxxxx<br />sta !pixel_address+9<br />!add !cosine<br />sta !pixel_address+13<br />!add !cosine<br />sta !pixel_address+17<br />!add !cosine<br />sta !pixel_address+21<br />!add !cosine<br />sta !pixel_address+25<br />!add !cosine<br />sta !pixel_address+29<br />!add !cosine<br />sta !x_pixel<br />sep #$20<br />ldx !pixel_address+2&nbsp; &nbsp;&nbsp; &nbsp;;; unrolled loop for fetching pixels and<br />lda $0000,x<br />ror&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; turning 8-bit packed pixel format into 4-bit planar<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !pixel_address+6<br />lda $0000,x<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !pixel_address+10<br />lda $0000,x<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !pixel_address+14<br />lda $0000,x<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !pixel_address+18<br />lda $0000,x<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !pixel_address+22<br />lda $0000,x<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !pixel_address+26<br />lda $0000,x<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !pixel_address+30<br />lda $0000,x<br />ror<br />rol !bit_plane_1<br />ror<br />rol !bit_plane_2<br />ror<br />rol !bit_plane_3<br />ror<br />rol !bit_plane_4<br />ldx !bit_plane_1<br />stx $2118&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;; send the 4 bytes to v-ram address port and let the PPU do the rest<br />ldx !bit_plane_3<br />stx $2118<br />rts<br /><br /><br /><br /><br />sine_table:<br />dw 0,6,13,19,25,31,38,44,50,56,62,68,74,80,86,92,98,104,109,115,121,126,132,137,142<br />dw 147,152,157,162,167,172,177,181,185,190,194,198,202,206,209,213,216,220,223,226,229<br />dw 231,234,237,239,241,243,245,247,248,250,251,252,253,254,255,255,256,256,256,256,256<br />dw 255,255,254,253,252,251,250,248,247,245,243,241,239,237,234,231,229,226,223,220,216<br />dw 213,209,206,202,198,194,190,185,181,177,172,167,162,157,152,147,142,137,132,126,121<br />dw 115,109,104,98,92,86,80,74,68,62,56,50,44,38,31,25,19,13,0,-6,-13,-19,-25,-31,-38<br />dw -44,-50,-56,-62,-68,-74,-80,-86,-92,-98,-104,-109,-115,-121,-126,-132,-137,-142<br />dw -147,-152,-157,-162,-167,-172,-177,-181,-185,-190,-194,-198,-202,-206,-209,-213,-216<br />dw -220,-223,-226,-229,-231,-234,-237,-239,-241,-243,-245,-247,-248,-250,-251,-252,-253<br />dw -254,-255,-255,-256,-256,-256,-256,-256,-255,-255,-254,-253,-252,-251,-250,-248<br />dw -247,-245,-243,-241,-239,-237,-234,-231,-229,-226,-223,-220,-216,-213,-209,-206,-202<br />dw -198,-194,-190,-185,-181,-177,-172,-167,-162,-157,-152,-147,-142,-137,-132,-126,-121<br />dw -115,-109,-104,-98,-92,-86,-80,-74,-68,-62,-56,-50,-44,-38,-31,-25,-19,-13,-6</div>
<br />
<br />IT WORKS!!!!!  Now all I need to do is make a demo showing this off!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KungFuFurby</b> [ Mon Oct 25, 2010 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Want me to make the music for your demo? ^_^ I can do so via SNESMod.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Oct 25, 2010 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">KungFuFurby wrote:</div><div class="quotecontent">Want me to make the music for your demo? ^_^ I can do so via SNESMod.</div>
<br />
<br />Sure.  What genres are you good at?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KungFuFurby</b> [ Tue Oct 26, 2010 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've done multiple different types of genres... futuristic, orchestral (not really on realism, though thankfully I don't use what you'd hear in Quicktime when playing MIDI files... for the most part.), medieval, maybe Western, etc. To prove some of this, I'll show you some example tunes.
<br />
<br />Here's one example tune, just for show. Actually, this is a collection of tunes in one IT file. This is Brave Battle Saga's battle, boss &amp; victory themes ported over from the Genesis to one IT file, plus a bonus tune. I can even show you how to play a particular sub-tune, and hack the SPC conversion myself to play the other tunes. No seperating required. I really am curious how this one turns out... never have attempted a multi-tune SPC before converted with SNESMod.
<br />
<br /><a href="http://www.box.net/shared/85sqhvn3yk" class="postlink">Brave Battle Saga ~ Battle, Boss &amp; Victory Themes + 1 Bonus Tune</a> (IT file)
<br />
<br />Here's another example tune. This one shows just how long I can actually make my tune... and fit it into one SPC file. This is very old: it comes from a currently abandoned game called SNES All-Stars. Actually, bazz was the original composer, and I got permission to add on to the original. This one's pre-converted: It takes SNESMod to its limits in size and pattern numbers. I did this coversion with mukunda, the creator of SNESMod, and learned how much it takes to max out the size. About 44,000 length of sample, 64 patterns (some of them 128 rows! There is a 64 pattern limitation on SNESMod), and nearly 12 minutes worth of music just to one loop!
<br />
<br /><a href="http://www.box.net/shared/0lpzu9n9mu" class="postlink">SNES All-Stars: Futuristic Boss</a> (IT file ~ the file name is old, and I now consider it by this name)
<br /><a href="http://www.box.net/shared/xmetyx94zh" class="postlink">SNES All-Stars: Futuristic Boss</a> (SPC file ~ fully tagged by myself)
<br />
<br />I can't convert to SPC on my end due to me having a non-Intel Mac, but usually my tunes fit the size limit. If there are any problems, then usually when I listen to the SPC file I can tell. I know there's a slight slowdown from the original IT file on conversion.
<br />
<br />I can even do echo, though before I do so I estimate the memory consumption so I know how much possible free space I have. This example tune shows that I've done this successfully before. In this case, a friend of mine that is one of the contributors on SNESMusic.org, nensondubois, did the conversion.
<br />
<br /><a href="http://www.box.net/shared/8f90gkrjg3" class="postlink">Epic Theme</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Nov 09, 2010 6:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I like your music.  I might have a little trouble implementing your music into the demo, simply because I'm not as experienced with the SPC700 as I am with the CPU &amp; PPU side of the SNES.
<br />
<br />I might take a while with the demo, because I'm also working on my game at the same time, and I have a lot of school and I've been focusing more on my social life.
<br />
<br />Sort've offtopic.  I really think the internet as a whole is running out of energy.  I look around other websites, and I just can't find anything fresh and new that hasn't been discussed to death.  Look at any gaming website and they're all talking about the same old stuff they were talking about 10 years ago.  The same games, same questions, same replies.  Technical debates (non nesdev) were fun for a while, but once I realized it was all about reading off specs, and comparing the system's power by comparing what was done in games, I got tired of it.  We all know stuff like colors, Mhz and we all know about X game using Y effect.  It was all about what the system did, but never about the stuff it never did but could've been done on that system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KungFuFurby</b> [ Wed Nov 10, 2010 1:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's OK. I've looked up Skipp and Friend's source code and I have a guess on how to get multi-segmented music to play. First, load the music with this code (make sure you have snesmod included in your .asm file via .include ...):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx&nbsp; &nbsp;#&#40;insert tune ID&#41;<br />jsr&nbsp; &nbsp;spcLoad</div><br /><br />After that, here's what starts a tune:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx&nbsp; &nbsp;#0<br />jsr&nbsp; &nbsp;spcPlay</div>
<br />
<br />#0 represents starting from order zero. This is just a guess, but to play a different segment, first stop the music (JSR spcStop), then use LDX, but with a nonzero value, and play that tune (JSR spcPlay). Should require no modification to the original SNESMod source code this way.
<br />
<br />Oh, and here's a custom music collection just for you in one IT file:
<br />
<br /><a href="http://www.box.net/shared/6zlp555ns4" class="postlink">SNES Software Sprite Rotation Demo Collection</a>
<br />
<br />The numbers that will access the start of a subtune in the collection are:
<br />0
<br />33
<br />42
<br />51
<br />53
<br />69
<br />76
<br />81
<br />
<br />The tempo isn't consistent throughout the tunes, hence the reason why I reveal this now. This might be useful if your composer for your game is wondering if there can be more than one tune in an IT file. ^_^
<br />
<br />I would be quite happy to attempt to debug problems on this end, though I'm no SNES programmer. ^_^

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KungFuFurby</b> [ Sat Dec 18, 2010 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I ended up debugging the IT file myself after converting them myself since one of the tunes had the wrong tempo (turns out I can't go that high in the tempo in one of the subtunes, so my solution was to half the speed and half the tempo)... note that this is done on a Windows computer, not a Mac, so that to me is a limited time offer. All samples were OK.
<br />
<br />I confirmed that the multi-tune IT files do work when converting to SPC files. To extract the other tunes, all I had to do was go to $1B20 in the original SPC file which contains the order list, and modify the first few values to FE. There's a reason why I leave FE just before the next sub-tune: it's mainly for the benefit of being able to do that seperation and determining where the next tune is.
<br />
<br /><a href="http://www.box.net/shared/efsfkce3j2" class="postlink">New Source IT File</a>
<br /><a href="http://www.box.net/shared/h2gpvnkup4" class="postlink">SPC set</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>