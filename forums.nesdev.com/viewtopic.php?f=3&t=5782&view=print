<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Multiple switch for CPU emulation</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Multiple switch for CPU emulation</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=5782">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=5782</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Nov 30, 2009 8:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Multiple switch for CPU emulation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm sure almost everyone has a big switch() for their opcodes in their CPU emulator.
<br />
<br />I was recently thinking about this approach qeed showed me (which I guess was blargg's idea?)
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">switch &#40;cpu.opcode&#41;<br />&#123;<br />&nbsp; case lda_imm:<br />&nbsp; &nbsp; get_imm&#40;&#41;;<br />&nbsp; &nbsp; goto lda;<br />&nbsp; case lda_zp:<br />&nbsp; &nbsp; get_zp&#40;&#41;:<br />&nbsp; &nbsp; goto lda;<br />&nbsp; case adc_imm:<br />&nbsp; &nbsp; get_imm&#40;&#41;;<br />&nbsp; &nbsp; goto adc;<br /><br />&nbsp; lda: /* do stuff */<br />&nbsp; &nbsp; break;<br />&nbsp; adc: /* do stuff */<br />&nbsp; &nbsp; break;<br />&#125;<br /></div><br /><br />At first I was like "really?  goto?  wtf".  But now that I think about it, it makes some sense.  It avoids duplicate code and keeps the switch smaller because there's less inline.<br /><br />But still... goto?  There has to be a better way.<br /><br />So I thought about it... and what if you made two separate switches... one for the addressing mode lookup, and another for the opcode execution?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">switch&#40;cpu.opcode&#41;<br />&#123;<br />&nbsp; case lda_imm:<br />&nbsp; case adc_imm:<br />&nbsp; &nbsp; get_imm&#40;&#41;;<br />&nbsp; &nbsp; break;<br />&nbsp;//...<br />&#125;<br /><br />switch&#40;cpu.opcode&#41;<br />&#123;<br />&nbsp; case lda_imm:<br />&nbsp; &nbsp; lda&#40;&#41;;<br />&nbsp; &nbsp; break;<br /><br />&nbsp; case adc_imm:<br />&nbsp; &nbsp; adc&#40;&#41;;<br />&nbsp; &nbsp; break;<br />&#125;<br /></div>
<br />
<br />This seems like it would keep the switches even smaller, which might help speed up the code.  Although I'm not sure if the double-switch would slow it down.
<br />
<br />Has anyone tried something like this?  I'm curious as to how well it would work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nessie</b> [ Mon Nov 30, 2009 9:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're thinking of performance, I would <em>guess</em> that if the total size of two switches is smaller than one switch, they could possibly run faster. The few cycles wasted on table lookup are probably insignificant as long as your code fits in the cache.
<br />
<br />The goto version looks like a good option. If you dislike the goto keyword I suppose you could replace it with a function call (fastcall) followed by a return, perhaps your compiler will be clever enough to translate that into an absolute jmp.
<br />
<br />
<br />I've implemented this by splitting addressing mode lookup and operation lookup using a function pointer. pseudo code:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">function execute&#40;opcode&#41;<br />&#123;<br />&nbsp; operation = operations&#91;opcode&#93;<br />&nbsp; mode = modes&#91;opcode&#93;<br />&nbsp; mode&#40;operation&#41;<br />&#125;<br /><br />// Example addressing mode<br />function zeroPageRMW&#40;operation&#41;<br />&#123;<br />&nbsp; addr = nextbyte&#40;&#41;<br />&nbsp; value = read&#40;addr&#41;<br />&nbsp; write&#40;addr, value&#41; // Write back unmodified :&#41;<br />&nbsp; value = operation&#40;value&#41;<br />&nbsp; write&#40;addr, value&#41;<br />&#125;<br /><br />// Example operation<br />function inc&#40;value&#41;<br />&#123;<br />&nbsp; value++;<br />&nbsp; saveSomeFlags&#40;value&#41;<br />&nbsp; return value;<br />&#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Mon Nov 30, 2009 1:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- RockNES uses a switch statement for the addressing mode, then a jump table to the instruction, which can jump into another depending of the case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Nov 30, 2009 3:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />PocketNES used a 256-word jump table, then used the jump table inside every instruction to go on to the next.  It only escaped the CPU loop by running out of cycles before the next event.  Also separate 8-word call tables for memory reads and writes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Nov 30, 2009 4:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Weird.  The disassembler I wrote for 6502 (not TRaCER) in C was done unlike any of the above... well, the closest thing would be how PocketNES's is done.  I'll try to dig up the source to confuse people.  :-)
<br />
<br />I don't think ultimately it matters though, given that most compilers will optimise a large switch/case statement into a jumptable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon Nov 30, 2009 5:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#40;this-&gt;*opcode_table&#91;op_readpc&#40;&#41;&#93;&#41;&#40;&#41;;</div>
<br />
<br />Table is built off template functions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Nov 30, 2009 8:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was more interested in how this would work efficiency wise.
<br />
<br />Additional function calls (especially if they're done via a function pointer) add some overhead.  And inlining the addressing mode and/or instruction code for all 256 opcodes would make "the big switch" huge with a lot of duplicate / redundant code.
<br />
<br />The idea here was that you have no duplicate code with the switches, and also have no additional function calls (provided your code is inlined).  So the code is small and potentially faster.  But I don't know if having a second switch (and thusly a second jump table) would negate the benefits.
<br />
<br />I dunno.  It was just a thought.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Nov 30, 2009 9:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wouldn't 64K of cache fit an unrollled 6502 CPU core?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Dec 01, 2009 6:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That and how much of the PPU and how much of the APU? Some programs do tricky things that need a lot of catchups.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>essial</b> [ Thu Dec 03, 2009 9:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't have a switch in my CPU emulator (and it is 99% finished, and passes all CPU test roms).
<br />
<br />Here' is the code:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bool CNES2A03::processOpcode&#40;void&#41;<br />&#123;<br />&nbsp; &nbsp;if &#40;clockDuty &gt; 0&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;clockDuty--;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;if &#40;clockDuty == 0&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;switch &#40;dutyIntType&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case NES_INTTYPE_NMI:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;NES_FLAGCLEAR&#40;regs.P, NES_PROCESSOR_STATUS_BREAK_COMMAND&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;SETFLAG&#40;regs.P, NES_PROCESSOR_STATUS_UNUSED, false&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;stackPush&#40;regs.PC &gt;&gt; 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;stackPush&#40;regs.PC &amp; 0xFF&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;stackPush&#40;regs.P&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;regs.PC = readMem&#40;0xFFFA&#41; + &#40;readMem&#40;0xFFFB&#41; &lt;&lt; 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;case NES_INTTYPE_BRK:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;NES_FLAGSET&#40;regs.P, NES_PROCESSOR_STATUS_BREAK_COMMAND&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;NESADDRESS16 addr = regs.PC + 1;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;SETFLAG&#40;regs.P, NES_PROCESSOR_STATUS_UNUSED, true&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;stackPush&#40;addr &gt;&gt; 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;stackPush&#40;addr &amp; 0xFF&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;stackPush&#40;regs.P&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;regs.PC = readMem&#40;0xFFFE&#41; + &#40;readMem&#40;0xFFFF&#41; &lt;&lt; 8&#41;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;bool result = false;<br />&nbsp; &nbsp;OPCODE opcode = readMem&#40;regs.PC++&#41;;<br />&nbsp; &nbsp;if &#40;opFunc&#91;opcode&#93; == NULL&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;return false; // TODO: handle invalid opcode<br />&nbsp; &nbsp;&#125; else &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;if &#40;!opFunc&#91;opcode&#93;&#40;this, opcode, opFuncParam&#91;opcode&#93;&#41;&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return false;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;return true;<br />&#125;</div><br /><br />So instead of a huge switch my code simply says:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">opFunc&#91;opcode&#93;&#40;this, opcode, opFuncParam&#91;opcode&#93;&#41;</div><br /><br />Here's an example of an opcode implimentation:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">OPDEF&#40;JMP&#41;<br />&#123;<br />&nbsp; &nbsp;/* JMP Jump. The program jumps to a label and continues from there.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;An original 6502 has does not correctly fetch the target address if the indirect vector falls <br />&nbsp; &nbsp;&nbsp; &nbsp;on a page boundary &#40;e.g. $xxFF where xx is and value from $00 to $FF&#41;. In this case fetches <br />&nbsp; &nbsp;&nbsp; &nbsp;the LSB from $xxFF as expected but takes the MSB from $xx00. This is fixed in some later chips <br />&nbsp; &nbsp;&nbsp; &nbsp;like the 65SC02. */<br /><br />&nbsp; &nbsp;if &#40;opParam == AFP_ABSOLUTE&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;NESADDRESS16 addr = NEXTOP;<br />&nbsp; &nbsp;&nbsp; &nbsp;addr += &#40;NEXTOP &lt;&lt; 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;parent-&gt;regs.PC = addr;<br />&nbsp; &nbsp;&#125; else &#123;// Indirect<br />&nbsp; &nbsp;&nbsp; &nbsp;NESADDRESS16 srcAddr = NEXTOP;<br />&nbsp; &nbsp;&nbsp; &nbsp;srcAddr += &#40;NEXTOP &lt;&lt; 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;NESADDRESS16 finalAddr;<br />#ifdef ENABLE_6502_BUGS<br />&nbsp; &nbsp;&nbsp; &nbsp;if &#40;&#40;srcAddr &amp; 0xFF&#41; == 0xFF&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Emulate the original 6502 bug where fetching an indirect address on a page boundery<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// for JMP opcodes causes the address to be loaded improperly.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;finalAddr = parent-&gt;readMem&#40;srcAddr&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;finalAddr += &#40;parent-&gt;readMem&#40;&#40;srcAddr &amp; 0xFF00&#41;&#41; &lt;&lt; 8&#41;; // Emulate the page wrap bug<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125; else &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Not on a page boundery -- do it the normal way.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;finalAddr = parent-&gt;readMem&#40;srcAddr&#41; +&nbsp; &#40;parent-&gt;readMem&#40;srcAddr+1&#41; &lt;&lt; 8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />#else <br />&nbsp; &nbsp;&nbsp; &nbsp;finalAddr = parent-&gt;readMem&#40;srcAddr&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;finalAddr += &#40;parent-&gt;readMem&#40;srcAddr+1&#41; &lt;&lt; 8&#41;;<br />#endif // ENABLE_6502_BUGS<br />&nbsp; &nbsp;&nbsp; &nbsp;parent-&gt;regs.PC = finalAddr;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;return true;<br />&#125;</div><br /><br />And the OPDEF macro...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define OPDEF&#40;x&#41; __inline bool CNES2A03::op ## x&#40;CNES2A03* parent, OPCODE opcode, VAL8 opParam&#41;</div>
<br />
<br />Runs super fast. Switch statements require a LOT of branching (one per case) that kills the (real) CPU's prefetch cache. Having the higher used opcodes at the top of the switch will help, but the speed results will be different for different opcodes.
<br />
<br />I decided to go with a global function pointer array. There's only one call, and no branching (in regards to finding the proper opcode functionality). There may be some duplicated code in certain situations, but this method works for me and keeps things nice and clean. Besides the CPU isn't going to change once it's done, so a few extra lines is better than dotting your code with gotos.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamburgler</b> [ Thu Dec 03, 2009 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Large switch statements usually get turned into jump tables by the compiler. Implementing your own jump table may be reimplementing the wheel.
<br />
<br />Code size is the more important optimization. If you can keep the main execution loop in cache, the cost of branching and jumping is minimized. 
<br />
<br />Having a bunch of #defined macros and inline code can lead to a lot of bloat. Be careful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>essial</b> [ Thu Dec 03, 2009 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Hamburgler wrote:</div><div class="quotecontent">Large switch statements usually get turned into jump tables by the compiler. Implementing your own jump table may be reimplementing the wheel.<br /><br />Code size is the more important optimization. If you can keep the main execution loop in cache, the cost of branching and jumping is minimized. <br /><br />Having a bunch of #defined macros and inline code can lead to a lot of bloat. Be careful.</div>
<br />
<br />In the case of jump tables, that will simply mean that there will be no positive benefit speed-wise in the best-case of compiler optimization. I prefer to take the safer route and ensure the jumps work as expected. Branching is always an issue as a mis-predicted branch will invalidate the cache.
<br />
<br />As far as the #define macros go, I know how they work, and the "bloat" is just the textual representation. I use the #defines in the case of opcodes to standardize the header format, so any future changes (if needed) don't require updating the same thing on every opcode instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Dec 03, 2009 2:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">The idea here was that you have no duplicate code with the switches, and also have no additional function calls (provided your code is inlined). </div><br /><br />- Yup, that's my idea and the code is pretty compact.<br /><br /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">So the code is small and potentially faster.</div>
<br />
<br />- I don't know if mine is "potentially faster" or "potentially crap" as someone could reply, heh... ^_^;; Anyway, I can send you my CPU sources if you want to give an easy look into my style.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamburgler</b> [ Thu Dec 03, 2009 7:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">essial wrote:</div><div class="quotecontent">In the case of jump tables, that will simply mean that there will be no positive benefit speed-wise in the best-case of compiler optimization. I prefer to take the safer route and ensure the jumps work as expected.</div>
<br />
<br />While absolutely true, I still prefer to work the other way around: Let the compiler worry about optimization and how it will fit in with the program as a whole. I'll concentrate on building simple, readable and easily maintainable code. Fancy hand-made optimization can come later if needed.
<br />
<br />Anyway, either method is essentially equal in performance. I just wanted to point out that switch statements aren't always evil anymore.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>essial</b> [ Thu Dec 03, 2009 7:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Hamburgler wrote:</div><div class="quotecontent">While absolutely true, I still prefer to work the other way around: Let the compiler worry about optimization and how it will fit in with the program as a whole. I'll concentrate on building simple, readable and easily maintainable code. Fancy hand-made optimization can come later if needed.</div><br /><br />Guilty <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> I also help my friend with developing an x86 operating system (for fun of course), and I sort of gotten used to the compiler doing bad things when optimizations were turned on, so we simply have the optimizations disabled and do that by hand. But secondly, it's a matter of style. I like my style and you like yours -- no argument either way on either style from me <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">Hamburgler wrote:</div><div class="quotecontent"> Anyway, either method is essentially equal in performance. I just wanted to point out that switch statements aren't always evil anymore.</div>
<br />
<br />Agreed <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>