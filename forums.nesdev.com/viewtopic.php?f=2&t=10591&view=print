<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Standard flicker mitigation techniques?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Standard flicker mitigation techniques?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10591">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10591</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Wed Oct 16, 2013 9:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are there now standard or typical flicker mitigation techniques for sprites?  If so, what are the most common ones?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 16, 2013 9:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="https://www.google.com/search?q=sprite+cycling+site:forums.nesdev.com" class="postlink">Search for sprite cycling</a><br /><br />One common method is drawing sprites in forward order one frame and backward order the next, so that you get flicker instead of dropout. But the only surefire method is to reduce sprite coverage. For example, you could put certain objects into the background if possible. Or if your sprite cels have thin parts, you could <a href="http://forums.nesdev.com/viewtopic.php?p=87545#p87545" class="postlink">stagger the sprite grid to use fewer sprites on a row</a>. I can make another illustration if you want.<br /><br />One interesting thing I saw in one of the Gradius games was storing a long, thin, horizontal laser beam sprite with only the top three rows filled. This way, it could be drawn with alternating normal and flipped, causing less flicker in the adjacent scanlines.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Wed Oct 16, 2013 9:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, does this mean some games look for chances to change a sprite to a background tile if it's aligned advantageously? <br /><br />Also, would a pseudo random distribution look better than the front/back technique?<br /><br />P.S.  Thank you for a heads up on the correct keyword to look for!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 16, 2013 9:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">slobu wrote:</div><div class="quotecontent">So, does this mean some games look for chances to change a sprite to a background tile if it's aligned advantageously?</div><br />Yes. Mario Bros., Super Mario Bros., and Super Mario Bros. 3 turn ? blocks and brick blocks from background into sprite when bumped from below and back after a short delay. Super Mario Bros. 2 lets the player pick up a mushroom block, turning it from a background into a sprite, and then toss it somewhere, after which point it turns back into background. The same is true of the critters and bombs that Toad carries in Wario's Woods and anything round that doesn't have something under it in Crystal Mines and its reskins Exodus and Joshua. In games like Tetris, Dr. Mario, Puyo Puyo, Magic Jewelry/Mystic Pillars, Rampart, and Pipe Dream, the falling piece is a sprite, but it turns into background tiles once it locks. Some games draw the playfield as a CHR RAM pseudo-bitmap so that they don't even have to worry about alignment, such as Hatris, Qix, 3D Block, the BlockOut prototype, and Videomation.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, would a pseudo random distribution look better than the front/back technique?</div><br />Some Konami games use more complex shuffling patterns.<br /><br />Some games flicker everything to fit twice as much on the screen. This could help especially with complex particle systems as might be seen in bullet hell shooters. Thwaite draws even numbered explosions and smoke particles in even frames and odd numbered ones in odd frames.<br /><br />But ultimately, you need to design your game around NES sprite limits and not try to make, say, a Street Fighter/Mortal Kombat style fighting game with full-size characters. A better concept for an NES fighter, for example, might be a platform fighter like Smash Bros.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Oct 16, 2013 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Pseudo-random looks the best.<br />If you have 9 sprites on a line, and that 2 of them are flickering at 1/2 while the 7 others are solid, it will be very noticeable.<br />If all of them flickers at 8/9 you almost won't notice anything.<br /><br />However, if there is 12+ sprites on a line, it'll look horrible no matter what you do. That's what happens in Gradius games, and the worse flickering-slowdown NES game of all time : Parodius.<br />This one is plain ridiculous, it comes to apoint it's completely unplayable. The only way the NES version of parodious would be playable would be to simulate a seriously overclocked NES with an emulator that disables sprite flickering.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 16, 2013 11:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><img src="https://pineight.com/mw/images/1/12/FHBG_sprite_coverage_naive.png" alt="Image" /><br />Na√Øve 8x8 sprite coverage of some hero and monster cels<br /><br /><img src="https://pineight.com/mw/images/a/a6/FHBG_sprite_coverage_stagger.png" alt="Image" /><br />Efficient staggered coverage of the same cels

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Wed Oct 16, 2013 1:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the diagram!  I guess my brain always thought of tiles in grids.<br /><br />Is flicker mitigation ever part of enemy AI?  Something like an enemy will intentionally avoid being on the same horizontal plane?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 16, 2013 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On Atari 2600, it was common to make enemies move back and forth in horizontal strips of the screen because the system really had only two sprites per scanline. Look at the sneakers from <a href="https://www.youtube.com/watch?v=zOt3JJ39bbU" class="postlink">Fast Eddie</a> (which inspired the critter shown above): only one is on each row.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Wed Oct 16, 2013 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">On Atari 2600, it was common to make enemies move back and forth in horizontal strips of the screen because the system really had only two sprites per scanline. Look at the sneakers from <a href="https://www.youtube.com/watch?v=zOt3JJ39bbU" class="postlink">Fast Eddie</a> (which inspired the critter shown above): only one is on each row.</div><br /><br />Gawd, I know all about flicker on the 2600!  Thankfully you can simulate additional vertical sprites since player0 and player1 can be pretty tall.<br /><br />My game M.M.S.B.C. II shows up two 8 enemies, 2 ships and lasers.  Has paralax scrolling to boot :p<br /><img src="http://i511.photobucket.com/albums/s352/slobu/M2REW_26.jpg" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Oct 16, 2013 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I used a really simple method to do sprite cycling:<br />Add 9*4 to the output address after every complete sprite in the sprite table.  When it reaches 0, you've written all 64 sprites.<br />This of course assumes that sprite draw order or priority doesn't matter at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Oct 16, 2013 4:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">This of course assumes that sprite draw order or priority doesn't matter at all.</div><br />Precisely. When I want to preserve the sprite order within an object, I randomize the order in which entire objects are drawn, and the objects get to chose which end of the OAM they want to use, so there are 2 global layers that are preserved. Also, objects are free to draw sub-objects at the time they're drawn, so they can make sure that explosions and other effects always show up in front of them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Wed Oct 16, 2013 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">slobu wrote:</div><div class="quotecontent">Is flicker mitigation ever part of enemy AI?  Something like an enemy will intentionally avoid being on the same horizontal plane?</div><br /><br />It very much is.  I think it was Streets of Rage (1? 2?) on the Genesis that did this, with enemies programmed to walk up or down if more enemies come on the screen, also never aligning all enemies on a single horizontal strip, for obvious reasons.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Wed Oct 16, 2013 11:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The way I do it:<br /><br />Start: Offset = $00, CurrIndex = $00<br /><br />On sprite clear: Offset += $34, CurrIndex = Offset<br /><br />Upon allocating a sprite: Copy sprite to CurrIndex, CurrIndex -= $0C<br /><br />This &quot;scatters&quot; the sprites so that the flickering on the scanline is more evenly distributed, creating more of a &quot;rolling&quot; flicker effect.<br /><br />If you used the simple method of just reversing your sprites every frame and had 9 sprites on a scanline, you'd get two sprites that flicker each frame (and thus are at 50% opacity), and 7 sprites that are solid. Although it's pretty iconic looking for older games, it doesn't look as good in my opinion.<br /><br />If you need to have some semblence of priority, you can split the sprite OAM into two parts: one part is shuffled, and the other part is not. To do that, you just repeatedly apply your incrementation/decrementation to CurrIndex (and possibly also Offset) if the value is within the section that isn't shuffled, so you skip over it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Thu Oct 17, 2013 3:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just want to add that besides staggering the sprite layout like Tepples mentioned, it can also be useful to make the sprites used to cover your cel overlap each other. <a href="http://sourceforge.net/apps/mediawiki/tilificator/index.php?title=Tilificator_Tutorial" class="postlink">Tilificator</a> favours this sort of overlap in its sprite coverage algorithms.<br /><br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=897&amp;mode=view"><img src="./download/file.php?id=897&amp;t=1" alt="megaman_original.png" /></a><br />
			<span class="gensmall">megaman_original.png [ 23.46 KiB | Viewed 1028 times ]</span>
		

		<br />
	</div><br /><br />Above image shows original tiles in Megaman. Notice how the two sprites making up the top of Megaman's head have no overlap, so if one disappears then ~50% of the graphics the two tiles cover will disappear as well.<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=898&amp;mode=view"><img src="./download/file.php?id=898&amp;t=1" alt="megaman_tilificator.png" /></a><br />
			<span class="gensmall">megaman_tilificator.png [ 25.76 KiB | Viewed 1028 times ]</span>
		

		<br />
	</div><br /><br />Above show an alternate tile coverage, where the same two sprites have up to 4 horizontal pixels of overlap. If one of them disappears, only ~25% of the graphics the two tiles cover will disappear.<br /><br />Of course, favoring such overlap can have a drawback as well: Covering more of your cel can also mean less opportunity to to re-use the sprite for similar cels where only some pixels differ, so it can be trade-off between minimizing flickering pixels and minimizing your tileset. This is quite dependent on how your cels look though, and the optimal coverage given a particular set of cels is most likely an NP-complete problem. (though I personally lack the computer science math skillz to formally prove it)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jan 20, 2014 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standard flicker mitigation techniques?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now that I had a second thought about it, it sounds like it could be possible to reach &quot;ideal&quot; sprite cycling at the price of extra CPU power the following way :<br />You have a list of numbers (for example 0-63) and you shuffle it every frame using <a href="http://en.wikipedia.org/wiki/Talk:Fisher%E2%80%93Yates_shuffle" class="postlink">something like this</a>.<br />Then you just render the sprites following the order of the list. This way you're guaranteed their priorities are as random as your RNG is, and they will flicker evenly (if you have N (&gt;8) sprites, each one of them has a (N-8)/N probability of disappearing on a given frame).<br /><br />If you need priorities between various metasprites, you can shuffle only the individual sprites within the metasprite.<br />If inversely you need priorities within a metaprite for layering, you can shuffle the metasprites but not individual sprites within it.<br /><br />You can of course only shuffle the part that needs to be shuffled, and keep order in parts that require orders.<br /><br />However the major problem would be that it would be extremely slow, as there would be multiple calls to the shufflers every frame, and sprite drawing is already often the CPU bottleneck of a NES game. Shuffling requires random numbers in non-power of two ranges, which in turn requires either the modulo operator (-&gt; division -&gt; slow) or a re-call to the random algorithm if out of range (probably better as it's not biased and can be made faster than a division).<br /><br />So I wonder how useful it would be to use shufflers in the context of sprite cycling. I think that at global scope in a game where priorities never matters, it can be a great idea, as shuffling is only done once per frame. In a case where it would be required to shuffle among smaller set of sprites might be more ambigious as the overhead would eat significant time.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>