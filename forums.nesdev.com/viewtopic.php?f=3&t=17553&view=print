<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MMC1 Emulation 32k Mode</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MMC1 Emulation 32k Mode</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=17553">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=17553</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>imid</b> [ Tue Jul 17, 2018 10:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>MMC1 Emulation 32k Mode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello,  I could use some help with my mmc1 emulation. I have gone through the wiki and docs best i could and have come up with an implementation that works almost all the time but a couple games still give me trouble. One is Adams Family Puglsy scavenger hunt and the other Ninja Gaiden. Adams family breaks within the first 30 instructions so its a little easier to follow but Im still getting the banks wrong. Ive included the log below for Adams Family and my mmc1 code.  On startup I load 0xC into Reg0 and all other regs are 0. The lower PRG space has bank 0 and upper PRG space has the last bank which is 7. <br /><br />As i follow the log below i can see that it starts by a series of resets then writes to Reg1 with an initial value of 1. Which to my understanding means 32k switching mode. Then on line 23 writes begin to Reg3 with an initial value of 1. After the 5th write i switch in bank 0 at the lower PRG Space and bank 1 into the upper PRG space. This is where it falls apart. Checking with nintendulator i can see that after the 5th write that the lower PRG space has bank 7 and the upper PRG space has 7 as well. I cant seem to figure out how bank 7 ends up in either bank when 32k should of been switched out using a Reg3 value of 1.<br /><br /><br />1	FF80	A9 FF	LDA #$FF	                A:00	X:00	Y:00	P:24	SP:FD	CYC:  0	SL:241<br />2	FF82	8D 00 80	STA $8000 = 00	A:FF	X:00	Y:00	P:A4	SP:FD	CYC:  6	SL:241<br />3	FF85	8D 00 A0	STA $A000 = 01	A:FF	X:00	Y:00	P:A4	SP:FD	CYC: 18	SL:241<br />4	FF88	8D 00 C0	STA $C000 = 00	A:FF	X:00	Y:00	P:A4	SP:FD	CYC: 30	SL:241<br />5	FF8B	8D 00 E0	STA $E000 = D0	A:FF	X:00	Y:00	P:A4	SP:FD	CYC: 42	SL:241<br />6	FF8E	A2 01	LDX #$01	                A:FF	X:00	Y:00	P:A4	SP:FD	CYC: 54	SL:241<br />7	FF90	A0 00	LDY #$00	                A:FF	X:01	Y:00	P:24	SP:FD	CYC: 60	SL:241<br />8	FF92	8E FF 9F	STX $9FFF = 01	        A:FF	X:01	Y:00	P:26	SP:FD	CYC: 66	SL:241<br />9	FF95	8E FF 9F	STX $9FFF = 01	        A:FF	X:01	Y:00	P:26	SP:FD	CYC: 78	SL:241<br />10	FF98	8E FF 9F	STX $9FFF = 01	        A:FF	X:01	Y:00	P:26	SP:FD	CYC: 90	SL:241<br />11	FF9B	8E FF 9F	STX $9FFF = 01	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:102	SL:241<br />12	FF9E	8C FF 9F	STY $9FFF = 01	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:114	SL:241<br />13	FFA1	8C FF BF	STY $BFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:126	SL:241<br />14	FFA4	8C FF BF	STY $BFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:138	SL:241<br />15	FFA7	8C FF BF	STY $BFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:150	SL:241<br />16	FFAA	8C FF BF	STY $BFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:162	SL:241<br />17	FFAD	8C FF BF	STY $BFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:174	SL:241<br />18	FFB0	8E FF DF	STX $DFFF = FA	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:186	SL:241<br />19	FFB3	8C FF DF	STY $DFFF = FA	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:198	SL:241<br />20	FFB6	8C FF DF	STY $DFFF = FA	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:210	SL:241<br />21	FFB9	8C FF DF	STY $DFFF = FA	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:222	SL:241<br />22	FFBC	8C FF DF	STY $DFFF = FA	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:234	SL:241<br />23	FFBF	8E FF FF	STX $FFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:246	SL:241<br />24	FFC2	8E FF FF	STX $FFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:258	SL:241<br />25	FFC5	8E FF FF	STX $FFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:270	SL:241<br />26	FFC8	8C FF FF	STY $FFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:282	SL:241<br />27	FFCB	8C FF FF	STY $FFFF = C3	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:294	SL:241<br />28	FFCE	4C A4 C5	JMP $C5A4	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:306	SL:241<br />29	C5A4		                	        A:FF	X:01	Y:00	P:26	SP:FD	CYC:315	SL:241<br /><br /><br />*Code Updated 7/22/18 CHR RAM/PRG RAM Bank Swicthing<br />*Code Updated 7/22/18<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; public override void WriteToAddress(int MemoryAddress, int val)<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (MemoryAddress &gt;= 0x8000 &amp;&amp; MemoryAddress &lt;= 0xffff &amp;&amp; (((CPU.TotalCPUCycles - 1)!=LastWriteCycle) ))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LastWriteCycle = CPU.TotalCPUCycles;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (val &gt; 127)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1COUNT = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1REG0 = MMC1REG0 | 12;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1COUNT++;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (MMC1COUNT == 1)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1FIVEBITVALUE = val &amp; 31;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (MMC1COUNT == 5)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (MemoryAddress &gt;= 0x8000 &amp;&amp; MemoryAddress &lt; 0xA000)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1REG0 = MMC1FIVEBITVALUE &amp; 31;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PPU.MIRROR= MMC1REG0 &amp;3;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1PRG();<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (MemoryAddress &gt;= 0xA000 &amp;&amp; MemoryAddress &lt; 0xC000)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1REG1 = MMC1FIVEBITVALUE;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1PRG(); <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (GAME.NUMCHRPAGES &gt; 0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((((MMC1REG0 &gt;&gt; 4) &amp; 1) == 0))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchCHRBank((MMC1REG1 &gt;&gt; 1), 0x2000, 0x2000, 0x0000);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if ((((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchCHRBank(MMC1REG1, 0x1000, 0x1000, 0x0000);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if (GAME.NUMCHRPAGES == 0 &amp;&amp; (((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchCHRRAMBank((MMC1REG1 &amp; 1), 0x1000, 0x1000, 0x0000);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (GAME.NUMCHRPAGES &lt;= 2)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchPRGRAMBank(((MMC1REG1 &gt;&gt; 2) &amp; 3), 0x2000, 0x2000, 0x6000);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (MemoryAddress &gt;= 0xc000 &amp;&amp; MemoryAddress &lt;= 0xdfff)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1REG2 = MMC1FIVEBITVALUE &amp; 31;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (GAME.NUMCHRPAGES &gt; 0 &amp;&amp; (((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchCHRBank(MMC1REG2, 0x1000, 0x1000, 0x1000);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if (GAME.NUMCHRPAGES == 0 &amp;&amp; (((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchCHRRAMBank((MMC1REG2 &amp; 1), 0x1000, 0x1000, 0x1000);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(GAME.NUMCHRPAGES &lt;= 2 &amp;&amp; (((MMC1REG0 &gt;&gt; 4) &amp; 1) == 1))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchPRGRAMBank(((MMC1REG2 &gt;&gt; 2) &amp; 3), 0x2000, 0x2000, 0x6000);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (MemoryAddress &gt;= 0xe000 &amp;&amp; MemoryAddress &lt; 0x10000)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1REG3 = MMC1FIVEBITVALUE &amp; 15;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMC1PRG();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (MMC1COUNT == 5) { MMC1COUNT = 0; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(MemoryAddress&gt;=0x6000 &amp;&amp; MemoryAddress &lt; 0x8000)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.TheMapper.WritePRGRAM(MemoryAddress, val);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br /><br />&nbsp;public static void MMC1PRG()<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int offset = (((MMC1REG1 &gt;&gt; 4) &amp; 1) * 16 * (0x4000));<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((((MMC1REG0 &gt;&gt; 2) &amp; 3) &lt; 2))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchPRGBank((MMC1REG3 &amp; ~1), 0x4000, 0x4000, 0x8000, offset);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchPRGBank(((MMC1REG3 &amp; ~1) | 0x01), 0x4000, 0x4000, 0xC000, offset);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if ((((MMC1REG0 &gt;&gt; 2) &amp; 3) == 2))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchPRGBank(((MMC1REG3 &amp; 15)), 0x4000, 0x4000, 0xC000, offset);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchPRGBank(0, 0x4000, 0x4000, 0x8000, offset);<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if ((((MMC1REG0 &gt;&gt; 2) &amp; 3) == 3))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchPRGBank(((MMC1REG3 &amp; 15)), 0x4000, 0x4000, 0x8000, offset);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GAME.SwitchPRGBank(((GAME.NUMPRGPAGES - 1) &amp; 15), 0x4000, 0x4000, 0xC000, offset);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Jul 17, 2018 11:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 Emulation 32k Mode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">imid wrote:</div><div class="quotecontent">                    if (MMC1COUNT == 1)<br />                    {<br />                        MMC1FIVEBITVALUE = val &amp; 31;<br />                    }<br /></div>I understand the cleverness you're trying here, but that's not how the MMC1 works.<br /><br />It only has two data pins. One pays attention to the most significant bit (&amp; 128, or &gt; 127) and the other only pays attention to the least significant bit (&amp; 1).<br /><br />While most games do load the value into some register, and then repeatedly shift the register and write to the MMC1, there are other games, like the traces you have here, that instead write constant values to the MMC1's registers instead by just loading A,X, or Y with 0 and/or 1.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>imid</b> [ Wed Jul 18, 2018 1:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 Emulation 32k Mode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank You! That did the trick. All the US MMC1 games now at least load up and look good. For anyone else I changed<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if (MMC1COUNT == 1)<br />{<br />MMC1FIVEBITVALUE = val &amp; 31;<br />}<br /></div><br /><br />to <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; if ((val &amp; 1) == 0)<br />&nbsp; {<br />&nbsp; &nbsp; &nbsp; MMC1FIVEBITVALUE &amp;= ~(1 &lt;&lt; 5);<br />&nbsp; }<br />&nbsp; else<br />&nbsp; {<br />&nbsp; &nbsp; &nbsp; MMC1FIVEBITVALUE |= 1 &lt;&lt; 5;<br />&nbsp; }<br />&nbsp; MMC1FIVEBITVALUE = ((MMC1FIVEBITVALUE &gt;&gt; 1) &amp; 0xFF);<br /></div><br /><br />There is probably a more elegant way to do it but for now im glad its working. Thanks again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>imid</b> [ Sun Jul 22, 2018 12:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 Emulation 32k Mode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had a couple of more questions about MMC1 before i move on. Ive updated the code above to reflect PRG bank switching on writes to REG0 and REG1 as well as REG3. I suspect CHR switching may work the same way I just need to find a case where doing so fixes something. <br /><br />One question I have is regarding Matt Richey's MMC1.txt file. There is a Further Switching Section near the bottom where he talks about these transitions between states in the MMC1 and how they are handled. I am not handling these in code right now in any special way and yet i don't see any games breaking due to it. I also don't see anything about them on the wiki aside from which banks should be used in 32K mode, which leads me to believe that the information may not be accurate. can anyone confirm if these transitions are needed or not?<br /><br />The other question i had has to do with PRG RAM. Currently I just keep the entire area 0x6000-0x8000 writeable and everything seems fine. I have not implemented any bankswitching for it in MMC1 and also the same goes for CHR RAM which i also haven't implemented any bankswitching for. The only ROMS I have found that need these in MMC1 are the holy batman test ROMS. I wondering how important this is if the goal is just to be able to play all USA licensed games. Does anyone know of any games that use these extended features?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jul 22, 2018 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 Emulation 32k Mode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Koei's games on the SOROM board use bank switching.<br /><br /><a href="http://bootgod.dyndns.org:7777/search.php?keywords=sorom&amp;kwtype=pcb" class="postlink">Genghis Khan, Romance of the Three Kingdoms, Nobunaga's Ambition</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>imid</b> [ Sun Jul 22, 2018 4:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 Emulation 32k Mode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you, That site is really useful. I went ahead and added CHR RAM and PRG RAM bank switching. For anyone else working on this i was able to also find that Space Shuttle Project uses CHR RAM bank switching right on the title screen. Half the screen will be garbled if it isn't implemented. It makes testing so much easier when games break right away like that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jul 22, 2018 6:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 Emulation 32k Mode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>The Curse of Possum Hollow</em> (unlicensed, TGROM clone) breaks very visibly very quickly if its 32K CHR RAM isn't bankswitched.<br /><br /><em>Lagrange Point</em> (licensed, Japan-only, VRC7) also breaks if CHR RAM isn't bankswitched.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>imid</b> [ Sun Jul 22, 2018 7:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 Emulation 32k Mode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had to google possum hollow, I thought you were pulling my leg. It looks pretty neat. I didn't even realize people were still putting out games. I've been pretty much out of the NES scene for 20 years. I got into collecting games pretty heavy around the mid nineties. Once emulators started getting developed i built a io56 and put it to absurdly good use. I built up a collection of over 700 different USA titles within a couple years, a lot were donated from people at the time. I got back into this summer with writing this emulator and I am shocked at how much information was wrong back then on the NES. By 98 it really felt like everything was figured out and working to some extant, its amazing emus worked as well as they did back then.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>