<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=8287" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-11-08T14:12:04-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=8287</id>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-11-08T14:12:04-07:00</updated>
<published>2011-11-08T14:12:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86021#p86021</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86021#p86021"/>
<title type="html"><![CDATA[Updating VRAM via stack]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86021#p86021"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I was thinking about the other interrupts (could mess up stack).<br /></div><br />I didn't think of them at the time. <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> You can get around this "the poor man's way" by starting your stream from $0103 (or even higher up, if you think an interrupt will happen in an interrupt in your NMI interrupt).  That way if the absolute worst case happens and an IRQ occurs immediately after you transfer #$02 to the stack, the program counter and process status flags will be put in a place that won't corrupt your stack when it wraps to $01FF. Of course, the beginning of the data stream can still be corrupt, but it should only affect data you have already pulled from the stack. Unless I'm wrong again. <br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Actually, the first color of the first sprite palette will be your background color... I'm too lazy to check, but I'm almost sure this is the case.<br /></div><br />You're absolutely right, I just checked. Sorry for that bit of misinformation.<br /><br />I think I finally understand the point of the 33rd write. It was to rewrite the background color after the byte from the sprite palette overwrote it. Writing to it separately isn't needed either, though. Tokumaru's code shows that. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />BTW, I'm of the opinion that using 32 bytes to define the palette is a bit of a waste... I use only 25 (3 colors for each palette * 8 + the background color), and I repeat the background color for all the palettes.<br /></div>Heh. I had even written this out in my post, but deleted it. It saves only 7 bytes, and 28 cycles. I'm often told I go too far with that sort of thing.<br /><br />For reference, here's my NMI routine. It has two formats. <br /><br />The first thing it does is pull a "check byte". If the check byte doesn't set the negative flag, it means the check byte is actually the high byte of an address to write a string of bytes to. It writes this to $2006, then it pulls the second part of the address and writes that to $2006. The next byte is the number of bytes to write. The next byte is whether the PPU should increment by 1 or 32. Following that are the actual data bytes to write to the PPU.<br /><br />If the check byte does set the negative flag, it checks if the byte is equal to #$FF. The stream ends on a "check byte" that is #$FF.<br /><br />If the negative flag is set, but it's not #$FF that means a "One byte per address" (OBPA) stream is starting. The check byte is not used for this type of stream. So it pulls another byte, and that is the number of bytes to write-1. (We'll call it Z). 0 means there is one byte to write. The next Z+1 bytes are the bytes to write to the PPU. The next (Z+1)*2 bytes are the high and low bytes of the address the corresponding bytes need to be written to. <br /><br />It has unrolled code for this type of stream. <br /><br />OBPA mode is used for y attributes of course, but it could also be used for updating only a few palette colors or whatever else isn't sequential. It fails right now if you need to write more than 10. You have to add more obpa macros for that to write more than 10. <br /><br />Apologies in advance for the nesasm format. <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Note: The NMI jumps to the &quot;NMI&quot; label and NOT the &quot;NMI.minus&quot; label.<br />;ppustream is $0100.<br />NMI.minus:<br />   cmp #$FF<br />   beq spriteDMA.stackres<br />   <br />   pla;Loads the number of bytes to write &#40;minus one&#41;<br />   tay<br />   <br />   lda obpa.jmplow,y<br />   sta &lt;nmiaddrlow<br />   <br />   lda obpa.jmphigh,y<br />   sta &lt;nmiaddrhigh<br />   <br />   tsx;If ppustream,x is loaded, you'd get the number of bytes to write&#40;minus one&#41;<br />   <br />   txa;Since we need to add the number of bytes in the stream to the<br />   ;current address to get the index location of the addresses<br />   <br />   tay;The current index location is needed for y<br /><br />   <br />   sec;Adds one extra to make up for the one missing since the jmp<br />   adc PPUstream,x;But this still only gives us the index location of the<br />   ;last byte in the byte stream<br />   ;Since we didn't start from the first byte in the byte stream<br />   tax<br /><br />   txs;But since the stack reads the NEXT byte, we don't need to add one.<br /><br />   iny; y now contains the start of the byte stream<br />   <br />   jmp &#91;nmiaddrlow&#93;;jumps to the unrolled loop<br />NMI:;2270 cycles?<br />   sta &lt;nmia;Storing the registers so when this returns from the interrupt<br />   stx &lt;nmix;A, X, and Y can be reloaded so the expected values will be there<br />   sty &lt;nmiy;rather than the ones the nmi used<br />   <br />       ;One should probably use the stack to backup a, x, and y. I don't because... I don't.<br />   <br />   lda &lt;safetiles;A flag that tells if the stream is fully written. If it's not<br />   bpl spriteDMA;We only sprite DMA<br />   <br />   tsx<br />   stx &lt;nmistack<br />   ldx #$FF<br />   txs<br />   <br />   inx<br />   stx &lt;safetiles<br />nmitileloopstart:<br />   pla<br />   bmi NMI.minus;If the high bit isn't set<br />   sta $2006;It's an address<br />   <br />   pla;Byte 2 of the address<br />   sta $2006<br />   <br />   pla;Number of Bytes to write<br />   tay<br />   <br />   lda &lt;PPUmirror<br />   and #%11111011<br />   sta &lt;PPUmirror<br />   <br />   pla<br />   ora &lt;PPUmirror<br />   sta &lt;PPUmirror<br />   sta $2000<br /><br />nmitileloop:<br />   pla<br />   sta $2007<br />   dey<br />   bne nmitileloop<br />   beq nmitileloopstart<br />   <br />spriteDMA.stackres:<br />   ldx &lt;nmistack<br />   txs<br /><br />spriteDMA:<br />   ldy #$00   ; Must be done before a sprite DMA<br />   sty $2003  ; Must be done before a sprite DMA<br /><br />   lda #$07<br />   sta $4014<br />   <br />   ;sta $401F;remove<br />   <br />   lda &lt;PPUmirror<br />   and #%11111100<br />   sta $2000<br />   sta &lt;PPUmirror<br />   <br />   lda &lt;scrollxhigh<br />   and #%00000001<br />   beq nminametablexsetskip<br />   <br />   ora &lt;PPUmirror<br />   sta &lt;PPUmirror<br />   <br />nminametablexsetskip:<br /><br />   lda &lt;scrollyscreenhigh<br />   and #%00000001<br />   beq nminametableysetskip<br />   <br />   asl a<br />   <br />   ora &lt;PPUmirror<br />   sta &lt;PPUmirror<br />   <br />nminametableysetskip:<br /><br />   lda &lt;PPUmirror<br />   sta $2000<br />   <br />   lda &lt;scrollxlow<br />   sta $2005<br />   <br />   lda &lt;scrollyscreenlow<br />   sta $2005<br /><br />   <br /><br />   <br />   lda #$FF<br />   sta &lt;vblank<br />   <br />   lda &lt;nmia<br />   ldx &lt;nmix<br />   ldy &lt;nmiy<br />   <br />   rti<br />   <br />   .macro obpabody<br />   pla<br />   sta $2006<br />   <br />   pla<br />   sta $2006<br />   <br />   lda PPUstream,y<br />   sta $2007<br />   iny<br />   <br />   .endm<br />   <br />;obpa = one byte per address<br />obpa.10:<br />   obpabody<br />obpa.9:<br />   obpabody<br />obpa.8:<br />   obpabody<br />obpa.7:<br />   obpabody<br />obpa.6:<br />   obpabody<br />obpa.5:<br />   obpabody<br />obpa.4:<br />   obpabody<br />obpa.3:<br />   obpabody<br />obpa.2:<br />   obpabody<br />obpa.1:<br />   obpabody<br />NMIreturntostream:<br />   jmp nmitileloopstart<br />obpa.jmplow:<br />   .db low&#40;obpa.1&#41;<br />   .db low&#40;obpa.2&#41;<br />   .db low&#40;obpa.3&#41;<br />   .db low&#40;obpa.4&#41;<br />   .db low&#40;obpa.5&#41;<br />   .db low&#40;obpa.6&#41;<br />   .db low&#40;obpa.7&#41;<br />   .db low&#40;obpa.8&#41;<br />   .db low&#40;obpa.9&#41;<br />   .db low&#40;obpa.10&#41;<br />obpa.jmphigh:<br />   .db high&#40;obpa.1&#41;<br />   .db high&#40;obpa.2&#41;<br />   .db high&#40;obpa.3&#41;<br />   .db high&#40;obpa.4&#41;<br />   .db high&#40;obpa.5&#41;<br />   .db high&#40;obpa.6&#41;<br />   .db high&#40;obpa.7&#41;<br />   .db high&#40;obpa.8&#41;<br />   .db high&#40;obpa.9&#41;<br />   .db high&#40;obpa.10&#41;<br /></div><br /><br />There are ways to make it better I'm sure, like not changing how the PPU increments for every regular stream, or using the check byte for OBPA by anding out the high bit and using that to specify the number of bytes. I could also partially unroll the regular stream format. Still, I'm pretty happy with it right now. If any part of it is unclear or stupid, let me know. I didn't really clean it up for posting, but it does work and is fast enough to scroll 8 pixels in each direction in the same frame.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Tue Nov 08, 2011 2:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2011-11-08T12:44:40-07:00</updated>
<published>2011-11-08T12:44:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86015#p86015</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86015#p86015"/>
<title type="html"><![CDATA[Updating VRAM via stack]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86015#p86015"><![CDATA[
If you have a loop unrolled 32 times, and want to copy more than 32 bytes, you add 32 to X every time it loops.  (32 is just an example number, but it comes up a lot)<br /><br />like this<br /><br />;Y = number of times to copy 32 bytes<br />loop:<br /> lda buffer,x<br /> sta $2007<br /> lda buffer+1,x<br /> sta $2007<br /> ...<br /> lda buffer+31,x<br /> sta $2007<br /> dey<br /> beq exitLoop<br /> txa<br /> clc<br /> adc #32<br /> tax<br /> jmp loop<br /><br />This lets you use the same code to copy any multiple of 32 bytes from any X within the buffer.  When you've copied 32 bytes and want to continue, you add 32 to X and copy some more bytes out.<br />Of course, you don't need to do this if you're using the stack pull method, but you can only transfer bytes from the stack page.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Nov 08, 2011 12:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Wave]]></name></author>
<updated>2011-11-08T12:24:38-07:00</updated>
<published>2011-11-08T12:24:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86014#p86014</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86014#p86014"/>
<title type="html"><![CDATA[Updating VRAM via stack]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86014#p86014"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />You don't need a 33rd byte for the background color. The universal background color is set by the first byte of the first background palette. The first byte of the other background palettes isn't even displayed. Just like the first byte in each of the sprite palettes doesn't matter because they're always drawn transparent. <br /><br />Using the stack is a great idea and you seem to be going about it correctly. I created a general purpose stream format for writing to the PPU, which seems to be what you want to do. I can write an address, a number of bytes, and the bytes themselves to the stack and my NMI routine will write them to the PPU.<br /><br />If all you plan to do is update the palettes: Nothing really bad will happen if interrupts are off or will never happen except, of course, the palette not updating. There wouldn't be a crash or anything with what you have so far. If you plan to add nametable updates and have a variable to determine when they're ready, you may end up with an infinite loop if interrupts are disabled for some reason. <br /><br />Is there any specific reason you would ever need to disable the nmi happening at the start of each frame, though?<br /><br />Edit2: Ah, right, a general purpose framework. I would just discourage the user from disabling the NMI interrupts. I think anyone interested in something that updates the PPU in an easy way would heed this warning, and anyone who wanted to mess with it would know what they were getting into.<br /><br />Edit: Oh yeah. You probably want to transfer #$FF to the stack, not #$00. When pla is called and the stack pointer is $00, it actually pulls from ram location $0101, not $0100. The stack pointer points to where you'll push a byte to, not where you'll pull it from.<br /></div><br />I think I'm gonna pass on the 33th write, I'll just make a label to the background color to write it directly.<br />I don't think I have a reason to disable nmi, I was thinking about the other interrupts (could mess up stack).<br />And thanks for the stack pointer tip, I didn't know that.<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />There seems to be three different "Very fast" ways of writing to PPU memory.<br /><br />There's the LDA nnnn,X \ STA $2007 method, the PLA \ STA $2007 method, and the LDA #xx \ STA $2007 method.<br /><br />To do the LDA nnnn,x \ STA 2007 method, you write a series of writes like this:<br />;x starts at zero<br />LDA nnnn,x<br />STA $2007<br />LDA nnnn+1,x<br />STA $2007<br />... unroll to 32 times<br />LDA nnnn+31,x<br />STA $2007<br /><br />Then if you have more bytes to write, you can increase X by 32 and repeat the loop.<br />This takes 4 cycles for the LDA nnnn,X instruction (or 5 cycles if you cross a 256 byte boundary, don't do that), and 4 cycles for the PPU write to $2007.<br /><br /><br />PLA \ STA $2007 is the same speed as LDA nnnn,X \ STA $2007.  The advantage I see to using PLA is that you don't need to increase X every once in a while to continue looping, and you get smaller code.  The only disadvantage is that you need to be more careful about disabling interrupts and NMIs.  And don't forget to read $2002 to clear the VBL flag at some point before re-enabling NMIs, otherwise you trigger a second NMI in the same vblank.<br /><br />Battletoads uses PLA \ STA $2007 for the nametables, and LDY nnnn,X \ STY $2007 for the graphics data.  Battletoads also happens to cross pages much of the time, costing a couple scanlines of draw time.<br /><br />To get faster, you'd need a sequence of LDA #xx \ STA 2007 instructions sitting in RAM, you set the immediate values using self-modifying code.  MC Kids uses this method to update the nametables.  32 writes = 160 bytes of code in RAM.  Since MC Kids has WRAM, it can afford the RAM usage of this method.<br />It takes 2 cycles for the immediate load, and 4 cycles for the $2007 store, so you get 6 cycles per PPU write, instead of 8 cycles.<br /></div><br />I readed about the LDA nnnn,X \ STA $2007 method just after writing this post, what I don't understand is, what's the "need to increase X every once in a while to continue looping" to copy more than 32 bytes?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4116">Wave</a> — Tue Nov 08, 2011 12:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2011-11-08T11:26:30-07:00</updated>
<published>2011-11-08T11:26:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86009#p86009</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86009#p86009"/>
<title type="html"><![CDATA[Updating VRAM via stack]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86009#p86009"><![CDATA[
Since you don't really need to write data for 4th, 8th and 12th palette entries, you can skip them by reading $2007. I.e. four writes, read, three writes, repeat from read.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Tue Nov 08, 2011 11:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-11-08T10:57:11-07:00</updated>
<published>2011-11-08T10:57:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86005#p86005</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86005#p86005"/>
<title type="html"><![CDATA[Updating VRAM via stack]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86005#p86005"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />The universal background color is set by the first byte of the first background palette. The first byte of the other background palettes isn't even displayed. Just like the first byte in each of the sprite palettes doesn't matter because they're always drawn transparent.<br /></div><br />Actually, the first color of the first sprite palette will be your background color if you write all 32 bytes sequentially, because $3F10 is a mirror of $3F00. I'm too lazy to check, but I'm almost sure this is the case.<br /><br />BTW, I'm of the opinion that using 32 bytes to define the palette is a bit of a waste... I use only 25 (3 colors for each palette * 8 + the background color), and I repeat the background color for all the palettes. In this case, the stack code could look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   pla<br />   tax ;keep a copy of the background color in X<br /><br />   ;repeat this 8 times<br />   stx $2007 ;color 0<br />   pla<br />   sta $2007 ;color 1<br />   pla<br />   sta $2007 ;color 2<br />   pla<br />   sta $2007 ;color 3</div><br /><br />EDIT: Heh, this talk about fast ways to write to VRAM gave me a crazy idea... Since I'm using CHR-RAM and my main character has lots of animations, I would like to update its patterns as fast as possible. I don't have any RAM to spare for long LDA #$XX / STA $2007 chains, but I might have the ROM to store the character's graphics that way. I know it's crazy to expand the graphics to 5 times the original size, but since only a portion of the game's graphics will be stored that way this might not be so bad.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Nov 08, 2011 10:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2011-11-08T09:51:13-07:00</updated>
<published>2011-11-08T09:51:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86000#p86000</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86000#p86000"/>
<title type="html"><![CDATA[Updating VRAM via stack]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=86000#p86000"><![CDATA[
There seems to be three different "Very fast" ways of writing to PPU memory.<br /><br />There's the LDA nnnn,X \ STA $2007 method, the PLA \ STA $2007 method, and the LDA #xx \ STA $2007 method.<br /><br />To do the LDA nnnn,x \ STA 2007 method, you write a series of writes like this:<br />;x starts at zero<br />LDA nnnn,x<br />STA $2007<br />LDA nnnn+1,x<br />STA $2007<br />... unroll to 32 times<br />LDA nnnn+31,x<br />STA $2007<br /><br />Then if you have more bytes to write, you can increase X by 32 and repeat the loop.<br />This takes 4 cycles for the LDA nnnn,X instruction (or 5 cycles if you cross a 256 byte boundary, don't do that), and 4 cycles for the PPU write to $2007.<br /><br /><br />PLA \ STA $2007 is the same speed as LDA nnnn,X \ STA $2007.  The advantage I see to using PLA is that you don't need to increase X every once in a while to continue looping, and you get smaller code.  The only disadvantage is that you need to be more careful about disabling interrupts and NMIs.  And don't forget to read $2002 to clear the VBL flag at some point before re-enabling NMIs, otherwise you trigger a second NMI in the same vblank.<br /><br />Battletoads uses PLA \ STA $2007 for the nametables, and LDY nnnn,X \ STY $2007 for the graphics data.  Battletoads also happens to cross pages much of the time, costing a couple scanlines of draw time.<br /><br />To get faster, you'd need a sequence of LDA #xx \ STA 2007 instructions sitting in RAM, you set the immediate values using self-modifying code.  MC Kids uses this method to update the nametables.  32 writes = 160 bytes of code in RAM.  Since MC Kids has WRAM, it can afford the RAM usage of this method.<br />It takes 2 cycles for the immediate load, and 4 cycles for the $2007 store, so you get 6 cycles per PPU write, instead of 8 cycles.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Nov 08, 2011 9:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-11-08T09:31:17-07:00</updated>
<published>2011-11-08T09:31:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=85999#p85999</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=85999#p85999"/>
<title type="html"><![CDATA[Updating VRAM via stack]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=85999#p85999"><![CDATA[
You don't need a 33rd byte for the background color. The universal background color is set by the first byte of the first background palette. The first byte of the other background palettes isn't even displayed. Just like the first byte in each of the sprite palettes doesn't matter because they're always drawn transparent. <br /><br />Using the stack is a great idea and you seem to be going about it correctly. I created a general purpose stream format for writing to the PPU, which seems to be what you want to do. I can write an address, a number of bytes, and the bytes themselves to the stack and my NMI routine will write them to the PPU.<br /><br />If all you plan to do is update the palettes: Nothing really bad will happen if interrupts are off or will never happen except, of course, the palette not updating. There wouldn't be a crash or anything with what you have so far. If you plan to add nametable updates and have a variable to determine when they're ready, you may end up with an infinite loop if interrupts are disabled for some reason. <br /><br />Is there any specific reason you would ever need to disable the nmi happening at the start of each frame, though?<br /><br />Edit2: Ah, right, a general purpose framework. I would just discourage the user from disabling the NMI interrupts. I think anyone interested in something that updates the PPU in an easy way would heed this warning, and anyone who wanted to mess with it would know what they were getting into.<br /><br />Edit: Oh yeah. You probably want to transfer #$FF to the stack, not #$00. When pla is called and the stack pointer is $00, it actually pulls from ram location $0101, not $0100. The stack pointer points to where you'll push a byte to, not where you'll pull it from.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Tue Nov 08, 2011 9:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Wave]]></name></author>
<updated>2011-11-08T09:04:26-07:00</updated>
<published>2011-11-08T09:04:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=85998#p85998</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=85998#p85998"/>
<title type="html"><![CDATA[Updating VRAM via stack]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8287&amp;p=85998#p85998"><![CDATA[
I think this has been discussed several times in different topics but I would like to know if it's a good decision.<br /><br />I would like to avoid complexity on my general purpose framework so I'm wondering about updating the palette every frame (from a buffer)<br /><br />Assumming I will steal the buffer from the stack (up to 160 bytes)<br /><br />Having 33 bytes (32 bytes palette + backgroud color) on $0100 for example, then in NMI I could do something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$3F<br />sta PPU.ADDR<br />lda #$00<br />sta PPU.ADDR<br /><br />tsx<br />stx _stackTmp<br />ldx #$00<br />txs<br /><br />//33 times this<br />pla<br />sta PPU.IO<br /><br />ldx _stackTmp<br />txs<br /></div><br /><br />To copy the whole palette (plus setting background color), is it a good idea? or would it have any mayor drawbacks (assumming interrupts are off or will never happen)?<br /><br />If it works I could use it to update nametable or attribute table too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4116">Wave</a> — Tue Nov 08, 2011 9:04 am</p><hr />
]]></content>
</entry>
</feed>