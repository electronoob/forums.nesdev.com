<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES vs. SNES screen resolution</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES vs. SNES screen resolution</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10141">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10141</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Jun 05, 2013 5:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">No where in any of the developers manual documentations that I have does Nintendo state you should avoid using certain ranges of columns (<span class="posthilit">vertical</span>) or lines (horizontals) of pixels to deal with visual areas which may be hidden by the physical border of certain television sets.</div><br />But it's in the background planning sheets used by Nintendo during the development of <em>Super Mario Bros.</em> and <em>The Legend of Zelda</em>, which assume a title safe area of (16, 24) to (223, 215), missing 24 lines at top and bottom and 16 pixels on each side of the <span class="posthilit">line</span>.</div><br />No where in the <strong><span class="posthilit">SNES</span> developers manual</strong> does Nintendo state... ... ... <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">--no-tepples-pedantic</tt> please.  :P<br /><br />The rest of what you said = gotcha/understood.  (And thanks for listing off some games which use said features!)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Jun 06, 2013 3:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />koitsu, thread seems correct to me, so I'll just add some useless trivia instead.<br /><br /><span class="posthilit">SNES</span> output is 225 or 240 lines (with <span class="posthilit">line</span> zero always being blank for sprite prefetching.) Overscan bit toggles this. Once per rendered frame, the <span class="posthilit">SNES</span> checks this setting to determine when to start drawing to the actual television, or where to seek the beam to. I am not really sure. The basic thing is ... at 225-height, the image is centered, so half of the 15 black lines are at the top, and half at the bottom. Educated guess: 7 at the top + 1 always black, and 8 at the bottom.<br /><br />So if you toggled overscan on a still image every frame, you'd see the image bouncing up and down. My understanding breaks down when you cross what's observable in software into how the hardware side is operating, so I have no idea how it manages to do this in practice. But it's completely transparent to the <span class="posthilit">SNES</span> software, it still thinks that rendering begins at V=1 either way, and it ends at V=225 or V=240 based on the overscan bit.<br /><br />To get really technical, my suspicion is that the actual V=1, H=0 from the <span class="posthilit">SNES</span> HVcounters is a convenient lie for the sake of software developers, and you're really already in the middle of the NTSC screen at that point. I also think that the first dot isn't rendered until around H=22 or so, which explains why Hblank lasts until H=278 instead of H=256.<br /><br />So on NTSC without overscan, it fills the screen. And with overscan, it cuts off the top and bottom a bit. The inverse is true for PAL. No overscan of course shows you the black lines at the top and bottom (image centered), and with overscan the entire screen is filled.<br /><br />You can also technically toggle the overscan bit mid-frame to re-enable rendering between V=225 and V=240, with mixed success. The image won't shift down, and things like sprite pre-fetching will be botched for a scanline, but things mostly work. Whether you could trick an actual display into drawing even lower than normal by enabling overscan after the frame began, I do not know. I don't have a TV with a V-adjust that will let me see that low. Would be really cute if you could end up sending caption encoded text by writing below the drawing area that way :P<br /><br />Interlace mode is another setting that is cached each frame, or possibly every two frames, I'm not really sure there. The cached setting determines whether the screen is actually rendered in interlaced mode or in progressive mode. However, once again you can toggle it mid-frame, and it will affect various tile addressing behavior and such, it'll just draw it to the TV in the cached mode anyway.<br /><br />The pseudo-hires and hires stuff is a bit tough to nail down in terminology. Gets back into the concept that NTSC doesn't have horizontal resolution, it's up to the display output and how fast it tries to change colors, and the TV on how quickly it reads those colors. On the <span class="posthilit">SNES</span> side, it still computes a main and sub screen pixel for every 256 dots regardless of the hires setting, it's just that regular mode always ends up with the same color in both, pseudo-hires tends to get one of each from different BGs (helps with blending), and hires tends to get two from the same BG (helps with hires.)<br /><br />The most interesting property here is that you can toggle pseudo-hires and/or hires mid-scanline as well, and it works just fine. It's not outputting a pseudo-width between 256 and 512 when you do this.<br /><br />So with all I understand, I take a kind of controversial view that few people like with how I personally choose to render video. First, the NTSC vs PAL cropping of overscan is due to analog properties that aren't an issue with a PC. So I show all 240 scanlines. Some games use them, some games don't. People tend to not like not being able to fill the screen 100% from top to bottom with colored lines, but oh well. Video shaders can do that anyway if it's that important. Next, because of being -able to-, even if nothing does, toggle the hires bits mid-scanline, it's better to just output at a consistent 512 pixel width. This of course would break a naive HQ2x software filter, but a smarter vector-based shader that treats the screen as having 256 &quot;dots&quot; in normalized space would work fine, so that's fine too. Also tends to produce a sharper image with bilinear filtering, for obvious reasons.<br /><br />All in all, I'll take the <span class="posthilit">SNES</span> any day over the NES game of &quot;how many pixels from each side do I crop to avoid showing gibberish?&quot; :P<br />Practically almost warrants a per-game overscan mask database.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Thu Jun 06, 2013 4:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Interlace mode is another setting that is cached each frame, or possibly every two frames, I'm not really sure there. The cached setting determines whether the screen is actually rendered in interlaced mode or in progressive mode. However, once again you can toggle it mid-frame, and it will affect various tile addressing behavior and such, it'll just draw it to the TV in the cached mode anyway.</div>In terms of the signal sent to the TV, the interlace bit only affects whether VSync ends between two scanlines or in the middle of one scanline. (This may not be entirely accurate, but the important distinction is a half-scanline difference in timing.) The TV only sees that once per scan, shortly before VBlank ends, so changing the interlace bit during rendering can't affect what the TV is doing. So, it might not be cached at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Thu Jun 06, 2013 4:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">No where in any of the developers manual documentations that I have does Nintendo state you should avoid using certain ranges of columns (<span class="posthilit">vertical</span>) or lines (horizontals) of pixels to deal with visual areas which may be hidden by the physical border of certain television sets.  This information is considered one of those &quot;tribal knowledge&quot; things when working with either NTSC or PAL.</div><br />So wait, Sega was more cautious than Nintendo here? Sega explicitly stated in documentation the need for a horizontal margin of 2 tiles and a <span class="posthilit">vertical</span> margin of 1 tile as a safe area (note that was for 224 pixels high, for 240 pixels high you'd want a <span class="posthilit">vertical</span> margin of 2 tiles).<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Show me a video (Youtube, etc.) of said transparency effects and I can probably tell you.  The most common &quot;transparency&quot; used on the <span class="posthilit">SNES</span> is the screen add/sub stuff, which is separate/independent of H-Pseudo 512.</div><br />It's H-Psuedo 512 actually, I had checked the game before when the discussion was around, it's extremely obvious in an emulator. Mario no Super Picross does it too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LocalH</b> [ Thu Jun 06, 2013 6:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">You can also technically toggle the overscan bit mid-frame to re-enable rendering between V=225 and V=240, with mixed success. The image won't shift down, and things like sprite pre-fetching will be botched for a scanline, but things mostly work. Whether you could trick an actual display into drawing even lower than normal by enabling overscan after the frame began, I do not know. I don't have a TV with a V-adjust that will let me see that low. Would be really cute if you could end up sending caption encoded text by writing below the drawing area that way <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div><br />That's basically the same type of technique that C64 coders use to display sprites in the <span class="posthilit">vertical</span> border (running most of the screen at 25 textrows, then setting it to 24 rows during the 25th row, will cause the VIC-II to &quot;forget&quot; to enable the border unit - it's really more like you basically skipped over the condition that causes the border unit to be enabled, thus it stays off and you get sprite fetches like normal as well as idle state data from the last byte in the 16KB of RAM that the VIC-II is pointed to). Of course, the C64 doesn't have 240 scanlines of addressable display without this trick, so I would imagine such a thing would be much less useful on the <span class="posthilit">SNES</span>. I doubt you could get the <span class="posthilit">SNES</span> to output captioning in this way since NTSC captions are located on <span class="posthilit">line</span> 21 of each field of a standard interlaced composite signal, at the top of the screen (unless pushing the screen down like this also caused the bottom <span class="posthilit">line</span>(s) to appear at the top after VBlank, which seems highly unlikely given that everything more or less restarts with regards to screen rendering after VBlank ends, if I understand correctly, and <span class="posthilit">line</span> 21 is technically part of VBlank at least with regards to the standards.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Interlace mode is another setting that is cached each frame, or possibly every two frames, I'm not really sure there. The cached setting determines whether the screen is actually rendered in interlaced mode or in progressive mode. However, once again you can toggle it mid-frame, and it will affect various tile addressing behavior and such, it'll just draw it to the TV in the cached mode anyway.</div><br />Quite technically, there is no real &quot;caching&quot; done of the interlace bit, at least based on my understanding of analog video. As others said, the only difference between a laced and nonlaced signal is that half <span class="posthilit">line</span> right before VBlank. Theoretically, it would technically be possible on the display device's end to display a half-laced, half-nonlaced image by displaying a half <span class="posthilit">line</span> somewhere in the active picture area. How the display device would handle this, I don't know (although I would wager that modern TVs that digitize and scale the image would have a hell of a time with such a signal). I think it's more likely that the <span class="posthilit">SNES</span> only evaluates the interlace mode latch at the actual point where it's time to determine whether or not to display a whole <span class="posthilit">line</span> or a half <span class="posthilit">line</span> at the bottom of the frame, so the only thing that matters is the final state of that latch after the whole frame has been output.<br /><br />OT: It would be interesting if it were possible to generate a true interlaced signal from the NES by somehow ending the last pre-VBlank scanline halfway across the screen (or even somehow generating an extra half <span class="posthilit">line</span>), thus triggering interlace. I know for a fact that several retro computers and consoles that weren't designed to output interlace can do so - Atari 2600, Commodore 128, Commodore 16 (and by association +4), and the Atari 8-bit machines are the ones I know off the top of my head.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Jun 06, 2013 6:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">No where in any of the developers manual documentations that I have does Nintendo state you should avoid using certain ranges of columns (<span class="posthilit">vertical</span>) or lines (horizontals) of pixels to deal with visual areas which may be hidden by the physical border of certain television sets.  This information is considered one of those &quot;tribal knowledge&quot; things when working with either NTSC or PAL.</div><br />So wait, Sega was more cautious than Nintendo here? Sega explicitly stated in documentation the need for a horizontal margin of 2 tiles and a <span class="posthilit">vertical</span> margin of 1 tile as a safe area (note that was for 224 pixels high, for 240 pixels high you'd want a <span class="posthilit">vertical</span> margin of 2 tiles).</div><br />In the case of the official <span class="posthilit">SNES</span> documentation, no, it's not stated anywhere.  In the case of the official NES documentation, I have no idea (to date I have only seen a single page of said documentation), but the sprite-clip and bg-clip features of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">PPUCTRL</tt> almost certainly were documented and there was likely a reference page explaining screen layout and their effect + reasoning.<br /><br />I think it's one of those &quot;tribal knowledge&quot; things that's also sort of assumed/implied that the programmer of the system is familiar with/aware of.  It becomes fairly obvious when testing your game/code out though -- your colleague tests it out on his configuration with a different display and suddenly you're being scolded for putting important stuff in the first and last 6 to 8 scanlines on screen (or 6-8 pixels on the left and right edges).  &quot;Overscan and TVs with stupid plastic or faux wood borders!!!&quot;<br /><br />If you want, I can actually reach out to 3 or 4 friends of mine who did professional <span class="posthilit">SNES</span> development (most were at Tiburon) and ask them where/how they learned about the aforementioned.  *shrug*  :-)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jun 06, 2013 7:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">LocalH wrote:</div><div class="quotecontent"><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Interlace mode is another setting that is cached each frame, or possibly every two frames, I'm not really sure there. The cached setting determines whether the screen is actually rendered in interlaced mode or in progressive mode. However, once again you can toggle it mid-frame, and it will affect various tile addressing behavior and such, it'll just draw it to the TV in the cached mode anyway.</div><br />Quite technically, there is no real &quot;caching&quot; done of the interlace bit, at least based on my understanding of analog video. As others said, the only difference between a laced and nonlaced signal is that half <span class="posthilit">line</span> right before VBlank.</div><br />I contend that there is:<br /><br />Modern digital TVs have to notice whether the half-<span class="posthilit">line</span> occurred and then use that to select which field the digitized pixels go to in the frame buffer. It's &quot;cached&quot; for the entire field.<br /><br />Consider a CRT TV connected to a <span class="posthilit">SNES</span> in interlace mode. In the middle of a frame, freeze time. At this point, the TV is either displaying an even or odd field. The individual scanlines in the video signal are identical for each field, yet each scanline is displayed at one of two possible positions. Thus there must be some state inside the TV knowing which of these two possible positions to use. It &quot;caches&quot; the even/oddness of a field in the circuit that slowly sweeps the beam from top to bottom, in the form of a very slight offset every other field.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think it's more likely that the <span class="posthilit">SNES</span> only evaluates the interlace mode latch at the actual point where it's time to determine whether or not to display a whole <span class="posthilit">line</span> or a half <span class="posthilit">line</span> at the bottom of the frame, so the only thing that matters is the final state of that latch after the whole frame has been output.</div><br />Since AFAIK that's the only place in the signal that differs, there's not much else that could be happening.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Theoretically, it would technically be possible on the display device's end to display a half-laced, half-nonlaced image by displaying a half <span class="posthilit">line</span> somewhere in the active picture area. </div><br />I wonder whether you could use this to display even higher resolution images by having triple interlacing and beyond, using smaller fractions of a scanline to offset successive fields.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LocalH</b> [ Thu Jun 06, 2013 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle">LocalH wrote:</div><div class="quotecontent">Quite technically, there is no real &quot;caching&quot; done of the interlace bit, at least based on my understanding of analog video. As others said, the only difference between a laced and nonlaced signal is that half <span class="posthilit">line</span> right before VBlank.</div><br />I contend that there is:<br /><br />Modern digital TVs have to notice whether the half-<span class="posthilit">line</span> occurred and then use that to select which field the digitized pixels go to in the frame buffer. It's &quot;cached&quot; for the entire field.<br /><br />Consider a CRT TV connected to a <span class="posthilit">SNES</span> in interlace mode. In the middle of a frame, freeze time. At this point, the TV is either displaying an even or odd field. The individual scanlines in the video signal are identical for each field, yet each scanline is displayed at one of two possible positions. Thus there must be some state inside the TV knowing which of these two possible positions to use. It &quot;caches&quot; the even/oddness of a field in the circuit that slowly sweeps the beam from top to bottom, in the form of a very slight offset every other field.</div><br />True in that regard, I was referring to the fact that there is likely no explicit &quot;caching&quot; within the device outputting the signal (in this case the <span class="posthilit">SNES</span>). Whichever way the TV implements interlacing will likely involve either an implicit or explicit caching of the state, as you mention. Also, do remember that to many modern digital sets, 240p doesn't really exist. Every flatscreen I've ever interacted with treated 240p signals as if they were 480i without exception, and so in this case it's not so much a cache as just putting the fields on the right lines in the final image (of course, this could still be considered a &quot;cache&quot; in that the set will need to know which field is upper, so as not to have a 50% chance of a swapped-field image).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Theoretically, it would technically be possible on the display device's end to display a half-laced, half-nonlaced image by displaying a half <span class="posthilit">line</span> somewhere in the active picture area. </div><br />I wonder whether you could use this to display even higher resolution images by having triple interlacing and beyond, using smaller fractions of a scanline to offset successive fields.</div><br />That's a very interesting concept, and one that I've never even considered, but now it seems so obvious. Of course, the tradeoff would be the overall &quot;frame&quot; rate of all fields combined, so if you split the last scanline into quarters, then you might end up with an effective 15Hz 960-<span class="posthilit">line</span> signal wrapped within 60Hz (and would have the option of 30Hz motion at 480 lines or 60Hz motion at 240 lines).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Thu Jun 06, 2013 11:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">LocalH wrote:</div><div class="quotecontent">Theoretically, it would technically be possible on the display device's end to display a half-laced, half-nonlaced image by displaying a half <span class="posthilit">line</span> somewhere in the active picture area.</div>That would interrupt the HSync signal. You'd end up with something a lot like what happens when you fast-forward or rewind a VHS tape. <a href="http://www.ronaldsnoeck.com/vcr.htm" class="postlink">Here's a page that explains nonstandard synchronization signals in great detail.</a><br /><br /><div class="quotetitle">LocalH wrote:</div><div class="quotecontent">That's a very interesting concept, and one that I've never even considered, but now it seems so obvious. Of course, the tradeoff would be the overall &quot;frame&quot; rate of all fields combined, so if you split the last scanline into quarters, then you might end up with an effective 15Hz 960-<span class="posthilit">line</span> signal wrapped within 60Hz (and would have the option of 30Hz motion at 480 lines or 60Hz motion at 240 lines).</div>Ignoring compatibility for a moment, that would be really interesting to see. I think it would flicker really badly if you displayed the same picture at all four offsets, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Jun 06, 2013 11:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Joe wrote:</div><div class="quotecontent"><a href="http://www.ronaldsnoeck.com/vcr.htm" class="postlink">Here's a page that explains nonstandard synchronization signals in great detail.</a></div> Oh, <em>that's</em> what the equalization pulses are for!<br /><br /><div class="quotetitle">LocalH wrote:</div><div class="quotecontent">That's a very interesting concept, and one that I've never even considered, but now it seems so obvious. Of course, the tradeoff would be the overall &quot;frame&quot; rate of all fields combined, so if you split the last scanline into quarters, then you might end up with an effective 15Hz 960-<span class="posthilit">line</span> signal wrapped within 60Hz (and would have the option of 30Hz motion at 480 lines or 60Hz motion at 240 lines).</div>I once set up a microcontroller to drive a CRT computer monitor at 3x interlaced VGA (instead of above suggested 4x or standard 2x). It didn't work very well. Even after the 70/3 total frame rate causing horrific flicker and electron beam size blurring the successive fields, the on-screen spacing between fields wasn't uniform or a nice function of timing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Fri Jun 07, 2013 2:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">No where in any of the developers manual documentations that I have does Nintendo state you should avoid using certain ranges of columns (<span class="posthilit">vertical</span>) or lines (horizontals) of pixels to deal with visual areas which may be hidden by the physical border of certain television sets.  This information is considered one of those &quot;tribal knowledge&quot; things when working with either NTSC or PAL.</div><br />So wait, Sega was more cautious than Nintendo here? Sega explicitly stated in documentation the need for a horizontal margin of 2 tiles and a <span class="posthilit">vertical</span> margin of 1 tile as a safe area (note that was for 224 pixels high, for 240 pixels high you'd want a <span class="posthilit">vertical</span> margin of 2 tiles).</div><br />In the case of the official <span class="posthilit">SNES</span> documentation, no, it's not stated anywhere.  In the case of the official NES documentation, I have no idea (to date I have only seen a single page of said documentation), but the sprite-clip and bg-clip features of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">PPUCTRL</tt> almost certainly were documented and there was likely a reference page explaining screen layout and their effect + reasoning.<br /><br />I think it's one of those &quot;tribal knowledge&quot; things that's also sort of assumed/implied that the programmer of the system is familiar with/aware of.  It becomes fairly obvious when testing your game/code out though -- your colleague tests it out on his configuration with a different display and suddenly you're being scolded for putting important stuff in the first and last 6 to 8 scanlines on screen (or 6-8 pixels on the left and right edges).  &quot;Overscan and TVs with stupid plastic or faux wood borders!!!&quot;<br /><br />If you want, I can actually reach out to 3 or 4 friends of mine who did professional <span class="posthilit">SNES</span> development (most were at Tiburon) and ask them where/how they learned about the aforementioned.  *shrug*  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /></div><br />If it is mentioned in documentation, I don't see why it would need to consist of more than a small diagram showing NTSC safe zones and a sentence or two. It has always been mind-boggling to me that developing with safe zones on the TV in mind has received so much discussion and write-ups. You can wrap it up as &quot;consider that a few tiles on each edge may be cut off because some TVs are different&quot;. Beyond that the developer probably has the smarts to experiment on different TVs and keep it in mind... it seems that for Nintendo to tell people which columns are allowed for important data is going into necessary levels of detail.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jun 07, 2013 6:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It is mentioned in documentation, though it might not be NES-era documentation. Nintendo's lot check guidelines for the GameCube, Sony's technical requirements checklist for the PlayStation 2, and what Microsoft called the equivalent on the original Xbox all had specific safe area guidelines. I seem to remember that Xbox games were required to keep status bars and the like at least 7.5% away from an edge. This implies a title safe area of 85% of the width and 85% of the height of the screen. I have noticed that one of the Call of Duty games my cousin plays on his Xbox 360 has a &quot;safe area&quot; option in the menu that allows moving the HUD closer to or farther from the corners. But a user-defined safe area is really only practical on platforms with an expectation of save capability and no rigid tile grid, such as Dreamcast or anything newer. Particularly on a tile-based system, where the relationship between game world distances and picture distances is constant, avoiding the game design flaw of blind leaps requires at least a minimum safe area so that the developer knows how far in front of the (centered) player character the player can see.<br /><br />If you want your NES or Super NES game to be widescreen friendly, I'd recommend a 30x20 tile title safe area. Keep important things 1 tile away from the left and right and 5 tiles (240 <span class="posthilit">line</span> mode) or 4 tiles (224 <span class="posthilit">line</span> mode) from the top and bottom. Umihara Kawase was way ahead of its time in this respect.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Jun 07, 2013 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are we all talking past one another / not actually reading what each other write?<br /><br />* <a href="http://forums.nesdev.com/viewtopic.php?p=112783#p112783" class="postlink">No where in any of the developers manual documentations that I have does Nintendo state you should avoid using certain ranges of ...</a> -- (vague statement by me, I should have been specific that I was referring to <span class="posthilit">SNES</span> documentation)<br />* <a href="http://forums.nesdev.com/viewtopic.php?p=112789#p112789" class="postlink">But it's in the background planning sheets used by Nintendo during the development of {list of <span style="text-decoration: underline"><strong>NES</strong></span> games} ...</a> -- (NES docs != <span class="posthilit">SNES</span> docs)<br />* <a href="http://forums.nesdev.com/viewtopic.php?p=112820#p112820" class="postlink">No where in the <span style="text-decoration: underline"><strong><span class="posthilit">SNES</span></strong></span> developers manual does Nintendo state ...</a> -- (I clarify I'm talking about <span class="posthilit">SNES</span> docs only)<br />* <a href="http://forums.nesdev.com/viewtopic.php?p=112870#p112870" class="postlink">So wait, <span style="text-decoration: underline"><strong>Sega</strong></span> was more cautious than Nintendo here? Sega explicitly stated in documentation ...</a> -- (Sega != <span class="posthilit">SNES</span>/Nintendo)<br />* <a href="http://forums.nesdev.com/viewtopic.php?p=112876#p112876" class="postlink">In the case of the official <span style="text-decoration: underline"><strong><span class="posthilit">SNES</span></strong></span> documentation, no, it's not stated anywhere.</a> -- (again, talking about the <span class="posthilit">SNES</span> docs)<br />* <a href="http://forums.nesdev.com/viewtopic.php?p=112926#p112926" class="postlink">If it is mentioned in documentation, I don't see why ...</a> -- (I've said multiple times now it isn't mentioned in the <span class="posthilit">SNES</span> docs)<br />* <a href="http://forums.nesdev.com/viewtopic.php?p=112934#p112934" class="postlink"><span style="text-decoration: underline"><strong>It is</strong></span> mentioned in documentation, though it might not be <span style="text-decoration: underline"><strong>NES-era</strong></span> documentation.</a> -- (no it isn't mentioned in the <span class="posthilit">SNES</span> docs, and <span class="posthilit">SNES</span> docs == &quot;not NES-era docs&quot;)<br /><br />Please do not make me stab you people.  :-)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Sat Jun 08, 2013 12:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Are we all talking past one another / not actually reading what each other write?<br />* <a href="http://forums.nesdev.com/viewtopic.php?p=112926#p112926" class="postlink">If it is mentioned in documentation, I don't see why ...</a> -- (I've said multiple times now it isn't mentioned in the <span class="posthilit">SNES</span> docs)</div><br /><br />I'm aware; I mentioned this to cover the possibility that the NES documentation may make mention of it, and was saying that even if it *did* appear there it is unlikely it received much documentation at all, for the same reasons they did not feel the need to make a big deal of it in <span class="posthilit">SNES</span> documentation. It was a response to &quot;In the case of the official NES documentation, I have no idea (to date I have only seen a single page of said documentation)&quot;.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Keep important things 1 tile away from the left and right and 5 tiles (240 <span class="posthilit">line</span> mode) or 4 tiles (224 <span class="posthilit">line</span> mode) from the top and bottom. Umihara Kawase was way ahead of its time in this respect.</div><br /><br />I'm assuming you meant to say top and bottom in both cases, not left and right.<br /><br />Either way, I think by making games &quot;widescreen friendly&quot; all this does is chop off perfectly usable area on what is an already strikingly low-resolution system. If anything, it encourages people to use that atrocious &quot;fit&quot; feature that cuts off so much information to fill the screen. I guess I don't think it's good to encourage such a thing; the people who would care / notice have more than likely either configured their television set to appropriately show a 4:3 image, or are playing their system on a television the system is designed for (like a 4:3 CRT television or monitor).<br /><br />If we make games just for 16:9 cropped setups, we're left with a bunch of games with awkwardly wasted space or weird HUD placements. Yeah, I'm looking at you, Umihara Kawase. I don't think of it as ahead of its time but more annoying and stupid for everyone who isn't playing their <span class="posthilit">SNES</span> on a setup that is flat-out<em> wrong </em>and extra-blocky with every other game. <br /><br />If it's &quot;fixed&quot; with an option to move the HUD to appropriate spots, then is such an interference really the best solution? If we're going to go to such an effort, wouldn't it be better to just have the game tell the player &quot;Hey nutsquad! Put your television on 4:3 mode and buy yourself an S-video cable if you don't have one for your <span class="posthilit">SNES</span>!&quot;. Everybody wins, and composite dies just a little more!<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">So with all I understand, I take a kind of controversial view that few people like with how I personally choose to render video. First, the NTSC vs PAL cropping of overscan is due to analog properties that aren't an issue with a PC. So I show all 240 scanlines. Some games use them, some games don't. People tend to not like not being able to fill the screen 100% from top to bottom with colored lines, but oh well. Video shaders can do that anyway if it's that important. Next, because of being -able to-, even if nothing does, toggle the hires bits mid-scanline, it's better to just output at a consistent 512 pixel width. This of course would break a naive HQ2x software filter, but a smarter vector-based shader that treats the screen as having 256 &quot;dots&quot; in normalized space would work fine, so that's fine too. Also tends to produce a sharper image with bilinear filtering, for obvious reasons.</div><br /><br />Controversial or not, this is my favorite approach and you have my applause. I especially like the by-default 2x prescale you've applied that makes even the cheapest bilinear filtering preserve sharpness much more.<br />Plus...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This of course would break a naive HQ2x software filter</div><br /><span style="font-size: 200%; line-height: normal">AWESOME</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Sat Jun 08, 2013 3:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES vs. <span class="posthilit">SNES</span> screen resolution</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mikejmoffitt wrote:</div><div class="quotecontent">You can wrap it up as &quot;consider that a few tiles on each edge may be cut off because some TVs are different&quot;.</div><br />That's exactly what Sega did:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For important indications such as the score, there shall be a two cell margin on the right and left side and one cell margin on the top and the bottom of the screen (some monitors do not show these areas well). Do not put important score, text or time information in the top, bottom, leftmost or rightmost row or columns.</div><br />But yes, this was considered a requirement for approving the game. I'm honestly surprised Nintendo didn't put that in their list, given how they were quite strict with things like &quot;sound must not have even the most minimal clipping at all&quot; (despite the fact clipping must be extremely high to be noticeable - the end result is that many <span class="posthilit">SNES</span> games sound way too quiet)<br /><br />If you ask me, my experience has been the leftmost and rightmost columns being hidden (i.e. one tile column being cut) with the top and bottom being underscanned. That's a height of 224 though, 240 does indeed overscan a bit, but the top and bottom rows aren't obscured completely (this also means that any two-way scrolling NES game with <span class="posthilit">vertical</span> mirroring will fail miserably at hiding the scrolling glitches).<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Umihara Kawase was way ahead of its time in this respect.</div><br />Except because gameplay could happen above and below the HUD. Also don't forget that now we have widescreen monitors that are wider than 2:1, and I doubt it will take long before TVs adopt that (seriously, why that wide?!).<br /><br />And I don't get why the heck people think that trimming <span class="posthilit">vertical</span> resolution is widescreen. Widescreen is supposed to show <em>more</em>, not less! Besides trimming anything is a bad idea in a game. Just use &quot;fit&quot; mode and cope with the borders. If you don't want the borders because a static color can damage your screen then consider not displaying anything 4:3 on that screen in the first place.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>