<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Effective Use of Zero/Direct Page</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Effective Use of Zero/Direct Page</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13682">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13682</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Wed Dec 30, 2015 4:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've heard it said that the 6502/65816 make up for their paucity of CPU registers by having zero page/direct page, and that these pages of memory can in a sense be thought of as a massive set of additional registers to use. Rather than being register-starved, this wisdom goes, these CPUs are actually incredibly register rich!<br /><br />(from here on for convenience I'll just refer to the 6502/zero page, but what I say pretty much applies to the 65816 as well)<br /><br />That's well and good for demonstration routines, demos, etc., where it's easy enough to keep the usage of zero page &quot;in one's head&quot; and 256 bytes should be enough for anyone. But what about larger programs? What kind of calling convention do people usually enforce so that they can safely take advantage of zero page across subroutines? Without an easy or fast way of saving/restoring the zero page &quot;registers&quot; to the stack, is this even done?<br /><br />To put it bluntly, how on earth do people write real programs on the 6502?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Dec 30, 2015 4:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />256 global variables<br /><br />Okay, for real, I consider the bytes used by a function to 'belong' to that function, so I just poke those bytes before calling it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Dec 30, 2015 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a big pile of temporary variables on ZP that I call i,j,k,l,m,n,o,p,q,r,s,t,u,v,w. I use these often as parameters, return values, and temporary variables within functions.<br /><br />In my documentation of functions, I generally have a list of which of these are used (i.e. input, output, clobber) and for functions that need to call each other I try not to overlap them. In some moments of despair I do indeed temporarily store some of them on the stack because of overlap.<br /><br />Otherwise I think my general rule of thumb is that if something is used every frame or especially many times per frame I try to put it on the ZP; if not it can go in regular RAM. It's usually pretty easy to move variables back and forth between these locations, so I don't worry about it too much; I just move them around whenever I think it will help.<br /><br />Personally I dunno how much I like the comparison to registers. I think it's the operations that work directly on memory that make them register-like, and for most of the relevant instructions that applies to all memory, not just the zero page. The zero page is just slightly faster at it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>snarfblam</b> [ Wed Dec 30, 2015 4:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think one of the reasons that people say that zero-page is register-like is because that's where you have to store pointers to dereference them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Dec 30, 2015 4:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I do pretty much the same thing. The first 32 bytes of ZP are reserved for function parameters and short-lived variables. Some care must be taken to avoid overlaps between functions that run concurrently, but this usually isn't a problem.<br /><br />The rest of ZP is where most of my variables go. Anything that isn't an array good there. If there's not enough space for all variables, the least used ones go in other memory pages.<br /><br />I too don't see much resemblance between ZP and actual CPU registers... Just the fact that you have to load from and store to ZP in order to do most things with these variables already make them very different from (and much slower than) CPU registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darryl.revok</b> [ Wed Dec 30, 2015 6:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But what about larger programs?</div><br />This is kind of what other people said, but to give a simplified answer...<br /><br />First, when you refer to a zero page address in code, you typically don't use the memory location. You CAN, but it's generally somewhat bad form, for multiple reasons that I won't get into here.<br /><br />So, you don't have to remember, for example, that $0083 is the variable for your object #2 X position low byte. In fact, you don't even have to usually know that it's object #2. You create a set of variables called something like &quot;objectXposLowByte&quot;, and when you refer to it, you'll usually have the object number stored in your register. So, objectXposLowByte, x will be object #2 if X = 2. Does that make sense?<br /><br />Really, you just end up having to memorize your own naming conventions; the same as any other language.<br /><br />Also, with the 256 bytes, most of the data that you use won't have to be stored from frame to frame. The object position example I used would be, so that variable won't get overwritten. Let's say for example though that your program already completed the portion of it's code used for scrolling. In the process, your program used a bunch of variables in the zero page. Only a handful of those will need to be saved. The rest can be used again for other variables which don't need to be saved, in a later part of your routine. So when you get to calculating collision detection, you can reuse all of the zero page space which was used for temporary variables during scrolling.<br /><br />You can assign multiple variable names to the same location, so once again, in practice you'll only need to remember your variable naming conventions. After a while, you'll know what they <em>should</em> be named without having to look. You just have to be careful not to overwrite any non-temporary variables.<br /><br />Does that help? It's totally possible to write programs in 6502 assembly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Dec 31, 2015 8:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In certain circumstances you can use X, Y and A registers to hold parameters, if the subroutine uses them that way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Thu Dec 31, 2015 9:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Personally I have always allocated the zero-page by hand, with a small scratch area set up for temporary use.<br /><br />For small programs this works fairly well. Leaf functions can go haywire on the scratch area while the rest uses permanent zero-page locations for storage. Occasionally the level above the leaf functions are allowed out of the scratch area from the other direction.<br /><br />Trouble starts once the program grows beyond a certain point and the call stacks start to go deep while you've simultaneously running out of permanent space and need starting juggle overlays by hand to manage.<br /><br />Madness ensues and you end up with a festering nest of bugs where exercising any rare code paths is a minefield and the code is hopelessly inflexible since any slight changes need to be carefully vetted against all possible contexts. Then throw non-trivial asynchronous interrupt-based logic into the mix and great fun is had by all..<br /><br />&lt;/rant&gt;<br /><br />For any future large-ish project I want to explore means of automating the process.<br /><br />The most straightforward solution would be to treat the zero-page scratch space as a stack. Leaf functions would just grab however much they needed for temporaries and arguments/results from the top and export a new stack top symbol indicating the next available byte. Callers would then allocate the from the maximum of all these callee stack tops and continue the process.<br /><br />Conveniently this may be foisted off on CA65 relatively easily since it can resolve maximum values at link-time and since much of the details of declaring call graph and allocating storage may be hidden behind macros.<br /><br />Of course this still leaves any number of open issues on the table. For instance persisting results between intermediate calls would require the variables to be allocated inside of the a single caller.<br /><br />Significantly it also leaves the work of _correctly_ declaring this meta-data up to the programmer where any slight errors may not be immediately obviously and likely to pop up later on in a completely different context. Something which previous experience in trying to write exception unwinding specifications leaves me worried about.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Thu Dec 31, 2015 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">darryl.revok wrote:</div><div class="quotecontent">Does that help? It's totally possible to write programs in 6502 assembly.</div><br /><br />Yes! Your and everyone else's input is much appreciated. And of course, developers for years managed to do write programs for the 6502, I don't at all mean to suggest it's impossible...except maybe for me  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />I'm pretty surprised at how much bristling there is here at the suggestion that zero page could be thought of an extended register set...it always seemed to me to be a pretty common refrain among 6502 enthusiasts that, at the very least, the zero page <em>compensated</em> for the paucity of registers. For example, the Wikipedia article on the 6502 makes the comparison, observing that &quot;code for the 6502 uses the zero page much as code for other processors would use registers&quot; and notes that &quot;using the indexed modes, the zero page effectively acts as a set of up to 128 additional (though very slow) address registers&quot;. Likewise the article for <a href="https://en.wikipedia.org/wiki/Zero_page" class="postlink">zero page</a> states that &quot;the MOS Technology 6502 has only one general purpose register (the accumulator). As a result, it used the zero page extensively&quot;. To be clear, I basically agree with you guys - it really seems like if zero page bytes are supposed to substitute for registers, they're a pretty mediocre substitute.<br /><br />Anyway, it looks like it'd be accurate to say that most people:<br /><br /><ul><li> Use some small amount of zero page dynamically, for temporaries and indirect address modes (i.e. the sort of &quot;poor man's registers&quot; suggested above)</li><li> Statically reserve the majority of zero page for the most commonly accessed data in the program</li></ul><br />...with the former case being effectively unprincipled (i.e. you keep in your head/comments what code touches what and take care that procedures don't step on each others' toes). This seems pretty scary to me, coming from a modern (and maybe wimpier  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />) background. It seems, based on what doynax is saying, that my fears aren't <em>entirely</em> without merit. But it also seems that, based on what the rest of you are saying, it's not actually that big a deal in practice, with a bit of discipline.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Dec 31, 2015 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And if it scares you, as it scared me at one point when I was adding explosion sounds to <em>Thwaite</em>, you can declare a calling convention where some temporary zero page locations are caller-saved and others callee-saved.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Dec 31, 2015 11:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">Madness ensues and you end up with a festering nest of bugs where exercising any rare code paths is a minefield and the code is hopelessly inflexible since any slight changes need to be carefully vetted against all possible contexts. Then throw non-trivial asynchronous interrupt-based logic into the mix and great fun is had by all..</div><br />This is pretty much my experience, although I may be overly paranoid about occurrence rate of these type of bugs. Having to do all the memory juggling manually really sucks given that it's technically a solvable problem. <br /><br />My current plan is to do it manually, but have some additional macros and Lua code to assert (at runtime) that no two functions attempt to own the same area of scratch memory simultaneously. Something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc foo<br />&nbsp; alloc_scratch 6, 4 ; reserve 4 bytes from offset 6<br />&nbsp; ; ... use the memory ...<br />&nbsp; jsr bar<br />&nbsp; dealloc_scratch 6 ; deallocate so that others can use it<br />&nbsp; rts<br />.endproc<br /><br />.proc bar<br />&nbsp; ; this would cause an assert to trip at runtime:<br />&nbsp; alloc_scratch 6, 1 ; reserve 1 byte from offset 6<br />&nbsp; ; ... use the memory ...<br />&nbsp; dealloc_scratch 6 ; deallocate so that others can use it<br />&nbsp; rts<br />.endproc<br /></div><br />Pros:<br />- In case of an error, the system could print where the memory was allocated, so overlaps should be fairly easy to resolve. It could also print out a suggestion about which part of memory has been free throughout all passes through the allocation call.<br />Cons:<br />- Memory management/juggling is still manual.<br />- Errors are only noticed at runtime, and only within the execution paths that are actually executed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Dec 31, 2015 11:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I usually just give the registers names.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Jan 01, 2016 12:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What is strange is how rarely I need to use a temporary register as a parameter in general.  Somehow I unconsciously avoid them.  Of course my subroutines have parameters, but the parameters usually end up as non-temporary registers anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Jan 01, 2016 1:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">I'm pretty surprised at how much bristling there is here at the suggestion that zero page could be thought of an extended register set...it always seemed to me to be a pretty common refrain among 6502 enthusiasts that, at the very least, the zero page <em>compensated</em> for the paucity of registers.</div><br /><br />That's my opinion too, but I suppose a lot of people don't like to consider memory outside of the CPU as being a &quot;true&quot; register.  But with so many of the indirect opcodes being intended for zeropage, it seems to me that's pretty much what is, just a way to add a bunch of registers while keeping the CPU itself cheap.  I find it kinda funny that when I do NES stuff it seems like I tend to re-use the same zeropage variables, but when doing stuff on the PIC16 I find it really annoying that there are only 2 registers for indirect access.  OK for small assembly programs, but when mixing C and asm you can pretty much forget about having a dedicated use for them.  It was first made around same time as the 6502, not that I've ever used the 'original' PIC, maybe it's even worse.<br /><br />Would have been nice if Nintendo had put the write-only registers in zeropage, but I guess that would have added cost, and the extreme cost-cutting is what made the NES/FC so unique and extendable with cartridge hardware, with it's external CHR memory and the fact that it had a 6502 at all, while it seems like everything else from Japan was using the more expensive Z80.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Jan 01, 2016 1:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Effective Use of Zero/Direct Page</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">when doing stuff on the PIC16 I find it really annoying that there are only 2 registers for indirect access.  OK for small assembly programs, but when mixing C and asm you can pretty much forget about having a dedicated use for them.  It was first made around same time as the 6502, not that I've ever used the 'original' PIC, maybe it's even worse.<br /></div>The original PIC (we'll talk about the PIC1650) is very close to the PIC16F59: 12-bit instruction words, 32 I/O pins. Like all the 12-bit instruction PICs, no interrupt support.<br /><br />Amusingly, it's even binary-compatible: the SFRs have not moved, and the instruction encoding is unchanged. Pins have moved around, though.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>