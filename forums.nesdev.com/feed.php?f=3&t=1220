<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=1220" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-03-13T03:26:12-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=1220</id>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2006-03-13T03:26:12-07:00</updated>
<published>2006-03-13T03:26:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10726#p10726</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10726#p10726"/>
<title type="html"><![CDATA[Handling branch opcodes in a cycle-based CPU core]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10726#p10726"><![CDATA[
I wrote a cycle for cycle 6502 core recently and I had to skip the branches because the 6502_cpu.txt made no sense to me. Btw, I assume that you are going to update the PPU/APU after each cycle? Also, why are you specifically writing a cycle for cycle emulator?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Mon Mar 13, 2006 3:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-03-12T22:52:35-07:00</updated>
<published>2006-03-12T22:52:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10717#p10717</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10717#p10717"/>
<title type="html"><![CDATA[Handling branch opcodes in a cycle-based CPU core]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10717#p10717"><![CDATA[
Looks okay to me.<br /><br />Also, you could probably simplify your CPU core slightly to perform CPU_Cycle() directly from CPU_Read() and CPU_Write(), since <strong>all</strong> CPU cycles are tied to memory accesses (and vice-versa).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Sun Mar 12, 2006 10:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Josh]]></name></author>
<updated>2006-03-12T21:52:06-07:00</updated>
<published>2006-03-12T21:52:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10714#p10714</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10714#p10714"/>
<title type="html"><![CDATA[Handling branch opcodes in a cycle-based CPU core]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1220&amp;p=10714#p10714"><![CDATA[
I'm currently in the process of writing a cycle-based 2A03 CPU core. The ViCE documentation (<a href="http://www.nesdev.com/6502_cpu.txt" class="postlink">http://www.nesdev.com/6502_cpu.txt</a>) is quite helpful, but the information contained there about branch opcodes is not all that clear. I know that some people here (Quietust and perhaps others) have written cycle-based CPU cores, so I'd like to see whether I'm on the right track. Here's what I've got at this point (for the BPL opcode, 0x10):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    /***********/<br />    /* BPL $nn */<br />    /***********/<br />    case 0x10: /* 2nd cycle: Fetch operand and increment PC */<br />               Operand = CPU_Read &#40;CPU_PC.Word++&#41;;<br />               CPU_Cycle &#40;&#41;;<br /><br />               /* Extra cycle only if branch taken */<br />               if &#40;~CPU_P &amp; CPU_N_FLAG&#41;<br />               &#123;<br />                 /* 3rd cycle: Dummy opcode fetch and add operand to PC&#40;l&#41; */<br />                 CPU_Read &#40;CPU_PC.Word&#41;;<br />                 Address.Word = CPU_PC.Word + &#40;S8&#41; &#40;Operand&#41;;<br />                 CPU_PC.Byte.Low = Address.Byte.Low;<br />                 CPU_Cycle &#40;&#41;;<br /><br />                 /* Extra cycle only if PC&#40;h&#41; is invalid at this time */<br />                 if &#40;CPU_PC.Byte.High != Address.Byte.High&#41;<br />                 &#123;<br />                   /* 4th cycle: Dummy opcode fetch and fix PC&#40;h&#41; */<br />                   CPU_Read &#40;CPU_PC.Word&#41;;<br />                   CPU_PC.Byte.High = Address.Byte.High;<br />                   CPU_Cycle &#40;&#41;;<br />                 &#125;<br />               &#125;<br /><br />               /* Done */<br />               break;</div><br /><br />Note that the first opcode cycle (fetch opcode and increment PC) was done before the switch statement for obvious reasons. Also, the (S8) cast is for a signed char. Does this code seem correct?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=110">Josh</a> — Sun Mar 12, 2006 9:52 pm</p><hr />
]]></content>
</entry>
</feed>