<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Who actually actively devlops free software</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Who actually actively devlops free software</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12254">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12254</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jan 16, 2015 6:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ideally, free software, such as gcc, linux, gimp, firefox, and many others, are developed by enthusiasts for free. Private companies can also plays the role of the &quot;enthusiasts&quot;, if they have the wish to do so.<br /><br />The more I gain experience developing software, the less I can actually belive this is really as that. For the following reasons :<br />1) Developing software might be a very cheap activity (you just need a computer to do it), but it takes time, <strong>*a lot* of time</strong>, especially if you want to develop good software (i.e. no crashes, memory leaks, instabilities, compatible with all kind of PC hardware, etc, etc...)<br /><br />2) Some of those software are absolutely <em>gigantic </em>in size, much larger as anything you'd write for a hobby. For example the latest version of gcc is 6.4 million of lines of code (according to cloc). Personally I wrote several application that are arround 3-5k lines of codes, and they were huge investments from me, by that I mean I spend <strong>whole weeks of vacation into them</strong> in addition to a few weekends and evenings. People developing gcc did 3 orders of magnitude more work than my huge investment (this is not the only measure I know, but it gives an order of idea), and there is only about 50 major developers, which means they all did roughly 100 times the investment I made, which is simply unimaginable.<br /><br />3) Trying to get a hold of how software someone else wrote works internally is <em>very hard</em>, much harder than actually developing your own from scratch. Therefore, if you have an idea for a small improvement in a free software and want to actually implement it, it takes probably a thausand times longer to find where you should modify the source code than to actually modify it to implement your idea.<br /><br />4) As some free software projects are gigantic and have many contributors, there should be people who takes the major decision as how the project evolves. If there is more than a couple of developers it can quickly become a nightmare if everyone comes with its ideas and such. For adding new features I think it can be imaginable a random guy does it during it's free time. However, when it comes to optimizing or re-arranging the existing code to be more maintainable or more efficient, it is a major decision that has to be taken by someone leading the project.<br /><br />For all these reason I can't believe free software is developed by random enthusiasts during their evenings, or even by university laboratories or companies that are willing to help developing a free software project for whatever good reason.<br /><br />Only paid professionals can do significant development of such works. But who are they, exactly (I'm not asking the names, who I don't really care, but what kind of guy are they / what is their jobs).<br /><br />If you still don't get why I mean, I really dare you to make a small improvement to a big project such as gcc, gimp or the linux kernel, a change that make any sense of course, and get it accepted. I really dare you. You'll probably cry just looking at the quantity of files in the source code, having no vague idea where the module that handles your part is located.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Fri Jan 16, 2015 8:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm completely agreeing with all the points here, especially number 3.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 16, 2015 10:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1. That's why a lot of developers rely on abstraction layers, such as managed languages (Java, Python, etc.), cross-platform libraries (SDL, Qt, etc.), and the like.<br /><br />2. 100 person-weeks is 2 years. You're probably right that most regular contributors to GCC are paid. In addition, people more experienced in a particular language will tend to crank out acceptable-quality code faster.<br /><br />3. You're right that not a lot of developers take time to publicly document the internal workings of their software. Could this be improved through tools that generate a call graph?<br /><br />4. Software projects accumulate <a href="http://en.wikipedia.org/wiki/Technical_debt" class="postlink">technical debt</a>, and I agree that sometimes it takes a strong leader to find a way to pay it back. But there are still ways to refactor one step at a time, and so long as you can explain the benefits of each step to the project leader, it can be made to work. Still, politics can interfere with a refactor proposal. I seem to remember (but cannot come up with citations) that for years, GCC's internals were intentionally kept tightly coupled and obtuse to prevent users from inserting an optimization pass, in order to prevent compromise of the process by non-free software. (Later, the GCC project <a href="https://www.gnu.org/licenses/gcc-exception-faq.html" class="postlink">switched</a> to using the <a href="https://www.gnu.org/licenses/gcc-exception" class="postlink">license of the GCC support library</a> to prevent this.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 16, 2015 10:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you really want to know, you can look right at the changelogs of most open source projects to see exactly who is making the changes. You can profile them by their edits, or ask them for an interview, maybe?<br /><br />Lots of large open source projects have professional developers working on them. Just because it's open source doesn't have to mean there's no money to pay developers, and with big popular projects it usually means the opposite. The small projects usually have to be unpaid development.<br /><br />Diving into a large codebase and figuring out how to make the change you want is a valuable skill, worth practicing. As a software developer you'll have to do it any time you move to a new project. Actually, even if you were there from the start, probably most of the code was written by others and you've never looked at it; sooner or later you have to go rooting through the rest of the code to fix a bug or make a change. If you can do this well, you can earn a good living with it. (You might even apply to work for an open source developer, if that's your interest.)<br /><br />Can you believe that people spend hours and weekends and months of their lives playing Minecraft, but you doubt the existence of someone who might have a similar fixation on making a piece of software?<br /><br />Just because software development is difficult and highly skilled doesn't mean someone wouldn't do it for free. Lots of people actually like doing it. Some people like it so much that they'll keep doing it at home, for free, and share their work with others.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 16, 2015 10:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Just because software development is difficult and highly skilled doesn't mean someone wouldn't do it for free. Lots of people actually like doing it. Some people like it so much that they'll keep doing it at home, for free, and share their work with others.</div><br />Unless a gatekeeper charges for developer tools and cryptographically locks out others' developer tools. Apple, Microsoft, Nintendo, and Sony have all been seen to do this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 16, 2015 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Unless a gatekeeper charges for developer tools and cryptographically locks out others' developer tools. Apple, Microsoft, Nintendo, and Sony have all been seen to do this.</div><br />Yes, open source development is abysmal on closed platforms. Always has been.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jan 16, 2015 1:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> people more experienced in a particular language will tend to crank out acceptable-quality code faster.</div><br />Well it's more complicated than that, you also have to be experienced with the language's standard library so you don't constantly have to look up details about how every function in the standard library works.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. You're right that not a lot of developers take time to publicly document the internal workings of their software. Could this be improved through tools that generate a call graph?</div><br />Yes, but the concept of &quot;call graph&quot; only apply to pure imperative software. Use function pointers, or object-oriented &quot;methods&quot;, or callbacks, and it makes no sense anymore. Anything with a GUI will use a lot of callbacks and object oriented, therefore making this totally useless. (although I must admit they are all kind of software where I totally lack skills).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I seem to remember (but cannot come up with citations) that for years, GCC's internals were intentionally kept tightly coupled and obtuse to prevent users from inserting an optimization pass, in order to prevent compromise of the process by non-free software.</div><br />Wow this is incredible. Do you happen to know in which version range this happened ?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can profile them by their edits, or ask them for an interview, maybe?</div><br />I'd like to, but it's not like I'm a newspaper or something. Maybe they were already interviewed by someone more meaningful than just me ?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You might even apply to work for an open source developer, if that's your interest.</div><br />Where should I apply then ? I never seen job offers mentioning free software, other than <em>maybe </em>in required skills for the job. (But most of the time, for some reason, non-free software is more asked).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Diving into a large codebase and figuring out how to make the change you want is a valuable skill, worth practicing.</div><br />To be honest this is extremely hard, and I always have a hard time to understand the software someone else made if it is longer than 50-100 lines. I cannot really explain why, but it's like that. When it's in C-family language the usage of external libraries, separate compilation with header files declaring crazy structures with a lot of fields, and the usage of weird names with underscores all over the place, as well as non-standard platform-specific options makes it a killer for me.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can you believe that people spend hours and weekends and months of their lives playing Minecraft, but you doubt the existence of someone who might have a similar fixation on making a piece of software?</div><br />Well I don't know much about Minecraft (to me it looks terrible), but I assume playing it distract those people, while developing software is distracting it is definitely not relaxing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Just because software development is difficult and highly skilled doesn't mean someone wouldn't do it for free. Lots of people actually like doing it. Some people like it so much that they'll keep doing it at home, for free, and share their work with others.</div><br />I happen to be one of these people. However, I only like working on my own software. I don't think I'd be able to place my stone in the castle of a gigantic free software project, without major help from someone who is alreadyy knownledgable about the project.<br /><br />GCC is the free software I use the most by very very far, but I'd be terribly embarrassed if I had to actually make <em>any </em>change to it without breaking it completey. Therefore for me the &quot;free software is developed by all it's user&quot; propaganda is a pure fallacy, I could never have any hope of improving GCC in any way for the next 10 years.<br /><br />Hironically I feel like writing my own compiler from scratch, although it would turn out to be long, difficult, flawed, unreliable and produce terrible code, would be less a hassle than trying for example to improve GCC to make better use of the MMX instruction extensions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 16, 2015 1:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">You might even apply to work for an open source developer, if that's your interest.</div><br />Where should I apply then ? I never seen job offers mentioning free software, other than <em>maybe </em>in required skills for the job. (But most of the time, for some reason, non-free software is more asked).</div><br />Most paid software development is not to make free software, so it's in the minority. You might have to look harder for it. Find a company that makes open source software, and look at their job postings. e.g. <a href="https://careers.mozilla.org/" class="postlink">Mozilla</a>, <a href="http://jobs.redhat.com/" class="postlink">RedHat</a>, etc...<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Diving into a large codebase and figuring out how to make the change you want is a valuable skill, worth practicing.</div><br />To be honest this is extremely hard, and I always have a hard time to understand the software someone else made if it is longer than 50-100 lines. I cannot really explain why, but it's like that. When it's in C-family language the usage of external libraries, separate compilation with header files declaring crazy structures with a lot of fields, and the usage of weird names with underscores all over the place, as well as non-standard platform-specific options makes it a killer for me.</div><br />It's very hard, which is why it's valuable. It's also very necessary. You can't expect a team to stay on the same project for its entire lifetime, let alone even one person. Probably even if the person has been dedicated to the same codebase their whole life, they've forgotten 95% of the code and have to &quot;relearn&quot; parts of it every time they need changing.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Can you believe that people spend hours and weekends and months of their lives playing Minecraft, but you doubt the existence of someone who might have a similar fixation on making a piece of software?</div><br />Well I don't know much about Minecraft (to me it looks terrible), but I assume playing it distract those people, while developing software is distracting it is definitely not relaxing.</div><br />Is relaxation your primary motivation for the activities you pursue? I'm not even sure that video games are relaxing. They can be, but often they are frustrating, intense, stimulating...<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">GCC is the free software I use the most by very very far, but I'd be terribly embarrassed if I had to actually make <em>any </em>change to it without breaking it completey. Therefore for me the &quot;free software is developed by all it's user&quot; propaganda is a pure fallacy, I could never have any hope of improving GCC in any way for the next 10 years.</div><br />Well, you've chosen one of the most difficult open source projects as your example; anything else you pick would be easier. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Programs are complex enough as it is, but a program that compiles programs???<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I seem to remember (but cannot come up with citations) that for years, GCC's internals were intentionally kept tightly coupled and obtuse to prevent users from inserting an optimization pass, in order to prevent compromise of the process by non-free software.</div><br />Wow this is incredible. Do you happen to know in which version range this happened ?</div><br />I don't know that specific example, but I've seen Linus Torvals write flippantly that one of the reasons he prefers C is to keep out C++ programmers who might weaken the codebase.<br /><a href="http://harmful.cat-v.org/software/c++/linus" class="postlink">http://harmful.cat-v.org/software/c++/linus</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jan 16, 2015 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't know that specific example, but I've seen Linus Torvals write flippantly that one of the reasons he prefers C is to keep out C++ programmers who might weaken the codebase.<br /><!-- m --><a class="postlink" href="http://harmful.cat-v.org/software/c++/linus">http://harmful.cat-v.org/software/c++/linus</a><!-- m --></div><br />This guy is famous for being especially rude and unrespectful for other, a perfect example for free software developers. (the last part was hionical)<br /><br />My personal opinion is that both C and C++ are both bad and good (oh well this means absolutely nothing). They are both unnecessary complex languages for what they are supposed to do (respectively low-level system programming and general purpose programming), which is a bad thing. However they are both exeremely universal, widely used and supported, which is also what is so good about them.<br /><br />Also, language choice is something different than good/bad coding practice. It's only quite recently that GCC started to have C++ components, and in my opinion that could be a problem if you wanted to compile the compiler on a machine who lacks a C++ compiler.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Find a company that makes open source software, and look at their job postings. e.g. Mozilla, RedHat, etc...</div><br />Yeah, except I'm not particularly interested in web browser or server operating systems. I'd be interested in GCC however as I have already said I totally lack skill to contribute to it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, you've chosen one of the most difficult open source projects as your example; anything else you pick would be easier. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Programs are complex enough as it is, but a program that compiles programs?</div><br />More difficult, maybe, but also it's the most fundamental, because without it you can only write assembly programs (or worse, plain HEX).<br /><br />I think if you write a compiler that just aims at producing correct code (no matter if it's terribly bloated and suboptimal), and that you use a simple language where the features and keywords are as limited as possible, then it can really be not that complex. You could also do a compiiler that targets a language, or a VM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 16, 2015 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">the concept of &quot;call graph&quot; only apply to pure imperative software. Use function pointers, or object-oriented &quot;methods&quot;, or callbacks, and it makes no sense anymore.</div><br />If function A passes callback function pointer B to function C, this could be interpreted as A calling both B and C, as A is in charge of determining what function gets called.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anything with a GUI will use a lot of callbacks and object oriented, therefore making this totally useless.</div><br />GUI ought to be <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" class="postlink">separated</a> into a &quot;view&quot; that interacts with the input devices and display and a &quot;model&quot; that interacts with the data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Fri Jan 16, 2015 4:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Whether or not software is free-software/open-source is independent of its quality and the quality of the documentation and management and so on. The difference is that with free-software there is the great potentials to make much improvement by anyone. Of course, it can still be difficult for many people, regardless of such thing.<br /><br />Some people say open source software is of bad quality. While that is true, proprietary software is even more bad quality.<br /><br />If you don't like GCC, try looking at LLVM; see if it is better. Like GCC it is also free software, but unlike GCC, LLVM is not copylefted. A lot of GNU software is bloated, but there is a lot of other free software available, much of which isn't as bloated (whether or not GNU licenses are used).<br /><br />When I write programs, I always write free software myself (most of it isn't very large though, and even large ones tend to be smaller than a lot of other programs). Sometimes it is &quot;trapped&quot; (meaning there aren't free compilers to compile this program) although I try to avoid it when reasonable to do so, and make it not &quot;trapped&quot;. Other project help with such thing too though, such as FreeBasic and ReactOS.<br /><br />One free software package that I like and believe it is well made (and also use) is SQLite. SQLite is public domain with full source-codes, easy to explain by the comments and codes of the program. SQLite is written and maintained by a large company though!<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Ideally, free software, such as gcc, linux, gimp, firefox, and many others, are developed by enthusiasts for free. Private companies can also plays the role of the &quot;enthusiasts&quot;, if they have the wish to do so.</div>Well, there is commercial free software too, but private companies can sometimes play the rule of the &quot;enthusiasts&quot; even if it is not commercial.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1) Developing software might be a very cheap activity (you just need a computer to do it), but it takes time, <strong>*a lot* of time</strong>, especially if you want to develop good software (i.e. no crashes, memory leaks, instabilities, compatible with all kind of PC hardware, etc, etc...)</div>Depends much on the software, and on your knowledge to do so. About memory leaks and those similar things, I tried to be most careful in avoiding those things when writing Internet Quiz Engine. There are no buffer overflows because it doesn't use buffers! There are no memory leaks because it uses no dynamic allocation!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3) Trying to get a hold of how software someone else wrote works internally is <em>very hard</em>, much harder than actually developing your own from scratch. Therefore, if you have an idea for a small improvement in a free software and want to actually implement it, it takes probably a thausand times longer to find where you should modify the source code than to actually modify it to implement your idea.</div>Depending on what the software is, this may be very true, and I definitely believe you (due to my own personal experience too). Some software (especially large ones) are going to be much more difficult to understand than ones that aren't.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4) As some free software projects are gigantic and have many contributors, there should be people who takes the major decision as how the project evolves. If there is more than a couple of developers it can quickly become a nightmare if everyone comes with its ideas and such. For adding new features I think it can be imaginable a random guy does it during it's free time. However, when it comes to optimizing or re-arranging the existing code to be more maintainable or more efficient, it is a major decision that has to be taken by someone leading the project.</div>It is true for large projects with many contributors. If it gets really bad and they refuse to fix it, someone with resources to do so can even fork the software. Forking the software in this way usually isn't and shouldn't be necessary, but sometimes it can help, and should always be permitted, since there may be a lot of valid reasons to do so (not only what is mentioned here).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For all these reason I can't believe free software is developed by random enthusiasts during their evenings, or even by university laboratories or companies that are willing to help developing a free software project for whatever good reason.</div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you still don't get why I mean, I really dare you to make a small improvement to a big project such as gcc, gimp or the linux kernel, a change that make any sense of course, and get it accepted. I really dare you. You'll probably cry just looking at the quantity of files in the source code, having no vague idea where the module that handles your part is located.</div>I have found GCC and Linux difficult (and have not looked at GIMP, as it is not a program I am interested in) in the ways you have specified, but I have actually made a few small improvements to SQLite.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">the concept of &quot;call graph&quot; only apply to pure imperative software. Use function pointers, or object-oriented &quot;methods&quot;, or callbacks, and it makes no sense anymore.</div>If function A passes callback function pointer B to function C, this could be interpreted as A calling both B and C, as A is in charge of determining what function gets called.</div>In Haskell, functions are just like anything else and can be passed around like other data, and are also pure functions. There are a lot of functions and data structures that can use the other function as input. How is this involved in such a way then?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anything with a GUI will use a lot of callbacks and object oriented, therefore making this totally useless.</div>GUI ought to be <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" class="postlink">separated</a> into a &quot;view&quot; that interacts with the input devices and display and a &quot;model&quot; that interacts with the data.</div>I agree that such thing is generally a good idea, then you can easily make the command-line version too. What I like better though is command-line program that is acting as a filter, like many older UNIX programs do; much of my own software acts as a filter, some of which even completely ignore any command-line arguments they may be given (since the program does not need them).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Jan 16, 2015 5:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm in full agreement with most everything you've said, Bregalad, and I'm a strange mix: doing both open-source things as well as working for commercial companies:<br /><br />I've been a participant in the open-source community (both as a user, support person, and actual committer) since... I guess 1993?  I started using Linux 0.99pl45 and helped tested the CSLIP driver, then later (1997) moved to FreeBSD and contributed there for many years (and mostly still do, although <a href="https://koitsu.wordpress.com/2008/12/13/why-i-left-the-freebsd-project/" class="postlink">I turned in my ports committer bit in 2008</a>).  I also maintain <a href="https://github.com/koitsu/bsdhwmon" class="postlink">my own open-source program for FreeBSD</a>.<br /><br />But I've also worked for commercial companies, Microsoft being the most notable, though not as a software developer (professional programming isn't something I do), but I regularly had to write software and interact with engineering teams for bug reporting and overall platform or architectural design issues.  I wrote a lot of Perl and shell script stuff there, and had to do a bit of C hacking (usually on open-source projects that behaved badly/were buggy, so we'd make local patches for the issues).<br /><br />This topic (open-source vs. closed-source) comes up quite often on Slashdot, and last month <a href="http://it.slashdot.org/comments.pl?sid=6340573&amp;cid=48557445" class="postlink">I decided to state my opinion (tersely) on the matter</a>; my post is in reply to someone insisting that if X.org was closed-source that said 27-year-old bugs wouldn't have been found at all.  In my main paragraph, I cover almost all of your points, so we're on the same page.<br /><br />My stance is simple: there's pros and cons to both models, and neither is necessarily more or less superior than the other.  But it just so happens that open-source zealots are usually the ones to chant ridiculous mantras about how such software is naturally superior because the code is available -- and that is absolute complete utter nonsense.  I drive this point home in my Slashdot post.<br /><br />But then again, I have always had this attitude about any software that I release to the public (with or without source code): <strong>my software == my bugs == my fault == my responsibility to fix</strong>.  For example there are a couple bugs in TRaCER that nobody noticed (including me) for several years (until I had long since lost the source and thought nobody used the program any more), and still to this day I feel absolutely AWFUL that I can't fix the bugs because of that.  Had the source been available publicly, does that mean the issue would get fixed?  No it doesn't -- what makes me think someone would go and find a version of Turbo Pascal just to recompile the code I released, then provide an updated binary?  For example, I don't tend to work on Windows software very often because I can't stand having to install Visual Studio and SDKs and basically crap all over my own workstation just to build a program (if I have to (and I have), I do it inside of a dedicated VM).  Likewise, had I released the source code to the FF2e intro for Neo Demiforce, would that have automatically gotten the couple bugs fixed?  No, and for the exact same reason.  So open-source does not inherently mean better, but then again neither does closed-source.<br /><br />I've always felt that leveraging the pros of both open and closed models is the way to go, but it rarely happens, and that's a bummer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Jan 16, 2015 5:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">2) Some of those software are absolutely <em>gigantic </em>in size, much larger as anything you'd write for a hobby. For example the latest version of gcc is 6.4 million of lines of code (according to cloc). Personally I wrote several application that are arround 3-5k lines of codes, and they were huge investments from me, by that I mean I spend <strong>whole weeks of vacation into them</strong> in addition to a few weekends and evenings. People developing gcc did 3 orders of magnitude more work than my huge investment (this is not the only measure I know, but it gives an order of idea), and there is only about 50 major developers, which means they all did roughly 100 times the investment I made, which is simply unimaginable.</div><br />It's also worth noting that if I recall correctly GCC was the first program ever made in the GNU project (Emacs doesn't count since it was started before GNU was a thing). We're talking about <em>three decades</em>.<br /><br />And yeah, many of the major projects actually have paid developers from companies that happen to use said software (for those companies paying those developers is essentially a maintenance expense, although some use it to have a testbed for their new stuff too, e.g. implementing support for new hardware). A lot of contributions also come from people who aren't actively involved and just happened to send a patch for a particular problem they had.<br /><br />As for everything else? Well, why do you think most projects are unmaintained and/or broken as hell? =P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 16, 2015 8:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">As for everything else? Well, why do you think most projects are unmaintained and/or broken as hell? =P</div><br />I forget where I read that at least half of all commercial software projects die before they're even released, but I believe it based on my own experience.<br /><br />Hobby projects are easier to start than commercial projects, and more likely to fail. With no money to sustain it, nobody working full time, and often only amateur labour, there's a lot bigger chance that it will be abandoned. The ones that do well often become popular and well maintained, otherwise it may be doomed to become another software corpse buried in the graveyard of github.<br /><br />When a commercial project fails you usually don't even hear about it. It has to be a public success first for you to know about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 16, 2015 8:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Yes, open source development is abysmal on closed platforms.</div><br />The problem comes when most of the user base for a particular kind of application uses closed platforms. Is there a well-known platform that ships with a gamepad and <em>isn't</em> closed?<br /><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">In Haskell, functions are just like anything else and can be passed around like other data, and are also pure functions.</div><br />If function A passes function B as an argument to function C, so that C can call B on A's behalf, then B and C would appear under A in the call graph because A is choosing which functions get called. It's a matter of which functions know about other functions.<br /><br />In an object-oriented program, if an instance of Foo holds an instance of Bar (&quot;composition&quot;) and Foo::A() calls its Bar::B() method, then Bar::B() would appear under Foo::A(). Polymorphism complicates this, but there are probably analogous mapping methods for OO.<br /><br />Finally, <a href="http://slashdot.org/story/08/02/26/1859249/tetris-creator-claims-foss-destroys-the-market" class="postlink">at least one well-known programmer thinks free software ought not to exist because it destroys the market</a>.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>