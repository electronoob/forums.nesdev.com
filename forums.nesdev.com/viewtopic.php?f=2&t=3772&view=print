<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sprite mappings</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sprite mappings</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3772">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3772</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Dec 13, 2007 12:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sprite mappings</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was just wondering how games usually handle this...
<br />
<br />Most objects in a game are composed by multiple sprites, we all know that. They probably store the information about how to compose each object in tables. What I'm thinking about is how would games efficiently convert that data into OAM values, specially when only part of the object is visible.
<br />
<br />Calculating the position of each individual sprite based on the actual position of the object and verifying if the result is inside the screen seems like a lot of trouble, specially if nearly all 64 sprites are used.
<br />
<br />And there are other things to take into consideration, such as sprite flipping. The mappings for each object would have to be scanned in a different order depending on the side it's facing.
<br />
<br />Handling all of that could take a lot of the processing time. Does anyone have anything to say about this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Dec 13, 2007 7:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite mappings</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Calculating the position of each individual sprite based on the actual position of the object and verifying if the result is inside the screen seems like a lot of trouble, specially if nearly all 64 sprites are used.</div><br />Super Mario 3 slowed down once half of that many sprites were in use.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And there are other things to take into consideration, such as sprite flipping. The mappings for each object would have to be scanned in a different order depending on the side it's facing.<br /><br />Handling all of that could take a lot of the processing time.</div>
<br />How many metasprites do you plan to have in a shot at once?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Dec 13, 2007 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite mappings</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Super Mario 3 slowed down once half of that many sprites were in use.</div><br />That is the problem... I used to think that games slowed down when many enemies were present because of the AI of each one... but since enemy AI is usually very simple, I'm starting to think that drawing their sprites is what takes most of the time...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How many metasprites do you plan to have in a shot at once?</div>
<br />I don't really know yet, but I expect to have a lot going on at once.
<br />
<br />I have already coded a routine that will render sprite mappings while doing all the necessary stuff, like flipping and making sure only sprites that are inside the screen are rendered, but I haven't tested it's speed yet.
<br />
<br />I'm finishing my scrolling engine now, as soon as it's ready I'll pay some attention to the sprites. I was just trying to think a little ahead. I guess there is no shortcut for this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Dec 13, 2007 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This isn't a hard task, but you'll most probably never made a super-ultra fast sprite mazing routine either.
<br />
<br />What I use is basically indexed table for each enemy, position and direction (tri-dimentional tables !) in order to get each individual sprite set with it's own relative position, palette/flipping, and so on. I incorporated the feature to have a set of "hardware" sprite on a row with consecutive tile index to be on one single "software" sprite, allowing 16x8, 24x8 and 32x8 "software" sprites in order to slightly reduce ROM amount.
<br />
<br />The sprite mazing routine tests screen overflow manually for each sprite. The only other alternative is to make a whole object dissapear at once, this should be harder to do but maybe less time consumming.
<br />
<br />Eventually I think sprites eat more ROM thant process time. You can also put the limitation that all sprites in a single object are mazed in a 8x8 gird, so that you only have a couple of bits for the position of the sprite (intead of a full byte for both horizontal and vertical position), but you may waste this ROM space back on the CHR ROM / RAM data. Also forcing each object to be single-paletted would reduce this, but also reduce graphics quality.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Dec 13, 2007 9:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you make every object dissapear at once, it'll actually be a lot easier. That way, you'll only have to check if the whole sprite is on screen. If it is, then render it. If not, don't render it.
<br />
<br />This'll actually give me a lot to think about for my game. I haven't thought about sprites being halfway on screen yet.
<br />
<br />EDIT:
<br />You can check whether or not the object is on screen. If it is, just use 16 bits to calculate the X/Y Coords of each sprite. If the High byte comes out not equal to $00, you'll know it's off screen. For example, if the enemy's right edge is 20 pixels off the right edge of the screen, you'll come out with a value of $114 for the X coord, with $01 as the high byte, and $14 as the low. If the high byte is not $00, it's off the screen.
<br />
<br />And also, you can use bounding boxes to determine if the enemy is on screen. If the enemy collides with the edge of the screen, you'll know it should be displayed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Dec 14, 2007 6:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What you describe disalows mismatches between enemy/object graphics width/height and it's collision window width/height. I usually give my enemies a smaller collision window that what they actually are large, to give the player some margin (and because not all the area of tiles is used).
<br />However, a per-object drawing condition can be the best for a game with fixed-size objects, such as a RPG.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Dec 14, 2007 10:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">What you describe disalows mismatches between enemy/object graphics width/height and it's collision window width/height.</div>
<br />
<br />I don't really see what you mean. Could you clarify a little?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Dec 14, 2007 11:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, you'd want to have an enemy to be wider and taller on the screen than on the "internal" calculation used to detects hits with BG or other sprites. The techinque you describe use hits to do screen mazing stuff, and personally I like to have both of these be completely separate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Dec 14, 2007 12:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Celius, my routine works (does it? I haven't tested!) exactly like you described! It first calculates where the central point of the object is, relative to the camera (object coordinates minus camera coordinates). Some tweaking is done to the resulting coordinates if the sprite is flipped. Then it scans through the sprite definitions, which have the following format:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.sprite count;<br />&nbsp; &nbsp;.relative X coordinate;<br />&nbsp; &nbsp;.relative Y coordinate;<br />&nbsp; &nbsp;.tile index;<br />&nbsp; &nbsp;.sprite attributes;<br />&nbsp; &nbsp;&#40;repeat &quot;sprite count&quot; times&#41;</div>
<br />
<br />I chose this format for the sprite definitions instead of more compact ones because of this freedom this gives me. Each sprite can use a different palette, they can be asily layered and don't have to be arranged as a grid.
<br />
<br />Anyway, the relative coordinates are inverted if the sprite is flipped in that direction, and are then added to the screen coordinates of the object. If the high byte is 0, it is output. The attributes byte is in the regular format that the PPU uses, but this routine receives a mask that is XOR'ed with the attribute byte of each sprite, so that the tiles can be flipped, the piority and palette can be changed, etc. When the flipping bits are set in this mask, this means that the whole sprite is flipped, and the coordinates are to be inverted before the addition.
<br />
<br />In theory, it works great, and I can't see a reason for it not to. I'll check soon how well it performs and I'll let everyone know. I'm not sure if I'll perform the bounding box check before rendering them, because the routisne will handle objects that are out of the screen just fine, although it will waste time going through the definitions without ever outputting a sprite. If not many objects are active, this is a good solution, otherwise, the bounding box check may greatly reduce the calls to the sprite drawing routine.
<br />
<br />And I believe that what Bregalad said is that each object will then need 2 different bounding boxes, because the one used for collisions between objects is usually smaller than the graphics of the object, to compensate for the fact that it is a box, while most objects are not rectangle.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Dec 14, 2007 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I suppose you're right about that, but whatever the case, you should just do a check somehow to see if it's on screen. It'll greatly reduce the time of calculations.
<br />
<br />So do most games refresh the page in RAM used for DMA completely every update? This would be much more reliable than editing the data that's already there, but it may take a while.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Dec 14, 2007 1:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, on my current game engine, all active objects are on the screen because it only loads a screen at a time, and scolls whole screens, so this avoid this problem. The only way a sprite can be off screen for an object is if the object is close to the border of the screen. The "collision" box of the object can never go across the screen (my routines refuse moving the object if it tries to do so), but that doesn't dissalow actual sprites to overflow the screen, because you'd want the sprite take more place than it's own bounding box. If you don't the game will be hard as the player will (frustatingly) get hurt unfairly just by getting close of an object.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Dec 14, 2007 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, you have SO much less to worry about then someone making a game that's constantly scrolling (Such as Sonic or Castlevania). My game, which is almost exactly like Castlevania SOTN, has many objects that are off screen. In most rooms in my game, there'll be about 8 to 12 enemies. Only 4 of them can be on screen at once, but the rest are doing stuff off screen. I pretty much have to check whether or not an object is on screen in order to calculate its sprite positions, because if I were to check where every object's sprites are in relation to the screen, I would be calculating the positions of around 96 sprites, while only 64 can actually be on screen. I'd rather not waste that much time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Dec 14, 2007 4:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Getting definitions out of the way early helps resolve <a href="http://c2.com/cgi/wiki?LaynesLaw" class="postlink">Layne's Law</a> issues before they become problems:
<br /><ul><li>Actor: A game object. </li><li>Cel: An image used to represent the position and state of an actor. </li><li>Sprite: An entry in the display list used to draw cels. </li></ul>
<br />Each cel has two different bounding boxes: the cel border and the hit box.
<br />
<br /><img src="http://pics.pineight.com/nes/hitboxexpl01.png" alt="Image" />
<br />Figure 1: A cel, 24 pixels by 16 pixels, with three colors plus transparency. The "cel border" encloses the entire cel.
<br />
<br /><img src="http://pics.pineight.com/nes/hitboxexpl02.png" alt="Image" />
<br />Figure 2: Six 8x8 pixel hardware sprites make up this sprite cel. (Enemy sprite cels in <em>Super Mario Bros.</em> are the same size.)
<br />
<br /><img src="http://pics.pineight.com/nes/hitboxexpl03.png" alt="Image" />
<br />Figure 3: The "hit box" is the rectangle that encloses most of the non-transparent area of the sprite cel, used for collisions against other objects (not against the screen).
<br />
<br />To determine whether an actor shall be rendered, you compare the cel border to the view border. Reject all cels that do not overlap the view in some way. Then for each sprite in the cel, you compare this sprite to the view border and write it to the shadow-OAM if it is inside. Hit boxes are ignored here.
<br />
<br />So the case described by Celius would involve 44 tests against the view: 12 for entire cels, and 8 for each of the four actors that can be partially on the screen at once. Depending on how fast the view and actors are moving relative to each other, some of the tests might be skipped from one frame to the next, causing probably-not-noticeable artifacts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Dec 14, 2007 5:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, Bregalad's case sure is simpler than games with scrolling, because you know for sure that all active objects are being displayed, entirely even. So you don't have to clip them or sort them.
<br />
<br />I'm still not sure that performing preliminary bounding box checks before rendering sprites is the best choice... In my game, I have RAM for 32 active objects, so I'd call the sprite drawing routine at most 32 times. But I'll hardly have that many active objects (the object RAM is recycled as the camera moves, with objects constantly being loaded and unloaded), and even if I do, not many of them will be represented with sprites.
<br />
<br />If I ever approach this limit of 32 objects, I expect it to be because of rows and columns of rings, which appear very often in Sonic games, but these are drawn with the background. A separate individual ring object that is rendered with sprites is avaliable for places where the background rings can't be used,but I don't expect to have many of these.
<br />
<br />When you look at Sonic games, you see that not that many objects are active at a time (excluding rings), even though they have 96 RAM slots for objects (maybe the only reason for this is the crazy amount of rings that bounce around when Sonic looses them). And since my game is for the NES, many things that were rendered as sprites in the original games (such as rings, lamp posts, spikes and monitors) will be rendered to the background most of the time. Sprites will only be use in parts where the background can't be used.
<br />
<br />In fact, just to make something clear, the fact that many objects can be rendered to the background as well as with sprites is the reason I like 8x16 sprites so much, because I can reuse the tiles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Dec 14, 2007 5:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">So the case described by Celius would involve 44 tests against the view: 12 for entire cels, and 8 for each of the four actors that can be partially on the screen at once.</div>
<br />
<br />Where does the number 8 come from?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>