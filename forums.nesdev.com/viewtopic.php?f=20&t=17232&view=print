<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 16 byte per line hblank copy routine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">16 byte per line hblank copy routine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=17232">http://forums.nesdev.com/viewtopic.php?f=20&amp;t=17232</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Thu Apr 05, 2018 2:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>16 byte per line hblank copy routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This was intended to be a reply to <a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=17212" class="postlink">tepples' thread about OAM allocation</a> but I figured it would make a good thread on its own.<br /><br />For inspiration, I've written a stack copy routine which can copy 16 consecutive bytes to VRAM in one HBlank+trailing mode 2, if the line is free of sprites. When there are only a &quot;few&quot; sprites on the line, it's still able to safely copy 14 bytes. If there are &quot;many&quot; sprites, the timings are even stricter. In my particular case, I made it copy only 14 bytes, and implemented logic to skip lines with &quot;many&quot; sprites in, which in my case was easier than varying the number of bytes being copies. In my case I used it in my Flappy Bird clone to produce a parallax scrolling background for the scenery behind the pipes.<br /><br />The setup is as follows:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ld&nbsp; &nbsp;A,$08&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; HBlank as LCD interrupt source<br />&nbsp; &nbsp;ldh&nbsp; &nbsp;&#91;STAT&#93;,A<br /><br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,2&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; LCD interrupt<br />&nbsp; &nbsp;ldh&nbsp; &nbsp;&#91;IE&#93;,A<br /></div>Nothing too weird there. The code is using the HALT opcode to synchronize the copy, so IME is assumed to be 0 through-out. (Ie: interrupt execution is disabled using DI.)<br /><br />Here's a slightly redacted version of the routine with some game specific logic removed:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Copy 16 bytes in one HBlank (mode 0+mode 2)<br />STACKCOPY_LCD::<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;RAMCODE-RAMCODE_S+ldspopcode16+1&#93;,SP&nbsp; &nbsp;; Save SP at the load SP opcode at the end.<br />&nbsp; &nbsp;ld&nbsp; &nbsp;SP,HL&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Load source address from HL into SP.<br />&nbsp; &nbsp;ld&nbsp; &nbsp;H,D&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; \ Load destination address into HL.<br />&nbsp; &nbsp;ld&nbsp; &nbsp;L,E&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; /<br />.fastcopyloop<br />&nbsp; &nbsp;; 0<br />&nbsp; &nbsp;pop&nbsp; &nbsp;DE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Prefetch.<br />&nbsp; &nbsp;xor&nbsp; &nbsp;A&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; \ Clear pending registers.<br />&nbsp; &nbsp;ldh&nbsp; &nbsp;&#91;IFLAG&#93;,A&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; /<br /><br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,E&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Prefetch.<br /><br />&nbsp; &nbsp;halt&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Wait for HBlank to happen.<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,D<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br /><br />&nbsp; &nbsp;<br />rept&nbsp; &nbsp;6<br />&nbsp; &nbsp;pop&nbsp; &nbsp;DE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Main unrolled loop body. <br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,E<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,D<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br />endr<br /><br />&nbsp; &nbsp;; 7<br />&nbsp; &nbsp;pop&nbsp; &nbsp;DE<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,E<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL&#93;,D&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Save some time on the last byte for good measure.<br />&nbsp; &nbsp;inc&nbsp; &nbsp;HL<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldh&nbsp; &nbsp;A,&#91;skipline&#93;<br /><br />&nbsp; &nbsp;ld&nbsp; &nbsp;E,A<br /><br />&nbsp; &nbsp;ldh&nbsp; &nbsp;A,&#91;LY&#93;<br />&nbsp; &nbsp;cp&nbsp; &nbsp;E<br />&nbsp; &nbsp;jr&nbsp; &nbsp;z,.skiplines<br />&nbsp; &nbsp;<br />.afterskiplines<br />&nbsp; &nbsp;ldh&nbsp; &nbsp;A,&#91;linesctr&#93;<br />&nbsp; &nbsp;dec&nbsp; &nbsp;A<br />&nbsp; &nbsp;ldh&nbsp; &nbsp;&#91;linesctr&#93;,A<br />&nbsp; &nbsp;jr&nbsp; &nbsp;nz,.fastcopyloop<br /><br />&nbsp; &nbsp;ld&nbsp; &nbsp;E,L<br />&nbsp; &nbsp;ld&nbsp; &nbsp;D,H<br />&nbsp; &nbsp;ld&nbsp; &nbsp;HL,&#91;SP+0&#93;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Restore source pointer for later use.<br /><br />&nbsp; &nbsp;jp&nbsp; &nbsp;RAMCODE-RAMCODE_S+ldspopcode16<br /></div>Explanation:<br /><br />First, SP is saved so it can be restored later. This code may need some explanation. I have copied code to RAM and I'm using a bit of pointer arithmetic to point to argument part of an LD SP, $xxxx opcode. This is done so that when done, the code can jump to the restoration routine which would execute ld SP, $xxxx; ret.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; The RAM code source. Somewhere in ROM...<br />RAMCODE_S::<br />&nbsp; &nbsp;; Maybe some other code here...<br />ldspopcode16::<br />&nbsp; &nbsp;ld&nbsp; &nbsp;SP,0000&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; This is overwritten at the start of the code.<br />&nbsp; &nbsp;ret<br />RAMCODE_S_End::<br /><br />; The RAM code destination. Somewhere in RAM...<br />SECTION &quot;RAMCODE&quot;,BSS<br />RAMCODE::<br />&nbsp; &nbsp;ds&nbsp; &nbsp;RAMCODE_S_End-RAMCODE_S&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Buffer for the RAM code.<br /></div><br /><br />Next SP and HL are prepared from the input parameters. <br /><br />The main routine consists of an unrolled loop of 8 copies of the following code, which copies two bytes:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;pop&nbsp; &nbsp;DE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Main unrolled loop body. <br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,E<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,D<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A</div>However, the first and last iterations are slightly different so only 6 of the iterations look exactly like that.<br /><br />The first iteration prepares as much data as possible before the accessible period starts to prevent wasting precious cycles. It clears IF and runs HALT in order to synchronize to HBlank. When the CPU wakes up, it writes the first byte.<br /><br />The last iteration also has a small difference. It writes D to [HL] instead of going through A, which would consume one extra instruction cycle. (Ie 4 machine cycles.) It means HL will have to be incremented afterwards, but this is ok since the incrementation is not timing sensitive, unlike the write.<br /><br />After that, it checks whether we need to skip any lines because they have too many sprites. This logic is omitted from this example. Then it counts down linesctr and returns when all requested ata has been copied. Lastly it restores the HL and DE to the source and target address as they would be after the copy is done.<br /><br />The example code copies 16 bytes per HBlank which requires that no sprites are shown on any line where the routine is executed. You could change rept 6 to a lower value if needed because sprites were used. In my Flappy Bird clone I use rept 5 which copies 14 bytes, as mentioned.<br /><br />As per tepples' requirements, the routine could be adapted for use with 1 bpp tiles or OAM at a lower data rate. <br /><br />Here's the clock calculation for the routine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;halt&nbsp; &nbsp;; (including nop repeated due to double execution glitch.)<br />&nbsp; &nbsp;; = 8 cycles<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,D&nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;; = 20 cycles<br /><br />&nbsp; &nbsp;pop&nbsp; DE&nbsp; &nbsp; &nbsp; &nbsp;; 12<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,E&nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,D&nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;; = 36 cycles (*6)<br /><br />&nbsp; &nbsp;; Last<br />&nbsp; &nbsp;pop&nbsp; DE&nbsp; &nbsp; &nbsp; &nbsp;; 12<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,E&nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL&#93;,D&nbsp; &nbsp;;&nbsp; 8<br />&nbsp; &nbsp;; = 32 cycles<br /></div><br />This gives a total of 268 cycles, 16 cycles less than the 284 cycles a HBlank+mode 2 would last without sprites. 4-8 of those cycles are used by the nop that's needed after the halt, I'm pretty sure. So this code can copy one tile per line.<br /><br />For the case of OAM, we should go by the most pessimistic value of HBlank, 201 cycles. 201-32-36-8=141 cycles left for the inner loop part. 141/36=3 (remainder 32) so this routine could run 5 cycles, and thus copy 10 bytes, or 2.5 whole entries into OAM.<br /><br />For the case of 1 BPP graphics, the routine would look a bit different. Here we make a few assumptions:<br /><ul><li>The palette is set such that you only need to update one of the bytes per pixel row.</li><li>Additionally that this byte is the odd address. What this does is that we can safely use inc L to increment the destination address because the inc L instruction will only ever be used to increment an even value, which cannot possibly cross carry over to the high byte. Such addresses are instead handled by the ld [HL+],A instruction, which does a full 16 bit increment internally.</li></ul><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;halt&nbsp; &nbsp;; (including nop repeated due to double execution glitch.)<br />&nbsp; &nbsp;; = 8 cycles<br /><br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;inc&nbsp; L&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,D&nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;inc&nbsp; L&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;; = 28 cycles<br /><br />&nbsp; &nbsp;pop&nbsp; DE&nbsp; &nbsp; &nbsp; &nbsp;; 12<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,E&nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;inc&nbsp; L&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,D&nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;inc&nbsp; L&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;; = 44 cycles<br /><br />&nbsp; &nbsp;; Last<br />&nbsp; &nbsp;pop&nbsp; DE&nbsp; &nbsp; &nbsp; &nbsp;; 12<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,E&nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A&nbsp; ;&nbsp; 8<br />&nbsp; &nbsp;inc&nbsp; L&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; 4<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL&#93;,D&nbsp; &nbsp;;&nbsp; 8<br />&nbsp; &nbsp;; = 36 cycles<br />&nbsp; &nbsp;inc&nbsp; L&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; 4 (outside the cycle count)<br /></div><br />Doing the cycle calculation for 284 available cycles we get: 284-28-36-8=212 left for inner part. 212/44=4 (remainder 36 cycles). So this code could run 6 iterations, and copy 12 bytes, which corresponds to 1.5 tiles since tiles are 8 bytes big in 1 bpp format.<br /><br />All these figures could be nudged ever so slightly upward, maybe 1 extra byte per loop cycle, with more controlled timings. But at that point you get diminishing returns.<br /><br />So in summary:<br />VRAM (full copy): 1 tile/line<br />VRAM (1bpp expand): 1.5 tiles/line<br />OAM: 2.5 entries/line

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Fri Apr 06, 2018 12:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16 byte per line hblank copy routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the prefetch why not pop into BC as well, then on the first hit you can <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">halt&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Wait for HBlank to happen.<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,D<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,B<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A<br />&nbsp; &nbsp;ld&nbsp; &nbsp;A,C<br />&nbsp; &nbsp;ld&nbsp; &nbsp;&#91;HL+&#93;,A</div><br />to get a few more for less clocks ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Fri Apr 06, 2018 2:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16 byte per line hblank copy routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good idea. That might tip the balance up to integer counts for the OAM and VRAM cases, so 2 tiles or 3 entries. Although I'd have to confirm this on hardware to be sure. If nothing else, it would make the routine more likely to work despite the presence of sprites.<br /><br />The extra write is 24 clocks long for the OAM case which should fit into the 32 clock remainder.<br /><br />For the 1 bpp case, add 8 cycles for the incs, so 32 clocks which should fit into the 36 clock remainder although that's from a 284 click base case, ie no overlapping sprites.<br /><br />For the general case, the 16 remaining cycles would not be sufficient. However, the reduction may make 16 bytes viable regardless of the presence of sprites, now with 24 clocks to spare from the 284 base case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Apr 06, 2018 10:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16 byte per line hblank copy routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Let me get this straight: If hblank is the only source enabled in STAT, and STAT is the only source enabled in IE, and IME is off, then HALT waits for the next hblank like STA WSYNC on Atari 2600, correct? If so, you'd save old STAT and IE before a transfer begins, run the transfer, and restore STAT and IE, right? Because the application I was considering when I mentioned hblank tile copying in the other topic has to watch out for lines just above LYC in order not to get tripped up by the LYC STAT IRQ that changes which VRAM bank is used for tiles $00-$7F.<br /><br />How many cycles or T-states does each sprite take away from hblank?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Apr 06, 2018 10:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16 byte per line hblank copy routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Varies, unfortunately, depending on the specfic three LSBits of the sprite X, window X position, and background X scroll. See <a href="https://media.ccc.de/v/33c3-8029-the_ultimate_game_boy_talk" class="postlink">33c3's The Ultimate Game Boy Talk</a>, starting somewhere around 40 minutes in.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>