<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - l33t debugging.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">l33t debugging.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3893">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3893</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Mon Feb 11, 2008 6:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>l33t debugging.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know most of us are getting sick of FCE Ultra, but Parasyte has just recently released his own personal version of FCE Ultra with <a href="http://www.romhacking.net/forum/index.php/topic,5702.0.html" class="postlink">the sexiest NES/Fami debugger ever</a>.
<br />
<br /><img src="http://parasyte.kodewerx.net/projects/fceuxd/dis-xref3.png" alt="Image" />
<br />
<br />Give <strong>Parasyte</strong> some love.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>atari2600a</b> [ Mon Feb 11, 2008 7:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />parasyte:  I love you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CKY-2K/Clay Man</b> [ Mon Feb 11, 2008 9:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><img src="http://www.abovethelaw.com/images/entries/animated%20siren%20gif%20animated%20siren%20gif%20animated%20siren%20gif%20drudge%20report.GIF" alt="Image" />
<br />
<br /><!-- m --><a class="postlink" href="http://parasyte.kodewerx.net/projects/fceuxd/fceuxd_unreleased_bin.zip">http://parasyte.kodewerx.net/projects/f ... ed_bin.zip</a><!-- m --> DOESN'T WORK

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Feb 11, 2008 10:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Except for the arrows I don't see any difference. NO$NES' is much better since you can actually assemble to memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Feb 11, 2008 10:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And do any debuggers implement a "step backwards" command yet? That'd be extremely useful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Parasyte</b> [ Mon Feb 11, 2008 11:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi there.
<br />
<br />kyuusaku: FCEUXD has always been able to assemble directly into memory. This build does not, because I removed the unintuitive sidebar which provides that functionality.
<br />
<br />blargg: Not that I am aware of. But it's something I have been pondering lately, myself. I was recently inspired by a quote on SourceForge, "What if your debugger could go back in time?"
<br />
<br />To anyone else: Sorry about the hosting problems. My host sucks. When it works, it will work. Also, sorry that I won't maintain that debugger or fix the bugs; it's already two-and-a-half years old, any way. I have a new project going that will make up for it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Tue Feb 12, 2008 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've always wanted the stepping back feature, but it would mean that you'd have to cache at least 5 steps or so per step -- so you could go back.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Feb 12, 2008 9:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I've always wanted the stepping back feature, but it would mean that you'd have to cache at least 5 steps or so per step -- so you could go back.</div>
<br />Eh? When debugger has emulator stopped, some number of clocks have run since the last save state. To step backwards, simply restore from last save state, then stop CPU just before it's reached the current time. For faster step backwards, make save states more often. With this kind of implementation, you can step backwards as far as you want, from wherever you stopped emulation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hap</b> [ Tue Feb 12, 2008 9:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />or by adding a <a href="http://nesdev.com/bbs/viewtopic.php?t=331&amp;start=0&amp;postdays=0&amp;postorder=asc" class="postlink">rewind feature</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Tue Feb 12, 2008 10:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've used save states before.  I'm gonna side with hap on this one.  Either way it's already possible.
<br />
<br />The methods are out there... but it's an issue of laziness.
<br />
<br />Are the debuggers too lazy to use save states or are the coders too lazy to implement new methods?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 12, 2008 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's both: the users of a debugger are too lazy to make save states, and the coders of a debugger are too lazy to provide tools to work with save states at a cycle level. A little work on both parts would result in the illusion of reversible computing. Here, I describe a possible user interface:
<br />
<br />Ideally, pausing for debug should make an automatic save state, or pull one from the emulator's rewind buffer. Then the emulator would have buttons for back/forward 80 scanlines, back/forward 8 scanlines, back/forward 1 scanline, and back/forward 1 CPU instruction. Going back would subtract that many cycles from the current value of cycles since last save state, and then run the CPU and PPU for that many cycles. Then the user would step forward by however many lines to get into a subroutine, and then back and forward an instruction at a time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Feb 12, 2008 12:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It could even have something like "rewind to JSR that called this routine", with detection of the case where the top two bytes on the stack aren't a return address (it'd detect this by backing up several frames, setting a breakpoint, and finding that the PC never hits that point). Probably another reason these kinds of things aren't implemented is that many programmers haven't embraced <a href="http://en.wikipedia.org/wiki/Module_%28programming%29" class="postlink">modularity</a> to much of a degree, making the task very complex. With proper modularity, you might have the emulator, with the ability to run for a frame, run until a certain time, save and restore state, and set a breakpoint. Then the debugger implements single stepping on top of that, then the advanced functions are implemented on top of the debugger interface. <em>None</em> of these modules mucks around with another's internal data; it all goes through well-defined function calls.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Parasyte</b> [ Tue Feb 12, 2008 7:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, modularity! That's my cue.
<br />
<br />How does one solve the problems with current debuggers? First, by identifying those problems. Next by addressing them. Finally, in implementation.
<br />
<br />So what are the problems with debuggers integrated in today's emulators? Well, for one thing, they are <em>integrated</em>. This can cause portability problems, in many cases (I am ashamed to admit my guilt in perpetuating this problem, by writing debuggers that vendor lock users to the Windows operating system). It can also cause undue stress for debugger developers. We are a lazy species, and we do not like rewriting the same debugger multiple times, attempting to port our work to a newer, better emulator, or porting it to a completely new emulated architecture. And then there is the problem of features, or lack thereof. Some hackers and homebrewers need specialized features in their debuggers.
<br />
<br />Modularity is one possible solution to these problems. The first thing to do is segregate the low-level debug primitives (functions and whatnot) from the user interface; make the interface modular, interchangeable with any interface. Then you define how the debug primitives interact with the interface via a communications link; make the communications link modular, able to establish communication using any number of interchangeable modules for TCP/IP sockets, operating system pipes, RS232, USB, etc. Next, you define the protocol; make the protocol modular, a 'universal language' that describes generic debug primitives, and allow it to be extensible as necessary. Finally, you define those debug primitives and provide a base implementation that can be expanded if required. However, a well-defined set of primitives is unlikely to need expansion for anything but the most exotic architecture configurations.
<br />
<br />What does all of this mean? Where does it leave us, the debugger developers? And where does it place the users, the hackers, and the homebrew developers?
<br />
<br />It means that the debugger developers can implement an accepted standard (<em>accepted</em> being the keyword) for debugger support within not only emulators, but any kind of virtual machine or interpreted byte code in any kind of program. It could be a simple set of debug primitives (in a static or linked library, for example) added by an emulator author (or emulator extender) that connects to a debugger interface of the user's choice. The interface might be highly specialized for a particular architecture, or it might be very complex and advanced with universal support for many architectures. This would put a large number of options into the hands of users.
<br />
<br />Now let me try to get a more solid description of this idea out there. The number one underlying technology to be assessed to make any of this work is simply the protocol. That means, a formal description of how a target (an emulator, or other program wishing to use debugger functionality) talks to an interface (a separate program designed to give the user direct access to the debug primitives and link them together in ways that provide many very advanced features ... such as stepping backwards in architecture-time). This would probably be a command reference which supplies things like:
<br />
<br />1) A description of the architecture (the emulated system, like NES). This description would include the number of CPUs available, the type of the CPUs, endianness, memory maps as accessible by the CPU, memory maps not accessible to the CPU, etc. Basically a complete virtual model of the architecture.
<br />2) Debug primitives: breakpoints and stepping functionality; read/write access to the memory maps, cpu registers and statuses, and access to internal hardware registers; interrupt and exception handling; scripted macros with callback functions; essentially all of the basic functions which the interface can use to procedurally create high-level features.
<br />3) Extensibility; able to provide expansions to architecture descriptions, debug primitives, and other specialty features.
<br />
<br />With such a protocol in place, the interface can do the rest of the high-level work; disassembling, video memory viewing and modification, hex editing, cheat searching and management, etc.
<br />
<br />I'm hoping this has been verbose enough that you all understand where I am coming from, but not too verbose that I've created confusion or completely went the wrong direction in the discussion.
<br />
<br />Bottom line is, I think we only need to agree on one thing: the protocol. If you refuse to believe that, and only want to do your own thing with your own emulator, that's quite alright. But if you want to reap the benefits of interchangeable debugger interfaces [pick your favorite, or just choose the right one for the job at hand] that are platform-independent [can run on any host operating system, even a completely different machine from the target emulator; not at all bound to the target emulator] and potentially architecture-independent [capable of debugging NES, Genesis, PS2, Wii, Java, brainf**k, the custom scripting language in your new game, you name it!] then I say let's work some crazy Voodoo and invent ourselves a standard for modern debugging!
<br />
<br />
<br />P.S. I think this "new project" might make up for the shortcomings in FCE&lt;insert arbitrary acronym here&gt;, wouldn't you?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Feb 12, 2008 8:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually, I suggested modularity simply to reduce complexity to a manageable level, and nothing as grand as you describe (which tends to increase complexity). I'm talking really simple stuff, where one examines their architecture and reduces it to a minimum of functions, and no public (global) data. And I am saying that without modularity, complexity is simply too great to implement these features well and bug-free. Re-use is a possible side benefit, and it only comes when different emulators have the same module interfaces, something that can be difficult if the emulator designs differ greatly. I don't think changes should be too drastic; they should be small steps that each do something useful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Tue Feb 12, 2008 10:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I hate to play '<em>Mom</em>' here, but it's cool seeing you kids playing in this thread, but for 'searchability' and contextual relevance, we might wanna continue this thread over where <strong>hap</strong> pointed out.  <a href="http://nesdev.com/bbs/viewtopic.php?t=331&amp;start=0&amp;postdays=0&amp;postorder=asc" class="postlink">This topic about the 'rewind feature'</a> seems to be the best area to discuss the subject.
<br />
<br />I'd really like to see the feature worked on, but we should try to keep our notes organized, concise, and easy to find.
<br />
<br />Not that I'm a moderator of any sort, but it would be nice to have things in their own place.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>