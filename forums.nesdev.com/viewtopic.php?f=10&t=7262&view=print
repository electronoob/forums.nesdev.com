<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Start Menu</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Start Menu</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7262">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7262</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Sun Dec 12, 2010 12:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Start Menu</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How do you typically place your start menu in your code? My start menu is just your typical 'Press Start' so I figured I would just put a small loop at the beginning that ends when the user presses start and from then on, the real code is done unless of course the game ends in which case it all just jumps back to that loop.
<br />
<br />What are the negatives to this approach?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Dec 12, 2010 12:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Start Menu</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">67726e wrote:</div><div class="quotecontent">What are the negatives to this approach?</div>
<br />The downside is that this is not easily expandable. Most games have more screens/states than just a title screen and the main game, and not all of them are as simple as "press a button". Some screens are almost as complex as an actual game, requiring music, VBlank updates and such. It would be a good idea to implement a better "module" system, that allows you to navigate through screens without limitations.
<br />
<br />In my games, each module (which is a separate ASM file) has an initialization area followed by a loop. To move from one module to the next I just jump to the initialization of the next module when required (in the case of a title screen that would be when "start" is pressed), but I also have time to some cleaning (e.g. fading out) before terminating the current module. I can also have sub-modules, which run inside a parent module (something like a menu that you can call during the game), in which case I JSR to it so I can return when it's done.
<br />
<br />Since I want to be able to run crucial updates in case of lag frames, I want the possibility of running specialized NMIs for each module, but not all modules are CPU hogs, so these can get by with the traditional "wait for VBlank" technique. To accommodate both situations, my NMI routine can either call a specialized NMI routine if one is defined, or just signal that an NMI has happened, and each module is free to use the method that best suits it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Dec 12, 2010 1:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just from thinking of this, have a screen uploaded to the PPU and then have a "select option" program running. I qould guess that a list of two-byte values for X-Y of the sprite that points to what your selecting would work, and then just loop through them from what the input is until it wraps around two the beginning again. You could even have it in a subroutine that returns a value in the A register to ave even more compact code, so the menus are from the subroutine, but the values returned get computed in the main games program. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />
<br />Just an idea. I have never done this though. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Sun Dec 12, 2010 6:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Start Menu</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">67726e wrote:</div><div class="quotecontent">What are the negatives to this approach?</div><br />In my games, each module (which is a separate ASM file) has an initialization area followed by a loop.</div>
<br />
<br />That is actually what I was talking about doing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Dec 12, 2010 10:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In some of my programs I supplied an NMI routine, in addition to the init routine and loop.  You could change how your NMI routine operates, but instead I just point the vector to 3 bytes of RAM, putting $4C (JMP absolute) followed by the address, so it can be redirected easily.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Sun Dec 12, 2010 11:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I use a system similar to Tokumaru's.   The different sections of my game (title screen, gameplay, gameover, pause, etc) are divided into "gamestates".  Each gamestate lives in its own file and has an init routine and a main routine (which calls the init routine).  I store the addresses of all the main routines in a table and I have a subroutine set_gamestate which takes a gamestate id in A and uses it to grab an address from the table and stick it in a pointer variable (gamestate_ptr).
<br />
<br />My main game loop just says:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">forever:<br />&nbsp; &nbsp; &nbsp;jmp &#40;gamestate_ptr&#41;</div><br /><br />and each gamestate ends with "jmp forever", completing the loop.<br /><br />So for a start menu I might have:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;table of addresses to main gamestate routines.<br />;&nbsp; set_gamestate reads from this table to set gamestate_ptr<br />gamestate_table:<br />&nbsp; &nbsp; .word startmenu<br />&nbsp; &nbsp; .word gameplay<br />&nbsp; &nbsp; ;other addresses</div><br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;--------------startmenu.asm-----<br /><br />startmenu_init:<br />&nbsp; &nbsp; ;draw title screen<br />&nbsp; &nbsp; ;turn screen on<br />&nbsp; &nbsp; ;start music<br />&nbsp; &nbsp; jmp gamestate_init_done&nbsp; ;this routine adds 3 to gamestate_ptr.&nbsp; To skip init for future iterations<br /><br />startmenu:<br />&nbsp; &nbsp; jsr startmenu_init<br /><br />&nbsp; &nbsp; ;wait a frame<br />&nbsp; &nbsp; ;read the controller<br /><br />&nbsp; &nbsp; lda controller1<br />&nbsp; &nbsp; and #START_BUTTON&nbsp; &nbsp;;bitmask that tests start button bit<br />&nbsp; &nbsp; beq end&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if not pressed, we're done.&nbsp; loop back to forever<br /><br />&nbsp; &nbsp; ;cleanup code &#40;e.g. play sfx, fadeout loop&#41;<br />&nbsp; &nbsp; ;change to gameplay gamestate<br /><br />end:<br />&nbsp; &nbsp; jmp forever</div>
<br />
<br />Having a gamestate handler like this has a little bit of overhead but it's easy for me to read and debug.  Adding a new gamestate is as easy as adding a line to the address table.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Wave</b> [ Mon Dec 13, 2010 5:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">In some of my programs I supplied an NMI routine, in addition to the init routine and loop.  You could change how your NMI routine operates, but instead I just point the vector to 3 bytes of RAM, putting $4C (JMP absolute) followed by the address, so it can be redirected easily.</div>
<br />JMP absolute on RAM over JMP Indirect on ROM to gain 2 cycles (at 1 byte of ram cost)?
<br />Just asking, might use it on my IRQ routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ian A</b> [ Mon Dec 13, 2010 8:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm going to second what everyone else has said so far.
<br />
<br />When I first started programming I made title screens/ intros as the outer most level of a loop per your example.  However, this scales HORRIBLY and it kinda makes the code more difficult to understand.  Later, when I tired to add more to the start screen, because cool intros kick ass, the loop was a huge mess of code surrounding a much smaller, better structured chunk of code.
<br />
<br />It certainly makes sense to break it off into a separate parts or states.  Even if your title screen is a typically simple, you could reuse the code with very little effort.  Or later, if you want something more, you can alter it with ease.
<br />
<br />I tend to rewrite parts of my programs often, so I find it better to break them up into smaller isolated chunks, so if I change a section I don't have to worry about how it effects the rest of the code too much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Dec 13, 2010 9:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Wave wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">In some of my programs I supplied an NMI routine, in addition to the init routine and loop.  You could change how your NMI routine operates, but instead I just point the vector to 3 bytes of RAM, putting $4C (JMP absolute) followed by the address, so it can be redirected easily.</div><br />JMP absolute on RAM over JMP Indirect on ROM to gain 2 cycles (at 1 byte of ram cost)?</div>
<br />If you had an indirect JMP on ROM and an NMI fired between you setting the first and the second bytes of the address in RAM, the program would jump to an invalid location and most likely crash. To avoid that you would have to disable NMIs every time you modified the address.
<br />
<br />The other option is to keep the whole instruction in RAM, so that you can temporally change the JMP to RTI before you modify the address, and finally change the RTI back to JMP when the address is valid. Modifying the opcode is faster than disabling/enabling NMIs through the PPU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Wave</b> [ Mon Dec 13, 2010 9:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">Wave wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">In some of my programs I supplied an NMI routine, in addition to the init routine and loop.  You could change how your NMI routine operates, but instead I just point the vector to 3 bytes of RAM, putting $4C (JMP absolute) followed by the address, so it can be redirected easily.</div><br />JMP absolute on RAM over JMP Indirect on ROM to gain 2 cycles (at 1 byte of ram cost)?</div><br />If you had an indirect JMP on ROM and an NMI fired between you setting the first and the second bytes of the address in RAM, the program would jump to an invalid location and most likely crash. To avoid that you would have to disable NMIs every time you modified the address.<br /><br />The other option is to keep the whole instruction in RAM, so that you can temporally change the JMP to RTI before you modify the address, and finally change the RTI back to JMP when the address is valid. Modifying the opcode is faster than disabling/enabling NMIs through the PPU.</div>
<br />Well, I'm thinking about using it on IRQs, that will only be fired if loaded properly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Dec 13, 2010 10:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Wave wrote:</div><div class="quotecontent">Well, I'm thinking about using it on IRQs, that will only be fired if loaded properly.</div>
<br />Yeah, for IRQs you can safely have just the address in RAM. Even if they fired at unpredictable times they are easily disabled and enabled with SEI and CLI.
<br />
<br />Since you are planning on using IRQs for various types of effects, it makes sense to give each effect its own routine so that they can do their thing as quickly as possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Dec 13, 2010 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, that redirection trick is especially helpful with IRQ (where overhead starts to matter more, if it's triggering often enough).  It makes other optimizations easier too, like in many IRQ routines you only need to save/restore the accumulator.
<br />
<br />Even if there's only one condition to check (there's usually more than that), with only one NMI/IRQ routine in the best case it's still 7 cycles minimum to load/compare/branch.  Compared to just burning up 3 cycles with a JMP to a dedicated routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 13, 2010 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's what the outer loop of something like Concentration Room looks like:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">callTitleScreenProc:<br />&nbsp; asl a<br />&nbsp; tax<br />&nbsp; lda titleScreenProcs+1,x<br />&nbsp; pha<br />&nbsp; lda titleScreenProcs,x<br />&nbsp; pha<br />&nbsp; php<br />&nbsp; rti<br /><br />titleScreenProcs: .addr start1PlayerGame, start2PlayerGame, startOptions<br /><br />reset:<br />&nbsp; sei<br />&nbsp; ldx #0<br />&nbsp; stx $2000<br />&nbsp; stx $2001<br />&nbsp; dex<br />&nbsp; txs<br />&nbsp; ; Omitted: initialize APU ports, then wait for $2002 to be negative twice<br /><br />titleloop:<br />&nbsp; jsr showTitleScreen&nbsp; ; this returns number of selection in A<br />&nbsp; jsr callTitleScreenProc<br />&nbsp; jmp titleloop<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Dec 13, 2010 2:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm unsure of the original quesiton, but my main loop looks like this :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">stageLoop<br />&nbsp; jsr ResetStage<br /><br />-&nbsp; jsr WaitNMI<br />&nbsp; jsr RunPlayer<br />&nbsp; jsr RunObjects&nbsp; &nbsp; &nbsp; ; Objects are enemies, items, etc...<br />&nbsp; jsr DisplaySprites<br />&nbsp; lda GameOverFlag<br />&nbsp; beq _gameOver&nbsp; &nbsp; &nbsp;;Those flags breaks the main loop<br />&nbsp; lda StageBeatenFlag<br />&nbsp; bne _stageBeaten<br />&nbsp; jmp -<br /><br />_gameOver<br />&nbsp; &nbsp;jsr FadeOut<br />&nbsp; &nbsp;jsr DisplayGameOverScr<br />&nbsp; &nbsp;jmp Reset<br /><br />_stageBeaten<br />&nbsp; &nbsp;jsr PlayVictoryMusic<br />&nbsp; &nbsp;jsr FadeOut<br />&nbsp; &nbsp;inc StageNmr<br />&nbsp; &nbsp;jmp _stageLoop<br /></div>
<br />Pretty straightforward. The "start menu" is handled in the "Run Player" routine, which, if the menu is to be opened, don't exit but simply executes until the menu is closed again and then the game continues normally.
<br />I like this natural way of coding things in the order they execute.
<br />Some people prefer having a "jmp *" style main loop (i.e. everything in NMI), and do their logic based on a series on numbers which tells the NMI routine what to do. This is more complicated for me, as you have to carefully manage that series of numbers, and this is slower/less efficient. I might be wrong though.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>