<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - BGMODE or parameter changes during scanline</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">BGMODE or parameter changes during scanline</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11404">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11404</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Aug 04, 2014 8:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great!  When my SD2SNES arrives I'll record stuff and put it up here.  Thanks for reviewing stuff + putting up with my delays.  (Edit: It's been shipped, so I imagine it'll be here within a week or two.  The way Retrogate does their package tracking is bizarre as hell though -- through some third-party site in Ukraine despite them being in Germany.  Very weird)<br /><br />I figured out how to alleviate the audio frequency ramping problem too -- just had to check a couple boxes in VirtualDub (specifically Capture / Timing / Automatically disable resync when integrated audio/video capture is detected).  Since the Happauge capture device is doing both audio and video capturing, they're actually always in sync.  I figured this out by reading the manual a bit, but also by looking at Capture / Timing graph when doing a test video capture.  Now things look great and with very few frame drops (76 for a 1:30 video.  90 seconds * 29.97 fps = 2697.3 frames, 76 / 2697.3 = <s>0.282</s> 0.0282 frames dropped (0.0282 * 100 = 2.82%), totally acceptable).<br /><br />I had a bunch else to say about audio stuff (like how apparently <a href="http://www.assemblergames.com/forums/showthread.php?48548-Audio-Comparison-of-different-SNES-revisions" class="postlink">some models of SNES units output a high pitch noise</a> (like mine -- I have the original SNES, not a SNES Jr.), but I realised it's not really relevant since we're focused on the video aspect.<br /><br />Edit: Me doing math wrong (was done right in GNU bc, but I don't tend to copy-paste very much, I type things manually, forgot a zero.  :-)  Thanks Sik!)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Tue Aug 05, 2014 12:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think you forgot a 0 there (0.0282, or 2.82%).<br /><br />But yeah, so the problem was just bad settings in the end? Go figure. This is probably the most annoying part of video recording, there are just too many settings that can go wrong =P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Tue Aug 12, 2014 1:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />While we're waiting...<br /><br />Is there a preferred method of extending VBlank while the IRQ is otherwise occupied?<br /><br />I was thinking of using a couple of HDMA channels; one to toggle the display and one to hijack the interrupt (which would probably have to be in RAM).  This would allow the mode change interrupt code to be as lean as possible, which I imagine is very important for something that runs ~200 times per frame.  But if there's a less hacky way to do the same thing, great.<br /><br />You can't trigger NMI manually, can you?  I gather it doesn't trigger on force blank...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Aug 12, 2014 4:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's no way I know of to trigger NMI through software -- it's tied to a pin on the CPU, connected to a particular device (PPU VBlank in this case, or some latch chip that connects to that (I'm talking out my ass here, I don't do EE)).  The NMI itself is induced by the hardware it's tied to, e.g. the PPU.<br /><br />You are correct that forced blank will not trigger NMI.<br /><br />About my SD2SNES: still waiting.  <a href="http://shop.retrogate.com/termsandconditions.sc" class="postlink">Estimated delivery time from Germany is 15-20 days</a>, and for whatever reason (intentionally) the product goes through cities in Ukraine before going to the US.  I can read some Cyrillic, but right now it looks like in Ukraine still on its way here.  Last update was on 2014/08/09 and it was originally shipped on 08/05.  So another week or so...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Aug 12, 2014 5:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the NES, if the NMI hasn't been acknowledged (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">BIT $2002</tt>), disabling and reenabling NMI (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA #$00 STA $2000 LDA #$80 STA $2000</tt>) before vertical blanking has finished will cause an immediate falling edge on /NMI. Does the same thing work on the Super NES?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Aug 12, 2014 5:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know what &quot;falling edge&quot; means.  This is again more hardware talk and doesn't really shed any light on what actually happens at a software level (read: does the CPU notice hardware NMI and thus run code at NMI vector or not?).  What is it going to take for folks to actually comprehend this point?  :P<br /><br />Likewise, descriptions <a href="http://www.dforce3000.de/pub/doc/anomie_timing.txt" class="postlink">like the below</a> (&quot;forced high&quot;, &quot;output low&quot;, &quot;output high&quot;, etc.) are a little more helpful but not by much.  The below seems to imply that &quot;NMI output low&quot; means &quot;NMI is firing / code at NMI vector will be executed&quot;.  Whether or not that's &quot;falling edge&quot; is unknown to me.<br /><br />A forced blank is accomplished by setting bit 7 of $2100 to 1.  It essentially &quot;turns the screen off&quot; (meaning you get a black screen, or black for whatever duration you set it + unset it), but the electron gun and video synchronisation stuff keep working during this time.<br /><br />Some of the below is irrelevant to the discussion topic.  The important stuff is at the top.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">INTERRUPTS<br />----------<br /><br />The internal timer will set its NMI output low at H=0.5 at the beginning of<br />V-Blank. The CPU's /NMI input is forced high by clearing bit 7 of register<br />$4200, so the CPU may not actually see the NMI transition. The CPU will jump to<br />the NMI routine at the end of the instruction during which /NMI transitions.<br /><br />The internal timer sets its NMI output high at H=0 V=0, or when register<br />$4210 is read. Possibly also when $4200 is written?<br /><br />If the CPU is halted (i.e. for DMA) while /NMI goes low, the NMI will trigger<br />after the DMA completes (even if /NMI goes high again before the DMA<br />completes). In this case, there is a 24-30 cycle delay between the end of DMA<br />and the NMI handler, time enough for an instruction or two.<br /><br /><br />The internal timer will set its IRQ output low under the following conditions<br />('x' and 'y' are bits 4 and 5 of $4200, HTIME is registers $4207-8, and VTIME<br />is $4209-a):<br />&nbsp; yx&nbsp; &nbsp; trigger point<br />&nbsp; 00 =&gt; Never<br />&nbsp; 01 =&gt; H-IRQ:&nbsp; every scanline, H=HTIME+~3.5<br />&nbsp; 10 =&gt; V-IRQ:&nbsp; V=VTIME, H=~2.5<br />&nbsp; 11 =&gt; HV-IRQ: V=VTIME, H=HTIME+~3.5<br /><br />The actual formula for the trigger point is as follows. V-IRQ is just like<br />HV-IRQ with H=0. If H=0, $4211 bit 7 gets set 1374 master cycles after dot 0.0<br />of the previous scanline. Otherwise, it gets set 14+H*4 master cycles after<br />dot 0.0 of the current scanline. Note that the 'dot offset' will change due to<br />the two long dots per scanline. Also, no IRQ will trigger for dot 153 on the<br />short scanline in non-interlace mode, and no IRQ will trigger for dot 153 on<br />the last scanline of any frame.<br /><br />The internal timer will set its IRQ output high when $4211 is read, or when<br />IRQs are disabled by a write to $4200. Note that the expansion port and the<br />cart connector both have access to the /IRQ line, and may be able to trigger<br />IRQs on their own. When enabling IRQs, the IRQ output will go low even if the<br />enable write occurs at the exact cycle when the IRQ is scheduled to trigger<br />For example, if HV-IRQ is set for (0,1) and the last cycle of the STA $4200 is<br />at (0,0)+1372 master cycles, the IRQ line will still go low.<br /><br /><br />The CPU will jump to the NMI or IRQ handler at the end of the instruction when<br />/NMI transitions or when /IRQ is low and the I flag is clear. The actual check<br />occurs just before the final CPU cycle of the instruction, which means that the<br />jump will begin at the earliest 6 to 12 master cycles after /NMI or /IRQ. Also<br />note that PLP, CLI, SEI, SEP #$04, and REP #$04 update the flags during their<br />final CPU cycle, so the IRQ check will use the old value of I rather than the<br />new one set by the current instruction. RTI, BRK, and COP on the other hand do<br />not have this issue.<br /><br />So for the following code:<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;; set up IRQ<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;SEI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;WAI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;STZ $00<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;LDA #$01<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;CLI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;LDA #$42<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;STP<br />&nbsp;&gt; <br />&nbsp;&gt; IRQHandler:<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;STA $00<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;RTI<br />Memory location $00 will end up set to 0x42, not 0 or 1, because the I flag<br />isn't clear before the final cycle of CLI. And for the following code:<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;; set up IRQ<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;SEI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;WAI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;CLI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;SEI<br />The IRQ will actually trigger following the SEI instruction, not before it (but<br />the flags pushed during the IRQ handler will have the I flag set). OTOH, the<br />following code will not allow an IRQ to trigger at all if the RTI sets the I<br />flag:<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;; set up IRQ<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;SEI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;WAI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;CLI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;RTI<br />And the following code (with RTI clearing I):<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;; set up IRQ<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;SEI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;WAI<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;STZ $00<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;LDA #$01<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;RTI<br />&nbsp;&gt;<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;; -&gt; RTI returns here<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;LDA #$42<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;STP<br />&nbsp;&gt; <br />&nbsp;&gt; IRQHandler:<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;STA $00<br />&nbsp;&gt;&nbsp; &nbsp; &nbsp;RTI<br />Will result in memory location $00 being set to 1, not 0x42.<br /><br />If /NMI and /IRQ are both pending, NMI takes precedence.<br /><br />And the datasheet is inaccurate regarding that first cycle of the IRQ/NMI<br />pseudo-opcode. It's an opcode fetch cycle from PB:PC (typically 6 or 8 master<br />cycles), not an IO cycle (always 6 master cycles) as the datasheet claims.</div><br /><br />There is <a href="http://wiki.superfamicom.org/snes/show/Registers" class="postlink">also this</a>, but it says nothing about NMI:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Note that force blank CAN be disabled mid-scanline. However, this can result in glitched graphics on that scanline, as the internal rendering buffers will not have been updated during force blank. Current theory is that BGs will be glitched for a few tiles (depending on how far in advance the PPU operates), and OBJ will be glitched for the entire scanline. Also, writing this register on the first line of V-Blank (225 or 240, depending on overscan) when force blank is currently active causes the OAM Address Reset to occur.</div><br /><br />And <a href="http://problemkaputt.de/fullsnes.txt" class="postlink">then this</a>:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Forced Blank Color<br />In Forced Blank, the whole screen is Black (no matter of CGRAM settings, Sub<br />Screen Backdrop Color, and Master Brightness settings). Vsync/Hsync are kept<br />generated (sending a black picture with valid Sync signals to the TV set)<br /><br />...<br /><br />2100h - INIDISP - Display Control 1 (W)<br />&nbsp; 7&nbsp; &nbsp; &nbsp;Forced Blanking (0=Normal, 1=Screen Black)<br />&nbsp; 6-4&nbsp; &nbsp;Not used<br />&nbsp; 3-0&nbsp; &nbsp;Master Brightness (0=Screen Black, or N=1..15: Brightness*(N+1)/16)<br />In Forced Blank, VRAM, OAM and CGRAM can be freely accessed (otherwise it's<br />accessible only during Vblank). Even when in forced blank, the TV Set keeps<br />receiving Vsync/Hsync signals (thus producing a stable black picture). And, the<br />CPU keeps receiving Hblank/Vblank signals (so any enabled video NMIs, IRQs,<br />HDMAs are kept generated).<br />&nbsp; Forced blank doesn't apply immediately... so one must wait whatever<br />&nbsp; (maybe a scanline) before VRAM can be freely accessed... or is it only<br />&nbsp; vice-versa: disabling forced blank doesn't apply immediately/shows garbage<br />&nbsp; pixels?</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Aug 12, 2014 6:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The 6502 treats NMI differently from IRQ, and I assume that the 65816 behaves the same way.<br /><ul><li>/IRQ is level sensitive. If /IRQ is held low, the CPU will repeatedly call the IRQ vector every time CLI (or PHP with bit 2 clear) is executed. </li><li>/NMI is edge sensitive. A transition from high to low causes a flip-flop to get set in the CPU, and the CPU will call the NMI vector only once and not call it again until the signal goes high and low again. </li></ul>So let me state it from a purely software perspective: On the NES, changing the PPU's NMI enable bit from off to on during vblank causes an immediate call to the NMI vector if the NMI for that frame hasn't already been acknowledged.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Aug 13, 2014 2:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; You can't trigger NMI manually, can you?<br /><br />Sure you can.<br /><br />Push P and your return address onto the stack, and then JML to your NMI vector routine =)<br /><br />&gt;  I can read some Cyrillic, but right now it looks like in Ukraine still on its way here.<br /><br />Hopefully it's not being transported on a Malaysia Airlines cargo plane :/

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Aug 13, 2014 3:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">The way Retrogate does their package tracking is bizarre as hell though -- through some third-party site in Ukraine despite them being in Germany.</div><br />AFAIK, Krikzz, the guy responsible for the Everdrives, lives in Ukraine. For some reason the guy who created the SD2SNES has Krikzz manufacture it. Anyway, I've found retrogate's shipping methods to be pretty reliable, fast and cheap, more so than from any other country I've bought products from (and I never had to pay import taxes for any of my Everdrives or SD2SNES), and the tracking page has an English language option.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Wed Aug 13, 2014 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">The way Retrogate does their package tracking is bizarre as hell though -- through some third-party site in Ukraine despite them being in Germany.</div><br />AFAIK, Krikzz, the guy responsible for the Everdrives, lives in Ukraine. For some reason the guy who created the SD2SNES has Krikzz manufacture it. Anyway, I've found retrogate's shipping methods to be pretty reliable, fast and cheap, more so than from any other country I've bought products from (and I never had to pay import taxes for any of my Everdrives or SD2SNES), and the tracking page has an English language option.</div><br />I've found it to be all of those things but fast. But still, the items were in stock and I did receive them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Wed Aug 13, 2014 4:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">&gt; You can't trigger NMI manually, can you?<br /><br />Sure you can.<br /><br />Push P and your return address onto the stack, and then JML to your NMI vector routine =)</div><br />Well, yeah, it sounds silly when you put it like <em>that</em>...<br /><br />I guess what I was hoping for with that question was something I could poke with HDMA, since as far as I'm aware it's the only thing left that auto-triggers on a timer (the IRQ is busy with the mode change and needs to be lean, and the NMI fires too late).  Like tepples' method, but more flexible.  It would be even better if there were a way to freely move the NMI trigger point itself...<br /><br />I suppose I'm not doing too badly as it stands, though.  It seems to me that I could even get away with just using one HDMA channel instead of two, by simply writing a branch into the IRQ code before the last scanline and letting the resulting pseudo-NMI handle the screen blanking.  If the IRQ code ends up having to be in ROM for some reason, I could just have it check a memory location, and have the HDMA write to that location - but that's, what, at least two extra instructions every scanline?  Still faster than checking OPVCT...<br /><br />Since I have almost no experience at SNES coding, I was trying to find out if there's a standard procedure or something that people follow in this situation.  If there isn't, that's okay; I'm sure there's a way to make it work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Aug 13, 2014 6:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Given the extremeness of raster effects, I would recommend writing a very specialized, static loop for the active display area. No IRQs, no checking counters. Each line consumes exactly 1324 cycles. Then run your NMI routine (doesn't even have to be a real NMI since you know you're in Vblank now) to do your game logic, then sync up to V=0,H=0 and start the next frame.<br /><br />That will require some learning on your part in how to calculate exact cycle times and penalties. But set an IRQ for V=261,H=~330 or so and then use WAI. Have that bail out so that you're now within 6 clocks of V=0,H=0. You can actually sync perfectly to V=0,H=0 but it's complicated, so you'll have to learn that on your own.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Fri Aug 15, 2014 1:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How narrow do you think I can get the garbage area?  Or should we wait for better video?<br /><br />I don't know if running the game logic in VBlank is a good idea in this case.  Even with a 144x192 playfield, after accounting for all the stuff that needs to happen via DMA, plus related maneuvering, I figure I'd be lucky to have 20 scanlines of actual compute time left before the mode change loop had to restart.  Anything that didn't fit would have to be offloaded onto the GSU, which is already pretty busy.<br /><br />On the other hand, if I understand correctly, running non-timed game code during active display could produce a variance in the position of the mode switch of up to W*(N-1) pixels, where W is the number of pixels per cycle and N is the number of cycles taken by the longest instruction that could conceivably be executing when the interrupt fires.  If this is the case, it seems to me that minimizing the width of the sprite mask would require this section of the code to be written exclusively with instructions of four cycles or less, which could be very restrictive...  or I could use FastROM in the CPU-only area, which should allow at least five cycles per instruction, maybe six...  unless the interrupt timing itself has jitter, as implied by the use of &quot;~&quot; in the timing docs, which would have to be added to the variance...<br /><br />A cycle-timed game engine (or part of it) could be the best of both worlds.<br /><br />...or I could give up and run most of the game on the GSU, and hope it can handle it...<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Given the extremeness of raster effects</div><br />I'm not sure I get this.  To me, using that much mission-critical cycle-timed code in the middle of an active game environment seems more extreme than changing a register in an IRQ, especially if the timed loop eats most of the available CPU power without doing any actual computing...<br /><br />I mean, the IRQ <em>works</em>; it's just a question of how much extra glitch masking it forces me to do.  Am I missing something?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Augustus Blackheart</b> [ Fri Aug 15, 2014 5:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's some video;<br /><br /><a href="http://www.morganleahrecords.com/augustus/blackheart/tmp/mtest.mp4" class="postlink">http://www.morganleahrecords.com/augustus/blackheart/tmp/mtest.mp4</a><br /><a href="http://www.morganleahrecords.com/augustus/blackheart/tmp/mtest-reverse.mp4" class="postlink">http://www.morganleahrecords.com/augustus/blackheart/tmp/mtest-reverse.mp4</a><br /><a href="http://www.morganleahrecords.com/augustus/blackheart/tmp/mtest-scroll.mp4" class="postlink">http://www.morganleahrecords.com/augustus/blackheart/tmp/mtest-scroll.mp4</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sat Aug 16, 2014 3:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BGMODE or parameter changes during scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />...okay, so it looks like Sik called it.  Apparently you can change <em>from</em> Mode 7, but not <em>to</em> Mode 7, at least if the line doesn't start in Mode 7.  Unless there's a bug in my code that doesn't trigger in higan...<br /><br />Also, something funny is going on with the timing; it doesn't look quite the same as in higan v094.  It looks like there's more jitter on the real system, and the garbage starts sooner.<br /><br />But it looks like the scroll changes work more or less as expected, except that they seem to be widening the garbage area...  Maybe zeroing the scroll, rather than bumping it positive, would have a different effect...<br /><br />It strikes me that a lot of cases may have to be tested for confidence in describing the behaviour.  Then again, I haven't spent a decade writing an obsessively accurate emulator for this system, so maybe it's more clear what's going on to someone who has...<br /><br />...<br /><br />...call me paranoid, but can you confirm that you're using an original SNES, and not a SNES Jr.?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>