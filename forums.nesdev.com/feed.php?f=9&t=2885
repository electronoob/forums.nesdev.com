<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=2885" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-01-31T10:17:30-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=2885</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-01-31T10:17:30-07:00</updated>
<published>2007-01-31T10:17:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21727#p21727</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21727#p21727"/>
<title type="html"><![CDATA[Internal POR of MMCs ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21727#p21727"><![CDATA[
Just to be sure, is the M2 (phi2, O2 or whathever) line tristate at the time the +5V establishes ? If so is it open long enough to have some cartridge circuitery acurately rely on this to setup proper behaviour before the processor actually starts fetching from it's reset vector ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Jan 31, 2007 10:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-01-21T03:06:27-07:00</updated>
<published>2007-01-21T03:06:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21443#p21443</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21443#p21443"/>
<title type="html"><![CDATA[Internal POR of MMCs ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21443#p21443"><![CDATA[
So MMCs definitely have an internal POR circuit. That may also be the reason why M2 is connected to the MMC2, wich doesn't need it to map anything in the $4000-$7fff range.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Alot of pirate multicarts watch M2 to detect a reset. It's even simpler than how you suggest doing it. The M2 line goes tristate when the console is reset.<br /></div><br />That is a very interesting thing to know. However, when the console is just powered up (no reset), I don't know if the M2 will be tristate for a while, or if it will work just as soon as the power gets etablished. That would be very hard to test. If it works just as soon as the power is etablished, then both things are needed : A voltage comparator and a RC circuit to detect reset in order to manually reset the chip. The hard thing is that if the MMC1 is in its reset state for too long, games could fail booting correctly.<br /><br />On a side note, I think later MMCs (at least the MMC5, and MMC6 internally) have also a SRAM protection circuit, that write-protects battery backed SRAM when power goes down. The MMC1 doesn't seem to have something like that, because SRAM often gets corrupted with MMC1 games if not full precaution is taken. Since M2 is used to enable the SRAM, if it goes tri-state the MMC should have an internal power-down resistor that assume it to be low, disabling the chip for good, and then I don't think any write-protection bit is needed, since the corruption is there on power-down, and not on power-up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Jan 21, 2007 3:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kevtris]]></name></author>
<updated>2007-01-20T13:40:45-07:00</updated>
<published>2007-01-20T13:40:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21419#p21419</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21419#p21419"/>
<title type="html"><![CDATA[Re: Internal POR of MMCs ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21419#p21419"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I wonder how MMC chips gets their internal power-on reset state.<br /></div><br /><br />There's a variety of ways it could be done, but alot of chips will do a POR via a voltage comparator.   When VCC exceeds a threshold, the chip gets reset.   <br /><br />The MMC6 appears to use an external 2 resistor divider between VCC/GND even for its sensing threshold.   <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The MMC1 most likely set itself on power-up in the same state as when something is written to it with D7 = 1, that is it sets itself in 16kb switching mode and low-PRG bankswitching, so that the reset vector and code can be safely put at $c000-$ffff of the last bank (like UNROM games) and only games changing the bankswitching mode would have to mirror their reset code/vectors in all banks.<br /></div><br /><br />Yeah I did some testing, and it appears the various revions of the MMC1 (there were several, like MMC1B1 MMC1B2 MMC1C, etc)  reset more or less bits... Specifically the WRAM protect bit is always in the "safe"  position on the later MMC1's, whereas on the early ones it defaulted to "writable" apparently.  I know a few Fami games fail to work unless you force WRAM writable  ("The Money Game") but I am not sure if this is due to power on state or if the game turns WRAM off using the bit then expects it to still work.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So the MMC1 is internally made so that at least two of it's flip-flops power on in a known state. I guess the MMC1C also has the WRAM disable flip-flop reset to a known state.<br />Is this done with an internal voltage comparator and all this stuff, or is it done with any other trick or does the flip-flops just got manufactured so that they would be set on power-on ?<br />Does the Reset button affect this ?<br /><br />I think an idea (without using the lockout chip reset line, wich is cheating because that line doesn't exist on the Famicom) would be to watch the M2 line. A internal monostable could be constantly be retriggered by the M2 line, and when the system enters its reset mode, the M2 would no longer oscillate (I guess), so the monostable would reset the MMC after a while. This would most likely require an external capacity, and the MMC1 doesn't have any external capacity. Of course another idea would be to watch for subsequent reads of $fffc and $fffd, but since the MMC1 don't connect to all adress lines, this won't make it.<br /></div><br /><br />Alot of pirate multicarts watch M2 to detect a reset.  It's even simpler than how you suggest doing it.  The M2 line goes tristate when the console is reset.<br /><br />Soo, they use a diode, resistor, capacitor and a logic gate to buffer the output (inverter, AND gate, NAND, just about anything is usable).  Some don't buffer it all though.  <br /><br />Anyways, you connect M2 through your diode, and then connect the output of the diode to your RC (connected in parallel) to ground.  The idea being, when M2 toggles, the capacitor is charged through the diode, but when M2 stops toggling, the capacitor discharges thru the resistor.   Depending on how you hook it up, you can get active high or active low outputs.  <br /><br />The multicarts usually have the RC to ground, and then connect it that to the reset input on the latches, so that during reset, the output is low, and operation it is high.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't think the MMC2, MMC3 and MMC4 has a known initial state, because all of them have a hardwired bank somewhere, so the game can accurately start in there and reset all other stuff by software. The MMC5 on the other hand, reset in a known state, in 8kb PRG bankswitching mode and with all banks set to the last. Most likely again, all it's internal register flip-flops default to 1 at power-on.<br /><br />So, any more idea how this is done ?<br /><br />On a side-note, even trough the (innacurate) firebug mapper doccument gives power-on states for all mappers, I assume most of them are wrong and can power-on just randomly. (i.e. CNROM, UNROM and AOROM has no logic to set any bank on power-on, forcing mapper 7 games to get their reset vectors and code mirrored in all banks).<br /></div><br /><br />Yes you surmised correctly- alot of mappers have no known power-on state, especially the latch based ones.  Only the later mappers seem to have POR circuitry on them, while most of the early ones do not.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=230">kevtris</a> — Sat Jan 20, 2007 1:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-01-20T03:26:48-07:00</updated>
<published>2007-01-20T03:26:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21413#p21413</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21413#p21413"/>
<title type="html"><![CDATA[Internal POR of MMCs ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2885&amp;p=21413#p21413"><![CDATA[
I wonder how MMC chips gets their internal power-on reset state.<br />The MMC1 most likely set itself on power-up in the same state as when something is written to it with D7 = 1, that is it sets itself in 16kb switching mode and low-PRG bankswitching, so that the reset vector and code can be safely put at $c000-$ffff of the last bank (like UNROM games) and only games changing the bankswitching mode would have to mirror their reset code/vectors in all banks.<br /><br />So the MMC1 is internally made so that at least two of it's flip-flops power on in a known state. I guess the MMC1C also has the WRAM disable flip-flop reset to a known state.<br />Is this done with an internal voltage comparator and all this stuff, or is it done with any other trick or does the flip-flops just got manufactured so that they would be set on power-on ?<br />Does the Reset button affect this ?<br /><br />I think an idea (without using the lockout chip reset line, wich is cheating because that line doesn't exist on the Famicom) would be to watch the M2 line. A internal monostable could be constantly be retriggered by the M2 line, and when the system enters its reset mode, the M2 would no longer oscillate (I guess), so the monostable would reset the MMC after a while. This would most likely require an external capacity, and the MMC1 doesn't have any external capacity. Of course another idea would be to watch for subsequent reads of $fffc and $fffd, but since the MMC1 don't connect to all adress lines, this won't make it.<br /><br />I don't think the MMC2, MMC3 and MMC4 has a known initial state, because all of them have a hardwired bank somewhere, so the game can accurately start in there and reset all other stuff by software. The MMC5 on the other hand, reset in a known state, in 8kb PRG bankswitching mode and with all banks set to the last. Most likely again, all it's internal register flip-flops default to 1 at power-on.<br /><br />So, any more idea how this is done ?<br /><br />On a side-note, even trough the (innacurate) firebug mapper doccument gives power-on states for all mappers, I assume most of them are wrong and can power-on just randomly. (i.e. CNROM, UNROM and AOROM has no logic to set any bank on power-on, forcing mapper 7 games to get their reset vectors and code mirrored in all banks).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Jan 20, 2007 3:26 am</p><hr />
]]></content>
</entry>
</feed>