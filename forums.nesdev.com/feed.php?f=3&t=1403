<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=1403" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-04-18T13:44:32-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=1403</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-04-18T13:44:32-07:00</updated>
<published>2006-04-18T13:44:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12042#p12042</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12042#p12042"/>
<title type="html"><![CDATA[DMA and interrupts]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12042#p12042"><![CDATA[
The only DMA I know about is sprite DMA (triggered by a write to $4014), and APU DMC DMA which steals <em>four</em> CPU clocks. Interrupts are processed when the CPU is clocked, not when the interrupt line itself is asserted, so when the CPU is halted, interrupts will be suspended along with instruction execution.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Apr 18, 2006 1:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-04-18T13:26:48-07:00</updated>
<published>2006-04-18T13:26:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12041#p12041</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12041#p12041"/>
<title type="html"><![CDATA[DMA and interrupts]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12041#p12041"><![CDATA[
If you're speaking DMC DMA (where it freezes the CPU to fetch a sample byte) -- it's actually a <span style="text-decoration: underline">FOUR</span> cycle delay, not one or two as some older docs say.  For detailed behavior on when those cycles are stolen, other info needed to get DMC IRQs working properly, and just all around good APU information, I'd recommend reading blargg's APU refernce (as linked to on <a href="http://slack.net/~ant/nes-emu/" class="postlink">this page</a>)<br /><br />As for your main question -- the IRQ wouldn't be able to happen until the CPU is done with its current task... so if an IRQ happens mid DMA (either by DMC or $4014) the <em>earliest</em> the IRQ would occur is after the DMA is complete.<br /><br />You might also want to browse <a href="http://nesdev.com/bbs/viewtopic.php?t=1334" class="postlink">this</a> thread where I bring up my dismay about what seems like a 1 or 2 cycle delay between when the IRQ is tripped, and when it actually happens.  That is at least the case for APU Frame IRQs, but I wonder about some others... (many mapper cpu-cycle based IRQ counters don't work quite right when this delay is put in -- but it seems needed for APU frame IRQs and even MMC3?)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Apr 18, 2006 1:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[1UP]]></name></author>
<updated>2006-04-18T13:04:49-07:00</updated>
<published>2006-04-18T13:04:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12040#p12040</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12040#p12040"/>
<title type="html"><![CDATA[DMA and interrupts]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1403&amp;p=12040#p12040"><![CDATA[
Does anyone know the exact behavior of DMA and interrupts in relation to each other?<br /><br />All the documentation I've seen says that a DMA read (or write?) keeps the CPU busy for 2 cycles (yeesh!).  I would assume that if an interrupt happens during this time, the DMA transfer is scuttled until the interrupt is complete.  Or does the interrupt wait until the DMA is complete?<br /><br />Is this important to know/emulate in the instance when a scanline counter IRQ (or something similar) goes off during a sprite DMA tranfer?<br /><br />(Yes, I'm one of those people who originally set out to write a "functional equivalence" NES emulator, but then was hit with the hard truth of "functional equivalence == perfect clock-cycle accuracy" in the NES emulation world.  I'd assume this is the point where most would-be emulator writers get off this train, but I'm still here.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=423">1UP</a> — Tue Apr 18, 2006 1:04 pm</p><hr />
]]></content>
</entry>
</feed>