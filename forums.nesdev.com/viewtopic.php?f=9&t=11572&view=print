<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Adding rumble to controllers</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Adding rumble to controllers</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=11572">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=11572</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Aug 25, 2014 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This was just a dumb idea I had while I was at work. Let's say you could hypothetically add a rumble motor to an NES controller (somehow); this would require the ability for the CPU to send data to the controller, but the controller port obviously wasn't designed with this in mind. An interface for the special rumble-supporting controller would also need to be compatible with a standard controller.<br /><br />The main hurdle is the fact that the only data line you have direct control over is the strobe signal, which goes to both controllers simultaneously. Happily, you can send a CLK pulse to each controller separately, so the idea I had was this:<br /><br /><ul><li>Set strobe to 1 and then read from the port of the desired controller. A normal controller doesn't care about this and doesn't send anything useful. The rumble controller will see this and switch into a &quot;receive mode&quot;.</li><li>Send data 1 bit at a time by placing a bit on the strobe line and then reading from the recipient controller's port. Reading from the port will send a CLK pulse to that controller, and the controller will accept the bit (placed on the strobe line) into a shift register.</li><li>Terminate the data packet by making two 1-&gt;0 transitions on the strobe line without sending any CLK pulses (so write 1-0-1-0 to the strobe). The controller accepts the transmitted data and then goes back into the standard mode of reporting button presses.</li></ul><br />The controller not being addressed (be it a standard controller or a rumble controller) will simply see a bunch of strobes, which won't affect its operation; the controller being addressed sees the activity on the strobe line plus all the CLK pulses, and a standard controller wouldn't care about this either.<br /><br />My original idea was to send a 2-bit packet to drive two rumble motors, but this can be used to just send data in general. If you wanted to control LEDs on the controller, or some kind of expansion port on the controller, or whatever.<br /><br />You can send data to both controllers simultaneously by interleaving the bits of both packets and alternating between reading 4016/4017 on each bit. This would be insufficient to accidentally trigger the 1-0-1-0 termination sequence, so you'd be good to go.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Aug 25, 2014 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Even better: Implement this idea with a flash cart (powerpak) and have &quot;plug-ins&quot; for different games with checks against certain memory locations and send appropriate rumble commands.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 25, 2014 12:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Perhaps it might be useful to phrase this in terms of recovering a standard <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus" class="postlink">SPI</a> chip select signal from clock and strobe signals. Clock on a port while strobe is set would then assert select, and two negative edges on the strobe (&quot;MOSI&quot; in SPI lingo) without any clock would deassert it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Mon Aug 25, 2014 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Aren't there unused pins on the controller connection?<br />Are there ways for them to be accessed in a stock NES?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Aug 25, 2014 6:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The other pins aren't connected to any outputs coming from the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Aug 25, 2014 9:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nope, the strobe and the CLK are the only two things the CPU can use for sending data to the controller. Everything else was routed to the expansion port on the bottom of the NES.<br /><br />The Famicom is a different story; the expansion port (which you'd plug the controller into anyway) has extra lines the CPU can use to send data, but it'd probably work in a similar way to the strobe/CLK method I described, since packet transfers boil down to preparing a bit of data on one line and sending a pulse down the other when it's ready.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 25, 2014 9:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent">Aren't there unused pins on the controller connection?</div><br />The NES controller has two more slave-to-master pins, used by the Zapper, Power Pad, and Arkanoid controller. There is only one master-to-slave data pin (the &quot;strobe&quot;), whose voltage is the same on both ports. This means device selection for receiving rumble data has to be handled with just that single strobe signal and each side's clock. But this protocol is a clever way of producing a select signal. In fact, I think it could be used for general SDIO, allowing the NES to control all sorts of peripherals. Or to communicate with a slave Game Boy over Game Link. Or with appropriate level translation, it could be used with <a href="http://www.gamesx.com/controldata/psxcont/psxcont.htm" class="postlink">PlayStation controllers</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue Aug 26, 2014 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So the cool thing with this protocol is the fact that it doesn't interfere with the operation of standard controllers. That means the rumble device can just be something you clip onto the controller, and it can have its own plug that plugs into the NES controller port, with the plug having a passthrough port that the controller itself plugs into. The rumble device can just listen for the protocol and act on the signals accordingly while the standard controller just does its thing like nothing's different.<br /><br />In other words, no need to mutilate NES controllers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Tue Aug 26, 2014 1:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">Nope, the strobe and the CLK are the only two things the CPU can use for sending data to the controller. Everything else was routed to the expansion port on the bottom of the NES.</div>And supposing one made an expansion device to help handle this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue Aug 26, 2014 6:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure what advantage that'd have over just using strobe/clk the way I described in my first post. You'd gain two more CPU-&gt;Peripheral lines, but what would that change?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Sep 01, 2014 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm having a hard time figuring out if there's a way to mitigate the DPCM bug while trying to communicate to the controller. If the DPCM read occurs when you're trying to read from the controller port (to send a bit), the bit will be sent twice, and there's no way to know that it happened.<br /><br />Just as a quick idea, I was thinking of switching the role of the strobe and clk lines, where a clk pulse while strobe is 1 changes the bit-to-be-sent from 0 to 1, and a falling edge on strobe commits the bit. Then a clk pulse while strobe is 0 terminates the packet. That way, multiple clks would be redunant, avoiding the DPCM bug.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Sep 01, 2014 1:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you are communicating with a microcontroller, rather than a shift register, the microcontroller can just reject bits that occur on successive M2 cycles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Sep 01, 2014 1:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The glitched clocks seemed to be a shorter pulse, I hadn't tested the idea, but I was thinking that measuring the pulse-width might work.  A bit-banged synchronous protocol I figured would be best (because why not transfer multiple bits at a time), it would trigger an interrupt on CLK, then check the CLK state after a certain time, before proceeding to the next bit(s).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue Sep 02, 2014 1:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@lidnariq: M2 does not appear on the controller ports; in fact, there's absolutely no CPU clock or anything of the sort, just the port read CLK.<br /><br />@memblers: I thought about measuring the CLK pulse too, and/or seeing if two CLK pulses were impossibly close together (like, quicker than if the CPU were actually executing two $4016 reads in software), but there's nothing reliable to compare the timing against.<br /><br />If what wikipedia is telling me about bit-banging is what you're referring to, then it's pretty much what I was suggesting before. The only difference now is that the two lines are swapped, so the software manually sends a &quot;clock&quot; signal down the strobe line, and one or more pulses on the CLK line (between strobe-clocks) signifies a 1 bit instead of a 0, so the sequence now is:<br /><br /><ol style="list-style-type: decimal"><li>Set strobe to 1 and read $4016 to begin a packet transfer on the controller 1 port.</li><li>Set strobe to 0 then 1.</li><li>To send a &quot;0&quot; bit, skip to the next step. To send a &quot;1&quot; bit, read $4016 (to send a CLK pulse) and then continue to next step.</li><li>Set strobe to 0 to send the current bit.</li><li>If there's still more bits to send, set strobe to 1 and go to step 3.</li><li>While strobe is 0, read $4016 to terminate the packet. (Coincidentally, this also returns the first button state)</li></ol><br />The reason I thought about this method instead is because the effect of a DPCM conflict is that one CLK pulse turns into two. So, by rendering multiple successive CLK pulses meaningless, it mitigates DPCM conflicts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 02, 2014 7:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adding rumble to controllers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">there's nothing reliable to compare the timing against.</div><br />There's always the option of comparing it to your microcontroller's internal clock, or using some sort of RC circuit with a specific time constant to stretch the clock pulses.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>