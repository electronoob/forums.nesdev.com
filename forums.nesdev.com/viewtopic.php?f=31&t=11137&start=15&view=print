<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Flight Minigames (canceled)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Flight Minigames (canceled)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=31&amp;t=11137">http://forums.nesdev.com/viewtopic.php?f=31&amp;t=11137</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed May 21, 2014 3:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">43110 wrote:</div><div class="quotecontent">I think should start looking into tepples sound engine. I believe it's pretty much music.s sound.s and musicseq.* in RHDE.<br /><br />I do like the 64 note range of famitone2</div><br />Patterns in my music engine support a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TRANSPOSE</tt> command that changes the base note for the remainder of a pattern. For example, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">TRANSPOSE,12</tt> shifts the rest of the pattern up by an octave, and RHDE's combat theme uses this. It just has the two-octave range for a more compact encoding of the common case.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and my edit that allows different tempo and pitch setups.</div><br />Which &quot;tempo and pitch&quot; setups are you talking about?<br /><br />(And is <a href="http://forums.nesdev.com/viewtopic.php?p=128821#p128821" class="postlink">this tune</a> happy or crappy?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Wed May 21, 2014 3:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ahh, two-octave local range per pattern range makes sense. The 64 note range I'm talking about is the period table.<br /><br />Tempo and pitch for adjusting between NTSC, PAL, <em>and</em> Dendy TV systems. I hacked that in famitone2 by using the upper two bits of a variable.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">(And is <a href="http://forums.nesdev.com/viewtopic.php?p=128821#p128821" class="postlink">this tune</a> happy or crappy?)</div><br />umm, both? It'll be good for the flappy mode featuring a butterfly. Unless you want to exclusively use it for that shoot-em-up game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BruceMcF</b> [ Wed May 28, 2014 9:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">43110 wrote:</div><div class="quotecontent"> Also this is probably the one piece of code that the cpu will spend a good bulk of it's time on.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;<br />; multi purpose multi byte operation<br />; &#91;API sniped but will be described in full source&#93;<br />bignum_op:<br />&nbsp; ldx temp+4 ; edit, don't touch temp+4<br />-<br />&nbsp; lda (temp+0), y<br />&nbsp; eor temp+5&nbsp; &nbsp; ; a value of $ff will make this a subtraction<br />&nbsp; adc (temp+2), y<br />&nbsp; sta (temp+0), y<br />&nbsp; iny<br />&nbsp; dex ; edit, don't touch temp+4<br />&nbsp; bne -<br />&nbsp; rts</div></div><br /><br />If you are using these for four byte values, then this lets you set the size once for a series of operations without having to reset it all the time. But count up how many times they appear ... if they appear too many times, the overhead of clear and carry and setting up the EOR byte will overwhelm the 11 bytes saved, and you are better off with:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bignm_add:<br />&nbsp; clc<br />&nbsp; ldx temp+4<br />-<br />&nbsp; lda (temp+0), y<br />&nbsp; adc (temp+2), y<br />&nbsp; sta (temp+0), y<br />&nbsp; iny<br />&nbsp; dex<br />&nbsp; bne -<br />&nbsp; rts<br /><br />bignm_sub: ; above subtracts 0 from 2 and stores in 0 ~ is that the right way around?<br />&nbsp; sec<br />&nbsp; ldx temp+4<br />-<br />&nbsp; lda (temp+2), y<br />&nbsp; sbc (temp+0), y<br />&nbsp; sta (temp+0), y<br />&nbsp; iny<br />&nbsp; dex<br />&nbsp; bne -<br />&nbsp; rts </div><br /><br />Its only a narrow range of number of calls of bignum_op where it actually nets saving space, when extra calling overhead is taken into account. If there are like two routines that add and two that subtract, you should be ahead, by a few bytes, but even at four routines that do each, the extra call overhead may offset the squeezing of bytes from the called routines.<br /><br />Similar for clear and copy: <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">big_cpy:<br />&nbsp; ldx temp+4<br />-<br />&nbsp; lda (temp+2), y<br />&nbsp; sta (temp+0), y<br />&nbsp; iny<br />&nbsp; dex<br />&nbsp; bne -<br />&nbsp; rts<br /><br />big_clr:<br />&nbsp; ldx temp+4<br />&nbsp; lda #0<br />-<br />&nbsp; sta (temp+0), y<br />&nbsp; iny<br />&nbsp; dex<br />&nbsp; bne -<br />&nbsp; rts </div><br /><br />... allow clearing and copying blocks at a time (set temp+4=y=0), but used during four byte FP integer operations, allows temp+4 to hold the same size index and allows avoiding set-up overhead. There's a double purpose version using &quot;AND temp+5&quot;, but at a net saving of 9 bytes, its a close run thing whether extra set-up overhead swamps the crunching of the factored operation.<br /><br />In the middle case, if the program flow allows the temp+5 set-up to be stable over multiple operations, so there is not much overhead setting temp+5, but the carry flag is set or cleared more than four times total in calling big_num, you save space just by setting up distinct entry points to do that:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;<br />bignm_sub:<br />&nbsp; sec<br />&nbsp; bcs +<br />bignm_add:<br />&nbsp; clc<br />+<br />&nbsp; ldx temp+4<br />-<br />&nbsp; lda (temp+0), y<br />&nbsp; eor temp+5&nbsp; &nbsp; ; a value of $ff will make this a subtraction<br />&nbsp; adc (temp+2), y<br />&nbsp; sta (temp+0), y<br />&nbsp; iny<br />&nbsp; dex<br />&nbsp; bne -<br />&nbsp; rts</div><br /><br />... though I still wonder whether its:<br /><br />OP2 - OP1 =: OP1<br /><br />... or ... OP1 - OP2 =: OP1 ... in which case it should be &quot;lda (temp+2),y&quot;, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Thu May 29, 2014 9:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've updated the first posted the work I have done this month (v0.2). There's nothing apparently new in the compiled ROM, but the source has changed a bit. Additionally I'm now planing for 6 games instead of 8.<br /><br />About what BruceMcF posted:<br />My motivation for even merging the two multi byte operations was to rid of sequences of jump subroutines, and the major optimization was actually having to do with loading all the prams from three byte tables (see line 1058 in the source of v0.2).<br /><br />I was trying to preserve X through the whole chain of subroutine calls so that at the top I can do a loop like<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ldx #0<br />-<br />  jsr do_math_step<br />  inx<br />  cpx #32<br />  bcc -<br /></div><br />but looking again at what I have now, I really should change that to a counter in zeropage, since I had to make an unnecessary stack push in the multiplication subroutine.<br /><br />Also if you want to see another thing I did with a hard to compute the trade off, I took an idea of having <a href="http://forums.nesdev.com/viewtopic.php?p=129044#p129044" class="postlink">list of addresses in stack</a> and made my game state selector push such a list instead of having a sequence of jsr in a subroutine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BruceMcF</b> [ Fri May 30, 2014 10:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">43110 wrote:</div><div class="quotecontent">About what BruceMcF posted:<br /><br />I was trying to preserve X through the whole chain of subroutine calls so that at the top I can do a loop like<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ldx #0<br />-<br />  jsr do_math_step<br />  inx<br />  cpx #32<br />  bcc -<br /></div><br />but looking again at what I have now, I really should change that to a counter in zeropage, since I had to make an unnecessary stack push in the multiplication subroutine. </div><br />Yes, its frequently better to use the X register in inner loops and an index register for outer loops.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Also if you want to see another thing I did with a hard to compute the trade off, I took an idea of having <a href="http://forums.nesdev.com/viewtopic.php?p=129044#p129044" class="postlink">list of addresses in stack</a> and made my game state selector push such a list instead of having a sequence of jsr in a subroutine. </div><br /><br />Also, if you have a pool of precomputed &quot;RTS addresses&quot; in a known page, you can set up outer factor routines as jump targets:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;<br />routine1: ; routine cannot span a page, cannot start on 0 location in a page<br />&nbsp; &nbsp;lda #&gt;rtn1+beg-1<br />&nbsp; &nbsp;ldx #&gt;rtn1_end+1 ; rtn1_end generated from source so points to low byte<br />vec_call:<br />&nbsp; &nbsp;sta temp+5<br />-<br />&nbsp; &nbsp;lda vec_pool,x<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;cpx temp+5<br />&nbsp; &nbsp;bne -<br />&nbsp; &nbsp;rts ; call set of vectors<br /><br />routine2: ; see warnings above<br />&nbsp; &nbsp;lda #&gt;rtn2+beg-1<br />&nbsp; &nbsp;ldx #&gt;rtn2_end+1<br />&nbsp; &nbsp;bne vec_call<br />... </div><br /><br />And further crunching in storage of the vector sequences is possible from vectors being allowed to overlap:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;<br />vec_pool:<br />rtn1_beg:<br />&nbsp; &nbsp;doop1-1 ; first operation of routine1<br />&nbsp; &nbsp;doop2-1<br />&nbsp; &nbsp;doop3-1<br />rtn2_beg:<br />&nbsp; &nbsp;doop4-1 ; first operation of routine2<br />&nbsp; &nbsp;doop5-1<br />rtn1_end:<br />&nbsp; &nbsp;doop6-1 ; last operation of routine1<br />rtn2_end:<br />&nbsp; &nbsp;doop7-1 ; last operation of routine2<br />&nbsp; &nbsp;; ... </div><br /><br />The fixed space overhead of that particular stack stuffing is 12 bytes (there are of course post-indexed versions that allow the vectors to be anywhere in visible memory). The outer routines break even compared to identical subroutine factor code at six unique operations calls per outer routine, with one byte saved per inner operation call after that point. And of course any overlapping operations in the pool are basically free space to all but one of the calling routines.<br /><br />So that rewards programming that relies on lots of little factors that are heavily re-used, lego-block style, and factor design that favors the use of overlapping &quot;phrases&quot; of the operation inner factors.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Fri May 30, 2014 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had to read that several times before I got it. While I am aiming for subroutine reuse, I don't think things will logically interleave like that. But you did mention putting subroutines in the same page, <s>and I then saw that the address really only have 10 bits for a 4KiB ROM. That means I&#39;m now wasting 6 bits for every address in the list, and that&#39;s not too far from having a whole implied byte automatically inserted by the list loader.</s><br /><br />Edit: Nevermind, I miscounted. 4KiB is 12 bits, causing only 4 bits of waste per address.<br /><br />but before I start arranging assembly code like a falling block puzzle game, I need to program the pieces first.<br /><br />On a related note, I have about 640 unused bits from the note_period table. What can I put there that uses only the upper 5 bits of 128 bytes?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BruceMcF</b> [ Fri May 30, 2014 7:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">43110 wrote:</div><div class="quotecontent">I had to read that several times before I got it. While I am aiming for subroutine reuse, I don't think I'll have things logically knitted like that. But you did mention putting subroutines in the same page, and I then saw that the address really only have 10 bits for a 4KiB ROM. That means I'm now wasting 6 bits for every address in the list, and that's not too far from having a whole implied byte automatically inserted by the list loader. </div><br />But you also want the list loader to be concise.<br /><br />Without the &quot;falling block puzzle game&quot; side of it, you can have counted vectors anywhere in the ROM without a count byte by using the high bit to flag the beginning of the list, but after working that through, its a bit more intricate and brittle than I like.<br /><br />Vectors with an index to their own end in front don't let you play the &quot;sliding block puzzle&quot; games, but they are easier to follow what is going on.<br /><br />And there really is not any binding constraint with the vector pool approach in terms of how many vectors it supports. If you have so many lists of subroutine calls that you've used up one vector pool, you've saved more than enough space to cover the overhead for a second vector pool page.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;<br />;&nbsp; &nbsp; NB. A &quot;vector pool&quot; is a page with a set of subroutine address vectors in it.<br />;&nbsp; &nbsp; The leading byte is the position in the page of the last byte in the vector.<br /><br />routine1: ; the first entry in vector pool 1.<br />&nbsp; &nbsp;ldx #&lt;vector1<br /><br />go_pool1:<br />&nbsp; &nbsp;stx temp+5<br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;tax<br />-<br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;cpx temp+5<br />&nbsp; &nbsp;bne -<br />&nbsp; &nbsp;rts ; call subroutine vectors in turn from stack page<br /><br />routine2:<br />&nbsp; &nbsp;ldx #&lt;vector2<br />&nbsp; &nbsp;jmp go_pool1<br /><br />routine3: ; NB. routine3 is only four ops, so there is no space saving from the vector<br />&nbsp; &nbsp;jsr op3_1<br />&nbsp; &nbsp;jsr op3_2<br />&nbsp; &nbsp;jsr op3_3<br />&nbsp; &nbsp;jmp op3_4<br /><br />routine4:<br />&nbsp; &nbsp;ldx #&lt;vector4<br />&nbsp; &nbsp;jmp go_pool1<br /><br />; ... and so on, until &amp; unless the vpool1 page is full up, then (supposing it was 30 routines that filled it up):<br /><br />routine31: ; the first entry in vector pool 2.<br />&nbsp; &nbsp;ldx #&lt;vector31<br /><br />go_pool2:<br />&nbsp; &nbsp;lda vpool2,x<br />&nbsp; &nbsp;tax<br />-<br />routine1: ; the first entry in vector pool 1.<br />&nbsp; &nbsp;ldx #&lt;vector1<br /><br />go_pool1:<br />&nbsp; &nbsp;stx temp+5<br />&nbsp; &nbsp;lda vpool2,x<br />&nbsp; &nbsp;tax<br />-<br />&nbsp; &nbsp;lda vpool2,x<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;cpx temp+5<br />&nbsp; &nbsp;bne -<br />&nbsp; &nbsp;rts ; call subroutine vectors in turn from stack page<br /><br />routine32:<br />&nbsp; &nbsp;ldx #&lt;vector2<br />&nbsp; &nbsp;jmp go_pool2<br />...<br /></div><br /><br />... so the limit of distinct vectors to a single binary page is not an overall limit on the number of vectors altogether. <br /><br />And if (as supposed above), 30 vectors filled up a vector page, then using the vector page saved 30 bytes, since each vector pool call is one byte shorter than passing a full address, which <br /><br />But if you want to really crunch ... yeah the addresses can be packed. EDIT ~ yeah, 4K is 12 bits, so not just can't be bothered packing more than two, CAN'T pack more then two ~ 2 bits to 4 bits fixed put in place w/out more edit markets  ~ the original was to crunch routines into the 4K &quot;Golden RAM&quot; in the C64 above the ROM in the memory map and below the I/O, but it was reconstructed from memory, and I got some of the details off ~ plus multiplied when I should have been dividing (oops). /EDIT<br /><br />If there are an odd number of routines, its the address at the head of the list that is not unpacked, so in the vector pool, an odd list would like like (dummy, so op_# is the place of the op in the sequence, not the actual name, psuedo-assembler syntax):<br />   .byte <br />   .word op1<br />   .byte &lt;op_2, &lt;op_3, ((&gt;op_2 .AND. $0F)*16)+(&gt;op_3 .AND $0F)<br />   .byte &lt;op_4, &lt;op_5, ((&gt;op_4 .AND. $0F)*16)+(&gt;op_5 .AND $0F)<br />   .byte &lt;op_6, &lt;op_7, ((&gt;op_6 .AND. $0F)*16)+(&gt;op_7 .AND $0F)<br />... <br /><br />... with the packed address business best constructed as a macro in your favorite 6502 macro assembler, to get it right once and avoid lurking typos.<br /><br />Note that the high bit of the address is stripped by the packing process and replaced by the routine.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;<br />;&nbsp; &nbsp; NB. The leading byte is the size of the packed string of vectors in bytes.<br /><br />routine1: ; the first entry in vector pool 1.<br />&nbsp; &nbsp;ldx #&lt;vector1<br /><br />go_pool1:<br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;sta temp+5<br />&nbsp; &nbsp;tax<br />-<br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;and #$0F<br />&nbsp; &nbsp;ora #$80<br />&nbsp; &nbsp;pha<br /><br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;cmp temp+5<br />&nbsp; &nbsp;beq +<br /><br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;pha<br /><br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;cmp temp+5<br />&nbsp; &nbsp;bne -<br />+<br />&nbsp; &nbsp;rts ; call subroutine vectors in turn from stack page<br /></div><br /><br />44 vs 16 bytes, so 28 bytes extra space required by the processing. 56 pairs of subroutine vectors crunched together and that breaks even.<br /><br />So that is worth considering if the vector pool page is more than half full.<br /><br />And since each vector pool has its own engine, if you have own full vector pool page and one only quarter full, you can put packed lists in the full one, and unpacked lists in the only partly full one.<br /><br />Personally, if I was using any, I'd use the simpler one, because its easier to just define the routines using &quot;.word&quot; assembler instructions with the label for the routine.<br /><br />This is all a kind of building a Forth-like inner interpreter without a Forth assembler/compiler system running in the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Mon Jun 02, 2014 8:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I tried, but Summer is on me and I have no time until the start of the next school year in August. I look forward to the multi-cart production.<br /><br />Before I go, here's the list of games I had planned in this:<br /><ul><li>Game A: like the Helicopter game</li><li>Game B: An upside-down version of Balloon Fight physics. What should the character be?</li><li>Game C: A Flying Saucer that travels in a sine wave unless you press A, (I can place the sine table in the high byte of the note period table)</li><li>Game D: A paper airplane that always travels ±45°.</li><li>Game E: An electric spark that travels on one of two lanes. The A button switch between the two.</li><li>Game F: <s>flappy butterfly</s> A fluttering butterfly.</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BruceMcF</b> [ Mon Jun 02, 2014 1:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BruceMcF wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;<br />;&nbsp; &nbsp; NB. A &quot;vector pool&quot; is a page with a set of subroutine address vectors in it.<br />;&nbsp; &nbsp; The leading byte is the position in the page of the last byte in the vector.<br /><br />routine1: ; the first entry in vector pool 1.<br />&nbsp; &nbsp;ldx #&lt;vector1<br /><br />go_pool1:<br />&nbsp; &nbsp;stx temp+5<br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;tax<br />-<br />&nbsp; &nbsp;lda vpool1,x<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;cpx temp+5<br />&nbsp; &nbsp;bne -<br />&nbsp; &nbsp;rts ; call subroutine vectors in turn from stack page<br />... {etc.}<br /></div> </div><br /><br />Note that a second way to use the redundant 4 bits per address is as data.<br /><br />List: .byte &lt;op1, &gt;op1 .AND $0F, &lt;op2, &gt;op2 .AND $0F, ...<br /><br />Call:<br />A-reg: index to first address in list<br />X-reg: index of first address of following routine<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">routine1:<br />&nbsp; &nbsp;lda #&lt;lst_rtn1<br />&nbsp; &nbsp;ldx #&lt;lst_rtn2<br />&nbsp; &nbsp;jmp call_vec<br />...<br /><br />call_vec:<br />&nbsp; &nbsp;sta temp+5<br />-<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;lda vec_pool,x ; high byte address, data in high nybble<br />&nbsp; &nbsp;and #$0F<br />&nbsp; &nbsp;ora #$80<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;lda vec_pool,x ; low byte address<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;cpx temp+5<br />&nbsp; &nbsp;bne -<br />&nbsp; &nbsp;rts </div><br /><br />This packs operation scripts of up to 128 routines total into a page, since the length information is entirely embedded by the call. Having an all-address pool makes it reasonably straightforward to use the high nybble of the even address as 128 nybbles of data.<br /><br />I'm thinking of butterfly as something that would fly with a bit of unpredictable imprecision, so it's something where a wrap-around sequence of +/- trim values could be laid out to make it &quot;fluttery&quot;, but various processes that could be given character with a cycle of signed 4 bit integers (-8 through +7) could work as well.<br /><br />nnyb2int: ; signed high nybble to signed integer<br />   php ; remember sign<br />   lsr a<br />   lsr a<br />   lsr a<br />   lsr a<br />   plp<br />   bpl +<br />   ora #$F0<br />+ rts<br /><br />; flutvflo = $07 for 16, 8-step cycles; $0F for 8, 16 step cycles, $1F for 4, 32 step cycles<br />flutvflo:<br />   .byte $0F<br /><br />inc_flutter: ; increment wrap around based on mask in flutvflo:<br />   inc flutter<br />   lda flutter<br />   bit flutvflo<br />   bne +<br />   clc<br />   sbc flutvlfo ; this is a trick ~ &quot;clc / sbc N&quot; is the same as &quot;sec / sbc {N+1}&quot;, and the mask+1 is the wrap-around<br />   sta flutter<br />+ lsr a<br />   tax<br />   inx<br />   lda vec+pool,x ; data is in high nybble of high byte of address<br />   rts<br /><br />Have a good summer!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Mon Jul 07, 2014 7:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I been studying a self made disassembly of a old Nintendo game, and it's been an interesting experience, so I guess I'll bump this thread for the question I want to ask instead of making another thread. I hope I can get this game started again.<br /><br />Suppose I do all the logic of the entire game by lots of small subroutines. Some subroutines might be used only once and inlined or be called as the last thing in another subroutine and jmp'ed to. A conditional jump might be optimized into a direct branch by rearranging code, or a conditional return might branch to a rts above the routine if the one below is to far away.<br /><br />Is there some tool that can generate a call graph and automatically make these optimizations? If not, what parser can I work off of to quickly make my own optimizer? (I'm ok with python stuff)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jul 07, 2014 8:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Years ago, I wrote a program in Python to make a call graph of a ca65 program. <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8434" class="postlink">This is what the graph looked like</a>. Should I try posting the program?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Tue Jul 08, 2014 7:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sure, why not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JRoatch</b> [ Wed Aug 06, 2014 1:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Flight Minigames (canceled)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've given up on this project so that I can clear my mind for the planning of another nes game, and to give time to gear myself up for the next competition.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>