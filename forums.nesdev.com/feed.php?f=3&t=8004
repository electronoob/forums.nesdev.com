<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8004" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-07-28T00:27:26-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8004</id>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2011-07-28T00:27:26-07:00</updated>
<published>2011-07-28T00:27:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82086#p82086</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82086#p82086"/>
<title type="html"><![CDATA[Real-time 65816 debugger -- GSBug]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82086#p82086"><![CDATA[
Oh wow, that's exactly how I do things with my emulator: save M/X/E processor status bits for every address that an opcode executes, and also save whether the address was read/written/executed. Allows full forward and backward disassembly at any point, but requires code be executed at least once for it to work. Map is saved across multiple runs of the emulator, assuming the checksum stays the same.<br /><br />It falls apart a bit on memory-mapped code, but there's only two of those, and one's been translated anyway, so ... what can you do?<br /><br />But you've given me a great idea: optionally generate the usage map with my cross-assembler, so that the debugger instantly knows about all opcode sizes and valid code areas.<br /><br />That along with named labels/registers should make it quite friendly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Thu Jul 28, 2011 12:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-07-27T05:20:30-07:00</updated>
<published>2011-07-27T05:20:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82064#p82064</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82064#p82064"/>
<title type="html"><![CDATA[Real-time 65816 debugger -- GSBug]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82064#p82064"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />I wonder how the disassembler knows about the size of M when executing those two LDA # instructions.<br /></div><br />The Apple II monitor (not GSBug, something far more primitive) saves "AXYPS", and the IIGS version also displays the new 65816 regs. The built-in disassembler probably disassembles based on the saved values of M and X bits in P.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jul 27, 2011 5:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2011-07-26T23:22:01-07:00</updated>
<published>2011-07-26T23:22:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82061#p82061</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82061#p82061"/>
<title type="html"><![CDATA[Real-time 65816 debugger -- GSBug]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82061#p82061"><![CDATA[
I wonder how the disassembler knows about the size of M when executing those two LDA # instructions. Kind of like the loss of $ on every opcode, makes sense for a disassembler that never shows decimal.<br /><br />&gt; The old SoftICE debugger for x86 was the closest thing<br /><br />When I had only one PC and always had Winamp going, SoftICE could be quite annoying, but yeah, that was one awesome program.<br /><br />&gt; plus the x86 is a bastard PITA<br /><br />Dear god, try writing an assembler for it. The REX extensions to the SIB extensions to the ModR/M extensions are just ... ugh.<br /><br />&gt; So when I see NES emulators' debuggers today having the worst UI design ever<br /><br />Debugger design is so amazingly difficult.<br /><br />I had a console that printed the last immediate statement for all processors to a single window, and you could step anything from the main window.<br /><br />Then I keep that, but add separate forward/backward disassembly windows, and find it's much less enjoyable to use.<br /><br />There's something really nice about having a single console where you can type in commands, but novices tend to freak out when they see it, and prefer the multi-window approach.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Tue Jul 26, 2011 11:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2011-07-26T08:00:30-07:00</updated>
<published>2011-07-26T08:00:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82045#p82045</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82045#p82045"/>
<title type="html"><![CDATA[Re: Real-time 65816 debugger -- GSBug]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82045#p82045"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />extremely technically detailed (not "hur derp derp you press Q and you quit, I like hot dogs") but reads easily.<br /></div><br />Good God I almost fainted with laughter reading this.  My coworkers were about to call in the Emergency Response Team fearing I was having a seizure.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Folks might wonder what the heck "Memory Protection" is as well, I can explain that if asked.<br /></div><br />I know absolute zero about the IIGS unfortunately but would *love* to be inundated with technical detail like this.  It's the kind of stuff I masturbate to at night.  [Can't find that thread right now and am afraid to search for "masturbate" in the NESDev forum while at work! haha]<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />So when I see NES emulators' debuggers today having the worst UI design ever, and having non-relevant crap on-screen, I get angry.  It's as simple as: "we had shit that worked just fine in 1993 yet it's now 2011 and people can't seem to develop something that makes sense?"  Old codgers like me judge easily I guess, but ultimately there's no reason this degree of control and capability can't be available.  NES-specific stuff could warrant its own window, absolutely (and we have the real estate for it; 24" monitors are the norm, usually 1680x1050 or higher, etc...), but for the CPU and general RAM/ROM, nothing beats this.<br /></div><br />I'm interested in your definition of "non relevant crap"?  I think there's a divergence of style, for sure.  Some like Nintendulator and FCEUX have all the stuff in one gargantuan window.  Others like NESICIDE have probably too many individual dockable windows containing singular pieces of debug information [like RAM, registers, etc.]  I did it that way, and arguably went too far to the extreme because people were complaining about having a gargantuan debug window with everything in it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Tue Jul 26, 2011 8:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2011-07-26T07:31:11-07:00</updated>
<published>2011-07-26T07:31:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82042#p82042</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82042#p82042"/>
<title type="html"><![CDATA[Real-time 65816 debugger -- GSBug]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8004&amp;p=82042#p82042"><![CDATA[
(Preface: the reason I'm posting this in the NESemdev forum is because this primarily revolves around a NES debugger; sure the same thing applies to a SNES debugger, but my main focus these days is on NES stuff...)<br /><br />In the past I've ranted and raved about how ORCA/M, the software/assembly development environment for the Apple IIGS, had an awesome <a href="http://gsport.sourceforge.net/images/printer0.png" class="postlink">CDA</a> called <a href="http://www.textfiles.com/apple/DOCUMENTATION/gsbug.tutorial" class="postlink">GSBug</a>.  I haven't been able to actually show anyone what it looks like since it's so old (circa early 90s), but the UI/design made perfect sense and fit all within a 80x25 screen with no nonsense.<br /><br />After MONTHS of nonsense with Syndicomm not getting me my ORCA/M manuals and disks, I finally got in touch with someone over there who got me such (the company was sold/handed off to another guy who was super responsive; pshew!).  So I wanted to show folks a picture of GSBug to give you some idea of just how the layout was and what you could do with the real-time debugger.  Again, remember this all fit on 80x25:<br /><br /><!-- m --><a class="postlink" href="http://jdc.parodius.com/lj/gsbug01.png">http://jdc.parodius.com/lj/gsbug01.png</a><!-- m --><br /><br />Now that I have my ORCA/M disks I can get GSBug installed (in a IIGS emulator) and make a video showing how the hell the thing works.  I imagine that would interest folks a lot more than just a screen shot.  The IIGS (particularly since it's 65816) is a lot more complex than its II (6502) counterpart, but the same design/layout/concept applies to the NES overall.<br /><br />I realise showing a screenshot doesn't do it much justice.  "Uh that's nice koitsu, a bunch of memory and register dumps, every NES emu with a debugger has that".  The amount of control/detail you have in this tool is pretty much unmatched by any emulator's debugger though.  I'd need to upload the ORCA/M manual PDF somewhere, but as I understand it it's a commercial manual (think: a book), so putting it on the net somewhere would probably upset Syndicomm.  With a paper book I could at least loan it to someone and demand it back though...  Anyway the GSBug section is almost 70 pages, and it's extremely technically detailed (not "hur derp derp you press Q and you quit, I like hot dogs") but reads easily.<br /><br />Folks might wonder what the heck "Memory Protection" is as well, I can explain that if asked.<br /><br />I can't tell you how much time I spent in GSBug when doing IIGS coding.  Way, WAY too much time.  I'm very opinionated about it because with something from that era I was able to debug pretty much anything on the fly; yet today, with machines that blow the IIGS out of the water in every way, nobody can seem to write anything that's even remotely sane or similar in its functionality.  The old SoftICE debugger for x86 was the closest thing, but it was a beast... plus the x86 is a bastard PITA.  But SoftICE is the closest comparison I can make, just with a weirder UI.<br /><br />So when I see NES emulators' debuggers today having the worst UI design ever, and having non-relevant crap on-screen, I get angry.  It's as simple as: "we had shit that worked just fine in 1993 yet it's now 2011 and people can't seem to develop something that makes sense?"  Old codgers like me judge easily I guess, but ultimately there's no reason this degree of control and capability can't be available.  NES-specific stuff could warrant its own window, absolutely (and we have the real estate for it; 24" monitors are the norm, usually 1680x1050 or higher, etc...), but for the CPU and general RAM/ROM, nothing beats this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Tue Jul 26, 2011 7:31 am</p><hr />
]]></content>
</entry>
</feed>