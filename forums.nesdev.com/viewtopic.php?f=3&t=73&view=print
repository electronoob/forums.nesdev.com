<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - A new NTSC palette generator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">A new NTSC palette generator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=73">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=73</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Mon Nov 29, 2004 1:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>A new NTSC palette generator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Written in Python.  Uses a different transformation to get the RGB values than Kevin's.  I've tried the palette it generates in FCEU and it looks much better than Kevin's does with some games (like FF3j)  The docstrings and the sites referenced in them pretty much explain everything.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&quot;&quot;&quot;AWJ's NTSC NES palette generator.<br /><br />Based on Kevin Horton's palette generator<br />and on information from these web pages:<br />http://unusedino.de/ec64/technical/misc/vic656x/colors/<br />http://en.wikipedia.org/wiki/YIQ<br />http://en.wikipedia.org/wiki/YUV<br />&quot;&quot;&quot;<br /><br />import array<br />import math<br /><br />hue = &#40;0, 285, 315, 345, 15, 45, 75, 105, 135, 165, 195, 225, 255, 0, 0, 0&#41;<br />&quot;&quot;&quot;Table of hue values &#40;theta coordinate on Q-I plane&#41;<br /><br />Assumption:&nbsp; That the 12 non-grey hues are equally spaced<br />30 degrees apart, and offset 15 degrees from the axes.<br /><br />This assumption allows hue 8 &#40;colors 08, 18, 28, 38&#41; to be<br />very close to pure yellow &#40;R = G &gt; B&#41;, and for hue 6 &#40;06, etc.&#41;<br />to be fairly close to pure red &#40;R &gt; G = B&#41;.<br /><br />The alternate assumption, that every third hue is aligned with<br />an axis, results in no hue being close to pure yellow or pure red.<br /><br />TODO: &#40;by someone else&#41;<br />verify hues using a video signal separator and a real NES<br />&quot;&quot;&quot;<br /><br />sat = 0.146<br />&quot;&quot;&quot;Saturation value &#40;radius coordinate on Q-I plane&#41;<br /><br />Assumption:&nbsp; That all 12 non-grey hues have the same saturation.<br />According to Kevin Horton &#40;and parsimony&#41; this is the case.<br /><br />Currently this is an arbitrary value, chosen such that<br />color 08 ends up with a blue level of exactly zero.<br />&quot;&quot;&quot;<br /><br />luma = &#40;&#40;0.50, 0.75, 1.00, 1.00&#41;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &#40;0.29, 0.45, 0.73, 0.90&#41;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &#40;0.00, 0.24, 0.47, 0.77&#41;&#41;<br />&quot;&quot;&quot;Table of luma &#40;Y&#41; values<br /><br />Assumption:&nbsp; That these values &#40;stolen from Kevin Horton's<br />QBASIC palette generator&#41; are accurate :&#41;<br /><br />Are color 00 and 2D, and 10 and 3D, really this close?<br />All hand-hacked NES palettes I've seen make them<br />distinctly different shades of grey from each other<br />&#40;3D brighter than 10, and 2D much darker than 00&#41;<br /><br />TODO: &#40;by someone else&#41;<br />verify values, ideally on several hardware versions<br />&#40;frontloader, toploader, original Famicom, AV Famicom&#41;<br />&quot;&quot;&quot;<br /><br />def yiq2rgb&#40;y, i, q&#41;:<br />&nbsp; &nbsp; &quot;&quot;&quot;Convert a YIQ color to RGB.<br /><br />&nbsp; &nbsp; Transformation matrix stolen from here:<br />&nbsp; &nbsp; http://www.mathworks.com/access/helpdesk/help/toolbox/images/ntsc2rgb.html<br />&nbsp; &nbsp; &quot;&quot;&quot;<br /><br />&nbsp; &nbsp; r = y + 0.956 * i + 0.621 * q<br />&nbsp; &nbsp; g = y - 0.272 * i - 0.647 * q<br />&nbsp; &nbsp; b = y - 1.106 * i + 1.703 * q<br />&nbsp; &nbsp; return &#40;r, g, b&#41;<br /><br /># Main program begins here<br /><br />nespalette = array.array&#40;'B'&#41;<br /><br />for i in range&#40;4&#41;:<br />&nbsp; &nbsp; for j in range&#40;16&#41;:<br />&nbsp; &nbsp; &nbsp; &nbsp; h = math.radians&#40;hue&#91;j&#93;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; if j &gt; 13:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = 0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y = 0<br />&nbsp; &nbsp; &nbsp; &nbsp; elif j == 0:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = 0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y = luma&#91;0&#93;&#91;i&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; elif j == 13:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = 0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y = luma&#91;2&#93;&#91;i&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; else:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s = sat<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y = luma&#91;1&#93;&#91;i&#93;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; r, g, b = yiq2rgb&#40;y, s * math.sin&#40;h&#41;, s * math.cos&#40;h&#41;&#41;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; # clip RGB values<br />&nbsp; &nbsp; &nbsp; &nbsp; if r &lt; 0.0: r = 0.0<br />&nbsp; &nbsp; &nbsp; &nbsp; if g &lt; 0.0: g = 0.0<br />&nbsp; &nbsp; &nbsp; &nbsp; if b &lt; 0.0: b = 0.0<br />&nbsp; &nbsp; &nbsp; &nbsp; if r &gt; 1.0: r = 1.0<br />&nbsp; &nbsp; &nbsp; &nbsp; if g &gt; 1.0: g = 1.0<br />&nbsp; &nbsp; &nbsp; &nbsp; if b &gt; 1.0: b = 1.0<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; # TODO: add gamma correction<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; # convert from &#91;0..1&#93; to &#91;0..255&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; r = round&#40;r * 255.0&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; g = round&#40;g * 255.0&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; b = round&#40;b * 255.0&#41;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; # add this color to the palette<br />&nbsp; &nbsp; &nbsp; &nbsp; nespalette.fromlist&#40;&#91;int&#40;r&#41;, int&#40;g&#41;, int&#40;b&#41;&#93;&#41;<br /><br />outputfile = file&#40;&quot;awj.pal&quot;, &quot;wb&quot;&#41;<br />nespalette.tofile&#40;outputfile&#41;<br />outputfile.close&#40;&#41;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Tue Nov 30, 2004 7:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmm...  I see plenty of views but no replies.  Let me try to explain what's going on a bit more, particularly what the deal is with this YIQ stuff.
<br />
<br />As you'll know if you've hooked up a DVD player, a television video signal is composed of three components:  a brightness or "Luma" (Y) component plus two components that determine color, a blue component (called U, Pb or Cb depending on scaling) and a red component (V, Pr or Cr).
<br />
<br />Colorspaces based on brightness, blue and red components are called YCC colorspaces and there are many different ones, the difference between them being the scaling of the three components with respect to each other.  The colorspace color television uses, whether NTSC or PAL, is YUV.  The colorspace digital video on a DVD uses, on the other hand, is YCbCr.  This gets converted to YUV by multiplying the blue component by one constant and the red component by another.
<br />
<br />The reason Kevin Horton's old palette generator produces inaccurate colors (oversaturated reds and weak blues) is that he mistakenly used an RGB conversion formula for one of the other YCC colorspaces out there, not YUV.
<br />
<br />Inside the innards of your television set, the YUV components undergo a linear transformation to get RGB values.  The Wikipedia entry for YUV includes the matrix to transform from RGB to YUV.  What a television performs, obviously, is the mathematical inverse of that transformation.
<br />
<br />Now, the color information in a color NTSC signal (the stuff that comes in on the "C" pin on an S-Video jack, or the "Chroma" RCA jack on an oldschool Commodore monitor) consists of two components:  I and Q.  These are <em>not</em> the red and blue color components, like you might expect; rather, they're a pair of coordinates on a plane which need to be <em>rotated</em> around the origin in order to get V and U.  The hue (aka tint) control on a television controls the angle of rotation.
<br />
<br />The reason NTSC uses this seemingly Rube Goldberg-esque setup, which is responsible for the unflattering alternate expansion "Never The Same Color", has to do with human color perception and optimal usage of bandwidth.  There's a brief explanation in the Wikipedia entry for YIQ.  Basically the I axis, which distinguishes the hues to which humans are most sensitive, gets the lion's share of bandwidth--in a standard broadcast signal, I uses nearly three times as much bandwidth as the less important Q.
<br />
<br />Note that a PAL color signal is completely different from NTSC, and actually directly encodes U and V, the blue and red components.  No rotation is required, and therefore PAL television sets don't need a hue control (and don't have one, unless they're dual-standard TVs that can take NTSC input)
<br />
<br />The "canonical" angle to rotate the I and Q coordinates by in order to get V and U is 33 degrees.  In other words, a television with hue correctly calibrated (by using a standard color bar pattern) will rotate the coordinates by exactly this angle.  The matrix found in the yiq2rgb() function in my program combines in a single transformation the 33° rotation of I and Q, with the conversion from YUV to RGB.
<br />
<br />So what has all of this got to do with the NES?  Well, the NTSC NES PPU's video output is a composite NTSC signal consisting of Y, I and Q components.  If we know what values of Y, I and Q the PPU produces for a given palette color, we can use the YIQ-to-RGB transformation to get the exact RGB colors that will be generated on a canonically calibrated television.
<br />
<br />Several years ago, Kevin Horton determined the Y value for each NES color and incorporated his findings into his palette generator (though as I mention in the program documentation I'm just a little bit suspicious of some of those values, and it would be nice if someone could reproduce and confirm them).  Determining experimentally the I and Q values for each hue is not as easy to do; you can buy a Y/C splitter for ten bucks, but splitting the C signal into I and Q requires more specialized hardware.  Therefore, for now, we have to settle for determining them inductively.
<br />
<br />The most parsimonious theory is that the I and Q values for the twelve nongrey hues are evenly spaced points on a circle.  Furthermore, it is most likely that the twelve points are either aligned on the I and Q axes or that the axes pass midway between two adjacent points.  The reason is that if either of these is the case, then the PPU only needs to be able to generate 6 different nonzero levels of I and 6 different nonzero levels of Q.  If the twelve points are <em>not</em> aligned with the axes, on the other hand, the PPU has to be able to generate 12 different nonzero levels of I and Q.
<br />
<br />Given that hue 8 is known to be more or less yellow, there are three arrangements of the 12 hues that seem reasonable:
<br />
<br />1: Hue 6 lies on the positive I axis.  This makes hue 8 slightly green.
<br />2: Hue 7 lies on the positive I axis.  This makes hue 8 slightly orange.
<br />3: The positive I axis passes midway between hues 6 and 7.  This makes hue 8 almost pure yellow.
<br />
<br />My program goes with arrangement 3, for two reasons.  The first is simply that it's the median hypothesis out of the three candidates.  The second is that I tested all three with an assortment of commercial games, including games whose colors on the real console I remember well (my NES is in a closet a few hundred miles away, but the colors of Ultima: Quest of the Avatar's overworld are permanently etched into my brain)  The games were evenly split between those that looked good with 1 and 3, and those which looked good with 2 and 3.  The clincher game was Final Fantasy 3 (despite the fact that I've never played it on a real NES)  Both 1 and 2 had obvious problems with this game: 1 resulted in very purple water, while 2 resulted in brownish grass and trees in towns.
<br />
<br />The other half of the question is the saturation--the radius of the circle plotted by the 12 hues.  If the saturation is too high, the RGB values for some colors go out of gamut and have to be clipped, resulting in distorted hues.  What I did was choose the largest saturation such that no color in the lower two brightnesses suffered clipping.  This was probably too conservative of me--the hues are certainly accurate, but the colors are quite dull.  What I'm going to try next is to use the largest saturation such that no color's <em>red</em> component goes out-of-gamut (Blue is the first component to go out-of-gamut with excessive saturation, followed by red and finally green)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Fri Dec 03, 2004 5:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i have implemented the ntsc -&gt; rgb conversion using the yiq transformation matrix, and i am quite happy with the results.
<br />
<br />i am using a simplified version of kevin's converter algorithm, with luma values at regular intervals: 0.0, 0.25, 0.5, 0.75, 1.0.
<br />
<br />there's also no need for the color angle table.  color angles simply start at 255 degrees (or whatever your "tint" preference is) and increase 30 degrees for each hue.
<br />
<br />good work on this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>laughy</b> [ Fri Dec 03, 2004 10:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>:)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is good stuff here.
<br />
<br />Here's the rgb output if anyone wants it (as I would) (in order):
<br />
<br />[r, g, b]
<br />
<br />(row 1)
<br />[128, 128, 128]
<br />[46, 77, 130]
<br />[65, 64, 148]
<br />[87, 53, 146]
<br />[105, 48, 125]
<br />[115, 50, 90]
<br />[114, 58, 51]
<br />[102, 70, 18]
<br />[83, 84, 0]
<br />[61, 95, 2]
<br />[42, 100, 23]
<br />[32, 98, 58]
<br />[34, 90, 97]
<br />[0, 0, 0]
<br />[0, 0, 0]
<br />[0, 0, 0]
<br />
<br />(row 2)
<br />[191, 191, 191]
<br />[86, 118, 171]
<br />[106, 105, 189]
<br />[128, 94, 187]
<br />[146, 89, 165]
<br />[156, 91, 130]
<br />[155, 99, 91]
<br />[143, 111, 59]
<br />[124, 125, 41]
<br />[102, 135, 43]
<br />[83, 141, 64]
<br />[73, 139, 99]
<br />[74, 131, 138]
<br />[61, 61, 61]
<br />[0, 0, 0]
<br />[0, 0, 0]
<br />
<br />(row 3)
<br />[255, 255, 255]
<br />[158, 190, 242]
<br />[177, 176, 255]
<br />[199, 166, 255]
<br />[218, 160, 237]
<br />[228, 162, 202]
<br />[227, 170, 163]
<br />[215, 183, 130]
<br />[195, 196, 112]
<br />[173, 207, 114]
<br />[155, 212, 136]
<br />[145, 210, 170]
<br />[146, 202, 210]
<br />[120, 120, 120]
<br />[0, 0, 0]
<br />[0, 0, 0]
<br />
<br />(row 4)
<br />[255, 255, 255]
<br />[201, 233, 255]
<br />[221, 220, 255]
<br />[243, 209, 255]
<br />[255, 204, 255]
<br />[255, 205, 245]
<br />[255, 213, 206]
<br />[255, 226, 173]
<br />[238, 239, 156]
<br />[216, 250, 158]
<br />[198, 255, 179]
<br />[188, 254, 214]
<br />[189, 246, 253]
<br />[196, 196, 196]
<br />[0, 0, 0]
<br />[0, 0, 0]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nessie</b> [ Fri Dec 03, 2004 3:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And here it is in binary format:
<br /><a href="http://nessie.emubase.de/files/NTSC.pal" class="postlink">NTSC.pal</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>laughy</b> [ Fri Dec 03, 2004 7:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>;)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><img src="http://www.laughy.net/nespal.png" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Great Hierophant</b> [ Fri Dec 03, 2004 8:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do you realize there is not a primary color anywhere near that palette?  That is awfully faded or pastel-like, surpassing FCE Ultra's NTSC emulation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Fri Dec 03, 2004 11:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Great Hierophant wrote:</div><div class="quotecontent">That is awfully faded or pastel-like, surpassing FCE Ultra's NTSC emulation.</div>
<br />
<br />That's due to the default saturation in the first version being too low, as I said.  I've subsequently changed it to 0.221.  Saturation is very much an "adjust-to-taste" setting: the only way to get a canonical value would be to compare the PPU's chroma output to the standard NTSC color bar pattern.  If you incorporate this formula into a NES emulator then saturation (and gamma, which I've also subsequently added) should be user-adjustable.
<br />
<br />To incorporate gamma correction, add the following lines to the program after clipping the RGB values:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"># correct gamma<br />r = pow&#40;r, 2.2 / gamma&#41;<br />g = pow&#40;g, 2.2 / gamma&#41;<br />b = pow&#40;b, 2.2 / gamma&#41;<br /></div>
<br />
<br />You'll also have to add a value for gamma to the program, of course.  The default value should probably be 2.2, which results in no gamma correction.
<br />
<br />The next frontier in palette emulation is to determine what the color emphasis bits do at the level of NTSC output.  I have a theory, but no way to confirm it or to get the exact numbers, since I don't have a devcart.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NewRisingSun</b> [ Thu May 19, 2005 12:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice. A couple of points:
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">we can use the YIQ-to-RGB transformation to get the exact RGB colors that will be generated on a canonically calibrated television.</div><br /><br />Note that most NTSC consumer TV sets are not and can't ever be "canonically calibrated", older devices even less than newer and cheaper devices less than expensive ones. Using the by-the-book decoder matrix will result in a palette that is "accurate" in that it looks the same as on a studio-quality monitor, but not "accurate" in that it looks the way the games were designed to look.<br />NES graphics artists most likely used and optimized for consumer-grade equipment, which systematically and intentionally deviates from the NTSC specification (i.e. wide-angle color demodulation, flesh-tone boost); with Japanese TV sets using different algorithms than US TV sets (for example, Sony TVs have an "AXIS" setting in service mode that can be set to "US" or "JAPAN").<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hue 6 lies on the positive I axis. This makes hue 8 slightly green.</div><br /><br />This one is correct. Hue 8 is a yellowish green on a NTSC-faithful color decoder at the "canonical" hue setting.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Both 1 and 2 had obvious problems with this game: 1 resulted in very purple water, while 2 resulted in brownish grass and trees in towns.</div>
<br />
<br />That's exactly the problem you're always going to have with a 100% faithful NTSC decoder, no matter what your tint setting is. All Japanese games are designed for Japanese consumer TV sets, which place the I and Q axis about 105 to 120 degrees apart (standard NTSC uses 90 degrees, as we know) and boost yellows (I&gt;Q colors) to make Asian fleshtones more "natural" on the "colder" 9300K phosphors that they use in Japan.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Thu May 19, 2005 8:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I made a hack to the palette generator that generates one I like a little better.
<br />
<br />It doesn't matter how saturated I make the colors, blue always ended up too strong, and red always ended up too weak, so I just flip flopped them (red got outputted to b, and blue got outputted to r), and then I adjusted the hues to make the colors right, and it made a nice palette... the yellow got slightly more brown as it got darker, and red now can get strong without blue getting over saturated.
<br />
<br />But that was just my personal preference, and I know it's probably not accurate, but it looks good to me. I read that red on a TV was the strongest color... like if you turned the color saturation WAY up, the red would get really strong and bleed into the other colors first.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri May 20, 2005 2:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Isn't it impossible to emulate the NES color accurately without handling where pixels fall relative to the pixel clock or something like that? This seems the direction to go for accurate color rendering. A palette can only go so far, and if the emulator isn't taking the effect of the pixel's position into account, each palette is a tradeoff and will make some games look better than others.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NewRisingSun</b> [ Fri May 20, 2005 4:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That should only apply to "artifact colors", like on the Apple ][ or the CGA's 160x200 composite color mode, where the color is determined by which monochrome pixel columns are illuminated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Mon Jun 27, 2005 6:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent">Nice. A couple of points:<br /><br />(snip)<br /><br />NES graphics artists most likely used and optimized for consumer-grade equipment, which systematically and intentionally deviates from the NTSC specification (i.e. wide-angle color demodulation, flesh-tone boost); with Japanese TV sets using different algorithms than US TV sets (for example, Sony TVs have an "AXIS" setting in service mode that can be set to "US" or "JAPAN").</div>
<br />
<br />This is very interesting information.  Can you provide more details as to how US and Japanese sets differ from each other and from the NTSC specification, or does it vary from manufacturer to manufacturer?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jun 27, 2005 7:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you do not emulate "artifact colors", then the bricks in underground levels of Super Mario Bros. won't look like those on real NES hardware. Instead, they might look like the bricks on a VS Unisystem or a PlayChoice 10.
<br />
<br />Anyway, the output of the PPU in palette values $x1-$xC is a square wave that toggles between the values used for the $x0 and $xD gray series. This should help you determine the correct saturation.
<br />
<br />As for hue spacing, at least $x1, $x3, $x5, $x7, $x9, $xB are spaced evenly, and so are $x2 through $xC even. The spacing between $x1 and $x2, between $x3 and $x4, and so on seems like it would depend on the duty cycle of the master clock (21.48 MHz, 6*colorburst), as the PPU's hue generator is based on a 12-step counter clocked on positive and negative edges.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Mon Jun 27, 2005 7:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Anyway, the output of the PPU in palette values $x1-$xC is a square wave that toggles between the values used for the $x0 and $xD gray series. This should help you determine the correct saturation.</div><br /><br />So colors 01-0C oscillate between the values of 00 and 0D, 11-1C oscillate between 10 and 1D, et cetera?  That would mean that the lightest row of non-gray colors is approximately half as saturated as the other three rows.  Great information.  How accurate are kevtris's values for the luminances of the gray colors?<br /><br />I daren't suppose you know the details of how the color emphasis bits affect the output...<br /><br />"artifact colors" are unfortunately outside the scope of a simple palette-generating algorithm, though it would be interesting (but probably beyond my skill) to add them to an emulator.<br /><br /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hue 6 lies on the positive I axis. This makes hue 8 slightly green.</div><br /><br />This one is correct. Hue 8 is a yellowish green on a NTSC-faithful color decoder at the "canonical" hue setting.</div>
<br />
<br />Aha, it must be about the same hue as the uniforms in the original Star Trek series.  The actual uniforms were pale green, but they appeared yellow on consumer television sets.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>