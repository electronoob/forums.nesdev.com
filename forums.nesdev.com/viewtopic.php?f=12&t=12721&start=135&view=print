<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - bsnes-plus and xkas-plus (new debugger and assembler)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">bsnes-plus and xkas-plus (new debugger and assembler)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12721">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12721</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>10</strong> of <strong>14</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Revenant</b> [ Mon Dec 19, 2016 8:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is a minor release which fixes a few bugs of varying importance. I plan to start doing these more often, maybe monthly. Download links are in the OP as usual.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Fixed low-res scanlines being horizontally resized too much when fast-forwarding<br />&nbsp; while a high-res screen mode is active (compat/performance builds only) &#91;Revenant&#93;<br />Fixed potential issue with modifier keys triggering multiple wrong inputs &#91;Revenant&#93;<br />Fixed potential crashes when nonexistent cart RAM would be mapped by a manifest<br />&nbsp; and/or certain coprocessors (such as the SA1) &#91;Revenant&#93;<br />Fixed potential crash when tracing SA1/SuperFX with trace mask enabled &#91;Revenant&#93;<br />Fixed trace mask being wrongly enabled when loading a cartridge &#91;Revenant&#93;</div><br /><br />I'll start addressing more of your ideas and issues once the holidays are over. I wanted to get a few things taken care of before then, but hopefully I can start to keep up more frequent official releases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qwertymodo</b> [ Sat Dec 31, 2016 12:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Something that would be incredibly helpful would be to make it easier and more straightforward to log or otherwise debug DMA transfers.  Maybe a breakpoint that triggers upon the start of a DMA transfer to a specific destination, or triggers on the start of a transfer on a particular channel (I guess that's doable already with a write breakpoint on $420B with the data field set to the channel flag).  And maybe a more compact dialog just for viewing DMA states (or perhaps the state of the last transfer per channel, if it differs from the current register state).  Right now the best I can do is set a write breakpoint on a destination, then hunt through the properties dialog, but the values there don't always seem to match up to the values used for the transfer in question.  The new VRAM and tilemap viewers have been fantastic, but I keep finding myself in need of hunting down where the video data is actually *coming from*, whether it's directly from ROM or a WRAM buffer.<br /><br />Also, it would be nice if, in the tilemap viewer, you could hover your cursor or click on the image and have it tell you the address of the tile.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Sun Jan 15, 2017 12:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A quick note on some registers that I just noticed are missing from the S-PPU tab of the Properties viewer.<br /><br />MPYL/MPYM/MPYH: $2134-$2136

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jan 15, 2017 12:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">jwdonal wrote:</div><div class="quotecontent">A quick note on some registers that I just noticed are missing from the S-PPU tab of the Properties viewer.<br /><br />MPYL/MPYM/MPYH: $2134-$2136</div><br />I believe I can add support for this (don't have a way to compile/test though).  I'll file a pull request in a bit.<br /><br />Edit: filed (and fully untested!): <!-- m --><a class="postlink" href="https://github.com/devinacker/bsnes-plus/pull/103">https://github.com/devinacker/bsnes-plus/pull/103</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Mon Jan 16, 2017 1:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><div class="quotetitle">jwdonal wrote:</div><div class="quotecontent">A quick note on some registers that I just noticed are missing from the S-PPU tab of the Properties viewer.<br /><br />MPYL/MPYM/MPYH: $2134-$2136</div><br />I believe I can add support for this (don't have a way to compile/test though).  I'll file a pull request in a bit.<br /><br />Edit: filed (and fully untested!): <!-- m --><a class="postlink" href="https://github.com/devinacker/bsnes-plus/pull/103">https://github.com/devinacker/bsnes-plus/pull/103</a><!-- m --></div><br /><br />That patch displays the last result the CPU read from the registers--the added member variables are only updated on reading from 2134-2136, not on writing to 211B-211C.<br /><br />According to nocash, during Mode 7 rendering, the values read from 2134-2136 constantly change based on the Mode 7 calculations. This doesn't seem to be emulated by bsnes at all. Has anyone investigated exactly how this works (particularly timing-wise)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Mon Jan 16, 2017 2:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">That patch displays the last result the CPU read from the registers--the added member variables are only updated on reading from 2134-2136, not on writing to 211B-211C.</div>I haven't looked at the patch since I'm not familiar with the source, but if that's true then it should definitely be changed to update on any writes to 211B/C since 2134/5/6 have no (user apparent) delay. Updating only on CPU read is not particular useful - not that I don't appreciate Koitsu's help!!<br /><br /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">According to nocash, during Mode 7 rendering, the values read from 2134-2136 constantly change based on the Mode 7 calculations. This doesn't seem to be emulated by bsnes at all. Has anyone investigated exactly how this works (particularly timing-wise)?</div>I doubt it but it only really matters if a particular game ever tries to read the result registers during mode 7 rendering _and_ uses that result for a particular purpose. This is probably unlikely but who knows. In any case I can pretty much guarantee that the behavior is determinate based on whatever mode 7 parameters are currently configured.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Revenant</b> [ Mon Jan 16, 2017 2:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I responded to the PR, but it looks like AWJ beat me to part of my response <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />I don't think anything is known about how the registers behave when Mode 7 is active. Is this something that could feasibly be looked into with a test ROM?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Mon Jan 16, 2017 2:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Revenant wrote:</div><div class="quotecontent">I don't think anything is known about how the registers behave when Mode 7 is active. Is this something that could feasibly be looked into with a test ROM?</div>Certainly. And a logic analyzer is useful as well. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> But I really don't think it's that critical. You'd want to show that at least one game depends on reading a very specific byte value in order to justify all that coding/testing effort. Given that BSNES doesn't implement the behavior, and every SNES game already runs on BSNES, then I think you might have a hard time finding that justification.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Jan 16, 2017 3:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Issue has been discussed in the pull request: <!-- m --><a class="postlink" href="https://github.com/devinacker/bsnes-plus/pull/103">https://github.com/devinacker/bsnes-plus/pull/103</a><!-- m --><br /><br />And yes, I got the code wrong (keying off of reading, not writing).  devinacker covered this in his follow-up.<br /><br />Related to that, some annoyance/complexity here is what actually &quot;triggers&quot; the mathematical operation.  I thought about how the official docs outline a double-write to $211b followed by $211c followed by getting your result from $2134-2136, but started wondering what would happen if you did the writes in the opposite order (multiplier first, followed by low/high multiplicand).  Would the registers internally reflect the value if read?  I referred to <a href="http://problemkaputt.de/fullsnes.htm#snesmathsmultiplydivide" class="postlink">nocash's docs</a>, which specifically state &quot;After writing to 211Bh <strong><span style="color: #FF3333">or</span></strong> 211Ch, ...&quot;, which to me means the calculation/result is being provided all the time.  This is compounded by the aspect AWJ mentioned.  I'm thus left with the impression -- for lack of better phrasing here, my apologies -- that the hardware is essentially doing the calculation constantly/non-stop.<br /><br />I also now sympathise with byuu having literally 3 separate CPU/PPU cores to maintain.  What a fucking nightmare.<br /><br />Welcome to how a feature request opens a can of worms.  :P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Revenant</b> [ Mon Jan 16, 2017 4:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I'm thus left with the impression -- for lack of better phrasing here, my apologies -- that the hardware is essentially doing the calculation constantly/non-stop.</div><br />Seems plausible to me, assuming that the calculation involves some of the same circuitry responsible for Mode 7 rendering.<br /><br />Anyway, I just got home from work, so I'll merge the fix shortly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jan 17, 2017 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">According to nocash, during Mode 7 rendering, the values read from 2134-2136 constantly change based on the Mode 7 calculations. This doesn't seem to be emulated by bsnes at all. Has anyone investigated exactly how this works (particularly timing-wise)?</div><br /><br />No. I know that it's using it for the mode 7 multiplication calculations, but I have not emulated it. I don't even believe I'm caching the mode 7 multiplications themselves yet (it should only be adding things per-pixel.)<br /><br />The PPU multiplication updates are like one piece of a large jigsaw puizzle. Trying to tackle it alone would just make a mess of things. If we were to form proper cycle stepping of all PPU operations, $2134-2136 would naturally fall seamlessly into place.<br /><br />I desperately need jwdonal's test ROMs and PPU timing findings to improve bsnes further. But ... I have three other emulation cores to keep me busy in the mean time, so I guess it's no great rush.<br /><br /><div class="quotetitle">jwdonal wrote:</div><div class="quotecontent">You'd want to show that at least one game depends on reading a very specific byte value in order to justify all that coding/testing effort. Given that BSNES doesn't implement the behavior, and every SNES game already runs on BSNES, then I think you might have a hard time finding that justification.</div><br /><br />I emulate all kinds of things that no games rely on. It's not so much about making regular games run better, it's about ensuring someone in the future doesn't decide to use those registers as &quot;free, fast multiplication&quot; while also using mode 7, and then end up surprised when their game breaks on real hardware.<br /><br />I've been on the other end of that (with different limitations) ... it's not fun.<br /><br />I don't think <em>most</em> emulators should bother. Especially not Snes9X/bsnes-performance/bsnes-balanced. But we should ideally have one emulator that a person uses as a final test before releasing their games, and that should emulate anything that is humanly possible.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I also now sympathise with byuu having literally 3 separate CPU/PPU cores to maintain. What a fucking nightmare.</div><br /><br />After probably 4+ years of maintaining them all (and building profile-optimized binaries for all three, in both 32-bit and 64-bit configurations), I finally threw in the towel and discontinued the performance/balanced cores.<br /><br />I'm very appreciative that someone out there understands why I had to do that. It was a very difficult decision for me, and one that's obliterated most of the small userbase I still had left.<br /><br />..........<br /><br />By the way, if you guys want an even <em>bigger</em> rabbit hole to chase ... the regular CPU mul/div stuff isn't 100% emulated either.<br /><br />As most of you know, it's a multi-cycle process of updating the math computations one bit at a time. And thanks to blargg, we know the algorithms and have that emulated.<br /><br />But it is possible to start a division during a multiplication, and even easier to start a multiplication during division. The result is that both run simultaneously, only they share some transistors along the way. The resultant computations are a complete mess, and even blargg was unable to make sense of them. This is currently unemulated, and probably the easiest way to quickly detect bsnes versus real hardware today.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Tue Jan 17, 2017 2:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I emulate all kinds of things that no games rely on. It's not so much about making regular games run better, it's about ensuring someone in the future doesn't decide to use those registers as &quot;free, fast multiplication&quot; while also using mode 7, and then end up surprised when their game breaks on real hardware.</div>I agree. I should clarify that an emulator would want to <span style="text-decoration: underline"><strong>at a bare minimum</strong></span> ensure that the Mode7 mult does not provide correct answers during mode 7 rendering in order to avoid that scenario. But as far as having the readback result be what it actually is in real hardware cycle for cycle...meh. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Optiroc</b> [ Wed Jan 18, 2017 6:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm working on some SNES Mouse stuff so I'm adding mouse support to the Carbon input driver.<br /><br />However! Since I don't have access to the canonical windows build at the moment I'm not quite sure how it's supposed to map the mouse input. At the moment I'm just feeding mouse coordinate deltas to <span style="color: #00BF00">table[mouse(n).axis(x)] </span>as a proof of concept. It works, kind of, but is it supposed to translate the coordinates in some smarter way to get more of a 1:1 relation between the host operating system's mouse and what you end up with in &quot;emulator space&quot;?<br /><br />Edit: I got the 32-bit Windows build running in a virtual machine. With the RawInput driver the pointer (using Mario Paint for testing) wouldn't move at all, and with the DirectInput driver the pointer basically only jumps from corner to corner. Can I chalk that behavior up to the virtual machine tripping things up, or has the mouse support been &quot;orphaned&quot;?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Optiroc</b> [ Wed Jan 18, 2017 9:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Update: After some digging through old Apple documentation I managed to &quot;pin&quot; and hide the cursor when mouse access is requested, while still retrieving movement deltas. Works like a charm now!<br /><br />PS: My macOS build is downloadable at <a href="https://goo.gl/06Ofmd" class="postlink">https://goo.gl/06Ofmd</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kismet</b> [ Thu Jan 19, 2017 12:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: bsnes-plus and xkas-plus (new debugger and assembler)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Optiroc wrote:</div><div class="quotecontent">I'm working on some SNES Mouse stuff so I'm adding mouse support to the Carbon input driver.<br /><br />However! Since I don't have access to the canonical windows build at the moment I'm not quite sure how it's supposed to map the mouse input. At the moment I'm just feeding mouse coordinate deltas to <span style="color: #00BF00">table[mouse(n).axis(x)] </span>as a proof of concept. It works, kind of, but is it supposed to translate the coordinates in some smarter way to get more of a 1:1 relation between the host operating system's mouse and what you end up with in &quot;emulator space&quot;?<br /><br />Edit: I got the 32-bit Windows build running in a virtual machine. With the RawInput driver the pointer (using Mario Paint for testing) wouldn't move at all, and with the DirectInput driver the pointer basically only jumps from corner to corner. Can I chalk that behavior up to the virtual machine tripping things up, or has the mouse support been &quot;orphaned&quot;?</div><br /><br />Virtual Machines don't emulate absolute positioning, they only emulate relative positioning. eg, if I move the mouse over the window the virtual machine is running in and click, the mouse &quot;real coordinates&quot; will be in the center of the screen, and it will calculate the movement from the center of the screen.  This also happens with the joystick. Suffice it to say, you can not play the vast majority of games inside a Windows virtual machine using emulated input, because you don't have any precision to work with. The solution I came up with if I wanted to play a game inside a virtual machine was to actually map the USB port to the real USB port for a mouse or joystick and that solves it. Without doing it this way, when you move an analog stick, it will only be 0% or 100% moved, because it's only tracking the relative movement and when it stops moving, it's back to zero. I hope this makes some kind of sense. This was the trick I used to run a MMORPG game on a Mac inside Parallels, as well as the MMORPG game inside a Windows VM on top of Windows when I needed to move inventory items between two characters without going through the auction house.<br /><br />That said, the &quot;moves from corner to corner&quot; is exactly the expected behavior from a virtual machine. You can sometimes enable an alternate relative movement feature in some VM's, but they tend to only take it from one extreme to the other.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>10</strong> of <strong>14</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>