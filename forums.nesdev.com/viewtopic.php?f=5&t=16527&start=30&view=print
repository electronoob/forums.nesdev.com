<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hypothetical non polygon based 3D?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hypothetical non polygon based 3D?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16527">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16527</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Sep 28, 2017 11:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I dunno, how often does someone burst in with an entirely different way of doing things in any given field?</div><br />Well, in space launch (which I used earlier as an example), it seems like all the good ideas were had within the first decade or so; it's just that no one tried them.  One of the less conventional ideas getting traction lately is the SABRE engine - the required heat exchanger technology was demonstrated in 2012, but it's been nearly four decades since SATAN was invented, and that was basically a variant of a concept from 1955.<br /><br />Now, space launch may not be a good analogy, since the barriers to entry are immense and the capital flow woefully inadequate compared with computer graphics.  But all that really means is that the good ideas in computer graphics have had a much better chance of at least being tried, rather than that they haven't been thought of yet.<br /><br />It's possible something like Mach effect propulsion could shake up space launch to the point of making everything else hopelessly obsolete.  But that would be a much larger paradigm shift than I think it's reasonable to expect in computer science; even quantum computing doesn't seem to have much applicability to graphics...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Most good techniques seem to be around for years in non-interactive graphics before there's enough power to do them in interactive stuff. [...] I can see power continuing to get cheaper, and more viability for interactive raytracing eventually, but that's about it.</div><br />If I had to guess, I'd say the rasterized triangle killer will be ray tracing.<br /><br />Then again, Moore's Law seems to be on its last legs, so we may never actually get there...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rahsennor</b> [ Thu Sep 28, 2017 6:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't mean to be rude, but did anyone actually look at my link? Raymarching (a form of raytracing) works in realtime on consumer GPUs <em>now</em>. The Unreal Engine is <a href="http://advances.realtimerendering.com/s2015/DynamicOcclusionWithSignedDistanceFields.pdf" class="postlink">already using it</a> for soft shadows. There are <a href="http://www.kevs3d.co.uk/dev/shaders/spheres.html" class="postlink">plenty</a> <a href="http://www.kevs3d.co.uk/dev/shaders/distancefield7.html" class="postlink">of</a> <a href="https://www.shadertoy.com/view/ldj3Dm" class="postlink">examples</a> around the web that will run right in your browser, even on a crappy Intel GPU like mine. Granted, it doesn't work so well for animated models of humans, but it's definitely already practical for other things.<br /><br />All the details, with loads of realtime and non-realtime examples, can be found <a href="http://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm" class="postlink">on the site of the guy who popularized it</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Sep 28, 2017 9:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent">I don't mean to be rude, but did anyone actually look at my link? Raymarching (a form of raytracing) works in realtime on consumer GPUs <em>now</em>.</div><br />Sorry, I didn't say anything to acknowledge either of the to things you mentioned (point cloud rendering, or raymarching) but I thought they were both good examples of alternative rendering paradigms (the point cloud especially).<br /><br />I didn't feel a need to say anything about raymarching specifically because it's in the same family as raytracing, and its advantages (e.g. can express curves and complex shapes with relatively simple code) and disadvantages (mainly ineffective performance) are pretty much the same as other forms of raytracing.<br /><br /><br /><div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent"> The Unreal Engine is <a href="http://advances.realtimerendering.com/s2015/DynamicOcclusionWithSignedDistanceFields.pdf" class="postlink">already using it</a> for soft shadows. There are <a href="http://www.kevs3d.co.uk/dev/shaders/spheres.html" class="postlink">plenty</a> <a href="http://www.kevs3d.co.uk/dev/shaders/distancefield7.html" class="postlink">of</a> <a href="https://www.shadertoy.com/view/ldj3Dm" class="postlink">examples</a> around the web that will run right in your browser, even on a crappy Intel GPU like mine. Granted, it doesn't work so well for animated models of humans, but it's definitely already practical for other things.</div><br />I was also alluding to stuff like this when I said I've seen pixel shader raytracers in the demonscene. Years ago I saw the <a href="https://www.youtube.com/watch?v=FNJRRHj_Zsk" class="postlink">Valleyball demo</a>, which was released with its source code, and it was really cool to be able to just see everything right there in the shader code. Since then shadertoy has appeared, which has been a cool place for lots of things like this.<br /><br />(I like the application to shadows, I hadn't seen that yet. Very interested to learn how the SDF is being stored, which those slides don't really explain... got some research to do later, thanks. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />)<br /><br />As far as how practical it is... none of those examples run at a &quot;playable&quot; game framerate at fullscreen for me (with a half decent GPU), and all of those scenes are relatively very simple. A fish swimming in water like this should be a well above 60fps walk in the park for traditional rendering (<a href="https://www.youtube.com/watch?v=MECBJqBkY0U" class="postlink">e.g. 16 year old xbox demo</a>), and this demo struggles to do 3FPS in fullscreen with a modern GPU. This also doesn't scale well: more objects mean more code in the shader-- the limit of what you can fit in a shader program is VERY low here. The demos with an infinite field of balls do it with recursion/loops, but you can't use recursion to e.g. turn a &quot;dinner table&quot; function into a &quot;furnished dining room&quot;, recursion only really makes <a href="http://www.kevs3d.co.uk/dev/shaders/mandelbulb.html" class="postlink">fractal shapes</a>. You will need code for each an every unique element, and that quickly eats up both your shader size budget and your performance budget.<br /><br />(Though you could make a case for future tech where shaders have access to much, much larger shared program memory? Kind of like the idea of space-inefficient self modifying code for faster PPU upload on the NES... a big huge optimized spatial partitioning tree as unrolled code... might solve the memory half of the limitation at least.)<br /><br />The fish looks really neat, but that fish is also modeled with like 100 difficult lines of code, really editable only by a specialized programmer + artist. Doing the same thing with traditional triangles would be straightforward work for any pro modeller, could perform well in more complicated scenes, and you could <a href="https://www.youtube.com/watch?v=X0uNhsLmGWA" class="postlink">make a full game out of it</a>. I'm impressed by it, but only <em>because</em> I know it's being done in such a difficult way.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">All the details, with loads of realtime and non-realtime examples, can be found <a href="http://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm" class="postlink">on the site of the guy who popularized it</a>.</div><br />I loooove the picture here of the snail being modelled from functions. That's really cool, and also really illustrates both the power and the problem of this approach.<br /><br />3D modelers are used to using scuplting tools like <a href="https://www.youtube.com/watch?v=QwL9-z39gQo" class="postlink">Zbrush</a> that work similar to the physical clay counterpart. Click somewhere to add detail, squish or stretch the shape, cut a groove, add a blob... A triangle mesh handles these actions very well; each just moves some of the points around, and the detail is directly there in the data. A point is where you put it, not dependent on any chain of actions, etc.<br /><br />Modelling from high level shapes, though, is a really painstaking thing to do! The whole process is inverted: you want to start from high level shapes, and make something interesting looking by making as few additions to it as possible to keep the code complexity down. Every curve, every twist, every groove adds another node of code to run to produce that detail. The 3D model is like an edit history (sort of like the <a href="https://www.youtube.com/watch?v=1QPVfGq19f8" class="postlink">old sierra games</a>). The main problem is just that if the &quot;edit history&quot; gets too deep, performance is dead, and that's a very hard constraint to model around. Every piece of the tree affects everything else, and making changes higher up require corrective tweaks everywhere on the model.<br /><br /><br />Maybe I should take a moment to mourn the loss of Java on the web, because one of my favourite websites no longer works functionally at all. Ken Perlin's website had so many very interesting Java demos of different ideas for rendering and animation.<br /><a href="http://mrl.nyu.edu/~perlin/" class="postlink">http://mrl.nyu.edu/~perlin/</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Sep 28, 2017 11:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">demonscene</div><br />Yikes!  And here I thought you were such a nice guy...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Valleyball</div><br />Oh.  Just typing quickly, I guess.<br /><br />[clicks link]<br /><br />...not a typo.  Wait, that means

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Sep 28, 2017 11:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />LOL &quot;demonscene&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Thu Sep 28, 2017 11:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><!-- m --><a class="postlink" href="https://www.doomworld.com/forum/4-wads-mods/">https://www.doomworld.com/forum/4-wads-mods/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rahsennor</b> [ Fri Sep 29, 2017 2:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">(I like the application to shadows, I hadn't seen that yet. Very interested to learn how the SDF is being stored, which those slides don't really explain... got some research to do later, thanks. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />)</div><br />In Unreal the SDF is a simple 3D texture IIRC. Not by them, but I found some good <a href="https://kosmonautblog.wordpress.com/2017/05/01/signed-distance-field-rendering-journey-pt-1/" class="postlink">blog</a> <a href="https://kosmonautblog.wordpress.com/2017/05/09/signed-distance-field-rendering-journey-pt-2/" class="postlink">posts</a> on the subject. Quílez uses <a href="http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm" class="postlink">CSG</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As far as how practical it is... none of those examples run at a &quot;playable&quot; game framerate at fullscreen for me (with a half decent GPU), and all of those scenes are relatively very simple.</div><br />Huh. The fish is a slideshow on my system too, but the others run fine even in fullscreen. Maybe Intel's Linux drivers are better than I thought...?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The fish looks really neat, but that fish is also modeled with like 100 difficult lines of code, really editable only by a specialized programmer + artist. Doing the same thing with traditional triangles would be straightforward work for any pro modeller, could perform well in more complicated scenes, and you could <a href="https://www.youtube.com/watch?v=X0uNhsLmGWA" class="postlink">make a full game out of it</a>. I'm impressed by it, but only <em>because</em> I know it's being done in such a difficult way.</div><br />As mentioned above, you can also use 3D textures. There's some pretty cool GPU octree/dag techniques out there too, for both this and other forms of raytracing.<br /><br />I've found <a href="http://www.voxelquest.com/" class="postlink">a</a> <a href="http://voxels.blogspot.com/2015/04/work-in-progress-ssao-bugfixes.html" class="postlink">couple</a> of games using raytracing already. I think Voxel Quest switched to point cloud rasterization at some point and YMMV on whether they count as games or tech demos, but hey, points for trying.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Modelling from high level shapes, though, is a really painstaking thing to do! The whole process is inverted: you want to start from high level shapes, and make something interesting looking by making as few additions to it as possible to keep the code complexity down. Every curve, every twist, every groove adds another node of code to run to produce that detail. The 3D model is like an edit history (sort of like the <a href="https://www.youtube.com/watch?v=1QPVfGq19f8" class="postlink">old sierra games</a>). The main problem is just that if the &quot;edit history&quot; gets too deep, performance is dead, and that's a very hard constraint to model around. Every piece of the tree affects everything else, and making changes higher up require corrective tweaks everywhere on the model.</div><br />Probably also explains why Farbrausch's .werkkzeug never took off. Triangles are like the QWERTY of 3D graphics: everyone's used to them so they're here to stay.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Sep 29, 2017 4:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent">In Unreal the SDF is a simple 3D texture IIRC.</div><br />Hm, I was a bit confused by the diagrams; it looked like they were doing it with 2D textures, I wondered if there was some sort of nearest surface thing going on. 3D textures though... ha ha the memory involved once you go to 3D textures kinda scares me.<br /><br /><div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As far as how practical it is... none of those examples run at a &quot;playable&quot; game framerate at fullscreen for me (with a half decent GPU), and all of those scenes are relatively very simple.</div><br />Huh. The fish is a slideshow on my system too, but the others run fine even in fullscreen. Maybe Intel's Linux drivers are better than I thought...?</div><br />Oh, well maybe I didn't try very hard to say everything about three different things in the same sentence... The two scenes with one repeating simple object do run okay on my desktop (though maybe like 10fps on my laptop in fullscreen). The fish doesn't really run well on either in fullscreen.<br /><br /><div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent">I've found <a href="http://www.voxelquest.com/" class="postlink">a</a> <a href="http://voxels.blogspot.com/2015/04/work-in-progress-ssao-bugfixes.html" class="postlink">couple</a> of games using raytracing already. I think Voxel Quest switched to point cloud rasterization at some point and YMMV on whether they count as games or tech demos, but hey, points for trying.</div><br />I'd like to try out either of these. Voxelquest seems to have gone silent about a year ago, and that second link points at a dead website. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br /><em>Edit:</em> Seems like there's a bunch of builds of Voxelquest available on the site, but I could only get the very earliest build to run, which did not seem to be interactive.<br /><br />I guess a 512^3 4 channel texture map would be half a gig. Maybe that's not an unreasonable thing to budget, especially if that's going to be your game's <em>thing</em>. (Maybe also I need to update my internal idea of how much memory GPUs have these days too...)<br /><br />I remember a long time ago there was a <a href="http://elmersunrealsite.com/Flash%20Bowling%2070.htm" class="postlink">bowling game</a> that advertised itself as using ray tracing. I seem to recall the demo ran OK at 320x200, at least, and this was probably 15 years ago. (The game's website is long defunct, and I can't find a working download of the demo anywhere.)<br /><br /><br />Voxelquest reminds me a bit of a game that was made a few years ago called <a href="http://www.quelsolaar.com/love/" class="postlink">Love</a>. Not really using &quot;offbeat&quot; rendering techniques, but it had a distinct visual style that was entirely procedural.<br /><br />Anyhow, thanks for sharing that. Voxelquest does <em>look</em> interesting at least (and maybe that's enough).<br /><br /><br />I guess for games though, I'm a lot more interested in the result than the process, at least as a player. (I am interested as a game developer, but that's somewhat separate.) Like, if using a weird method of rendering resulted in some interesting art, that's great, but people do that pretty often without special techniques too! Like going back to that fish as an example, really impressive as a 3D model and animation done entirely in shader code, but as a 3D animated fish I'd consider it pretty shoddy compared to the fish in the game I linked above, <a href="https://www.youtube.com/watch?v=X0uNhsLmGWA" class="postlink">Fishing Planet</a>, which look a lot better, and aren't even remotely a performance hazard for their engine either.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Sep 29, 2017 7:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent">I've found <a href="http://www.voxelquest.com/" class="postlink">a</a> <a href="http://voxels.blogspot.com/2015/04/work-in-progress-ssao-bugfixes.html" class="postlink">couple</a> of games using raytracing already.</div><br />There's also this: <!-- m --><a class="postlink" href="https://twitter.com/SebAaltonen/status/862722656860327937">https://twitter.com/SebAaltonen/status/ ... 6860327937</a><!-- m --> (not yet released)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Fri Sep 29, 2017 7:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there anything that just interpolates the edges of 3D objects, instead of interpolating every polygon?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Sep 29, 2017 4:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Is there anything that just interpolates the edges of 3D objects, instead of interpolating every polygon?</div><br />You mean like rounding the edges of a box or something? That's probably just easiest to do in the 3D model directly.<br /><br />You could make subdivision surfaces that place more triangles at the edges of a patch than the middle, but I can't think of a case where that would really be beneficial.<br /><br />With procedural generation rounding the edges of a box is actually a huge pain, ha ha. Maybe the easiest expression is just the <a href="https://en.wikipedia.org/wiki/Superellipsoid" class="postlink">superellipsoid</a>, but that ain't cheap to compute.<br /><br /><br />There's also an anti-aliasing optimization where you only multisample if the pixel is on the edge of a triangle. Pixels in the middle of a triangle are already effectively anti-aliased by <a href="https://en.wikipedia.org/wiki/Mipmap" class="postlink">mip-mapping</a>, so instead of computing every multisample fragment it just samples one for the whole pixel (and writes the same value to all its fragments).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Sep 29, 2017 5:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">You could make subdivision surfaces that place more triangles at the edges of a patch than the middle, but I can't think of a case where that would really be beneficial.</div><br />Google <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">blender edge crease</tt> to see what modelers have done with configuring a Catmull-Clark subdivider to push triangles toward certain edges.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">There's also an anti-aliasing optimization where you only multisample if the pixel is on the edge of a triangle. Pixels in the middle of a triangle are already effectively anti-aliased by <a href="https://en.wikipedia.org/wiki/Mipmap" class="postlink">mip-mapping</a>, so instead of computing every multisample fragment it just samples one for the whole pixel (and writes the same value to all its fragments).</div><br />Couldn't it use the two multisamples to improve the anisotropic filtering of a texture seen close to edge-on?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Sep 29, 2017 6:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">There's also an anti-aliasing optimization where you only multisample if the pixel is on the edge of a triangle. Pixels in the middle of a triangle are already effectively anti-aliased by <a href="https://en.wikipedia.org/wiki/Mipmap" class="postlink">mip-mapping</a>, so instead of computing every multisample fragment it just samples one for the whole pixel (and writes the same value to all its fragments).</div><br />Couldn't it use the two multisamples to improve the anisotropic filtering of a texture seen close to edge-on?</div><br />I'm not aware of any implementation of MSAA that uses the surface angle to select whether to multisample, no. Anisotropic filtering capability can already provided at the texture fetch level anyway, which might be more effective?<br /><br />Hardware that supports MSAA (the edge-only optimization) also supports FSAA (true supersampling) too, you could choose it as an option if you thought it was worthwhile. Normally you wouldn't, though, because the visual difference is pretty negligible while the performance difference is huge.<br /><br /><a href="https://en.wikipedia.org/wiki/Multisample_anti-aliasing" class="postlink">https://en.wikipedia.org/wiki/Multisample_anti-aliasing</a><br /><br />The specific implementation of stuff like this is getting into a grey area where it changes subtly between revisions/vendors, too. A lot of stuff at this level is &quot;approximate&quot; computation to begin with, so there is leeway for different result, especially for texture filtering and supersampling techniques specifically.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Sep 30, 2017 8:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Is there anything that just interpolates the edges of 3D objects, instead of interpolating every polygon?</div><br />You mean like rounding the edges of a box or something? That's probably just easiest to do in the 3D model directly.<br /><br />You could make subdivision surfaces that place more triangles at the edges of a patch than the middle, but I can't think of a case where that would really be beneficial.<br /><br />With procedural generation rounding the edges of a box is actually a huge pain, ha ha. Maybe the easiest expression is just the <a href="https://en.wikipedia.org/wiki/Superellipsoid" class="postlink">superellipsoid</a>, but that ain't cheap to compute.<br /><br /><br />There's also an anti-aliasing optimization where you only multisample if the pixel is on the edge of a triangle. Pixels in the middle of a triangle are already effectively anti-aliased by <a href="https://en.wikipedia.org/wiki/Mipmap" class="postlink">mip-mapping</a>, so instead of computing every multisample fragment it just samples one for the whole pixel (and writes the same value to all its fragments).</div><br /><br />I meant the outlining edge of the mesh.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Sep 30, 2017 2:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, trying to subdivide a triangle only if it's expected to be part of the silhouette? Hmm, yeah that should be possible.<br /><br />After a quick search I found this paper:<br /><!-- m --><a class="postlink" href="https://www.cs.rpi.edu/~cutler/classes/advancedgraphics/S11/final_projects/boulnois_andryauskas.pdf">https://www.cs.rpi.edu/~cutler/classes/ ... auskas.pdf</a><!-- m --><br /><br />And its video demonstration:<br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=IjhoXBfZ794">https://www.youtube.com/watch?v=IjhoXBfZ794</a><!-- m -->

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>