<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 64K not-onboard?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">64K not-onboard?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=990">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=990</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Tue Jan 24, 2006 11:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>64K not-onboard?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When i started my emulator i always had a 64K block to simplify things, so mapper 0 games worked just copying mem. But now im cosidering "no mapper" as just another mapper. I mean, so the NES doesnt really have 64kb? is it provided by the cart rom?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jan 24, 2006 11:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I would say that setup is not easiest to work with, but rather much harder to work with than a system which revolves around read/write callback procs and pointers.
<br />
<br />To answer your question... no, the 64k addressing space does not exist anywhere on the NES -- different addresses get routed to different areas.  SRAM/WRAM (typically $6000-7FFF) PRG-ROM, CHR-ROM, CHR-RAM all exist on the cartridge.
<br />
<br />
<br />For my emu, I have a setup similar to the following.  I've found that most emus have the same or a very similar setup:
<br />
<br />
<br />- keep an array of 2k RAM (fixed size).  This array represents system RAM @ $0000-07FF
<br />
<br />- manage a dynamically allocated, resizable buffer to hold all the PRG-ROM in the game.
<br />
<br />- Ditto for CHR-ROM, and CHR-RAM (keep seperate buffers for CHR-ROM and RAM, as some mappers have both)
<br />
<br />- Ditto for SRAM (some mappers have more than 8k SRAM, such as MMC5... so a fixed size array wouldn't work well for this).  This buffer can also double as PRG-RAM for FDS.
<br />
<br />- keep an array of 4k (fixed size) for nametables.  Though there are actually only 2k of nametables on the NES, keeping 4k makes 4-screen games a little easier to work with (I also use this buffer for MMC5 ExRAM).
<br />
<br />- manage <strong>10</strong> pointers which represent 4k PRG pages swapped in.  The first poiner would be the page swapped in $6xxx, second is $7xxx, third $8xxx, etc.  The first two will not be used as often as the other 8, however they are necessary for some mappers (MMC5, FME-07, any other mapper where $6xxx/7xxx is swappable).  When PRG pages are swapped, all you need to do is change the proper pointer so it points to the desired area in your dynamic PRG buffer.
<br />
<br />- manage 8 pointers which represent 1k CHR pages swapped in.
<br />
<br />- manage 4 pointers which represent the mirroring mode (each pointer will represent a nametable -- the above mentioned 4k nametable buffer is never accessed directly, but always through these pointers)
<br />
<br />- keep 8 vars to indicate whether or not the swapped in CHR pages are writable (RAM) or not (ROM)
<br />
<br />- keep 4 vars which do the same for nametables (some mappers use CHR-ROM for nametables.. it's important to note that the nametable is not writable when CHR-ROM is being used).
<br />
<br />- Manage 16 function pointers for Read procs, and 16 for Write procs.  Any time the CPU reads/writes anything, you'd call the proper function (the first functions would be for $0xxx, second for $1xxx, etc).  This way mapper read/write routines can be easily subbed in where appropriate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Tue Jan 24, 2006 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You forgot 'Writable' (and possibly 'Readable') flags for PRG, since you probably don't want to be switching I/O handlers during every bank switch.
<br />Also, it's handy to keep PRG bank pointers for $4000-$5FFF as well, just in case a cartridge comes along and decides to map data there ($0000-$3FFF don't really need it, since System RAM and the PPU are <strong>always</strong> mapped there). Personally, I have 16 PRG bank pointers, since it requires less math when doing reads and writes (just shift address right 12 bits, no need to subtract the "first bank" offset).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nessie</b> [ Tue Jan 24, 2006 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've got (0x10000 * 2 + 0x4000 * 2) function pointers, one for each write/read for PPU/CPU. This makes the mapper code very simple (no "switch(address)") but most likely results in more cache misses for the cpu since those jump tables take about 650k of ram.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jan 24, 2006 7:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />doesn't FCEU do that too?  It just seems so wasteful to me.
<br />
<br />Plus I kinda like the switch statement.  Makes it easier to do mirroring.  Like "switch(a &amp; 0xF001)" for MMC3 regs and mirrors, for example.  "switch(a &amp; 0x2007)" for PPU regs and mirrors @ $2xxx/3xxx, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Jan 24, 2006 8:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Couldn't you do <em>address AND 7</em> for PPU accesses? ^_^;;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jan 24, 2006 9:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think the PPU tables are used for the PPU address space. Or if you meant to AND the address with 7 when the CPU is accessing an address in the PPU range, the whole point of tables is to eliminate (costly) branches from the CPU emulator. Of course replacing those with wasteful one-entry-per-byte tables is stupid.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jan 24, 2006 11:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think he meant switch(a &amp; 7) for PPU reg writes instead of switch(a &amp; 0x2007).  I actually do use &amp; 7 in my emu currently -- but I don't see what difference it would make really.  &amp; 0x2007 lets you have more easily recognizable case labels which is why I mentioned it (ie... "case 0x2005" for $2005 instead of "case 5")

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Wed Jan 25, 2006 6:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I meant PPU registers, mirrored every 8. Sorry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nessie</b> [ Wed Jan 25, 2006 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The function pointer approach only needs a single instruction (call) instead of a series of branches and bitmasks. But yeah, it does feel wasteful with regards to memory. I haven't really compared performance between the two, perhaps the waste of ram really messes up the cache and makes it all slower in the end.
<br />
<br />Bitmasks are even easier with a function table. A function such as
<br />setCpuMask(0x8000, 0xFFFF, 0xE001); // MMC3
<br />could simply copy the pointer for 0x8000 to 0x8002, 0x8004, etc.
<br />
<br />With an OO approach however, I believe you'll have to store an object pointer together with each function pointer, wasting even more ram. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>danimal</b> [ Wed Jan 25, 2006 1:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nessie wrote:</div><div class="quotecontent">With an OO approach however, I believe you'll have to store an object pointer together with each function pointer, wasting even more ram. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />
<br />If your functions are in the same object you don't have to worry about it or you could do an explicit typecast to get over this hurdle.
<br />
<br />I had partially developed an 6502 emu in C++ using function pointers for each instruction cycle in a 2-D array.  I wasn't really happy with the performance but it made the cycle loop easy. (I was using gcc at the time but when I tried vc++ it ran alot faster.)
<br />
<br />My Java based emu uses a simlar idea on the instructions but since we're talking about memory... I have an array of objects that are a decendant of a standard RAM class so they can call an implementation of an abstract read or write memory function.  Each memory space gets registered in the array.  Then within each object the value is stored or returned to the data bus.  Yes it is an extra layer of abstraction. It uses an ocean of memory but its Java so it will always use an ocean.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nessie</b> [ Wed Jan 25, 2006 3:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">danimal wrote:</div><div class="quotecontent">My Java based emu uses a simlar idea on the instructions but since we're talking about memory... I have an array of objects that are a decendant of a standard RAM class so they can call an implementation of an abstract read or write memory function.  Each memory space gets registered in the array.  Then within each object the value is stored or returned to the data bus.  Yes it is an extra layer of abstraction. It uses an ocean of memory but its Java so it will always use an ocean.</div>
<br />
<br />Hmm, that sounds like an enormous performance hit. It would be nice if there was a simpler way to make Java use a function pointer table. Do you have an idea on what the resulting machine code looks like after that object array has been compiled by the JVM? I would think invoking one of those methods means more than a simple "call" instruction. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />
<br />
<br />
<br />I've thought about the possibility of producing something closer to a true jump table for memory accesses, perhaps it could be done with jasmine or some byte code lib. I believe the definition of Java's "table switch" has some size limits, so you can't really use it to switch over 0x10000 different cases. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />If you'd be willing to share the source for that emu, please send a copy to me - <!-- e --><a href="mailto:nessie@nessiehome.cjb.net">nessie@nessiehome.cjb.net</a><!-- e -->. Thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Wed Jan 25, 2006 5:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Later versions of Festalon( <!-- m --><a class="postlink" href="http://projects.raphnet.net/festalon/festalon-0.5.5.tar.bz2">http://projects.raphnet.net/festalon/fe ... .5.tar.bz2</a><!-- m --> ) emulate the 2A03 in a thread-safe OO manner by keeping track of a data pointer for each address read and write function pointer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>danimal</b> [ Fri Jan 27, 2006 12:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nessie wrote:</div><div class="quotecontent">Hmm, that sounds like an enormous performance hit. It would be nice if there was a simpler way to make Java use a function pointer table. Do you have an idea on what the resulting machine code looks like after that object array has been compiled by the JVM? I would think invoking one of those methods means more than a simple "call" instruction. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /></div>
<br />
<br />I haven't completed it yet, school is getting in the way I have to stay employed with my other free time.  I do expect a performance hit but its just the cost of an extra overridden method.  Also with a just-in-time compilier some of the difficulty can be overcome.  Java is limited in pointers, it does not use them for primitives.  Object variables are stored as references, i don't believe there is a way to do any indirection (C/C++ style pointers) with them without a major linked list hack.  Java is naturally slow however 1.5 (aka 5.0) is much better than previous releases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Fri Jan 27, 2006 1:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ugh, function pointers per hardware address.
<br />
<br />I've found that the two driving factors for program design which take priority when i'm designing systems tend to be:
<br />
<br /> 1) Elegance/simplicity in implementation
<br /> 2) Reflection of the real world
<br />
<br />1) You want your solutions to be elegant, simple, lean, and robust. This way, they can be easily optimized, easily replaced/rewritten, and easily representative of the underlying algorithms. Programmers are notorious for incorrectly guessing where performance bottlenecks will be. Compilers are smarter when you think they are naive, and vice versa. Spending time writing clever algorithms usually lands you in a world of thankless debugging in the future, when you could have replaced a bad algorithm with one tuned for the problem at hand.
<br />
<br />2) When you mimic the real world, you isolate the problem domain, and make it easier to achieve goal #1. If the NES easily addresses pages of N bytes, build your architecture around that. If communication between I/O devices shares one bus, create a Bus architecture, that even if it seems like an extra layer of code and abstraction, will more naturally allow you to structure your execution and code architecture like the Real Thing.
<br />
<br />Plus, if you optimize for a certain architecture, some system behavior, when the next generation comes out and all our assumptions are invalid, you will be locked into your previous faulty assumptions.
<br />
<br />But that's just a rant. If you're optimizing for something and it works good-like, just ignore me. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>