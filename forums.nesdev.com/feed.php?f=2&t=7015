<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7015" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-10-08T12:47:57-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7015</id>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2010-10-08T12:47:57-07:00</updated>
<published>2010-10-08T12:47:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68358#p68358</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68358#p68358"/>
<title type="html"><![CDATA[Romless NES program format]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68358#p68358"><![CDATA[
I was going to ask "huh, why isn't 4-screen mirroring supported" but then I went to bootgod's db and saw that there never were any games released with CHRRAM and 4-screen mirroring.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Oct 08, 2010 12:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-10-07T19:05:26-07:00</updated>
<published>2010-10-07T19:05:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68299#p68299</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68299#p68299"/>
<title type="html"><![CDATA[Romless NES program format]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68299#p68299"><![CDATA[
The main point is that it can be distributed and run as a normal iNES file, yet still run on low-cost development hardware, and uploaded without having to remove the cartridge. This rules out any rewriting by the game, or accessing data on the ROM (hence the name). The point isn't to support new features usable by the program itself, just to make development using the format easier. For small programs, especially ones used to test some technique on hardware, the quick edit-debug cycle is very useful.<br /><br />Perhaps extra WRAM could be handled by adding some extra banks. There's no way I could get any contiguous $2000 byte chunks in the current 32K format, due to assembler limitations. The extra banks would be aligned, so work with assemblers like nesasm.<br /><br />I'm really aiming for something fairly moderate at first, though. The two goals are kind of at odds: being able to run on low-cost cartridges, and supporting quick edit-debug cycle. The latter is useful for any hardware that the PowerPak can handle, but that tends to complicate the format so that it can handle every obscure mapper. Maybe just having the code for the PC uploader would allow one to customize it for special situations, since one wouldn't care about distribution then, just quick edit-debug.<br /><br />My thought is that it might be big enough for small games, and thus a useful platform for homebrew stuff, allowing all the benefits for developing on it (easy testing, runs on anything, can be put into a compilation, good limitations for competitions).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Oct 07, 2010 7:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-10-07T18:14:01-07:00</updated>
<published>2010-10-07T18:14:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68291#p68291</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68291#p68291"/>
<title type="html"><![CDATA[Romless NES program format]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68291#p68291"><![CDATA[
Yeah, it could edit any part of itself while it's running, and store and load itself from a PC's disk drive or some flashrom.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Thu Oct 07, 2010 6:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-10-07T18:14:26-07:00</updated>
<published>2010-10-07T18:13:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68290#p68290</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68290#p68290"/>
<title type="html"><![CDATA[Romless NES program format]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68290#p68290"><![CDATA[
You would still need some way to store the modified program. This is just the standardization of a convention to link programs that run in NES RAM but can also be loaded as a ROM, much like the <a href="http://www.devrs.com/gba/files/mbv2faqs.php#Both" class="postlink">"mb.gba" convention</a> on Game Boy Advance.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Oct 07, 2010 6:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-10-07T17:06:59-07:00</updated>
<published>2010-10-07T17:06:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68286#p68286</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68286#p68286"/>
<title type="html"><![CDATA[Romless NES program format]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68286#p68286"><![CDATA[
So does that mean we can use our game to edit itself?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Thu Oct 07, 2010 5:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-10-07T16:51:03-07:00</updated>
<published>2010-10-07T16:51:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68283#p68283</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68283#p68283"/>
<title type="html"><![CDATA[Romless NES program format]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68283#p68283"><![CDATA[
Cool.  What I had before that in the same vein, was having the first 2 bytes of the mini-program (or raw data, for that matter) be the address that it gets loaded into (3 bytes would have made more sense though, for banking).  That was actually hard-coded into the XMODEM code and was used for all transfers.  Having it able to pre-load CHR and use interrupts is a pretty nice enhancement.<br /><br />It may be good to leave a door open to larger WRAMs (maybe no point in outright supporting it yet).  The CPLD board I'll be making has 32kB.  PowerPak could have 32kB I think, but unfortunately there seems to be no support (not for 16kB/MMC1, at least).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Thu Oct 07, 2010 4:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-10-07T15:38:53-07:00</updated>
<published>2010-10-07T15:38:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68275#p68275</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68275#p68275"/>
<title type="html"><![CDATA[Romless NES program format]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7015&amp;p=68275#p68275"><![CDATA[
I've finished a preliminary version of a new romless NES program format that loads everything into RAM before running it. Romless programs are stored in standard iNES format and include the loader code, so they can be run in a normal emulator or on the PowerPak. There is the 2K RAM + 8K WRAM to load code into, 8K CHR RAM for graphics, and the two nametables can also be preloaded. Interrupts can be used, as well as mappers like MMC1 or MMC3.<br /><br /><a href="http://blargg.parodius.com/nes-code/romless/" class="postlink">Romless NES program format</a> intro, along with specification and example code for ca65, asm6, nesasm, and wla-dx.<br /><br />The main benefit is that they can also be uploaded from PC to NES via a serial cable. In the NES can be a PowerPak, or any other cartridge running a bootloader. This allows a quick edit-debug cycle when testing code on hardware. Since the cartridge in the NES doesn't need a reprogrammable ROM, cheaper cartridges can be used, allowing more people to run programs on hardware.<br /><br />There are other uses too, for example compilations of romless programs are easy because they don't care how they're loaded. So you could compress several into a ROM, and have a menu to select which to run. The programs themselves wouldn't need to be modified at all to support this. This would be great for a game compo.<br /><br />One interesting use is previewing graphics on a NES. There is a small include file that makes displaying yy-chr data files really easy. This allows editing the image, then a quick send from PC to NES to display it.<br /><br />All four major NES assemblers are supported: ca65, asm6, nesasm, and wla-dx. An include file handles most of the file setup, so programs are short and minimal. Here's one that displays a message on screen:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NO_INTERRUPTS = 1<br /><br /> .include &quot;romless.inc&quot;<br /><br />reset:  ; The loader has already done the following for us:<br />        ;<br />        ; * Load palette, CHR RAM, nametables<br />        ; * Clear PPU registers<br />        ; * Wait for VBL<br />        <br />        ; Enable background<br />        lda #$08<br />        sta $2001<br />forever:<br />        jmp forever<br /><br /> BEGIN_CHARS<br />        .byte 0,0,0,0,0,0,0,0, $00,$00,$00,$00,$00,$00,$00,$00 ; ' '<br />        .byte 0,0,0,0,0,0,0,0, $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; 'H'<br />        .byte 0,0,0,0,0,0,0,0, $FE,$C0,$C0,$FC,$C0,$C0,$FE,$00 ; 'E'<br />        .byte 0,0,0,0,0,0,0,0, $60,$60,$60,$60,$60,$60,$7E,$00 ; 'L'<br />        .byte 0,0,0,0,0,0,0,0, $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; 'O'<br /><br /> BEGIN_SCREENS<br />        dsb 10*$20 + 14 ; center on screen<br />        .byte 1,2,3,3,4 ; &quot;HELLO&quot;<br /><br /> BEGIN_PALETTE<br />        .byte $0F,$30,$30,$30  ; Black backgroud, white foreground<br /><br /> END_ROMLESS</div><br /><br />The above code will work with all assemblers, with only wla-dx requiring a change (.define NO_INTERRUPTS 1, since it doesn't support =).<br /><br />I'm still working some bugs out of the PC loading, and haven't finished the documentation. At this point, the file format isn't finalized. I'm posting to get more feedback on it. It's been through a couple of weeks of work, so it's pretty close to what it'll be.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Oct 07, 2010 3:38 pm</p><hr />
]]></content>
</entry>
</feed>