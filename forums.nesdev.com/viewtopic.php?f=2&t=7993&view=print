<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Object spawning logic in commercial games</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Object spawning logic in commercial games</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7993">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7993</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Jul 21, 2011 4:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Object spawning logic in commercial games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been thinking about good rules for object spawning/deactivating for my platformer engine, and started to think about how commercial games handle stuff like that. Hopefully we can get a discussion going to add to the <a href="http://nesdev.com/bbs/viewtopic.php?t=6985" class="postlink">earlier thread about spawning</a>.
<br />
<br /><strong>SMB3</strong>
<br />Objects can be spawn from both directions. Their initial movement direction changes based on which side of the screen spawns them, so they always head towards the hero. They don't respawn if they've been killed (although pushing them into pits doesn't count as a kill).
<br />
<br />The game seems to spawn enemies a little bit before the screen scrolls to the spawn point, so they scroll into view smoothly.
<br />
<br /><strong>Bucky O'Hare</strong>
<br />Enemy spawning is somewhat buggy (although some might call this a feature). If a spawned enemy is killed, and the edge of the screen is still inside the 16(?) pixel spawn location, scrolling one pixel or so to the right will spawn it again. This is another one of those things that while understandable from programming point of view, is unintuitive to the player.
<br />
<br />Spawning isn't pixel perfect, i.e. it doesn't take the sprite bounding box in account. Sprite simply appears on the spawn location, seems to be centered on the screen edge horizontally most of the time. Also with frame stepping it's possible to see that objects on the right side of the screen are facing the wrong way for a single frame after spawning.
<br />
<br /><strong>Common</strong>
<br />In both games, objects don't have to be very far from the screen edges to get deactivated. There are situations when this makes the player think the enemy vanished into thin air. For example when enemy is walking right on a narrow cliff, the right edge of screen is just past the enemy spawn point and the enemy gets deactivated when it goes outside the visible window. Now when player scrolls to right, the enemy appears to have vanished. Sorry, hard to explain. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />In SMB3, I *think* the deactivating rules change depending which direction the hero and the enemy are moving. If screen is scrolling to right and the enemy is moving left, the enemy disappears immediately after leaving the screen. However if enemy is moving right also, it doesn't. Or so it seems.
<br />
<br />---
<br />
<br />Anybody have anything to add?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Thu Jul 21, 2011 5:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A lot of old PC games used a separate update region from the screen region. When a spawn location entered the update region the enemy would spawn, and when the enemy was no longer in the update region it would deactivate. Some games used an update region that was two or three times as big as the screen, giving a more persistent feeling to the action.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 21, 2011 6:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But then DOS games could afford a bigger sliding window/update region because 8086 CPUs had 16-bit machine words, unlike the 8-bit machine words of 6502 CPUs. An 8086 program thus didn't need to do a 2-machine-word comparison with carry to determine when something was going in or out of the sliding window.
<br />
<br />Super Bat Puncher persists while a map segment is loaded on the screen. Anything offscreen persists in a stopped state.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jul 21, 2011 8:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Both games you listed have very limited scrolling, which actually makes enemy/object spawning much easier. SMB3 levels are at most about 2 screens tall, and Bucky O'Hare only scrolls in one direction at a time.
<br />
<br />Things get really tough when there's free scrolling, I'll tell you that. the solution I found was to store the list of enemies/objects sorted by X coordinate and keep pointers to the leftmost and the rightmost active objects. As the screen scrolls horizontally, the pointers are adjusted to include/exclude objects into/from the active range. When the screen scrolls vertically, all objects between the 2 pointers (hopefully not many) have their vertical coordinates checked, and if they are in range they are activated.
<br />
<br />There are a lot of details that can't be overlooked for everything to work right, such as only deactivating objects when both their current coordinates AND their spawn points are outside of the active area, otherwise they might be prematurely deactivated and will not respawn properly. Another important thing is to have a "dead" bit for each object, that you can use to prevent activation of objects that are already active, as well as to make them permanently dead.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Jul 23, 2011 3:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Things get really tough when there's free scrolling, I'll tell you that. the solution I found was to store the list of enemies/objects sorted by X coordinate and keep pointers to the leftmost and the rightmost active objects. As the screen scrolls horizontally, the pointers are adjusted to include/exclude objects into/from the active range. When the screen scrolls vertically, all objects between the 2 pointers (hopefully not many) have their vertical coordinates checked, and if they are in range they are activated.</div>
<br />If I understand right, you're keeping pointers to the objects whose spawn points are "visible", and then checking the *next* object (in either direction) as the screen scrolls to see if it should be spawned (and the pointer updated)?
<br />
<br />Does your engine handle object bounding boxes? When scrolling right, it would have to adjust the spawn point based on the left side of the bounding box, and vice versa. Or two separate spawn points would have to be stored, one for the left and one for the right side.
<br />
<br />I guess it might also be useful to have an option to have the objects sorted by Y coordinates instead for vertically oriented levels. The level data exporter could then figure out what ordering would be more efficient at runtime.
<br />
<br />Hmm, I wonder if it would be overkill (or work at all) to have 4 pointers, one for each side of the screen, and two object lists, one sorted by X and one by Y.
<br />
<br />Time to do some C++ &amp; SDL prototyping, I think.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jul 23, 2011 9:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">If I understand right, you're keeping pointers to the objects whose spawn points are "visible", and then checking the *next* object (in either direction) as the screen scrolls to see if it should be spawned (and the pointer updated)?</div><br />Exactly!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does your engine handle object bounding boxes?</div><br />No, it doesn't.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When scrolling right, it would have to adjust the spawn point based on the left side of the bounding box, and vice versa. Or two separate spawn points would have to be stored, one for the left and one for the right side.</div><br />Ideally, yes, but I figured that would be too much trouble. I just make the "active area" wide/tall enough for objects to be loaded a little before coming into view (i.e. the "active area" is a bit larger than the screen).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I guess it might also be useful to have an option to have the objects sorted by Y coordinates instead for vertically oriented levels. The level data exporter could then figure out what ordering would be more efficient at runtime.</div><br />Yeah, I considered that. The engine would check if the level is vertical or horizontal before running the object spawning logic. But since I don't plan to have vertical levels in my current project, I haven't given much thought to this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hmm, I wonder if it would be overkill (or work at all) to have 4 pointers, one for each side of the screen, and two object lists, one sorted by X and one by Y.</div>
<br />I also considered that, but decided that would waste to much ROM. If I had WRAM though, I'd consider calculating the secondary enemy list at runtime.
<br />
<br />This is one aspect of game programming that I consider particularly tough to implement. It's one of those things that you think you have considered everything, and then a little detail you haven't though about shows up and screws everything, so you end up having to rethink the whole thing over. Things are a little easier when you have more RAM, but processing power is what you really need to make this trivial. I really like these challenges though, and they are the main reason I like NES coding so much! =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ian A</b> [ Tue Jul 26, 2011 8:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's weird to see this come up when I was just trying to plan this out the other day (and with 4 way scrolling, too).
<br />
<br />So basically the idea is to have to check as few objects/enemies as possible?  I'll let you guys know if I work anything out, probably before I implement it because it's nice to hear if I'm doing something bass-ackwards,

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CrashTest</b> [ Sun Sep 04, 2011 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Does your engine handle object bounding boxes? When scrolling right, it would have to adjust the spawn point based on the left side of the bounding box, and vice versa. Or two separate spawn points would have to be stored, one for the left and one for the right side.<br /><br />I guess it might also be useful to have an option to have the objects sorted by Y coordinates instead for vertically oriented levels. The level data exporter could then figure out what ordering would be more efficient at runtime.<br /><br />Hmm, I wonder if it would be overkill (or work at all) to have 4 pointers, one for each side of the screen, and two object lists, one sorted by X and one by Y.<br /><br />Time to do some C++ &amp; SDL prototyping, I think.</div>
<br />
<br />This works really well in practive and is what I'm using.  The best part is you only need to check for spawns when you move the scroll window, its transition triggered instead of continuously tested for trigger.
<br />
<br />There are a couple of good optimizations I found.  If you have &lt; 256 spawn points, you can just keep 8-bit indices instead of pointers, and the y list can be be a list of y-sorted indices into the x-sorted spawn list.  
<br />
<br />Each entity spawned also can keep the index of the spawn point it was spawned from so that it can "reload" the spawn point when it gets killed off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Sep 04, 2011 10:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I still like the method that I came up with, which I described in the other thread, it's basically a binary search every time a new 128x128 pixel area is exposed.  When scrolling horizontally, it's 3 sections exposed, when scrolling vertically, 3 sections exposed.  Even 6 binary searches is lightning quick.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CrashTest</b> [ Sun Sep 04, 2011 10:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">I still like the method that I came up with, which I described in the other thread, it's basically a binary search every time a new 128x128 pixel area is exposed.  When scrolling horizontally, it's 3 sections exposed, when scrolling vertically, 3 sections exposed.  Even 6 binary searches is lightning quick.</div>
<br />
<br />Took a look, and I have a question.  Is the binary search used so that you can have empty sectors, since not every 128x128 region has to have enemies?  Otherwise you'd just have an array of sector indices or pointers you could index directly I'd wager.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Sep 05, 2011 6:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The problem with object areas is that you have to be very careful with object placement. If an object is too wide/tall and you place it too close to the edges of the area it's in, it will "pop" into view, instead of smoothly scrolling in.
<br />
<br />For sprites that's unpleasant, but not game-breaking. But if you have background objects that are drawn along with the rows/columns of background (which I do), parts of the object will not be drawn, because it wasn't loaded when those parts scrolled into view.
<br />
<br />That's the reason I stopped using "blocks of objects" in favor of a sorted list of all objects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Sep 07, 2011 1:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is also something I found difficult to implement in my game, and it even has very simple scrolling (only scrolls horizontally).
<br />
<br />I have an "activity zone" of about 2 screens, (one half off the left edge of the screen, the full screen being displayed, and the other half screen sticking off the right edge) which defines the region in which enemies can be active. I implemented a maximum object count for this zone: 8 intelligent objects, 16 simple objects. If anything falls outside of this zone, it gets deactivated. If anything comes into this zone, it is activated unless the maximum object count is met. This can potentially create problems, but I have designed my enemies and levels so that enemies don't roam too far from their spawn points, and a worst case scenario should only result in about 6-8 active objects on screen. This is something I would figure almost any game has to do because you risk having too many objects consuming resources (cycles, RAM, sprites, etc.).
<br />
<br />Actually, another thing I implemented was a "freeze" zone. An object is able to move around most of the activity zone, but towards the outer edges, objects will stop moving. They will remain active, but they will not move. This is to prevent things like an enemy immediately walking out of the activity zone as soon as they are spawned. It's not a perfect solution, but it works well enough for me.
<br />
<br />In terms of storing objects, I have objects sorted into screens from left to right with one 4-bit X coord and Y coord defining their sub position within each screen. These coordinates only allow them to adhere to 16x16 pixel sections when they spawn, but that's not a big deal. I have also accepted a limitation of 1 object per 16 pixel wide section of the screen. This has allowed for more simple activation checks. All I have to do is pull up the list of objects within the screen of the activation point, and then compare their spawn point's X coord with the activation point. As soon as it finds an object's X coord equal to the activation point's X coord, that object is spawned and no more checks need to be performed (remember, only one object can spawn per given X coordinate). If it encounters an object with an X coord beyond the activation point, checks automatically cease because the objects are sorted, and all other objects to be checked are also beyond the activation point.
<br />
<br />And yeah, what tokumaru said about the dead/active bits is very important. There's nothing like killing an enemy on it's spawn point and having it infinitely come back to life (immediate aggravation!).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Sep 07, 2011 3:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Actually, another thing I implemented was a "freeze" zone. An object is able to move around most of the activity zone, but towards the outer edges, objects will stop moving.</div><br />Sort of like how Super Bat Puncher remembers the position of every enemy on the screen, but as soon as they leave the screen, they freeze and their AI resets.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's nothing like killing an enemy on it's spawn point and having it infinitely come back to life (immediate aggravation!).</div>
<br />Unless you're grinding healing items or weapon energy (go Mega Man) or weapon drops (hi Kirby) or experience (any JRPG ever).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Sep 07, 2011 7:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Actually, another thing I implemented was a "freeze" zone. An object is able to move around most of the activity zone, but towards the outer edges, objects will stop moving.</div><br />Sort of like how Super Bat Puncher remembers the position of every enemy on the screen, but as soon as they leave the screen, they freeze and their AI resets.</div><br /><br />I'm not sure I understand. What happens when the AI is "reset"?<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Unless you're grinding healing items or weapon energy (go Mega Man) or weapon drops (hi Kirby) or experience (any JRPG ever).</div>
<br />
<br />Or Metroid. I can't tell you how many times I've gone to those warp zone type things to kill the flying bugs to fill my energy tanks.
<br />
<br />It's funny you should bring this up though. I was talking earlier about how I had "intelligent" and "simple" objects. I forgot I recently changed how I refer to what I've been calling "simple" objects. I have "intelligent" and "spontaneous" objects. Intelligent objects are ones on the enemy placement map. Once they are dead, they are dead forever. They also have more RAM allocated to them so they can do more complex things. Spontaneous objects can be made out of thin air (usually bullets, or something similar). I was thinking of including some enemies in my game as spontaneous objects. This way, I could have something like the warp zone thing in Metroid as an intelligent object, and have that keep shooting spontaneous bug objects. This way, you could still harvest energy and ammo, but you wouldn't have to deal with certain enemies constantly respawning.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Sep 07, 2011 8:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd just use a object map ID number to relate an object (in your active object table) to a numbered enemy (in your object map).  An object ID of 255 would indicate a temporary object, such as a bullet.
<br />No need for a separate table, or special memory format.  You could even make temporary enemies that disappear when they move too far away.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>