<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Ophis 2 Assembler, &quot;To HLL and Back&quot; published</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Ophis 2 Assembler, &quot;To HLL and Back&quot; published</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9039">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9039</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mcmartin</b> [ Fri Jun 22, 2012 11:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Ophis 2 Assembler, &quot;To HLL and Back&quot; published</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've just published a modernized version of my old "Ophis" assembler: <!-- m --><a class="postlink" href="http://michaelcmartin.github.com/Ophis/">http://michaelcmartin.github.com/Ophis/</a><!-- m -->
<br />
<br />It does seem like the community has largely standardized on CA65, which is a very good assembler indeed, but there are three reasons this may be of general interest:<ul><li>Its complexity level occupies a midpoint between CA65 and NESASM; it's as flexible in its output as CA65 but tries to bind source and binary together a little more closely, hopefully making it a little easier to get off the ground.</li><li>People who (like me) grew up on x86 and MIPS assembler may find the format more congenial.</li><li>I've gathered <a href="http://michaelcmartin.github.com/Ophis/book/p481.html" class="postlink">all my writings on exploiting high-level language features in 6502 assembler</a> and bundled it with the documentation. These are likely to be useful to programmers of medium skill in <em>any</em> assembler. This includes working protocols for object-orientiation-like effects as well as full recursion.</li></ul>Ophis's primary distinguishing features are:<ul><li>Full memory segmentation, with a complete divorce between the "program counter" and the file format. You may maintain as many segments as you want, and can enforce that some segments never hold initialized data. Within a segment you can arbitrarily reassign the program counter, allowing for one to write relocatable code without necessarily also making it position-independent.</li><li>A strict relationship in output order between source and binary. This is either a missing feature compared to CA65 or one less thing to worry about compared to it, depending on taste.</li><li>Optional support for emitting undocumented opcodes.</li><li>Automatic instruction collapse (zero page selection) and automatic expansion of illegal branch instructions into branch-jump pairs.</li><li>Full support for temporary labels within arbitrarily nested scopes as well as fully anonymous labels to make writing tight loops more convenient.</li><li>A unique macro system based on function-call semantics instead of the more traditional textual replacement.</li><li>In-source output control, which means that someone else assembling your code will usually only have to type "ophis srcname.oph" and get the right results, while still letting the user override it at the commandline.</li></ul>Now to actually do something fun with it.  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Jun 22, 2012 11:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds a little like ASM6's style of memory management, except ASM6 does the same kind of thing without naming any segments. In ASM6, you just reassign $, and it does it.  File output position doesn't change, but addresses do.  ".org" is used as a space filler, and sets the origin address only if it hasn't already been set.  By using $ = $8000, some code, and .org $C000, then another $ = 8000, you can define banks that way.  No segments, just reassigning $ and padding to a finishing address.
<br />
<br />ASM6 also has a mode where it doesn't emit any code, but still advances the address, it's called enum mode.
<br />
<br />But ASM6 just does things in a very simple way, so I use that assembler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Sat Jun 23, 2012 5:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How about 65816, Hu62c80, and 65c02 processors?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mcmartin</b> [ Sat Jun 23, 2012 3:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Hamtaro126 wrote:</div><div class="quotecontent">How about 65816, Hu62c80, and 65c02 processors?</div>
<br />
<br />65816 and z80 support have never really been on the table for Ophis, since I don't have a personally compelling application for them and there's a lot of extra infrustructure involved in supporting it unused by the other systems. It's a lot closer to "write a different program and stick it in the same executable", while these other CPUs are much closer to "tweak a few configuration options".
<br />
<br />65c02 is fully supported but requires a command-line switch to activate (so you don't get spurious 'you've named your variables after opcodes' warnings, and because they conflict with the undocumented opcodes).
<br />
<br />HuC6280 isn't directly supported but it looks like it wouldn't be too tough to write macros to support the bankswitching extensions. (The 14 new instructions are all Implied mode in source, so you could make macros for .byte statements.) Adding direct source support would be a bit trickier, since you'd have to special-case them as another invisible addressing mode, a la Relative - those instructions aren't *really* "Implied" mode even though they look like it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jun 23, 2012 4:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mcmartin wrote:</div><div class="quotecontent">65c02 is fully supported but requires a command-line switch to activate (so you don't get spurious 'you've named your variables after opcodes' warnings, and because they conflict with the undocumented opcodes).</div><br />Another assembler handles those with <a href="http://www.cc65.org/doc/ca65-11.html#ss11.88" class="postlink">the .SETCPU instruction</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">HuC6280 isn't directly supported but it looks like it wouldn't be too tough to write macros</div><br />"Super Mario Bros. 3? Our console is so advanced it has SMB3 as one instruction."<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Adding direct source support would be a bit trickier, since you'd have to special-case them as another invisible addressing mode, a la Relative - those instructions aren't *really* "Implied" mode even though they look like it.</div>
<br />If your macro system is strong enough, you can write each CPU as a set of macros, even standard 6502.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Sat Jun 23, 2012 6:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If your macro system is strong enough, you can write each CPU as a set of macros, even standard 6502.</div>
<br />
<br />Or use Tables for Opcodes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mcmartin</b> [ Sat Jun 23, 2012 6:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Lots of good comments - thanks, folks. I'm going to open tickets on my project for .setcpu (actually, more generally, "anything you can set by the commandline should be settable by an assembler pragma") and for the bankswitching extensions on the HuC6280 (the only bit missing from supporting that).
<br />
<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Another assembler handles those with <a href="http://www.cc65.org/doc/ca65-11.html#ss11.88" class="postlink">the .SETCPU instruction</a>.</div><br /><br />That's pretty clean.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">mcmartin wrote:</div><div class="quotecontent">HuC6280 isn't directly supported but it looks like it wouldn't be too tough to write macros</div><br />"Super Mario Bros. 3? Our console is so advanced it has SMB3 as one instruction."</div><br /><br />Ha <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /><br /><br />SMB3 is part of the general 65c02 support, though, so Ophis does that fine - I was talking about the bankswitch instructions which seem to be the main addition to the ISA there.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If your macro system is strong enough, you can write each CPU as a set of macros, even standard 6502.</div><br /><br />Very true. There are enough assemblers out there at this point that you really need an ulterior motive to write one now (mine were "I need to learn Python and it's 2001 and I don't like NESASM or DASM" and, for this iteration, "My God, this code was written back before Python had True and False as things, I should probably modernize it") and some piece of it that is The Fun Part. I could see one where The Fun Part is that the assembly process is just repeated/progressive macro replacement, but Ophis's Fun Part was the instruction selector passes (automatic zero page compression and illegal branch extension).  That's also a big piece of why I'm not planning 65816 support - stuff like a reassignable direct page and modal register width mean I'd have to revisit all the assumptions. (This is less of an issue for CA65 both because it has a much stronger emphasis on relocatability, and because it was designed for 816 code from the start, so "any time you name this symbol, the direct page is XXXX" is part of the basic protocol.) It would be effectively starting from scratch and then linking it into the rest.<br /><br /><div class="quotetitle">Hamtaro126 wrote:</div><div class="quotecontent">Or use Tables for Opcodes.</div>
<br />
<br />Ophis does use tables for opcodes, but it also needs to distinguish addressing modes - idiomatic 6502 code will need to assemble "lda $05", "lda $105", and "bne $105" into three different addressing modes despite them all being lines that are just "opcode, expr". Where it's something it already does - like SMB3 or BBS3 - that's really easy because all you have to do is extend the table. TMA i, though, needs to emit 2**i as its second byte, so this means you either need to extend the concept of "implied" to be "opcodes can be multiple bytes long" and make each TMAi a single opcode or you need a new kind of Immediate that does the exponentiation. It's not <em>hard</em>, especially since you don't need any context beyond what the opcode is and the value of the number next to it to make your choice, but it is a new logic path to add.
<br />
<br />The z80 (and x86, really) are a lot less amenable to this without pretty extensive preprocessing, too, since they like to pretend in the assembler code that there's this LD instruction even though it's still more like LDA/LDX/LDY under the hood. Still quite doable, but I'd be picking a language optimized for that kind of multiple lookup to target it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>