<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - High level SMB Disassembly on RHDN</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">High level SMB Disassembly on RHDN</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9780">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9780</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Nov 08, 2013 9:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Source code that compiles into the CHR?<br /><br />If you think source code that compiles into an exact copy of the binary is legit, then surely a bunch of .byte statements that compiles into the CHR portion is legit <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>teremochek</b> [ Fri Nov 08, 2013 11:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks. Nice to know about mappers.<br />I think the problem is complicated. To do need an experienced assembler programmer, not a novice.<br /><br />(I learned that there are hacked emulators for big roms. More than FFFF. Do not know how they work with the memory. Maybe it's more simple)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Nov 08, 2013 12:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some emulators support a 512 byte &quot;trainer&quot; ROM, which has been used to provide rom hacks in the past. I don't have much info on this however.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Nov 08, 2013 12:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If the bit is set, it loads 512 bytes into <em>RAM</em> mapped from $7000 to $71FF. In the file, it's placed before PRG.<br /><br />In practice, it's almost always used for mapper hacks for pirates.<br /><br />It'd be easier, if you find emulators that support it, to use <a href="http://wiki.nesdev.com/w/index.php/NROM-368" class="postlink">NROM-368</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Nov 08, 2013 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Uyeah, I forgot about that whole thing <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Good news is that mapper is also expressible in hardware as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>teremochek</b> [ Wed Jun 11, 2014 9:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A good idea to port this code into the source code of the emulator. <br />This will reduce compile time and give other possibilities.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Jun 11, 2014 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm having trouble understanding what you mean.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>teremochek</b> [ Thu Jun 12, 2014 10:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">I'm having trouble understanding what you mean.</div><br />Maybe it will be clearer.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; if (PC == 0x8000) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; } else if (PC == 0xB689 ) {&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _FireballObjCore();<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; } else if (PC == 0xECDE+0 || PC == 0xECED ) {&nbsp; &nbsp;//FireBar<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _DrawFireball();<br /><br />&nbsp; &nbsp; &nbsp; } else {<br />&nbsp; &nbsp; &nbsp; &nbsp; pb = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; final int instr = r.read(PC++);<br />&nbsp; &nbsp; &nbsp; &nbsp;...<br /></div><br /><br />I wrote it in code emulator HalfNES (Java.) <br />Looks like assembler.<br />Here is another example.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">public&nbsp; void _DrawExplosion_Fireball() {<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ldy( Alt_SprDataOffset + X );&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda( Fireball_State + X );&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; inc( Fireball_State + X );&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; lsrA();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp;if ((A &amp;= 0b00000111) &lt; 3) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _DrawExplosion_Fireworks(); return;<br />&nbsp; &nbsp; &nbsp; &nbsp;}<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;r.wram&#91; Fireball_State + X &#93; = 0; PC = 0xED65+1; rts();<br />}<br /></div><br />Perhaps this section and topic only real hardware NES. Then I'm sorry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Thu Jun 12, 2014 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, something like that could work.<br />I made sure the SMB disassembly matches the original ROM exactly when built to help ensure there are no mistakes. The high-level look of the code could be improved with more macros, etc (I could have done a better job to begin with). From there you could probably convert the code to C (or whatever) without too much difficulty and run by emulating the NES hardware without the CPU.<br /><br />Maybe take a look at this, it may help with this idea: <!-- m --><a class="postlink" href="http://andrewkelley.me/post/jamulator.html">http://andrewkelley.me/post/jamulator.html</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Thu Jun 12, 2014 6:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Graphics are probably also available elsewhere, so you can take the two thing from two places and combine them to make a Mario game. You do not need to include the graphics with the game code, since that is not the purpose of this game code; the purpose is to see how it is working.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ShaneM</b> [ Tue Sep 02, 2014 5:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">teremochek wrote:</div><div class="quotecontent"><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">Unfortunately there is no room left in the ROM. If you want to add code you're going to have to figure out what you can remove or a way to add banks.</div><br /><br />If I add a bank, then the new code will work with your code?<br /><br />What is better to remove the code inside?<br /><br />Another question. Which program is better to edit the code?</div><br /><br />Or you can do what I did when I added SMB2J stuff to my SMB1 for FDS: Remove residual code. Here are some places that code can be removed, also some other ways to save space; if you follow my advice, you'll get roughly 250 free bytes (note that not everything labeled in the disassembly as 'residual' are really residual; the ones I listed are proven residual):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;In &quot;PrintVictoryMessages:&quot;, remove these<br />cmp #$09&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />bcs IncMsgCounter<br /><br />;In &quot;Palette1_MTiles:&quot; remove these<br />.db $24, $2f, $24, $3d ;flag ball (residual object)<br /><br />;In &quot;WaterPipe:&quot; remove this:<br />ldy AreaObjectLength,x<br /><br />;In &quot;ScrollScreen:&quot; remove this<br />sta ScrollIntervalTimer<br /><br />;In &quot;FlagpoleSlide:&quot; remove these<br />cmp #FlagpoleFlagObject<br />bne NoFPObj <br /><br />;In &quot;NoFPObj:&quot; remove this<br />inc GameEngineSubroutine<br /><br />;In &quot;UseMiscS&quot; remove this<br />sty JumpCoinMiscOffset<br /><br />;In &quot;MovePlatformUp:&quot; remove these<br />cpy #$29<br />lda #$09<br /><br />;In &quot;CheckEndofBuffer&quot; remove all these<br />iny<br />lda (EnemyData),y<br />and #%00111111<br />cmp #$2e<br />beq CheckRightBounds<br /><br />;In &quot;SetupGFB&quot; remove this<br />jsr GetFirebarPosition<br /><br />;In &quot;BPGet:&quot; remove these<br />lda FlyCCBPriority,y<br />sta Enemy_SprAttrib,x<br /><br />;In &quot;DrawFlameLoop:&quot; remove this<br />sta Sprite_Y_Position+12,y<br /><br />;In &quot;FirebarSpin:&quot; remove<br />ldy #$18<br /><br />;In &quot;SpinCounterClockwise:&quot; remove<br />ldy #$08<br /><br />;In &quot;RightPlatform:&quot; remove<br />sta $00<br /><br />;Remove &quot;ResidualXSpdData:&quot; completely<br /><br />;In &quot;CheckToAnimateEnemy:&quot; remove this<br />iny<br /><br />;In &quot;DrawBrickChunks:&quot; remove<br />lda #$75 <br /><br />;In &quot;PowerUpGrabFreqData:&quot; remove these at the end<br />.db $22, $1c, $14<br /><br />;In &quot;FindAreaMusicHeader:&quot; remove this<br />sty MusicOffset_Square2 <br /><br />;Remove &quot;ResidualHeaderData:&quot; completely</div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Did you know you could get 16 free bytes from changing lda BrickShatterEnvData,y in &quot;ContinueBrickShatter:&quot; to &quot;lda BowserFlameEnvData,y&quot;? They both make the same SFX but now you have 16 free bytes where the data used to be!</div><br /><br />Optimize the following routine to get another 32 bytes:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;This is the original routine<br />SetPlatformTilenum:<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx ObjectOffset&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr DumpSixSpr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$02&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr DumpSixSpr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr GetXOffscreenBits&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy Enemy_SprDataOffset,x <br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc SChk2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$f8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite_Y_Position,y<br />SChk2:&nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc SChk3<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$f8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite_Y_Position+4,y<br />SChk3:&nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; bcc SChk4<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$f8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite_Y_Position+8,y<br />SChk4:&nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc SChk5<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$f8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite_Y_Position+12,y<br />SChk5:&nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc SChk6<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$f8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite_Y_Position+16,y<br />SChk6:&nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; bcc SLChk&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$f8<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite_Y_Position+20,y <br />SLChk:&nbsp; lda Enemy_OffscreenBits&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; bcc ExDLPl<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr MoveSixSpritesOffscreen <br />ExDLPl: rts<br /><br />;okay, now change it to this:<br /><br />SetPlatformTilenum:<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx ObjectOffset&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; jsr DumpSixSpr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$02&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr DumpSixSpr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr GetXOffscreenBits&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy Enemy_SprDataOffset,x&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$06<br />SChk:&nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; bcc SChkNx<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$f8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite_Y_Position,y<br />&nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />SChkNx: iny<br />&nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp; &nbsp; &nbsp; bne SChk<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx ObjectOffset<br />&nbsp; &nbsp; &nbsp; &nbsp; tya<br />&nbsp; &nbsp; &nbsp; &nbsp; sec<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc #$18<br />&nbsp; &nbsp; &nbsp; &nbsp; tay<br />&nbsp; &nbsp; &nbsp; &nbsp; lda Enemy_OffscreenBits&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; bcc ExDLPl<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr MoveSixSpritesOffscreen<br />ExDLPl: rts</div><br /><br />There are many more ways to clear up free space. This next method will get you about 150 free bytes:<br /><br />SMB1 was very wasteful with level data. For example look at this: <br /><img src="http://i1302.photobucket.com/albums/ag140/Shane_Mohammed/SuperMarioBros1amp2PlusJapan_002_zps7dc5d9c0.png" alt="Image" /><br /><br />^The above leftmost brick can be made to a horizontal brick length 4 and the rightmost brick can be removed (see below). This can be done with various objects in ALL levels/rooms to save space while functioning the same.<br /><br /><img src="http://i1302.photobucket.com/albums/ag140/Shane_Mohammed/SuperMarioBros1amp2PlusJapan_001_zps8de3ebf5.png" alt="Image" /><br /><br /><br />The above trick can also be done with enemies while function the same, too. See below.<br /><br />Before: <br /><img src="http://i1302.photobucket.com/albums/ag140/Shane_Mohammed/SuperMarioBrosPlusJapan_002_zps63c1125a.png" alt="Image" /><br /><br />After:<br /><img src="http://i1302.photobucket.com/albums/ag140/Shane_Mohammed/SuperMarioBrosPlusJapan_001_zps0c80b870.png" alt="Image" /><br /><br />Notice that I changed it from a 'Little Goomba' to a '2 Little Goomba (V=10). <br /><br />With the above, counting every possible level, you get around 150 free bytes this way. I hope this was helpful instead of having to convert this from NROM to MMC3 and extra routines. 200 or so free bytes is a lot of free space to make many routines.<br /><br />EDIT: Here is another code that can be optimized.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Original code<br /><br />CheckPlayerVertical:<br />&nbsp; &nbsp; &nbsp; &nbsp;lda Player_OffscreenBits <br />&nbsp; &nbsp; &nbsp; &nbsp;cmp #$f0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp;bcs ExCPV<br />&nbsp; &nbsp; &nbsp; &nbsp;ldy Player_Y_HighPos&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;bne ExCPV<br />&nbsp; &nbsp; &nbsp; &nbsp;lda Player_Y_Position <br />&nbsp; &nbsp; &nbsp; &nbsp;cmp #$d0&nbsp; &nbsp; <br />ExCPV: rts<br /><br />;Optimized code<br />CheckPlayerVertical:<br />&nbsp; &nbsp; &nbsp; &nbsp;lda Player_OffscreenBits&nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp;and #$f0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp;clc<br />&nbsp; &nbsp; &nbsp; &nbsp;beq ExCPV&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;sec&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />ExCPV: rts<br /><br />;you've saved 7 bytes<br /></div><br /><br />EDIT2: Also, remove anything labeled as &quot;free space&quot; etc. They will always be bytes of $FF. They are scattered throughout the file and will add up to another 20 or so free bytes.<br /><br />EDIT3: Make sure that the assembled binary file is no GREATER or LESS than 32,768 bytes. Whenever you add or minus code, you need to pad it or else there will be trouble. I can tell you are new to this. My advice is use something like Notepad++ that tells you the line numbers for when the assembler shoots out a &quot;value out of range&quot; or a line with an error or what not.<br /><br />EDIT4: Here's one more that's easy to miss. The underwater level has a room pointer to World 3 that's never used. (Room pointers always take 3 bytes). So removing it will give you three more. I just mentioned this because this one was hard to find. But the other wasteful ones are easy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 02, 2014 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do these removals of residual code preserve sync of tool-assisted speedruns?<br /><br />If you're not worried about TAS sync for warpless runs, another big one is to remove the flying fish code and replace it with the <a href="http://forums.nesdev.com/viewtopic.php?p=103473#p103473" class="postlink">simpler code in the PAL version</a>.<br /><br />Might you be interested in reviewing the code from one of my NES projects to find space optimization opportunities?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ShaneM</b> [ Tue Sep 02, 2014 5:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shoot. I forgot these routines where you can save space. In total, another 33 bytes right here (I took advantage of these in my SMB1 hacks to load the beta tiles I found):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;In &quot;VRAM_AddrTable:&quot;, remove<br />.dw UnusedAttribData<br /><br />;and<br />.dw BowserPaletteData<br /><br />;You can also remove the 8 bytes from the &quot;BowserPaletteData&quot; data and just change the palette to $1A using FCEUX PPU viewer.<br /><br />;you can also remove these; remember to update where the immediate values are loaded for certain objects like trees (only takes a few minutes):<br />&nbsp;.db $45, $47, $45, $47 ;breakable brick (not used)<br />&nbsp;.db $24, $47, $24, $47 ;half brick (not used)<br /><br />;remove this completely<br />DoNothing:<br />&nbsp; &nbsp; &nbsp; lda #$ff&nbsp; &nbsp; &nbsp; &nbsp;;this is residual code, this value is<br />&nbsp; &nbsp; &nbsp; sta $06c9&nbsp; &nbsp; &nbsp; ;not used anywhere in the program<br />&nbsp; &nbsp; &nbsp; rts<br /><br />;In &quot;ProcHammerObj:&quot; remove<br />sta $01<br /><br />;In &quot;SwimCCXMoveData:&quot; remove<br />.db $04, $04<br /><br />;In &quot;ShufAmtLoop:&quot; remove<br />jsr DoNothing</div><br /><br />EDIT: I thought of another way to get another 24 free bytes. But the above is more than enough to even add SRAM, Upside-Down pipes, Wind. etc. So if you need more free space, I can give you what I have in mind plus I can probably find more. Let me know.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ShaneM</b> [ Tue Sep 02, 2014 6:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Might you be interested in reviewing the code from one of my NES projects to find space optimization opportunities?</div><br /><br />If it's a Mario or Pokemon game, sure. Those are the only things I'm interested in hacking. It must be in either 6502 or Z80.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ShaneM</b> [ Tue Sep 02, 2014 7:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: High level SMB Disassembly on RHDN</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">teremochek wrote:</div><div class="quotecontent">Can anyone explain how to add a bank?<br /><br />(Good idea to port Mario for easy programming language. I do not understand how the assembler, too many unclear statements.)</div><br /><br /><br />If you choose to make this MMC3 rather than my optimizations (keeping it NROM), might I suggest using infidelity's MMC3 conversion of this? It even comes with the bankswitch routine within the included .docx. Use the routine he included with it to preform bankswitching. Add it to the .asm file. (Just google &quot;acmlm board infidelity MMC3 SMB1&quot;)<br /><br />His notes include everything needed to know about bankswitching.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>