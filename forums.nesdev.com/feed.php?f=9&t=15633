<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=15633" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2017-10-12T01:18:29-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=15633</id>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2017-10-12T01:18:29-07:00</updated>
<published>2017-10-12T01:18:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205833#p205833</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205833#p205833"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205833#p205833"><![CDATA[
Yeah, with accumulator based tones (e.g. N163, FDS, SID) it's not a divider of the clock frequency, and your low pitch precision ends up at low frequencies instead of high.<br /><br />It's the inverse of the clock divider approach (e.g. 2A03, VRC6, AY).<br /><br />I think the main difference is that the divider gets a lot more range with less bits in the register, and only has to increment instead of doing a full add. (Also at 31 kHz you'll have audible aliasing, but probably acceptable. No worse than N163 in 4 channel mode.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Thu Oct 12, 2017 1:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-10-09T21:58:26-07:00</updated>
<published>2017-10-09T21:58:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205739#p205739</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205739#p205739"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205739#p205739"><![CDATA[
<div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br />Realizing a limitation of running at PWM frequency of 31Khz is the min period resolution of 32usec which I assume will prove troublesome for keeping higher pitched notes in tune.<br /></div>It isn't necessary to have pitches be integer divisors of your sample rate.<br /><br />It's true that square waves (or anything else with more higher frequency content) will start having audible aliasing artifacts if you just use nearest-neighbor=sample-and-hold resampling, but that can be fixed or worked around in a variety of ways.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm wondering if this could be made up for by counting fractional steps and then rounding each period.  Where the the average of something like 4 cycles would be in tune effectively providing 8usec period resolution.  Have a feeling a hack like that has some (audible) drawback but I don't really know.<br /></div>That's actually literally how the Namco 163 works. The waveform position there is 8.16 fixed point (and the pitch is 2.16 fixed point). The SNES does something similar (pitch is 2.12 fixed point), but it adds an interpolator (&quot;Gaussian&quot;) to reduce aliasing noise (and everything else high frequency, oops)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Oct 09, 2017 9:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2017-10-10T09:14:18-07:00</updated>
<published>2017-10-09T21:47:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205738#p205738</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205738#p205738"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205738#p205738"><![CDATA[
Quick little update, testing out the PWM DAC with a simple middle C square wave.  Current PWM DAC is the standard 3.9k 4.7nF (8.7Khz cutoff) low pass filter fed directly to EXP6.  Then fed through the 'standard' 47k EXP audio resistor I was able to achieve a volume comparable to one of the 2a03's squares at full volume.  Things went according to my plan <a href="https://forums.nesdev.com/viewtopic.php?f=9&amp;t=56&amp;start=15#p205663" class="postlink">here</a> with a DAC setting of ~12% the CICOp square was audibly similar to the 2a03 square in volume and timbre.  I haven't came up with a means to objectively compare the two, but using my ears alone the CICOp may have sounded a little &quot;warmer&quot; but honestly I could be mistaking that based on slight difference in volume.  In any event I'm happy with the preliminary performance of this simple setup!<br /><br />I took a handful of different scope measurements, still blows me away that the PWM DAC sounds as good as it does despite how it looks! [EDIT: all measurements taken with 10x probe]<br /><br />Realizing a limitation of running at PWM frequency of 31Khz is the min period resolution of 32usec which I assume will prove troublesome for keeping higher pitched notes in tune..  I may be able to pull off 62Khz, but I'm wondering if this could be made up for by counting fractional steps and then rounding each period.  Where the the average of something like 4 cycles would be in tune effectively providing 8usec period resolution.  Have a feeling a hack like that has some (audible) drawback but I don't really know..<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Oct 09, 2017 9:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2017-10-04T11:56:37-07:00</updated>
<published>2017-10-04T11:56:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205550#p205550</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205550#p205550"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205550#p205550"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />One little caveat about the &quot;just use a count-up / count-down PWM and alternate direction every reload&quot; — it effectively halves your sample rate (and adds one to the bit depth), producing modulation noise at IRQ frequency/2.<br /></div><br /><br />Yeah my initial thought was to run the synth engine on each count &quot;direction&quot; to keep from changing the sample rate.  But that doubles the synth computation load in order to keep the same PWM frequency.  With limited timer clock speed, and limited CPU resources, there's no way to get around some sort of trade off when going from fast/edge to center/phase correct.  And with your conclusion of giving up 1 bit of resolution not being worth gaining center aligned, I question if center aligned is ever worthwhile in a system operating near it's constraints.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Wed Oct 04, 2017 11:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-10-04T11:26:54-07:00</updated>
<published>2017-10-04T11:26:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205549#p205549</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205549#p205549"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205549#p205549"><![CDATA[
One little caveat about the &quot;just use a count-up / count-down PWM and alternate direction every reload&quot; — it effectively halves your sample rate (and adds one to the bit depth), producing modulation noise at IRQ frequency/2.<br /><br />15.5kHz is still high enough that it's likely not an issue, but it's worth keeping in mind.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Wed Oct 04, 2017 11:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2017-10-03T23:03:25-07:00</updated>
<published>2017-10-03T23:03:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205536#p205536</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205536#p205536"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205536#p205536"><![CDATA[
Well it's happened again, get around to writing some code and taking a closer look at the STM8 register settings, and I found a little gem.<br /><br />TIM2 is the mid grade counter on chip I've dedicated to the PWM DAC.  It's only capable of up counting, and thus has no center aligned PWM mode of operation.  HOWEVER there is an output mode that toggles the output pin on timer compare match.  Taking advantage of this, one can effectively create a center aligned PWM if you're willing to dedicate the CPU resources to update the compare value on each timer overflow.  I'm not yet sure I've got the resources to pull this off in my case, we'll see.<br /><br />To make this work all that needs to be done is invert the DAC value every other output.  We can also take advantage of Tepples tip to keep from loosing a bit of resolution, it's best of both worlds with this trick if there's CPU resources to spare.<br /><br />Here's how I'm thinking this would work:<br />-Assuming 16Mhz counter clock, 31Khz PWM freq, counter top value of 255 (0xFF), normally give 8bit DAC, but can gain a bit back for 9bits if down doesn't have to equal up count.<br /><br />Start with PWM output clear.  Say the desired output value for this cycle is 100.5<br /><br />1)First update cycle is &quot;odd&quot; operation and thus going to simulate down counting.  By convention let's round down on odd/down cycles, so this half's output is 100.  Being an odd cycle we subtract 100 from the top value 255.  We place this difference of 155 in the compare register.  When reached the output PWM pin toggles high. <br /><br />2)Next output cycle occurs, this one is &quot;even&quot; normal up counting.  Round up this time from 100.5 to 101.  The 101 value is simply placed in the compare register.  When reached the output PWM pin toggles low.<br /><br />3) Calculate next DAC output value and go to step 1.<br /><br />While this idea works, the added interrupt for step 2 will be costly for the STM8.  Interrupts cost a whopping 20 cycles (9 pushes, 2 jump isr, 9 pops).  This scenario requires two interrupts per 512 clock update cycle.   That's 4% CPU resources for the added interrupt entry/exit, prob need another 5-10 cycles to support the added complexity running each isr, so that's another ~4%, for a total CPU resource cost of 8%.  Doesn't seem worthwhile at this point anyway when we've got better things to do with that CPU time.  So while this whole trick is viable, but I've now sufficiently talked myself out of it...<br /><br />I sure wish all those excessive register pushes for STM8 ISRs wasn't there.  Much more convenient how the 6502 only pushes PC &amp; SR..  Leave it to the ISR to decide what registers are worth preserving!  Worst part about it is, the built in pushes aren't any faster than manual pushing; all they're saving is code bytes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Tue Oct 03, 2017 11:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2017-10-02T06:06:54-07:00</updated>
<published>2017-10-02T06:06:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205485#p205485</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205485#p205485"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205485#p205485"><![CDATA[
<div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent"><br />If it can handle writes at 60hz, it would be transparent compared to fds.<br /></div><br /><br />Yeah it can easily handle multiple writes per frame.  Bigger question is how much time the NES wants to spend making those writes.  Current CICOp register transfer routine is 21cycles for 1Byte written, and read back verified, plus some amount of overhead for preparing for the write.  I will likely have to limit the number of CICOp register writes to reserve enough processing resources for CIC operations, but it several writes per frame should be fine.  Once I have async CIC operations implemented I'll have a better idea of what the practical limitations will be.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Oct 02, 2017 6:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FrankenGraphics]]></name></author>
<updated>2017-10-02T02:44:36-07:00</updated>
<published>2017-10-02T02:44:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205479#p205479</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205479#p205479"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205479#p205479"><![CDATA[
If it can handle writes at 60hz, it would be transparent compared to fds.<br /><br />A bit crazy software implementation idea:<br />Using the irq and any board with an updatable wavetable synth, one *could* update the waveform being used twice per frame, leading to very smooth (comparatively speaking) wave transitions. That's a bit new sonic territory for the NES. PWM, saw-to-sinoid &quot;filters&quot; and various other morphs would be more useful than otherwise. But you'd either have to sacrifice the irq for that or make sure it happens anyway at a point relatively opposite of the general music update during a frames' full cycle. If it varies a bit up and down the scanlines; it's not really a problem. It'd be pretty useful emulating attack portions of various instruments, above all, but also for &quot;synthy&quot; synth sounds.<br /><br />The extra time-domain granularity has to be inserted around export-time, mostly out of convenience.<br />One way is to keep doubles of the instruments and their macro strings, and change the most significant digit in the instrument row to the &quot;hi-res&quot; versions before exporting; discarding unused instruments in the process.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7508">FrankenGraphics</a> — Mon Oct 02, 2017 2:44 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2017-10-01T19:37:04-07:00</updated>
<published>2017-10-01T19:37:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205472#p205472</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205472#p205472"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205472#p205472"><![CDATA[
Yeah putting a wave table in RAM would certainly be an option.  Something like that shouldn't require much for calculations at run time.  Modeling after the FDS wave table may also help out with composition tools.<br /><br />The only reason against it might be the not so speedy interface of the CICOp registers, but the wave tables wouldn't have to be frequently updated to be useful.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Sun Oct 01, 2017 7:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2017-10-01T19:00:50-07:00</updated>
<published>2017-10-01T19:00:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205471#p205471</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205471#p205471"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205471#p205471"><![CDATA[
I was gonna say about the audio stuff, is there any reason to not have the waveforms in RAM?  It doesn't need a lot, you can get pretty good capability even with just 32 bytes.  You can still have predefined waveforms in ROM if you wanted, then just copy it into RAM.  From there, the NES program could modify them or upload entirely new ones.  That's what my synth does.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sun Oct 01, 2017 7:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2017-10-01T17:49:12-07:00</updated>
<published>2017-10-01T17:49:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205470#p205470</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205470#p205470"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205470#p205470"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Now I'm curious how hard it would be to detect and protect if the 6502 were interrupted mid routine.<br /></div><br />A quick glance at this and detecting that the 6502 hit an IRQ/NMI mid transfer routine looks rather simple.  The easiest detection would be on T2 (cycle 3) of any instruction CPU R/W will be low for the first push while the 6502 is processing it's interrupt.  STX ZP is the only instruction I currently have which also has CPU R/W low on T2.  In the end absolute addressing would be fine and delay CPU R/W of that instruction to T3, I only chose ZP addressing because it saved a cycle.  The CICOp may need a little more time if it's making all of these checks anyway..<br /><br />I'm not sure what if anything is on the data bus during the first two interrupt cycles while internal operations are being performed.  I presume the data bus is open and retaining data of the last executed instruction, detecting lack of fetched STX opcode and ZP operand would allow STX to keep ZP addressing.<br /><br />While the CICOp could protect against the 6502 getting interrupted mid transfer routine, it couldn't recover/delay like the DMC case.  The chances of a DMC collision should be relatively low.  So to keep the CICOp transfer routine simpler I'll probably opt to require any interrupted transfers to be retried by use of flags in NES code as I described in my last post.  Any features/protections added in the transfer routine will bloat the isr code on the CICOp which may need to be doubled to support PAL.  Still have to implement all that, but once done I'd expect the CICOp transfer routine to be bullet proof!<br /><br />Thanks for the input on what may be desirable audio channel features guys.  I can't speak too intelligibly on this front as I've yet to write any supporting code.  But with the synth engine running each PWM update cycle (expecting every 1024 STM8 cycles), it'll be necessary to keep execution time low.  I'm thinking that will favor more of the modal type settings as FrankenGraphics proposed, compared to what I expect to be calculation heavy settings of Tepples' proposal.  But we'll see!<br /><br />Thinking I'll call the CICOp register transfer routine good enough for now, and circle back to it later to support DMC/NMI/IRQ collisions.  So next up I'm planning some basic synth &amp; PWM tests with a single square wave.  I'm concerned about what the exact output/mixing circuitry will require.  If the output of the PWM DAC is too loud compared to the NES APU I may need an extra voltage divider resistor I'm thinking..?  I'm also unsure about a series output DC decoupling cap.  Or perhaps it'll be too quiet and require an opamp output buffer if the PWM DAC can't source enough current.  Also unsure how much I can change the PWM DAC component values to help the situation.  My experience level is low with these analog areas so I never trust myself until fully prototyped..<br /><br />Aside from that I would also like to try out some basic scanline &amp; CPU cycle counting before ordering the first batch of boards.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Sun Oct 01, 2017 5:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-10-01T13:17:15-07:00</updated>
<published>2017-10-01T13:17:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205449#p205449</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205449#p205449"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205449#p205449"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />2kHz &amp; 5kHz: [...] 2kHz &amp; 4.9kHz: FastPWM<br /></div> I realized that I had set up my test wrong. I wasn't windowing my FFTs, and 30720 Hz for the PWM modulator wasn't an integer factor of the FFT size.<br /><br />When I redid the tests with other choices of PWM frequency that were integer multiples of 192000Hz÷131072, then no spurious emissions showed up that were obvious results of intermodulation, at all.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Oct 01, 2017 1:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2017-09-29T17:26:45-07:00</updated>
<published>2017-09-29T17:26:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205379#p205379</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205379#p205379"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205379#p205379"><![CDATA[
Or you could express saw, triangle, and pulse in terms of rise time, high time, fall time, and low time.<br /><br />Saw: rise=0%, high=0%, fall=100%, low=0%<br />Triangle: rise=50%, high=0%, fall=50%, low=0%<br />Square: rise=0%, high=50%, fall=0%, low=50%<br />1/8 duty pulse: rise=0%, high=12%, fall=0%, low=88%<br />Approximate sine: rise=33%, high=17%, fall=33%, low=17%<br />Filter: Interpolate a waveform toward approximate sine<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Sep 29, 2017 5:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FrankenGraphics]]></name></author>
<updated>2017-09-29T15:14:53-07:00</updated>
<published>2017-09-29T15:14:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205376#p205376</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205376#p205376"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205376#p205376"><![CDATA[
<div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br />For the CICOp and it's set limitations I'll probably be limited to simpler waveforms (square, triangle, saw) anyway. If it does get a sine channel, it likely won't be more than one.<br /></div><br /><br />I don't think i'd sweat it to get a sine form in - unless it was routed to modulate another waveform (hardware automated modulation, yay!) and had a range dipping into the subsonic. On itself, it adds little: Maybe some extra punch, low end for bass notes, organ overtone or air as a double/follow to another richer channel, or use it for drum synthesis where it'd fill a role on its own. But the question then becomes how one would &quot;what you hear is what you get&quot; it when composing. If always used in unison/octaves with another track or strictly used for kicks, toms or snare support, maybe one could live without hearing it between assembly/compile tests more easily.  <br /><br />Sines might also have a worse 'wanted sound' vs. digital artifacts ratio if the resolution is low, which limits its use somewhat further. <br /><br />Basically, it has its distinct and possibility expanding uses, but they're somewhat limited if the choice stands between one more tri, saw* or pulse channel (potentially with finer pwm steps than the internal APU) on one hand, and a sine channel on the other. <br /><br />*Saws are also less flexible than pulses when they're without a filter so in that regard they're a bit limited in use just like the sine, but at least the saw function is simple.<br /><br />===<br /><br />EDIT: More on saws... here's one idea on how to make them more versatile. <br /><br />Assume each channel is a pulsewidth variable square channel. They all have a control bit. when 0, everything is normal. When 1, the wave will be normal when low, but output the remainder of a saw function when high. <br /><br />With a wide enough pulse and the control bit set to 1, that's a saw or something very close by. Then by changing the pulse width, you could control the morph between the two: pulse and saw.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7508">FrankenGraphics</a> — Fri Sep 29, 2017 3:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2017-09-29T14:40:50-07:00</updated>
<published>2017-09-29T14:40:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205373#p205373</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205373#p205373"/>
<title type="html"><![CDATA[Re: Adding features to discrete mapper with multipurposed CI]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15633&amp;p=205373#p205373"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I foresee some intermodulation distortion between two sines with the &quot;fast&quot; PWM.<br /></div><br />For the CICOp and it's set limitations I'll probably be limited to simpler waveforms (square, triangle, saw) anyway.  If it does get a sine channel, it likely won't be more than one.  I am curious to see what how well a PWM DAC (perhaps even dual-PWM) can perform on a more capable mcu in comparison to a hardware DAC.  In the end, the added cost of a mcu with built in DAC isn't too much.  So using a PWM DAC is best placed in the most cost sensitive/limited projects.<br /><br />Thanks for the PWM analysis guys!  It is nice to hear that an extra bit of edge aligned resolution stands the chance to make up for the loss of center aligned PWM!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I also foresee trouble if DMC cycle stealing happens while the CPU is accessing the CICO.<br /></div><br />Ahh yeah.  I completely forgot about that DMC guy..  <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Now on to how DMC cycle stealing interacts with a scheme to blindly put stuff on data bus for reading at 4, 8, and 12 cycles after the final write.<br /></div> I think we can cover this case, so here goes:<br /><br />So assuming <a href="https://wiki.nesdev.com/w/index.php/APU_DMC#Likely_internal_implementation_of_the_read" class="postlink">this</a> to be accurate enough for our situation:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Likely internal implementation of the read<br /><br />The following is speculation, and thus not necessarily 100% accurate. It does accurately predict observed behavior.<br /><br />The 6502 cannot be pulled off of the bus normally. The 2A03 DMC gets around this by pulling RDY low internally. This causes the CPU to pause during the next read cycle, until RDY goes high again. The DMC unit holds RDY low for 4 cycles. The first three cycles it idles, as the CPU could have just started an interrupt cycle, and thus be writing for 3 consecutive cycles (and thus ignoring RDY). On the fourth cycle, the DMC unit drives the next sample address onto the address lines, and reads that byte from memory. It then drives RDY high again, and the CPU picks up where it left off.<br /><br />This matters because on NTSC NES and Famicom, it can interfere with the expected operation of any register where reads have a side effect: the controller registers ($4016 and $4017), reads of the PPU status register ($2002), and reads of VRAM/VROM data ($2007) if they happen to occur in the same cycle that the DMC unit pulls RDY low.<br /><br />For the controller registers, this can cause an extra rising clock edge to occur, and thus shift an extra bit out. For the others, the PPU will see multiple reads, which will cause extra increments of the address latches, or clear the vblank flag.<br /><br />This problem has been fixed on the 2A07 and PAL NES is exempt of this bug.<br /></div><br /><br />For reference, here's my CICOp routine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   sty   CICOP_ADDR_EN   ; 8c &#91;bank num&#93; &#91;bank table low&#93; &#91;bank table high&#93;<br />   sta   (cicop_reg), y  ; 91 &#91;ZP byte num&#93; &#91;x:regL&#93; &#91;x:regH&#93; xx &#91;x:wrL&#93;<br />   stx   cicop_reg       ; 86 &#91;ZP byte num&#93; &#91;x:wrH&#93;<br />   ldx   CICOP_PORT      ; ae &#91;addr L&#93; &#91;addr H&#93; &#91;x:rdL&#93;<br />   ldy   CICOP_PORT      ; ac &#91;addr L&#93; &#91;addr H&#93; &#91;x:rdH&#93;<br />   lda   CICOP_PORT      ; ad &#91;addr L&#93; &#91;addr H&#93; &#91;x:rdE&#93;<br /></div><br /><br />The 6502 gets stalled on the next read cycle following the DMC pulling RDY low.  And once the DMC is done with it's fetch/stealing the 6502 re-performs the read that was stalled.  What I'm uncertain of is which of the reads actually gets caught by the 6502.  I would guess the initial stalled read is executed, but the 6502 doesn't catch it.  It's the second post-stall read that's actually caught (otherwise it probably wouldn't be done)..?  <br /><br />[edit sorry I've got some opcode name and cycle number errors here..  Think they're fixed now.  Realizing there are some other cases I'm not detecting and differentiating between, but I think there's room to cover them]<br /><br />If the stall were to occur on any of the read cycles during STA (T0-T4) or STX(T0-1), the CICOp could sense the stall as CPU R/W wouldn't be low during the expected write cycle (STA T5 and STX T2) due DMC stall &amp; fetch.  It would also be known that the CPU stalled for 4 cycles, the CICOp could potentially insert that delay to it's routine.<br /><br />If the stall were to start on the final write cycle of STA, the write would occur normally.  But the 3 cycle stall could be sensed as CPU R/W wouldn't be low at expected time for STX.  It would be known that the CPU was stalled for 3 cycles, similarly the CICOp could delay it's routine by 3 cycles.<br /><br />If the stall were to start on the final write cycle of STX, the write would occur normally.  But the opcode and address fetch of LDX wouldn't be present on the bus.  The CICOp could sense this case by checking LDX opcode being present on the bus @ T0 provided the written data from STX didn't also equal '0xE'.  T1 would continue as open bus, and the DMC would hijack the bus on T2.  So the CICOp could stop itself/delay outputing data on the bus for LDX T3.  This case also stalls the CPU by 3 cycles, the CICOp could try to delay itself, but needs to differentiate this case from the ones below that have a 4 cycle stall.<br /><br />The final 3 LDX/LDY/LDA all have similar behavior.  The case that really needs to be covered is if the stall were to start during T0 when the opcode was being fetched.  In this case the DMC will hijack the bus on the last cycle (T3) when the CICOp is also planning on driving the bus.  This condition could be detected by verifying low address of CICOP_PORT being on the bus for T2.  The CICOp could recover by delaying 4 cycles.<br /><br />If the stall were to start during T1/T2 of LDX/LDY/LDA we're mostly safe to output data as the DMC will hijack the bus after the CICOp drives data to a stalled CPU.  A stall during T2 could be sensed by CICOP_PORT high addr (T3) not being present.  To support that, A0-3 of CICOP_PORT needs to differ from A8-11 (and also not equal 0xE, 0xC, 0xD to differ from LDX/LDY/LDA opcode) which is simple enough with a chosen address of something like $5A05.<br /><br />If the stall were to occur on T3, the final LDX/Y/A cycle, there isn't a great way to sense that until T0 of the subsequent LDY/LDA.  In that case the opcode/operand wouldn't be present for the next load.  This can be easily caught for the first two loads (LDX/LDA), and CICOp routine delayed accordingly.  But not for the final one assuming I'm correct that the initial stalled read isn't caught, and the subsequent second read is what's caught.  This isn't necessarily an issue as this final read is intended to be the verification read.  So reading back open bus would simply be a false failure.  However, we could define the 6502 instruction that follows the current routine to allow for detection of this condition so the final nibble can be delayed and resent.<br /><br />Phew..   Well in the end doing all this doesn't seem to unreasonable given the number of nops currently in my CICOp isr.  It's certainly gets complicated quick though..<br /><br />Now I'm curious how hard it would be to detect and protect if the 6502 were interrupted mid routine.  It certainly wouldn't be as easy to transparently recover as there's no telling how long the 6502 interrupt will last.  The above proposals will probably cover an interrupt prior to completion of STA/STX with CPU R/W prior to latching data.  But I'll have to check into this more, hopefully there's a way to detect this case enough to prevent from outputting data on the bus when it shouldn't be thus preventing a crash.  If that's possible, then one could set a flag to denote that a CICOp register &quot;transfer is in progress&quot; prior to this routine.  Then the NMI/IRQ routine could  update that flag to &quot;current transfer failed&quot;.  Once the 6502 returns to the CICOp routine that got interrupted, it would make a check at the end and reperform the transfer if &quot;current transfer failed&quot; was true.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Fri Sep 29, 2017 2:40 pm</p><hr />
]]></content>
</entry>
</feed>