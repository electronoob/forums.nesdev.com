<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Help with some code for reading keypresses</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Help with some code for reading keypresses</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3869">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3869</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Tue Jan 29, 2008 6:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Help with some code for reading keypresses</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi,
<br />
<br />This code was cut and pasted from "Rwin's" "Jumpy" program which just displayed a little character that jumped up and down and could be moved left and right with the keypad.
<br />
<br />I was only interested in the key reading section. I left out the sub routines. That's where I'll be adding code which responds to the keypresses.
<br />
<br />My next step is to add in the subroutines such as; if the left key is pressed write to one of the sound channels, if the right key pressed then write to another sound channel, etc.
<br />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br /><br /><br />;;---CODE START---;; I copied parts of this from -'Rwin's &quot;Jumpy&quot; rom dated 04/11/2002<br /><br />&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.ineschr 0 <br /><br />&nbsp; &nbsp;.bank 1<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw 0 ; no VBlank routine<br />&nbsp; &nbsp;.dw keypress <br />&nbsp; &nbsp;.dw 0<br /><br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $8000<br /><br />keypress:<br /><br />&nbsp; &nbsp;jsr resetjoy ; goto to the routine which resets the joypad #1 status<br /><br />&nbsp; &nbsp;lda $4016 ; checks if &quot;a&quot; button is pressed<br />&nbsp; &nbsp;bne abutton ; goto jump routine if &quot;a&quot; is pressed<br /><br />&nbsp; &nbsp;lda $4016 ;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda $4016 ;<br />&nbsp; &nbsp;lda $4016 ;<br />&nbsp; &nbsp;lda $4016 ;<br />&nbsp; &nbsp;lda $4016 ;<br />&nbsp; &nbsp;lda $4016 ; checks if left is pressed<br />&nbsp; &nbsp;bne lft&nbsp; &nbsp;&nbsp; ; if left is pressed goto the routine for moving the sprite to the left<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda $4016 ; checks if right is pressed<br />&nbsp; &nbsp;bne rt&nbsp; &nbsp; ; if right is pressed goto the routine for moving the sprite to the right<br /><br /><br />&nbsp; &nbsp;jmp keypress ; Jump to the begin of the main loop<br /><br /><br />&nbsp; &nbsp;resetjoy:<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$01&nbsp; ; Writing #$01 to $4016 &#40;=joypad1&#41; followed by writing #$00 <br />&nbsp; &nbsp;sta $4016 ; to $4016 resets status of joypad 1<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta $4016<br />&nbsp; &nbsp;rts<br /><br /><br />lft: &nbsp; &nbsp;; this is where some other code will respond to left arrow keypress<br /><br />&nbsp; &nbsp;jmp keypress<br /><br />rt:&nbsp; &nbsp;; right arrow keypress response<br /><br />&nbsp; &nbsp;jmp keypress<br /><br />abutton:&nbsp; &nbsp;; a button sub routine<br /><br />&nbsp; &nbsp;jmp keypress<br /><br /><br /></div><br /><br />Where we have;<br /><br />lda $4016<br />lda $4016<br />(continued 6 times, 8 times total in the "keypress" section)<br /><br />One "lda $4016" for each of the 8 buttons of the keypad?<br /><br />Is this storing a zero in the accumulator each time?<br />Is it clearing the bit for each button?<br /><br />I'm not a programmer, I apologize for any really confused questions I might ask (they'll probably be a lot of them.)<br /><br />Thanks in advance,<br />T<br /><br />[/code]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jan 29, 2008 7:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with some code for reading keypresses</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">One "lda $4016" for each of the 8 buttons of the keypad?</div><br /><br />Yes.  One button at a time.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is this storing a zero in the accumulator each time?<br /></div><br /><br />No.  Due to some bits of $4016 being open bus, what you actually get is $40 if the button is not pressed, and $41 if the button is pressed.  Note that *neither* of these are zero, so a BNE following your LDA will not work.  You'll need to get the status of the low bit somehow.<br /><br />One way to do this is to mask out the low bit with an AND operation<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $4016<br />AND #$01&nbsp; &nbsp; &nbsp; ; only want low bit<br />BNE wherever&nbsp; ; jump if button pressed<br /></div><br /><br />Another way is to shift the low bit into the carry flag by way of LSR:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $4016<br />LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; low bit moves into C flag<br />BCS wherever&nbsp; ; jump if C set &#40;button was pressed&#41;<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is it clearing the bit for each button?<br /></div><br />kinda....  I'm not sure I'm understanding what you're asking here... but anyway what happens is this:<br /><br />Strobing the joypad (writing 1, then 0 to $4016) takes a "snapshot" of what buttons the user is currently pressing.  Once this snapshot is taken, it won't be changed until another snapshot is taken.  When you read $4016, you're not really getting the realtime state of the buttons, you're getting that snapshot.<br /><br />Once you read a button status from $4016, you <em>cannot</em> read that paticular button state from $4016 again unless you take another snapshot and start the reading process all over.<br /><br />This makes $4016 not useful at all for quick access to button status.  Often in a game you'll need to check button status in several areas, and doing over half a dozen $4016 reads each time isn't very practical.  Because of this... games generally keep a variable in RAM where they dump the button states to.  Then they can read any button's state any time without hassling with $4016.  Though you'd still need to strobe $4016 and read from it every once in a while to get fresh info -- games do this once every frame.<br /><br />A way this might be accomplished:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />; assuming button_state is a variable in RAM<br />;&nbsp; &nbsp;&#40;this routine is not optimized -- it's just to show the idea<br />;&nbsp; &nbsp;there are tricks and stuff to speed it up but I figure it's better<br />;&nbsp; &nbsp;for you to just grasp the concept first&#41;<br /><br />updatejoy:<br />&nbsp; ; first, strobe the joypad<br />&nbsp; LDA #1<br />&nbsp; STA $4016<br />&nbsp; LDA #0<br />&nbsp; STA $4016<br /><br />&nbsp; ; now we're going to loop 8 times &#40;once for each button&#41;, and<br />&nbsp; ; rotate each button's status into our button_state variable<br /><br />&nbsp; LDX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set X to 8 &#40;the number of times we want to loop&#41;<br />&nbsp; joyloop:<br />&nbsp; &nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; get button state<br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; shift it into the C flag<br />&nbsp; &nbsp; ROR button_state&nbsp; ; rotate C flag into our button_state variable<br />&nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; decrement X &#40;our loop counter&#41;<br />&nbsp; &nbsp; BNE joyloop&nbsp; &nbsp; &nbsp; &nbsp;; jump back to our loop until X is zero<br /><br />&nbsp; RTS<br /></div><br /><br />If you call that routine once per frame... 'button_state' will be refreshed with the status of all the buttons -- each bit being one of the buttons.  You can then use an AND to mask out which button you're interested in:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA button_state<br />&nbsp; AND #%10000000&nbsp; ; check high bit &#40;right&#41;<br />&nbsp; BNE right_is_down<br /><br />&nbsp; LDA button_state<br />&nbsp; AND #%00001000<br />&nbsp; BNE start_is_down<br /><br />&nbsp; ; etc<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Wed Jan 30, 2008 6:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks a lot for your help. This is a lot fancier than what I've seen.
<br />
<br />I think I'm understanding most of what you described. I have to digest it.
<br />
<br />When you say "what you actually get is $40 if the button is not pressed, and $41 if the button is pressed."
<br />
<br />Those hex numbers are being stored in the accumulator?
<br />
<br />If so then I can understand why we're doing the other stuff such as;
<br />AND #01 to get the low bit of a button press.
<br />
<br />I still have to go over the ROR stuff.
<br />
<br />Thanks again, very very educational. Appreciate it.
<br />
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jan 30, 2008 6:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">When you say "what you actually get is $40 if the button is not pressed, and $41 if the button is pressed."<br /><br />Those hex numbers are being stored in the accumulator?</div><br />Yes. You get some of the bits from the controller circuitry, and you get some of the bits left over from the last byte of the instruction.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I still have to go over the ROR stuff.</div>
<br />ROR shifts the entire byte to the right by 1 bit, puts the old carry as the new bit 7, and puts the old bit 0 as the new carry. ROL does the opposite. LSR is a shortcut for CLC ROR, and ASL is CLC ROL.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Wed Jan 30, 2008 7:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">electro wrote:</div><div class="quotecontent">When you say "what you actually get is $40 if the button is not pressed, and $41 if the button is pressed."<br /><br />Those hex numbers are being stored in the accumulator?</div><br />Yes. You get some of the bits from the controller circuitry, and you get some of the bits left over from the last byte of the instruction.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I still have to go over the ROR stuff.</div><br />ROR shifts the entire byte to the right by 1 bit, puts the old carry as the new bit 7, and puts the old bit 0 as the new carry. ROL does the opposite. LSR is a shortcut for CLC ROR, and ASL is CLC ROL.</div>
<br />
<br />Thank you. I see.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />LDX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set X to 8 &#40;the number of times we want to loop&#41; <br />&nbsp; joyloop: <br />&nbsp; &nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; get button state <br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; shift it into the C flag <br />&nbsp; &nbsp; ROR button_state&nbsp; ; rotate C flag into our button_state variable <br />&nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; decrement X &#40;our loop counter&#41; <br />&nbsp; &nbsp; BNE joyloop&nbsp; &nbsp; &nbsp; &nbsp;; jump back to our loop until X is zero <br /><br /></div><br /><br /><br /><br />So in this loop (above) we're shifting the low bit of 01000000 or 01000001 into the carry bit using LSR.<br />Then shifting the carry bit using ROR into the button_state variable.<br /><br />*After ROR does its thing the carry bit is now the high bit?<br /><br />Doing that eight times, once for each button.<br /><br />I think I understand now, or starting to.<br /><br />But how did you guys know it was actually a $40 for no press and a $41 for a press?<br /><br />Thanks, extremely helpful.<br /><br />T[/code]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jan 30, 2008 8:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">The AND #01 I've been seeing in people's code makes sense now since we only want the low bit. But how did you guys know it was actually a $40 for no press and a $41 for a press?</div><br />Some of us ran tests on NES hardware. Others watched (especially unlicensed) games run in emulators, looking for why they expected exactly $41 to continue. Then the NES reverse engineering community investigated further, and found that the three bytes on the data bus prior to this were $A5 $16 $40 (LDA $4016), resulting in a hypothesis of bus capacitance (the $40). Further tests confirmed this behavior: reading the controller port with an indexed mode with a page crossing (e.g. LDX #$96 LDA $3F80,X) returned something other than $40 or $41 in register A.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are there any tutorials or other material on reading the gamepads?</div>
<br />You could try <a href="http://nesdevwiki.org/index.php/Gamepad_code" class="postlink">the wiki</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Jan 31, 2008 7:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&nbsp;LDX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set X to 8 &#40;the number of times we want to loop&#41; <br />&nbsp; joyloop: <br />&nbsp; &nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; get button state <br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; shift it into the C flag <br />&nbsp; &nbsp; ROR button_state&nbsp; ; rotate C flag into our button_state variable <br />&nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; decrement X &#40;our loop counter&#41; <br />&nbsp; &nbsp; BNE joyloop&nbsp; &nbsp; &nbsp; &nbsp;; jump back to our loop until X is zero <br /><br /></div>
<br />
<br />Just wondering if I understand this correctly.
<br />
<br />If at the start of the loop the accumulator had #%01000001 (#$41) in it.
<br />After LSR we would now have: #%00100000 (#$20) and the carry flag would be set? 
<br />
<br />Then, after ROR, the carry bit gets put into the "high bit" position (position 7), while also shifting all the bits over again to produce this: #%10010000 (#$90), stored in the button_state variable after the first run through the loop)?
<br />
<br />Also, after ROR, would the carry flag then be automatically cleared since the low bit is a zero (after the first run through the loop)?
<br />
<br />Thanks,
<br />Tony

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jan 31, 2008 8:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">Just wondering if I understand this correctly.<br /><br />If at the start of the loop the accumulator had #%01000001 (#$41) in it.<br />After LSR we would now have: #%00100000 (#$20) and the carry flag would be set?</div><br />Correct so far.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then, after ROR, the carry bit gets put into the "high bit" position (position 7), while also shifting all the bits over again to produce this: #%10010000 (#$90), stored in the button_state variable after the first run through the loop)?</div><br />Almost. What was already in button_state on the previous run through the loop? Or to put it another way, "shifting all the bits" of what?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, after ROR, would the carry flag then be automatically cleared since the low bit is a zero (after the first run through the loop)?</div>
<br />It depends on what was in button_state before the first run.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Jan 31, 2008 8:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Almost. What was already in button_state on the previous run through the loop? Or to put it another way, "shifting all the bits" of what?<br /></div>
<br />
<br />
<br />I thought that "ROR button_state" meant that we perform ROR on the number in the accumator after "LSR A", and then store the result in the button_state variable.
<br />
<br />In other words I thought we were performing ROR on this number: 
<br />#%00100000, which would have produced this if the C flag was set: 
<br />#%10010000 ?. 
<br />
<br />Then, I thought that number would be stored the button_state variable.
<br />
<br />(I guess that would have been:
<br />LDA #$41
<br />LSR A
<br />ROR A
<br />STA button_state
<br />
<br />(Which would make no sense...)
<br />
<br />Ok, I <em>think</em> I see where I went wrong. In the "joyloop", the "ROR button_state" is perfroming ROR on the number stored in the button_state variable, not the contents of the accumulator after "LSR A" ?
<br />
<br />In the "LSR A" of "joyloop", we're just using the low bit to set or clear the C flag. In the case of $41 the C flag would be set after "LSR A", and then using ROR the bit in the C would be added into the high bit position of what was already in the button_state variable, (and the bits of what ever was in the button_state variable would have also been shifted to the right) ?
<br />
<br />Thanks for the help.
<br />
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jan 31, 2008 10:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">I thought that "ROR button_state" meant that we perform ROR on the number in the accumator after "LSR A", and then store the result in the button_state variable.</div><br />The 6502 instruction:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ROR button_state</div><br />What you thought was happening:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ROR A<br />&nbsp; STA button_state</div><br />What is actually happening is closer to this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; PHA<br />&nbsp; LDA button_state<br />&nbsp; ROR A<br />&nbsp; STA button_state<br />&nbsp; PLA</div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ok, I <em>think</em> I see where I went wrong. In the "joyloop", the "ROR button_state" is perfroming ROR on the number stored in the button_state variable, not the contents of the accumulator after "LSR A" ?</div><br />Correct.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In the "LSR A" of "joyloop", we're just using the low bit to set or clear the C flag. In the case of $41 the C flag would be set after "LSR A", and then using ROR the bit in the C would be added into the high bit position of what was already in the button_state variable, (and the bits of what ever was in the button_state variable would have also been shifted to the right) ?</div>
<br />Yes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Jan 31, 2008 2:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the help, really appreciate it.
<br />
<br />I understand this now:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">updatejoy: <br />&nbsp; ; first, strobe the joypad <br />&nbsp; LDA #1 <br />&nbsp; STA $4016 <br />&nbsp; LDA #0 <br />&nbsp; STA $4016 <br /><br />&nbsp; ; now we're going to loop 8 times &#40;once for each button&#41;, and <br />&nbsp; ; rotate each button's status into our button_state variable <br /><br />&nbsp; LDX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set X to 8 &#40;the number of times we want to loop&#41; <br />&nbsp; joyloop: <br />&nbsp; &nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; get button state <br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; shift it into the C flag <br />&nbsp; &nbsp; ROR button_state&nbsp; ; rotate C flag into our button_state variable <br />&nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; decrement X &#40;our loop counter&#41; <br />&nbsp; &nbsp; BNE joyloop&nbsp; &nbsp; &nbsp; &nbsp;; jump back to our loop until X is zero <br /><br />&nbsp; RTS <br /></div><br /><br />And think I understand what's happening here now as well:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA button_state <br />&nbsp; AND #%10000000&nbsp; ; check high bit &#40;right&#41; <br />&nbsp; BNE right_is_down <br /><br />&nbsp; LDA button_state <br />&nbsp; AND #%00001000 <br />&nbsp; BNE start_is_down <br /></div>
<br />
<br />So the "AND" is a kind of comparison operation?
<br />
<br />In the first instance using the "mask" above, regardless of any other bits in button_state, if there is a 1 in the 7th position (of button_state) than we will branch to the subroutine "right is down"?
<br />
<br />Same with second instance, if there is a 1 in the 3rd poistion we can branch to "start_is_down"?
<br />
<br />Thanks again, extremely helpful stuff.
<br />
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 01, 2008 4:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">And think I understand what's happening here now as well:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA button_state <br />&nbsp; AND #%10000000&nbsp; ; check high bit &#40;right&#41; <br />&nbsp; BNE right_is_down <br /><br />&nbsp; LDA button_state <br />&nbsp; AND #%00001000 <br />&nbsp; BNE start_is_down <br /></div><br /><br />So the "AND" is a kind of comparison operation?</div><br />The AND instruction performs a <a href="http://en.wikipedia.org/wiki/Logical_conjunction#Bitwise_operation" class="postlink">bitwise logical conjunction</a>, the same operation as the &amp; operator in the C language.<br /><br />This code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA #%00111100<br />&nbsp; AND #%00001111</div><br />leaves %00001100 ($0C) in register A.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In the first instance using the "mask" above, regardless of any other bits in button_state, if there is a 1 in the 7th position (of button_state) than we will branch to the subroutine "right is down"?</div>
<br />Yes. When there is a 0 in bit 7, the AND results in %00000000 ($00) in A. Like other <a href="http://en.wikipedia.org/wiki/Arithmetic_logic_unit" class="postlink">ALU</a> results of zero, this puts 1 in P.Z, so BNE (branch if P.Z is 0) does nothing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Fri Feb 01, 2008 8:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now I guess I need to know what the binary number is for each individual key on the keypad, so that I can then "mask" them with the "AND" operation?
<br />
<br />I was given "right" and "start".
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA button_state <br />&nbsp; AND #%10000000&nbsp; ; check high bit &#40;right&#41; <br />&nbsp; BNE right_is_down <br /><br />&nbsp; LDA button_state <br />&nbsp; AND #%00001000 <br />&nbsp; BNE start_is_down<br /></div> 
<br />
<br />
<br />
<br />Then setting up my button_state variable in RAM, would that be an equate?
<br />
<br />Like button_state = a memory address in RAM?
<br />
<br />Thanks again,
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 01, 2008 9:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">Now I guess I need to know what the binary number is for each individual key on the keypad, so that I can then "mask" them with the "AND" operation?</div><br />Yes. You can come up with these by looking at the order that keypresses come out of a <a href="http://nesdevwiki.org/index.php/Standard_Controller" class="postlink">standard controller</a>.  And it's best to assign names for constants like these:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">KEY_START = %00001000<br />KEY_RIGHT = %10000000</div><br />Then you can use these constants in code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; AND #KEY_RIGHT</div><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then setting up my button_state variable in RAM, would that be an equate?<br /><br />Like button_state = a memory address in RAM?</div><br />That will work. Some might prefer a "reserve uninitialized space" command, such as this, in CA65 syntax:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />button_state: .res 1</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Fri Feb 01, 2008 10:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great. Thanks for the link, very helpful.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">key_a = %00000001 ; A button press<br /><br />key_b = %00000010 ; B<br /><br />key_select = %00000100 ; select<br /><br />key_start = %00001000 ; start<br /><br />key_up = %00010000 ; up arrow<br /><br />key_down = %00100000 ; down <br /><br />key_left = %01000000 ; left arrow<br /><br />key_right = %10000000 ; right<br /></div>
<br />
<br />Wondering now how I might read combinations of buttons. Would I need to store another variable in ram called button_state2 ?
<br />
<br />Well, that's for later. I should just stick to trying to get this working.
<br />
<br />Thanks again,
<br />T

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>