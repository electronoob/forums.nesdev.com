<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=72" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2004-12-12T15:57:52-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=72</id>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2004-12-12T15:57:52-07:00</updated>
<published>2004-12-12T15:57:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=517#p517</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=517#p517"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=517#p517"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />How do you want to <em>write</em> to your 256kb Chr-Ram ? MMC5 doesn't support this at all, as far I know. ExGrafix mode was created in compensation of this.<br /></div><br /><br />Well, it's not like the MMC5 doesn't have the common background bankswitching theme that most other mappers have. You just have to wire up an 256KB SRAM chip and rewire it to match the pinout. You might then need to chir cart edge line CHR R/W between the MMC5 and the SRAM chips R/W.<br /><br />You then (at the beginning of VBLANK), turn of ExGrafix mode and put in the CHR bankswitching sceme and switch to the bank who's RAM you want to write too. And then right to the bankswitched area that you assigned (some place in the PPUs $0000-$1FFF area). I believe it would be as simple as that as the MMC5 would change the SRAMs Address lines (depending on what's accessed and the CHR bankswitching theme set) as you write or read to the CHR-RAM. I 'm not completely sure of that however as I've never done aything like that before. I believe the VRC7 was able to do something like that, but I believe it only had 8KB (maybe it had 16KB ram?) CHR-RAM that was bankswitched in 1K banks (since I believe it was also designed for CHR-ROM so bankswitching was already inntegrated into the mapper and when they used CHR-RAM they decided they could use that capability even though it was RAM.<br /><br />I'm not sure what you'd actually write too if ExGrafix mode was setup (maybe the first 8KBs of the chip?), but with the regular CHR bankswitching on, I'm sure it would treat it as any other PPU access and switch the CHR-RAMs data lines accordingly to where your write are.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Hmmmm, <br />If you want choose between Chr-Rom and Chr-Ram, you should already choose your mapper. Only a few mappers supports both of them (MMC1, MMC3, and I don't know if there is any other). CNROM, MMC2, MMC4 and MMC5 supports only Chr-Rom, and UNROM, ANROM suports only Chr-Ram.<br /></div><br /><br />I don't see how a RAM chip and a ROM chip would act any different in an NES's eyes. I believe any mapper could support either CHR-ROM or CHR-RAM as long as you wire it up correctly. Most of the discrete logic chip mappers had CHR-RAM because that was the most beneficial (it could be stored in PRG-ROM, which was bankswitched, that way you could have a lot of CHR-data and PRG-data, just look at Lagrange Point). MMC1 "supports" both because it's beneficial to have either one since both chips may be bankswitched. The MMC3 "supports" both because it's beneficial either way.<br /><br />Think about it, UNROM could very well have a CHR-ROM chip, but having a whole mess of PRG-code and only 8KBs of CHR-ROM would not be very good, thus no games ever did that (they used something like CNROM instead).<br /><br />It's all a matter of the developers needs, some could use CHR-RAM or CHR-ROM with an MMC3 and produce great games because the MMC3 could compensate for each, but (although possible) you couldn't produce *great* games using CHR-ROM with UNROM (unless you wanted to do something like take Super Mario and add a whole mess more levels and music or something like that).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />PS : I looked at the Brian povancio's site about his project, Grand Theftendo. He said he's using MMC5 mapper and he also spoke about a tool to compress his graphics. So, that's impossible.<br /></div><br /><br />Did you mean "So, it's possible"? Brian could have easily been talking about the nametable data or something because I believe he wants the game to work an emulators and with the iNES format I don't believe you can have more than 8KBs of RAM (unless he sets up a new mapper number and somehow makes emu authors recognize it and add it). His game looks really good though <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The NES PPU does not read background and sprite data at the same time; instead, it reads background data during draw and sprite data during hblank. The MMC5 appears to count nametable accesses (of which there are always 34 on a scanline).<br /></div><br /><br />Ahh, yes your right, thx. I wasn't sure exactly how/when sprites were fetched so thx that explains it for me <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" />.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />CPROM, the Videomation mapper, does nearly the same thing.<br /></div><br /><br />Hmmm, I can't find any info on that mapper. Does it have more that 8KBs of RAM bankswitched or something. How exactly does it work? Could you show me where to find some info on it, it seems pretty interesting. thx <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Better would be to make a custom mapper that uses a really fast SRAM to map VRAM simultaneously into $6000-$7FFF and into PPU space.<br /></div><br /><br />Yeah, your right, but I was just thinking about what is currently available and such as I doubt any new NES mappers will ever be made (aside from Memblers Squeedo). It was just an idea and it would be much more practicle to incorporate it into a mapper of some sort (could actually make some pretty interesting games like that hmmm <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><p>Statistics: Posted by Guest — Sun Dec 12, 2004 3:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2004-12-12T03:50:21-07:00</updated>
<published>2004-12-12T03:50:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=512#p512</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=512#p512"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=512#p512"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Hmmm, think about using MMC5 ExGrafix with CHR-RAM. That'd be interesting. You could have a whole screen filled with unique RAM tiles.<br /></div><br />How do you want to <em>write</em> to your 256kb Chr-Ram ? MMC5 doesn't support this at all, as far I know. ExGrafix mode was created in compensation of this.<br />If you want choose between Chr-Rom and Chr-Ram, you should already choose your mapper. Only a few mappers supports both of them (MMC1, MMC3, and I don't know if there is any other). CNROM, MMC2, MMC4 and MMC5 supports only Chr-Rom, and UNROM, ANROM suports only Chr-Ram.<br /><br />PS : I looked at the Brian povancio's site about his project, Grand Theftendo. He said he's using MMC5 mapper and he also spoke about a tool to compress his graphics. So, that's impossible.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Dec 12, 2004 3:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2004-12-12T02:12:33-07:00</updated>
<published>2004-12-12T02:12:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=511#p511</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=511#p511"/>
<title type="html"><![CDATA[Re: CHR-ROM/RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=511#p511"><![CDATA[
<div class="quotetitle">J2 wrote:</div><div class="quotecontent"><br />Although that always confused me how the MMC5 did that. It used the whole memory for sprites....I guess it could switch the tiles around so that'd the background would work too. But what if it needed the exact same tile for both the background and the sprite at the same time?<br /></div><br />The NES PPU does not read background and sprite data at the same time; instead, it reads background data during draw and sprite data during hblank. The MMC5 appears to count nametable accesses (of which there are always 34 on a scanline).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />think about using MMC5 ExGrafix with CHR-RAM. That'd be interesting. You could have a whole screen filled with unique RAM tiles. Effectively making the whole screen bitmapped.<br /></div><br />CPROM, the Videomation mapper, does nearly the same thing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You could then have a buffer of the pixels on the onboard SRAM (you'd prolly need 15 KB and the MMC5 supports that). You could even do double buffering of the screen (which would prolly be necessary as it would take A LOT of VBLANK time to update the whole screen, which means the updating would take many frames to complete). Prolly the VERY best you could do is 4 fps, but you'd have to be a very good coder and use many tricks.<br /></div><br />Better would be to make a custom mapper that uses a really fast SRAM to map VRAM simultaneously into $6000-$7FFF and into PPU space.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 12, 2004 2:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2004-12-11T17:28:07-07:00</updated>
<published>2004-12-11T17:28:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=510#p510</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=510#p510"/>
<title type="html"><![CDATA[CHR-ROM/RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=510#p510"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />MMC5's ExGrafix mode (using CHR ROM) :<br />Automatic swap : YES for sprites, NO for bg (you need to set the ExRam)<br />Fast tileset swap : YES for sprites, NO for bg<br />100&amp; Custom tileset : NO for sprites, YES for bg (ExRam parameters can cover the whole Chr chip, you don't need to switch Chr banks midframe, etc...)<br />Special BG animation effect : NO (unless if you change the ExRam every frame, Just Breed does this, but it should be still hard to do)<br /></div></div><br /><br />If you didn't use Exgrafix mode then background could be swapped just fine. Sprites would have more tiles then the background if using 8x16 sprites, but still it would work the same. Although that always confused me how the MMC5 did that. It used the whole memory for sprites....I guess it could switch the tiles around so that'd the background would work too. But what if it needed the exact same tile for both the background and the sprite at the same time?<br /><br />Hmmm, think about using MMC5 ExGrafix with CHR-RAM. That'd be interesting. You could have a whole screen filled with unique RAM tiles. Effectively making the whole screen bitmapped.<br /><br />You could then have a buffer of the pixels on the onboard SRAM (you'd prolly need 15 KB and the MMC5 supports that). You could even do double buffering of the screen (which would prolly be necessary as it would take A LOT of VBLANK time to update the whole screen, which means the updating would take many frames to complete). Prolly the VERY best you could do is 4 fps, but you'd have to be a very good coder and use many tricks.<br /><br />All in all it'd prolly be too hard and slow to do, but not impossible. I guess you'd have too:<br /><br />1) Switch CHR-ROM with 256KB of CHR-RAM<br />2) Put MMC5 in ExGrafix mode<br />3) Put 0-127 into internal NES video ram (1ST nametable RAM), and loop it around 8 times (well until the 960 bytes are full). So put the bytes like 0, 1, 2, 3 etc....and then when you put 127 loop around back to 0 until the whole screen is filled up with 0-127 tiles.<br />4)Same thing as step 3, but do it with 128-256 and to NameTable 2.<br /><br />5)Then put 0s in the first 128 bytes of $5C00-$5CFF, and then 1s in the second 128 bytes, 2s in the third 128 bytes, and so on. That would allow both the nametables to then have their own bitmapped screen.<br /><br />6) You should then use MMC5 IRQs to allow you to get 15 more VBLANK scanlines. Put 224 into $5203 and activate IRQs with $5204. As soon as the IRQ triggers turn off the screen and use the 15KB of on-board RAM and write the bytes to CHR-RAM (you'll need to turn turn ex-grafix mode off, and switch banks to eventually write to it all).<br /><br />7)You could show NameTable 1 and then write to Nametable 2 and then when your done updating Nametable 2 switch to it via $2000. You could prolly only get 1 frame per second, but possibly more if you code it real well and/or reduce the screen resolution. All of the 15KB buffer of pixel memory would be updated outside of VBLANK and then written to CHR-RAM in VBLANK (this that is the only time it can, or if you turn off the screen that would allow you to write to VRAM).<br /><br />Hmmm, I'm was just thinking that might work, but it prolly doesn't matter because it's very impractle. Just an idea.<br /><br /><br />MMC5's ExGrafix mode (using CHR RAM) :<br />Automatic swap : YES for sprites, NO for bg (unless you didn't use EX-Grafix mode)<br />Fast tileset swap : YES for sprites, NO for bg (unless you didn't use EX-Grafix mode)<br />100&amp; Custom tileset : YES for sprites, YES for bg (ExRam parameters can cover 256KB of CHR-RAM + you can change the RAM in VBLANK if you wanted)<br />Special BG animation effect : YES (You could change around some tiles in RAM during VBLANK every frame if you wanted)<br /><br />The MMC5 even lowers the attribut color range so that each 8x8 pixels could have their own unique 4 colors from the palette.<br /><br />---------------------------<br /><br />Anyway, I like CHR-RAM a lot, but CHR-ROM is pretty useful too. Although you could use a board that has both CHR-ROM and RAM (I think an MMC3 board had something like that).<br /><br />In some vertical shooters (like Crisis Force and Uchuu Keibitai SDF) use CHR ROM (Uchuu Keibitai SDF also uses an MMC5, not Ex-grafix though) and have tiles bankswitched every frame to produce an awsome looking effect, it makes a pseudo vertical scrolling split (it looks cool) by using 8 different tiles for each animation and then changing the banks which "scrolls them" and then using actually scrolling to change the speed and stuff (it looks cool, but I can't explain too well).<br /><br />I think the effects like that though would do well with CHR-RAM though. You could have attributes for tiles and could scroll then or horizontally flip them and stuff. Like you could scroll a tile by taking the CHR-RAM tile and every frame shifting it's bytes down and looping them around.<br /><br />All-in-all:<br /><br />CHr-ROM:<br /><br />Con:<br />-Limited tiles (a certain maximum of tiles to have)<br />-Limited Page Flipping (depending on mapper, smallest is 64 tiles unless you use MMC5)<br />-Takes up a lot of space with animations<br /><br />Pro:<br />-Tiles already are there so less hassle  <br />-More PRG space<br />-Can switch very fast (mid-frame, even mid-scanline)<br /><br /><br />CHR-RAM:<br /><br />Con:<br />-Longer time to update<br />-Have to update from PRG-ROM to CHR-RAM, which (with exceptions) can only be done in precious VBLANK time.<br />-Possible longer loading times if a whole 4KB needs to be updated, while CHR-ROM can do it in a few cycles and it doesn't need to be in VBLANK.<br />-Animations are possible (completely custom), but only within a certain range of tiles depending on the routine (because it needs to use precious VBLANK time).<br /><br />Pro:<br />-Tiles completely customizable.<br />-Any range of routines can deal with the tiles to produce very neat effects and it could be very flexible, while CHR-ROM would have to waste a whole mess of ROM and would be fixed effects.<br />-The tiles could be compressed in PRG-ROM (thus overall ROM needed would be less)<p>Statistics: Posted by Guest — Sat Dec 11, 2004 5:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2004-12-11T11:33:07-07:00</updated>
<published>2004-12-11T11:33:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=508#p508</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=508#p508"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=508#p508"><![CDATA[
Yeah, MM6 swapping seems to be more advanced.<br />Take a look on Final Fantasy's ending : When the last boss is anihilated and when the word "the end" is sown on the screen are typical Chr-Ram SFX.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Dec 11, 2004 11:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2004-12-11T06:01:12-07:00</updated>
<published>2004-12-11T06:01:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=507#p507</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=507#p507"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=507#p507"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I just checked MM6 out and it implements some very clever swapping of both for the foreground and background tiles.<br /></div><br />I just noted that this stuff is already used in the first megaman, so it's not modern-stuff or anything.</div><br />But MM1 doesn't do any "live" sprite swapping (at least according to my rather limited investigation). It only swaps sprites at "zone" boundaries where any non-player sprites would be hidden anyway, and I didn't even see any mid-level backround tile switching at all.<br />My original point wasn't that the technique itself was advanced but rather that being able to cram the same amount of graphics as in the earlier CHR-ROM games without any aparent restrictions is impressive.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Sat Dec 11, 2004 6:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2004-12-11T04:38:38-07:00</updated>
<published>2004-12-11T04:38:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=505#p505</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=505#p505"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=505#p505"><![CDATA[
<div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />If you've seen the title screen fadeout effect on Munchie Attack, on there I'm simply changing one bit per frame on a single tile.<br /></div><br />Yeah, many SNES square games uses a similar effect when a monster is anihilated, ie FFMystic Quest, Final Fantasy 5, Live a Live, Chrono Trigger, ...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I just checked MM6 out and it implements some very clever swapping of both for the foreground and background tiles.<br /></div><br />I just noted that this stuff is already used in the first megaman, so it's not modern-stuff or anything.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Dec 11, 2004 4:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Great Hierophant]]></name></author>
<updated>2004-12-11T00:12:10-07:00</updated>
<published>2004-12-11T00:12:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=503#p503</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=503#p503"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=503#p503"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The only thing that would make CHR-RAM more fun for me is if a 4kB page could be fixed while the other 4kB can be bankswitched. Unfortunately, my Squeedo cart just swaps the whole 8kB page, but it's still pretty cool.<br /></div><br /><br />Get a Videomation CPROM cart, which does exactly that with 16KB of CHR-RAM, and replace the ROM with something writable.  Of course, 32KB of PRG-ROM isn't much to work with these days, so you may wish to use the extra lines on the '161 to increase the PRG-ROM up to 128KB, ala BNROM.  Even still you won't be creating Grand Theftendo with such a cart.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=58">Great Hierophant</a> — Sat Dec 11, 2004 12:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2004-12-10T22:26:25-07:00</updated>
<published>2004-12-10T22:26:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=502#p502</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=502#p502"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=502#p502"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Chr-Ram option also as a great advantage : You can "switch" every single tile to have any custom tileset. For exemple, any playable or unplayabe character from Final Fantasy 1-3 are 16 tiles weight. You always have the playable hero in sprite pattern table #00-#0f, then other people. This would be impossible using ChrRom (exept having a bank per playable hero, so 12 similars banks in FF1, and about 24 in FF3 !!). This is the equivalent to swap 16 tiles banks.<br />One other example from FF2 and 3 (not 1), every time you attack, the weapon's graphics are set in the pattern table before animation. Using chr-rom, this would be imposible, so a smaller space would be present for the other sprites, like FF1.<br /></div><br /><br />As well as sprites, FF3 also uses mix-n-match custom BG tilesets in its "locations" (caves, towns, buildings, etc).  Each location uses one of three sets of 26 tiles for the common objects (doors, chests, stairs), one of a dozen or so sets of 14 tiles for walls and floors, and three sets of 16 tiles and three sets of 8 tiles out of a "palette" of over 1000 tiles for other, location-specific objects.  This fine-grained customization wouldn't be possible with CHR ROM bankswitching, not without duplicating a whole lot of tiles.<p>Statistics: Posted by Guest — Fri Dec 10, 2004 10:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2004-12-10T15:44:45-07:00</updated>
<published>2004-12-10T15:44:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=500#p500</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=500#p500"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=500#p500"><![CDATA[
Some code I wrote for an unfinished game had to update at least 64 bytes of CHR-RAM every frame (not including name/attrib table updates) for animating various 16x16 sprites from a huge selection of possible tiles.<br /><br />So I had a really large unrolled load routine for it in RAM, it was just basically like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #0<br />sta $2006<br />lda #0<br />sta $2006<br />lda #0<br />sta $2007<br />lda #0<br />sta $2007<br />etc.<br /></div><br /><br />That's only 6 cycles per byte during vblank, though it costs some time to pre-load that buffer.<br /><br />I really like using CHR-RAM, myself.  If you've seen the title screen fadeout effect on Munchie Attack, on there I'm simply changing one bit per frame on a single tile.<br /><br />The only thing that would make CHR-RAM more fun for me is if a 4kB page could be fixed while the other 4kB can be bankswitched.  Unfortunately, my Squeedo cart just swaps the whole 8kB page, but it's still pretty cool.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Fri Dec 10, 2004 3:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2004-12-11T07:38:37-07:00</updated>
<published>2004-12-10T14:00:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=498#p498</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=498#p498"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=498#p498"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />My god, you're right.<br />I just checked MM6 out and it implements some very clever swapping of both for the foreground and background tiles.<br /></div><br /><br />That souldn't be that hard to do, you just need a few buffers saying if you're swapping something and read them every frame.<br /><br />Chr-Ram option also as a great advantage : You can "switch" every single tile to have any custom tileset. For exemple, any playable or unplayabe character from Final Fantasy 1-3 are 16 tiles weight. You always have the playable hero in sprite pattern table #00-#0f, then other people. This would be impossible using ChrRom (exept having a bank per playable hero, so 12 similars banks in FF1, and about 24 in FF3 !!). This is the equivalent to swap 16 tiles banks.<br />One other example from FF2 and 3 (not 1), every time you attack, the weapon's graphics are set in the pattern table before animation. Using chr-rom, this would be imposible, so a smaller space would be present for the other sprites, like FF1.<br />Here you are a list to compare different graphics methods :<br /><br />CHR ROM :<br />Automatic swap (don't need to have huge transfer subroutines) : YES<br />Fast tileset swap (usefull for animation) : YES<br />100% Custom tileset : NO (fixed tileset)<br />Special BG animation effect : YES, but this waste a lot of space (usefull only with 1kb/2kb swapping)<br /><br />CHR RAM :<br />Automatic swap : NO (you need huge transfer subroutines)<br />Fast tileset swap : NO<br />100% Custom tileset : YES<br />Special BG animation effect : YES (but only a smal number of tiles can do this)<br /><br />MMC5's ExGrafix mode (using CHR ROM) :<br />Automatic swap : YES for sprites, NO for bg (you need to set the ExRam)<br />Fast tileset swap : YES for sprites, NO for bg<br />100&amp; Custom tileset : NO for sprites, YES for bg (ExRam parameters can cover the whole Chr chip, you don't need to switch Chr banks midframe, etc...)<br />Special BG animation effect : NO (unless if you change the ExRam every frame, Just Breed does this, but it should be still hard to do)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Dec 10, 2004 2:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2004-12-10T04:02:49-07:00</updated>
<published>2004-12-10T04:02:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=496#p496</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=496#p496"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=496#p496"><![CDATA[
<div class="quotetitle">Great Hierophant wrote:</div><div class="quotecontent"><br />Only Mega Man 3 and 5 do this, as they use CHR-ROM.  Mega Man 4 and 6 use CHR-RAM, so they would have to rely on other methods to swap sprite tiles in mid-level.<br /></div><br />My god, you're right.<br />I just checked MM6 out and it implements some very clever swapping of both for the foreground and background tiles.<br />Essentially the game emulates an MMC3 with 4 swappable background banks and 2 swappable sprite banks, both of which can be updated while the display is on. A few frames before a new enemy is introduced the sprite tiles begins to change, this must require very calculated enemy sequences to work seamlessly.<br />Considering that the vblank is only about 2000 cycles of which 800 or so is allocated for sprite dma and scrolling and that a copying a single byte takes 8 cycles, this means that a single swap occupies about 14 frames. Maybe the PPU is turned off a few lines early to gain a few precious vblank lines?<br /><br />I'm impressed. I'm even considering switching to CHR-RAM myself.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Fri Dec 10, 2004 4:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Great Hierophant]]></name></author>
<updated>2004-12-09T18:00:36-07:00</updated>
<published>2004-12-09T18:00:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=494#p494</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=494#p494"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=494#p494"><![CDATA[
Essentially using RAM is simple (no need to bank 8KB of CHR-RAM), cost-effective, and flexible.  Using ROM is speedy and good when you are approaching the board's PRG-ROM limit.  <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The later Megaman games uses the MMC3's capability to switch multiple parts of the sprite tileset individually to swap in new enemies and animations mid-level.<br /></div><br /><br />Only Mega Man 3 and 5 do this, as they use CHR-ROM.  Mega Man 4 and 6 use CHR-RAM, so they would have to rely on other methods to swap sprite tiles in mid-level.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=58">Great Hierophant</a> — Thu Dec 09, 2004 6:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2004-11-29T11:26:07-07:00</updated>
<published>2004-11-29T11:26:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=368#p368</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=368#p368"/>
<title type="html"><![CDATA[Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=368#p368"><![CDATA[
CHR-RAM allows for your game to do graphic edits without needed to have all the graphics pre-rendered (so.. dynamic image manipulation).  Final Fantasy 3 does some nifty animation with its overworld water that couldn't be done with CHR-ROM without wasting a whole lot of graphics space.<br /><br />CHR-RAM also allows you to change and rearrange individual tiles instead of having to work with bank restrictions.  You can 'swap out' a single tile with CHR-RAM.. whereas I believe the smallest swappable CHR-ROM bank is 1k (64 tiles).<br /><br />But as already mentioned... swapping out CHR-ROM banks is WAY faster than rewriting your pattern tables in CHR-RAM<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Nov 29, 2004 11:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2004-11-29T02:37:11-07:00</updated>
<published>2004-11-29T02:37:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=72&amp;p=362#p362</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=362#p362"/>
<title type="html"><![CDATA[Re: Character ROM vs. Character RAM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=72&amp;p=362#p362"><![CDATA[
There are some other things you might want to consider when choosing between ROM and RAM.<br /><br />The obvious advantage of ROM banking is that it enables you to switch tilesets a whole lot faster. While this might not be much of an issue when changing levels it's a very neat feature to dynamically switch sprites as needed. The later Megaman games uses the MMC3's capability to switch multiple parts of the sprite tileset individually to swap in new enemies and animations mid-level.<br /><br />Perhaps the greates advantage of RAM is that it enables you to compress the tilesets in ROM. Even some of the faster algorithms can often halve the their size.<br />RAM can also be used to animate a single tile to achieve many special effects that would otherwise waste multiple ROM banks (think paralax scrolling or snow/water effects).<br />And then there's the infamous Elite that does vector graphics by plotting to the tileset.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Mon Nov 29, 2004 2:37 am</p><hr />
]]></content>
</entry>
</feed>