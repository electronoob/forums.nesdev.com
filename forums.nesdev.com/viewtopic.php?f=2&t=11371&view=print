<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - [lazy] Can't get this floating point code</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">[lazy] Can't get this floating point code</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11371">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11371</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>michikaze</b> [ Sat Jun 28, 2014 3:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>[lazy] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This code: <!-- m --><a class="postlink" href="http://6502.org/source/floats/wozfp1.txt">http://6502.org/source/floats/wozfp1.txt</a><!-- m --><br />I wandered around aimlessly as usual, and stumbled at this. Happy at the possibility to finally improve my math-fu, I started reading. Then confusion, then lazyness, then this thread.<br /><br />You can either discuss this somehow, or answer questions below made exclusively for you.<br /><br />I want to look at this code in fceux's debugger. Maybe anyone have this or simular code in some demo? Running code in my head isn't a pleasant experience. Or maybe it is...///<br /><br />How is it possible to have logarithm on a processor that doesn't support even multiplication? I lack proper math background to understand it.<br /><br />Aaaand, the most stupid of theeeeem......! What the hell IS logarithm, in that game it can be useful? Yes, 6502 core hasn't been used only in NES, I know, but blargh.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jun 28, 2014 3:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [lazy] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">michikaze wrote:</div><div class="quotecontent">How is it possible to have logarithm on a processor that doesn't support even multiplication? I lack proper math background to understand it.</div><br />Probably <a href="https://en.wikipedia.org/wiki/CORDIC" class="postlink">CORDIC</a>, a way of computing transcendental functions (sine, cosine, exponent, logarithm, etc.) using only adds and shifts. It is derived using a bunch of trigonometric identities.<br /><br />Sine and cosine and arctangent are useful for things like determining which way a player's unit is pointed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jun 28, 2014 10:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [lazy] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">michikaze wrote:</div><div class="quotecontent">I want to look at this code in fceux's debugger.</div><br />That would require you to build a valid NES ROM around the code. May I suggest this <a href="http://www.exifpro.com/utils.html" class="postlink">6502 Simulator</a> instead? It has some nice debugging features and you can easily get code running with jus an ORG statement indicating where the code should be located in memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>michikaze</b> [ Sun Jun 29, 2014 1:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [lazy] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">CORDIC</div><br />Nice, thank you!<br />From wikipedia page I got only how to calculate sine and cosine. But it also methoned that it can be used for exponential functions and logarithms. Huh...<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">6502 Simulator</div><br />Nice, thank you! Going to try soon.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 29, 2014 5:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [lazy] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="https://en.wikibooks.org/wiki/Digital_Circuits/CORDIC" class="postlink">&quot;CORDIC&quot; in the Digital Circuits textbook on Wikibooks</a> explains how it's generalized to exp and log.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Mon Jun 30, 2014 9:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [lazy] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looks more like a couple of iterations of some other numerical method to me, though I must confess to being to lazy (and/or stupid) to decipher it. In any event Feynman's algorithm is probably faster and certainly easier to understand than CORDIC, though it boils down to a suspiciously similar shift-and-add sequence.<br /><br />Let's say you want to compute the base-2 logarithm of <em>1â‰¤x&lt;2</em>. This is easily generalized to any binary floating-point number by computing the logarithm of the normalized mantissa and adding the exponent (plus one) to the result. The trick, then, is to factorize <em>x</em> into a series of <em>1+2^-i</em> factors. That is we start with <em>y=1</em> and from <em>i=0</em> on down successively multiply by <em>1+2^-i</em>, keeping the new factor if the result does not exceed <em>x</em>. Note that these multiplications may be implemented through shift-and-add, e.g. <em>y'=y&gt;&gt;i</em>.<br /><br />The logarithm <em>y</em> is then simply the sum of the logarithms of all individual <em>1+2^-i</em> factors which may be pre-calculated and stored in a table.<br /><br />Here's a quick-and-dirty C implementation in 1.15-bit fixed-point:<div class="codetitle"><b>Code:</b></div><div class="codecontent">unsigned int feynlog(unsigned int x) {<br />&nbsp; &nbsp;static const unsigned int tab&#91;&#93; = {<br />&nbsp; &nbsp;&nbsp; &nbsp;/* i=1&nbsp; */ 19168, /* i=2&nbsp; */ 10549,<br />&nbsp; &nbsp;&nbsp; &nbsp;/* i=3&nbsp; */ 5568,&nbsp; /* i=4&nbsp; */ 2866,<br />&nbsp; &nbsp;&nbsp; &nbsp;/* i=5&nbsp; */ 1455,&nbsp; /* i=6&nbsp; */ 733,<br />&nbsp; &nbsp;&nbsp; &nbsp;/* i=7&nbsp; */ 378,&nbsp; &nbsp;/* i=8&nbsp; */ 184,<br />&nbsp; &nbsp;&nbsp; &nbsp;/* i=9&nbsp; */ 92,&nbsp; &nbsp; /* i=10 */ 46,<br />&nbsp; &nbsp;&nbsp; &nbsp;/* i=11 */ 23,&nbsp; &nbsp; /* i=12 */ 12,<br />&nbsp; &nbsp;&nbsp; &nbsp;/* i=13 */ 6,&nbsp; &nbsp; &nbsp;/* i=14 */ 3,<br />&nbsp; &nbsp;&nbsp; &nbsp;/* i=15 */ 1,&nbsp; &nbsp; &nbsp;/* i=16 */ 1<br />&nbsp; &nbsp;};<br />&nbsp; &nbsp;unsigned int y = 32768;<br />&nbsp; &nbsp;unsigned int z = 0;<br />&nbsp; &nbsp;for(unsigned int i = 1; i &lt; 16; ++i) {<br />&nbsp; &nbsp;&nbsp; &nbsp;unsigned int t = y + (y &gt;&gt; i);<br />&nbsp; &nbsp;&nbsp; &nbsp;if(t &lt;= x) {<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;y = t;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;z += tab&#91;i - 1&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;return z;<br />}</div><br />As for uses the most frequent on the 6502 is probably to speed up multiplication and division, much as a human would use a slide-rule, though typically you'd store pre-calculated logarithm and exponent tables rather than computing them at start-up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>michikaze</b> [ Tue Jul 01, 2014 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [lazy] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">Feynman's algorithm</div><br />......Please let me to stare at this for a few more days, I'll get this for sure......<br />Don't get that those numbers in the array are.<br /><br />Hey, google showed something funny:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The Feynman Algorithm:<br /><br />    Write down the problem.<br />    Think real hard.<br />    Write down the solution.<br /><br />The Feynman algorithm was facetiously suggested by Murray Gell-Mann, a colleague of Feynman, in a New York Times interview.</div><br /><br />Now retyping the code to get it running in the emulator, please watch warmly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Jul 01, 2014 4:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [lazy] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">michikaze wrote:</div><div class="quotecontent">......Please let me to stare at this for a few more days, I'll get this for sure......<br />Don't get that those numbers in the array are.</div>Perhaps an example might serve to illustrate the scheme.<br /><br />The factorization here is analogous to the positional number system. Imagine that you wanted to encode any number <em>1â‰¤x&lt;2</em> by hand as a binary fraction. You might start with 1, then successively add further smaller terms. If the result is still larger after adding a term then include it (a one bit), otherwise omit it and move on (a zero bit).<br /><br />Let's pick <em>x=1.4142</em>:<div class="codetitle"><b>Code:</b></div><div class="codecontent">1+2^-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = %1.1&nbsp; &nbsp; &nbsp; = 1.5 &gt; x, so omit the 2^-1 term<br />1&nbsp; &nbsp; &nbsp;+2^-2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= %1.01&nbsp; &nbsp; &nbsp;= 1.25 &lt; x, so include the 2^-2 term<br />1&nbsp; &nbsp; &nbsp;+2^-2+2^-3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = %1.011&nbsp; &nbsp; = 1.375 &lt; x, so include the 2^-3 term<br />1&nbsp; &nbsp; &nbsp;+2^-2+2^-3+2^-4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= %1.0111&nbsp; &nbsp;= 1.4375 &gt; x, so omit the 2^-4 term<br />1&nbsp; &nbsp; &nbsp;+2^-2+2^-3&nbsp; &nbsp; &nbsp;+2^-5&nbsp; &nbsp; &nbsp; = %1.01101&nbsp; = 1.40625 &lt; x, so include the 2^-5 term<br />1&nbsp; &nbsp; &nbsp;+2^-2+2^-3&nbsp; &nbsp; &nbsp;+2^-5+2^-6 = %1.011011 = 1.421875 &gt; x, so omit the 2^-6 term</div>This is a variant of binary search. At each step the approximation grows more precise, rapidly converging on the true value one bit at a time.<br /><br />Instead of using a sum of <em>2^-i</em> terms Feynman's algorithm uses a product of <em>1+2^-i</em> factors to encode the number:<div class="codetitle"><b>Code:</b></div><div class="codecontent">1Â·(1+2^-1)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 1.5 &gt; x, so omit the 1+2^-1 factor<br />1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Â·(1+2^-2)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 1.25 &lt; x, so include the 1+2^-2 factor<br />1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Â·(1+2^-2)Â·(1+2^-3)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 1.40625 &lt; x, so include the 1+2^-3 factor<br />1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Â·(1+2^-2)Â·(1+2^-3)Â·(1+2^-4)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 1.494140625 &gt; x, so omit the 1+2^-4 factor<br />1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Â·(1+2^-2)Â·(1+2^-3)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Â·(1+2^-5)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 1.4501953125 &gt; x, so omit the 1+2^-5 factor<br />1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Â·(1+2^-2)Â·(1+2^-3)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Â·(1+2^-6)&nbsp; = 1.42822265625 &gt; x, so omit the 1+2^-6 factor</div>In this case it is less apparent that any <em>x</em> in the range is reachable. The base 2 used here is in fact sub-optimal but is close enough to the ideal one (~2.2656) while being easily evaluated through shifts and adds. In general smaller bases are finer grained, meaning that the results converge more slowly, whereas larger bases have unreachable gaps in the output.<br /><br />The point of all this is to make use of the logarithmic identity which lowers multiplication into addition, e.g. <em>log(p*q) = log p + log q</em>. Therefore if we can factorize <em>x</em> into a series of <em>1+2^-1</em> factors then <em>log x</em> is simply the sum of the logarithms of the included factors.<br />In our example <em>y = 1Â·(1+2^-2)Â·(1+2^-3) â‰ˆ x</em>, therefore <em>log x â‰ˆ log y = log(1Â·(1+2^-2)Â·(1+2^-3)) = log 1 + log(1+2^-2) + log(1+2^-3)</em>.<br /><br />This is in fact what the table in the code above is all about. A table of pre-calculated 1+2^-i logarithms. Binary logarithms in fixed-point to be precise, e.g. <em>log2(1+2^-1) Â· 2^15 â‰ˆ 19168</em>.<br /><br /><div class="quotetitle">michikaze wrote:</div><div class="quotecontent">Hey, google showed something funny:<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The Feynman Algorithm:<br />    Write down the problem.<br />    Think real hard.<br />    Write down the solution.</div></div>Good advice. He was active in a different field so I suppose I should have called it Feynman's logarithm algorithm to help your Google efforts but <em>logarithm algorithm</em> sounds somehow redundant to me, even though I know the etymologies are quite distinct.<br /><br />I apologize for these half-on-topic ramblings but I'm a sucker for elegant algorithms and this one certainly qualifies. Despite its original application.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>michikaze</b> [ Sat Jul 05, 2014 6:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [talking with myself] Can't get this floating point code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First - you guys are awesome.<br /><br />Second - I'm playing with function &quot;float&quot; now. And trying to comment. Look if you have nothing better to do.<br /><br />Emulator's editor and this forum's formatter have different tab lengths, so it's not pretty...<br /><br />The first part is commented out, because with it, execution starts from adress $0.<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;&nbsp; &nbsp;.org $0<br />;&nbsp; &nbsp;.db 0,0,0&nbsp; &nbsp;;not used?<br />;sign:&nbsp; &nbsp;.db $ea<br />;x2:&nbsp; &nbsp;.db $ea&nbsp; &nbsp;&nbsp; &nbsp;;exponent 2<br />;m2:&nbsp; &nbsp;.db 0,0,0&nbsp; &nbsp;;mantissa 2<br />;x1:&nbsp; &nbsp;.db $ea<br />;m1:&nbsp; &nbsp;.db 0,0,0<br />;e:&nbsp; &nbsp;.db 0,0,0,0&nbsp; &nbsp;;scratch<br />;z:&nbsp; &nbsp;.db 0,0,0,0<br />;t:&nbsp; &nbsp;.db 0,0,0,0<br />;sexp:&nbsp; &nbsp;.DB 0,0,0,0<br />;int:&nbsp; &nbsp;.db 0<br /><br /><br />sign = $3<br />x2 = $4<br />m2 = $5<br />x1 = $8<br />m1 = $9<br />e = $c<br />z = $10<br />t = $14<br />sexp = $18<br />int = $1c&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;.org $600<br /><br />io_putc&nbsp; &nbsp;= $e001<br />io_posx&nbsp; &nbsp;= $e005<br />io_posy&nbsp; &nbsp;= $e006<br /><br />&nbsp; &nbsp;;LDA #9<br />&nbsp; &nbsp;;STA io_posx<br />&nbsp; &nbsp;;LDA #2<br />&nbsp; &nbsp;;STA io_posy<br /><br />&nbsp; &nbsp;; print 'aaa'<br />&nbsp; &nbsp;;LDA #'a'<br />&nbsp; &nbsp;;STA io_putc<br />&nbsp; &nbsp;;STA io_putc<br />&nbsp; &nbsp;;STA io_putc<br /><br />&nbsp; &nbsp;; SET 16 BIT INTEGER<br />&nbsp; &nbsp;LDA #$0<br />&nbsp; &nbsp;STA m1&nbsp; &nbsp;&nbsp; &nbsp;;HIGH<br />&nbsp; &nbsp;LDA #$03<br />&nbsp; &nbsp;STA m1+1&nbsp; &nbsp;;low<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;; CONVERT 16 BIT INTEGER TO 32 BIT FLOAT<br />&nbsp; &nbsp;JSR float<br />&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;BRK<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;;;;;;;;;;;;;;;;;;;;;FLOAT;;;;;;;;;;;;;;;;;;<br />&nbsp; &nbsp;;CONVERT 16 BIT INTEGER IN M1(HIGH) AND M1+1(LOW) TO F.P.<br />&nbsp; &nbsp; &nbsp; &nbsp; ;RESULT IN EXP/MANT1.&nbsp; EXP/MANT2 UNEFFECTED<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ;So... how it works.<br />&nbsp; &nbsp; &nbsp; &nbsp; ;It sets exponent to $e (maximal possible for 16bit input)<br />&nbsp; &nbsp; &nbsp; &nbsp; ;and &#91;dec exponent,<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp;shiftleft 3byte mantissa bit by bit&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; ;untill done.<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ;examples of output:<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 00 01 -&gt; 80 40 00 00<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 00 02 -&gt; 81 40 00 00<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 00 03 -&gt; 81 60 00 00<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 00 41 -&gt; 86 41 00 00<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 41 00 -&gt; 8e 41 00 00<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 00 81 -&gt; 87 40 80 00<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 40 00 -&gt; 8e 40 00 00<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; NEGATIVE VALUES!<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 80 00 -&gt; 8e 80 00 00 ;finally mant. starts from 8<br />&nbsp; &nbsp; &nbsp; &nbsp; ; ff ff -&gt; 7f 80 00 00 ;negative?<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 8f ff -&gt; 8e 8f ff 00 ;didn't quite get this<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;&quot;complement&quot; mantissa<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 00 00 -&gt; 00 00 00 00 ;and it loops a lot <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;(until exp decs to 0)<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />float:&nbsp; &nbsp;LDA #$8e&nbsp; &nbsp;;init $08 and $0b ($09 and $0a should've been<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;set by you already)<br />&nbsp; &nbsp;STA x1&nbsp; &nbsp;&nbsp; &nbsp;;set exponent to 14dec ($0e in hex)<br />&nbsp; &nbsp;LDA #0&nbsp; &nbsp;&nbsp; &nbsp;;clear most right byte<br />&nbsp; &nbsp;STA m1+2&nbsp; &nbsp;;/init<br />&nbsp; &nbsp;BEQ norm&nbsp; &nbsp;;normalize result<br />&nbsp; &nbsp;; Jump is always taken. Zero flag is set by LDA #0.<br />&nbsp; &nbsp;; They used BEQ insead of JMP because it supports relative<br />&nbsp; &nbsp;; addressing mode, and so takes one byte less.<br />norm1:&nbsp; &nbsp;DEC x1&nbsp; &nbsp;&nbsp; &nbsp;;decrease exponent by one<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; SHIFT!<br />&nbsp; &nbsp;ASL m1+2&nbsp; &nbsp;;&nbsp; &nbsp; &nbsp;carry &lt;- &#91;$0b&#93; &lt;- 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;WAIT, isn't &#91;$0b&#93; always zero?<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;*proud* *proud*<br />&nbsp; &nbsp;ROL m1+1&nbsp; &nbsp;;&nbsp; &nbsp; &nbsp;carry &lt;- &#91;$0a&#93; &lt;- carry<br />&nbsp; &nbsp;ROL m1&nbsp; &nbsp;&nbsp; &nbsp;; who cares &lt;- &#91;$09&#93; &lt;- carry<br />norm:&nbsp; &nbsp;LDA m1&nbsp; &nbsp;&nbsp; &nbsp;; huh...<br />&nbsp; &nbsp;ASL&nbsp; &nbsp;&nbsp; &nbsp;; ...continue until...<br />&nbsp; &nbsp;EOR m1&nbsp; &nbsp;&nbsp; &nbsp;; ...left two bits of mantissa are...<br />&nbsp; &nbsp;BMI rts1&nbsp; &nbsp;; ...either 10 or 01.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; 10 is for negative floats<br />&nbsp; &nbsp;LDA x1&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;BNE norm1&nbsp; &nbsp;; or until we got all zeroes<br />rts1:&nbsp; &nbsp;RTS&nbsp; &nbsp;&nbsp; &nbsp;;return! Finally!<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>