<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=23&amp;t=16814" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-01-04T20:25:20-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=23&amp;t=16814</id>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2018-01-04T20:25:20-07:00</updated>
<published>2018-01-04T20:25:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211289#p211289</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211289#p211289"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211289#p211289"><![CDATA[
I go with the unrelated approach as then you don't have to deal with upper bits within L that would differentiate more of the same within a page. Incrementing H to the next thing while INC/DEC L or directly specify L for accessing the elements of a particular thing. If performance is not absolutely critical you can do many of the same within a page and juggle the top bits of L while accessing elements out of order, but if you can make all accesses sequential it will be most space efficient. <br />Space isn't a problem to me usually, current project on SG-1000 / SC-3000 uses a RAM expansion since 1KB is not enough for my needs (while 2KB would be but only SC-3000 has that, SG-1000 has only 1KB) and cheapest RAM chip is 32KB, so it is made usable by a custom mapper that puts it in top 16KB where system RAM is (onboard RAM gets disabled) + a bit to choose which of the 16KB halves is visible there (Multiple RAM banks would requre another IO pin and more state in the CPLD and I got more of neither available).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Thu Jan 04, 2018 8:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-01-04T06:56:19-07:00</updated>
<published>2018-01-04T06:56:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211237#p211237</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211237#p211237"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211237#p211237"><![CDATA[
<div class="quotetitle">TmEE wrote:</div><div class="quotecontent"><br />For random accesses within the space HL has already set up, what's wrong with directly specifying values to L (or H for that matter) if the next element is further away than the nearest neighbor so single INC/DEC isn't enough ?<br /></div><br />If you have (say) 16 structures each 32 bytes in size, and structures are stored in consecutive addresses aligned to 32-byte boundaries, there are eight different L values that correspond to a particular H value. Or would you recommend interleaving several different unrelated arrays, as I mentioned earlier?<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Would I have to consider the RAM as an &quot;atlas&quot; analogous to a texture atlas, with RAM being a two-dimensional array divided into rectangular sub-arrays, each with object index as one dimension, field index as the other dimension, and a stride of 256 bytes?<br /></div><br />In the 2D approach, you might have actor properties in L=$00-$1F of each page and other unrelated things in L=$20-$FF of the same pages. (This wouldn't work for ColecoVision and SG-1000 because only four pages exist.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Jan 04, 2018 6:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2018-01-04T02:27:15-07:00</updated>
<published>2018-01-04T02:27:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211232#p211232</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211232#p211232"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211232#p211232"><![CDATA[
For random accesses within the space HL has already set up, what's wrong with directly specifying values to L (or H for that matter) if the next element is further away than the nearest neighbor so single INC/DEC isn't enough ?<br />7 cycles for directly speficied element isn't bad if you cannot reach your goal in the next INC or DEC... still beats IX+x modes by several cycles (14 vs 19). You'll still have to put your stuff in 256 byte pages though, but that's not a limitation, and crossing the page would incur update to top part which can just be INC HL (6 cycles), and similar to page crossing penalty on 65x.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Thu Jan 04, 2018 2:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Ryoga]]></name></author>
<updated>2018-01-04T00:00:52-07:00</updated>
<published>2018-01-04T00:00:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211226#p211226</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211226#p211226"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211226#p211226"><![CDATA[
Look at this &quot;Ninja Gaiden Shadow&quot; for ZX Spectrum: <a href="https://www.youtube.com/watch?v=FOoCGXw0pB4" class="postlink">https://www.youtube.com/watch?v=FOoCGXw0pB4</a><br /><br />The game is a port of the same title for GameBoy.<br /><br />Article: <a href="http://www.indieretronews.com/2017/12/ninja-gaiden-shadow-warriors-gameboy.html" class="postlink">http://www.indieretronews.com/2017/12/ninja-gaiden-shadow-warriors-gameboy.html</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7457">Ryoga</a> — Thu Jan 04, 2018 12:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-01-01T12:38:51-07:00</updated>
<published>2018-01-01T12:38:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211075#p211075</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211075#p211075"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=211075#p211075"><![CDATA[
Getting one step closer to maintainably taming HL:<br /><br />If you're accessing multiple fields of the same object in the same <a href="https://en.wikipedia.org/wiki/Basic_block" class="postlink">basic block</a>, you can rely on the previous values of the low bits of L. This makes pointer arithmetic with XOR almost as fast as IX/IY indexing.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Pre-condition: HL points to field 3 of an object<br />; Post-condition: HL points to field 9 of the same object<br />ld a, 3 ^ 9  ; 7<br />xor a,l  ; 4: HA points to the desired field<br />ld l,a  ; 4: HL points to the desired field<br />ld a,(hl)  ; 7: A contains contents of desired field<br />; Total: 22 cycles<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jan 01, 2018 12:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2017-12-17T23:07:43-07:00</updated>
<published>2017-12-17T23:07:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210318#p210318</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210318#p210318"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210318#p210318"><![CDATA[
Okay, 47 cycles looks bad : ) the example with 28 cycles looks better. One cycle faster would be &quot;LD C,L / SET 2,L / INC L / LD A,(HL) / LD L,C&quot;. And of course you could try to move the most often used entries closer to index +0 so you won't need the +5 stuff too often.<br /><br />The gameboy doesn't have a real Z80 (it doesn't have any IX/IY registers), so one would actually need to use HL in the above fashion.<br /><br />On CPC and Spectrum it might be best/easiest/fastest to use (IX+n) for the enemy logic in some places - but, on that computers, the main CPU load will go to software rendering, so the speed of the game logic doesn't matter too much, and it's more important to use fast opcodes in the rendering functions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Sun Dec 17, 2017 11:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2017-12-17T14:14:50-07:00</updated>
<published>2017-12-17T14:14:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210296#p210296</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210296#p210296"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210296#p210296"><![CDATA[
<div class="quotetitle">nocash wrote:</div><div class="quotecontent"><br />LD A,(IX+5) isn't the best example. Those IX/IY instructions are looking nice at first glance, but they are so slow that one should usually avoid using them, or use them only in not so timing critical higher functions, or, in rare cases, where they are faster than opcode constructions. But in general, using LD A,(HL) is fastest. If you want to read from HL+1, HL+2, etc. just increment HL. Or increment L, that a bit faster, as long as no 100h-byte page crossing is needed.<br /></div><br />I mentioned specifically <em>random</em> access to an object's fields, not sequential access to its fields. I doubt that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LD A,&#40;IX+5&#41;</tt> is slower than <em>five</em> <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">INC L</tt> instructions, even if the structure is 32-byte aligned so that it does not cross pages.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Pre- and post-condition: HL points to the start of the<br />; 32-byte-aligned structure representing one enemy's state.<br />inc l  ; 4<br />inc l  ; 4<br />inc l  ; 4<br />inc l  ; 4<br />inc l  ; 4<br />ld a,(hl) ; 7<br />dec l  ; 4<br />dec l  ; 4<br />dec l  ; 4<br />dec l  ; 4<br />dec l  ; 4<br />; Total: 47 cycles<br /><br />; Pre- and post-condition: HL points to the most recently accessed<br />; field of the 32-byte-aligned structure representing one enemy's<br />; state.  Which field happens to have been most recently accessed<br />; is not known to this fragment.<br />ld a,0E0h  ; 7<br />and a,l  ; 4: HA points to the start of the structure<br />or a,5  ; 7: HA points to the desired field<br />ld l,a  ; 4: HL points to the desired field<br />ld a,(hl)  ; 7: A contains contents of desired field<br />; Total: 29 cycles<br /><br />; Pre- and post-condition: Zilog CPU, and IX points to the start<br />; of the 32-byte-aligned structure representing one enemy's state.<br />ld a,(ix+5)  ; 19<br />; Total: 19 cycles<br /></div><br /><br />In order to use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">INC L</tt> to use sequential access to simulate random access, the programmer must keep track of which field was most recently accessed, even across subroutine call boundaries. What techniques are useful toward this? Is it fruitful to write a macro to generate the correct sequences of INC, DEC, or LD/ADD/LD sequences to point L at a particular field and save that field for later invocations of the same macro? Or should code first be written in a high-level language and then translated into Z80 only once the programmer is sure of in what order each object's fields shall be visited throughout the program, in order to be able to use sequential access (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">INC L</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">DEC L</tt>) as often as possible?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 17, 2017 2:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2017-12-17T12:29:49-07:00</updated>
<published>2017-12-17T12:29:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210287#p210287</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210287#p210287"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=210287#p210287"><![CDATA[
LD A,(IX+5) isn't the best example. Those IX/IY instructions are looking nice at first glance, but they are so slow that one should usually avoid using them, or use them only in not so timing critical higher functions, or, in rare cases, where they are faster than opcode constructions. But in general, using LD A,(HL) is fastest. If you want to read from HL+1, HL+2, etc. just increment HL. Or increment L, that a bit faster, as long as no 100h-byte page crossing is needed.<br /><br />When comparing C64 with Z80 systems like Spectrum or CPC, I would say that Z80 is a good bit faster. Parts because it's having more register &amp; requires less memory accesses, and parts because it's having 16bit load/store/add/inc/dec instructions. The drawback is that Spectrum and CPC need to do sprite rendering by software.<br /><br />Yeah, I've spotted that 2-dimensional array indexing trick via H and L in several CPC games. It's somewhat cool, but it's also a bit messy, and INC H isn't that much faster than using ADD HL for switching to the next array entry, so, in most cases I've &quot;cleaned up&quot; the code and removed that technique after disassembling the game.<br />Btw. I was always believing that it's been a 6502 technique that had crept into Z80 world when people ported C64 games to CPC. I haven't checked if the original C64 code had used the same method, but it would make more sense there (since the 6502 can't easily do something like ADD HL for incrementing 16bit array indices).<br /><br />There are a few more cases where one case &quot;see&quot; that many Z80 games came from C64, like cases where the C64 needed a handful of opcodes to do some operation, and the programmer blindly reproduced that code - although the Z80 could do the same thing using only a single opcode.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Sun Dec 17, 2017 12:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[OmegaMax]]></name></author>
<updated>2017-12-12T17:49:42-07:00</updated>
<published>2017-12-12T17:49:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209969#p209969</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209969#p209969"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209969#p209969"><![CDATA[
That indeed is a good way to learn z80 and the master system.<br /><br /><a href="http://emulicious.net/" class="postlink">http://emulicious.net/</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7830">OmegaMax</a> — Tue Dec 12, 2017 5:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ccovell]]></name></author>
<updated>2017-12-12T17:41:16-07:00</updated>
<published>2017-12-12T17:41:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209967#p209967</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209967#p209967"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209967#p209967"><![CDATA[
If people are used to NES hacking, I'd recommend doing some Sega Master System game disassembly and analysis to see how an equivalent tile &amp; palette-based system works with a Z80 as the CPU.  Learning Z80 isn't insurmountable, but yeah, tracing where DE and HL get loaded from is a tricky thing when you're used to 6502 zero-page pointers and the like.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=355">ccovell</a> — Tue Dec 12, 2017 5:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2017-12-12T09:34:08-07:00</updated>
<published>2017-12-12T09:34:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209952#p209952</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209952#p209952"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209952#p209952"><![CDATA[
Answering my own question with respect to ZX Spectrum: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">this</tt> in IX appears to be typical on the Z80 if the sample enemy movement code in <a href="https://chuntey.wordpress.com/2013/10/02/how-to-write-zx-spectrum-games-chapter-11/" class="postlink">&quot;How To Write ZX Spectrum Games – Chapter 11: Enemy Movement&quot; by Jonathan Cauldwell</a> is to be believed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 12, 2017 9:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FrankenGraphics]]></name></author>
<updated>2017-12-11T13:28:40-07:00</updated>
<published>2017-12-11T13:28:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209897#p209897</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209897#p209897"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209897#p209897"><![CDATA[
UK based magazine retro gamer spends a lot of pages on zx spectrum. There's always some homebrew review or two.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7508">FrankenGraphics</a> — Mon Dec 11, 2017 1:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2017-12-11T13:14:01-07:00</updated>
<published>2017-12-11T13:14:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209895#p209895</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209895#p209895"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209895#p209895"><![CDATA[
<div class="quotetitle">Punch wrote:</div><div class="quotecontent"><br />ZX sounds like a cool platform to experiment on.<br /></div><br />If an NES or C64 veteran were to experiment with the ZX Spectrum for the first time, he would first have to spend time wrapping his head around the Z80.<br /><br />In subroutines in 6502 games that move an object of a particular type, I've often needed random access to the fields of an object. Say field 5 of a particular object is its health.<br /><br /><ul><li>Read field 5 of the object with array index X in struct-of-arrays (6502, C64)<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda object_health,x</tt>: 4 cycles, 3.9 μs</li><li>Read field 5 of the object pointed by A0 in array-of-structs (68000, Amiga)<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">move.w 10&#40;a0&#41;,d0</tt>: 12 cycles, 1.7 μs</li><li>Read field 5 of the object pointed by IX in array-of-structs (Z80, ZX Spectrum)<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ld a,&#40;ix+5&#41;</tt>: 19 cycles, 5.4 μs</li></ul><br />Is there a Z80 tutorial specifically targeted at people with a 6502 background, which explains how common idioms of game state organization on the 6502 translate efficiently to the 8080 family (8080/8085, Z80, LR35902), whose indexed modes are slow (Z80) or software-defined using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">add</tt> (others)? I have been told the 8080 family expects arrays to be aligned to the start of a 256-byte page, so that the program can load the field number in L and the object number in H or vice versa, but then any array with fewer than 256 elements wastes the remainder of the page. For the cases I'm considering (10-30 fields of 5-20 objects), aligning them without <em>crossing</em> pages is easy, but aligning them to the <em>start</em> of a page appears trickier. Would I have to consider the RAM as an &quot;atlas&quot; analogous to a <a href="https://en.wikipedia.org/wiki/Texture_atlas" class="postlink">texture atlas</a>, with RAM being a two-dimensional array divided into rectangular sub-arrays, each with object index as one dimension, field index as the other dimension, and a stride of 256 bytes?<br /><br />Some 8080-family coders suggest organizing data for a single-instruction, multiple-data (SIMD) approach that steps through two arrays at a time using DE and HL. For example, a program would update object positions in four passes: add horizontal acceleration to horizontal velocity of all objects, then add horizontal velocity to horizontal position of all objects, then add vertical acceleration to vertical velocity of all objects, then add vertical velocity to vertical position of all objects. Pixel shaders on modern graphics programs work similarly. But that doesn't work so well when a particular operation needs to be performed only on particular types of object or only in certain circumstances, which is often the case for enemy AI code that has to determine the accelerations for each object based on collision response, displacement to the player object, and other factors.<br /><br />If I have asked before, and I am asking again, it's because when I did get an answer, it was one that I couldn't understand how to apply. Hence &quot;wrapping my head around the Z80&quot;. Would basic questions like this be better received in a forum organized around a particular platform using an 8080 family CPU, such as <a href="https://spectrumcomputing.co.uk/forums/viewforum.php?f=6" class="postlink">Spectrum Computing</a> (or, in the case of other platforms, <a href="http://www.smspower.org/forums/" class="postlink">SMS Power</a> or <a href="http://gbdev.gg8.se/forums/" class="postlink">gbdev.gg8.se</a>)?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Dec 11, 2017 1:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-12-11T12:27:01-07:00</updated>
<published>2017-12-11T12:27:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209890#p209890</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209890#p209890"/>
<title type="html"><![CDATA[Re: ZX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209890#p209890"><![CDATA[
I've been using <a href="http://fuse-emulator.sourceforge.net/" class="postlink">FUSE</a> solely on the grounds that it's already available in Debian.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Dec 11, 2017 12:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Punch]]></name></author>
<updated>2017-12-11T12:13:01-07:00</updated>
<published>2017-12-11T12:13:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209888#p209888</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209888#p209888"/>
<title type="html"><![CDATA[Re: VX Spectrum homebrew]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16814&amp;p=209888#p209888"><![CDATA[
Your misspelling of ZX made me believe someone made a new faux-retro platform inspired by the ZX spectrum limitations <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />I wish I had more motivation to go after european platforms, the ZX sounds like a cool platform to experiment on. Having to deal with monochromatic color clash is pretty unique.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5877">Punch</a> — Mon Dec 11, 2017 12:13 pm</p><hr />
]]></content>
</entry>
</feed>