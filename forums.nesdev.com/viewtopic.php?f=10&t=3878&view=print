<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Reading the controller?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Reading the controller?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3878">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3878</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Mon Feb 04, 2008 7:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have some code that was mostly given to me in another post, which I learned tremendously from. However now having some problems actually putting the pieces together correctly.
<br />
<br />If using the emulators, would the arrow keys on my PC automatically replace the arrow keys from a real nes gamepad?  Should I be using a PC joystick?
<br />
<br />I compiled with nesasm and using Nintendulator. (But also tried Jnes, Nestopia.) 
<br />
<br />I wanted to use the code to test the reading of game pad keys and assumed the emulator made use of the arrow keys on the PC.
<br />
<br />In the code I just wanted to press the right arrow and make some noise.
<br />
<br />I left in the subroutine lables for each of the buttons, however I just wanted to test one button (the right arrow). That's why the other key_press subroutines are empty.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Nes Gamepad demo program<br />;-------------------<br /><br />&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.ineschr 0&nbsp; <br /><br />&nbsp; &nbsp;.bank 1&nbsp; &nbsp; &nbsp; &nbsp; ; don't know if I need this.<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw 0 <br />&nbsp; &nbsp;.dw updatejoy ; should my code start here?<br />&nbsp; &nbsp;.dw 0 <br /><br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $8000<br /><br />;;Equates for masking<br /><br />key_a&nbsp; &nbsp;&nbsp; &nbsp;EQU&nbsp; &nbsp;%00000001 ; A button press <br />key_b&nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%00000010 ; B <br />key_select&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00000100 ; select <br />key_start&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00001000 ; start <br />key_up&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%00010000 ; up arrow <br />key_down&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00100000 ; down <br />key_left&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%01000000 ; left arrow <br />key_right&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%10000000 ; right <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />button_state&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EQU&nbsp; &nbsp; &nbsp; &nbsp;$00 ; my button_state variable<br /><br />&nbsp; &nbsp;<br />updatejoy: <br /><br />&nbsp; LDA #1 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ; first, strobe the joypad <br />&nbsp; STA $4016 <br />&nbsp; LDA #0 <br />&nbsp; STA $4016 <br /><br />&nbsp; ; now we're going to loop 8 times &#40;once for each button&#41;, and <br />&nbsp; ; rotate each button's status &#40;in the carry flag&#41; into our button_state variable <br /><br />&nbsp; &nbsp; LDX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set X to 8 &#40;the number of times we want to loop&#41; <br />&nbsp; joyloop: <br />&nbsp; &nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get button state <br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; shift it into the C flag <br />&nbsp; &nbsp; ROR button_state&nbsp; ; rotate C flag into our button_state variable <br />&nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; decrement X &#40;our loop counter&#41; <br />&nbsp; &nbsp; BNE joyloop&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; jump back to our loop until X is zero <br /><br />&nbsp; RTS <br /><br />&nbsp; LDA button_state <br />&nbsp; AND key_right&nbsp; ; masking using AND. Check right arrow press <br />&nbsp; BNE right_is_pressed ; branch to subroutine<br /><br />&nbsp; LDA button_state <br />&nbsp; AND key_left&nbsp; ; check left arrow press<br />&nbsp; BNE left_is_pressed <br /><br />&nbsp; LDA button_state <br />&nbsp; AND key_down&nbsp; ; check down arrow press <br />&nbsp; BNE down_is_pressed <br /><br />&nbsp; LDA button_state <br />&nbsp; AND key_up&nbsp; ; check up arrow press<br />&nbsp; BNE up_is_pressed <br /><br />&nbsp; LDA button_state <br />&nbsp; AND key_start&nbsp; ; check start button press<br />&nbsp; BNE start_is_pressed <br /><br />&nbsp; LDA button_state <br />&nbsp; AND key_select&nbsp; ; check select button<br />&nbsp; BNE select_is_pressed <br /><br />&nbsp; LDA button_state <br />&nbsp; AND key_b&nbsp; ; check b button press <br />&nbsp; BNE b_is_pressed <br /><br />&nbsp; LDA button_state <br />&nbsp; AND key_a&nbsp; ; check a button press<br />&nbsp; BNE a_is_pressed <br /><br />right_is_pressed: ; play sound when right arrow is pressed.<br /><br />&nbsp; &nbsp;lda #$FF&nbsp; &nbsp;;<br />&nbsp; &nbsp;sta $4000&nbsp; ;<br /><br />&nbsp; &nbsp;lda #%11011011&nbsp; ; <br />&nbsp; &nbsp;sta $4001&nbsp; ; <br /><br />&nbsp; &nbsp;lda #$A5<br />&nbsp; &nbsp;sta $4002<br /><br />&nbsp; &nbsp;lda #$AB<br />&nbsp; &nbsp;sta $4003<br /><br />&nbsp; &nbsp;lda #%00000001<br />&nbsp; &nbsp;sta $4015<br /><br /><br /><br />&nbsp; &nbsp;jmp updatejoy ; is this jmp right?<br /><br />left_is_pressed:<br /><br />rts<br /><br />down_is_pressed:<br /><br />rts<br /><br />up_is_pressed:<br /><br />rts <br /><br />start_is_pressed:<br /><br />rts<br /><br />select_is_pressed:<br /><br />rts<br /><br />b_is_pressed:<br /><br />rts<br /><br />a_is_pressed:<br /><br />rts<br /></div>
<br />
<br />Thanks,
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Feb 04, 2008 7:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">If using the emulators, would the arrow keys on my PC automatically replace the arrow keys from a real nes gamepad?</div><br />Yes. You might want to configure the controls with a <a href="http://www.pineight.com/nes/" class="postlink">known-working rom</a> to make sure that the directions work before you try it with your own creation.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Should I be using a PC joystick?</div>
<br />Yes, but watch the brand. Some gamepads like to press diagonal too easily. To start with, I would recommend using a PlayStation controller through a <a href="http://www.stepmania.com/wiki/USB_Adapters" class="postlink">PS1 to USB adapter</a>. I get the authentic Nintendo feel by using an N64 controller through an N64 to USB adapter, but it's harder to find those adapters than it was in 1999 when I bought mine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Feb 04, 2008 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The RTS's are pretty much fucking everything up...
<br />
<br />If you start at updatejoy, which is a subroutine, when the RTS is executed, where do you thing the code will return to? That's right, there is no place to return to, because the subroutine was not called (code execution just started there), thus a return address was not placed on the stack. The RTS instruction does not care about this though, it just fetches from the stack what it assumes to be a return address and jumps to it. Since there wasn't a return address on the stack, a junk value was fetched and the program crashed, because the CPU tried to execute random data instead of an actual program.
<br />
<br />You also have RTS's after the code that handles each button, but again you didn't JSR there, you just branched with BNE. So, again, no return address was placed on the stack. You can only use RTS if you JSR'ed to the location where the RTS instruction is.
<br />
<br />Another serious problem is that you don't do any sort of initialization, you simply try to read the joypad as soon as the program starts. Actually, all the logic is pretty much wrong. The following is an example of a more correct program structure:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">start:<br />&nbsp; &nbsp;;INITIALIZATION CODE HERE<br /><br />;The following is the main loop<br /><br />loop:<br />&nbsp; &nbsp;jsr updatejoy<br /><br />&nbsp; &nbsp;;Check the state of the right key<br />&nbsp; &nbsp;lda button_state<br />&nbsp; &nbsp;and key_right<br />&nbsp; &nbsp;beq right_not_pressed<br />&nbsp; &nbsp;jsr right_is_pressed<br />right_not_pressed:<br /><br />&nbsp; &nbsp;;Check the state of the left button<br />&nbsp; &nbsp;lda button_state<br />&nbsp; &nbsp;and key_left<br />&nbsp; &nbsp;beq left_not_pressed<br />&nbsp; &nbsp;jsr left_is_pressed<br />left_not_pressed:<br /><br />&nbsp; &nbsp;jmp loop ;Go back and keep reading the joypad forever<br /><br />;Now come all the subroutines used by the main code:<br /><br />updatejoy:<br />&nbsp; &nbsp;&#40;...&#41;<br />&nbsp; &nbsp;rts<br /><br />right_is_pressed:<br />&nbsp; &nbsp;&#40;...&#41;<br />&nbsp; &nbsp;rts<br /><br />left_is_pressed:<br />&nbsp; &nbsp;&#40;...&#41;<br />&nbsp; &nbsp;rts<br /><br />down_is_pressed:<br />&nbsp; &nbsp;&#40;...&#41;<br />&nbsp; &nbsp;rts<br /><br />up_is_pressed: <br />&nbsp; &nbsp;&#40;...&#41;<br />&nbsp; &nbsp;rts</div>
<br />
<br />Of course, the above will not compile, it's just to show what the correct program structure to achieve what you want would be.
<br />
<br />First of all, you need to perform some basic initialization: disable interrups, turn rendering off (since you're not using the PPU), initialize the stack, and so on. The wiki has some basic initialization code, IIRC, so you can take a look there.
<br />
<br />Then you need a loop. The player pressing buttons is something that happens over time, so you must constantly read the joypad. A part of the code that repeats is called a loop. Inside this loop, you must perform the actions that repeat, in your case, that's reading the joypad and acting accordingly to the buttons that are pressed, calling the different routines.
<br />
<br />Now the subroutines are proper subroutines, called with JSR and finished with RTS. The part that checks for each individual button was modified to skip over the call to the subroutine in case the button was NOT pressed. This is a common assembly "trick".
<br />
<br />Programs are usually composed by the main code, in this case starting at "start", and by supporting subroutines, which are pieces of code that can be called by the main program. You'll eventually get this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Mon Feb 04, 2008 12:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I see what you're saying. (I haven't really seen good examples of code that demonstrate these things as well as it's being demonstrated here.) Very cool.
<br />
<br />I'll check out the "initialization" info on wiki. That was something I have to get straight.
<br />
<br />I appreciate the layout you provided. I'll digest it and repost.
<br />
<br />Thanks again,
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Mon Feb 04, 2008 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see what you've done to fix the code. It makes sense to me.
<br />
<br />I'm trying now to find good examples of setting up the "initialization".
<br />
<br />Can anyone point me to an example somehwere of the initialization, which I can study? (I would prefer to study some examples, then come back with some semi-intelligent questions to post here.)
<br />
<br />I use nesasm. Would the initialization be different for each assembler?
<br />
<br />Right now I'm just interested in keypad and sound, no video (yet).
<br />
<br />Thanks again,
<br />T
<br />
<br />P.S. I really did learn a great deal from the previous posts here and in my other thread. KNowing what's happening with the instructions, and then putting together the correct "structure", 2 different things!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Feb 04, 2008 9:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">Can anyone point me to an example somehwere of the initialization, which I can study?</div><br />Didn't you find the wiki page? <a href="http://nesdevwiki.org/index.php/Init_code" class="postlink">Here it is</a>, in case you didn't. You can probably just copy it all, although you should try to understand what the coe is doing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I use nesasm. Would the initialization be different for each assembler?</div>
<br />Simple code like that doesn't change much from assembler to assembler... You may find some diference regarding the labels, because some assemblers support local labels (I believe that in the wiki code these are the labels starting with "@"), temporary labels, and so on, while others don't. If something goes wrong, changing the names of the labels to simple ones (no special characters or anything) and keeping them unique should solve the problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Mon Feb 04, 2008 9:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the link.
<br />
<br />I have never seen any of this "init" stuff in any of the example code I've looked at. No wonder they didn't work correctly.
<br />
<br />What kind of surprises me is that this "init" stuff is extremely important part of an nes code, yet it seemed to be the most difficult thing to find clear examples of.
<br />
<br />I love nesdev wiki. (Have you ever wondered what the word "wiki" is? "Wiki" ?! New words for the 21st century. Like "23 skadoo" was in 1924. 
<br />
<br />I'll really be studying it.
<br />
<br />Thank you again for your great help, it's very much appreciated.
<br />
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Feb 07, 2008 6:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's my latest mess:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Nes Gamepad demo program<br />;-------------------<br /><br />&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.ineschr 0&nbsp; <br /><br />&nbsp; &nbsp;.bank 1<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw 0 <br />&nbsp; &nbsp;.dw start <br />&nbsp; &nbsp;.dw 0 <br /><br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $8000<br /><br />start:<br /><br />key_a&nbsp; &nbsp;&nbsp; &nbsp;EQU&nbsp; &nbsp;%00000001 ; A button press <br />key_b&nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%00000010 ; B <br />key_select&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00000100 ; select <br />key_start&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00001000 ; start <br />key_up&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%00010000 ; up arrow <br />key_down&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00100000 ; down <br />key_left&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%01000000 ; left arrow <br />key_right&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%10000000 ; right <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />button_state&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EQU&nbsp; &nbsp; &nbsp; &nbsp;$00<br /><br /><br />&nbsp; &nbsp; sei&nbsp; &nbsp; &nbsp; &nbsp; ; ignore IRQs<br />&nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; &nbsp; ldx #$40<br />&nbsp; &nbsp; stx $4017&nbsp; ; disable APU frame IRQ<br />&nbsp; &nbsp; ldx #$ff<br />&nbsp; &nbsp; txs&nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; &nbsp; stx $2000&nbsp; ; disable NMI<br />&nbsp; &nbsp; stx $2001&nbsp; ; disable rendering<br />&nbsp; &nbsp; stx $4010&nbsp; ; disable DMC IRQs<br /><br />vblankwait1:&nbsp; <br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait1<br /><br />&nbsp; &nbsp; txa<br />clrmem:<br />&nbsp; &nbsp; sta $000,x<br />&nbsp; &nbsp; sta $100,x<br />&nbsp; &nbsp; sta $200,x<br />&nbsp; &nbsp; sta $300,x<br />&nbsp; &nbsp; sta $400,x<br />&nbsp; &nbsp; sta $500,x<br />&nbsp; &nbsp; sta $600,x<br />&nbsp; &nbsp; ;sta $700,x&nbsp; ; Remove this if you're storing reset-persistent data<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; bne clrmem<br />&nbsp; &nbsp;<br />vblankwait2:<br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait2<br /><br />loop: <br />&nbsp; &nbsp;jsr updatejoy <br /><br />&nbsp; &nbsp; <br />&nbsp; &nbsp;;Check the state of the right key <br />&nbsp; &nbsp;lda button_state <br />&nbsp; &nbsp;and key_right <br />&nbsp; &nbsp;beq right_not_pressed <br />&nbsp; &nbsp;jsr right_is_pressed <br /><br />right_not_pressed: <br /><br />&nbsp; &nbsp;;Check the state of the left button <br />&nbsp; &nbsp;lda button_state <br />&nbsp; &nbsp;and key_left <br />&nbsp; &nbsp;beq left_not_pressed <br />&nbsp; &nbsp;jsr left_is_pressed <br /><br />left_not_pressed: <br /><br />&nbsp; &nbsp;jmp loop ;Go back and keep reading the joypad forever <br /><br /><br />updatejoy:<br /><br />&nbsp; &nbsp; LDA #1 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ; first, strobe the joypad <br />&nbsp; &nbsp; STA $4016 <br />&nbsp; &nbsp; LDA #0 <br />&nbsp; &nbsp; STA $4016<br /><br />&nbsp; &nbsp; LDX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set X to 8 &#40;the number of times we want to loop&#41; <br />&nbsp; &nbsp; joybuttons: <br />&nbsp; &nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get button state <br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; shift it into the C flag <br />&nbsp; &nbsp; ROR button_state&nbsp; ; rotate C flag into our button_state variable <br />&nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; decrement X &#40;our loop counter&#41; <br />&nbsp; &nbsp; BNE joybuttons&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; jump back to our loop until X is zero <br /><br />&nbsp;<br />&nbsp;<br />&nbsp; &nbsp; rts<br /><br />&nbsp;<br />right_is_pressed: ; play sound when right arrow is pressed.<br /><br />&nbsp; &nbsp;lda #$FF&nbsp; &nbsp;;<br />&nbsp; &nbsp;sta $4000&nbsp; ;<br /><br />&nbsp; &nbsp;lda #%11011011&nbsp; ; <br />&nbsp; &nbsp;sta $4001&nbsp; ; <br /><br />&nbsp; &nbsp;lda #$A5<br />&nbsp; &nbsp;sta $4002<br /><br />&nbsp; &nbsp;lda #$AB<br />&nbsp; &nbsp;sta $4003<br /><br />&nbsp; &nbsp;lda #%00000001<br />&nbsp; &nbsp;sta $4015<br /><br />&nbsp; &nbsp;rts<br /><br />left_is_pressed:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #$FF&nbsp; &nbsp;;<br />&nbsp; &nbsp;sta $4000&nbsp; ;<br /><br />&nbsp; &nbsp;lda #%11011011&nbsp; ; <br />&nbsp; &nbsp;sta $4001&nbsp; ; <br /><br />&nbsp; &nbsp;lda #$A5<br />&nbsp; &nbsp;sta $4002<br /><br />&nbsp; &nbsp;lda #$AB<br />&nbsp; &nbsp;sta $4003<br /><br />&nbsp; &nbsp;lda #%00000001<br />&nbsp; &nbsp;sta $4015<br /><br />&nbsp; &nbsp;rts<br /></div>
<br />
<br />It complies but does not work correctly. (Suppose to play a sound when the right or left keypad button is pressed.
<br />
<br />(I left the other keypad buttons out for testing purposes).
<br />
<br />Thanks for any feedback.
<br />
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Thu Feb 07, 2008 6:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can I recommend splitting this thread from this post...
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?p=30612&amp;highlight=#30612">http://nesdev.com/bbs/viewtopi ... ght=#30612</a><!-- m -->
<br />
<br />... and making it a new topic, with an appropriate name about controller coding? There is some great info here, and it would be alot easier for any newer people to find.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Feb 07, 2008 6:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Best way to debug things is start small and expand. When you have a bug, it could be anywhere, so you have to narrow it down systematically. Insert this debug code at various points, first just after NES initialization, then in a controller handler routine. If it doesn't beep, then it's not getting there.
<br />
<br />Best way to debug things is start small and expand. Insert this debug code at various points, first just after NES initialization, then in a controller handler routine. If it doesn't beep, then it's not getting there.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">beep:<br />&nbsp; &nbsp;lda #$01&nbsp; &nbsp;; Enable square 1<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;lda #$9F&nbsp; &nbsp;; Envelope<br />&nbsp; &nbsp;sta $4000<br />&nbsp; &nbsp;lda #$21&nbsp; &nbsp;; Start tone<br />&nbsp; &nbsp;sta $4003</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Feb 07, 2008 6:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Best way to debug things is start small and expand. When you have a bug, it could be anywhere, so you have to narrow it down systematically. Insert this debug code at various points, first just after NES initialization, then in a controller handler routine. If it doesn't beep, then it's not getting there.<br /><br />Best way to debug things is start small and expand. Insert this debug code at various points, first just after NES initialization, then in a controller handler routine. If it doesn't beep, then it's not getting there.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">beep:<br />&nbsp; &nbsp;lda #$01&nbsp; &nbsp;; Enable square 1<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;lda #$9F&nbsp; &nbsp;; Envelope<br />&nbsp; &nbsp;sta $4000<br />&nbsp; &nbsp;lda #$21&nbsp; &nbsp;; Start tone<br />&nbsp; &nbsp;sta $4003</div></div>
<br />
<br />Great idea. I'll try that.
<br />
<br />I'll also post as the other guy suggested above.
<br />
<br />Before I do, I was wondering if I have to clear the sound registers, or reset the frame counter/clock divider at the init of my code?
<br />
<br />(I have been reading a little over at nullsleep's nes page).
<br />
<br />Thanks again,
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Feb 07, 2008 6:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tried what you suggested, inserting the beep debugger at various places. It works if placed directly after my init stuff, and also in my main loop.
<br />
<br />It doesn't work anywhere in my subroutines.
<br />
<br />This is a great thing to have learned (the debugger thing).
<br />
<br />Thanks again,
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Feb 07, 2008 9:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is the latest code. This was all pieced together from code examples by other members here. Although it was all cut and pasted, etc. I still learned what each piece of code is doing, thanks to their help.
<br />
<br />The init stuff is something I still have to go over more. Anyway with the help from blargg pointing out that in my masks I was missing the "#". So instead of doing immediate addressing (loading a number), it was reading;
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AND keypress ; absolute adressing. Looks for the &quot;keypress&quot; address in memory, that's not good!<br /></div><br /><br />Should be;<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AND #keypress ; immediate addressing. Masks with the designated binary number for the particular keypress.<br /></div><br /><br />Here's the code which compiled and was loaded into Jnes (I still will also test in Nintendulator an others).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Nes Gamepad demo program<br />;-------------------<br /><br />&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.ineschr 0&nbsp; <br /><br />&nbsp; &nbsp;.bank 1<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw 0 <br />&nbsp; &nbsp;.dw start <br />&nbsp; &nbsp;.dw 0 <br /><br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $8000<br /><br />start:<br /><br />key_a&nbsp; &nbsp;&nbsp; &nbsp;EQU&nbsp; &nbsp;%00000001 ; A button press <br />key_b&nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%00000010 ; B <br />key_select&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00000100 ; select <br />key_start&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EQU &nbsp; &nbsp;%00001000 ; start <br />key_up&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%00010000 ; up arrow <br />key_down&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00100000 ; down <br />key_left&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%01000000 ; left arrow <br />key_right&nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%10000000 ; right <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />button_state&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EQU&nbsp; &nbsp; &nbsp; &nbsp;$00<br /><br />&nbsp; &nbsp; sei&nbsp; &nbsp; &nbsp; &nbsp; ; ignore IRQs<br />&nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; &nbsp; ldx #$40<br />&nbsp; &nbsp; stx $4017&nbsp; ; disable APU frame IRQ<br />&nbsp; &nbsp; ldx #$ff<br />&nbsp; &nbsp; txs&nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; &nbsp; stx $2000&nbsp; ; disable NMI<br />&nbsp; &nbsp; stx $2001&nbsp; ; disable rendering<br />&nbsp; &nbsp; stx $4010&nbsp; ; disable DMC IRQs<br /><br />vblankwait1:&nbsp; <br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait1<br /><br />&nbsp; &nbsp; ; We now have about 30,000 cycles to burn before the PPU stabilizes.<br />&nbsp; &nbsp; ; Use it to clear RAM.&nbsp; X is still 0...<br />&nbsp; &nbsp; txa<br />clrmem:<br />&nbsp; &nbsp; sta $000,x<br />&nbsp; &nbsp; sta $100,x<br />&nbsp; &nbsp; sta $200,x<br />&nbsp; &nbsp; sta $300,x<br />&nbsp; &nbsp; sta $400,x<br />&nbsp; &nbsp; sta $500,x<br />&nbsp; &nbsp; sta $600,x<br />&nbsp; &nbsp; sta $700,x&nbsp; ; Remove this if you're storing reset-persistent data<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; bne clrmem<br />&nbsp; &nbsp;<br />vblankwait2:<br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait2<br /><br />; *** CLEAR SOUND REGISTERS ***<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;&nbsp; &nbsp;; clear all the sound registers by setting<br />&nbsp; &nbsp;ldx #$00&nbsp; &nbsp;&nbsp; &nbsp;; everything to 0 in the Clear_Sound loop<br />Clear_Sound:<br />&nbsp; &nbsp;sta $4000,x&nbsp; &nbsp;&nbsp; &nbsp;; store accumulator at $4000 offset by x<br />&nbsp; &nbsp;inx&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; increment x<br />&nbsp; &nbsp;cpx #$0F&nbsp; &nbsp;&nbsp; &nbsp;; compare x to $0F<br />&nbsp; &nbsp;bne Clear_Sound&nbsp; &nbsp;&nbsp; &nbsp;; branch back to Clear_Sound if x != $0F<br /><br />&nbsp; &nbsp;lda #$10&nbsp; &nbsp;&nbsp; &nbsp;; load accumulator with $10<br />&nbsp; &nbsp;sta $4010&nbsp; &nbsp;&nbsp; &nbsp;; store accumulator in $4010<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;&nbsp; &nbsp;; load accumulator with 0<br />&nbsp; &nbsp;sta $4011&nbsp; &nbsp;&nbsp; &nbsp;; clear these 3 registers that are <br />&nbsp; &nbsp;sta $4012&nbsp; &nbsp;&nbsp; &nbsp;; associated with the delta modulation<br />&nbsp; &nbsp;sta $4013&nbsp; &nbsp;&nbsp; &nbsp;; channel of the NES<br /><br /><br /><br />loop: <br />&nbsp; &nbsp;jsr updatejoy <br /><br />&nbsp; &nbsp;;Check the state of the right key <br />&nbsp; &nbsp;lda button_state <br />&nbsp; &nbsp;and #key_right <br />&nbsp; &nbsp;beq right_not_pressed <br />&nbsp; &nbsp;jsr right_is_pressed <br /><br /><br />right_not_pressed: <br />&nbsp; &nbsp; <br />&nbsp; &nbsp;;Check the state of the left button <br />&nbsp; &nbsp;lda button_state <br />&nbsp; &nbsp;and #key_left <br />&nbsp; &nbsp;beq left_not_pressed <br />&nbsp; &nbsp;jsr left_is_pressed <br /><br />left_not_pressed: <br /><br />&nbsp; &nbsp;jmp loop ;Go back and keep reading the joypad forever <br /><br /><br />updatejoy:<br /><br />&nbsp; &nbsp; LDA #1 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ; first, strobe the joypad <br />&nbsp; &nbsp; STA $4016 <br />&nbsp; &nbsp; LDA #0 <br />&nbsp; &nbsp; STA $4016<br /><br />&nbsp; &nbsp; LDX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set X to 8 &#40;the number of times we want to loop&#41; <br />&nbsp; &nbsp; joybuttons: <br />&nbsp; &nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get button state <br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; shift it into the C flag <br />&nbsp; &nbsp; ROR button_state&nbsp; ; rotate C flag into our button_state variable <br />&nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; decrement X &#40;our loop counter&#41; <br />&nbsp; &nbsp; BNE joybuttons&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; jump back to our loop until X is zero <br /><br />&nbsp; &nbsp; rts<br /><br />&nbsp;<br />right_is_pressed: ; play sound when right arrow is pressed.<br /><br /><br />&nbsp; &nbsp;lda #$01&nbsp; &nbsp;; Enable square 1<br />&nbsp; &nbsp;sta $4015&nbsp; ; this register gets written to first to enable sound channel. Then come the other registers.<br /><br />&nbsp; &nbsp;lda #$9F&nbsp; &nbsp;; Envelope<br />&nbsp; &nbsp;sta $4000<br />&nbsp; &nbsp;lda #$21&nbsp; &nbsp;; Start tone<br />&nbsp; &nbsp;sta $4003<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br />&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;<br />left_is_pressed:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #$01&nbsp; &nbsp;; Enable square 1<br />&nbsp; &nbsp;sta $4015&nbsp; ; this register gets written to first to enable sound channel. Then come the other registers.<br />&nbsp; &nbsp;lda #$9F&nbsp; &nbsp;; Envelope<br />&nbsp; &nbsp;sta $4000<br />&nbsp; &nbsp;lda #$21&nbsp; &nbsp;; Start tone<br />&nbsp; &nbsp;sta $4003<br /><br />&nbsp; &nbsp;rts<br /></div>
<br />
<br />It doesn't work in Nintenduator, but does work in Nestopia and Jnes.
<br />
<br />Now I have to figure out how to stop the sound immediately when the button is up. Now the way it is the sound plays for a set duration.
<br />
<br />I guess the "pseudo" code would be something like;
<br />
<br />If button_press = #0
<br />then goto "stop sound"
<br />
<br />Or would it be some kind of timing thing? (Like play sound for T=X?)
<br />
<br />Maybe BEQ to a subroutine that clears the $4015 register?
<br />(In other words clear the $4015 register when the button is up?)
<br />
<br />Thanks,
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Feb 07, 2008 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Stop a channel by clearing its length counter. One way is to clear that bit of $4015. Another way is to enable the length counter and load it with the appropriate duration when starting the note, then let it count down to 0 normally. Set bit 4 of $4000 to enable the length counter, then write the appropriate value to $4003 to load the length counter (as well as set the high 3 bits of the period). Yet another is to use the volume envelope by clearing bit 4 of $4000 and setting the decay rate in the low 4 bits. Also, you should write $08 to $4001 (and $4005) to disable the sweep, otherwise they'll silence low notes (really, any value with bit 3 set and bit 7 clear).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Feb 07, 2008 5:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Stop a channel by clearing its length counter. One way is to clear that bit of $4015. Another way is to enable the length counter and load it with the appropriate duration when starting the note, then let it count down to 0 normally. Set bit 4 of $4000 to enable the length counter, then write the appropriate value to $4003 to load the length counter (as well as set the high 3 bits of the period). Yet another is to use the volume envelope by clearing bit 4 of $4000 and setting the decay rate in the low 4 bits. Also, you should write $08 to $4001 (and $4005) to disable the sweep, otherwise they'll silence low notes (really, any value with bit 3 set and bit 7 clear).</div>
<br />
<br />Thank you. I'll digest this some more and re-post.
<br />
<br />T

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>