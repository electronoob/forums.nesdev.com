<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=12024" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-11-16T13:25:16-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=12024</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-11-16T13:25:16-07:00</updated>
<published>2014-11-16T13:25:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136534#p136534</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136534#p136534"/>
<title type="html"><![CDATA[Re: Learning Assembly for the Seasoned Coder]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136534#p136534"><![CDATA[
And don't forget that the CPU is extremely simple, and although some instructions have descriptions like &quot;Jump to SubRoutine&quot;, the CPU itself doesn't enforce that it be used exclusively for this purpose. It simply performs a few tasks (in this case, put the current program counter in the stack and jumping to an address) that aid in the implementation of subroutines, but if those tasks are useful in some other way, you can totally use instructions for other purposes. In a game, JSR can be quite useful to &quot;pause&quot; an object's AI routine that you can resume later.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Nov 16, 2014 1:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-11-16T00:38:17-07:00</updated>
<published>2014-11-16T00:38:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136497#p136497</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136497#p136497"/>
<title type="html"><![CDATA[Re: Learning Assembly for the Seasoned Coder]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136497#p136497"><![CDATA[
Well, the x86 in particular has very effective ways to address the stack, and to address arrays of structures.<br /><br />The 6502 loses a lot of efficiency when you must address an array that has more than 256 elements, or isn't using byte sized elements. It's usually best to store an array of 16-bit numbers as a pair of arrays of LSB and MSB. The stack can be addressed with TSX, but it is usually more efficient to pass arguments on the zero page, unless you're writing a recursive subroutine.<br /><br />As far as 6502 assembly tricks, I find that most interesting optimizations are very specific, not something that applies generally. The first part is just learning what all the instructions do so that you aren't tempted to do normal things in inefficient ways (e.g. doing arithmetic with the A and a pointer to index an array indirectly, instead of using X or Y; it works but it's not the &quot;right&quot; way to do it). The second part is mostly about figuring out what to keep in your registers A/X/Y, zero page, and stack, so that you don't waste too many cycles moving data around. Later you'll probably start to notice weird ways to save bytes or cycles, reusing the tail of a subroutine as a sub-subroutine, that kind of thing. I think it will just come with experience, just make sure to keep reading about the instruction set as you're working until you know it cold. That's the important first step.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Nov 16, 2014 12:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-11-15T19:31:04-07:00</updated>
<published>2014-11-15T19:31:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136471#p136471</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136471#p136471"/>
<title type="html"><![CDATA[Re: Learning Assembly for the Seasoned Coder]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136471#p136471"><![CDATA[
The 6502 can do polymorphism; it just does it differently from the PDP-11, MC68000, x86, and other architectures designed for the computational model preferred by ALGOL, Pascal, and C. A big difference is that the 6502's addressing modes encourage a structure of arrays, as opposed to C which encourages array of structures. This leads to organization of vtables as an array of function pointers, with one element for each type, instead of putting each type's function pointers together as is done with common Cfront-style approaches to C++ ABI.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Nov 15, 2014 7:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-11-15T18:43:13-07:00</updated>
<published>2014-11-15T18:43:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136468#p136468</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136468#p136468"/>
<title type="html"><![CDATA[Re: Learning Assembly for the Seasoned Coder]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136468#p136468"><![CDATA[
Certain things carry over well, mainly good engineering pragma: Division of tasks into easily-understood components, Abstraction, Model-view-controller.<br /><br />Other things don't; the 6502 in particular lacks a lot of things resulting in object orientation, stack use, and complex structures being awkward.<br /><br />One thing I've seen a lot in 6502 code in particular is extensive use of function pointers (in RAM) and/or arrays of function pointers (in ROM).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sat Nov 15, 2014 6:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[katsu]]></name></author>
<updated>2014-11-15T15:25:04-07:00</updated>
<published>2014-11-15T15:25:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136460#p136460</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136460#p136460"/>
<title type="html"><![CDATA[Learning Assembly for the Seasoned Coder]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12024&amp;p=136460#p136460"><![CDATA[
I am a developer by profession and have a wide range of experience in languages including C, C++, Java, Python, and even newer ones like Go.<br /><br />I do not, however, have any experience or know-how in assembly language programming. I don't know what the usual &quot;patterns&quot; are and probably won't get very far if I tried to develop a S/NES game in assembly. I would like to change this, however, but haven't really found any good resources or starting points.<br /><br />My question is, is there any resource you have used to learn assembly language methods and patterns? What tutorials or documents would you recommend as far as learning how to develop in assembly on a general level? Is there really a &quot;right&quot; or &quot;common&quot; way to do things like you'd see in designing higher-level langauge programs?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6773">katsu</a> — Sat Nov 15, 2014 3:25 pm</p><hr />
]]></content>
</entry>
</feed>