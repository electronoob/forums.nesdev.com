<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=5293" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-06-14T20:34:18-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=5293</id>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-06-14T20:34:18-07:00</updated>
<published>2009-06-14T20:34:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=48014#p48014</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=48014#p48014"/>
<title type="html"><![CDATA[MMC1 Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=48014#p48014"><![CDATA[
not necessarily.  You can have instruction level accuracy and still have it work without this hack, as long as your CPU performs both writes.<br /><br />2 writes in same instruction = only use the first one<br />1 write in instruction = use it<br /><br /><br />If your CPU only performs the second write, or you have absolutly no way to check the timestamp or current instruction from your write handler -- then yeah you're kind of screwed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Jun 14, 2009 8:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2009-06-14T20:04:54-07:00</updated>
<published>2009-06-14T20:04:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=48013#p48013</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=48013#p48013"/>
<title type="html"><![CDATA[MMC1 Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=48013#p48013"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />1)  See 6502_cpu.txt -- it outlines the reads/writes for every cycle of every instruction.  RMW Absolute performs two writes.  I couldn't tell you why they chose to do an additional write instead of a read.<br /></div><br />So basically if your emulator is not cycle-accurate you will need to inherit the MMC1 hack in order to get one known game to work?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Sun Jun 14, 2009 8:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-06-12T16:26:46-07:00</updated>
<published>2009-06-12T16:26:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47940#p47940</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47940#p47940"/>
<title type="html"><![CDATA[MMC1 Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47940#p47940"><![CDATA[
1)  See 6502_cpu.txt -- it outlines the reads/writes for every cycle of every instruction.  RMW Absolute performs two writes.  I couldn't tell you why they chose to do an additional write instead of a read.<br /><br />2)  No idea.  I suppose the exact time difference doesn't really matter.  All we really know is it's &gt; 1 cycle and &lt;= 4 cycles.<br /><br />I have it emulated as 2 CPU cycles.  This way RMW instructions will only perform the first (pre-modified) value, but two side-by-side STAs will work normally.  I'd wager NEStopia does something similar.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Fri Jun 12, 2009 4:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[teaguecl]]></name></author>
<updated>2009-06-12T16:04:31-07:00</updated>
<published>2009-06-12T16:04:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47939#p47939</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47939#p47939"/>
<title type="html"><![CDATA[MMC1 Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47939#p47939"><![CDATA[
Thanks Disch, that's exactly what I needed to know.  A couple of followup questions though:<br />1. Why does INC $FFFF cause two writes?  I would think just one read, then an increment, and one write of $00 to $FFFF.<br />2. any idea how far apart in time the writes need to be in order for them both to get acknowledged?  I'm doing some MMC1 hardware work and this timing constraint would be helpful.  It looks like the Nestopia source code might have the answer to this one.<br /><br />Thanks everyone<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=29">teaguecl</a> — Fri Jun 12, 2009 4:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-06-11T17:27:51-07:00</updated>
<published>2009-06-11T17:27:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47912#p47912</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47912#p47912"/>
<title type="html"><![CDATA[MMC1 Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47912#p47912"><![CDATA[
Nintendulator employs a hack to make Bill &amp; Ted work.  This is not how the hardware works.<br /><br />Bill &amp; Ted does an ugly bit of code to reset the mapper:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">INC $FFFF<br /></div><br /><br />where $FFFF contains $FF when read.  This writes $FF then $00 to address $FFFF.  However only the write of $FF should be acknowledged (apparently writes that are too close together are ignored).  If the write of $00 is acknowleged, then the game breaks because the register writes get all out of whack.<br /><br />Instead of checking the timestamp of the write vs. the timestamp of the previous write (which is how it should be done), Nintendulator employs a hack which just resets the shift reg if a different address was written to.<br /><br />So basically yeah.  Nintendulator is wrong.  NEStopia and the wiki are right.  Bill &amp; Ted's is dumb.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Thu Jun 11, 2009 5:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2009-06-11T15:26:43-07:00</updated>
<published>2009-06-11T15:26:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47910#p47910</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47910#p47910"/>
<title type="html"><![CDATA[MMC1 Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47910#p47910"><![CDATA[
- I have two guesses: <em>empirical code</em> or <em>bus conflicts</em>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Thu Jun 11, 2009 3:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[teaguecl]]></name></author>
<updated>2009-06-11T15:19:13-07:00</updated>
<published>2009-06-11T15:19:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47909#p47909</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47909#p47909"/>
<title type="html"><![CDATA[MMC1 Question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5293&amp;p=47909#p47909"><![CDATA[
I'm curious about the behavior of MMC1, and I was looking at the Nintendulator and Nestopia MMC1 source.  Oddly, I think they differ - which was quite a surprise.  Or maybe I'm not understanding it correctly.  Below is the code from Nintendulator.  <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void   MAPINT   MMC1_Write &#40;int Bank, int Addr, int Val&#41;<br />&#123;<br />   u8 Reg = &#40;Bank &gt;&gt; 1&#41; &amp; 3;<br />   if &#40;Val &amp; 0x80&#41;<br />   &#123;<br />      MMC1.Latch = MMC1.LatchPos = 0;<br />      MMC1.Regs&#91;0&#93; |= 0x0C;<br />      return;<br />   &#125;<br />   if &#40;Reg != LastReg&#41;<br />      MMC1.Latch = MMC1.LatchPos = 0;<br />   LastReg = Reg;<br />   MMC1.Latch |= &#40;Val &amp; 1&#41; &lt;&lt; MMC1.LatchPos++;<br />   if &#40;MMC1.LatchPos == 5&#41;<br />   &#123;<br />      MMC1.Regs&#91;Reg&#93; = MMC1.Latch &amp; 0x1F;<br />      MMC1.Latch = MMC1.LatchPos = 0;<br />      MMC1.Sync&#40;&#41;;<br />   &#125;<br />&#125;</div><br /><br />I'm curious about the LastReg variable.  Does this look right?  It seems that it will reset the latch if you write to a different bank from the previous write.  I've never seen any documentation claiming this is the way it works.  In fact our wiki says that the following code is valid for loading the PRG bank reg, but I think it will not work properly on Nintendulator because of this LastReg feature.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">But because only the fifth write sets the destination register, the following equivalent &#40;if obfuscated&#41; subroutine changes the PRG ROM bank in the same manner:<br /><br />setPRGBank:<br />  sta $8765<br />  lsr a<br />  sta $FACE<br />  lsr a<br />  sta $BA11<br />  lsr a<br />  sta $AD2E<br />  lsr a<br />  sta $EAD5<br />  rts<br /></div><br /><br />Any insight into this?  Am I not understanding the Nintendulator code, or is Nestopia and the wiki incorrect?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=29">teaguecl</a> — Thu Jun 11, 2009 3:19 pm</p><hr />
]]></content>
</entry>
</feed>