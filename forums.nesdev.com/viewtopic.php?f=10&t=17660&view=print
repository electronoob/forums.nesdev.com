<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Moving objects in and out of memory?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Moving objects in and out of memory?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17660">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17660</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>klonoa</b> [ Mon Aug 13, 2018 1:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good day everyone.<br /><br />After A year of school I thought I'd give programming for the nes another shot.<br />So far it's been going very good. Got some basic moving sprites and backgrounds.<br /><br />I want to make a simple horizontal shooter but i'm kinda stuck on the following:<br /><br />Say I spawn an enemy ship, I set some values using the .rs directive in nesasm to reserve some space in ram to hold it's height and width etc.<br />Now say that ship gets hit by a bullet and gets destroyed, how do I free up that memory that I have reserved for that ship?<br /><br />It might be obvious that I'm coming from and object-oriented world and I'm basically missing my c++ new and delete statements. <br /><br />I have the feeling i'm thinking all wrong, any advice for this noob?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 13, 2018 1:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />.rs is equivalent to making it a global (or static) variable in C++. So you cannot free it.<br /><br />What's usually done is to allocate some fixed number of objects (say 20, or 32), each with a fixed number of state bytes (e.g., 8). There should be a byte in the state that indicates what the type of the object is (e.g., an &quot;enemy ship&quot;, or a &quot;bullet&quot;, or &quot;unused&quot;). Then, when you want to allocate a new object, you scan the object list for a free object and set it to the desired type. In your object handling code you scan through the list and call appropriate handlers (based on object type) for each item in the list. When you want to destroy the enemy ship (or whatever), you'd set the object type back to &quot;unused&quot;.<br /><br />You can speed this up by using a &quot;free list&quot;, basically a linked list of free object slots. This means you don't have to scan through the whole list to find a free object, you can just pick one from the end of the linked list.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Aug 13, 2018 1:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi klono,<br /><br />Um, I've never used nesasm but, from my experience with assembly language, variables (groups of bytes in RAM) can be declared before you assemble your game.  After assembly, I don't believe it's possible to destroy a variable or create a new one.  However, tokumaru told me how he uses temporary variables.  To create a temporary variable: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;your variable declaration section in zeropage goes here<br />;afterwards<br />LocalVariables4vblank<br />LocalVariables4scrollland<br />;etc.<br /><br />;then in my vblank file (I'm using the asm6 assembler)<br />.enum LocalVariables4vblank<br />&nbsp; tE .dsb 2<br />&nbsp; t14 .dsb 2<br />.ende</div><br />Then tE can be used anywhere below that variable declaration section.  Caution: Lets say your zeropage variables end with $0082.  That would cause all of the LocalVariables4 labels to be initialized to #$0083.  Therefore, tE would be assembled at locations $0083 and $0084 (because my temporary variables all have a size of 2 bytes... that's just me, feel free to use whatever size you want... it's your game. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />).  The tempory (local) variables should only be used when you do not require the value at a later frame, or even for a short while because many, I guess, other local variables will be assigned seats at those same memory locations and so the value may vanish whenever a store to that memory location is processed.  (The value wouldn't vanish if the store, sta stx or sty, assigned the exact same value to that memory location.)  Hope this helps you. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Aug 13, 2018 2:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thefox is way more advanced than me.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  But, tokumaru's local variables have helped me so much!  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" />  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Mon Aug 13, 2018 2:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thefox's post is very good, listen to it.<br /><br />if you'd like to deepen your understanding a little bit, one thing that might be worth thinking about is that there's nothing especially &quot;magical&quot; about new and delete in C++; they aren't that different from malloc() and free() in C, which are just ordinary library functions that run ordinary code. All they're doing (ignoring some details around modern operating systems and memory protection and stuff) is managing chunks of memory in an address space. It might be edifying to consider and research how and why they're implemented the way they are, and what are some of the pros and cons of them vs other memory management strategies.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Aug 13, 2018 2:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing. You can access objects faster in asm if you make each attribute a separate array. So, rather than an array of objects (with x,y,type,state,etc)...you have an array of x's, an array of y's, an array of types, etc.<br /><br />You load the object number into the X register, and you can access it's attributes by using X as the index to each array. LDA x_array, X. Do something. LDA type_array, X.<br /><br />BTW, I don't do this myself, but I've seen others do this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Mon Aug 13, 2018 2:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Basically you create an object &quot;class&quot;. Say it has xPos, and yPos only for simplicity. In a higher level language you'd create an array of class objects. On NES it's better on the CPU to create an array of each element.<br />The higher level way:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const int objectnum = 16;<br />struct object{<br />&nbsp; &nbsp;int xPos;<br />&nbsp; &nbsp;int yPos;<br />};<br />object objects&#91;objectnum&#93;;<br /></div><br />The NES way<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const int objectnum = 16;<br />int xPos&#91;objectnum&#93;;<br />int yPos&#91;objectnum&#93;;<br /></div><br /><br />Unlike a higher level thing, it's best to just have a fixed maximum number of objects. If you want a maximum of 16 objects with 16 elements, that's 256 bytes.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">objectnum = 16<br />xPos .rs objectnum<br />yPos .rs objectnum<br /></div><br />To access their RAM, you have their object number in either X, or Y, and access their element using ,y or ,x addressing like so.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inc yPos,x<br />lda objectstate,x<br /></div><br />If you have a byte that says whether or not they're alive, on a really basic level you could have a type byte. If type is say... equal to zero, it means the object is dead. So destroying an object is as simple as storing zero to its type byte. (Maybe zeroing out the rest of its RAM as well.) Creating an object is as simple as looking for an object number that has a type byte equal to zero, and then changing the type byte of that object to the type of object you want to create. (And initializing its RAM to a state that type of object expects.)<br /><br />Here's a long post I wrote on the subject with some more advanced methods: <!-- l --><a class="postlink-local" href="https://forums.nesdev.com/viewtopic.php?f=10&amp;t=13061&amp;p=152230&amp;hilit=linked#p152230">viewtopic.php?f=10&amp;t=13061&amp;p=152230&amp;hilit=linked#p152230</a><!-- l -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>klonoa</b> [ Mon Aug 13, 2018 2:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow so many great tips in such little time!<br />Thanks everyone!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>klonoa</b> [ Mon Aug 13, 2018 2:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">thefox's post is very good, listen to it.<br /><br />if you'd like to deepen your understanding a little bit, one thing that might be worth thinking about is that there's nothing especially &quot;magical&quot; about new and delete in C++; they aren't that different from malloc() and free() in C, which are just ordinary library functions that run ordinary code. All they're doing (ignoring some details around modern operating systems and memory protection and stuff) is managing chunks of memory in an address space. It might be edifying to consider and research how and why they're implemented the way they are, and what are some of the pros and cons of them vs other memory management strategies.</div><br /><br />Do you have some resources you would recommend on the subject?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>klonoa</b> [ Mon Aug 13, 2018 2:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">.rs is equivalent to making it a global (or static) variable in C++. So you cannot free it.<br /><br />What's usually done is to allocate some fixed number of objects (say 20, or 32), each with a fixed number of state bytes (e.g., 8). There should be a byte in the state that indicates what the type of the object is (e.g., an &quot;enemy ship&quot;, or a &quot;bullet&quot;, or &quot;unused&quot;). Then, when you want to allocate a new object, you scan the object list for a free object and set it to the desired type. In your object handling code you scan through the list and call appropriate handlers (based on object type) for each item in the list. When you want to destroy the enemy ship (or whatever), you'd set the object type back to &quot;unused&quot;.<br /><br />You can speed this up by using a &quot;free list&quot;, basically a linked list of free object slots. This means you don't have to scan through the whole list to find a free object, you can just pick one from the end of the linked list.</div><br /><br />Funny how the fixed number of objects approach was in my head but it didn't 'feel' right to do it like that.<br />The free list idea is also a good tip!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Mon Aug 13, 2018 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's a shorter answer. You don't &quot;free up memory&quot;, you just stop refering to it, and then when another object needs it, you initialize it with the values for that object.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Aug 13, 2018 3:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Moving objects in and out of memory?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are some cases where you might want to reuse/reassign a static allocation, like if your game changes to a different mode.<br /><br />If you know they're never going to be needed at the same time, you can still reassign the same memory statically. There's no encapsulation or type safety here, if you .rs a byte of memory, that's a byte you can use any way you want, and you can give the same byte many names/labels.<br /><br />In NSEASM you can use .rsset to reset the .rs reservations to the address you want to overlap, and then create a new set of reservations on top. In CC65 you could do something similar with overlapping segments. Or you can just directly create an alias for an old reservation, if that's convenient (&quot;new_name = old_name&quot;).<br /><br />When doing this, though, you should probably have a clear plan of how you want to lay out memory. Know what's supposed to be &quot;global&quot; and survives the mode switch, and what isn't. Have a good idea of how much space each should take up, and maybe leave some extra room just in case you need it later. Though, this is something you might want to think about even if you're not trying to overlap stuff. If RAM is scarce it pays to manage your RAM budget. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>