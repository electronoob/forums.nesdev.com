<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - nes emulator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">nes emulator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=2798">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=2798</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesemuguy</b> [ Fri Dec 15, 2006 3:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>nes emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi guys, i just joined this forum, and am very happy to find a forum dedicated to nes emulator related topics.  Im new to emulation, and i really want to design a nes emulator.  I have read marat's, yoshi's, and several other nes tech docs, and have understood the basics.  So my first thing on the agenda is to create the 6502 cpu emulator.  But here is my problem, since my emulator will read in the .nes file produced by the nesasm assembler, how xactly am i suppose to translate the instructions from .nes file.  Since .nes is actually a binary file, i tried to open a stream buffer in c++ to the file, but the stream buffer only displayed comments.  I understand 6502 cpu design really well, but xactly how am suppose to get the instructions from the .nes file?
<br />
<br />Please, any suggestion would be really helpful.  Thnkx.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Dec 15, 2006 3:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know C++ (and barely know C), and haven't written an emulator before, so I can only offer basic suggestions..
<br />
<br />There must be a lot of ways to do it.  One way that comes to mind is to use a switch statement, with a case for every instruction.  Use the program counter as a pointer into the 6502's memory, and do each instruction from there.  Could be helpful to look at other CPU emulators and see how they do it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dXtr</b> [ Fri Dec 15, 2006 4:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />here is some good starting place I think:
<br /><!-- m --><a class="postlink" href="http://web.archive.org/web/20050216025739/www.goldroad.co.uk/whatisemulation.html">http://web.archive.org/web/200502160257 ... ation.html</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://web.archive.org/web/20050308030917/www.goldroad.co.uk/chip8.html">http://web.archive.org/web/200503080309 ... chip8.html</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>albailey</b> [ Fri Dec 15, 2006 7:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Having never written an emulator, I cant help with that.  But I might be able to help a little.
<br />
<br />The NES file (I'll assume its .ines format) has a 16 byte header, some 8K CHR banks and some 16K PRG banks (and maybe some junk at the end)
<br />
<br />Remember its binary so you need to open the file in binary mode. 
<br />FILE *fp = fopen(romFile , "rb");
<br />
<br />So to start you probably want to read in the 16 byte header
<br />Based on the docs you read, you'll know which bytes are for the CHR banks and which for the PRG banks.  You can then extract those CHR and PRG banks.  Thats all a ROM splitter does.
<br />
<br />Once you have isolated your PRG banks you can try to process them.
<br />My approach. (theres probably a better way). 
<br />- Allocate a byte array of 64K (0xFFFF + 1) in size.  I will call it "junk" in my examples.
<br />- Copy the PRG bank to the last 16K  (offset = 0xC000) of that array.
<br />- Go to the address for the reset vector.  the reset vector is at 0xFFFC (I think).  The 6502 is little endian  so the reset starting point is: 
<br />[Edited to correct an operations precedence error pointed out by other posts]
<br />  (junk[0xFFFD] &lt;&lt; 8 ) | junk[0xFFFC] 
<br />-Read the byte at that address.  Look it up in the opcode table.  The opcode table will tell you the length (meaning if the next byte is an operand for this opcode, or is a new opcode)
<br />Process the opcode and read the next one.
<br />
<br />This should get you going.
<br />
<br />I found that some of the documentation with the 6502 simualtor was good.  
<br />
<br />This page was really good <!-- m --><a class="postlink" href="http://homepage.ntlworld.com/cyborgsystems/CS_Main/6502/6502.htm">http://homepage.ntlworld.com/cyborgsyst ... 2/6502.htm</a><!-- m -->
<br />
<br />Al

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Dec 15, 2006 10:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Always parenthesize when mixing bitwise and arithmetic operators, otherwise you'll get surprises like the above, which is equivalent to
<br />
<br />junk[0xFFFD] &lt;&lt; (8 + junk[0xFFFC])
<br />
<br />If you use all bitwise, the precedence works with you:
<br />
<br />junk[0xFFFD] &lt;&lt; 8 | junk[0xFFFC]
<br />
<br />I personally like to avoid bitwise unless I really need it, so I do
<br />
<br />junk[0xFFFD] * 0x100 + junk[0xFFFC]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Fri Dec 15, 2006 11:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">If you use all bitwise, the precedence works with you:<br /><br />junk[0xFFFD] &lt;&lt; 8 | junk[0xFFFC]<br /><br />I personally like to avoid bitwise unless I really need it, so I do<br /><br />junk[0xFFFD] * 0x100 + junk[0xFFFC]</div>
<br />
<br />I would argue that doing it all bitwise is the "correct" way of doing it, since merging two bytes into a word doesn't <em>logically</em> involve multiplication and addition, but instead consists of joining together two sets of bits (by shifting one of them to the left, and then ORing them together).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Fri Dec 15, 2006 11:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems to me that you only have a very basic knowledge of C++ which concerns me a little. May I suggest that you read up on C++ a little more before starting. Although, a 6502 core is a very simple one to emulate, and I recommend downloading some 6502 cores first of all to give you a taste of what to expect.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Dec 15, 2006 12:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Always parenthesize when mixing bitwise and arithmetic operators, otherwise you'll get surprises like the above,</div>
<br />
<br />Heh... I always parenthesize EVERYTHING (even when I know I don't need to), simply because it makes things much more clear to me and it's less error prone.
<br />
<br />The only time I don't parenthesize is when I'm doing several of the same operator
<br />
<br />a + b + c
<br />or
<br />a * b * c
<br />
<br />However when I mix opreators... I do:   a + (b * c)  even though I know I don't need to -- it just makes it much more clear.
<br />
<br />
<br />
<br />I also like to stick with bitwise stuff where applicable
<br />
<br />junk[0xFFFC] | (junk[0xFFFD] &lt;&lt; 8)    &lt;-- is my preferred method

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesemuguy</b> [ Sat Dec 16, 2006 12:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How to read binary files into byte array</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow thankx guys for you responses and help.  I think i am the one that needs a bit of training or good references on how to read in binary files in c++.  Since all the rom image files used by any emulator will technically be in binary format, i need to how to read in the binary files, and extract the appropriate instructions from the rom files.  For example, lets say i just wanted to extract the assembly code from the .nes file of a rom, how do i go about doing that, i mean how do i find the code in the binary file where the actualy assembly instructions begin, you get me?  I know this is a newbie question, but seriously, i am new to emulation, and that is why i plan on emulating the 6502 cpu first.  I have yoshi's, marat, nes tech docs, and have studied them fairly well, but first thing is to understand how to read in the rom file.  Anyone have any suggestions or sites that you can refer to me to, thnkx!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Sat Dec 16, 2006 12:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><!-- m --><a class="postlink" href="http://nesdevwiki.ath.cx/index.php/Main_Page">http://nesdevwiki.ath.cx/index.php/Main_Page</a><!-- m -->
<br />
<br />look at the iNES file format.  you read in the program code section.  for now i would only do nrom (ines mapper 0), which is plain and simple.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesemuguy</b> [ Sat Dec 16, 2006 3:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>reading in .nes rom file</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ok, if my understanding is correct, my c++ file will look something like this to read a .nes file:
<br />
<br />#include &lt;iostream.h&gt;
<br />#include &lt;fstream.h&gt;
<br />
<br />int main( )
<br />{
<br />	char buffer[255];
<br />	
<br />	ifstream fin("testing.nes", ios::binary );
<br />	fin.read( buffer, 255);
<br />        // Code for later...
<br />	fin.close( );
<br />	return 0;
<br />}	
<br />
<br />Since "testing.nes" is in binary format, i opened a reader to it in binary mode.
<br />Then i read in all the binary data into the char buffer array.  
<br />Now that the buffer array has all the byte data, i go about looking for the starting code by traversing thru the array right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 16, 2006 10:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First off, you'll need to divide the .nes file into header (first 16 bytes), then PRG banks, then CHR banks. The header describes the circuit board inside the cartridge, telling how to map the PRG banks into CPU memory space.
<br />
<br />Bytes $FFFA-$FFFF of CPU memory space hold three important vectors. In the mappers that you'll be working with first, these are also the last six bytes of the PRG section.
<br />
<br />$FFFA: NMI entry point (little endian)
<br />$FFFC: Reset entry point (little endian)
<br />$FFFE: IRQ entry point (little endian)
<br />
<br />The 6502 looks up the reset entry point in $FFFC and then sets the program counter to that value. For instance, if peek($FFFC) = $23 and peek($FFFD) = $F1, jump to $F123.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Sat Dec 16, 2006 1:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />all files i think are binary.  the text mode was only dos and i think useless now.
<br />
<br />i would not use a static arrar for the program code.  instead have a pointer to the data. and use new after you get the size from the ines header.  then read in that size and your pointer will point to it.  then use it in the cpu as  my_pointer[address].  (very basic example)
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesemuguy</b> [ Sat Dec 16, 2006 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Reading the header</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In c++ how do i read in bytes to my buffer array, I mean is there data type called byte in c++, or is char it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Dec 16, 2006 6:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading the header</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nesemuguy wrote:</div><div class="quotecontent">In c++ how do i read in bytes to my buffer array, I mean is there data type called byte in c++, or is char it?</div>
<br />
<br />I don't mean to sound harsh --  but if you're struggling with these kinds of issues, I wonder if you're really ready for emu dev?
<br />
<br />But anyway -- even if your project doesn't get anywhere I still think it'll be a good learning experience.  So don't let me discourage you -- just don't set your expectations too high.  Making an emu is a big job.
<br />
<br />'char' is signed 8-bits.  For a byte, I generally use an 'unsigned char' -- although I make typedefs of everything for ease and simplicity:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef&nbsp; &nbsp;signed char&nbsp; &nbsp; s8;<br />typedef&nbsp; &nbsp;signed short&nbsp; &nbsp;s16;<br />typedef&nbsp; &nbsp;signed long&nbsp; &nbsp; s32;<br />typedef unsigned char&nbsp; &nbsp; u8;<br />typedef unsigned short&nbsp; &nbsp;u16;<br />typedef unsigned long&nbsp; &nbsp; u32;<br /></div>
<br />
<br />Those typedefs have become a staple in my programming -- I find that I include them into every project I work on.  That way you can make a byte with "u8  mybyte;"
<br />
<br />as for the file issue -- I'm not familiar with C++'s file streams so I can't really help you.  I still use C's fopen/fread/fclose functions (if it ain't broke, don't fix it)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>