<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=23&amp;t=16198" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-05-06T07:37:47-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=23&amp;t=16198</id>
<entry>
<author><name><![CDATA[Pokun]]></name></author>
<updated>2018-05-06T07:37:47-07:00</updated>
<published>2018-05-06T07:37:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=218062#p218062</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=218062#p218062"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=218062#p218062"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Pokun wrote:</div><div class="quotecontent">First time I hear someone call the SNES a modern console. It has more things in common with the NES than the Playstation<br /></div><br />I assume you mean the release PlayStation, not the <a href="https://forums.nesdev.com/viewtopic.php?p=195100#p195100" class="postlink">early PlayStation that plays <em>Magic Floor</em> and little else</a>. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div>Yes I mean the release PS. I know it is the Super Famicom's illegitimate child (it even inherited the controller) and the story about the Nintendo PlayStation prototype that was found and repaired.<br />The biggest reason I've always seen the 32-/64-bit era as a &quot;modern&quot; era in my mind is probably because it's the era when 3D games became standard, that's a huge change in most genres of games that has changed little since. The next biggest reason is that the 32-/64-bit era was designed to use high level programming languages while the 16-bit era was still mostly into assembly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6013">Pokun</a> — Sun May 06, 2018 7:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[charly400]]></name></author>
<updated>2018-04-29T15:41:22-07:00</updated>
<published>2018-04-29T15:41:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217790#p217790</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217790#p217790"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217790#p217790"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Part of the memory map is a direct fixed mapping from virtual addresses to physical addresses, with granularity of 512 MiB. (The entire virtual memory range from 0x8000_0000 through 0x9FFF_FFFF, as it says on the wiki, directly addresses physical memory from 0x0000_0000 through 0x1FFF_FFFF.<br /></div><br />I understand, it means that this virtual memory, is never located in another place in ram but always in the addresses from 0x0000_0000 through 0x1FFF_FFFF, in ram<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Physical addresses from 0x0000_0000 through 0x04FF_FFFF, and 0x1FC0_0000 through 0x1FCF_FFFF correspond to devices internal to the RCP; the rest is access to the Parallel Interface. Given how tricky direct PI interface is, I have a hunch that this direct map was only made available so that the PIF's initial program loader didn't have to use the DMA hardware.)<br /></div><br />ok, so, knowing where the program can be located you do not need the DMA system with the MMU to do it, and it is also faster to access the RAM directly.<br />So the initial position of the program using the MMU is not fixed in RAM = another translation for the program segments, which is what happens when loading a rom through the MMU<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9116">charly400</a> — Sun Apr 29, 2018 3:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-04-29T15:20:10-07:00</updated>
<published>2018-04-29T15:20:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217789#p217789</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217789#p217789"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217789#p217789"><![CDATA[
<div class="quotetitle">charly400 wrote:</div><div class="quotecontent"><br />I have read that the only addresses that the cpu handles are virtual<br /></div>Technically correct.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />you say that disabling MMU translation allows direct access to physical addresses?<br /></div>No, you cannot <strong>disable</strong> the MMU translation.<br />Part of the memory map is a direct fixed mapping from virtual addresses to physical addresses, with granularity of 512 MiB. (The entire virtual memory range from 0x8000_0000 through 0x9FFF_FFFF, as it says on the wiki, directly addresses physical memory from 0x0000_0000 through 0x1FFF_FFFF.<br /><br />Physical addresses from 0x0000_0000 through 0x04FF_FFFF, and 0x1FC0_0000 through 0x1FCF_FFFF correspond to devices internal to the RCP; the rest is access to the Parallel Interface. Given how tricky direct PI interface is, I have a hunch that this direct map was only made available so that the PIF's initial program loader didn't have to use the DMA hardware.)<br /><br />Physical addresses above 0x2000_0000 are technically possible, but apparently unseen.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Apr 29, 2018 3:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[charly400]]></name></author>
<updated>2018-04-29T14:31:56-07:00</updated>
<published>2018-04-29T14:31:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217782#p217782</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217782#p217782"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217782#p217782"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />The N64 has an MMU with TLB, yes, but it also has an MMU bypass. Reportedly most games use the bypass, because there's not much advantage when it's a single-user single-process system that's usually cooperatively threaded.<br /><br /><a href="http://en64.shoutwiki.com/wiki/N64_CPU#Memory_Management_Unit_.28MMU.29" class="postlink">More detail</a><br /></div><br />I have read that the only addresses that the cpu handles are virtual, you say that disabling MMU translation allows direct access to physical addresses?, that's great, i have read in n64 wiki, that in kseg1 and kseg0 virtual addresses = physical addresses, that is, direct mapping by the MMU but without translation, and it is possible with pointers to see the content of the TLB, but from ksseg and kseg3 modes<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9116">charly400</a> — Sun Apr 29, 2018 2:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-04-29T10:24:08-07:00</updated>
<published>2018-04-29T10:24:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217767#p217767</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217767#p217767"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217767#p217767"><![CDATA[
The N64 has an MMU with TLB, yes, but it also has an MMU bypass. Reportedly most games use the bypass, because there's not much advantage when it's a single-user single-process system that's usually cooperatively threaded.<br /><br /><a href="http://en64.shoutwiki.com/wiki/N64_CPU#Memory_Management_Unit_.28MMU.29" class="postlink">More detail</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Apr 29, 2018 10:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[charly400]]></name></author>
<updated>2018-04-28T23:47:44-07:00</updated>
<published>2018-04-28T23:47:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217737#p217737</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217737#p217737"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217737#p217737"><![CDATA[
I made a mistake, since the debugging process control the registers so control the program flow, I was writing about that when I wrote about mmap<br />I believed that N64 only handled virtual memory, you say that is it possible to access the RAM directly?, can you access all the registers of the processor directly or does it have something like protected mode?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9116">charly400</a> — Sat Apr 28, 2018 11:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-04-28T13:59:06-07:00</updated>
<published>2018-04-28T13:59:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217713#p217713</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217713#p217713"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217713#p217713"><![CDATA[
<div class="quotetitle">charly400 wrote:</div><div class="quotecontent"><br />I used mmap to sample files in memory, I know people who while debugging an application dump the trace in memory reserved by mmap, it is faster than generating a file,<br /></div>mmap is literally just a software interface to an MMU and disk cache. There's no way it's substantively faster than explicitly using PI load commands.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />it is possible to generate a DMA in N64 from a device like a disk, a page fault occurs when the page is not in memory, but on the disk<br /></div>What I've read about the N64 implies that using the MMU apparently causes a dramatic performance hit: page faults are incredibly expensive due to the N64's memory bandwidth; it's best to explicitly move things in or out of memory predictively instead of rely on a fault.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sat Apr 28, 2018 1:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[charly400]]></name></author>
<updated>2018-04-28T22:27:14-07:00</updated>
<published>2018-04-28T13:14:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217710#p217710</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217710#p217710"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217710#p217710"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />There was no 100% standard way to operate the DMA unit or the joypad ports in software.  All of that was up to the developer.  You could learn by identifying code in commercial games that touches the relevant registers, or you could just study how the registers work and write your own.<br /><br />(Actually, if you were using normal joypads, you could take advantage of an auto-read function <em>in hardware</em> that did the serial port communications in the background and loaded some registers with the results.  But if you were using a weird device you had to do the serial polling yourself - there were standard BIOSes for things like the multitap, SNES Mouse and Super Scope, but at least in the case of the SNES Mouse a number of developers modified the BIOS.)<br /><br />I learned partly by using Neviksti's SNES Starter Kit, which contains a number of basic routines.  Once I figured out what they did, I became capable of writing my own, so I don't use the Starter Kit routines any more.  The SNES is far simpler than a modern computer, so it's actually quite reasonable to write hardware interface code in assembly.<br /><br />...<br /><br />As I understand it, the only official, non-developer-defined code used by every SNES game is the code used by the audio CPU to receive data from the main CPU during boot.  It resides in the only storage memory in the entire SNES: the audio module's 64-byte IPL ROM.  You see, the audio module is almost totally isolated from the rest of the system; its only window to the outside world is a set of four 8-bit I/O ports through which the main CPU can communicate with the audio CPU.  And since everything written to the ports from outside has to be read by the audio CPU on the inside, you can't just DMA things into audio RAM; you need the audio CPU's cooperation to pick up the data and put it where it's supposed to go.<br /><br />The audio module's IPL ROM defines a simple communications protocol, so that when the system boots, the audio CPU starts up running a data reception loop rather than random garbage.  The interface code on the main CPU side is not defined by Nintendo; the developer can do anything that properly respects the protocol implicitly defined by the IPL ROM code.<br /><br />Strictly speaking, the IPL ROM is only necessary for boot.  You can write your own audio-side communications driver and use the IPL ROM to load it, and once you've got that in the audio RAM, along with a way to get the audio CPU to jump to it, you never need to touch the IPL ROM again.<br /></div><br />sure, dma registers can be filled in many ways, depends on the origin and destination, great the snes starter kit !, has a game, the walker example, very good game, I really appreciate the material that you have given me, regarding the programming of the joystick, sure there are ways to read / write the registers, they are waiting for the joystick signal, the registers are automatically read by the program, it should be like a while that repeats until there is a certain value in those registers, with respect to what you say about the sound routine is unique, I'll keep it in mind, I also have something to share, but I'm pretty sure you have it, this does not have to do with the topic, it's for playstation 2<br />code warrior: <!-- m --><a class="postlink" href="http://assemblergames.com/threads/request-code-warrior-ps2.63328/">http://assemblergames.com/threads/reque ... ps2.63328/</a><!-- m --><br />SDK: <!-- m --><a class="postlink" href="https://archive.org/details/PlayStation2July2005SDKversion3.0.3">https://archive.org/details/PlayStation ... rsion3.0.3</a><!-- m --><br /><br />repport me if the links are down<br /><br /><div class="quotetitle">Pokun wrote:</div><div class="quotecontent"><br />First time I hear someone call the SNES a modern console. It has more things in common with the NES than the Playstation so I like to draw the line of &quot;modern consoles&quot; at the 32-bit era and onward.<br /></div><br />is an old console but newer than the commodore 64 or apple 2 gs, it is true that it is not like the generation of 32-bit processors<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />The N64 cartridge's parallel interface (PI) behaves as an SSD, and I'm told its CPU has enough of an MMU to make virtual memory possible. But to make <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mmap&#40;&#41;</tt> practical, you'd need to write some sort of cooperative multithreading kernel so that one thread can execute while another thread is blocked on a page fault waiting for a DMA from PI to finish. Such a kernel isn't included in any BIOS in the console itself; it has to be linked into each game. I don't know whether commercial N64 games actually use page faults, or whether they just treat the N64 cart as a file system.<br /></div><br />I used mmap to sample files in memory, I know people who while debugging an application dump the trace in memory reserved by mmap, it is faster than generating a file, it is possible to generate a DMA in N64 from a device like a disk, a page fault occurs when the page is not in memory, but on the disk<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9116">charly400</a> — Sat Apr 28, 2018 1:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-04-27T06:54:08-07:00</updated>
<published>2018-04-27T06:54:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217609#p217609</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217609#p217609"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217609#p217609"><![CDATA[
<div class="quotetitle">Pokun wrote:</div><div class="quotecontent"><br />First time I hear someone call the SNES a modern console. It has more things in common with the NES than the Playstation<br /></div><br />I assume you mean the release PlayStation, not the <a href="https://forums.nesdev.com/viewtopic.php?p=195100#p195100" class="postlink">early PlayStation that plays <em>Magic Floor</em> and little else</a>. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Apr 27, 2018 6:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Pokun]]></name></author>
<updated>2018-04-27T05:10:13-07:00</updated>
<published>2018-04-27T05:10:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217606#p217606</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217606#p217606"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217606#p217606"><![CDATA[
<div class="quotetitle">charly400 wrote:</div><div class="quotecontent"><br />snes is one of the few modern consoles that have no virtual memory or kernel , playstation 1 has a RISC architecture but it has a kernel, however it resides in an IOPRP image along with the drivers that manages the bios,<br />...<br />but from the N64 onwards the consoles are more like the pcs, the routines of the kernel are hidden from the user<br /></div>First time I hear someone call the SNES a modern console. It has more things in common with the NES than the Playstation so I like to draw the line of &quot;modern consoles&quot; at the 32-bit era and onward.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6013">Pokun</a> — Fri Apr 27, 2018 5:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2018-04-25T15:23:39-07:00</updated>
<published>2018-04-25T15:23:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217498#p217498</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217498#p217498"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217498#p217498"><![CDATA[
<div class="quotetitle">charly400 wrote:</div><div class="quotecontent"><br />the only way to know what are the driver routines for the snes, such as DMA controller and joysticks and more things is seeing that it is repeated among the roms in some emulator<br /></div><br />There was no 100% standard way to operate the DMA unit or the joypad ports in software.  All of that was up to the developer.  You could learn by identifying code in commercial games that touches the relevant registers, or you could just study how the registers work and write your own.<br /><br />(Actually, if you were using normal joypads, you could take advantage of an auto-read function <em>in hardware</em> that did the serial port communications in the background and loaded some registers with the results.  But if you were using a weird device you had to do the serial polling yourself - there were standard BIOSes for things like the multitap, SNES Mouse and Super Scope, but at least in the case of the SNES Mouse a number of developers modified the BIOS.)<br /><br />I learned partly by using Neviksti's SNES Starter Kit, which contains a number of basic routines.  Once I figured out what they did, I became capable of writing my own, so I don't use the Starter Kit routines any more.  The SNES is far simpler than a modern computer, so it's actually quite reasonable to write hardware interface code in assembly.<br /><br />...<br /><br />As I understand it, the only official, non-developer-defined code used by every SNES game is the code used by the audio CPU to receive data from the main CPU during boot.  It resides in the only storage memory in the entire SNES: the audio module's 64-byte IPL ROM.  You see, the audio module is almost totally isolated from the rest of the system; its only window to the outside world is a set of four 8-bit I/O ports through which the main CPU can communicate with the audio CPU.  And since everything written to the ports from outside has to be read by the audio CPU on the inside, you can't just DMA things into audio RAM; you need the audio CPU's cooperation to pick up the data and put it where it's supposed to go.<br /><br />The audio module's IPL ROM defines a simple communications protocol, so that when the system boots, the audio CPU starts up running a data reception loop rather than random garbage.  The interface code on the main CPU side is not defined by Nintendo; the developer can do anything that properly respects the protocol implicitly defined by the IPL ROM code.<br /><br />Strictly speaking, the IPL ROM is only necessary for boot.  You can write your own audio-side communications driver and use the IPL ROM to load it, and once you've got that in the audio RAM, along with a way to get the audio CPU to jump to it, you never need to touch the IPL ROM again.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Wed Apr 25, 2018 3:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-04-25T11:57:29-07:00</updated>
<published>2018-04-25T11:57:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217484#p217484</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217484#p217484"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217484#p217484"><![CDATA[
<div class="quotetitle">charly400 wrote:</div><div class="quotecontent"><br />snes is one of the few modern consoles that have no virtual memory or kernel<br /></div><br />Neither does the Genesis or the Game Boy Advance.<br /><br />The N64 cartridge's parallel interface (PI) behaves as an SSD, and I'm told its CPU has enough of an MMU to make virtual memory possible. But to make <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mmap&#40;&#41;</tt> practical, you'd need to write some sort of cooperative multithreading kernel so that one thread can execute while another thread is blocked on a page fault waiting for a DMA from PI to finish. Such a kernel isn't included in any BIOS in the console itself; it has to be linked into each game. I don't know whether commercial N64 games actually use page faults, or whether they just treat the N64 cart as a file system.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Apr 25, 2018 11:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[charly400]]></name></author>
<updated>2018-04-25T16:03:35-07:00</updated>
<published>2018-04-25T11:28:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217483#p217483</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217483#p217483"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217483#p217483"><![CDATA[
<div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent"><br />It's not just DMA. The way the PPU of machines like the SNES and the NES work, indexing into graphics as counted per tile (usually 8x8 pixels) is hardware supported, whereas reading/writing individual pixels must be done in software by the CPU (and as such, manipulation of graphics on a sub-tile/per-pixel level is rare on slow processors like these. You can sometimes see it used in some games as a way to destructively mask, skew or rotate graphics in RAM, but that's the practical extent of it).<br /><br />And even if you read/write individual pixels, you still do it to the interim storage of CHR RAM, which is still organized as tiles. You cannot (on the SNES) write individual pixels directly to screen. Where a 'normal' computer has one or several pixel-by-pixel drawn frame buffers, a SNES (and many other retro consoles) have &quot;name tables&quot; which are simple arrays of indexes on what tile to &quot;clone stamp&quot; where, from the graphics RAM/ROM to the screen.<br /><br />This info video helps explain it, using Commodore 64 and the NES as examples:<br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=Tfh0ytz8S0k">https://www.youtube.com/watch?v=Tfh0ytz8S0k</a><!-- m --><br /><br />He calls a &quot;tile&quot; a &quot;colour cell&quot;, but they're the same. The idea is that you have data about the graphical raster pattern stored in a tile/cell of a fixed size (again, usually 8x8 px), and then assign what collor corresponds to what bit in the pattern. It means you can reuse the same pattern with different colours on different parts of the screen by assigning different palettes to the pattern. This is akin to the indexed graphics mode you have in GIF:s, except you have several palettes applied to different areas, and not just one.<br /></div><br />So, I have seen that a DMA transfer happens between the CHR ram of the cartridge and the memory of the PPU or the central memory WRAM, I understand that tiles are sent or palete information, DMA is how it works in the pcs however it is the rom programmer who fills the controller registers, as in the example kungfu1, instead of from the kernel as it is done in a pc, in both cases it is the CPU that fills those registers, but also the ppu can do it, I think I understood that point reading from nesdev.com, that DMA occurs between both memories,cpu's memory and chr and ppu's memory and chr, while the current processor that requested dma is in HALT state when DMA start. <br />What i dont know if tiles are hardware circuitry oriented like registers to be filled<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Programming the 65816 (including the 6502, 65C02, and 65802)[/i] by WDC, but originally by David Eyes and Ron Lichty, will be sufficient for learning the CPU.  You can find copies here: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Programming_guide#Online">http://wiki.nesdev.com/w/index.php/Prog ... ide#Online</a><!-- m --><br /></div><br />Great that book, I already had it, thanks for the complete nesdev guide to learn how to program the SNES, as a fan of SNES I have dedicated to archive as many books as I could, I also have the WDC programmanual in assembly, snes is one of the few modern consoles that have no virtual memory or kernel , playstation 1 has a RISC architecture but it has a kernel, however it resides in an IOPRP image along with the drivers that manages the bios, the only way to know what are the driver routines for the snes, such as DMA controller and joysticks and more things is seeing that it is repeated among the roms in some emulator, it seems to me, but from the N64 onwards the consoles are more like the pcs, the routines of the kernel are hidden from the user<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9116">charly400</a> — Wed Apr 25, 2018 11:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[gauauu]]></name></author>
<updated>2018-04-24T10:38:41-07:00</updated>
<published>2018-04-24T10:38:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217430#p217430</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217430#p217430"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217430#p217430"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br /><div class="quotetitle">charly400 wrote:</div><div class="quotecontent">... I have to study snes programming, and snes architecture, to be able to understand the architecture, I have a couple of books, book 1 and book 2, book 1 lacks CPU snes data chapter<br /></div><br /><em>Programming the 65816 (including the 6502, 65C02, and 65802)</em> by WDC, but originally by David Eyes and Ron Lichty, will be sufficient for learning the CPU.  You can find copies here: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Programming_guide#Online">http://wiki.nesdev.com/w/index.php/Prog ... ide#Online</a><!-- m --></div><br /><br />I was about to complain about the link being down, until I noticed the note about &quot;in case the link is down, use this version provided by Koitsu&quot; -- thanks for hosting that!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7375">gauauu</a> — Tue Apr 24, 2018 10:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2018-04-24T09:56:34-07:00</updated>
<published>2018-04-24T09:56:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217427#p217427</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217427#p217427"/>
<title type="html"><![CDATA[Re: WDC offers free C Compiler/Optimizer and more]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=16198&amp;p=217427#p217427"><![CDATA[
<div class="quotetitle">charly400 wrote:</div><div class="quotecontent"><br />... I have to study snes programming, and snes architecture, to be able to understand the architecture, I have a couple of books, book 1 and book 2, book 1 lacks CPU snes data chapter<br /></div><br /><em>Programming the 65816 (including the 6502, 65C02, and 65802)</em> by WDC, but originally by David Eyes and Ron Lichty, will be sufficient for learning the CPU.  You can find copies here: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Programming_guide#Online">http://wiki.nesdev.com/w/index.php/Prog ... ide#Online</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Tue Apr 24, 2018 9:56 am</p><hr />
]]></content>
</entry>
</feed>