<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Advice for an aspiring homebrewer?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Advice for an aspiring homebrewer?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=6925">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=6925</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>imamelia</b> [ Mon Sep 06, 2010 7:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">You can try being very organized in learning things. If that's what works best for you, go for it. Personally I find it's better to learn things as you need them, so you understand why you need them. Opposed to learning about something and not really using it, forgetting it, and then having to revisit it. But it depends on how you learn.</div><br />It will probably be a combination of both.<br /><br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">If you get good at using the NES then stepping up to the SNES should be no problem.</div><br />Yeah...I imagine NES programming would be easier, but I already know the format and everything for 65816 ASM, so I don't see much point in going back to 6502.  I'm also not as interested in the NES as I am in the SNES.<br /><br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">I'm not sure if you have done much 65816 programming but atleast you have a bit of experience.</div><br />Well...I've done blocks, sprites (what would technically be called "objects"), and patches (editing existing code and sometimes splicing in new code), although I've never really done anything from scratch.<br /><br /><div class="quotetitle">smkd wrote:</div><div class="quotecontent">And if you hit a wall somewhere, just post a thread detailing what you tried and what went wrong and someone will definitely help. You won't stay stuck for long since we have plenty of SNES devers here to help.</div>
<br />Well, that's good.  I'm just afraid I'll get stuck way too often.  But yeah, I appreciate the help.
<br />
<br />psycopathicteen: SMW is by far the easiest game to hack, and SMW hacking is definitely easier than homebrew and the like.  And...I'm not sure I understand some of your terminology.  Height- and length-defined metasprites?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Sep 06, 2010 7:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm programming a game that will be made for the intent of easy hacking.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Sep 07, 2010 7:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For height and legnth defined metasprites I mean using a parameter that say how many hardware sprites tall and wide the game object is.  I used to have it where the offset of every sprite was stored seperately in a lookup table, but making a look up table for every sprite takes too long to do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 07, 2010 8:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cut scenes in the story mode of <a href="http://www.pineight.com/croom/" class="postlink">Concentration Room</a> 0.02 use a compromise between specifying a sprite cel as a rectangular block of hardware sprites and specifying each sprite individually. Each sprite cel is divided into horizontal or vertical strips, each of which has a left, top, starting tile number, direction, length in tiles, and attributes. Direction can be right or down, attributes relate to flipping and coloring, and both may be multiplexed onto unused bits of the length. For drawing to the right, x increases by 8 or -8 depending on flip, y increases by 0, and tile number increases by 1. For drawing down, x increases by 0, y increases by 8, and tile number increases by 16.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gilligan</b> [ Wed Sep 08, 2010 3:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can have a look at my stuff at: <a href="http://www.github.com/gilligan/snesdev" class="postlink">http://www.github.com/gilligan/snesdev</a>
<br />
<br />It contains some simple examples that might or might not be useful
<br />to look at as a starting point :-) Don't expect anything awesome it
<br />is still a bit of a mess and hopefully i'll find the time and motivation
<br />to rework and extend it sometime soon.
<br />
<br />I also need to add some credits. Things like the ca65 linking is based on the stuff ekid has done, and there are other things like some sprite I reused from (iirc) the neviksti snes starterkit thingy. That one might also be worthwhile to check out.
<br />
<br />Comments or contributions are always welcome by the way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Sep 09, 2010 4:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh yeah, I forgot about this cool dual-layered rotation trick using Mode-2.
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=6679">http://nesdev.com/bbs/viewtopic.php?t=6679</a><!-- m --> 
<br />
<br />It gets explained in here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>imamelia</b> [ Sun Oct 17, 2010 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hm...I'm thinking maybe I should have made this thread over the summer or something, some time when I'd have more time...
<br />
<br />Well, I've already run into problems.  This is my source code so far:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;header<br />lorom<br /><br />;org $008000<br />;fillbyte $FF : fill $8000<br /><br />org $008000<br /><br />ResetSNES:<br /><br />SEI&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; disable IRQ<br />REP #$39&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; clear carry and set 16-bit A<br />XCE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; clear emulation mode flag<br />LDA.w #$0000&nbsp; &nbsp;&nbsp; &nbsp;; set the direct page to $0000<br />TCD&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />JSR InitRAM&nbsp; &nbsp;&nbsp; &nbsp;;<br />LDA.w #$0FFF&nbsp; &nbsp;&nbsp; &nbsp;; set the stack to $0FFF<br />TCS&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />LDA.w #$008F&nbsp; &nbsp;&nbsp; &nbsp;; force blank on, maximum brightness,<br />STA $2100&nbsp; &nbsp;&nbsp; &nbsp;;<br />JSR Clear2100s&nbsp; &nbsp;&nbsp; &nbsp;; clear registers $21xx<br />;JSR Clear4000s&nbsp; &nbsp;&nbsp; &nbsp;; clear registers $40xx<br />JSR Clear4200s&nbsp; &nbsp;&nbsp; &nbsp;; clear registers $42xx<br />SEP #$20&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; set 8-bit A<br />JSR ClearVRAM&nbsp; &nbsp;&nbsp; &nbsp;; clear out the VRAM<br />JSR ClearPalette&nbsp; &nbsp;&nbsp; &nbsp;; clear out the palette &#40;reset all colors to 0000&#41;<br />JSR InitVals&nbsp; &nbsp;&nbsp; &nbsp;; initialize some registers to nonzero values<br />SEP #$10&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; set 8-bit XY<br />JSR SetRAMRoutines&nbsp; &nbsp;&nbsp; &nbsp;;<br />JSR UploadSPCEngine&nbsp; &nbsp;;<br />JSR UploadSamples&nbsp; &nbsp;&nbsp; &nbsp;;<br />JSR SetUpHDMA&nbsp; &nbsp;&nbsp; &nbsp;;<br /><br />CLI&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br /><br />STZ $2121&nbsp; &nbsp;&nbsp; &nbsp;;<br />LDA #$EF&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />LDX #$3F&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />STA $2122&nbsp; &nbsp;&nbsp; &nbsp;;<br />STX $2122&nbsp; &nbsp;&nbsp; &nbsp;;<br />LDA #$0F&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />STA $2100&nbsp; &nbsp;&nbsp; &nbsp;;<br /><br />WAI&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />BRA $FD&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br /><br />;RTI&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br /><br />Clear2100s:<br /><br />STZ $2101<br />STZ $2106<br />STZ $2108<br />STZ $210A<br />STZ $210C<br />STZ $210D<br />STZ $210D<br />STZ $210F<br />STZ $210F<br />STZ $2111<br />STZ $2111<br />STZ $2113<br />STZ $2113<br />STZ $2116<br />STZ $211A<br />STZ $2115<br />STZ $211C<br />STZ $211C<br />STZ $211E<br />STZ $211E<br />STZ $2120<br />STZ $2120<br />STZ $2123<br />STZ $2125<br />STZ $2127<br />STZ $2129<br />STZ $212B<br />STZ $212D<br />STZ $212F<br />STZ $2131<br />STZ $2133<br />RTS<br /><br />Clear4200s:<br /><br />STZ $4200<br />STZ $4202<br />STZ $4204<br />STZ $4206<br />STZ $4208<br />STZ $420A<br />STZ $420C<br />RTS<br /><br />InitVals:<br /><br />LDA #$03<br />STA $2101<br />LDA #$80<br />STA $2115<br />LDA #$01<br />STA $211B<br />LDA #$30<br />STA $2130<br />LDA #$E0<br />STA $2132<br />LDA #$FF<br />STA $4201<br />LDA #$01<br />STA $420D<br />RTS<br /><br />ClearVRAM:<br /><br />LDA #$80&nbsp; &nbsp;&nbsp; &nbsp;;<br />STA $2115&nbsp; &nbsp;;<br />LDX #$1809&nbsp; &nbsp;;<br />STX $4300&nbsp; &nbsp;;<br />LDX.w #$0000&nbsp; &nbsp;;<br />STX $2116&nbsp; &nbsp;;<br />STX $00&nbsp; &nbsp;&nbsp; &nbsp;;<br />STX $4302&nbsp; &nbsp;;<br />STZ $4304&nbsp; &nbsp;;<br />LDX #$FFFF&nbsp; &nbsp;;<br />STX $4305&nbsp; &nbsp;;<br />LDA #$01&nbsp; &nbsp;&nbsp; &nbsp;;<br />STA $420B&nbsp; &nbsp;;<br />STZ $2119&nbsp; &nbsp;;<br /><br />STZ $2102&nbsp; &nbsp;;<br />STZ $2103&nbsp; &nbsp;;<br />LDX.w #$007F&nbsp; &nbsp;;<br />LDA #$F0&nbsp; &nbsp;&nbsp; &nbsp;;<br />.Loop00x1&nbsp; &nbsp;;<br />STA $2104&nbsp; &nbsp;;<br />STA $2104&nbsp; &nbsp;;<br />STZ $2104&nbsp; &nbsp;;<br />STZ $2104&nbsp; &nbsp;;<br />DEX&nbsp; &nbsp;&nbsp; &nbsp;;<br />BPL .Loop00x1&nbsp; &nbsp;;<br />LDX.w #$001F&nbsp; &nbsp;;<br />.Loop00x2&nbsp; &nbsp;;<br />STZ $2104&nbsp; &nbsp;;<br />DEX&nbsp; &nbsp;&nbsp; &nbsp;;<br />BPL .Loop00x2&nbsp; &nbsp;;<br />RTS&nbsp; &nbsp;&nbsp; &nbsp;;<br /><br />ClearPalette:<br /><br />STZ $2121&nbsp; &nbsp;;<br />LDX.w #$00FF&nbsp; &nbsp;;<br />.Loop00x3&nbsp; &nbsp;;<br />STZ $2122&nbsp; &nbsp;;<br />STZ $2122&nbsp; &nbsp;;<br />DEX&nbsp; &nbsp;&nbsp; &nbsp;;<br />BPL .Loop00x3&nbsp; &nbsp;;<br />RTS&nbsp; &nbsp;&nbsp; &nbsp;;<br /><br />InitRAM:<br /><br />PHP&nbsp; &nbsp;&nbsp; &nbsp;;<br />SEP #$20&nbsp; &nbsp;&nbsp; &nbsp;;<br />STZ $2181&nbsp; &nbsp;;<br />STZ $2182&nbsp; &nbsp;;<br />STZ $2183&nbsp; &nbsp;;<br />LDX #$8008&nbsp; &nbsp;;<br />STX $4300&nbsp; &nbsp;;<br />LDX #$8005&nbsp; &nbsp;; $008005<br />STX $4302&nbsp; &nbsp;;<br />STZ $4304&nbsp; &nbsp;; $008005 is always 00, so use that as our WRAM fill byte<br />LDX.w #$0000&nbsp; &nbsp;;<br />STX $4305&nbsp; &nbsp;;<br />LDA #$01&nbsp; &nbsp;&nbsp; &nbsp;;<br />STA $420B&nbsp; &nbsp;;<br />LDA #$01&nbsp; &nbsp;&nbsp; &nbsp;;<br />STA $420B&nbsp; &nbsp;;<br />PLP&nbsp; &nbsp;&nbsp; &nbsp;;<br />RTS&nbsp; &nbsp;&nbsp; &nbsp;;<br /><br />SetRAMRoutines:<br />RTS<br /><br />UploadSPCEngine:<br />RTS<br /><br />UploadSamples:<br />RTS<br /><br />SetUpHDMA:<br />RTS<br /><br />org $00FFDF&nbsp; &nbsp;;<br />db $60&nbsp; &nbsp;&nbsp; &nbsp;; RTS<br />dw $FFFF,$FFFF&nbsp; &nbsp;;<br />dw $FFDF&nbsp; &nbsp;&nbsp; &nbsp;; COP<br />dw $FFDF&nbsp; &nbsp;&nbsp; &nbsp;; BRK<br />dw $FFDF&nbsp; &nbsp;&nbsp; &nbsp;; ABORT<br />dw $FFDF&nbsp; &nbsp;&nbsp; &nbsp;; NMI<br />dw $8000&nbsp; &nbsp;&nbsp; &nbsp;; RESET<br />dw $FFDF&nbsp; &nbsp;&nbsp; &nbsp;; IRQ</div>
<br />
<br />Many of the routines are from tutorials and stuff.  But I was just trying to reset the SNES and show a green color on the screen (using an example code I found), and absolutely nothing happens when I load the ROM.  I can't even set breakpoints to step through the code, apparently.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>smkd</b> [ Sun Oct 17, 2010 11:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Had a quick look and noticed a few things.  Here's a list and source slightly modified to get a green screen like intended.
<br />
<br />-the vectors are incorrectly set.  The 1.51 Snes9x debugger has a "Vector Info" button that shows these, not sure about bsnes.  The reset vector was being read as $0000 so it would not start at all.
<br />
<br />-don't do any 16bit REP stuff before getting out of emulation mode.  Caused the LDA #$0000 to be treated as a BRK in snes9x debugger since it kept A in 8bit mode despite your REP:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">REP #$39&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clear carry and set 16-bit A<br />XCE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clear emulation mode flag<br />LDA.w #$0000&nbsp; &nbsp; &nbsp; ; set the direct page to $0000 </div><br /><br />-don't JSR or anything that requries stack space before setting up the stack with TCS<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JSR InitRAM&nbsp; &nbsp; &nbsp; ;<br />LDA.w #$0FFF&nbsp; &nbsp; &nbsp; ; set the stack to $0FFF<br />TCS</div><br /><br />-InitRAM trashed the stack as part of the RAM clear.  There was a return address and the contents pushed by PHP trashed with it so it crashed after the RTS.  It's been altered to clear all RAM except the $7E0F00-$7E0FFF region which is assumed to be stack space.<br /><br />-Pointing interrupts to RTS will crash when returning.  It must be an RTI instead.<br /><br />-ClearVRAM looks odd but it wouldn't crash anything.  You can point $4302-$4304 to a dedicated zero byte in ROM as I have used in InitRAM instead of storing a zero to RAM and using that.  The InitRAM original approach also used a hardcoded address that would not necessarily be zero if the code changed (like it just did).  A dedicated zero byte with its own label is more reliable.<br /><br />Without going into any of the other quirks, those changes got your green screen in snes9x and bsnes.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lorom<br /><br />;org $008000<br />;fillbyte $FF : fill $8000<br /><br />org $008000<br /><br />ResetSNES:<br /><br />SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; disable IRQ<br />CLC<br />XCE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clear emulation mode flag<br />REP #$30&nbsp; &nbsp; ;*do not try to load 16bit values in emulation mode<br />LDA.w #$0000&nbsp; &nbsp; &nbsp; ; set the direct page to $0000<br />TCD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />LDA.w #$0FFF&nbsp; &nbsp; &nbsp; ; set the stack to $0FFF<br />TCS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;*and do this BEFORE trying to call subroutines<br />JSR InitRAM&nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; ;<br />LDA.w #$008F&nbsp; &nbsp; &nbsp; ; force blank on, maximum brightness,<br />STA $2100&nbsp; &nbsp; &nbsp; ;<br />JSR Clear2100s&nbsp; &nbsp; &nbsp; ; clear registers $21xx<br />;JSR Clear4000s&nbsp; &nbsp; &nbsp; ; clear registers $40xx<br />JSR Clear4200s&nbsp; &nbsp; &nbsp; ; clear registers $42xx<br />SEP #$20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set 8-bit A<br />JSR ClearVRAM&nbsp; &nbsp; &nbsp; ; clear out the VRAM<br />JSR ClearPalette&nbsp; &nbsp; &nbsp; ; clear out the palette &#40;reset all colors to 0000&#41;<br />JSR InitVals&nbsp; &nbsp; &nbsp; ; initialize some registers to nonzero values<br />SEP #$10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set 8-bit XY<br />JSR SetRAMRoutines&nbsp; &nbsp; &nbsp; ;<br />JSR UploadSPCEngine&nbsp; &nbsp;;<br />JSR UploadSamples&nbsp; &nbsp; &nbsp; ;<br />JSR SetUpHDMA&nbsp; &nbsp; &nbsp; ;<br /><br />CLI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br /><br />STZ $2121&nbsp; &nbsp; &nbsp; ;<br />LDA #$EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />LDX #$3F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />STA $2122&nbsp; &nbsp; &nbsp; ;<br />STX $2122&nbsp; &nbsp; &nbsp; ;<br />LDA #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />STA $2100&nbsp; &nbsp; &nbsp; ;<br /><br />WAI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />BRA $FD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br /><br />;RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br /><br />Clear2100s:<br /><br />STZ $2101<br />STZ $2106<br />STZ $2108<br />STZ $210A<br />STZ $210C<br />STZ $210D<br />STZ $210D<br />STZ $210F<br />STZ $210F<br />STZ $2111<br />STZ $2111<br />STZ $2113<br />STZ $2113<br />STZ $2116<br />STZ $211A<br />STZ $2115<br />STZ $211C<br />STZ $211C<br />STZ $211E<br />STZ $211E<br />STZ $2120<br />STZ $2120<br />STZ $2123<br />STZ $2125<br />STZ $2127<br />STZ $2129<br />STZ $212B<br />STZ $212D<br />STZ $212F<br />STZ $2131<br />STZ $2133<br />RTS<br /><br />Clear4200s:<br /><br />STZ $4200<br />STZ $4202<br />STZ $4204<br />STZ $4206<br />STZ $4208<br />STZ $420A<br />STZ $420C<br />RTS<br /><br />InitVals:<br /><br />LDA #$03<br />STA $2101<br />LDA #$80<br />STA $2115<br />LDA #$01<br />STA $211B<br />LDA #$30<br />STA $2130<br />LDA #$E0<br />STA $2132<br />LDA #$FF<br />STA $4201<br />LDA #$01<br />STA $420D<br />RTS<br /><br />ClearVRAM:<br /><br />LDA #$80&nbsp; &nbsp; &nbsp; ;<br />STA $2115&nbsp; &nbsp;;<br />LDX #$1809&nbsp; &nbsp;;<br />STX $4300&nbsp; &nbsp;;<br />LDX.w #$0000&nbsp; &nbsp;;<br />STX $2116&nbsp; &nbsp;;<br />STX $00&nbsp; &nbsp; &nbsp; ;<br />STX $4302&nbsp; &nbsp;;<br />STZ $4304&nbsp; &nbsp;;<br />LDX #$FFFF&nbsp; &nbsp;;<br />STX $4305&nbsp; &nbsp;;<br />LDA #$01&nbsp; &nbsp; &nbsp; ;<br />STA $420B&nbsp; &nbsp;;<br />STZ $2119&nbsp; &nbsp;;<br /><br />STZ $2102&nbsp; &nbsp;;<br />STZ $2103&nbsp; &nbsp;;<br />LDX.w #$007F&nbsp; &nbsp;;<br />LDA #$F0&nbsp; &nbsp; &nbsp; ;<br />.Loop00x1&nbsp; &nbsp;;<br />STA $2104&nbsp; &nbsp;;<br />STA $2104&nbsp; &nbsp;;<br />STZ $2104&nbsp; &nbsp;;<br />STZ $2104&nbsp; &nbsp;;<br />DEX&nbsp; &nbsp; &nbsp; ;<br />BPL .Loop00x1&nbsp; &nbsp;;<br />LDX.w #$001F&nbsp; &nbsp;;<br />.Loop00x2&nbsp; &nbsp;;<br />STZ $2104&nbsp; &nbsp;;<br />DEX&nbsp; &nbsp; &nbsp; ;<br />BPL .Loop00x2&nbsp; &nbsp;;<br />RTS&nbsp; &nbsp; &nbsp; ;<br /><br />ClearPalette:<br /><br />STZ $2121&nbsp; &nbsp;;<br />LDX.w #$00FF&nbsp; &nbsp;;<br />.Loop00x3&nbsp; &nbsp;;<br />STZ $2122&nbsp; &nbsp;;<br />STZ $2122&nbsp; &nbsp;;<br />DEX&nbsp; &nbsp; &nbsp; ;<br />BPL .Loop00x3&nbsp; &nbsp;;<br />RTS&nbsp; &nbsp; &nbsp; ;<br /><br />InitRAM:<br />PHP&nbsp; &nbsp; &nbsp; ;<br />SEP #$20&nbsp; &nbsp; &nbsp; ;<br />STZ $2181&nbsp; &nbsp;;<br />STZ $2182&nbsp; &nbsp;;<br />STZ $2183&nbsp; &nbsp;;<br />LDX #$8008&nbsp; &nbsp;;<br />STX $4300&nbsp; &nbsp;;<br />STZ $4304&nbsp; &nbsp; &nbsp; &nbsp;;we're only ever in bank 00<br />LDX #.zeroByte&nbsp; &nbsp;;*dedicated zero byte<br />STX $4302&nbsp; &nbsp;;<br />LDX.w #$0F00&nbsp; &nbsp;;clear 7E0000-7E0EFF<br />STX $4305&nbsp; &nbsp;;<br />LDA #$01<br />STA $420B<br />LDX #$1000&nbsp; &nbsp; ;clear 7E1000-7EFFFF<br />STX $2181<br />LDX #$F000<br />STX $4305<br />LDA #$01<br />STA $420B<br />STA $2183&nbsp; &nbsp; ;bank $7F now<br />STA $420B&nbsp; &nbsp; ;*$4305 already has $0000 loaded into after a finished DMA so no need to set it here<br />PLP&nbsp; &nbsp; &nbsp;;<br />RTS&nbsp; &nbsp; &nbsp; ;<br />.zeroByte&nbsp; &nbsp; ;*dedicated zero byte<br />&nbsp; &nbsp; db 0<br /><br />SetRAMRoutines:<br />RTS<br /><br />UploadSPCEngine:<br />RTS<br /><br />UploadSamples:<br />RTS<br /><br />SetUpHDMA:<br />RTS<br /><br />;interrupts all go here, nothing happening there yet<br /><br />EmptyHandler:<br />RTI<br /><br />;native:<br />org $00FFE4&nbsp; &nbsp;;<br />dw EmptyHandler&nbsp; &nbsp; ;COP<br />dw EmptyHandler ;BRK<br />dw 0<br />dw EmptyHandler&nbsp; &nbsp; ;NMI<br />dw 0<br />dw EmptyHandler&nbsp; &nbsp; ;IRQ<br /><br />;emulation<br />org $FFFA<br />dw EmptyHandler&nbsp; &nbsp; ;NMI<br />dw ResetSNES&nbsp; &nbsp; ;*Reset<br />dw EmptyHandler&nbsp; &nbsp; ;IRQ/BRK</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Oct 18, 2010 1:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I recommend using an assembler that keeps track of the size of A and X&amp;Y so you don't have to remember to do LDA.W each time. Forget it and you'll get bugs that you might not find for a while. Once you have such an assembler (maybe this one supports this), I suggest keeping A 8 bits and X&amp;Y 16 bits most of the time. You often need to do 8-bit manipulation, so having A 8 bits makes this easy. Sometimes you need to do simple 16-bit operations, and X&amp;Y serve for this. Rarely you might need to switch A to 16 bits, but switch it back afterwards. This convention has worked well for me and avoided the problems with having to deal with different register sizes throughout code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Oct 19, 2010 7:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wish I used labels/defines when I wrote my "project SNES" engine.  It defeats the purpose because it was supposed to be an easy-to-pick-up engine, and I once again didn't make it readable enough.  Now I have to go back and fix it, and this will take forever to do.
<br />
<br />It's a good thing I'm labeling my software rotation code.  I think of sprite rotation being the pinacle of 2D graphical effects, and it will be awsome seeing it in everybody's homebrew games.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>