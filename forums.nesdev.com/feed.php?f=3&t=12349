<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=12349" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-02-08T03:29:59-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=12349</id>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2015-02-08T03:29:59-07:00</updated>
<published>2015-02-08T03:29:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140806#p140806</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140806#p140806"/>
<title type="html"><![CDATA[Re: Emulator MahNES with a different approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140806#p140806"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Then again, the typical modern L1 cache is probably big enough.<br /></div><br />On PCs or phones?</div><br />I was referring to PCs, but a lot of phones have sizable L1 caches as well.<br /><br />Intel Atom: 24k<br />Intel i7: 64k<br />ARM Cortex-A15: 64k (Galaxy S5)<br />Apple A8: 128k (iPhone 6)<br />ARM Cortex-A9 MPCore: 32k (Ouya)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Feb 08, 2015 3:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-07T16:37:32-07:00</updated>
<published>2015-02-07T16:37:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140762#p140762</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140762#p140762"/>
<title type="html"><![CDATA[Re: Emulator MahNES with a different approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140762#p140762"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />Then again, the typical modern L1 cache is probably big enough.<br /></div><br />On PCs or phones?<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />PocketNES processes code in very big batches. It's all fine as long as you get the timing of events correct.<br /></div><br />Are you referring to catch-up techniques like those described in <a href="http://wiki.nesdev.com/w/index.php/Catch-up" class="postlink">this wiki page</a>?<br /><br /><div class="quotetitle">HLorenzi wrote:</div><div class="quotecontent"><br />By the way, I was also thinking about a code profile viewer (for seeing hot paths in code, stack traces, etc.), but as an entertaining visual approach (like a zoomed-out view of code bytes as pixels colored by processing time, and arrows showing jumps and calls -- that could get messy). Also, a sound output viewer that showed notes' pitches, and possibly even displayed a dynamic music sheet.<br /></div><br />I'd be interested to see what you come up with.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Feb 07, 2015 4:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[HLorenzi]]></name></author>
<updated>2015-02-07T15:18:18-07:00</updated>
<published>2015-02-07T15:18:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140758#p140758</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140758#p140758"/>
<title type="html"><![CDATA[Re: Emulator MahNES with a different approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140758#p140758"><![CDATA[
Thanks, guys, but I think I wasn't clear enough. So the idea is not to make a fast emulator. By no means that. I tried to make it as precise, decoupled and customizable as possible (for where it stands now, anyways...). I was just trying to figure out whether those scanline.nes discrepancies come from -- whether it's my emulator's problem.<br /><br />By the way, I was also thinking about a code profile viewer (for seeing hot paths in code, stack traces, etc.), but as an entertaining visual approach (like a zoomed-out view of code bytes as pixels colored by processing time, and arrows showing jumps and calls -- that could get messy). Also, a sound output viewer that showed notes' pitches, and possibly even displayed a dynamic music sheet.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5342">HLorenzi</a> — Sat Feb 07, 2015 3:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2015-02-07T13:04:15-07:00</updated>
<published>2015-02-07T13:04:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140745#p140745</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140745#p140745"/>
<title type="html"><![CDATA[Re: Emulator MahNES with a different approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140745#p140745"><![CDATA[
PocketNES processes code in very big batches.  It's all fine as long as you get the timing of events correct.  The batches can be many scanlines long.  Sometimes the only event that the CPU has to stop for is the APU frame counter (about 4 times a frame).  Events include things like Sprite 0 coming up soon, estimated time of sprite 0 hit, render start, render end, vblank start, MMC3 IRQs, etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Feb 07, 2015 1:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2015-02-07T12:50:16-07:00</updated>
<published>2015-02-07T12:50:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140743#p140743</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140743#p140743"/>
<title type="html"><![CDATA[Re: Emulator MahNES with a different approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140743#p140743"><![CDATA[
CPU emulation typically requires a large amount of code that needs to be randomly accessed. I think this mitigates the ability to get a speed increase by processing cycles in &quot;batches&quot;. Then again, the typical modern L1 cache is probably big enough. PPU emulation probably has more potential to benefit from batching. The size of the batches matters a lot, too; if your batch size is, say, a scanline of 25 instructions, that's a lot different than if you can batch 1000 instructions.<br /><br />There are other ways to approach emulator optimization than just this, though.<br /><br />Don't presume that inaccuracy has anything to do with batch optimization, though. They are separate issues. FCEUX's PPU inaccuracies have a lot more to do with age and legacy than anything else.<br /><br />I don't know which emulators take what approach, but what are you using to measure performance? I notice a pretty significant difference in performance between Nintendulator (for which accuracy is the primary goal) and FCEUX.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sat Feb 07, 2015 12:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[HLorenzi]]></name></author>
<updated>2015-02-07T12:05:23-07:00</updated>
<published>2015-02-07T12:05:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140741#p140741</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140741#p140741"/>
<title type="html"><![CDATA[Emulator MahNES with a different approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12349&amp;p=140741#p140741"><![CDATA[
I've rewritten my emulator from scratch, keeping decoupling patterns in mind. Every part of the emulator is isolated and needs the caller to set up callback/hook functions for them to communicate. Not only that, I've also tried other approaches to emulation, namely:<br /><br /><ul>- The CPU is emulated for every clock tick. Instead of emulating instructions instantly and sleeping on clock timings, I've mimicked the real hardware and emulated every instruction cycle. So, memory reads and writes fall exactly on the clock they're supposed to. I was expecting this to be slow and not cache-friendly, but on my system, it eats just as much CPU time as any other emulators.<br /><br />- The PPU also runs for every clock tick. No batch-running only when state changes. The PPU alternates execution with the CPU at precise clock timings. Again, this kind of emulation eats just as much CPU time as any other, on my system.<br /><br />- Also, mappers are also isolated with hook functions, and they mimic real cartridges' pinout. There's the CIRAM Enable and Mirror pins, and they may also receive CPU/PPU reads and writes.</ul><br />While I've only implemented basic features (no undocumented opcodes, immediate interrupt handling, basic PPU emulation, the same old bad APU emulator), it seems pretty solid. It seems to run tests like <a href="https://dl.dropboxusercontent.com/u/22954866/scanline.nes" class="postlink">scanline.nes</a> more precisely than Nintendulator or FCEUX, for instance. Of course, it could be that either that MY emulator is the wrong one, that the test is broken, or that these emulators just don't care about precise things like that. Well, does anyone happen to know which is the case? <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> <br /><br />Has there been any other emulator projects using precise instruction/PPU timing like this?<br /><br />Here's a <a href="https://dl.dropboxusercontent.com/u/22954866/MahNES_Test.zip" class="postlink">Windows build</a>.<br />It will immediately open a file prompt to select a ROM. Press the Letter O key to select another ROM. Controls are Arrow keys = D-Pad, Space = A Button, X = B Button, Enter = Start Button, Ctrl = Select Button. Only working mappers are 0x0 and 0x2 (NROM and UxROM). Some games still freeze for unknown reasons.<br /><br />Also, here's a peek at the <a href="https://dl.dropboxusercontent.com/u/22954866/emul_cpu.cpp" class="postlink">CPU source file</a>. You can see a big switch block taking the instruction cycle as parameter (line 186). Then, for every case, there's another switch taking the instruction addressing mode as parameter (e.g., line 213). When it is the final cycle for an instruction, it branches to yet another switch which handles specific opcode behavior (e.g., line 490 and beyond).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5342">HLorenzi</a> — Sat Feb 07, 2015 12:05 pm</p><hr />
]]></content>
</entry>
</feed>