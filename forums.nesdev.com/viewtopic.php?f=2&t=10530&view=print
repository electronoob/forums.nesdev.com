<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Addressing a two byte memory location with the registers</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Addressing a two byte memory location with the registers</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10530">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10530</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Sep 24, 2013 3:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How can I address a two byte memory location with the help of the registers?<br />Let's say I want to write the value $AA into the memory from address $0200 to $04FF. I would write the following loop. But in the line with the command STA, how do I correctly concatenate the two address values or what else do I have to do here?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA #$AA&nbsp; ; The value that is written.<br />&nbsp; LDY #$02&nbsp; ; Counter for the outer loop.<br />&nbsp; LDX #$00&nbsp; ; Counter for the inner loop.<br /><br />Loop:<br /><br />&nbsp; STA (Y &lt;&lt; 8) + X&nbsp; ; What's the correct syntax here?<br />&nbsp; INX<br />&nbsp; BNE Loop<br /><br />&nbsp; INY<br />&nbsp; CPY #$05<br />&nbsp; BNE Loop</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 24, 2013 4:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your best choice for indexing into arrays bigger than 256 bytes is to put the address on zero page and use the (d),Y addressing mode.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 24, 2013 7:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In this particular case, these fixes will do what you want:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$AA&nbsp; ; The value that is written.<br />LDX #$02&nbsp; ; Counter for the outer loop.<br />LDY #$00&nbsp; ; Counter for the inner loop.<br />STX Pointer+1<br />STY Pointer+0<br /><br />Loop:<br /><br />STA (Pointer), Y<br />INY<br />BNE Loop<br /><br />INX<br />STX Pointer+1<br />CPX #$05<br />BNE Loop</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Sep 24, 2013 2:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Note that said code will fail if the low 8 bits of the starting address aren't 0, and the low 8 bits of the ending address aren't $FF. The wiki covers  the <a href="http://wiki.nesdev.com/w/index.php/Scanning_large_tables" class="postlink">more general approach between any two addresses</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 24, 2013 3:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Note that said code will fail if the low 8 bits of the starting address aren't 0, and the low 8 bits of the ending address aren't $FF.</div><br />Which is why I said &quot;in this particular case&quot;. =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Thu Sep 26, 2013 1:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I of course need a general solution that works always. Because the next thing I want to do is writing some functions for loading data. And the one thing that breaks my neck is the addressing. For example, when I want to load sprite data, then it's pretty easy:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDX #$00<br />@Loop:<br />&nbsp; LDA Sprites, X<br />&nbsp; STA $0200, X<br />&nbsp; INX<br />&nbsp; CPX #$20<br />&nbsp; BNE @Loop</div><br />At least as long as &quot;Sprites&quot; is a constant location. But as soon as I want to be able to parametrize this code and make it a sub routinge, the problems begin. Even if I don't work with the stack and whatever and simply put the data length value (#$20) into a global variable, I still don't know how to deal with the starting location in memory which is two bytes.<br />Besides, could anybody please explain me what's the deal with using &lt; and &gt; in assembly code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Thu Sep 26, 2013 2:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sprites is always in a constant area, it is assembled and assigned a value.<br /><br />If you write one set of sprites initially, then yes it will work fine. But if you have to select the sprites you want to use per level or something, loading from sprites, which points to one 2 byte location, will ALWAYS point to that location! It will not change.<br /><br />To dynamically load sprites, levels, or basically any data based on a number, you either 1. Need to build a pointer table. 2. Use math based on the number and multiply based on the base value. Let's assume we have 4 screens, screen 0 to 3. You want to load one each different level, you would have this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Screen0:<br />(1KB of data)<br />Screen1:<br />(1KB of data)<br />Screen2:<br />(1KB of data)<br />Screen3:<br />(1KB of data)<br /></div><br /><br />if your code uses Screen0 to move it, it will ALWAYS point to the same screen. Here is some code to get around it:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ScreenPointersHigh:<br />&nbsp; .db HIGH(Screen0),HIGH(Screen1),HIGH(Screen2),HIGH(Screen3)<br /><br />ScreenPointersLow:<br />&nbsp; .db LOW(Screen0),LOW(Screen1),LOW(Screen2),LOW(Screen3)<br /></div><br /><br />what this does, is let us use objectified code like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//Code expects X to be the value of the nametable we are uploading.<br />&nbsp; LoadScreen:<br />&nbsp; LDA ScreensHigh,X //Load high pointer.<br />&nbsp; STA Pointer+1 //Pointer is a ZP value.<br />&nbsp; LDA ScreensLow //Load low pointer.<br />&nbsp; STA Pointer //Store low pointer value, so the zeropage variable Pointer points to the first byte of the nametable.<br />&nbsp; LDY #$00<br />&nbsp; LDX #$03<br />&nbsp; -Set the PPU pointer to $2000 here-<br />@Loop:<br />&nbsp; LDA &#91;Pointer&#93;,Y //Load the location the pointer points to+Y<br />&nbsp; STA $2007 //Store to PPU.<br />&nbsp; INY //Y=Y+1<br />&nbsp; BNE @Loop //Loop around if 0.<br />&nbsp; INC Pointer+1 //Make it point to the next 256 byte block by increment the high byte of the pointer.<br />&nbsp; DEX //Since 0, test if this was the last round of 256 bytes we need to do by subtracting 1 from X.<br />&nbsp; BPL @Loop //If not 4 times, loop again.<br />&nbsp; RTS //Subroutine is done.<br /></div><br /><br />If you need objectifying explained more, or any questions here, just PM or ask. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Sep 26, 2013 2:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">But as soon as I want to be able to parametrize this code and make it a sub routinge, the problems begin. Even if I don't work with the stack and whatever and simply put the data length value (#$20) into a global variable, I still don't know how to deal with the starting location in memory which is two bytes.</div><br />The routine is so short it can be made a macro. If it were a parameterized subroutine, it'd take 7-9 bytes to call, whereas the loop itself can be an inline macro and only need 11 bytes:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro SMALL_COPY src,dest,count<br />.if count &gt; 128<br />&nbsp; &nbsp; .error Can't copy more than 128 bytes<br />.endif<br />&nbsp; .local @Loop<br />&nbsp; LDX #count-1<br />@Loop:<br />&nbsp; LDA src, X<br />&nbsp; STA dest, X<br />&nbsp; DEX<br />&nbsp; BPL @Loop<br />.endmacro</div><br />&lt;addr gives the low 8 bits of addr, &gt;addr gives the next higher 8 bits. If you code in C, &lt;addr is the equivalent of addr&amp;0xFF, and &gt;addr is addr&gt;&gt;8&amp;0xFF.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Thu Sep 26, 2013 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">Sprites is always in a constant area, it is assembled and assigned a value.</div><br />Yes, the actual sprites are in a constant area. I'm talking about my read only data that simply gives the information which sprites are to be loaded next. Imagine this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SpritesLevel1:<br />&nbsp; .byte $03<br />&nbsp; .byte $01<br />&nbsp; .byte $05<br />&nbsp; .byte $02<br />&nbsp; .byte $FF</div><br />This code tells you that level 1 will contain three Goombas (ID 1) and 5 Koopa Troopas (ID 2). And that's it. ($FF is the constant for end of data.) Another function that contains some logic would then build the actual on-screen sprites from that abstract data.<br />Level 4 would then maybe look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SpritesLevel4:<br />&nbsp; .byte $01<br />&nbsp; .byte $01 ; Goomba<br />&nbsp; .byte $10<br />&nbsp; .byte $02 ; Koopa Troopa<br />&nbsp; .byte $02<br />&nbsp; .byte $05 ; Lakitu<br />&nbsp; .byte $04<br />&nbsp; .byte $06 ; Hammer brother<br />&nbsp; .byte $01<br />&nbsp; .byte $0F ; Bowser<br />&nbsp; .byte $FF</div><br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">To dynamically load sprites, levels, or basically any data based on a number, you either 1. Need to build a pointer table.</div><br />Sounds good. How do I do this in 6502 Assembly, specifically for my example loop?<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">2. Use math based on the number and multiply based on the base value.</div><br />Doesn't sound so good. As you see above, there's no guarantee that data will have a fixed length. Besides, the same function shall be used for various unrelated data sections. So, any solution based on a fixed memory location of the data won't work in the long run.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The routine is so short it can be made a macro. If it were a parameterized subroutine, it'd take 7-9 bytes to call, whereas the loop itself can be an inline macro and only need 11 bytes:</div><br />Yeah, but if I want to call it various times (four times alone for background, sprites, palettes and attributes which would already make 44 bytes), it can get relatively very big.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">&lt;addr gives the low 8 bits of addr, &gt;addr gives the next higher 8 bits. If you code in C, &lt;addr is the equivalent of addr&amp;0xFF, and &gt;addr is addr&gt;&gt;8&amp;0xFF.</div><br />If there's a way to take 8 bits from a 16 bit address, isn't there also a way to store two eight bit values next to each other and let the program treat it as a 16 bit address value?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Thu Sep 26, 2013 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent"><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">2. Use math based on the number and multiply based on the base value.</div><br />Doesn't sound so good. As you see above, there's no guarantee that data will have a fixed length. Besides, the same function shall be used for various unrelated data sections. So, any solution based on a fixed memory location of the data won't work in the long run.<br /></div><br /><br />Yeah, but math is more efficient+saves space, it's always the #1 option really, unless your data is like levels or maps, which has no set structure except a decompression stream. The code above is how you do that, the 1KB levels don't HAVE to be 1KB, because of the fact that we don't touch the level's data, we us the lookup pointer table which is changed every time it is assembled, so no matter the size, the pointer table will point to the data, that's it. It's like an array of pointers in C, in essence. See the above code, like I said, the table has to be added and the code written will take advantage of it, in 1KB chunks, but you just have to understand the idea, all the code will need rewritten for your needs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Sep 26, 2013 3:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">&lt;addr gives the low 8 bits of addr, &gt;addr gives the next higher 8 bits. If you code in C, &lt;addr is the equivalent of addr&amp;0xFF, and &gt;addr is addr&gt;&gt;8&amp;0xFF.</div><br />If there's a way to take 8 bits from a 16 bit address, isn't there also a way to store two eight bit values next to each other and let the program treat it as a 16 bit address value?</div><br />Yes, pointers. If you store the high byte after the low byte in ZP you can use them as a 16-bit pointer. You're limited to the addressing modes that work with pointers though.<br /><br />&lt; and &gt; are provided by the assembler, the 6502 doesn't know you're taking parts of a 16-bit value. When you do <strong>LDA #&gt;$FFEE</strong>, what the 6502 sees is <strong>LDA #$EE</strong>. The 6502 is an 8-bit CPU that unlike some other 8-bit CPUs (Z80, for example) doesn't have 16-bit registers available to the program. Because of this, 16-bit values can only exist in memory (RAM or ROM), and must be manipulated byte by byte. The only way to address more then 256 bytes is with pointers, there's no way around that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Sep 26, 2013 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Pointers in 6502, concisely:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">addr = 0 ; 0 &lt;= addr &lt;= $FE<br /><br />LDA #&lt;$1234 ; LDA #$34<br />STA addr<br />LDA #&gt;$1234 ; LDA #$12<br />STA addr+1<br /><br />LDY #$10<br />LDA (addr),Y&nbsp; ; LDA $1244</div><br /><br />EDIT: whoops, &lt; before $

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Oct 01, 2013 1:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing a two byte memory location with the registers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess I understand that example now. In the moment I work with the standard neslib from CC65, so that's not an issue anymore, but when I remove it and write all the code myself, I guess I'll need it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>