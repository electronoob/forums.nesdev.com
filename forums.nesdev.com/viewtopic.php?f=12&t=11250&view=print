<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SNES controller code to work properly.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SNES controller code to work properly.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11250">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11250</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Fri May 16, 2014 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey been having a bitch of a time trying to understand what's up with code for interacting with the controllers on the SNES. I've read bazz's tutorial (<!-- m --><a class="postlink" href="http://wiki.superfamicom.org/snes/show/Polling+Controller+Input">http://wiki.superfamicom.org/snes/show/ ... ller+Input</a><!-- m -->) and the SNES Developer Manual which has some similar sample code.<br /><br />The issue I am having is that the code seems to react slowly on the real hardware. I've separated out saving the value of the control registers during the vblank and then reacting to the button presses (only changing the bg color). It seems to work okay if I only poll one of the control registers ($4218 or $4219), but when I have more than one button from both control registers it starts to get weird.<br /><br />The current on is trying to assign a different background color for L trigger, R trigger, R and L (on the d-pad). <br /><br />I'm assuming it is the timing of the interrupts, but I am also experiencing different results in BSNES/ZSNES/SNES9x/the real hardware (via Power Pak)...

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=1535">joypad__bgColor.zip</a> [6.16 KiB]
			</span><br />
			<span class="gensmall">Downloaded 20 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat May 17, 2014 12:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Problems I see with this code:<br /><br />1. EDIT: I misread which register you were reading (re: criticising polling of $4212), sorry about that.  I'll leave my other comments though:<br /><br />The SNES, like many consoles, supports the ability to run some 65816 code when VBlank begins.  This is accomplished by setting the NMI vector to some code (which you've done), and then (outside of NMI of course) setting bit #7 of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$4200</tt> to 1, which you do.  This &quot;ties together&quot; NMI execution when VBlank happens.<br /><br />VBlank is the period when the electron gun is moving from the bottom of the screen (i.e. an entire screen has just been drawn, down to the last line/pixel, and is now resetting back up to the top to start drawing again).<br /><br />Within your NMI routine (thus within VBlank) is where you should be doing updates to things like the background scroll registers (if panning around), CGRAM (palette) updates, and (of course) reading the joypad registers (storing the values in some area of RAM (ex. direct page) for use OUTSIDE of NMI).<br /><br />If you need help understanding what a &quot;proper&quot; flow diagram should be, take a look at the SNES developers manual, specifically Chapter 23.  Yes it's many pages, but if you print them out or review them slowly, you'll understand what you should be doing inside of NMI vs. outside of NMI.  Although there's some stuff in there that's silly (IMO), like how it recommends re-setting &quot;enable NMI&quot; and some other stuff in your main routine constantly.<br /><br />Remember: you have more CPU time outside of NMI than you do within NMI, but certain things should be done within NMI (with as minimal processing as possible) to ensure &quot;proper visual updates&quot; every frame.  If you start having to do VRAM updates outside of NMI, you need to make sure (through software/logic, and it can be painful) that you're not changing something that you expect to be reflected somewhere above (i.e. before) where the electron gun has already been -- cuz they won't show up until after the next VBlank.  Otherwise what you could end up with is a &quot;mid-scanline&quot; type-of effect, where, say, half the screen is blue and half the screen is green (if transitioning from blue-&gt;green) for a single frame.<br /><br />That said: if you want your main (non-NMI) routine to wait for NMI (thus VBlank) to fire: use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">wai</tt>.  That's mentioned in the tutorial but I don't see it in your code.<br /><br />Hope this makes sense.  :-)<br /><br />2. Your NMI joypad reading routine makes absolutely no sense to me.  I can't even figure out what the heck you're doing with all these <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">__c</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">__p</tt> variables (EDIT: I guess they stand for &quot;current&quot; and &quot;previous&quot;).  All you need to be doing is doing a 16-bit read from <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$4218</tt> (controller #0), which will get you the &quot;condition&quot; (status) of all the buttons/directions being held at that moment in time (happening 60 times a second, remember -- it's in NMI), and store that result as I said above.<br /><br />Then in your main loop, if you want to see if L or R (the top L/R buttons, not directional) is pressed, you simply look at the RAM contents (again, 16-bit), do a single <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bit</tt> against the bits you want (ex. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bit #$0001</tt> for R, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bit #$0002</tt> for L), and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bne</tt> to some code that handles the situation where the button is pressed.<br /><br />Alternately, and this is a time-wasting thing to do in NMI (IMO), but you can do an unrolled loop that stores into an individual RAM address the status of each individual button; it's easy using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda/sta/lsr/sta/lsr/sta/lsr/sta</tt>... but it's wasteful.  The method I mentioned above is easiest, especially if you end up wanting to do something like &quot;do thing X when person is holding up, but do thing X and Y when person is holding up + A&quot;.<br /><br />TL;DR -- I don't understand the purpose behind your ldy/lda/sta/tya/eor/and/sta nonsense.  Just do the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda $4212/and #$01/bne</tt> loop, read your registers, store them in RAM, do your VRAM/CGRAM/etc. updates, and get outta there.<br /><br />EDIT: I took a look at the &quot;tutorial&quot; -- now I see what's going on there.  Meh, I don't think all that logic is necessarily needed for what you're trying to do, meaning you don't need to do anything if someone releases a button -- all you want to know is if a button is being held and if so do something (ex. increment a colour value if L is being held, otherwise don't increment/do anything).<br /><br />You should also be doing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">php/pha/phy</tt> at the start, and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ply/pla/plp</tt> before the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rti</tt>, because register sizes and contents don't get saved going in/out of NMI.  (Add <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">phx/plx</tt> in there if you end up using X of course)  Part of me wonders if lack of register saving (including P/register sizes) is the cause of some unexpected behaviour.<br /><br />3. Talking about your CGRAM updates (specifically adjusting <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$2121</tt> then <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$2122</tt> to change colour): you should be doing the actual <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$2121</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$2122</tt> value writes within NMI, because you want to change VRAM (if at all possible) contents during NMI (before the electron gun, thus PPU, has a chance to start reading from things / drawing to the screen).<br /><br />The way to do this is that in your main loop, when someone presses a button (L, R, etc.), set some flags in some RAM (ex. direct page) locations to indicate &quot;L was pressed&quot;.  Then in your NMI routine, check if L was pressed (simple <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda/beq</tt> if you use a single boolean-like variable, e.g. value of 0 or 1, or just go for the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda/bit/bne</tt> (or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">beq</tt> to negate the compare of course)), and if so then you change the palette/colour/whatever.<br /><br />I admit flat out I have not looked at your full main/non-NMI routine to figure out what all you're doing (for example I have no idea what this magical <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">cmp #$56be</tt> is about).  You're probably trying to do some &quot;special range checking&quot; on your R/G/B values.<br /><br />4. Speculative: you may be &quot;screwing around&quot; too long in your main (non-NMI) loop and screwing things up.  You are literally changing CGRAM while the electron gun draws, which based on timing could have some problems depending on how long things take.  Again: this is speculative.<br /><br />If you want some other example code to look at, you can download my old SNES docs (sndoc230.zip) and within that file is another file called test.zip which contains source code to a small demo/intro-like thing I wrote many years ago.  It's commented (albeit badly and I think in one spot there's a mistake), but it's more linear and should help you understand how/when to poll the joypad, when to do graphical updates (although the code just does panning), and that sort of thing.  No, it's not code I'm &quot;proud&quot; of per se, but I wrote it 21 years ago (I was 16 at the time), and I think it's an okay starting point.<br /><br />P.S. -- It makes me happy to see people hacking on and learning the SNES/SFC in this day and age.  I still think it's one of the easier 2D consoles to program for (all the &quot;complex annoying stuff&quot; of the NES/FC and 6502 were rectified more or less, so I find it easier to understand/work on.  Emulator authors, however, get the shit end of the stick... :/ ).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DoNotWant</b> [ Sat May 17, 2014 3:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">EDIT: I took a look at the &quot;tutorial&quot; -- now I see what's going on there.  Meh, I don't think all that logic is necessarily needed for what you're trying to do, meaning you don't need to do anything if someone releases a button -- all you want to know is if a button is being held and if so do something (ex. increment a colour value if L is being held, otherwise don't increment/do anything).<br /></div><br />What is wrong with it? It is very annoying if e.g. you are in a menu and have to lightly tap the buttons unless you want the cursor to blast through half the menu, or in games like MMX you usually don't want the users to be able to just hold a button to shoot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Sat May 17, 2014 9:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey guys thanks for the replies!<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">2. Your NMI joypad reading routine makes absolutely no sense to me. </div><br />Hey lol sorry, I made this post after a few days frustration and confusion. Usually I over-comment my code. The way the sequence of checks works after going through it line by line (in other examples), is to get anything that has changed since the previous button press (EOR will make any sequence of 0 --&gt; 1 or 1--&gt; 0 result in a 1). Then it filters out any &quot;presses&quot; with the AND(p was supposed to be previous but I changed it stand for &quot;pressed&quot;, I think I left the old comments, my bad). <br /><br />This is technically overkill for this example, but I'd like to be able to do most of the &quot;common&quot; controller stuff with a more sophisticated example at some point: press, release, hold/charge, tap, and sequences of buttons (hadouken, etc).<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">You should also be doing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">php/pha/phy</tt> at the start, and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ply/pla/plp</tt> before the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rti</tt>, because register sizes and contents don't get saved going in/out of NMI.  (Add <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">phx/plx</tt> in there if you end up using X of course)  Part of me wonders if lack of register saving (including P/register sizes) is the cause of some unexpected behaviour.<br /></div><br />forgot about this. I will check if this effects things<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I admit flat out I have not looked at your full main/non-NMI routine to figure out what all you're doing (for example I have no idea what this magical <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">cmp #$56be</tt> is about).  You're probably trying to do some &quot;special range checking&quot; on your R/G/B values.<br /></div><br />those were to check if the background already was the color specified by that button, to avoid multiple checks of the same button, I thought that was maybe the case based on what I was experiencing with bsnes.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">4. Speculative: you may be &quot;screwing around&quot; too long in your main (non-NMI) loop and screwing things up.  You are literally changing CGRAM while the electron gun draws, which based on timing could have some problems depending on how long things take.  Again: this is speculative. </div><br />possible, I did a working example a while ago where I just made the background change colors in a rainbow fashion. I looked back, I was in fact WAI'ing<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">If you want some other example code to look at, you can download my old SNES docs (sndoc230.zip)</div><br />thanks! just found it.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">P.S. -- It makes me happy to see people hacking on and learning the SNES/SFC in this day and age.  I still think it's one of the easier 2D consoles to program for (all the &quot;complex annoying stuff&quot; of the NES/FC and 6502 were rectified more or less, so I find it easier to understand/work on.  Emulator authors, however, get the shit end of the stick... :/ ).</div><br /><br />Yeah! I wish I had a tad more EE/CS knowledge (I went to art school and did some programming-y stuff and then just read some books). Seeing the cool homebrew stuff that is happening keeps me from getting too frustrated. I think the SNES/SFC are about two steps away from a big resurgence in terms of hacking and homebrew, it's just the tools are not all the way there yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DoNotWant</b> [ Sat May 17, 2014 10:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm slowly learning SNES programming as well, and have been looking at the same tutorials as you have.<br />Here are 2 simple programs, if you want to have a look. Written for bass v14 by byuu.<br />The scrolling one have some dodgy clamping, but it was mostly just to see if I could scroll the screen at all.<br /><!-- m --><a class="postlink" href="https://www.dropbox.com/s/epr3nliq0v7pxsb/Sprite%283%29.rar">https://www.dropbox.com/s/epr3nliq0v7px ... 283%29.rar</a><!-- m --><br /><!-- m --><a class="postlink" href="https://www.dropbox.com/s/v93oz8dba7he0ma/Controller%282%29.rar">https://www.dropbox.com/s/v93oz8dba7he0 ... 282%29.rar</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat May 17, 2014 2:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DoNotWant wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">EDIT: I took a look at the &quot;tutorial&quot; -- now I see what's going on there.  Meh, I don't think all that logic is necessarily needed for what you're trying to do, meaning you don't need to do anything if someone releases a button -- all you want to know is if a button is being held and if so do something (ex. increment a colour value if L is being held, otherwise don't increment/do anything).<br /></div><br />What is wrong with it? It is very annoying if e.g. you are in a menu and have to lightly tap the buttons unless you want the cursor to blast through half the menu, or in games like MMX you usually don't want the users to be able to just hold a button to shoot.</div><br />Using your two examples:<br /><br />1. &quot;Blasting through half the menu&quot; (ex. by holding Down) is addressed by using delays (usually waiting for VBlank N times) in your main routine.  The necessary logic for menuing systems do not need to know &quot;if you previously had the button held down or released it&quot;, all they need to know is &quot;is the button being held down right now&quot;.  In other words: you don't need to know if there was a state change for the Down button between the last frame and the current frame.  My test.zip demo is an example of this (using VBlank delays but still having smooth 60fps background panning, while only checking the current state of the button).<br /><br />2. MMX means Megaman X I assume, and what you're referring to (again assuming) is where Megaman can either shoot his weapon or if you hold down the fire button it charges up over time and then is fired when the button is released.  In this case yes, you need to keep some kind of historic data laying around so you can know whether or not the button was simply tapped (standard fire) or is being held down for more than N frames (to start the powering-up of the weapon) and finally released after N frames (to release the powered-up weapon).<br /><br />Fighting games with combos or timing-sensitive moves are another type which require a kind of &quot;log&quot; of button presses -- I've always wondered how those games (ex. Street Fighter II) actually implemented their joypad routines *and* their logic path (outside of NMI) to handle insane button combinations combined with frame timing.  I bet someone somewhere has done a write-up of it and I bet it's scary.  :-)  But you gotta remember there's also delays that have to be considered (not waiting for VBlank but just overall timing delays), since per-frame analysis is going to be faster than a human being can actually push buttons.<br /><br />My point here is that what the OP is doing in this particular case doesn't really warrant needing to track previous button states and compare current vs. previous.  If he plans on adding something where tapping vs. holding a button is needed, then yeah, keeping a &quot;log&quot; of button presses (possibly just current vs. previous is enough, but then again maybe not, we don't know right now!) is the way to go.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DoNotWant</b> [ Sat May 17, 2014 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, mega man x.<br /><br />Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat May 17, 2014 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">1. &quot;Blasting through half the menu&quot; (ex. by holding Down) is addressed by using delays (usually waiting for VBlank N times) in your main routine.  The necessary logic for menuing systems do not need to know &quot;if you previously had the button held down or released it&quot;, all they need to know is &quot;is the button being held down right now&quot;.</div><br />Let's say a game's menu samples the controller every 15 frames, triggering an action for each period during which the button was pressed. Sometimes I hold down the button 14 frames and get no actions. Sometimes I hold the button down 16 frames and get two actions. A lot of low-quality falling block games that I've played have logic like this. The way well-tuned games work in practice is to keep one previous frame of data. This way, every time I press down, I get an action. Autorepeat, like you see when you reply to a post and hold down a letter or arrow key, needs two extra historical values: the button that was held and how long it was held. The controller reading code (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">pads.s</tt>) in <a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=7991" class="postlink">my NES project template</a> has an example of how to do this on the NES; the Super NES isn't much different.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In other words: you don't need to know if there was a state change for the Down button between the last frame and the current frame.  My test.zip demo is an example of this (using VBlank delays but still having smooth 60fps background panning, while only checking the current state of the button).</div><br />But how easily can you scroll to an individual pixel position? I imagine it'd take a lot of back and forth to get it aligned just so.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Fighting games with combos or timing-sensitive moves are another type which require a kind of &quot;log&quot; of button presses -- I've always wondered how those games (ex. Street Fighter II) actually implemented their joypad routines *and* their logic path (outside of NMI) to handle insane button combinations combined with frame timing.  I bet someone somewhere has done a write-up of it and I bet it's scary.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /></div><br />Charge attacks like Guile's Sonic Boom are essentially the same logic as autorepeat: store how long the player has pressed back or down. Key combo attacks are a ring buffer of (which key, what frame) pairs, which allows for logic like this:<br /><ul><li>If the last four keys were forward, down, forward, punch, and the oldest of these four was no less recent than 15 frames ago: do a leaping uppercut </li><li>If the last three keys were down, forward, punch, and the oldest of these three was no less recent than 15 frames ago: throw a fireball </li><li>If the last three keys were down, back, kick, and the oldest of these three was no less recent than 15 frames ago: do a spinning scissor kick </li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Sat May 17, 2014 3:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DoNotWant wrote:</div><div class="quotecontent">I'm slowly learning SNES programming as well...if you want to have a look. Written for bass v14 by byuu.<br /></div><br /><br />These look tight, the syntax for bass is a bit arcane to me at the moment though. byuu hangs out in these forums right? Does bass support spc700 code as well? Bass appeals to me for being actively worked on and because he also does bsnes/higan. I also came across that dude lint's stuff (he made that snes version of Kung Fu) and looks like he uses an assembler from WDC (who makes the 65816)...I've been considering a switch from wla, but I think I am going to get my assembly game up first.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">My point here is that what the OP is doing in this particular case doesn't really warrant needing to track previous button states and compare current vs. previous.  If he plans on adding something where tapping vs. holding a button is needed, then yeah, keeping a &quot;log&quot; of button presses (possibly just current vs. previous is enough, but then again maybe not, we don't know right now!) is the way to go.</div><br /><br />I am currently learning the controller stuff to add something in for learning sound coincidentally, but my end goal is to eventually add in sprites and do something like the control test of the SNES Test Program (graphic of a controller) + the control buffer in Chou Aniki. It's not useful now to have the previous states and stuff but will be at some point.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat May 17, 2014 3:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Blargg made <a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10730" class="postlink">macro packs to support SPC700 in ca65</a>, both with Sony syntax and with MOS/WDC syntax.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat May 17, 2014 4:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In other words: you don't need to know if there was a state change for the Down button between the last frame and the current frame.  My test.zip demo is an example of this (using VBlank delays but still having smooth 60fps background panning, while only checking the current state of the button).</div><br />But how easily can you scroll to an individual pixel position? I imagine it'd take a lot of back and forth to get it aligned just so.<br /></div><br />With regards to background/screen panning?  It's easy -- you can track the X/Y coordinates (probably the &quot;upper left corner&quot;) yourself.  But if you mean something like: &quot;the BG is already at 45,189 and you want it so when the player taps Up it automatically/smoothly pans to 45,0&quot; or maybe even &quot;...when the player taps Up it pans a little but, but as they hold Up longer the panning speed increases&quot;, then yeah that's a bit trickier.  That's all done with mathematics at the software level, and while I've only written code like that one in my life (not for the SNES/SFC, but the IIGS, and how to make some graphics move in sine-wave pattern that resembles waves) and I remember having a lot of difficulty wrapping my brain around it (I needed a lot of help from the other guy in our group).<br /><br />The technical stuff: the BG offset registers (ex. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$210d / $210e</tt> for BG1) literally accept a raw 10-bit unsigned value of 0-1023 (written via two 8-bit writes) to represent their H/V scroll offset (or a 13-bit signed value of -4096 to 4095 for MODE 7).  Interlaced modes and pseudo-512 change this a little bit (I haven't used those though, nor have I done MODE 7).  Check out page A-10 in the developers manual for a visual representation of how it works (or A-11 for MODE 7); Nintendo could have done a better job with their diagram though, part of it is confusing as hell.<br /><br />Screen panning is the one thing that has always impressed the hell out of me on video game consoles -- the premise of a memory-mapped register that just &quot;pans the screen&quot; and when done right its smooth as a baby's butt.  The Amiga did a lot of this too (no idea how it works).  I guess my interest stems from the fact that the IIGS had absolutely nothing like this, so the concept of smoothly panning around a background (especially with the SNES/SFC and its multiple backgrounds) was mindblowing.  There's lots of features on the SNES/SFC that make me drool; that's one of them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kannagi</b> [ Sat May 17, 2014 5:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />there with very good response.<br />I do not think it is a good idea to make a loop in the vblank <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; v_blank:<br />&nbsp; &nbsp; ;---------------------------------------------------------------<br />&nbsp; &nbsp; ;wait for joypad to be ready (during VBlank)<br />&nbsp; &nbsp; lda $4212<br />&nbsp; &nbsp; and #$01<br />&nbsp; &nbsp; bne v_blank</div><br /><br />If not for my part, I make a simple code in the game loop: <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda $4219&nbsp; &nbsp;; read joypad 1 High<br />&nbsp; &nbsp;&nbsp; &nbsp;AND #$08<br />&nbsp; &nbsp;&nbsp; &nbsp;cmp #$08<br />&nbsp; &nbsp;&nbsp; &nbsp;bne +<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;code<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;+:</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun May 18, 2014 9:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I like how somebody actually said the SNES is easy.  Once you get the basics the work such as the interrupts, joypads and oam, it becomes a lot more straightforward.  DMA animation became easier when I found out it was actually faster to use  a table of DMA transfers than to use an unrolled loop updating 16x16 tile patterns individually.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Sun May 18, 2014 9:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I like how somebody actually said the SNES is easy.  Once you get the basics the work such as the interrupts, joypads and oam, it becomes a lot more straightforward.  DMA animation became easier when I found out it was actually faster to use  a table of DMA transfers than to use an unrolled loop updating 16x16 tile patterns individually.</div><br /><br />Yeah I kind of came to the realization that it's not unlike flash/jQuery/openFrameworks which are essentially just a bunch of objects that have to be set up correctly. And as you kind of implied there's not too much crazy timing stuff except stuff like what I am experiencing with the joypads. The problem for me has been the other realization that I don't know assembly that well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon May 19, 2014 11:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is a code that does most of the framework necessary for setting up the SNES.  I set up a vblank.txt and main.txt, for people to write code without having to deal with all that other timing crap.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=1546">snes initialization.zip</a> [101.18 KiB]
			</span><br />
			<span class="gensmall">Downloaded 16 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>