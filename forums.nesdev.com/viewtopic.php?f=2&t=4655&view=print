<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - level data: RLE type compression vs fixed length</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">level data: RLE type compression vs fixed length</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4655">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4655</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WhoaMan</b> [ Mon Dec 15, 2008 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>level data: RLE type compression vs fixed length</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am at the stage in my game where i am designing the various data formats and what not. the levels in my game will be for a grid of 14x10 tiles. (there is actually a frame around this grid so it is really 16x12, but the frame is tile type 0 so when i clear the buffer it will take care of this).... anyways, i am trying to decided on storing 16x10 tiles in the format of :
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">76543210<br />XXXXYYYY<br />&nbsp; &nbsp;&nbsp; &nbsp;XXXX # of times tile repeats<br />&nbsp; &nbsp;&nbsp; &nbsp;YYYY # tile number to repeat<br /></div>
<br />with this format, the smallest level size (with the other level information) would be around 12 bytes (not that this would happen as the level would be boring as hell) and no bigger than 100 bytes
<br />
<br />although, if i store just two tiles per a byte... and have the stored level data be just the 14x10... then i can store each level in ~74 bytes.
<br />
<br />
<br />what methods does everyone typically use? i am leaning towards having each level be the 74 bytes as it should average out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Dec 15, 2008 9:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well for this type of thing (a one-screen level, I'm assuming), methods I've used have been a bit more extreme (only 2 tile types for a maze) where I had 32 byte levels (each bit represented the absence/presence of a tile). But for your case, I'd probably stick with a system where in one byte there are 2 tiles. This is good because you have a fixed size for a level, and you won't end up wasting bytes or anything like that.
<br />
<br />But a better system might be an objects system. Define rectangular objects in ROM and place them on the level using coordinates. For example you could have an 8 tile wide horizontal bar of metatiles, and this can be made of any metatiles. Then you do this:
<br />
<br />.db XPosition, YPosition, ObjectNumber
<br />
<br />Which would use 3 bytes to place a large object. You could also implement a layering system with this where metatile #0 in each of these blocks represents invisibility, so you can put an object below it which will show up through the "invisible" metatiles. But if that's too complex, I'd stick with the two tiles per byte. How much space are you working with for how many levels?
<br />
<br />EDIT: Another advantage of the objects system is it works 2 dimensionally, where RLE and stuff works 1-dimensionally. Though these objects might be defined 1 dimensionally....

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WhoaMan</b> [ Mon Dec 15, 2008 10:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i have about 16kb worth of space for levels, so optimizations is not really that big of a deal i guess. I have used use the object method before though in this the odds of reusing a block of tiles is very slim. in previous versions that had less tile types, i used the RLE method and got rather small levels.... though with the new tiles i think the 2 tiles per a byte will work better <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 15, 2008 10:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I used to be a big fan of object-based encodings, as seen in Super Mario Bros. and Super Mario World. But as I did basic research on what would go into a social sim game similar to Animal Crossing or Harvest Moon, I came up with the outline of a proof that an object-based encoding is equivalent to run-length encoding.
<br />
<br />Assume that an object-based encoding can be converted into an equivalent object-based encoding where the coordinates are strictly increasing through a level. (Without loss of generality, assume row-major decompressed storage; for side-scrollers that use column-major storage, exchange X and Y.) For objects A and B, if A.Y &lt; B.Y then A comes before B, and if A.Y == B.Y and A.X &lt; B.X, then A comes before B. So the coordinates X and Y of each object can be replaced with a number XY = Y * width + X, which is also strictly increasing. Now, if you subtract two adjacent objects' XY values, you get 1 + the length of the run between the objects.
<br />
<br />WhoaMan: How many levels do you plan to have? And can you draw one for us with ASCII art inside the [code] tag?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Mon Dec 15, 2008 10:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Assume that an object-based encoding can be converted into an equivalent object-based encoding where the coordinates are strictly increasing through a level. (Without loss of generality, assume row-major decompressed storage; for side-scrollers that use column-major storage, exchange X and Y.) For objects A and B, if A.Y &lt; B.Y then A comes before B, and if A.Y == B.Y and A.X &lt; B.X, then A comes before B. So the coordinates X and Y of each object can be replaced with a number XY = Y * width + X, which is also strictly increasing. Now, if you subtract two adjacent objects' XY values, you get 1 + the length of the run between the objects.</div>I fail to see how you account for the the vector "objects" in a game like Mario being two-dimensional. That is to say filling a rectangle from four edge coordinates shouldn't fill everything between the first and last points in your single-dimensional XY-space, merely the interior portion of each individual column/row. Obviously there will always be scenes for which RLE is superior, but I fail to see how the schemes are equivalent (relative to some appropriate constant factor.)
<br />
<br />Besides, the sheer awesomeness of the SMB3/SMW approach is damn near impossible to beat :)
<br />
<br />edit: I suppose you could tweak the RLE routine such that only the "interior" points are filled, and subdivide the rectangles in such a way as to make consecutive rectangles share edges (plus some horizontal wrapping logic), let the points be strictly increasing, and avoid overdraw. Which ought to make it relatively straightforward to write an automatic encoder if nothing else.
<br />Uh, or... something.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Dec 15, 2008 11:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I came up with the outline of a proof that an object-based encoding is equivalent to run-length encoding.</div>
<br />
<br />What do you mean by equivalent? I fail to see how under all conditions, they would be "equivalent".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Dec 16, 2008 1:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dragon Warrior and Zelda 2 use that exact format described in the first post, only Zelda 2 uses a nibble-swapped version of Dragon Warrior's.  Hacking those games taught me RLE.
<br />
<br />But you may want to look into LZ compression.  If done right, it is no worse than RLE, and can possibly be better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Dec 16, 2008 6:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doynax wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Assume that an object-based encoding can be converted into an equivalent object-based encoding where the coordinates are strictly increasing through a level. [etc]</div><br />I fail to see how you account for the the vector "objects" in a game like Mario being two-dimensional. That is to say filling a rectangle from four edge coordinates shouldn't fill everything between the first and last points in your single-dimensional XY-space</div><br />Decoding an object-based level can be separated into two passes: placing markers representing an object's upper-left corner into an array, then expanding them rectangularly. The first step is what's equivalent to RLE; after the first step, there's still a buttload of empty space in the array.<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">But you may want to look into LZ compression. If done right, it is no worse than RLE, and can possibly be better.</div>
<br />In fact, RLE can be seen as the special case of LZ77-family algorithms with match distances of 1 byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Dec 16, 2008 4:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think tepples' point of equivalence only applies when the object-based format's objects are all of like size, placed on a grid with a spacing the same as the object size. If object sizes vary, then decoding wouldn't be able to follow a strict top-to-bottom, left-to-right tile order.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Dec 16, 2008 5:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I think tepples' point of equivalence only applies when the object-based formats objects are all of like size, placed on a grid with a spacing the same as the object size.</div>
<br />
<br />Like large metatiles?
<br />
<br />When I refer to an object based system, I refer to placing variable sized objects over a "cleared" background. I seem to recall a title screen compression discussion created by SecretServiceDude where I suggested he used an object based system like I just described, and it saved him a good deal of space.
<br />
<br />Imagine an empty background with 3 identical, large, complicated rectangular objects. Place them slightly layered on top of each other like so:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">11<br />122<br />&nbsp;233<br />&nbsp; 33<br /></div>
<br />
<br />Say that one of these objects compressed with RLE takes up 33 bytes. It's going to take more than that to define the whole background with RLE (including the blank spaces around that). However, it's going to take 42 bytes to define that whole background with an object based system.
<br />
<br />The object itself is 33 bytes, and pointing to/placing the object takes 3 bytes. So 3 objects times 3 bytes = 9 + 33 = 42. With just RLE and no layering system, this would take a lot more, depending on the object.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Dec 17, 2008 12:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Then there's always huge meta-meta tiles, like Ultima 6 for the PC.
<br />There was the "Map", made up of big 8x8 tile sheets (up to 1024 different ones), and the "chunks", which defined the contents of each 8x8 tile sheet, using up to 256 different tiles.  I think the main map was 128x128 sheets.  Total size of a U6 world map: 84KiB exactly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Dec 17, 2008 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In my game (ChateauLevania, pretty much a ripoff of Castlevania: SOTN but based off of a book I'm writing titled "The Curse of Chateau LeVeaux"), the map is made of rooms, which are collections of screens, which are each 4x4 collections of 8x8 tile metatiles (so they're 256x256 pixels big, but it makes it easier to handle if they're not 256x240).
<br />
<br />These metatiles are made of 2x2 4x4 tile metatiles, which are made of 2x2 2x2 tile metatiles, which are made of 2x2 single tiles. There are 256 possible different tiles to choose from with 8x8, 4x4, 2x2 and of course 1x1. You can swap these stacks of metatile definitions to have more unique level design.
<br />
<br />All screens are defined in one bank (16 bytes each, so 16k/16 =1024 unique screens), all rooms are defined in one bank (all are variable size), and all metatiles are defined in one bank (~4k for each stack, so 4 different ones minimum, but they'll be layed out so you can use more than that). That makes my castle map 48k just for the background part, but maybe I'll squeeze the object map into the room part, making the entire map 48k, which I think is decent when I have 512k to work with. If not, then it'll be 64k, which I still think is pretty okay.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>