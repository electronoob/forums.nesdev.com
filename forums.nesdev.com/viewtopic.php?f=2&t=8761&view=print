<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 16-bit software delay routine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">16-bit software delay routine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8761">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8761</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Wed Mar 28, 2012 12:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>16-bit software delay routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This routine delays a run-time specified number of cycles, plus a fixed constant number of cycles (33). The constant number includes the number of cycles the JSR+RTS takes.
<br />Pass the number of cycles to delay in A:X with X having the low 8 bits and A having the high 8 bits of the number of cycles to delay.
<br />Requires no absolute jumps / relocations. Preserves X,Y. Does require page-aligning so none of the JSRs cross page boundary. Written for CA65.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Delays A:X clocks+overhead<br />; Time: 256*A+X+33 clocks &#40;including JSR&#41;<br />; Clobbers A. Preserves X,Y.<br />delay_256a_x_33_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2; 2 cycles overhead<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs @do256&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2; 4 cycles overhead<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 0-255 cycles remain, overhead = 4<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +2; 6<br />&nbsp; &nbsp; &nbsp; &nbsp; ;;;;;;;;;;;;;;;;<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 15 + JSR + RTS overhead for the code below. JSR=6, RTS=6. Total: 27. 6+27=33<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; Cycles&nbsp; &nbsp; &nbsp; &nbsp; Accumulator&nbsp; &nbsp; &nbsp;Carry flag<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 0&nbsp; 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; &nbsp; &nbsp; &nbsp;&#40;hex&#41;&nbsp; &nbsp; &nbsp; &nbsp; 0 1 2 3 4 <br />&nbsp; &nbsp; &nbsp; &nbsp; sec&nbsp; &nbsp; &nbsp; &nbsp; ; 0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; &nbsp;00 01 02 03 04&nbsp; &nbsp;1 1 1 1 1 <br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #5&nbsp; &nbsp; &nbsp;; 2&nbsp; 2&nbsp; 2&nbsp; 2&nbsp; 2&nbsp; &nbsp;FB FC FD FE FF&nbsp; &nbsp;0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs :-&nbsp; &nbsp; &nbsp;; 4&nbsp; 4&nbsp; 4&nbsp; 4&nbsp; 4&nbsp; &nbsp;FB FC FD FE FF&nbsp; &nbsp;0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; ; 6&nbsp; 6&nbsp; 6&nbsp; 6&nbsp; 6&nbsp; &nbsp;7D 7E 7E 7F 7F&nbsp; &nbsp;1 0 1 0 1<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc :+&nbsp; &nbsp; &nbsp;; 8&nbsp; 8&nbsp; 8&nbsp; 8&nbsp; 8&nbsp; &nbsp;7D 7E 7E 7F 7F&nbsp; &nbsp;1 0 1 0 1<br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #$7E&nbsp; &nbsp;;10 11 10 11 10&nbsp; &nbsp;FF FF 00 00 01&nbsp; &nbsp;0 0 1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc :+&nbsp; &nbsp; &nbsp;;12 13 12 13 12&nbsp; &nbsp;FF FF 00 00 01&nbsp; &nbsp;0 0 1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; beq :+&nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; 14 15 14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 00 01&nbsp; &nbsp; &nbsp; &nbsp;1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne :+&nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1<br />:&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; ;15 16 17 18 19&nbsp; &nbsp;This loop from http://6502org.wikidot.com/software-delay<br />@do256: ; do 256 cycles.&nbsp; &nbsp; &nbsp; &nbsp; ; 5 cycles done so far. C is set from CMP<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 3 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #&#40;34*2-1&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;12 cycles done so far<br />:&nbsp; &nbsp; &nbsp; &nbsp; sec&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 cycles&nbsp; &#40;sec is only needed<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sbc #2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 cycles&nbsp; &nbsp;to make loop 7 cycles&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcs :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 3 cycles for taken branch<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -1 cycles for untaken branch<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;12 + 34*7 - 1 = 249 done so far, 7 missing<br />&nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 4 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc delay_256a_x_33_clocks ; 3 cycles ; C is unset from SBC</div><br />I could not find such a routine online nor in Blargg's library, so I wrote my own. The sub-256 cycle part is copied from 6502org wiki. Blargg's library has one, but entering it would require a jump, so this ends up having a smaller total overhead.<br /><br />Here is a version that has the semantics for A and X reversed. X contains the high-order 8 bits, A contains the lower 8 bits. X is zeroed, Y is preserved. It reuses the sub-256 cycle delay routine from Blargg's library (which can be entered separately). The overhead is 30 cycles.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Delays X:A clocks+overhead<br />; Time: 256*X+A+30 clocks &#40;including JSR&#41;<br />; Clobbers A,X. Preserves Y.<br />delay_256x_a_30_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; beq delay_a_25_clocks&nbsp; &nbsp;; +3&nbsp; &#40;25+5 = 30 cycles overhead&#41;<br />@do256: ; do 256 cycles. 4 cycles so far. Loop is 1+2+4+4+2+2 = 15 bytes.<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #&#40;256-42&#41;&nbsp; ; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 9 cycles done so far. Carry is set from CPX<br />:&nbsp; &nbsp; &nbsp; &nbsp; adc #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bne :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +3 for taken branch<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -1 for untaken branch<br />:&nbsp; &nbsp; &nbsp; &nbsp; adc #&#40;256/6&#41;&nbsp; &nbsp;; 2 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcc :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +3 for taken branch<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -1 for untaken branch<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 9 + 42*5-1 + 6*5-1 = 247 done so far; 9 missing<br />&nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +4<br />&nbsp; &nbsp; &nbsp; &nbsp; dex&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs delay_256x_a_30_clocks ; +3. Carry is set from ADC<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />; Delays A clocks + overhead<br />; Preserved: X, Y<br />; Time: A+25 clocks &#40;including JSR&#41;<br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; carry set by CMP<br />delay_a_25_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #7<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; do multiples of 7<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; bit 0<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs :+<br />:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A=clocks/2, either 0,1,2,3<br />&nbsp; &nbsp; &nbsp; &nbsp; beq @zero&nbsp; &nbsp; &nbsp; &nbsp;; 0: 5<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a<br />&nbsp; &nbsp; &nbsp; &nbsp; beq :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 1: 7<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2: 9<br />@zero:&nbsp; bne :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3: 11<br />:&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; &#40;thanks to dclxvi for the algorithm&#41;</div><br /><br />If relocations are not a problem, then the routines can be replaced with these, respectively:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;;;;;;;;;;;;;;;;;;;;;;;<br />; Delays A:X clocks+overhead<br />; Clobbers A. Preserves X,Y. Has relocations.<br />; Time: 256*A+X+31 clocks &#40;including JSR&#41;<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />:&nbsp; &nbsp; &nbsp; &nbsp;; do 256 cycles.&nbsp; &nbsp; &nbsp; &nbsp; ; 5 cycles done so far. Loop is 2+1+ 2+3+ 1 = 9 bytes.<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 cycles - Carry was set from cmp<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 3 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #&#40;256-25-10-2-4&#41;&nbsp; &nbsp;; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr delay_a_25_clocks<br />&nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 4 cycles<br />delay_256a_x_31_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2; 2 cycles overhead<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2; 4 cycles overhead<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 0-255 cycles remain, overhead = 4<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +2; 6; +27 = 33<br />&nbsp; &nbsp; &nbsp; &nbsp; ; 15 + JSR + RTS overhead for the code below. JSR=6, RTS=6. 15+12=27<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; Cycles&nbsp; &nbsp; &nbsp; &nbsp; Accumulator&nbsp; &nbsp; &nbsp;Carry flag<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 0&nbsp; 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; &nbsp; &nbsp; &nbsp;&#40;hex&#41;&nbsp; &nbsp; &nbsp; &nbsp; 0 1 2 3 4 <br />&nbsp; &nbsp; &nbsp; &nbsp; sec&nbsp; &nbsp; &nbsp; &nbsp; ; 0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; 0&nbsp; &nbsp;00 01 02 03 04&nbsp; &nbsp;1 1 1 1 1 <br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #5&nbsp; &nbsp; &nbsp;; 2&nbsp; 2&nbsp; 2&nbsp; 2&nbsp; 2&nbsp; &nbsp;FB FC FD FE FF&nbsp; &nbsp;0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs :-&nbsp; &nbsp; &nbsp;; 4&nbsp; 4&nbsp; 4&nbsp; 4&nbsp; 4&nbsp; &nbsp;FB FC FD FE FF&nbsp; &nbsp;0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; ; 6&nbsp; 6&nbsp; 6&nbsp; 6&nbsp; 6&nbsp; &nbsp;7D 7E 7E 7F 7F&nbsp; &nbsp;1 0 1 0 1<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc :+&nbsp; &nbsp; &nbsp;; 8&nbsp; 8&nbsp; 8&nbsp; 8&nbsp; 8&nbsp; &nbsp;7D 7E 7E 7F 7F&nbsp; &nbsp;1 0 1 0 1<br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #$7E&nbsp; &nbsp;;10 11 10 11 10&nbsp; &nbsp;FF FF 00 00 01&nbsp; &nbsp;0 0 1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc :+&nbsp; &nbsp; &nbsp;;12 13 12 13 12&nbsp; &nbsp;FF FF 00 00 01&nbsp; &nbsp;0 0 1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; beq :+&nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; 14 15 14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 00 01&nbsp; &nbsp; &nbsp; &nbsp;1 1 1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne :+&nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1<br />:&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; ;15 16 17 18 19&nbsp; &nbsp;&#40;thanks to dclxvi for the algorithm&#41;<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />; Delays X:A clocks+overhead<br />; Clobbers A,X. Preserves Y. Has relocations.<br />; Time: 256*X+A+30 clocks &#40;including JSR&#41;<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />delay_256x_a_30_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; beq delay_a_25_clocks&nbsp; &nbsp;; +3&nbsp; &#40;25+5 = 30 cycles overhead&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; ; do 256 cycles.&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; 4 cycles so far. Loop is 1+1+ 2+3+ 1+3 = 11 bytes.<br />&nbsp; &nbsp; &nbsp; &nbsp; dex&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; 2 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; 3 cycles<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #&#40;256-25-9-2-7&#41;&nbsp; &nbsp; ; +2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr delay_a_25_clocks<br />&nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 4<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp delay_256x_a_30_clocks ; 3.<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />; Delays A clocks + overhead<br />; Preserved: X, Y<br />; Time: A+25 clocks &#40;including JSR&#41;<br />;;;;;;;;;;;;;;;;;;;;;;;;<br />:&nbsp; &nbsp; &nbsp; &nbsp;sbc #7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; carry set by CMP<br />delay_a_25_clocks:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #7<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs :-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; do multiples of 7<br />&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Cycles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Accumulator&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Carry&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Zero<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 0 0 0 0 0 0 0&nbsp; &nbsp;00 01 02 03 04 05 06&nbsp; &nbsp;0 0 0 0 0 0 0&nbsp; &nbsp;? ? ? ? ? ? ? <br />&nbsp; &nbsp; &nbsp; &nbsp; bcs :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 2 2 2 2 2 2&nbsp; &nbsp;00 00 01 01 02 02 03&nbsp; &nbsp;0 1 0 1 0 1 0&nbsp; &nbsp;1 1 0 0 0 0 0 <br />:&nbsp; &nbsp; &nbsp; &nbsp;beq @zero&nbsp; &nbsp; &nbsp; &nbsp;; 4 5 4 5 4 5 4&nbsp; &nbsp;00 00 01 01 02 02 03&nbsp; &nbsp;0 1 0 1 0 1 0&nbsp; &nbsp;1 1 0 0 0 0 0<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; : : 6 7 6 7 6&nbsp; &nbsp;:: :: 01 01 02 02 03&nbsp; &nbsp;: : 0 1 0 1 0&nbsp; &nbsp;: : 0 0 0 0 0 <br />&nbsp; &nbsp; &nbsp; &nbsp; beq :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; : : 8 9 8 9 8&nbsp; &nbsp;:: :: 00 00 01 01 01&nbsp; &nbsp;: : 1 1 0 0 1&nbsp; &nbsp;: : 1 1 0 0 0 <br />&nbsp; &nbsp; &nbsp; &nbsp; bcc :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; : : : : A B A&nbsp; &nbsp;:: :: :: :: 01 01 01&nbsp; &nbsp;: : : : 0 0 1&nbsp; &nbsp;: : : : 0 0 0<br />@zero:&nbsp; bne :+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 7 8 : : : : C&nbsp; &nbsp;00 01 :: :: :: :: 01&nbsp; &nbsp;0 1 : : : : 1&nbsp; &nbsp;1 1 : : : : 0<br />:&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 9 A B C D E F&nbsp; &nbsp;&#40;thanks to dclxvi for the algorithm&#41;</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>