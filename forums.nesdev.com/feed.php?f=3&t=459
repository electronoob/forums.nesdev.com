<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=459" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2005-08-03T07:11:01-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=459</id>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-08-03T07:11:01-07:00</updated>
<published>2005-08-03T07:11:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3424#p3424</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3424#p3424"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3424#p3424"><![CDATA[
<div class="quotetitle">Albeit wrote:</div><div class="quotecontent"><br />Is the first bank loaded into $C000 and the second loaded into $8000? Do the banks actually come after one another in the cartridge rom? Am I doing something wrong?<br /></div><br /><br />For mapper 0 ROMs with 32k PRG (like Super Mario Bros), the first 16k goes at $8000 and the second 16k goes at $C000.<br /><br />To add to some things blargg said and for a few more things:<br /><br />- 'char' may be signed, which you don't want.  Use 'unsigned char' or a typedef of that ('BYTE' perhaps?).  You want unsigned 8-bit vars.<br /><br />- fread() is much much better for reading large chunks of data.  fscanf() isn't the best way to go (if you even just want an individual byte -- fgetc() would even be better than fscanf() -- but for this use fread())<br /><br />- don't be afraid to use hex in your code.  I see a lot of hex-&gt;dec conversions... some of which are errornerous.  Instead of "16384" for 16k, why not "0x4000"?  you know the reset vector is at $FFFC, so why not use "0xFFFC"?  the conversion to "16302" is not only harder to read... but also <em>wrong</em> (even after the subtraction)<br /><br />- the PRG comes before the CHR in the .nes file... so you've got the right idea.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Aug 03, 2005 7:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-08-03T00:28:47-07:00</updated>
<published>2005-08-03T00:28:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3419#p3419</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3419#p3419"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3419#p3419"><![CDATA[
The first thing that stands out is that you're using char for your ROM. A compiler can implement this as signed or unsigned, but it's usually signed so this is probably a source of problems. I recommend adding some printf() calls in the future to look at intermediate data. It also doesn't look like this is the code you ran, since it has errors.<br /><br />I coded up the following and it prints $8000 for the reset vector (I changed it to read 32K of ROM). I put in error checking because without it any errors would appear as an incorrect vector. I also made the rom data static since my compiler didn't like having so much data on the stack; in an emulator it should be allocated dynamically with malloc() or similar.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void print_vector&#40;&#41;<br />&#123;<br />    static unsigned char rom &#91;32 * 1024L&#93;;<br />    FILE* file = fopen&#40; &quot;rom.nes&quot;, &quot;rb&quot; &#41;;<br />    if &#40; !file &#41;<br />        return;<br />    <br />    if &#40; fseek&#40; file, 16, SEEK_SET &#41; &#41;<br />        goto error;<br />    <br />    if &#40; !fread&#40; rom, 1, sizeof rom, file &#41; &#41;<br />        goto error;<br />    <br />    &#123;<br />        unsigned offset = 0x8000;<br />        unsigned reset = rom &#91;0xfffd - offset&#93; * 0x100 +<br />                rom &#91;0xfffc - offset&#93;;<br />        <br />        printf&#40; &quot;Reset vector: $%04x\n&quot;, reset &#41;;<br />    &#125;<br />    <br />error:<br />    fclose&#40; file &#41;;<br />&#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Aug 03, 2005 12:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Albeit]]></name></author>
<updated>2005-08-02T23:53:02-07:00</updated>
<published>2005-08-02T23:53:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3417#p3417</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3417#p3417"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3417#p3417"><![CDATA[
I switched what .nes file I was using and am now using the one for Super Mario Brothers. It has two 16KB banks, and I am assuming that they are stored in the rom on after another. If I assume the first is loaded at $C000 the reset-vector is at $85BF, and is the opcode "AC" (LDY). But if I assume that the second bank is loaded into $C000, the opcode that the reset-vector points to is "C5" (CMP memory and accumulator). Now, the second one doesnt seem like the first instruction that would be execute by a program, but hte first one does.<br /><br />Is the first bank loaded into $C000 and the second loaded into $8000? Do the banks actually come after one another in the cartridge rom? Am I doing something wrong?<br /><br />Thanks for the help!<br /><br />(EDIT: I just downloaded a different version of the Super Mario Brothers rom (Super Mario Brothers (E).nes) and assuming the second 16KB bank is loaded at $C000, the reset-vector is the same as the old file (9494) but the opcode at that location is now "B0" (BCS, branch on c=1). Does that seem right?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=173">Albeit</a> — Tue Aug 02, 2005 11:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Albeit]]></name></author>
<updated>2005-08-02T21:42:33-07:00</updated>
<published>2005-08-02T21:42:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3408#p3408</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3408#p3408"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3408#p3408"><![CDATA[
So I've found the reset-vector (or what I think is the reset-vector). I loaded the 16kb prg-rom bank into a buffer, and then found the [0xC000-0xFFFC] and [previous+1] bytes. I did this because C000 is where the rom would be loaded, and subtractice this form FFFC gives me the location of the reset-vector if it was actually loaded at 0x0000 like my buffer is. Is this correct? Then due to little endian, i bitshifted FFFD right 8 times and then added FFFC to get my full reset-vector address. However, the reset vector is $241E. How can this be? Does that not point to a part of the part that mirrors $2000-$2007, an io register? <br /><br />This is my code of finding the reset-vector:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int romSize=16384;<br />char rom&#91;romSize&#93;;<br /><br />FILE* zeldaFile = fopen&#40;&quot;MarioBro.nes&quot;, &quot;rb&quot;&#41;;<br />fseek&#40;zeldaFile, 16, SEEK_SET&#41;; // The 16th byte is the start of prg-rom<br />for &#40;i=0;i&lt;romSize;i++&#41;<br />                fscanf&#40;zeldaFile, &quot;%c&quot;, &amp;rom&#91;i&#93;&#41;;<br />fclose&#40;zeldaFile&#41;;<br /><br />printf&#40;&quot;%X&quot;,rom&#91;rom&#91;16302&#93;&lt;&lt;8&#41;+rom&#91;16300&#93;&#41;;<br /></div><br /><br />The output of this is "241E". What is wrong? Or is this correct?<br /><br />Thanks for the great help so far!<br /><br /><br />(Btw, as I said earlier MarioBros.nes has a 16KB and a 8KB bank. Could the 8KB bank begin at byte 16 and I'm actually loading the 8KB bank and half of hte 16KB bank? Or does the 16KB bank start at the start of prg-rom in nes files?)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=173">Albeit</a> — Tue Aug 02, 2005 9:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-08-02T18:51:18-07:00</updated>
<published>2005-08-02T18:51:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3405#p3405</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3405#p3405"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3405#p3405"><![CDATA[
Well sure, we can get technical and claim that the PPU is a memory mapper for CHR ROM. Each bank is one byte and you write to $2006 twice to change the bank. When you read from $2007, it increments the bank by 1 or 32. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Aug 02, 2005 6:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-08-02T15:05:02-07:00</updated>
<published>2005-08-02T15:05:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3403#p3403</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3403#p3403"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3403#p3403"><![CDATA[
$2007 is the PPU I/O register, not CHR addressing space.<br /><br />I never said CHR was inaccessable to the CPU, I said it doesn't exist anywhere in CPU addressing space.  And it doesn't =P<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Aug 02, 2005 3:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-08-02T13:56:24-07:00</updated>
<published>2005-08-02T13:56:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3400#p3400</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3400#p3400"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3400#p3400"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />CHR-ROM is graphics data which is used the the PPU for rendering -- it does not exist anywhere in the addressing space used by the CPU.<br /></div><br />Anywhere? LDA #0 STA $3131 STA $3636 STA $3636 BIT $3737 and then you can read the CHR ROM out from $2007. But then, CHR is only there because the PPU is there.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Aug 02, 2005 1:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-08-02T13:29:57-07:00</updated>
<published>2005-08-02T13:29:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3398#p3398</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3398#p3398"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3398#p3398"><![CDATA[
<div class="quotetitle">Albeit wrote:</div><div class="quotecontent"><br />Okay, so I have buffer that contains the PRG-rom and pointers that access certain portions of it. If I encounter a "LDA $8000", that essentially means load the byte at the very beginning of the buffer... because the prg-rom is loaded at $8000. Correct?<br /></div><br /><br />Well.. in this case yes... but not always.  $8000 may be WELL into the ROM depending on what banks are swapped in.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Now if there is a 16kb and a 8kb rom bank, would the 16kb be loaded at $8000 and the 8kb bank loaded directly after it? At $C000?<br /></div><br /><br />No ROM I'm aware of will have 24k of PRG.  The 8k you're referring to sounds like it's CHR-ROM -- which is something <strong>completely different</strong> and does not have anything to do with anything mentioned in this thread.  CHR-ROM is graphics data which is used the the PPU for rendering -- it does not exist anywhere in the addressing space used by the CPU.<br /><br />When there's only 16k of PRG in a mapperless ROM (mapper 0) -- both $8000 and $C000 will be swapped to it.  That is... LDA $C000 would have the exact same effect as LDA $8000 -- it's kind of a mirroring effect.  This can be emulated <strong>very</strong> easily if you used the PRG pointer method I mentioned earlier.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Aug 02, 2005 1:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Albeit]]></name></author>
<updated>2005-08-02T13:18:27-07:00</updated>
<published>2005-08-02T13:18:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3397#p3397</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3397#p3397"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3397#p3397"><![CDATA[
Okay, so I have buffer that contains the PRG-rom and pointers that access certain portions of it. If I encounter a "LDA $8000", that essentially means load the byte at the very beginning of the buffer... because the prg-rom is loaded at $8000. Correct?<br /><br />Now if there is a 16kb and a 8kb rom bank, would the 16kb be loaded at $8000 and the 8kb bank loaded directly after it? At $C000?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=173">Albeit</a> — Tue Aug 02, 2005 1:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-08-02T12:08:41-07:00</updated>
<published>2005-08-02T12:08:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3390#p3390</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3390#p3390"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3390#p3390"><![CDATA[
The game will read from/write to various areas in addressing space, as an emulator you will have to treat each area as it exists on the system<br /><br />For example, your emu should keep a buffer which is has the PRG, and reads from $8000-$FFFF should read bytes from this buffer and give it back to the game.  Therefore when a game does something like "LDA $8000" it will get the proper byte from PRG.  However other areas do other things... for example "LDA $0357" will read from system RAM, not from PRG -- and "LDA $2002" will read from a PPU register, not from ROM or RAM.<br /><br />My method (and I'd assume most emus methods) for handling this is creating Read/Write function pointers.  Whenever the CPU reads a byte, you will call the appropriate function pointer which returns the desired info.  My emu has this organized so that each 4k of addressing space has its own function pointer.. to paraphrase my code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ReadProcs&#91;0&#93; = ReadMemory_RAM;  // $0000-$0FFF<br />ReadProcs&#91;1&#93; = ReadMemory_RAM;  // $1000-$1FFF<br />ReadProcs&#91;2&#93; = ReadMemory_PPU;  //$2000-$2FFF<br />//etc<br />ReadProcs&#91;8&#93; = ReadMemory_PRG;  //$8000-$8FFF<br /></div><br /><br />When the CPU performs a read, it calls the appropriate function pointer which returns the desired data:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define CPURead&#40;a&#41;   ReadProcs&#91;&#40;a&#41; &gt;&gt; 12&#93;&#40;a&#41;<br /></div><br /><br />My read procs would look something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">u8 ReadMemory_RAM&#40;u16 a&#41;<br />&#123;<br />  return SystemRAM&#91;a &amp; 0x07FF&#93;;<br />&#125;<br /></div><br /><br /><br />To handle PRG in this fashion, I keep a big buffer containing all the PRG for the ROM, but also keep 10 pointers which represent each of the 4k pages of PRG.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">u8* pPRGBuffer;  /* this will be allocated with malloc or new&#91;&#93; and the PRG will be store here*/<br /><br />u8* pPRG&#91;10&#93;; /* these will be what the emu actually uses -- each pointer will point to different areas in pPRGBuffer */<br /></div><br /><br />pPRG[0] would represent the PRG at $6000-$6FFF, pPRG[1] would represent the PRG at $7000-$7FFF, pPRG[2] would be $8000-$8FFF, etc.  Note that most games don't have PRG at $6000-$7FFF, however some mappers (FME-07) do, so it helps to prepare for it.<br /><br />Whenver your emu does ANY reading from PRG space, it should go through these pointers and not through 'pPRGBuffer' directly -- as these pointers will represent the current PRG banks which are swapped in.<br /><br />My previously mentioned 'ReadMemory_PRG' function might look something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">u8 ReadMemory_PRG&#40;u16 a&#41;<br />&#123;<br />  return pPRG&#91;&#40;a &gt;&gt; 12&#41; - 6&#93;&#91;a &amp; 0x0FFF&#93;;<br />&#125;<br /></div><br /><br />This way... PRG swapping can be easily implimented just by changing a few pointers... rather than copying large portions of memory:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void Swap8kPRG&#40;u8 where,u8 page&#41;<br />&#123;<br />  u32 offset = page &lt;&lt; 13;<br /><br />  pPRG&#91;where&#93; = pPRGBuffer + offset;<br />  pPRG&#91;where + 1&#93; = pPRGBuffer + offset + 0x2000;<br />&#125;<br /></div><br /><br /><br />When pulling out your Reset (or NMI/IRQ vectors), you should treat it just like any other read.<br /><br /><br />That's my advice anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Aug 02, 2005 12:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Albeit]]></name></author>
<updated>2005-08-02T11:38:01-07:00</updated>
<published>2005-08-02T11:38:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3384#p3384</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3384#p3384"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3384#p3384"><![CDATA[
(Sorry that was my post above)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=173">Albeit</a> — Tue Aug 02, 2005 11:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-08-02T11:17:04-07:00</updated>
<published>2005-08-02T11:17:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3383#p3383</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3383#p3383"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3383#p3383"><![CDATA[
(Sorry for the noobish question, still just starting out <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />)<br /><br /><br />So what I would do is take the prg-rom and place it in memory locations $8000-$bfff and $c000-$ffff. However, since this is an emulator that never actually happens. So to find the reset-vector, I would take the 16kb prg-rom start point, imaginairly add $c000 to it, and then find the reset-vector at the imaginary location $fffc. I probably described that very confusingly... but is that correct?<p>Statistics: Posted by Guest — Tue Aug 02, 2005 11:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2005-08-02T05:05:01-07:00</updated>
<published>2005-08-02T05:05:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3381#p3381</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3381#p3381"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3381#p3381"><![CDATA[
The reset vector contains the start address.  So once it's loaded in memory as it was described, for example if the bytes $55,$8A are at $FFFC, then the first opcode to run will be at $8A55.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Tue Aug 02, 2005 5:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2005-08-02T03:34:06-07:00</updated>
<published>2005-08-02T03:34:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3379#p3379</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3379#p3379"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3379#p3379"><![CDATA[
When the PRG-ROM is only 16kb, the data is there both at $8000-$bfff and at $c000-$ffff<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Aug 02, 2005 3:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Albeit]]></name></author>
<updated>2005-08-02T01:34:29-07:00</updated>
<published>2005-08-02T01:34:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3377#p3377</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3377#p3377"/>
<title type="html"><![CDATA[Where does execution start for NES programs?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=459&amp;p=3377#p3377"><![CDATA[
Well how does the emulator author find where it starts? The ROM I'm currently using is MarioBros, a 24KB ROM with one 16 and one 8kb bank. Is there any way to find the starting point in the ROM?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=173">Albeit</a> — Tue Aug 02, 2005 1:34 am</p><hr />
]]></content>
</entry>
</feed>