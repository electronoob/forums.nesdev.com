<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - HVCMODE Pin???</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">HVCMODE Pin???</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=6474">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=6474</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Tue Jun 08, 2010 1:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Super FX cartridges demonstrated quite efficiently how the architecture could be expanded externally this way (the DMA bus is available on the cartridge slot).</div><br /><br /> Games like StarFox ran in 4bit tile mode to keep the bandwidth down, IIRC. I wouldn't say 'efficiently' and compared to what a cart mapped area could do, it makes the <span class="posthilit">SNES</span> approach more like a barely adequate after thought.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Makes perfect sense from a 1989/90 perspective.</div>
<br />Then the famicom was way ahead of its time. It could swap out banks faster than the 32bit generation could transfer memory. I can just imagine what the <span class="posthilit">SNES</span> could have achieved with a setup like that. Hell, it doesn't have to be a whole 64k bank system. Just a mode where there's enough address lines to the cart, to take care of a <em>single</em> <span class="posthilit">line</span> of video/pixels. The hardware on the cart side can cycle though/map the next <span class="posthilit">line</span> based on some sync system. Easy peesy pumpkin pie.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>smkd</b> [ Tue Jun 08, 2010 2:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />cool thread.
<br />
<br />The 128K VRAM capacity explains those unused upper bits from the registers that select where tiles/tilemaps are, but there doesn't seem to be anything obvious for how the DSP would access 128K samples.
<br />
<br />Would've been nice if the SPC had it's own little bank of memory to itself and the DSP had a full 64KB.  An 8KB or 32KB chip dedicated or something.  Games still looked great with 64KB VRAM but the ARAM constraint was awful for sample quality.  Felt wasted having a DSP that good with a tiny bit of RAM attached.   AAA developers did fine but so many <span class="posthilit">SNES</span> soundtracks have aged so poorly with horrible playback quality.
<br />
<br />@cart discussion: it seems much easier to justify the cheaper 'PRG only' cart with a generous amount of RAM in the system (compression being much more feasible) and DMA.
<br />
<br />@byuu: It has to write to tiles currently being used on screen due to lack of room, but it only does that on the same frame that the buffers are swapped so no glitches are visible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>6502freak</b> [ Tue Jun 08, 2010 3:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"> Games like StarFox ran in 4bit tile mode to keep the bandwidth down, IIRC.<br /></div><br /><br />Games like Doom on the other hand run pretty well in 256 colours. The DMA scheme is fast  enough to let an outside controller render graphics in the VRAM of the PPU at acceptable frame rates. On NTSC, 256x150 graphics in 256 colours and constant 30 fps is absolutely possible. On PAL, this figure could be even higher (though I would not develop a game which only runs on one TV system).<br /><br />Besides, 4bpp is higly misleading, because you can (if we take HDMA, colour math and sprites out, though they make great status displays) still use up to 121 colours using subpalettes, without putting much additional strain on the bus.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I wouldn't say 'efficiently' and compared to what a cart mapped area could do, it makes the <span class="posthilit">SNES</span> approach more like a barely adequate after thought.</div><br /><br />CHR banking may have been good for swapping tiles in-and out (Neo Geo style), but would have been way more expensive on the other hand. For Nintendo (more cart lines, at least 2 ROM chips in cartridge) and the game developer (storing UNCOMPRESSED graphics in expensive mask roms). This is NOT efficient.<br /><br />DMA on the other hand, may be used for purposes far beyond graphics transfer. I think it's a much more elegant design than then NES custom mapper chaos. <br /><br />Letting ANY device respond quick enough to address bus B enables the CPU to write its data ANYWHERE it wants. Or vice versa. This is quite flexible, elegant and powerful, allowing some interesting configurations.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then the famicom was way ahead of its time. It could swap out banks faster than the 32bit generation could transfer memory.</div><br /><br />I think this figure is a misrepresentation of the situation.<br /><br />Because in the end, bankswitching is mainly another method of flipping address lines. Every time you do a JMP (or JML) with the CPU, you use the CPU's own bankswitching. Every time you change a sprite pattern, you use the PPU's own bankswitching. Every time I set a new VRAM address pointer in the PSX , I'm using its bankswitching.<br /><br />In the end, it comes down to the amount of memory available a given to a system. A NES game with 512K CHR ROM would, by that logic, compare favourably to a <span class="posthilit">SNES</span> game using 64K VRAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I can just imagine what the <span class="posthilit">SNES</span> could have achieved with a setup like that.</div><br /><br />Yes, we can all construct our favourite <span class="posthilit">SNES</span> setup from a 2010 perspective, where ROM/RAM and processing speed is dirt cheap. This is not the case in 1990. 2.68 Mhz is really fast, considering that CD-ROMS and harddisks from that era were hardly pushing 150KB/s - 1MB/s. <br /><br />Given the DMA bus of the <span class="posthilit">SNES</span>, you could construct a pretty impressive video playback device without too much effort, using DMA to stream data from SD-cart. You could also stream data directly to the SPC700.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Hell, it doesn't have to be a whole 64k bank system. Just a mode where there's enough address lines to the cart, to take care of a <em>single</em> <span class="posthilit">line</span> of video/pixels.<br /> The hardware on the cart side can cycle though/map the next <span class="posthilit">line</span> based on some sync system. Easy peesy pumpkin pie.</div>
<br />
<br />This mehod is way more complex than a simple register driven DMA scheme, because it requires strict synchronization with the PPU (more cart lines, heck, why not put every single chip pin on the cartridge slot?). How are you going to synchronize a mass storage device (you don't want to store big videos and animations in ROM, do you?), with flexible access times, to the memory fetch scheme of the PPU? Or a different CPU, like the SuperFX?
<br />
<br />Putting the PPU address and data bus on the cart <span class="posthilit">line</span>, and cutting the DMA bus, would have been a big mistake by Nintendo. Games like StarFox and Doom would not have been possible with 1993/94 technology. Doing otherwise would have meant going the Sega 32X route.
<br />
<br />Noadays of course, with FPGA's, lots of (dual port) RAM and powerful microcontrollers: yes, you could practically bypass the whole <span class="posthilit">SNES</span> rendering scheme with it. Nintendo should have anticipated that in 1990.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jun 08, 2010 5:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">@byuu: It has to write to tiles currently being used on screen due to lack of room, but it only does that on the same frame that the buffers are swapped so no glitches are visible.</div>
<br />
<br />That's what I was thinking at first, but there doesn't seem to be enough time ... you can't write while the frame is active, so that's 262-160 = 102 scanlines * 1324 / 8 = 16881 bytes possible to transfer during Vblank+Forceblank combined. You'd need to transfer 38400 bytes to avoid any tearing, right?
<br />
<br />EDIT: I see, use 'bankswitching' via TDADDR for most of the buffering, and draw onto the rest during Vblank/Forceblank. It looks like you are limited to 20fps at 240x160 in NTSC mode, though.
<br />
<br />262-160=102 scanlines*1324/8=16881 bytes per frame, or 0x41f1 bytes.
<br />Bankswap range is in 0x2000 increments.
<br />240*160=38400 or 0x9600 bytes.
<br />So draw 0000-95ff for your first frame all during Vblank to start you off. Now start alternating with:
<br />- draw a000-cfff on frame 1
<br />- draw d000-ffff on frame 2
<br />- draw 0000-35ff on frame 3 and swap TDADDR from 0000 to a000
<br />Invert the process for the next frame.
<br />
<br />So it looks like I'd need to decrease the resolution to something like 240x144 for 30fps on NTSC, meh.
<br />
<br />And find room in there for the tilemap.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>smkd</b> [ Tue Jun 08, 2010 6:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />yeah I missed the '30hz' bit of your post.  Both CT and lunar.sfc are 20hz.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 08, 2010 6:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">6502freak wrote:</div><div class="quotecontent">On NTSC, 256x150 graphics in 256 colours and constant 30 fps is absolutely possible. On PAL, this figure could be even higher (though I would not develop a game which only runs on one TV system).</div><br />Then render 256x144 in NTSC and 256x176 in PAL. If you have an external renderer capable of texture mapping, it should be able to correct for the pixel aspect ratio difference.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Besides, 4bpp is higly misleading, because you can (if we take HDMA, colour math and sprites out, though they make great status displays) still use up to 121 colours using subpalettes, without putting much additional strain on the bus.</div>
<br />But then the external renderer has to build a set of subpalettes and determine which subpalette best represents each 8x8 pixel area.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>6502freak</b> [ Tue Jun 08, 2010 7:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But then the external renderer has to build a set of subpalettes and determine which subpalette best represents each 8x8 pixel area.</div>
<br />
<br />Yes, but at least it would be an option to decide whether VRAM transfer bandwidth or additional computations for the external CPU would the more limiting factor. 
<br />
<br />If I had to decide between smooth and fullscreen video playback using 4bpp tiles/subpalettes and less smooth, smaller video playback using 8bpp, I would clearly go for the 4bpp variant. 
<br />
<br />Colour math could be used to construct a mode between 4bpp and 8bpp. Like: use 4bpp tiles to store brightness and overlay it with 2bpp tiles for colour. Or just calculate a global 64 colour palette as a result of colour math between 4bpp and 2bpp layer, and use it. That would save 25% bandwidth compared to 8bpp. 
<br />
<br />If we use pre-calculated tiles for the 2bpp layer (like single colour hues for an 8x8 block), one could save even more, and it could even be more colourful than 8bpp. This would almost be like YUV quantization used in JPEG encoding. You would be surprised how much the human eye sucks at perceiving hues.
<br />
<br />The more I think about it, the more I really like this idea...  <img src="./images/smilies/icon_exclaim.gif" alt=":!:" title="Exclamation" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Jun 08, 2010 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Games like Doom on the other hand run pretty well in 256 colours. The DMA scheme is fast enough to let an outside controller render graphics in the VRAM of the PPU at acceptable frame rates. On NTSC, 256x150 graphics in 256 colours and constant 30 fps is absolutely possible. On PAL, this figure could be even higher (though I would not develop a game which only runs on one TV system). <br /><br />Besides, 4bpp is higly misleading, because you can (if we take HDMA, colour math and sprites out, though they make great status displays) still use up to 121 colours using subpalettes, without putting much additional strain on the bus.</div><br /><br />But you can do full screen with a PPU bus.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">CHR banking may have been good for swapping tiles in-and out (Neo Geo style), but would have been way more expensive on the other hand. For Nintendo (more cart lines, at least 2 ROM chips in cartridge) and the game developer (storing UNCOMPRESSED graphics in expensive mask roms). This is NOT efficient.</div><br /><br />Just because there are pinouts from the PPU to the cart doesn't mean it have to use CHR ROM.  Carts could be used to support expansion V-RAM or enhancement chips.  That's not to say that the system can't have both the V-RAM/DMA combo and a PPU bus at the same time.[/quote]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Tue Jun 08, 2010 3:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A full PPU bus would have meant another 50 or so pins on the cart connector, and at least 3 more chips, since the PPU has two mostly independent memory busses.
<br />
<br />If they were ever considering a switched rom, they would have had to toss mode-7.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Jun 08, 2010 4:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">A full PPU bus would have meant another 50 or so pins on the cart connector, and at least 3 more chips, since the PPU has two mostly independent memory busses.<br /><br />If they were ever considering a switched rom, they would have had to toss mode-7.</div>
<br />
<br />Have the first 64 KB V-RAM and the second 64 KB cartridge, and only allow Mode-7 to be run from the first 64 KB.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>6502freak</b> [ Tue Jun 08, 2010 4:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ReaperSMS wrote:</div><div class="quotecontent">If they were ever considering a switched rom, they would have had to toss mode-7.</div>
<br />
<br />YES, correct, I forgot about that! Because the PPUs don't have one, but two separate address buses for each SRAM chip. Without 2 address buses, there is no Mode 7.
<br />
<br />I think the WHAT IF THE <span class="posthilit">SNES</span> HAD BLABLA discussion here isn't particularly interesting any more, because in the end, the hardware is what it is, and the communication mechanism for external hardware is register driven DMA. Anyone not agreeing can look at the schematics, wire some obscure high density connector to all necessary signals on the mainboard, and make their personal "what if I had been a hardware designer at Nintendo" <span class="posthilit">SNES</span>.
<br />
<br />Instead, we should concentrate on the 6bit, compressed colour mode, and why no one did come up with that idea yet! <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />
<br />
<br />Perhaps I'm going to try making a test rom to see if the following could be useable:
<br />
<br />MODE 1, using one 4bpp and one 2bpp BG. 
<br />
<br />Palette entries for the 4bpp layer is 16 colour greyscale, to encode the brightness of the picture. This layer is full 256x224, taking 28672 bytes.
<br />
<br />Palette entries for the 2bpp layer is a 12 colour gradient between RGB. Replicate this gradient with 4 different intensities, and we have 96 different hues. Store 3 different 2bpp tiles to use all 96 hues with BG2 in 8x8 blocks. This layer takes 2*896 = 1792 bytes.
<br />
<br />Activate colour subtraction between BG1 and BG2. A compressed 256x224 picture with up to 96*15+1 = 1441 colours needs a transfer size of 30208 bytes.
<br />
<br />You may think that 8x8 colour blocks may look ugly, but a fact is that the human eye is very forgiving when it comes to the perception of colour. The most important aspect is that the brightness is full 256x224.
<br />
<br />When I have some time left, I'm going to test if this compression scheme is a valid approach.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Tue Jun 08, 2010 5:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You may think that 8x8 colour blocks may look ugly, but a fact is that the human eye is very forgiving when it comes to the perception of colour. </div><br /><br /> And that means what, exactly? Have you every written an automatic converter? I have and it's a pain in the ass to deal the errors and perceived artifacts for sub a single plane system. And it's slooooow, not real time. So it's not practical in a real world solution without having some serious ugly artifacts or sticking with a single 16(15) color palettes and treating it a single 4bit bitmap. SegaCD has many examples of rendering to 4bpp subpalette plane system. I think you'll find a common fact is that the pseudo bitmap for the vram is left/treated as straight 4bpp and one 16(15) color palette.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes, we can all construct our favourite <span class="posthilit">SNES</span> setup from a 2010 perspective, where ROM/RAM and processing speed is dirt cheap. This is not the case in 1990. 2.68 Mhz is really fast, considering that CD-ROMS and harddisks from that era were hardly pushing 150KB/s - 1MB/s.<br /></div><br /><br /> 2.68mhz is really fast for 1990? Yeah, maybe if the only thing you ever code were old 8bit computers or the <span class="posthilit">SNES</span>. Megadrive came out in 1988 and did 205 bytes per scanline. The PCE came out in 1987 and have near unrestricted access to vram (I/O) during active display - giving more bandwidth and active display at the same time per frame. And what relevance does CD-ROM and hard drives from that era have to do with anything? It's not "really fast, considering". It's <em>just about</em> relatively average, actually. <br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">CHR banking may have been good for swapping tiles in-and out (Neo Geo style), but would have been way more expensive on the other hand. For Nintendo (more cart lines, at least 2 ROM chips in cartridge) and the game developer (storing UNCOMPRESSED graphics in expensive mask roms). This is NOT efficient.<br /><br />DMA on the other hand, may be used for purposes far beyond graphics transfer. I think it's a much more elegant design than then NES custom mapper chaos. </div><br /><br /> First of all, the nes "mapper chaos" is what <em>prolonged</em> the life of the Famicom and NES to begin with. If the NES was stuck with straight vram and no DMA system, like the Master System that came out 2 years later, it would have fallen to the side. The mapped memory to the PPU is what gave it extreme flexibility. That's something SMS homebrew and demo coders could kill for on that system. For all the Famicom/NES graphic faults/weaknesses, the PPU memory mapped via cart was its biggest strength that helped over come that. Especially later on in the systems life.<br /><br /> Second, I never mentioned anywhere of ditching VRAM + local DMA. That's you jumping to conclusions. I was referring to having the PPU upgradeable via the port still, like how the original Famicom/NES was.<br /><br /> The two PPU setup was custom. Built from scratch. These weren't just some off the shelf parts. They could have done anything they wanted to during the design phase. To say they couldn't have done this or that, in realistic speculation, is ignorant IMO. Especially considering the video setup totally appears as though they tried to squeeze everything they could out of the chips. I'd say a lot of modes are pretty useless, but they're there. I doubt the design team blew a lot of chip real estate just for these limited features. I think it would be a fairly good assumption that they re-used a lot of module logic to get the most out of the chip(s) setup.<br /><br /> Third, did you even read what I wrote about the single <span class="posthilit">line</span> system on the cart port? The PPU active display is limited to 256 pixels. All you would need is 8 address lines on the cart port and 8 data lines for the bus. Fastrom supports 7.159mhz rom/ram. That's all you would need. *Any* external logic would take care of switching the 256byte page as the PPU signals from the cart port. There's nothing complex about that. That's a fairly simple design. And yes, it would require external logic - but how is that different from Nintendo already using a series of external chips to render to a buffer, that the PPU has to DMA to vram via cpu requests? Well, it's different in that it's much more efficient. Full 256x224/240 resolution at 60fps. And for what? 17 more lines on the cart interface?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Games like Doom on the other hand run pretty well in 256 colours. The DMA scheme is fast enough to let an outside controller render graphics in the VRAM of the PPU at acceptable frame rates.</div><br /><br /> Well, that's <em>your </em>opinion <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Besides, 4bpp is higly misleading, because you can (if we take HDMA, colour math and sprites out, though they make great status displays) still use up to 121 colours using subpalettes, without putting much additional strain on the bus. </div><br /><br /> Who cares what the total color count is? It's about freedom of use of color. And a subpalette system like that greatly impedes upon this. I'm no stranger to tile/tilemap graphics and programming for these old consoles. Or tweaking graphics and squeezing out as much color and detail as possible. Attention to detail via color is <em>not</em> directly relative to the highest color count. You can add all the overlays by sprites and <span class="posthilit">vertical</span> gradients and such. Matters nothing to detail, for where it counts. Let alone quoting the max color count for a subpalette system, <em>especially</em> in the context of a <em>real time </em>rendering system using that as the bitmap display.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">EDIT: I see, use 'bankswitching' via TDADDR for most of the buffering, and draw onto the rest during Vblank/Forceblank. It looks like you are limited to 20fps at 240x160 in NTSC mode, though.</div>
<br />
<br /> How does TDADDR work relative to MODE 7 and direct color mode?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>6502freak</b> [ Tue Jun 08, 2010 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"> And that means what, exactly? Have you every written an automatic converter? <br /></div><br /><br />Yes I have.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I have and it's a pain in the ass to deal the errors and perceived artifacts for sub a single plane system. And it's slooooow, not real time.</div><br /><br />I didn't ask YOU to write it. Let that be my problem. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> So it's not practical in a real world solution without having some serious ugly artifacts or sticking with a single 16(15) color palettes and treating it a single 4bit bitmap.</div><br /><br />You can't know for sure, because this method was never used on the <span class="posthilit">SNES</span>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> SegaCD has many examples of rendering to 4bpp subpalette plane system. I think you'll find a common fact is that the pseudo bitmap for the vram is left/treated as straight 4bpp and one 16(15) color palette.</div><br /><br />You don't seem to get what I was thinking about. I was talking about a encoding scheme related to the YUV quantization of the JPEG codec, using colour math between two layers. The 4bpp layer has the brightness of the picture, the 2bpp layer the hues.<br /><br />This is not in any way related to the Sega CD codecs using subpalettes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> 2.68mhz is really fast for 1990? Yeah, maybe if the only thing you ever code were old 8bit computers or the <span class="posthilit">SNES</span>. Megadrive came out in 1988 and did 205 bytes per scanline. </div><br /><br />Yeah, and it's also way more limited, since it can only do VRAM transfers. <span class="posthilit">SNES</span> has a general purpose DMA controller. It can be used for way more.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The PCE came out in 1987 and have near unrestricted access to vram (I/O) during active display - giving more bandwidth and active display at the same time per frame.</div><br /><br />I know that too. I even built my own development system for the PC-Engine using SD cards and wrote my own file system and browser.<br /><br />Is this now another discussion about which console is better?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And what relevance does CD-ROM and hard drives from that era have to do with anything?</div><br /><br />Simple: DMA is way more flexible, and obviously not only intended for graphics, which seems to be your fixed mindset. The expansion connector on the bottom of the <span class="posthilit">SNES</span> has also the DMA  lines.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It's not "really fast, considering". It's <em>just about</em> relatively average, actually. <br /></div><br /><br />If you quote me, do it properly. Considering the mass storage devices of its era, the bus is actually quite fast. Isn't DMA also used by the <span class="posthilit">SNES</span> Powerpack for very short loading times?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> First of all, the nes "mapper chaos" is what <em>prolonged</em> the life of the Famicom and NES to begin with. </div><br /><br />Maybe, but only because the initial hardware was quite spartanic to begin with.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If the NES was stuck with straight vram and no DMA system, like the Master System that came out 2 years later, it would have fallen to the side.</div><br /><br />Interesting, I always thought the Master System failed more due to lack of high profile third party developers like Konami, Capcom and Namco.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> The mapped memory to the PPU is what gave it extreme flexibility. That's something SMS homebrew and demo coders could kill for on that system. <br /></div><br /><br />I'll bet they also look with envy on the NES 2bpp graphics.<br /><br />You see how stupid this comparison is? We can now throw technical data back and forth, completely out of context of any actual real situations.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For all the Famicom/NES graphic faults/weaknesses, the PPU memory mapped via cart was its biggest strength that helped over come that. Especially later on in the systems life.</div><br /><br />Yes, but only because the initial configuration of the NES was very meagre to begin with.<br /><br />Luckily, we don't have that situation on the <span class="posthilit">SNES</span>. Well, we have another, more serious problem on the <span class="posthilit">SNES</span> than any lack of convoluted CHR bank scheme: lack of processing speed.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Second, I never mentioned anywhere of ditching VRAM + local DMA. That's you jumping to conclusions. I was referring to having the PPU upgradeable via the port still, like how the original Famicom/NES was.<br /></div><br /><br />Okay, so you want just to have everything. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />As I said: Nintendo should have the foresight to put every possible pin on the cartridge connector. That would have enabled the possibility in 2010 to built a super video accelerator, which in effect degrades the PPU to a 15 Bit DAC.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> The two PPU setup was custom. Built from scratch. These weren't just some off the shelf parts. They could have done anything they wanted to during the design phase. </div><br /><br />Sure, they could have put in the newest 32Bit CPU into the design.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">To say they couldn't have done this or that, in realistic speculation, is ignorant IMO.</div><br /><br />It's not about what they COULD have done. It's about how to avoid unnecessary costs. It's about to have a FOCUS. What is important to game developers and what isn't. Where to draw the <span class="posthilit">line</span> and say: STOP, that is enough. You have big problems to take a 1989/90 POV in this matter.<br /><br />Frankly? The crippled CPU speed and bus is a way more bigger problem. But even with that, developers were able to create amazing games. Nowadays, if there is a limitation, people want extra hardware in cartridges to fix them. And no, we are not being content with what is possible, we bitch constantly about what is NOT possible.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Especially considering the video setup totally appears as though they tried to squeeze everything they could out of the chips. I'd say a lot of modes are pretty useless, but they're there. I doubt the design team blew a lot of chip real estate just for these limited features.</div><br /><br />Like what? Mode 7? Colour math? Hardware multiplication and addition? 128 Sprites? DMA/HDMA?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Third, did you even read what I wrote about the single <span class="posthilit">line</span> system on the cart port? The PPU active display is limited to 256 pixels. All you would need is 8 address lines on the cart port and 8 data lines for the bus. Fastrom supports 7.159mhz rom/ram. That's all you would need.</div><br /><br />What are you talking about??? You were talking about some scheme to directly control the PPU through the cartridge port, providing an external framebuffer, accessible to the CPU and any external devices, somehow similar to MMC5 on the NES.<br /><br />I'm sorry to burst your bubble, but that would take way more than just an 8 Bit <span class="posthilit">line</span> buffer (not to mention the fact that he PPU has a 16 Bit data bus). It would take an entirely seperate frame buffer, and an additional bus controller which monitors the PPU to schedule the accesses between this frame buffer and any external devices.<br /><br />Of course, you could now say: well, let's take the biggest FPGA with the biggest dual port ram, and connect it to the PPU.<br /><br />Like I said: 2010 perspective for a 1990 game console. Nintendo should have seriously thought about that. <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> *Any* external logic would take care of switching the 256byte page as the PPU signals from the cart port. There's nothing complex about that. That's a fairly simple design.</div><br /><br />So you are just talking about a 256Byte ROM bankswitch scheme with 256 byte Pages? I don't follow you at all. What is *ANY* external logic?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> And yes, it would require external logic - but how is that different from Nintendo already using a series of external chips to render to a buffer, that the PPU has to DMA to vram via cpu requests?</div><br /><br />DMA has not to be in close sync with the PPU. DMA has not not fight with the PPU for memory access cycles during rendering. Register driven DMA allows for very simple FIFO buffers for communication.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Well, it's different in that it's much more efficient. Full 256x224/240 resolution at 60fps. And for what? 17 more lines on the cart interface?</div><br /><br />You are now pulling all these vague descriptions and half thought-out concepts out of your butt. I'd suggest you study the schematics first, before your fantasy is running wild here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Well, that's <em>your </em>opinion <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /></div><br /><br />Yeah, it's obviously not my mother's, thanks for the reminder.<br /><br />I'd suggest then to play Doom on a decent 486/Pentium/Core i7 PC, and not a cheap 1990 16 Bit console.<br /><br />I guess according to you, Nintendo should have taken the 32X route. We all know how great that concept turned out.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Who cares what the total color count is? It's about freedom of use of color. <br /></div><br /><br />Then I guess you are on the wrong system then.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And a subpalette system like that greatly impedes upon this. <br /></div><br /><br />Yeah, boohoo. But it's an unchangeable reality: either have "freedom of choice in colours(tm)" and less speed, or have more speed with more restrictions. Again: you wanna have it all. For you, retro developing seems about what the consoles CAN'T do, and not what they CAN do. Every obstacle causes you to whine.<br /><br />Gosh, I hope you never come across an Atari 2600.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm no stranger to tile/tilemap graphics and programming for these old consoles.<br /></div><br /><br />That's good, because otherwise, this would be a fairly pointless discussion.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Or tweaking graphics and squeezing out as much color and detail as possible.</div><br /><br />Tedious work, isn't it?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Attention to detail via color is <em>not</em> directly relative to the highest color count.<br /></div><br /><br />I didn't say so. Nor has it any relevance to the point I was making that using subpalettes can increase the amount of colour detail.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> You can add all the overlays by sprites and <span class="posthilit">vertical</span> gradients and such. Matters nothing to detail, for where it counts. </div><br /><br />With sprites, you can enhance colour detail a lot. Ask any C64 coder.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Let alone quoting the max color count for a subpalette system, <em>especially</em> in the context of a <em>real time </em>rendering system using that as the bitmap display.<br /></div>
<br />
<br />No matter how many words you are using up here, fact is: 4bpp tiles with supbalettes &gt;&gt; 4bpp tiles with fixed 16 colour palette in terms of colour detail.
<br />
<br />And now I am really fed up with this. This discussion is unproductive, because in the end, we are ending up discussing the CAN'Ts when bitching about how much could have been possible when all <span class="posthilit">SNES</span> signals would have been put on the cartridge connector.
<br />
<br />The fact remains: they aren't. I see the possibilities with a flexible DMA system, you refuse to see them and cling to a fantasy.
<br />
<br />You know what? You should start developing on the Neo Geo then. This seems to be the perfect architecture for you. But then I guess you would find lots of other things which don't suit your taste.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jun 08, 2010 8:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">How does TDADDR work relative to MODE 7 and direct color mode?</div>
<br />
<br />The memory layout is hard-coded for Mode7, so TDADDR does nothing :(

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Tue Jun 08, 2010 8:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />6502freak: Wow, <em>that</em> is really petty. Nerd rage is never a pretty thing. I'm not going to even touch that reply (too bad, there is some good stuff/topics to talk about there and you're obviously a pretty intelligent guy). You need to seriously calm down/take a chill pill (and you're presumptions about me couldn't be more wrong, not that you care though). ;&gt;_&gt;
<br /> 
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The memory layout is hard-coded for Mode7, so TDADDR does nothing <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /></div>
<br />
<br /> Ahh ok. I thought I was missing something there for a minute.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>