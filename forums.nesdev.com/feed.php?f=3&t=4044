<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=4044" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-04-14T21:20:25-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=4044</id>
<entry>
<author><name><![CDATA[mattmatteh]]></name></author>
<updated>2008-04-14T21:20:25-07:00</updated>
<published>2008-04-14T21:20:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4044&amp;p=32716#p32716</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4044&amp;p=32716#p32716"/>
<title type="html"><![CDATA[PPU playfield rendering quirk question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4044&amp;p=32716#p32716"><![CDATA[
i dont have my code in front of me so i can not check what i have.  at the moment i am using an exact pixel method which has the shift registers.  its a good way to learn the nes but very slow and generally not needed.  i think i got mine to work by reading brad taylors docs and then trial and error.  also there is more information on the wiki and brad taylors docs have some errors, and some is speculation, it may not be correct<br /><br />matt<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=170">mattmatteh</a> — Mon Apr 14, 2008 9:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[EvtimDjerekarov]]></name></author>
<updated>2008-04-13T07:08:35-07:00</updated>
<published>2008-04-13T07:08:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4044&amp;p=32679#p32679</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4044&amp;p=32679#p32679"/>
<title type="html"><![CDATA[PPU playfield rendering quirk question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4044&amp;p=32679#p32679"><![CDATA[
Hello,<br /><br />I am writing a NES emulator, and Brad Taylor's "NTSC 2C02 technical reference" says that at the end of a playfield tile fetch phase for a given tile, its just fetched pattern table bytes #0 and #1 are put into the most significant bytes of two 16-bit shift registers that shift right every PPU clock cycle. <br /><br />The 2 bits of pallete select data for this particular tile are loaded in two 8-bit shift registers, also shifted every clock, to implement fine horizontal scrolling with the correct pallete select data.<br /><br />Depending on fine horizontal scroll value(0...7), bit 0 - 7 is selected in all 4 shift registers. These four bits are used as the pallete index for the current playfield pixel.<br /><br />The document also states that:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />the precise delay between when a tile's bitmap fetch phase starts (the whole 4 memory fetches), and when the first pixel of that tile's bitmap data hits the video out pin, the formula is (16-n) clock cycles, where n is the fine horizontal scroll offset (0..7 pixels).<br /></div><br /><br />As we know, at scanline cycles 0..255, 32 tile fetches occur, the first one being for the 3-rd tile drawn on the current scanline, and the last two - for the first two tiles of the next scanline.<br /><br />Each tile fetch consists of 4 fetches(2 clock cycles each):<br />1. Fetch Name table byte<br />2. Fetch Attribute table byte<br />3. Fetch Pattern table bitmap #0<br />4. Fetch Pattern table bitmap #1<br /><br />So each complete tile fetch takes 8 PPU clock cycles.<br /><br />Now, I will try to illustrate what I believe to be the shift register behaviour:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0 - meaningless data<br />1 - data for tile #1<br />2 - data for tile #2<br />3 - data for tile #3<br />4 - data for tile #4<br /><br />the 16-bit value indicates one of the 16-bit PT shift registers<br />the 8-bit value&#40;prefixed tith *&#41;<br />indicates one of the 8 bit AT palette select shift registers.<br /><br />CC     MSByte   LSByte<br />CC 00 22222222|11111111 &lt;- Fetch phase for tile #3 begins at the beginning of CC 0<br />CC 01 02222222|21111111              &#40;takes cycles 0..7&#41;<br />CC 02 00222222|22111111<br />CC 03 00022222|22211111<br />CC 04 00002222|22221111<br />CC 05 00000222|22222111<br />CC 06 00000022|22222211<br />CC 07 00000002|22222221<br />CC 08 33333333|22222222 &lt;- Tile #3 fetch phase ends at the end of CC7<br />CC 09 03333333|32222222   &#40;the 16-bit register is FIRST shifted, and then<br />              *32222222     MSB updated with #3 byte&#41;<br />CC 10 00333333|33222222    <br />              *33222222    <br />CC 11 00033333|33322222<br />              *33322222<br />CC 12 00003333|33332222<br />              *33332222<br />CC 13 00000333|33333222<br />              *33333222<br />CC 14 00000033|33333322<br />              *33333322<br />CC 15 00000003|33333332<br />              *33333332<br />CC 16 44444444|33333333 &lt;- If fine horizontal scroll is 0, the first<br />              *33333333    tile #3 pixel will be drawn at CC 16<br />CC 17 04444444|43333333     <br />CC 18 00444444|44333333<br /><br /></div><br /><br />If that is correct, it would mean that:<br />1. Before the PT byte is latched into the MSB of a reg, the reg is first shifted right.<br /><br />2. After PT is latched into the MSbyte , no further shifts are made during this cycle.<br /><br />3.  The pallete select data is loaded into the first bit of the 8bit AT shift registers EXACTLY 9 CC's after the corresponding tile fetch starts(if it starts at the beginning of CC0, the first palette value will be shifted into the AT shift register during CC9).<br /><br />4. the pixel data is fet to the video out pin AFTER all shifts for the current cycle are made<br /><br />I have one more question. As far as I know, A pattern table byte is drawn like this:<br /><br />leftmost pixel -&gt;01011001&lt;- rightmost pixel<br /><br />The screen ray moves from left to right on the screen -&gt;<br /><br />Now, if we load the PT byte into the leftmost byte of the 16-bit shift register, and shift it right every clock, the first bit to reach the video out pin will be the bit of the rightmost tile pixel, which the TV ray will draw as the leftmost, and will flip the tile horizontally.<br /><br />So, isn't it really the least significant byte of the shift reg that is loaded with the PT byte, and isn't it shifted left every clock?<br /><br />Cheers,<br />Evtim<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3511">EvtimDjerekarov</a> — Sun Apr 13, 2008 7:08 am</p><hr />
]]></content>
</entry>
</feed>