<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=2007" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-09-11T20:58:31-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=2007</id>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2006-09-11T20:58:31-07:00</updated>
<published>2006-09-11T20:58:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17256#p17256</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17256#p17256"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17256#p17256"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />I'm not aware of PRG or RAM ever being placed at $4xxx, however readable and/or writable registers are placed there for several mappers.<br /></div><br />I hear there are some pirate MMC3 games which put ram at 5000-5FFF.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Mon Sep 11, 2006 8:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-09-11T16:27:08-07:00</updated>
<published>2006-09-11T16:27:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17249#p17249</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17249#p17249"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17249#p17249"><![CDATA[
<div class="quotetitle">mattmatteh wrote:</div><div class="quotecontent"><br />i was looking at organization and optimization. but i suppose some function calls in the cpu are not that bad.<br /></div><br />I've done quite a bit of profiling of memory accesses and found that the efficiency of $4xxx accesses doesn't really matter since so few are to that region as compared to other areas. It really pays to do some profiling before twisting code into something complex, since it might not matter. Start off with a profile of the most common instructions, then profile the most common memory instructions. I found that only a few are popular. Within these, profile the most common memory regions. You'll find that it's $0-$7FF, $2002 (LDA abs and BIT abs), and reads from $8000-$FFFF. With this information you can add custom inline code to these opcode handlers to handle the common cases most efficiently. Once you have a clear picture of things it gets quite interesting to plan optimizations.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Sep 11, 2006 4:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mattmatteh]]></name></author>
<updated>2006-09-11T14:24:48-07:00</updated>
<published>2006-09-11T14:24:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17245#p17245</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17245#p17245"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17245#p17245"><![CDATA[
almost forgot about the game genie......<br /><br />as i said before, mine is one fucntion call to cpu_read and cpu_write.  having one function keeps it structured and organized.  i might have to leave it that way.  maybe just do a direct array access with ram. i was thinking of doing that with reading 8000-ffff, but that would conflict with game genie.<br /><br />so far i only talked about the cpu and memory, i also need to apply this to the ppu.  again i am using one function for reads and writes.  i think i can do this with array pointers and skip the funciton call.  i just have to watch out for the scan line counter on mmc5 i think....  i also know that there are many optimizations for the ppu, i'll start with memory reads to keep it simple.<br /><br />matt<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=170">mattmatteh</a> — Mon Sep 11, 2006 2:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-09-11T14:11:12-07:00</updated>
<published>2006-09-11T14:11:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17243#p17243</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17243#p17243"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17243#p17243"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />blargg is too fast =o.  His outlined methods don't quite match what I'm doing though, so my post wasn't a total waste.<br /></div><br /><br />Your method also matches what my emulator does - define "default" routines for each address range, and allow mappers and such to <strong>hook</strong> onto them, passing control to the original routine after handling its own stuff.<br /><br />An example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// emu.c:<br /><br />void Write4 &#40;int addr, byte val&#41;<br />&#123;<br />    /* handle $4000-$4017 */<br />&#125;<br /><br />WRITEPTR writes&#91;16&#93; = &#123;foo,foo,foo,foo,Write4,etc&#125;;<br /><br />...<br /><br />// fds.c<br /><br />static WRITEPTR old4;<br /><br />void fdsWrite4 &#40;int addr, byte val&#41;<br />&#123;<br />    if &#40;&#40;addr &gt;= 0x4020&#41; &amp;&amp; &#40;addr &lt;= 0x407F&#41;&#41;<br />        /* handle FDS stuff */<br />    old4&#40;addr, val&#41;;<br />&#125;<br /><br />void fds_init &#40;void&#41;<br />&#123;<br />    old4 = writes&#91;4&#93;;<br />    writes&#91;4&#93; = fdsWrite4;<br />&#125;</div><br /><br />Mind you, my emulator does this without any direct access to 'writes' - it uses a pair of functions 'GetCPUWriteFunc(bank)' and 'SetCPUWriteFunc(bank,ptr)' which are exposed through the mapper interface, and it has the same thing for CPU reads (as well as PPU read/write, which was needed for a 'sane' MMC5 implementation).<br /><br />The biggest advantage of this is that it allows you to daisy-chain as many handlers you want to <em>dynamically</em> (i.e. without the central I/O code ever having to know about any specific extensions), which can increase code re-use with some of the MMC3 "supermappers" found in pirate multicarts, improve separation between mapper code and mapper sound code (for cleaner NSF support), and even allow simple 'proper' Game Genie support (handled in my emulator by overriding the default read handlers for $8000-$FFFF to perform the value substitutions).<br />The downside is that it can degrade performance, for which my emulator is a prime example.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Mon Sep 11, 2006 2:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mattmatteh]]></name></author>
<updated>2006-09-11T13:04:54-07:00</updated>
<published>2006-09-11T13:04:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17238#p17238</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17238#p17238"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17238#p17238"><![CDATA[
right now mine is set up like blargg's method 1.  i  think i might use a function pointer and change it depending on the mapper.<br /><br />i was looking at organization and optimization.  but i suppose some function calls in the cpu are not that bad.<br /><br />thanks<br /><br />matt<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=170">mattmatteh</a> — Mon Sep 11, 2006 1:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-09-11T12:52:40-07:00</updated>
<published>2006-09-11T12:52:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17237#p17237</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17237#p17237"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17237#p17237"><![CDATA[
<div class="quotetitle">mattmatteh wrote:</div><div class="quotecontent"><br />mostly i was interested in how mappers used 4018-4fff since it doesnt fall on a nice page boundary.  it also makes coding easier if i have a heads up on how the memory sections are used.<br /></div><br /><br />I'm not aware of PRG or RAM ever being placed at $4xxx, however readable and/or writable registers are placed there for several mappers.<br /><br />I don't really have a elegant solution for this... basically I just have my mapper hijack my $4xxx r/w function pointers to call a mapper function, then the mapper function calls the "normal" function if the address is less than $4018.<br /><br />EDIT -- blargg is too fast =o.  His outlined methods don't quite match what I'm doing though, so my post wasn't a total waste.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Sep 11, 2006 12:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-09-11T12:51:02-07:00</updated>
<published>2006-09-11T12:51:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17236#p17236</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17236#p17236"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17236#p17236"><![CDATA[
A cartridge can map any portion of the address space to its devices, even addresses already mapped to internal NES hardware (which of course would create a bus conflict). Similar to an emulator, it's usually simpler to map a large block on a clean boundary since it uses less address decoding logic.<br /><br />As for the emulator, decoding devices whose registers are mixed together in a small space shouldn't be a problem at all. Either have a single switch statement that decodes each address and hands it to the appropriate device, or chain the device handlers together. Either way, you can still use a table to divide the address space into large areas.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* 1.Use a switch statement. Simpler, but less modular. */<br />void write_4xxx&#40; int addr, int data &#41;<br />&#123;<br />    /* handles writes from 0x4000-0x4FFF */<br />    switch &#40; addr &#41; &#123;<br />        case 0x4000:<br />        case 0x4001:<br />        ...<br />        case 0x4013:<br />        case 0x4015:<br />        case 0x4017:<br />            write_apu&#40; addr, data &#41;;<br />            break;<br />        <br />        case 0x4014:<br />            write_sprite_dma&#40; data &#41;;<br />            break;<br />        <br />        case 0x4016:<br />            write_controller&#40; data &#41;;<br />            break;<br />        <br />        default:<br />            write_mapper&#40; addr, data &#41;;<br />            break;<br />    &#125;<br />&#125;<br /><br />/* 2.Chain handlers. More modular, but somewhat less efficient. */<br />int write_controller&#40; int addr, int data &#41;<br />&#123;<br />    switch &#40; addr &#41; &#123;<br />        case 0x4016:<br />            ...<br />            return 1; /* we handled the write */<br />    &#125;<br />    return 0; /* tell caller to pass the write to next device */<br />&#125;<br /><br />int write_apu&#40; int addr, int data &#41;;<br /><br />void write_4xxx&#40; int addr, int data &#41;<br />&#123;<br />    /* handles writes from 0x4000-0x4FFF */<br />    <br />    if &#40; write_controller&#40; addr, data &#41; &#41;<br />        return;<br />    <br />    if &#40; write_apu&#40; addr, data &#41; &#41;<br />        return;<br />    <br />    if &#40; write_sprite_dma&#40; addr, data &#41; &#41;<br />        return;<br />    <br />    write_mapper&#40; addr, data &#41;;<br />&#125;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Sep 11, 2006 12:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mattmatteh]]></name></author>
<updated>2006-09-11T12:02:41-07:00</updated>
<published>2006-09-11T12:02:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17231#p17231</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17231#p17231"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17231#p17231"><![CDATA[
mostly i was interested in how mappers used 4018-4fff since it doesnt fall on a nice page boundary.  it also makes coding easier if i have a heads up on how the memory sections are used.<br /><br />thanks<br />matt<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=170">mattmatteh</a> — Mon Sep 11, 2006 12:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-09-11T11:38:27-07:00</updated>
<published>2006-09-11T11:38:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17229#p17229</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17229#p17229"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17229#p17229"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />If FC stuff isn't an issue, I think you can keep 6000-7FFF solely as SRAM.<br /></div><br /><br />Mapper 069 (FME-7 and compatible) can put PRG-ROM at $6000-7FFF.  I believe both J and E versions of Gimmick! require this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Sep 11, 2006 11:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2006-09-11T11:29:59-07:00</updated>
<published>2006-09-11T11:29:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17228#p17228</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17228#p17228"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17228#p17228"><![CDATA[
If FC stuff isn't an issue, I think you can keep 6000-7FFF solely as SRAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Mon Sep 11, 2006 11:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mattmatteh]]></name></author>
<updated>2006-09-11T11:28:20-07:00</updated>
<published>2006-09-11T11:28:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17227#p17227</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17227#p17227"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17227#p17227"><![CDATA[
at the moment i probably will not support the FC peripherals.  i might later on.  i wasnt sure if the were commonly used.  i suppose i could add some of those mapped area's later.<br /><br />thanks<br /><br />matt<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=170">mattmatteh</a> — Mon Sep 11, 2006 11:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2006-09-11T11:17:02-07:00</updated>
<published>2006-09-11T11:17:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17225#p17225</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17225#p17225"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17225#p17225"><![CDATA[
Do you plan to support FC peripherals? Many early FC mappers use 6000-7FFF, a few 3rd party use 5000-5FFF like MMC5 such as "Namco 106", and many hardware devices (both FDS and piracy stuff) use 4018-4FFF.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Mon Sep 11, 2006 11:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mattmatteh]]></name></author>
<updated>2006-09-11T11:01:27-07:00</updated>
<published>2006-09-11T11:01:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17221#p17221</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17221#p17221"/>
<title type="html"><![CDATA[mapper registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2007&amp;p=17221#p17221"><![CDATA[
working on recoding my cpu memory and was reading the mapper stuff on the wiki.  seems that most mappers use (all in hex) 8000-ffff for writes.  only mmc5 uses 5000-5fff.  do any use 4018-4fff ?  and i think there was 1 that used 6000-7fff for registers and ram ?<br /><br />a comparison chart would be nice.  i dont think i am familiar enough with all the mappers to do it myself yet.<br /><br />thanks<br /><br />matt<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=170">mattmatteh</a> — Mon Sep 11, 2006 11:01 am</p><hr />
]]></content>
</entry>
</feed>