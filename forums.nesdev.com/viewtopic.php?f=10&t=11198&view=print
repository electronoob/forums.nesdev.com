<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Assorted hardware questions: Audio out, EEPROM chips, etc.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Assorted hardware questions: Audio out, EEPROM chips, etc.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11198">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11198</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nick</b> [ Sun Apr 27, 2014 11:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Assorted hardware questions: Audio out, EEPROM chips, etc.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />cout &lt;&lt; &quot;Hello, NesDev&quot;;<br /><br />I'm completely new to NES hardware, and am currently in the research phase for a project I am considering. Some of my questions could be easily answered if I had an oscilloscope, but I do not have one yet.<br /><br />The questions that are currently on my mind as I prepare to turn in for the night are:<br /><br />1. Does the audio output use the system ground as a reference voltage, or a virtual ground?<br /><br />2. Is there any reason why I shouldn't use <a href="http://www.mouser.com/ProductDetail/Greenliant/GLS29EE010-70-4C-PHE/?qs=sGAEpiMZZMuVhdAcoizlRUrzuER%2fhv8N8Xdb8zCtxnc%3d" class="postlink">this EEPROM chip</a> for a custom ROM cart? I can't think of any issues, but I thought I should check with more experienced NES developers and hackers before I invest a lot of time to making a custom cart based on this chip.<br /><br />3. Is video output at all exploitable as digital IO?<br /><br />Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Apr 27, 2014 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nick wrote:</div><div class="quotecontent">1. Does the audio output use the system ground as a reference voltage, or a virtual ground?<br /></div>Coaxial audio signals often tie the shield to ground of both sides ... sometimes that causes ground loops. In any case, the audio output of the NES is AC coupled, with only capacitors to the original audio and to ground. Here's some (reverse engineered) schematics: <!-- m --><a class="postlink" href="http://console5.com/wiki/Nintendo_NES-001">http://console5.com/wiki/Nintendo_NES-001</a><!-- m --><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2. Is there any reason why I shouldn't use [this 128KiB 5V Greenliant] EEPROM chip for a custom ROM cart?<br /></div>I haven't heard of Greenliant before, but they seem to be related to SST, and people around here haven't had any problems with those. In general, the obnoxious part is having a programmer, so do take care of that first. That price also looks a little high relative to other products I've seen; e.g. Greenliant's GLS27SF010 (flash) is ~40¢ cheaper from Mouser, and the SST39SF010 is ~90¢ cheaper direct from Microchip.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. Is video output at all exploitable as digital IO?<br /></div>... Digital output of what? The NES's CPU can't really push pixels all that fast, relative to retrace speeds. (It wasn't designed like the ZX80 or Galaksija). Additionally, bandwidth to the PPU is limited, so you can't update all that much content per vsync.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nick</b> [ Mon Apr 28, 2014 8:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1) Thanks! I'll study those diagrams.<br /><br />2) Thanks again. I'm looking to use an on-board wi-fi enabled microcontroller (<a href="https://www.spark.io/" class="postlink">this one</a>) and a few flip-flops and multiplexers as a programmer, so most of the trouble in that regard will be in the design process.<br /><br />3) I was thinking of something along the lines of PWM, but I don't think that is a worthwhile pursuit anymore. I'll instead direct my questions toward a somewhat more promising avenue, as below.<br /><br />How much direct control does the programmer have over the data on the PPU address lines? That is, if I were to replace the graphical memory with some peripheral that reads the address lines, could I directly control the peripheral by telling the hardware to load specific bytes, and latching the address when it is stable?<br /><br />For example, if I connected an LED to each (latched) address line, could I tell the NES to light every other LED by &quot;reading&quot; 14'b10101010101010, or would this command automatically result in several sequential reads of different addresses?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Mon Apr 28, 2014 9:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nick wrote:</div><div class="quotecontent">How much direct control does the programmer have over the data on the PPU address lines? That is, if I were to replace the graphical memory with some peripheral that reads the address lines, could I directly control the peripheral by telling the hardware to load specific bytes, and latching the address when it is stable?</div>What would this accomplish that you couldn't do by connecting the peripheral to the CPU address bus instead?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nick</b> [ Mon Apr 28, 2014 10:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was under the impression, perhaps mistakenly, that the CPU address bus was used to load instructions from the program in ROM. If that's what it does, I want it to perform its intended function.<br /><br />Edit:<br /><br />To answer more directly: If the CPU address bus is used to load instructions from ROM, then I do not want addresses unrelated to the actual program to show up on that bus, in order to prevent the NES from loading garbage instructions.<br /><br />Video out is disposable, but the stored program is not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Apr 28, 2014 12:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nick wrote:</div><div class="quotecontent">2) Thanks again. I'm looking to use an on-board wi-fi enabled microcontroller (<a href="https://www.spark.io/" class="postlink">this one</a>) and a few flip-flops and multiplexers as a programmer, so most of the trouble in that regard will be in the design process.<br /></div>The Spark is 3.3V, and the 'PROMs you'll need to use with the NES must be 5V tolerant. The 'PROMs may not be programmable if fed only 3.3V (I would not expect the previously mentioned ones to be) The Spark does appear to be almost entirely 5V tolerant.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3) I was thinking of something along the lines of PWM, but I don't think that is a worthwhile pursuit anymore.<br /></div>If you want 8 bit deep PWM at 16kHz, with obnoxious gaps for 22 out of every 262 samples, you could get that.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How much direct control does the programmer have over the data on the PPU address lines?<br /></div>Canonically, the NES connects RAM or ROM to the PPU's address bus, so ... depending on what exactly you mean, &quot;Lots&quot; ?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">replace the graphical memory with some peripheral that reads the address lines, could I directly control the peripheral by telling the hardware to load specific bytes, and latching the address when it is stable?<br /></div>The PPU's address bus is really almost identical to any other address bus. It just has a very deterministic pattern when displaying video... 2000, 23C0, 0xx0, 0xx8, 2001, 23C0, 0xx0, 0xx8, &amp;c.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For example, if I connected an LED to each (latched) address line, could I tell the NES to light every other LED by &quot;reading&quot; 14'b10101010101010, or would this command automatically result in several sequential reads of different addresses?<br /></div>While the PPU is off and told to NOT render anything, you can control its address bus as a 14-bit output. But there's no particular advantage to doing so, relative to adding a latch that's connected to the CPU's address space like on the various discrete logic games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nick</b> [ Mon Apr 28, 2014 1:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">The Spark is 3.3V, and the 'PROMs you'll need to use with the NES must be 5V tolerant. The 'PROMs may not be programmable if fed only 3.3V (I would not expect the previously mentioned ones to be) The Spark does appear to be almost entirely 5V tolerant.</div><br /><br />I'm not too worried about that - I intend to power the Spark with 5V, and then tie its outputs to a transistor array.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you want 8 bit deep PWM at 16kHz, with obnoxious gaps for 22 out of every 262 samples, you could get that.</div><br />Eh, that's probably a bit dirty. Thanks.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Canonically, the NES connects RAM or ROM to the PPU's address bus, so ... depending on what exactly you mean, &quot;Lots&quot; ?</div><br />For exactly what I mean: Can I simply STA to some address and have the value in A show up on the first 8 bits of the address bus indefinitely?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">While the PPU is off and told to NOT render anything, you can control its address bus as a 14-bit output. But there's no particular advantage to doing so, relative to adding a latch that's connected to the CPU's address space like on the various discrete logic games.</div><br />Let me list my assumptions concerning this, so that they may be either confirmed or corrected:<br /><br />1. Before every instruction, the instruction must be loaded from the ROM.<br />2. During this load phase, the address of the next instruction will be present on the CPU address bus.<br />3. Besides using some sort of serial protocol (such as loading a certain sequence of addresses in order) or reserving certain bits of the address bus, there is no way to distinguish between instructions and peripheral outputs.<br /><br />These three assumptions are why I am considering the PPU address bus instead of the CPU address bus. Are they incorrect?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Apr 28, 2014 2:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nick wrote:</div><div class="quotecontent">Let me list my assumptions concerning this, so that they may be either confirmed or corrected:<br /><br />1. Before every instruction, the instruction must be loaded from the ROM.<br /></div>Yes, it's just a 6502. The exact timing is detailed <a href="http://nesdev.com/6502_cpu.txt" class="postlink">here</a>, amongst other places. Also Visual6502 and Visual2A03 are good references.<br />To TL;DR that:<br />6502 has a clock called φ2. The address bus from the 6502 is stable while φ2 is high, as are writes on the data bus. Data for reads must have arrived by the falling edge of φ2. Any given instruction consists of one to three bytes, which are the first bytes read from memory for any given instruction. Additional bus activity might happen afterwards.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. Besides using some sort of serial protocol (such as loading a certain sequence of addresses in order) or reserving certain bits of the address bus, there is no way to distinguish between instructions and peripheral outputs.<br /></div>You don't need to reserve whole bits for specific functionality (And, in fact, cannot, due to the mechanisms of the 6502). Instead, the hardware designer chooses a specific set of addresses to map to certain functions. For example, the NES's RAM is mapped from $0000-$1FFF, and the PPU is available from $2000-$3FFF. The NES's sound registers are mapped from only $4000-$4015. An extra IC such as a 74'138 would allow you to decode a smaller subset of the 64KiB address range the 2A03 can address. If you combine that with a latch, such as a 74'74, you can make a region of memory (say $6000-$67FF) which will store the number your program wrote.<br /><br />Additionally, there is no constraint that your registers not overlap your program data. Many NES games took advantage of this. The 74'161 was used in a large number of NES games to extend the total amount of memory (either program or graphic) that the game could address.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nick</b> [ Mon Apr 28, 2014 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That is very informative. Thank you!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Fri May 09, 2014 11:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assorted hardware questions: Audio out, EEPROM chips, et</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you have no need for video out (although I don't know why you wouldn't need it), you can in fact use the PPU address bus to control peripheral devices, without adding much extra logic to control them.<br /><br />You can use the audio out to generate square waves of varying duty and frequency, although it is important to know that these are analog signals so you should connect to something that is using such a signal (normally, it is the speaker in a TV set).<br /><br />What is it that you are trying to make anyways?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>