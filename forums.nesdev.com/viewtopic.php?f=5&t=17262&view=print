<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Programming in C - questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Programming in C - questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=17262">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=17262</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sat Apr 14, 2018 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1. The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">structure.member</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">structure-&gt;pointer</tt>?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef struct {<br />&nbsp;int value1, value2; <br />} STRU_T;<br /><br />//this<br />static STRU_T mystru;<br /><br />//OR...<br /><br />static STRU_T tmp;<br />static STRU_T *mystru = &amp;tmp;</div><br />2. memcpy() or memset() VS &quot;manual&quot; set to zero.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">memset(buffer,0,8);<br /><br />//OR...<br /><br />unsigned char *buf = buffer;<br />*buf = 0; buf++; //1<br />*buf = 0; buf++; //2<br />*buf = 0; buf++; //3<br />*buf = 0; buf++; //4<br />*buf = 0; buf++; //5<br />*buf = 0; buf++; //6<br />*buf = 0; buf++; //7<br />*buf = 0; //8</div><br />3. Buffer I/O<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">unsigned char *buffer = malloc(0x100);<br />...<br />buffer&#91;index&#93; = data;<br /><br />//OR...<br /><br />*(buffer+index) = data;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Apr 14, 2018 2:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In terms of maintainability, <em>never</em> unroll your loops manually. Modern compilers and modern CPUs will know better than you if it's beneficial. (Memset, in particular, is often already a specially optimized function. You're not going to be able to write something faster, especially not in C, and probably not even in asm)<br /><br />For numbers 1 and 3, &quot;it depends&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Apr 14, 2018 3:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">//this<br />static STRU_T mystru;<br /><br />//OR...<br /><br />static STRU_T tmp;<br />static STRU_T *mystru = &amp;tmp;</div></div><br />Definitely the first one. Why would you want to use indirect access when you can access the variable directly? Direct access is smaller and faster (at least for global variables. Local variables are internally accessed via stack pointer anyway, but even here there's no reason to add yet another pointer.)<br /><br />Pointers only make sense here if the pointer is the parameter variable of a function:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void SomeFunction(MyStruct *pStruct)</div><br /><br /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">2. memcpy() or memset() VS &quot;manual&quot; set to zero.</div><br />memset if you want to set all bytes to the same value.<br /><br />Take care if your array is of type int (or any other non-byte type) and you want to initialize with anything non-zero: The value that you set refers to every single byte, not every array item:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int array&#91;5&#93;;<br />memset(array, 1, 5 * sizeof(int));</div><br />This will <em>not</em> set all five values to 1. It will set all separate <em>bytes</em> to 1.<br />So, if the int consists of two bytes, then each array item will now have the value 257 (0x0101).<br /><br />memcpy if you want to copy data from another array.<br />(Using memcpy to initialize with 0 or any other single byte value makes no sense. Where do you take the source data from? Do you have some constant array with all zeroes in it that's only there to initialize other arrays with 0 by using it with memcpy?)<br /><br />And for everything else (for example if you really have an int array that you want to initialize with a certain value per entry and not per byte), you should use a for loop and not initialize every entry individually:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int i; /* Use unsigned char instead of int if you program for the NES<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; and your array is less than 255 entries. */<br />for (i = 0; i &lt; 5; ++i)<br />&nbsp; &nbsp; array&#91;i&#93; = 1;</div><br />But even if you <em>do</em> initialize each item individually (because each item gets another value that cannot be calculated somehow), the best method is<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">array&#91;0&#93; = 25;<br />array&#91;1&#93; = 7;<br />array&#91;2&#93; = 130;</div><br />etc. and not<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">unsigned char *pointer = array;<br />*pointer = 25;<br />++pointer;<br />*pointer = 7;<br />++pointer;<br />*pointer = 130;<br />++pointer;</div><br /><br />An additional suggestion (at least for NES programming. It isn't necessary in PC programs): If your arrays are never larger than 255 bytes, write your own CopyData and FillData function in Assembly where the size parameter is of type byte instead of size_t. Makes the function smaller and faster than the official memcpy and memset functions.<br /><br /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">buffer&#91;index&#93; = data;<br /><br />//OR...<br /><br />*(buffer+index) = data;</div></div><br />The compiler shouldn't make a difference here, but the typical style in C is to access array entires with the brackets, not by adding the index to the pointer address.<br />At first glance, the latter part looks like you're doing some hacky pointer tricks while the brackets immediately show that you simply want to access an array item in the regular way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sat Apr 14, 2018 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are you programming an NES game in C, or something else?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Apr 14, 2018 3:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Devkitarm has shipped with suboptimal memset and memcpy before, so I had to rewrite them in asm.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Apr 14, 2018 4:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">2. memcpy() or memset() VS &quot;manual&quot; set to zero.</div><br />In most modern compilers memset() is an intrinsic rather than an actual library function. Where the sizes of data are known, it will optimize to whatever equivalent is small or fast, appropriately, rather than use a function call.<br /><br />In general you'll find that with optimizing compilers <a href="https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSAbAQwDtQB9T5UgZ1QFdiyTCADkAN1R50AagBemYqloQ8LAgCoZAIwCUMgKQB2AEIGADAEEZNmRu2GAzABEZ5g45OGATGd/aPMytbOwcPV3dPHz8TAM8La1t7JwjA6IN/QISQ5PC3NIyYuKDEm1yXfKjCwuLspLCKyK9qzPjg%2BpTK5t8arPayhtSqntaSnMGu9NG6gc6mqdi%2B0tC5gpHFtstjZwTd70c1ZAZ%2BLCcAYR4CYjVgADoED2wEyWl5RVRvVXUtPV3TGZkAFtMICeJgCBBtKRzLw8ApUAAzL4EXQaWi0XRLba7KwvWQKJSOZE/fTGMa2BEkGTImR4cLzOmOM7otYxPCY/qGf6ckIBACsJjpfNceSaAOxVglW1xUnx7wALMSdKTuct%2BSZ3MLVpteQYBbQ9SLGktdQLvIbteSbOrHBbRSbbOr5XbjTrHXqTHyXUMrToPQA2b1dAHqoxBsWc9UADnDDutHoAnLG3fH9ZqjT6/jsrKJdIwxHzRKQWGJzEXUGIzjI%2BIJhD5HLQiwRS7m8wBrEB8mEMMTyosl0Rl0gV0RFnggGHNwe50hwWBINCAgAOeAYinIlEXK7XxBQwB4LCYS54CFQBFICNXBEU48hLdI2jUTGIAE8xI3SIvgeoAPIsBhvtOpBYICrDAGu974MQmDIAQeDiJg45AZgAAeMH8Ne75Fmo149kBVx4ICLZ5swbAgJw7DcAweDaOOkB5qgS5wagLBIQAtD%2BjhjgIQgiBi%2BaiIWxb3iOKFRv6bH%2BvKMjAMgyDUlc/AsG2%2BgQLghBUhkDakDIZyoMuq6KPWGK6U2xHtp23a9v2IliGOE6kFOZa6CRYjeDZQEjmZ04uaQCHEDweAsSA8pAA%3D%3D%3D" class="postlink">it makes little difference how you initialize</a> when the initializers are relatively simple, so you should just do the one that feels best for you to write, because the only differences are usually cosmetic.<br /><br />However, if the performance of an initializer is critical for your application there is no general advice anyone can give for how to write it the &quot;best&quot; way. Every compiler has different foibles. You will have to check the assembly output yourself. If it's not critical, don't worry because it's going to do a very optimal thing most of the time.<br /><br />If you're asking for advice regarding a specific compiler (e.g. cc65), then there could be a more definitive answer to this.<br /><br /><br />Also, any incomplete initializer for an array or struct will be padded out with zeroes, so this also conveniently initializes buffer to 0:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">buffer&#91;5&#93; = {0};</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Apr 14, 2018 4:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My responses are with regards to general use on x64/x86 architecture today, with gcc or clang.  If this is for NES or some other architecture, I have no experience with cc65's compiler.<br /><br />1. It depends. Neither is better or worse than the other. If you don't need the additional indirect addressing (2nd example), then don't use it. If you do plan on changing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mystru</tt> to point to a different allocated <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STRU_T</tt> somewhere, then the 2nd example is a better choice.  The 2nd example is also necessary if you need to dynamically allocate structures using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">malloc/calloc</tt> and then referencing them (example: a linked list of structs).<br /><br />2. You didn't declare <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">buffer</tt>.  I'm going to assume you either were using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char buffer[8];</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char *buffer; buffer = malloc&#40;8&#41;;</tt>.<br /><br />In either case: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">memset</tt> is recommended.  For small-ish buffers, however, allocating them on the heap is fine.  For large-ish, always allocate dynamically, and use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">calloc&#40;&#41;</tt> if you know definitively the contents need to be zeroed.<br /><br />If you're allocating it on the heap though, you could just do <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char buffer[8] = {0};</tt> to have it pre-allocated to zero by the linker/loader.<br /><br />3. It depends, but going entirely off the example you gave, I would prefer the former.  This question distantly reminds me of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char *argv[]</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char **argv</tt>; I always prefer the former.<br /><br />If you're using clang/LLVM, and you're really concerned about performance (cycle counts) or size (number of instructions), then I strongly suggest using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-S -mllvm</tt> (and you might be interested in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">--x86-asm-syntax=intel</tt> if you prefer Intel syntax; I do) then looking at the resulting <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.s</tt> files.  You might be very surprised the difference things like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-O</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-O2</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-O3</tt> vs. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-Os</tt> makes.<br /><br />The reason I mention this: last month I saw the FreeBSD project <a href="http://www.freshbsd.org/commit/freebsd/r331084?diff=stable%2F11%2Fbin%2Fdd%2Fdd.c" class="postlink">commit this</a>.  My reaction: &quot;why are they using that temporary variable <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">t</tt>?  They can do this without a temporary variable: just use the XOR swap method!&quot;  So I replaced their version with mine: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">p[0] ^= p[1]; p[1] ^= p[0]; p[0] ^= p[1];</tt>.  The result was slower and longer than using a temporary variable.  <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-O2</tt> greatly helped but it was still longer.  My point is that compilers sometimes generate code that a human writing assembly wouldn't.  I generally trust compilers to make optimal decisions these days, but there are always cases where humans do better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hangin10</b> [ Sat Apr 14, 2018 5:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some compilers (GCC in particular) will even optimize some loops into calls to memcpy/move/set functions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Sun Apr 15, 2018 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I hope I'm not hijacking this thread too much, but I didn't think it was worth starting a new thread over. Anyway, does anyone know of any good recourses for learning C from Java? (As in, something that highlights the differences, because they seem to share a lot.) I want to write my own tools, but I'm not at all enthusiastic about Java, and I assume C would be better. All the resources I've seen for C online assume you have zero programming knowledge, and are just gigantic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Apr 15, 2018 7:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">I hope I'm not hijacking this thread too much, but I didn't think it was worth starting a new thread over. Anyway, does anyone know of any good recourses for learning C from Java? (As in, something that highlights the differences, because they seem to share a lot.) I want to write my own tools, but I'm not at all enthusiastic about Java, and I assume C would be better. All the resources I've seen for C online assume you have zero programming knowledge, and are just gigantic.</div><br />I don't know of any resources for people who know Java that want to learn C, but I do know of a top-notch resource for C in general: <a href="https://www.amazon.com/dp/0393979504" class="postlink">C Programming: A Modern Approach</a> by K. N. King.  Don't let anyone tell you the <a href="https://www.amazon.com/dp/0131103628" class="postlink">K&amp;R book</a> (also see <a href="https://en.wikipedia.org/wiki/The_C_Programming_Language" class="postlink">Wikipedia</a>) is a great <span style="text-decoration: underline">starter</span> book -- it isn't.  I'm not going to derail the thread, nor am I going to get into a discussion about PL advocacy, but for general tooling you might also consider Go (it sort of makes me think of a &quot;C-like&quot; language that results in a single self-contained binary -- no libraries/frameworks/runtimes/other crap to install).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Mon Apr 16, 2018 1:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Going from Java to C. Forget everything java has taught you, its all bad and will lead you to ruin. Start from scratch and a learn the proper-way of doing things with C. <br /><br />C++ is a bit different, and has some concepts shared with Java(objects, methods, static, public, etc ) , but you need to learn pointers, pointer arithmetic, how to delete things, when you delete things, and when you use a pointer,a reference or actually just have the object/data type. So basically forget everything Java taught you and go back to C from scratch <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> there is a lot of fundamentals that Java just avoids that are critical to a C/C++ program.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Mon Apr 16, 2018 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, Java's strength is in its strongly typed syntax and object oriented structure. C++ lets you do what you want, requires you to manage your own memory usage, and has OOP awkwardly tacked on (though the last part is somewhat subjective I guess).<br /><br />I wouldn't say you can't use what you've learned from Java, though. It does force some sensible patterns that a lot of C++ programmers tend to forget/willingly ignore.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Mon Apr 16, 2018 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">If this is for NES or some other architecture, I have no experience with cc65's compiler.</div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The structure.member or structure-&gt;pointer?</div><br />If I'm understanding question correctly (which I'm not sure I am) -- for 6502 with cc65, structure.member will give a lot better performance than pointer-&gt;member.  You might likely get<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda _structure+3 ;3 being the number of bytes offset to &quot;member&quot;<br /></div><br />which is just 4 clock cycles.<br /><br />Doing it with pointers will first copy the address of the pointer into a temporary location in zero page, to do an indirect indexed lookup, like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda _structurePtr<br />sta $10 ;or some other temporary place in zero page<br />lda _structurePtr+1<br />sta $11<br />ldy #3 ;3 being the offset<br />lda ($10),y<br /></div><br />Which is like 21 clock cycles -- more than 3 times slower. This really falls apart if you do it in a loop where it has to repeatedly copy the pointer(s) to zero page over and over again.<br /><br />(Edit: realized the first version was wrong, fixed)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Mon Apr 16, 2018 6:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The C compiler is GCC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Apr 16, 2018 9:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming in C - questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">gcc -S -masm=intel</tt> to review the generated assembly (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.s</tt> files) in Intel format.  Rest of my advice about optimisation flags etc. from and earlier post still applies.  Don't be surprised if what you find scares you.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>