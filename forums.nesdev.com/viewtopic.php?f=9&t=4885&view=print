<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Mappers &amp; Logic</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Mappers &amp; Logic</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=4885">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=4885</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon Feb 23, 2009 4:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Mappers &amp; Logic</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there any good information on how mappers work in the hardware sense? I'm aware of their use in software but I've never really seen much about how they really function in hardware. About all I know is that with certain 74 series logic chips you can connect them to the NES CPU bus and a ROM chips to latch bits to effectively latch upper address lines on the ROM and things like that. So that's not alot and I'd like to understand more. Particularly how you can have different banks within address space, such as having four 8k PRG banks, eight 1kb CHR banks, etc. 
<br />
<br />So if anyone can point out some useful information I'd appreciate it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Feb 23, 2009 5:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To have different banks in a window you first start with registers. The register outputs are multiplexed to the high ROM address lines. The multiplexer selects are the CPU address lines. When the CPU accesses that window of memory, the multiplexer will switch the address lines to it's associated register. Here's an example:
<br />
<br /><img src="http://img16.imageshack.us/img16/7296/mapper.jpg" alt="Image" />
<br />
<br />This mapper has 4 regs at $8000-9FFF, $A000-BFFF, $C000-DFFF, $E000-FFFF. Write the bank you want to appear at that 8K window. Now you know 80% of all mapper logic ;)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Feb 23, 2009 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The process is basically what you described. The function of a mapper is to make certain pieces of a memory chip appear at certain ranges of the addressable memory of the CPU or PPU.
<br />
<br />The simplest mappers simply have a 74161 feed the highest address lines of the memory chip in question (PRG or CHR) with values it was fed with the last time there was an attempt to write a byte to ROM. The NES indicates that a value is to be written through the "PRG R/W" line, and sice there is no point in writing to ROM, that write signal is sent to the 161, which is also connected to some of the data lines, so it can receive the data it will later latch to the memory chip.
<br />
<br />More complex mappers, that break the addressable space in smaller pieces and have multiple registers do exactly the same thing, but they also take into consideration the address lines, meaning it will interpret writes differently depending on the address that was written to (multiple registers) and retrieve data from different parts of the memory chip depending on the address being read (banks smaller than the total addressable space).
<br />
<br />A CNROM cart for example, only has a 74161 as a mapper, so all it can do is select a 8KB CHR-ROM page from a larger chip to occupy the whole 8KB of patterns the NES can address. A slightly more complex mapper, UNROM, in addition to the 161 has a 7432 which ORs the highest bit of the read address against all 4 bits latched from the 161 before sending them to the PRG-ROM chip, so that whenever the upper half of the addressable space is accessed (the highest bit will be 1 in this case) the latched bits will all become 1, causing the last bank of the chip (1111 binary, 15 decimal) to be seen at the upper half of the addressable space at all times.
<br />
<br />Mappers such as the MMC3 work in a similar way, but the banks are so small and there are so many registers that it would require too many off the shelf chips, so it's implemented as a custom chip.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon Feb 23, 2009 6:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, kyuusaku. I get the idea that you can watch A13 and A14 to determine the "window" being 8000, A000, C000, or E000. So that part makes sense now in a loose sort of way. 
<br />
<br />So some chip or circuit will watch the requested address (which I never thought about before), and based on A13 and A14, a register is used to set the ROM chip's address lines (which I knew before). I'm guessing you could address a WRAM chip by watching A15 along with A13 and A14? 
<br />
<br />But anyway, I get the basic idea, but what sort of chips and things would you actually put into practice to achieve this? 
<br />
<br />Tokumaru, I hadn't heard about this PRG R/W connection before, but that certainly is useful. I imagine you would use it to disable ROM to avoid bus conflicts. I do get what you mean by a mapper as complex as MMC3 would be too impractical to make using generic chips. But it would be possible to do so right?
<br />
<br />I'm guessing that you would likely use a FPGA type of device if you wanted an advanced custom mapper since it probably isn't feasible to have a mask ASIC produced like Nintendo would have in the old days? 
<br />
<br />Part of the reason I've been curious about this is because I think it would be cool to have a new mapper available for homebrew or repro building that is a bit better than the MMC3. Ideally 4x 8Kb PRG, 8x 1Kb CHR, 8Kb WRAM or SRAM, and either a PPU or CPU based IRQ counter. It seems to me that it wouldn't be too difficult to do something like that. I would guess that a CPU cycle based counter would be easier to create than a PPU based one. I wonder if Bunnyboy or anyone else has thought about producing such a mapper for homebrew projects. As it is now, if you had a homebrew project that needs IRQ or smaller bank sizes you have to butcher a commercial game cartridge.
<br />
<br />I'm guessing creating your own board with generic chips to accomplish this would be expensive and take up alot of space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Feb 23, 2009 8:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">I'm guessing that you would likely use a FPGA type of device if you wanted an advanced custom mapper since it probably isn't feasible to have a mask ASIC produced like Nintendo would have in the old days? </div>
<br />PowerPak puts a mapper on an FPGA. It's also very expensive. For this reason, I don't see how an FPGA would be cost effective for replicating your work in cartridges. A CPLD, the next cheaper part than an FPGA, is big enough to hold an MMC1 but apparently not an MMC3. But I'd love to be proven wrong.
<br />
<br />Once I sketched a mapper with MMC3-style PRG bank switching based around a pair of 74HC670s. You might want to read <a href="http://nesdev.com/bbs/viewtopic.php?t=2669" class="postlink">that topic</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon Feb 23, 2009 8:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is the MMC1 Repro then a board with a CPLD programmed to act as a MMC1 then? Strange question then, if one CPLD is affordable, but can't handle the complexity of the MMC3, why not use two or more CPLDs? What if you split the PRG and CHR onto two different CPLDs working in collaboration together?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Feb 23, 2009 11:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The most common (legacy, very available, 5V friendly and easy to program) high capacity PLCC CPLD are the XC95108 from Xilinx and the EPM7128 from Altera, and both can hold a MMC3 with bit of room to spare. The most common Xilinx surface mount CPLD is the XC95144, which can even hold a full blown FME-7.
<br />
<br />With CPLDs, your logic is optimized so tightly there is barely any overhead/macrocells used as interconnects, pretty much all you have to take into account are register bits which each occupy a macrocell.
<br />
<br />I counted register bits for some mappers:
<br />
<br />CNROM	2
<br />UNROM	4
<br />GNROM	4
<br />AOROM	4
<br />MMC1	27
<br />MMC2	21
<br />MMC3	80
<br />MMC4	27
<br />FME7 (full) 	113
<br />
<br />Note though that if you tailor your FME7 implementation to each commercial game, you'll find they each use few enough bits to fit into a XC95108.
<br />
<br />Almost all other 3rd party FC mappers will fit into a XC95108 as well. When they don't, it's because they simultaneously use:
<br />
<br />PRG - 3x5/6 (256k/512k)
<br />CHR - 8x8 (256k)
<br />IRQ - 16 + typically 2 control (A12/Phi2 counter both)
<br />mirroring - 1 or 2
<br />--------------------
<br />= 100 + a couple misc macrocells (will barely squeeze in)
<br />but throw in configuration or index registers and it's over the limit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Feb 24, 2009 12:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well that sounds good then, it would be sweet to see CPLD's to act as some nicer mappers. I'm guessing if you can do FME7, VRC4 should be doable too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Feb 24, 2009 6:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">Tokumaru, I hadn't heard about this PRG R/W connection before, but that certainly is useful. I imagine you would use it to disable ROM to avoid bus conflicts.</div><br />I believe some mappers do that, yes. But most discrete logic mappers don't, so that's why when you write a mapper command, you have to do it to a location that contains the same value.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I do get what you mean by a mapper as complex as MMC3 would be too impractical to make using generic chips. But it would be possible to do so right?</div><br />Theoretically yes, because it is possible to do it with the available parts, but I'm pretty sure you'd have power supply problems if you tried to power so many chips at once.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Part of the reason I've been curious about this is because I think it would be cool to have a new mapper available for homebrew or repro building that is a bit better than the MMC3. Ideally 4x 8Kb PRG, 8x 1Kb CHR, 8Kb WRAM or SRAM, and either a PPU or CPU based IRQ counter.</div><br />I've been desiring this mapper for a while. What you described seems ideal to me, my only requirements is that it doesn't take anything away from the programmer, like the MMC3 does with its scanline counter.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It seems to me that it wouldn't be too difficult to do something like that. I would guess that a CPU cycle based counter would be easier to create than a PPU based one.</div>
<br />Some people don't like CPU based counters because code has to be adjusted to work in different regions (PAL x NTSC). I don't think this is a big problem, as there are probably other things that will require changing anyway (the music engine, for example).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Feb 24, 2009 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Theoretically yes, because it is possible to do it with the available parts, but I'm pretty sure you'd have power supply problems if you tried to power so many chips at once.</div>
<br />It's not so much a power issue as it is a board space issue. The mapper you would like could take less than 15 chips since it maps really well to 74 series. CMOS parts can be used which are very low power and will talk fine with everything, 50 chips I don't think would be a problem.
<br />
<br />If people would prefer discrete chips to a CPLD, it may cost more and not be reconfigurable, but it would still work and fit inside a NES case (or oversized FC) without compromise.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Feb 24, 2009 1:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If people would prefer discrete chips to a CPLD, it may cost more and not be reconfigurable, but it would still work and fit inside a NES case (or oversized FC) without compromise.</div>
<br />You can probably not put 15 chips in a NES case, and I'd be surprised if you could simulate a MMC3 with "only" 15 74 chips. A MMC1 would take about 12 if I remember well, so a MMC3 would be probably more than 20. Anyway you can not put more than about 6 chips inside the NES case, it's really not that big. Altough for the FC this is unlimited, but a cartridge that would be 1m long wouldn't be practical.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Feb 24, 2009 1:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">If people would prefer discrete chips to a CPLD, it may cost more and not be reconfigurable, but it would still work and fit inside a NES case (or oversized FC) without compromise.</div>
<br />
<br />I wouldn't care whether it is a CPLD or discrete chips, so long as the end result would be an affordable mapper comparable to FME-7 (4x 8K PRG, 8x 1K CHR, CPU IRQ Counter, WRAM). It would help homebrewers and would help me when I'm busy trying to hack some game from one mapper to another. We really are limited to FME-7 in Batman and MMC-5 which isn't very good since both are limited in supply. And as mentioned MMC3 can't always cut it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Feb 24, 2009 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If people would prefer discrete chips to a CPLD, it may cost more and not be reconfigurable, but it would still work and fit inside a NES case (or oversized FC) without compromise.</div><br />You can probably not put 15 chips in a NES case, and I'd be surprised if you could simulate a MMC3 with "only" 15 74 chips. A MMC1 would take about 12 if I remember well, so a MMC3 would be probably more than 20. Anyway you can not put more than about 6 chips inside the NES case, it's really not that big. Altough for the FC this is unlimited, but a cartridge that would be 1m long wouldn't be practical.</div>
<br />If a PCB was made that filled the entire plastic enclosure you could easily fit 15 chips. Putting chips on the back side would allow even more. If surface mount chips were used you could double that figure in addition to 2 ROMs.  There is space I believe even for full DIP chips with WRAM, CHR RAM, 4-screen options...
<br />
<br />And no the MMC3 can't easily fit into 15 chips but a FME-7 can approximately. (Perhaps 17 because I forgot the counters are 4-bit.)
<br />Recall this thread: <!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=1493&amp;postdays=0&amp;postorder=asc&amp;start=15">http://nesdev.com/bbs/viewtopi ... c&amp;start=15</a><!-- m -->
<br />
<br />That is a scaled down FME-7 in PRG and WRAM function. Restoring PRG capacity means one more 670 chip. Restoring WRAM would mean remapping $e000's bank to $6000 (with a single AND3 gate!) and decoding the high PRG address bit since we don't need to address 2MiB of PRG ROM. Extending the index (command) register from 4-bits to 8-bits will also give WRAM protection bits and mirroring bits etc. That makes 13 logic chips plus what it takes to replace the PAL--likely some random logic gates for the mirroring MUX and a number of address decoders. It will fit!
<br />
<br />I'm almost ready to start designing a discrete version to prove it ;) Technically it's even better than the FME-7 since you can map WRAM to the other CPU banks. (Think WRAM for DPCM samples etc.)
<br />
<br />Edit: not good, 5V CPLD are really expensive all the sudden and 3.3V aren't sure to work. I think discrete chips would actually be cheaper unless old stock CPLD can be found in bulk o_0

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Feb 24, 2009 2:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What do you mean technically better? <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> Would it be fully compatible with existing FME-7 games? Or what differences would it have? Personally I'd like to see a version that is exactly like what is in Batman. It would be neat to see a discrete version design as it would sort of immortalize it wouldn't it. 
<br />
<br />Whatever you come up with I'd love to see it. I agree it wouldn't be a problem fitting 13, 15 or so chips in a NES cart. Afterall that pirate cart fit 13 into a Famicom cart.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Feb 24, 2009 2:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If WRAM was mappable to all banks using the method I described, games would probably still work, it's unlikely they'd set unused bits. Basically the less you deviate from the FME-7 design, the more random logic you'll need. The more random logic, the less integration efficiency and the more you'd want to use a PAL, but then that kind of defeats the purpose of having a discrete mapper -- something you can just build that doesn't need programming. I think a FME-7 compatible design would fit in 20 chips still costing less than a 5V CPLD at the moment.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>