<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=12325" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-02-05T13:44:05-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=12325</id>
<entry>
<author><name><![CDATA[Ti_]]></name></author>
<updated>2015-02-05T13:44:05-07:00</updated>
<published>2015-02-05T13:44:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140660#p140660</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140660#p140660"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140660#p140660"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />No, from what I recall Battletoads just has a block of LDA imm / STA $2007 in RAM, and updates the immediate values as needed. If you want to know the details, though, it's easy to just take a look in a debugger.<br /></div><br /><br />Actually, Battletoads  has a block of  LDY PTR,X  STY $2007  (16 times)  in RAM (about 110 bytes).<br />to prepare code it's change ptr (of char gfx), with every next low byte of ptr greater on 1.<br />X and A starts from zero, and incremented by ADC #$10 TAX  BNE loop.   (so total 16 times) =256 bytes (16tiles).<br />However it doesn't run for full speed, because before it waits for cross-page penalty of ptr,X  based on low ptr value - required to timings. <br />Similar code also used to animate tiles for level2 parallax.<br />(and you can find same code in my duck tales 2 - two players hack.)<br /><br />PLA/STA used for update raw/column/attributes/palette.<br /><br />For update snakes in karnath lair it's uses extreme code in ROM with much of everything. (see BANK3:8062)   (bank6 in fceux).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6103">Ti_</a> — Thu Feb 05, 2015 1:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-02-04T08:47:59-07:00</updated>
<published>2015-02-04T08:47:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140582#p140582</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140582#p140582"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140582#p140582"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I know the NROM version of Driar does it<br /></div><br />True, I was aware of Driar. It's a simpler game though, with smaller worlds to keep track of, so it can spare a little more RAM than the typical early 90's NES game.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Feb 04, 2015 8:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-04T08:34:48-07:00</updated>
<published>2015-02-04T08:34:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140580#p140580</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140580#p140580"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140580#p140580"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">from what I recall Battletoads just has a block of LDA imm / STA $2007 in RAM, and updates the immediate values as needed.<br /></div><br />I didn't know Battletoads did this. I never expected a game without extra RAM to do this, since even a small block of 8 tiles (128 bytes) would expand to 640 bytes, over 30% of the RAM total (2KB).</div><br />I know the NROM version of Driar does it, but in which level of Battletoads does this happen? I seem to remember that Battletoads stores its VRAM update list in unused stack and does an unrolled <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">PLA STA $2007</tt> loop.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Feb 04, 2015 8:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2015-02-04T07:15:10-07:00</updated>
<published>2015-02-04T07:15:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140575#p140575</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140575#p140575"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140575#p140575"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent">I don't think I saw it mentioned, but if the tile/sprite data has repeated bytes (at least 2), then you could get a small speed up with just a redundant STA (no need to re-read or load, etc).  That, and possibly prime X and/or Y with the most constant used byte for that data segment to upload, that way it doesn't need to be <em>just </em>sequential repeats.<br /></div><br />I did mention a tool I was coding to perform such optimizations on code that would be stored in ROM.<br /><br />I wouldn't try something like this in realtime though, because the time spent on analyzing the data would be too disproportional (e.g. to know what the most common values are you'd have to scan all the data beforehand) to the little time you'd gain with the optimizations.</div><br /><br /> No, definitely not realtime. The cell, or rather a chunk of data, would be processed external of runtime. That gives the added benefit of compression as well, but slight possible bloat as well (1 extra bit per byte, but really it's dependent on how you implement it). But yeah, predetermined at or before assemble time.<br /><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And you can't even guarantee that there will be successful optimizations every time, so you can't count on that extra time anyway. <strong><span style="text-decoration: underline">An offline tool on the other hand could easily count the cycles</span></strong> as it generates code, so you'd always know if a particular block of CHR could be updated in the time you have available.<br /></div><br /><br /> Exactly. You would know what the cycle count would be for that chunk of data to transfer. Yeah, it might be variable from chunk to chunk, but that doesn't mean you can't optimize for such results. The level could be designed in such a way that only certain objects or tile cells can be uploaded per frame, so you design the level around these factors. And knowing the cycle counts ahead of time, allows you figure that into transfer window of time, as well as the build window (active display area).<br /><br /> <br /><br /> <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you really need this little bit of extra time, it would make much more sense to blank some scanlines and get some extra VBlank time.<br /></div><br /> Nothing says you can't combine both methods. It's a more extreme optimization, but like all level of optimizations - they have their set of limitations; maybe not great for every situation, but specifically advantageous when applicable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Wed Feb 04, 2015 7:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-02-03T07:19:52-07:00</updated>
<published>2015-02-03T07:19:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140487#p140487</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140487#p140487"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140487#p140487"><![CDATA[
<div class="quotetitle">Myask wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yes, it does use quite a bit of ROM<br /></div>Or RAM, as Rainwarrior pointed out.</div><br />Yes, that has been discussed before. The comment you quoted however was about the specific technique I was detailing (interleaved tiles accessed with absolute indexed addressing), which allows copying data straight from ROM to VRAM, which has the advantage of not stealing time from the game logic in order to buffer the values.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />No, from what I recall Battletoads just has a block of LDA imm / STA $2007 in RAM, and updates the immediate values as needed.<br /></div><br />I didn't know Battletoads did this. I never expected a game without extra RAM to do this, since even a small block of 8 tiles (128 bytes) would expand to 640 bytes, over 30% of the RAM total (2KB).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Feb 03, 2015 7:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2015-02-03T04:46:56-07:00</updated>
<published>2015-02-03T04:46:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140483#p140483</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140483#p140483"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140483#p140483"><![CDATA[
No, from what I recall Battletoads just has a block of LDA imm / STA $2007 in RAM, and updates the immediate values as needed. If you want to know the details, though, it's easy to just take a look in a debugger.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Tue Feb 03, 2015 4:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2015-02-03T00:50:58-07:00</updated>
<published>2015-02-03T00:50:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140468#p140468</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140468#p140468"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140468#p140468"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Yes, it does use quite a bit of ROM<br /></div>Or RAM, as Rainwarrior pointed out. Unrolled loops are pretty trivial to make loops to write into (W)RAM, after all. You don't have to STORE CHR data as code in the ROM itself, just have it so for when you're going to send it. Granted, generating the three-register-lookback version would be harder than just dropping the LDA #xx STA $2007 (A9xx8D0720) over and over...but having the unrolled loop with N iterations of that and deciding where to jump in rather than having loop-control means you'd only have to write the data each update frame, not rewrite the code. (Inserting PPU address-changes would likewise be relatively easy, just changing a 6 to a 7 as necessary...but you'd need to remember to change it back for the sake of the next update.)<br /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />I don't think I saw it mentioned, but if the tile/sprite data has repeated bytes (at least 2), then you could get a small speed up with just a redundant STA<br /></div>it was:<br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />Battletoads actually unpacks its CHR data into RAM like this<br /></div><br />Including register re-stores and use of A, X, and Y?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Tue Feb 03, 2015 12:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-02-02T19:48:06-07:00</updated>
<published>2015-02-02T19:48:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140440#p140440</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140440#p140440"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140440#p140440"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />I don't think I saw it mentioned, but if the tile/sprite data has repeated bytes (at least 2), then you could get a small speed up with just a redundant STA (no need to re-read or load, etc).  That, and possibly prime X and/or Y with the most constant used byte for that data segment to upload, that way it doesn't need to be <em>just </em>sequential repeats.<br /></div><br />I did mention a tool I was coding to perform such optimizations on code that would be stored in ROM.<br /><br />I wouldn't try something like this in realtime though, because the time spent on analyzing the data would be too disproportional (e.g. to know what the most common values are you'd have to scan all the data beforehand) to the little time you'd gain with the optimizations. And you can't even guarantee that there will be successful optimizations every time, so you can't count on that extra time anyway. An offline tool on the other hand could easily count the cycles as it generates code, so you'd always know if a particular block of CHR could be updated in the time you have available.<br /><br /> If you really need this little bit of extra time, it would make much more sense to blank some scanlines and get some extra VBlank time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Feb 02, 2015 7:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2015-02-02T19:19:03-07:00</updated>
<published>2015-02-02T19:19:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140439#p140439</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140439#p140439"/>
<title type="html"><![CDATA[Re: Character RAM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140439#p140439"><![CDATA[
I don't think I saw it mentioned, but if the tile/sprite data has repeated bytes (at least 2), then you could get a small speed up with just a redundant STA (no need to re-read or load, etc).  That, and possibly prime X and/or Y with the most constant used byte for that data segment to upload, that way it doesn't need to be <em>just </em>sequential repeats. It's only a small optimization, but it's something (I thinking more along the lines of generating the code for this during active display, so it wouldn't apply for existing rom code, unrolled or not).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Mon Feb 02, 2015 7:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-02-02T06:34:31-07:00</updated>
<published>2015-02-02T06:34:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140386#p140386</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140386#p140386"/>
<title type="html"><![CDATA[Re: Character ROM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140386#p140386"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />Well, if you want to compare them by speed alone, LDA immediate is the fastest possible, yes. It's a tradeoff of size (either ROM or RAM) for speed though.<br /></div><br />I considered using the immediate method, in ROM, for tiles that need to be updated constantly, like the main character and animated level objects. This is an incredible waste of ROM though (each byte expands to 5 bytes!), so this is only worth it if you have lots of space available. I started coding a tool to minimize this expansion a little, by using all 3 registers as a small dictionary of recently used values and using INX, DEX, INY, DEY, ASL, LSR, ROR and ROL instead of loading new values whenever possible, but never implemented most of the ideas. The hard part is to figure out which register is the best one for loading a new value to, considering transformations it will go through in the future and how soon the old value will be used again.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The PLA method is reasonably fast, and makes conservative use of RAM. A partially unrolled LDA abs, X is similar in speed to using PLA, but the code required is slightly larger.<br /></div><br />Unrolled PLAs are interesting because they use less ROM, and when you have it completely unrolled, you can easily jump in the middle of the code to copy variable amounts of bytes, if you ever need that.<br /><br />Another place you can put the buffer in is zero page, and as long as you use ZP addressing (meaning the code has to be completely unrolled) you can transfer each byte in 7 cycles, slightly faster than the 8 cycles of the PLA or absolute indexed methods.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Outside the vblank there is probably some increased comlexity somewhere to organize the data (ideally: done offline by a tool).<br /></div><br />Yes, the complexity is all about converting the CHR data from linear to interleaved, which should be done by a little script before the ROM is assembled, so this doesn't have any negative impact on the NES program itself. The main advantage of this method is that you don't have to waste CPU time or RAM preparing the data and buffering, you can blast it straight from ROM to VRAM without any speed penalty.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />How exactly? I don't understand how to address groups of 4, do you do something like this below or is it more involved than that?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$8000  $8100  $8200  $8300<br />A1        A2     A3     A4<br />B1        B2     B3     B4<br />------------<br />LDA $8000, x<br />STA $2007<br />LDA $8100, x<br />STA $2007<br />LDA $8200, x<br />(...)</div><br /></div><br />Something like this, but I'm not sure what A1, A2, etc. mean in your diagram. Let me draw a diagram of what I have in mind:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">G = INDEX OF THE GROUP;<br />B = INDEX OF THE BYTE WITHIN THE GROUP;<br /><br />$8000: G$00 B$00, G$01 B$00, G$02 B$00, G$03 B$00, G$04 B$00 (...) G$FE B$00, G$FF B$00<br />$8100: G$00 B$01, G$01 B$01, G$02 B$01, G$03 B$01, G$04 B$01 (...) G$FE B$01, G$FF B$01<br />$8200: G$00 B$03, G$01 B$03, G$02 B$03, G$03 B$03, G$04 B$03 (...) G$FE B$03, G$FF B$03<br />(...)<br />$BD00: G$00 B$3D, G$01 B$3D, G$02 B$3D, G$03 B$3D, G$04 B$3D (...) G$FE B$3D, G$FF B$3D<br />$BE00: G$00 B$3E, G$01 B$3E, G$02 B$3E, G$03 B$3E, G$04 B$3E (...) G$FE B$3E, G$FF B$3E<br />$BF00: G$00 B$3F, G$01 B$3F, G$02 B$3F, G$03 B$3F, G$04 B$3F (...) G$FE B$3F, G$FF B$3F</div><br />Since each tile is 16 bytes, a group of 4 would be 64 bytes, so you'd need an unrolled loop that transfers that many bytes (this code would use 384 bytes of ROM). The code would look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   ldx GroupIndex<br />   ldy GroupCount<br /><br />TransferBlock:<br /><br />   lda $8000, x<br />   sta $2007<br />   lda $8100, x<br />   sta $2007<br />   lda $8200, x<br />   sta $2007<br />   (...)<br />   lda $BE00, x<br />   sta $2007<br />   lda $BF00, x<br />   sta $2007<br />   <br />   dey<br />   beq Done<br />   inx<br />   jmp TransferBlock<br /><br />Done:</div><br />Yes, it does use quite a bit of ROM, but it's the only way I'm aware of to avoid the (slow) indirect indexed addressing and still copy the data straight from ROM to VRAM, not wasting CPU time on buffering. If you can program using any language on the PC you can make a tool to interleave the CHR data in 5 minutes.<br /><br />Each iteration of this loop takes 521 cycles to execute, so you can safely copy 4 blocks of 4 tiles = 16 tiles each frame if you're doing nothing else during VBlank.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Feb 02, 2015 6:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2015-02-02T05:00:43-07:00</updated>
<published>2015-02-02T05:00:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140383#p140383</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140383#p140383"/>
<title type="html"><![CDATA[Re: Character ROM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140383#p140383"><![CDATA[
<div class="quotetitle">Myask wrote:</div><div class="quotecontent"><br />Such use of stack is, however, slower to execute than the &quot;code-as-data&quot; [that is, code as LDA #imm / STA $2007 as shown], as PLA is 4 cycles; immediate loads, 2.<br /></div><br /><br />Well, if you want to compare them by speed alone, LDA immediate is the fastest possible, yes. It's a tradeoff of size (either ROM or RAM) for speed though.<br /><br />The PLA method is reasonably fast, and makes conservative use of RAM. A partially unrolled LDA abs, X is similar in speed to using PLA, but the code required is slightly larger.<br /><br />The LDA (indirect), Y proposed at the beginning of this thread is more or less the slowest naive method of doing this.<br /><br /><br />Punch: using striped data like that is an alternative way to unroll your loop. It makes incrementing the index register simpler, at least. Outside the vblank there is probably some increased comlexity somewhere to organize the data (ideally: done offline by a tool).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Feb 02, 2015 5:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Punch]]></name></author>
<updated>2015-02-01T21:55:59-07:00</updated>
<published>2015-02-01T21:55:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140367#p140367</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140367#p140367"/>
<title type="html"><![CDATA[Re: Character ROM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140367#p140367"><![CDATA[
Thanks everyone, I think I'll use the strategy of unrolling 16 byte writes (for each tile) and character data alignment in ROM. Maybe even a RAM buffer (on unused stack space?) to uncompress char data if I'm not too lazy to build one.<br />I can't afford to waste much space (specially with all the program ROM I'm going to use for tile storage -- I'm building an adventure game and each screen can have 144 unique tiles max (!). Poor design? I don't know really but I'm not proficient in art design for tiled games (or any kind of art, for that matter) so I need to follow up with this plan unless I want everything in my game blocky and uglier.<br /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />The only problem with this is that you'll only be able to address 256 tiles this way. To overcome this, I started addressing groups of 4 (or more) tiles, rather than individual tiles, so you can address a total of 1024 tiles, which occupy 16384 bytes, conveniently the same size of a PRG-ROM bank in many mappers.<br /></div><br /><br />How exactly? I don't understand how to address groups of 4, do you do something like this below or is it more involved than that?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$8000  $8100  $8200  $8300<br />A1        A2     A3     A4<br />B1        B2     B3     B4<br />------------<br />LDA $8000, x<br />STA $2007<br />LDA $8100, x<br />STA $2007<br />LDA $8200, x<br />(...)</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5877">Punch</a> — Sun Feb 01, 2015 9:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2015-02-01T21:09:24-07:00</updated>
<published>2015-02-01T21:09:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140364#p140364</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140364#p140364"/>
<title type="html"><![CDATA[Re: Character ROM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140364#p140364"><![CDATA[
Such use of stack is, however, slower to execute than the &quot;code-as-data&quot; [that is, code as LDA #imm / STA $2007 as shown], as PLA is 4 cycles; immediate loads, 2. <span style="font-size: 50%; line-height: normal">Brain does not have sufficient resources tonight, for some reason I thought my rebuttal was ninja'd by the post I was rebutting.</span><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Sun Feb 01, 2015 9:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2015-02-01T16:06:10-07:00</updated>
<published>2015-02-01T16:06:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140351#p140351</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140351#p140351"/>
<title type="html"><![CDATA[Re: Character ROM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140351#p140351"><![CDATA[
LDA (ptr), Y is the slowest form of LDA, aside from the obscure LDA (ptr,X). For starters, try not accessing data through a pointer. If you need timing reference, see: <a href="http://www.6502.org/tutorials/6502opcodes.html#LDA" class="postlink">http://www.6502.org/tutorials/6502opcodes.html#LDA</a><br /><br />If you can trade size for speed, you can unroll your loop:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.repeat 128,I<br />    LDA block + I<br />    STA $2007<br />.endrepeat<br /></div><br /><br />You could also partially unroll:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">:<br />    .repeat 32, I<br />        LDA block + I, X<br />        STA $2007<br />    .endrepeat<br />    TXA<br />    CLC<br />    ADC #32<br />    TAX<br />    CPX #128<br />    BCC :-<br /></div><br />(There's some more work you could do to this snippet to optimize, but I'm just trying to demonstrate the partial unroll.)<br /><br />If your data is static, you could store your CHR data as code rather than bytes to upload:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.byte $12,$34,$56,$12,$56,$78...</div><br />vs.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$12<br />STA $2007<br />LDA #$34<br />STA $2007<br />...</div><br />or even use A/X/Y to avoid redundant loads:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$12<br />STA $2007<br />LDX #$34<br />STX $2007<br />LDY #$56<br />STY $2007<br />STA $2007<br />STY $2007<br />LDA #$78<br />STA $2007<br />...</div><br />Battletoads actually unpacks its CHR data into RAM like this, and during vblank runs that code from RAM. Obviously this requires a lot more space than just the data bytes, though.<br /><br />One trick that I like is to store your update on the stack. You temporarily save the stack pointer and then move it to your data, then each byte write looks like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PLA<br />STA $2007<br /></div><br />No need to increment an index register, keep track of a pointer, etc. it's inherent in the PLA. Very easy to unroll this as needed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Feb 01, 2015 4:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-02-01T16:02:10-07:00</updated>
<published>2015-02-01T16:02:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140350#p140350</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140350#p140350"/>
<title type="html"><![CDATA[Re: Character ROM data write]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12325&amp;p=140350#p140350"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />But honestly, even one INY for each byte will cost you a few tiles. If you can buffer the tiles in RAM first you can copy them to VRAM with:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda BUFFER+0, x<br />   sta $2007<br />   lda BUFFER+1, x<br />   sta $2007<br />   lda BUFFER+2, x<br />   sta $2007<br />   (..)<br />   lda BUFFER+15, x<br />   sta $2007</div><br />Which is obviously faster.<br /></div><br />This is the &quot;moderately unrolled&quot; loop I was referring to. Buffer up to 10 tiles in unused parts of the stack ($0100-$019F) and blast them to VRAM during vblank.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Feb 01, 2015 4:02 pm</p><hr />
]]></content>
</entry>
</feed>