<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=7307" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-12-15T00:55:35-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=7307</id>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-12-15T00:55:35-07:00</updated>
<published>2011-12-15T00:55:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87558#p87558</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87558#p87558"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87558#p87558"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />But now a question for my own curiosity: Are writes to $2000 still ignored for a few frames after a famicom reset? If so, even if $2000 and $2001 were set to something potentially harmful, you still couldn't do anything about it before the PPU was warmed up anyway.<br /></div><br />Going out on a limb here, but I don't think so. As far as I understand, the reset line of the PPU simply isn't connected to the PPU on the Famicom, so when you push the reset button, PPU keeps running like nothing happened.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Thu Dec 15, 2011 12:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-12-14T18:16:26-07:00</updated>
<published>2011-12-14T18:16:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87548#p87548</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87548#p87548"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87548#p87548"><![CDATA[
Then, I was right the first time! Like I said, I'd do it anyway.<br /><br />But now a question for my own curiosity: Are writes to $2000 still ignored for a few frames after a famicom reset? If so, even if $2000 and $2001 were set to something potentially harmful, you still couldn't do anything about it before the PPU was warmed up anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Wed Dec 14, 2011 6:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-12-14T17:15:42-07:00</updated>
<published>2011-12-14T17:15:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87546#p87546</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87546#p87546"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87546#p87546"><![CDATA[
When coding in assembly I like to assume that everything is in an unknown state on power up. Better safe then sorry.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Dec 14, 2011 5:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-12-14T16:57:18-07:00</updated>
<published>2011-12-14T16:57:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87543#p87543</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87543#p87543"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87543#p87543"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />What tokumaru posted is what I was describing, but <a href="http://wiki.nesdev.com/w/index.php/PPU_power_up_state" class="postlink">the wiki says</a> you don't need to.<br /></div><br />Perhaps you need to on the Famicom, which doesn't fully reset the PPU when the player presses reset.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Dec 14, 2011 4:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-12-14T14:39:20-07:00</updated>
<published>2011-12-14T14:39:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87538#p87538</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87538#p87538"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87538#p87538"><![CDATA[
<div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You still want 0 written to both of those PPU registers while the PPU is still warming up.<br /></div><br />But I thought I was writing to them after the PPU has already warmed up.<br /></div><br />I apologize for my mistake. I always thought those registers started with an unknown state, which isn't true. Even if they did start at something unknown, writes to them are also totally ignored for the first few frames.<br /><br />What tokumaru posted is what I was describing, but <a href="http://wiki.nesdev.com/w/index.php/PPU_power_up_state" class="postlink">the wiki says</a> you don't need to. <br /><br />I'll probably still do it to be safe, because I am paranoid. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't understand yours. You push a bunch of stuff onto the stack only to pop it off in the very same routine after only incrementing nmis.<br /></div><br /><br />Exactly. I explained why it does that in the comments, but Tepples makes a good point. The NMI I posted currently <em>doesn't</em> affect the status registers, but the idea would be that you add on to it once you're passed this hurdle.<br /><br />Here's a real world example of why the pushing and popping is done.<br /><br />Imagine this code is in your main routine:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda #$FF<br />   ldx #$00<br />loop:<br />   sta $0200,x<br />   inx<br />   inx<br />   inx<br />   inx<br />;*<br />   bne loop<br />;We can continue only when X is exactly 0. I've used code like to remove all sprites from the screen &#40;by putting their y position below the screen&#41;.<br /></div><br /><br />Now imagine this is your nmi routine. It interrupts at some point during the loop. Say... where that * is.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:<br />   inc nmis<br />   lda #$20;This line will cause a #$20 to be written instead of #$FF<br />   sta $2006<br />   ldx #$03;This line will cause an infinite loop.<br />   sta $2006<br />  <br />   ldy #$00<br />   sta $2007<br />;<br />   rti<br /></div><br /><br />When that code returns you're in an infinite loop, because the nmi changed X to something that makes completing the loop impossible.<br /><br />Can (4*Z+3)%256 ever equal 0? <br />(Z = the number of times we have looped)<br /><br />No. But (4*Z+0)%256 can be 0 which would allow your main loop to continue.<br /><br />We push the registers to the stack in the NMI because it can interrupt our code at ANY time. After they're pushed, we can safely change them in the NMI, and restore them when we're done for when we return.<br /><br />The inc nmis part might make sense now too. Because the opposite happens than this example. The nmi not changing that variable KEEPS us in an infinite loop when it should break us out of one.<br /><br />Is that clear? If not I'll try a different approach. Tepples also did an explanation of game loops where you can avoid pushing and pulling if you like.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I know. My math routines use a stack based on the zeropage with x as the index register, as its stack pointer. That's what I meant by "stack pointer" here.<br /></div><br />My bad. I'm a new guy in this thread, so I might have missed where that was mentioned. I'm just trying to make sure you're not doing anything you don't understand.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Wed Dec 14, 2011 2:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-12-14T08:41:43-07:00</updated>
<published>2011-12-14T08:41:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87529#p87529</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87529#p87529"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87529#p87529"><![CDATA[
<div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><br />But I thought I was writing to them after the PPU has already warmed up.<br /></div><br />It goes like this: before the warm up, write 0 to both PPU registers (the purpose here is to "reset" the PPU... kinda), and after the warm up you write the actual configuration you're gonna use (this includes enabling NMIs).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Dec 14, 2011 8:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-12-14T07:13:56-07:00</updated>
<published>2011-12-14T07:13:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87527#p87527</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87527#p87527"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87527#p87527"><![CDATA[
<div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And you also need to put the NMI routine I posted in your code.<br /></div><br />I don't understand yours. You push a bunch of stuff onto the stack only to pop it off in the very same routine after only incrementing nmis.</div><br />Hail John Frum, who brings the cargo.<br /><br />There are three structures for a game loop:<br /><ol style="list-style-type: lower-alpha"><li>NMI handler just increments nmis. Main loop waits for increment, updates VRAM, updates sound, then runs one frame of game logic. </li><li>NMI handler updates VRAM and then updates sound, then increments nmis. Main loop waits for increment then runs one frame of game logic. </li><li>NMI handler updates VRAM, updates sound, then runs one frame of game logic. </li></ol>B and C type NMI handlers generally require pushing all registers and pulling them at the end. Some people are so used to B or C type NMI handlers that they end up typing out the pushes by habit and forgetting that they're not strictly needed for A type NMI handlers. Forgive them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">FinalZero, I must say it looks like you are just guessing and hoping for things to somehow work out, instead of actually understanding what you're doing.<br /></div><br />That's sort of how I feel. I *think* I understand it, and then later I find out that I was wrong. Anyways, I've certainly never programmed something where I have to take care of things like vblanks and interrupts before. I admit, lots of it seems cryptic. I apologize if it seems like I'm wasting your time.</div><br />You could try a new thread about starting from my project template and hacking around with it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Dec 14, 2011 7:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FinalZero]]></name></author>
<updated>2011-12-14T04:37:05-07:00</updated>
<published>2011-12-14T04:37:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87525#p87525</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87525#p87525"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87525#p87525"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You still want 0 written to both of those PPU registers while the PPU is still warming up.<br /></div><br />But I thought I was writing to them after the PPU has already warmed up.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also, you should wait two frames for the PPU to warm up, not just one.<br /></div><br />Oops, it's fixed now.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And you also need to put the NMI routine I posted in your code.<br /></div><br />I don't understand yours. You push a bunch of stuff onto the stack only to pop it off in the very same routine after only incrementing nmis.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That doesn't do anything with the stack pointer. Not that it matters. You already set the stack pointer at the beginning of your program. Once you transfer a number from X to the stack pointer (they are not the same thing) with TXS, you can use X for whatever you like. If you're not going to use the #$FF in X you loaded right then for something, there's no need to do it.<br /></div><br />I know. My math routines use a stack based on the zeropage with x as the index register, as its stack pointer. That's what I meant by "stack pointer" here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />FinalZero, I must say it looks like you are just guessing and hoping for things to somehow work out, instead of actually understanding what you're doing.<br /></div><br />That's sort of how I feel. I *think* I understand it, and then later I find out that I was wrong. Anyways, I've certainly never programmed something where I have to take care of things like vblanks and interrupts before. I admit, lots of it seems cryptic. I apologize if it seems like I'm wasting your time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4131">FinalZero</a> — Wed Dec 14, 2011 4:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-12-13T21:52:41-07:00</updated>
<published>2011-12-13T21:52:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87514#p87514</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87514#p87514"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87514#p87514"><![CDATA[
FinalZero, I must say it looks like you are just guessing and hoping for things to somehow work out, instead of actually understanding what you're doing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Dec 13, 2011 9:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-12-13T20:31:28-07:00</updated>
<published>2011-12-13T20:31:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87502#p87502</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87502#p87502"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87502#p87502"><![CDATA[
You still want 0 written to both of those PPU registers while the PPU is still warming up. Also, you should wait two frames for the PPU to warm up, not just one. <br /><br />More like this? <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Inits everything.<br />.proc reset<br />   ; Clears the flags.<br />   ;clc;This isn't needed in your setup code. Its state being unknown<br />   ;Doesn't affect how your code will work in the very beginning<br />   sei;<br />   cld;We only do this because NES doesn't actually have decimal mode. <br />   ;clv;No need to do this either.<br />   <br />   ; Sets the stack pointer.<br />   ldx #$FF<br />   txs<br />   inx<br />   stx PPU_CONTROL<br />   stx PPU_MASK<br />   <br />   ; Waits for the PPU to warm up<br />:   lda $2002<br />   bpl :-;Frame 1<br /><br />   ; Waits for the PPU to warm up.<br />:   lda $2002<br />   bpl :-;Frame 2<br />   <br />   ; Inits the PPU.<br />   ldx #%10000000<br />   stx PPU_CONTROL<br />   <br />   ldx #%00011000<br />   stx PPU_MASK<br />     <br />   jmp main<br />.endproc<br /></div><br /><br />And you also need to put the NMI routine I posted in your code. <br /><br />I don't use what you're using, but it looks like the way to do it is this (from source code Tepples recommended looking at earlier in the topic):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />.segment &quot;VECTORS&quot;<br />  .addr nmi, reset, irq<br /></div><br /><br />Then:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc irq;Sure, here's an IRQ too for good measure<br />  rti<br />.endproc<br />.proc nmi<br />     pha;The interrupt might have happened when you were doing something important<br />     tya;So we save the registers to the stack<br />     pha;And restore them later so that when it<br />     txa;Returns, the same values will be in them.<br />     pha<br /><br />     inc nmis<br /><br />     pla;Restoring the registers<br />     tax;From the stack.<br />     pla<br />     tay<br />     pla<br /><br />     rti;Return from interrupt <br /><br />.endproc<br /></div><br /><br />One other thing: <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Sets the stack pointer again.<br />   ldx #$FF <br /></div><br /><br />That doesn't do anything with the stack pointer. Not that it matters. You already set the stack pointer at the beginning of your program. Once you transfer a number from X to the stack pointer (they are not the same thing) with TXS, you can use X for whatever you like. If you're not going to use the #$FF in X you loaded right then for something, there's no need to do it.<br /><br />In short: <br /><br />1. Changing X won't change the stack pointer unless you use TXS.<br />2. You don't need to change the stack pointer again since you set it up already.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Tue Dec 13, 2011 8:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FinalZero]]></name></author>
<updated>2011-12-13T19:40:57-07:00</updated>
<published>2011-12-13T19:40:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87499#p87499</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87499#p87499"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87499#p87499"><![CDATA[
Okay, so like this?:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Inits everything.<br />.proc reset<br />   ; Clears the flags.<br />   clc<br />   sei<br />   cld<br />   clv<br />   <br />   ; Sets the stack pointer.<br />   ldx #$FF<br />   txs<br />   <br />   ; Waits for the PPU to warm up.<br />:   lda $2002 <br />   bpl :-<br />   <br />   ; Inits the PPU.<br />   ldx #%10000000<br />   stx PPU_CONTROL<br />   <br />   ldx #%00011000<br />   stx PPU_MASK<br />   <br />   ; Sets the stack pointer again.<br />   ldx #$FF<br />   <br />   jmp main<br />.endproc</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4131">FinalZero</a> — Tue Dec 13, 2011 7:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-12-13T19:20:29-07:00</updated>
<published>2011-12-13T19:20:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87497#p87497</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87497#p87497"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87497#p87497"><![CDATA[
You need to actually enable the NMI. <br /><br />Read this: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_registers">http://wiki.nesdev.com/w/index.php/PPU_registers</a><!-- m --><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   inx<br />   stx PPU_CONTROL<br />   stx PPU_MASK <br /></div><br /><br />What you did there is write 0 to both of those registers. Which means no NMI interrupt happens at the start of each frame. (Because bit 7 of $2000 is clear)<br /><br />So after your setup code is done, set bit 7 of $2000. What this causes to start happening is an NMI "interrupt". An interrupt actually interrupts whatever your program was doing before the interrupt, and starts running something else. When that "something else" is done, it returns to where it was before the interrupt took place. <br /><br />This is how nmis will change, even though your current loop does nothing to change it.<br /><br />So while your main loop is doing this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda nmis<br />:   cmp nmis<br />   beq :-<br /></div><br /><br />Eventually, a new frame will start. When that happens, your code will be interrupted and jmp to your NMI routine. Your NMI routine will change the variable nmis, and then return allowing your main loop to continue down.<br /><br />I don't know how to set the NMI vectors with your current setup, but you need to put the address for the NMI routine directly before the address of your reset vector.<br /><br />Edit: Here is a quick NMI to get you started that should at least get you out of that loop:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:<br />     pha;The interrupt might have happened when you were doing something important<br />     tya;So we save the registers to the stack<br />     pha;And restore them later so that when it<br />     txa;Returns, the same values will be in them.<br />     pha<br /><br />     inc nmis<br /><br />     pla;Restoring the registers<br />     tax;From the stack.<br />     pla<br />     tay<br />     pla<br /><br />     rti;Return from interrupt<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Tue Dec 13, 2011 7:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[FinalZero]]></name></author>
<updated>2011-12-13T19:09:21-07:00</updated>
<published>2011-12-13T19:09:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87496#p87496</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87496#p87496"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87496#p87496"><![CDATA[
Okay, so I've meed those changes, and have this now:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Inits everything.<br />.proc reset<br />   ; Clears the flags.<br />   clc<br />   sei<br />   cld<br />   clv<br />   <br />   ; Sets the stack pointer.<br />   ldx #$FF<br />   txs<br />   <br />   ; Waits for the PPU to warm up.<br />:   lda $2002 <br />   bpl :-<br />   <br />   ; Inits the PPU.<br />   inx<br />   stx PPU_CONTROL<br />   stx PPU_MASK<br />   dex<br />   <br />   jmp main<br />.endproc</div><br /><br />However, my code still gets stuck in the NMI handler. I don't even understand how it's supposed to escape it. It continually compares nmis to AC, neither of which are programmed to change in the loop.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda nmis<br />:   cmp nmis<br />   beq :-</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4131">FinalZero</a> — Tue Dec 13, 2011 7:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-12-13T05:25:40-07:00</updated>
<published>2011-12-13T05:25:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87441#p87441</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87441#p87441"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87441#p87441"><![CDATA[
<div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><br />And this happens at the very beginning of one's program?<br /></div><br />It should be right after SEI, CLD, stack initialization, mapper initialization (if applicable) and PPU and APU resetting.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Dec 13, 2011 5:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-12-12T20:32:51-07:00</updated>
<published>2011-12-12T20:32:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87403#p87403</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87403#p87403"/>
<title type="html"><![CDATA[Hello World]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7307&amp;p=87403#p87403"><![CDATA[
Yes. The spinning happens twice, usually about a dozen instructions into a program.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Dec 12, 2011 8:32 pm</p><hr />
]]></content>
</entry>
</feed>