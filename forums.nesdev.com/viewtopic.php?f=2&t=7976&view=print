<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Thoughts on Higher Level Language Design for 6502 Systems</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Thoughts on Higher Level Language Design for 6502 Systems</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7976">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7976</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Jul 15, 2011 9:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Thoughts on Higher Level Language Design for 6502 Systems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You may have read <a href="http://www.dwheeler.com/6502/" class="postlink">David A. Wheeler's 6502 Language Implementation Approaches</a> article. I recently read it but was quite underwhelmed. Although David does point out some of the limitations of the 6502 that makes high-level language implementation challenging or inefficient, he takes the approach of working around those limitations to implement features which are inefficient on the platform.
<br />
<br />I have given considerable thought recently to the design of a language for the 6502. The approach I normally take when designing a language is to start at the bottom and work upwards, making common design patterns and idioms used in the lower-level language easier to implement in the higher-level language.
<br />
<br />To this end I have described the function of a language for the 6502 that cleanly maps to efficient machine instruction sequences that are extremely similar to those we write by hand. Below I describe the function of the language in terms of how it differs from C without regard to syntax. I look forward to your comments.
<br />
<br /><strong>Limitations</strong>
<br />* Function calls may not be part of an expression, only for single-assignment
<br />* Function calls may not be recursive.
<br />* Arrays are limited to 256 elements, however those elements may be of any size
<br />* No support for dynamic memory allocation
<br />* No multiplication, division or modulus operators, rather they are implemented as built-in functions
<br />* Pointer and string data types not supported
<br />* Comparison operators are not considered expressions
<br />* No support for arrays as a member of a struct
<br />
<br /><strong>Features</strong>
<br />* Direct segment management
<br />* 16-, 24- and 32-bit integer support
<br />* Read and write "files", or large arrays, using built-in functions for pointer manipulation
<br />* Support for structs, arrays, and arrays of structs
<br />* Inline assembly support for every language feature
<br />
<br />Thoughts? I would also be interested in hearing what language you would like the syntax based on. I have developed a minimalist line-oriented syntax I use for my languages that lacks punctuation of almost any kind, but it can be hard for someone to pick up if they didn't write the thing <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Jul 15, 2011 11:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Have you seen this thread?
<br /><a href="http://nesdev.com/bbs/viewtopic.php?t=7185" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=7185</a>
<br />Atalan seemed kinda decent.
<br />
<br />I've seen some 6502 people say that Forth is good.
<br />
<br />I've been doing assembly for years, and C (and Verilog, it's much like C) are the first high-level languages I've started using fairly recently.  I'm not sure yet if I'd seriously anything besides asm and C on NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Fri Jul 15, 2011 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />BASIC. It runs pretty quick on the TRS-80 Color Computer, and there's a disassembly out there. I know there's a lot of stuff it can take shortcuts with on the 6809, but I think basic on 6502 would be sweet if it worked on the NES. There's also C64 and Apple basic, although they aren't anywhere near the quality of it on the Coco I don't believe myself.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 15, 2011 11:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is Family BASIC. If only the (72-pin) NES had a keyboard, I'd probably have made a BASIC interpreter myself by now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Jul 15, 2011 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have seen Atalan and thought it looked pretty fuggly. It also uses the approach of forcing the 6502 to implement higher-level language constructs that it's just not that good at. I aim to make a language that exploits the strengths of the 6502.
<br />
<br />FORTH has a lot of overhead on a 6502. It's a stack-based language and the 6502 kinda sucks when it comes to stacks.
<br />
<br />A BASIC interpreter has even more overhead. The BASICs of the day were designed to allow home users to write meaningful and useful programs, not to squeeze every last cycle out of a CPU, which is what we tend to do in NES development. BASIC is great for writing a Tetris clone, but you'd quickly hit a limit with it.
<br />
<br />Also the 6800 series processors had 16-bit register pairs and 16-bit math instructions, and a whole lot of other features that made implementing higher-level languages easier and more efficient.
<br />
<br />Thanks for all the input folks! No remarks about the idea yet. I don't know if I'll actually make this compiler or not. I'm trying to decide between this and writing a game in QBasic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Fri Jul 15, 2011 11:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />6809 is more comparabile to the 68000 than the 6800, check it. And there's also hitachi's 6309.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Sat Jul 16, 2011 3:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Thoughts on Higher Level Language Design for 6502 System</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">You may have read <a href="http://www.dwheeler.com/6502/" class="postlink">David A. Wheeler's 6502 Language Implementation Approaches</a> article. I recently read it but was quite underwhelmed. Although David does point out some of the limitations of the 6502 that makes high-level language implementation challenging or inefficient, he takes the approach of working around those limitations to implement features which are inefficient on the platform.<br /></div><br />What features would those be?<br /><br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">The approach I normally take when designing a language is to start at the bottom and work upwards, making common design patterns and idioms used in the lower-level language easier to implement in the higher-level language.<br /></div><br />What would those be in the case of the 6502?<br /><br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">To this end I have described the function of a language for the 6502 that cleanly maps to efficient machine instruction sequences that are extremely similar to those we write by hand.<br /></div>
<br />Some (more explicit) examples?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Sun Jul 17, 2011 6:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />High-Level Language Features that are Inefficient on a 6502:
<br />
<br />1. Stack-based expression parsing, which allows function calls within expressions.
<br />2. Stack-based local variables, which allows function recursion.
<br />3. Array indices greater than 8-bits requires pointer math.
<br />4. True objects (classes, structures with methods, anything with a <em>this</em> pointer) must use pointer math.
<br />5. Pointers in general are problematic due to the requirement to use zero-page locations.
<br />
<br />
<br />Here are the design patterns I am trying to represent in the language:
<br />
<br />1. Mathematical expression solving using up to 32-bit numbers.
<br />2. Procedure calling with local variables and statically addressed parameters.
<br />3. Static arrays.
<br />4. Static data structures.
<br />5. Static arrays of data structures.
<br />6. Memory files (large arrays using pointers for indexing).
<br />7. Jump tables.
<br />8. Procedure pointers (for procedures with no parameters).
<br />
<br />
<br />And here are the design patterns that I am aware of but not trying to represent:
<br />
<br />1. Reuse of RAM locations for multiple variables.
<br />2. Self-modifying code.
<br />
<br />
<br />So after some thought I am going to implement this language and see how it goes. I am going to use C syntax because it is unambiguous and well-known (Java, JavaScript and C# use the same basic syntax).
<br />
<br />I'll start a new thread when I've got something to show. Hopefully by the end of the week I'll have a compiler done. It might take longer though, this is the first language I've tried to write that supports more than one data type.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Jul 18, 2011 1:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I've seen some 6502 people say that Forth is good.</div>
<br />It's not.  I have to deal with it occasionally on FreeBSD since the 3rd-stage bootstrap is written in Forth.  What an awful atrocity; debugging is the most impossible thing I have ever witnessed.  <a href="http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/boot/forth/support.4th?rev=1.21;content-type=text%2Fplain" class="postlink">Don't click here unless you want a seizure</a>.
<br />
<br />Let's face it: the 6502 is a small, bare-bones microprocessor.  The keyword there is micro.  "User-friendly" languages, particularly scripted languages, are usually over-abstracted and do too much to hide the inner-workings from the programmer.  This sounds sexy and delicious on paper, but in practise/implementation it fails every time.
<br />
<br />This is why you'll find people using assembly a lot of the time, and if not assembly then C -- but we can't really use that on the NES 6502 given the limitations of the architecture/platform.  That's just the way the ball bounces.  Sometimes it's best to keep it bare-bones, you know?
<br />
<br />Though we all know Tepples masturbates at night to the thought of python running on the NES...  ;P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Jul 18, 2011 1:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Godspeed qbradq, I think this is a decent idea. It seems like it would address most of the problems I have with C on 6502. I have been trying to emulate much of the same stuff (local variables, parameter passing) using macros, but there's only so much you can do with them (even though I've come to find the CA65 macro system is amazingly flexible). Also 16-bit math gets annoyingly verbose (i.e. hard to read) even with macros.
<br />
<br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">2. Procedure calling with local variables and statically addressed parameters.</div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And here are the design patterns that I am aware of but not trying to represent:<br /><br />1. Reuse of RAM locations for multiple variables.<br /></div>
<br />Does this mean that each procedure will have its own area of memory for local variables/parameters? That does seem a little bit wasteful. Would it not be possible for the compiler to detect procedures dependencies on each other, and allocate accordingly? For example, the compiler knows proc1 calls proc2, so it knows not to overlap proc2 local variable/parameter area with proc1's area. Of course there are some problems, like proc1 calling proc2, then proc2 calling proc1 again. That could maybe be fixed by making two copies of proc1.. each using a different area of memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Mon Jul 18, 2011 2:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wanted to make a HLL specially for 6502 (Spoiler:  It's easier just to write asm macros).  Got as far as designing syntax and creating a parser, and maybe some operations work.  These were key features:
<br />-No types; everything is an 8 or 16-bit variable
<br />-Any 16-bit variable can be used like a pointer
<br />-Variables declared in loop, function and "scope" keyword have bytes reused outside scope
<br />-ascii string and const array support
<br />-function params don't use stack
<br />
<br />The code basically would have looked like Python with a "*" for memory addressing.  "*()" would be Y-indirect.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Wave</b> [ Mon Jul 18, 2011 3:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Have you seen <a href="http://neshla.sourceforge.net/" class="postlink">NESHLA</a>?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Jul 18, 2011 5:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you all for the input!
<br />
<br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">This is why you'll find people using assembly a lot of the time, and if not assembly then C -- but we can't really use that on the NES 6502 given the limitations of the architecture/platform.  That's just the way the ball bounces.  Sometimes it's best to keep it bare-bones, you know?</div><br /><br />I know, that's why this language <em>is</em> keeping it bare-bones <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Once I'm done with this puppy I think you'll find the generated code to be very close to what you'd write by hand.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Though we all know Tepples masturbates at night to the thought of python running on the NES...  ;P</div><br /><br />I kinda do too <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Does this mean that each procedure will have its own area of memory for local variables/parameters? That does seem a little bit wasteful. Would it not be possible for the compiler to detect procedures dependencies on each other, and allocate accordingly?</div><br /><br />I was going to leave call graphs for a latter optimization in the segmenting module. There should not be much CPU improvement by doing this, and I want to do a proof-of-concept to make sure the CPU efficiency works out the way I think it will before I put too much work into this thing.<br /><br /><div class="quotetitle">Wave wrote:</div><div class="quotecontent">Have you seen <a href="http://neshla.sourceforge.net/" class="postlink">NESHLA</a>?</div>
<br />
<br />Yes, and that is what inspired me to start thinking about this months ago. NESHLA has some great qualities, but it's still lower-level that what I'm trying for. Any software engineer can tell you that all things being equal a higher-level language will allow faster development time, fewer defects and quicker maintenance turn-around that a lower-level language. Well, at least this software engineer will tell you that <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Mon Jul 18, 2011 5:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When discussing the language design, you must first decide, whether you are going to implement the language on 6502 system or as a cross-compiler.
<br />
<br />While it is possible to implement a decent native compiler (see Action!), I believe today it does not have much practical sense, so let's talk about cross-compiler.
<br />
<br />1. Stack-based expression parsing, which allows function calls within expressions. 
<br />
<br />This is not inefficient, it just complicates the parser a little bit.
<br />When you do not allow function calls, you force the programmer to rewrite the expression
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">r = func&#40;a&#41; + func&#40;b&#41;<br /></div><br /><br />to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">r1 = func&#40;a&#41;<br />r2 = func&#40;b&#41;<br />r = r1 + r2<br /></div>
<br />
<br />But that is exactly what the compiler would do. Also note, that unless you want a programming language with RPN, you will need some kind of stack for parsing expressions (to implement operator priority and braces).
<br />
<br />3. Array indices greater than 8-bits requires pointer math
<br />
<br />You need this, or 2-d arrays. Otherwise you will not be able to support access to video ram on any architecture with memory mapped video ram.
<br />
<br />Note, that you can have efficient small arrays with 0..255 indexes while still supporting large arrays.
<br />
<br />4. True objects (classes, structures with methods, anything with a this pointer) must use pointer math.
<br />
<br />That is not an absolute true. For example if you restrict the number of your objects of same class to 256 (quite reasonable restriction under 6502), you can easily represent a 'pointer' to an object as an index to array of objects.  You need to design your whole language around this idea though.
<br />
<br />5. No multiplication, division or modulus operators, rather they are implemented as built-in functions 
<br />
<br />This does not bring any extra effectivity. You can just implement the multiplication and friends as a call to built-in procedure even if the syntax is like A * B.
<br />
<br />6. Reuse of RAM locations for multiple variables
<br />
<br />You absolutelly need this. Otherwise you are going to ran out of variable space very quickly.
<br />
<br />
<br />I'm very interested in how far you can go with your language (does it actually have a name?). It can give me some nice ideas for Atalan <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> Also if you need some help, let me know.
<br />I encourage you to take a look at Atalan source code and take whatever parts you need (math routines may be useful, techniques of reusing ram locations etc.) I hope the source code is kind of readable (although it's probably hard reading anyways, as the algorithms are getting kind of complicated when all the compiler features are added).
<br />
<br />
<br />Rudla
<br />(author of Atalan <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Mon Jul 18, 2011 5:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, I forgot, could you, please, provide more information on Memory files (large arrays using pointers for indexing). 
<br />
<br />?
<br />How exactly does such structure look and what are the operations?
<br />
<br />Thanks,
<br />
<br />Rudla

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>