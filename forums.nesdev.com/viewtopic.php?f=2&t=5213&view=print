<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Map rendering for side scroller, coding question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Map rendering for side scroller, coding question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5213">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5213</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Tue May 26, 2009 6:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Map rendering for side scroller, coding question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is one approach I want to try but I'm not sure if it's good or not.  I'm aware that I'm not always good at explaining things so I will do my best to make it clear.
<br />
<br />The goal is for a side scroller.  I have 2x2 meta-metatile made of 2x2 metatile (which mean the meta-metatile is 4x4 tile wide).  
<br />
<br />The metatile are exported in column style. This mean the content order will be:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 1 3<br />&nbsp; 2 4<br /></div><br /><br />The meta-metatile have the same format.  The map data is saved in column style too.<br /><br />What I want to do is to write the map column by column.  Let say we have 7 meta-metatiles per column.  <br /><br />The PPU is put in column mode (increment 32).  Now when I read the first meta-metatile, I want to write the first "column" of the meta-metatile on the screen.  This mean I will write all the A tiles first,  shown in the example below:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Meta-metatile content<br /><br />&nbsp; &nbsp; AB&nbsp; &nbsp; &nbsp; CD<br /><br />&nbsp;1&nbsp; 13&nbsp; &nbsp;3&nbsp; 13<br />&nbsp; &nbsp; 24&nbsp; &nbsp; &nbsp; 24<br /><br />&nbsp;2&nbsp; 13&nbsp; &nbsp;4&nbsp; 13<br />&nbsp; &nbsp; 24&nbsp; &nbsp; &nbsp; 24<br /></div>
<br />
<br />This mean I will read tile 1-2 of metatile 1 first then repeat the same process for metatile 2.  Then I will skip to the next meta-metatile, repeating the same process (writing column A) for the 6 meta-metatile left.   Once the first column is over, the PPU adress will now be in column 2 (not really, this 2 tiles left but let assume it is) of the screen and I must repeat the same process 3 times (column B, C, D).
<br />
<br />Repeat the same idea for the rest of the column in the map.  Only thing left to think about is to when to write the background attributes. My guess at the end of map rendering is better because this will avoid to change the PPU address pointer many times.
<br />
<br />Doe this approach make sense?  
<br />Thanks for any comments.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue May 26, 2009 7:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, that's the best way to do it.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My guess at the end of map rendering is better because this will avoid to change the PPU address pointer many times. </div>
<br />
<br />Just make sure the map rendering is completely separate from any PPU access, because there's not a lot of vblank time.  As long as it's in a buffer that's output during NMI you can do about anything.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue May 26, 2009 7:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is one way to do it, but I have another suggestion that might make attribute handling easier. Instead of decoding a tile column at a time for every 8 pixels scrolled, you might consider decoding whole meta-metatiles at once.
<br />
<br />Sure, the buffer needed to hold the tiles will have to be larger, but handling full blocks at once is easier than skipping and such. And since the area being decoded at once is conveniently as wide as the area covered by an attribute byte, attributes will be easier to code.
<br />
<br />So, whenever the camera scrolls 64 pixels you could decode 7 whole meta-metatiles for a total of 112 bytes of name table data plus 7 bytes of attribute data. Just spread that amount over the next few VBlanks and you should be fine. If you arrange your buffers well and use the index registers cleverly, you can have the same piece of code always decode the blocks to the buffers and the same piece of code always send the buffers to the PPU, without having to handle special cases depending on what column you are rendering, and without wasting time going through the same blocks multiple times just to fetch different parts of them each time.
<br />
<br />Anyway, this is just a suggestion, an alternative to the way you first proposed, but both ways are fine of course. since you thought of the other way first you might be more comfortable implementing that.
<br />
<br />Most people have a really hard time handling attributes in scrolling games where tile data is updated on the fly, so you might consider it right from the start when designing your rendering engine. Even though it's much easier when the game only scrolls horizontally (no need to worry about attribute byte vertical misalignment) and you might have chosen to define attributes at the meta-metatile (which is conveniently the same size as the area covered by an attribute byte) level, I thought I'd mention it.
<br />
<br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">Once the first column is over, the PPU adress will now be in column 2 (not really, this 2 tiles left but let assume it is) of the screen.</div>
<br />Well, even if you did write all 30 tiles of a column the address would not automatically move on to the second column, it would go into the attribute table and then into the next name table, so you'd still have to set the address for every tile column.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Tue May 26, 2009 9:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Just make sure the map rendering is completely separate from any PPU access, because there's not a lot of vblank time. As long as it's in a buffer that's output during NMI you can do about anything.</div><br /><br />Thanks for the comment. I will keep that in mind.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Instead of decoding a tile column at a time for every 8 pixels scrolled, you might consider decoding whole meta-metatiles at once.</div><br /><br />For now I didn't mention about decoding 1 tile column only for scrolling since I didn't consider in detail yet how to implement it. What I had in mind is to always decode a column of meta-metatile, then decode that column into (4) columns of tiles. But this is still only theoretical: I don't have any code, I'm thinking on how to approach the problem.  The explanation above is how I would decode the column of meta-metatile.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Sure, the buffer needed to hold the tiles will have to be larger, but handling full blocks at once is easier than skipping and such. And since the area being decoded at once is conveniently as wide as the area covered by an attribute byte, attributes will be easier to code.</div><br /><br />I fully agree. Starting to skip column of tile inside a metatile seems a pain.<br /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">without having to handle special cases depending on what column you are rendering, and without wasting time going through the same blocks multiple times just to fetch different parts of them each time.</div><br /><br />For now my approach requires to check each meta-metatile 4 times.  If you process the meta-metatile once, does the data format as an impact? Should it be column based on row based?  How the impact on the buffer and the way to write the buffer to the PPU?<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">since you thought of the other way first you might be more comfortable implementing that.</div><br /><br />Since it's all theoretical and I don't mind about data format because my editor can produce the format I want (or I can program it), either way is fine with me. I'm just trying to find a way that is simpler to develop since my 6502 coding became quite rusty already ^^;;<br /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Well, even if you did write all 30 tiles of a column the address would not automatically move on to the second column, it would go into the attribute table and then into the next name table, so you'd still have to set the address for every tile column.</div>
<br />
<br />Oh.  I though the column increment was a little bit more intelligent than that. Didn't saw any mention of it before. For the attribute table, now I can see why since it's at the end of the name table but why it does jump in the second name table after. hmmm..  guess there is something related to the way the memory is organized. I need to check the wiki or some doc to figure out this one.
<br />
<br />Thanks for the comment Tokumaru.
<br />
<br />Edit:
<br />
<br />I checked and I can see why now. If I use vertical mirroring, writing 1 tile at a time at $2000 by increment of 32, once I write the last tile, I end up at $23C0. Once I skip 2 more line, it becomes $2400, becoming the first column of the second name table.  So it just increase the address counter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed May 27, 2009 12:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What is really hard in scrolling is handling direction changes from the user. If you decode a large portion of metatiles and split the updates in smaller parts, it works fine when scrolling to the same direction, but if you reverse the direction during the update real crap shit will happen and there is no workaround arround that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 27, 2009 10:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">If you decode a large portion of metatiles and split the updates in smaller parts, it works fine when scrolling to the same direction, but if you reverse the direction during the update real crap shit will happen and there is no workaround arround that.</div>
<br />It doesn't have to be as catastrophic as you make it seem. In his situation, if a column of meta-metatiles is being rendered at the right, and the player does go back to the point where a new column has to be rendered at the left, there is nothing wrong in aborting the previous update.
<br />
<br />See, when you go past a certain point (since his blocks are 32 pixels wide, that would be whenever bit 5 of the camera's coordinate changes) a column update is triggered. Say that it takes 4 VBlanks for him to fully update the column. If the player goes back and crosses the point in the opposite direction before those 4 frames are done, there is nothing bad about canceling that update to process the new one. There are not gonna be glitches, because in order to see the glitched section, he'd have to go past the trigger again, so there is no way he'll see the glitched section, because in order for it to scroll into view he'd have to move in the same direction for more than 4 frames.
<br />
<br />Of course I'm assuming that the correctly rendered area is wider than the visible screen by 1 unit in order to hide scrolling glitches. This is the reason why scrolling in both directions is hard with only the stock 2 name tables: in one of the directions it's not possible to correctly render more than 1 screen woth of blocks, so there will be glitches unless you find a way to make the visible area smaller (with IRQs, sprite masks or whatever).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 27, 2009 11:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">For now my approach requires to check each meta-metatile 4 times.  If you process the meta-metatile once, does the data format as an impact? Should it be column based on row based?  How the impact on the buffer and the way to write the buffer to the PPU?</div>
<br />
<br />Sometimes the way in which dat is arranged makes all the difference. I don't know if you'd need to arrange the data differently in the ROM, but the RAM buffers will probably look a bit "unconventional" if you're aiming at performance. Here's how I'd do it:
<br />
<br />Each meta-metaile expands to 16 tiles, right? So, for easy indexing, I'd have 16 7-byte buffers to hold the decoded blocks. Something like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Tile00 .dsb 7<br />Tile01 .dsb 7<br />Tile02 .dsb 7<br />Tile03 .dsb 7<br />Tile10 .dsb 7<br />Tile11 .dsb 7<br />Tile12 .dsb 7<br />Tile13 .dsb 7<br />Tile20 .dsb 7<br />Tile21 .dsb 7<br />Tile22 .dsb 7<br />Tile23 .dsb 7<br />Tile30 .dsb 7<br />Tile31 .dsb 7<br />Tile32 .dsb 7<br />Tile33 .dsb 7</div><br />The numbers are the coordinates of the tiles inside the meta0metatile ((0,0) to (3, 3)). OK, I don't know how you are getting the the index of the meta-metatile, but I'd write the decoding routine somewhat like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx #$00<br />-Decode:<br />&nbsp; &nbsp;;LOGIC TO GET THE INDEX OF THE META-METATILE INTO THE ACCUMULATOR GOES HERE!<br /><br />&nbsp; &nbsp;;get the index of the 4 metatiles<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda Metatile3, y<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda Metatile2, y<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda Metatile1, y<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda Metatile0, y<br /><br />&nbsp; &nbsp;;decode the 1st<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda Tile0, y<br />&nbsp; &nbsp;sta Tile00, x<br />&nbsp; &nbsp;lda Tile1, y<br />&nbsp; &nbsp;sta Tile01, x<br />&nbsp; &nbsp;lda Tile2, y<br />&nbsp; &nbsp;sta Tile10, x<br />&nbsp; &nbsp;lda Tile3, y<br />&nbsp; &nbsp;sta Tile11, x<br /><br />&nbsp; &nbsp;;decode the 2nd<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda Tile0, y<br />&nbsp; &nbsp;sta Tile02, x<br />&nbsp; &nbsp;lda Tile1, y<br />&nbsp; &nbsp;sta Tile03, x<br />&nbsp; &nbsp;lda Tile2, y<br />&nbsp; &nbsp;sta Tile12, x<br />&nbsp; &nbsp;lda Tile3, y<br />&nbsp; &nbsp;sta Tile13, x<br /><br />&nbsp; &nbsp;;decode the 3rd<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda Tile0, y<br />&nbsp; &nbsp;sta Tile20, x<br />&nbsp; &nbsp;lda Tile1, y<br />&nbsp; &nbsp;sta Tile21, x<br />&nbsp; &nbsp;lda Tile2, y<br />&nbsp; &nbsp;sta Tile30, x<br />&nbsp; &nbsp;lda Tile3, y<br />&nbsp; &nbsp;sta Tile31, x<br /><br />&nbsp; &nbsp;;decode the 4th<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda Tile0, y<br />&nbsp; &nbsp;sta Tile22, x<br />&nbsp; &nbsp;lda Tile1, y<br />&nbsp; &nbsp;sta Tile23, x<br />&nbsp; &nbsp;lda Tile2, y<br />&nbsp; &nbsp;sta Tile32, x<br />&nbsp; &nbsp;lda Tile3, y<br />&nbsp; &nbsp;sta Tile33, x<br /><br />&nbsp; &nbsp;;move on to the next meta-metatile<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #$07<br />&nbsp; &nbsp;bne -Decode</div><br />It's partially unrolled, so it's fast but not too big. I use Y to index the block data because you might want to read it with zero page pointers instead. Oh, I don't know how you are storing the attributes, but they are probably ready as part of the meta-metatile or you'll have to form it by combining the bits of each of the 4 metatiles, but either way you'll have to store it in another array also indexed by X. Anyway, after the buffers are ready, you can write them to VRAM with something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx FirsrTile<br />-Update:<br />&nbsp; &nbsp;lda Tile00, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile10, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile20, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile30, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #$07<br />&nbsp; &nbsp;bne -Update</div>
<br />
<br />Of course you can unroll that, arrange the buffer backwards so that you don't need a "cpx" instruction, whatever you want in order to optimize it. Anyway, "FirstTile" would be set beforehand to 0, 7, 14 or 21, depending on which of the 4 columns you want to update.
<br />
<br />I know Bregalad will probably say I'm crazy, he always does because he usually doesn't agree with the way I do things. But yeah, I am a fan of data interleaving and moderate levels of unrolling for some extra speed and reduced complexity of the code (less branches, less special cases and such). I hope my ideas give you some good ones.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed May 27, 2009 12:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, maybe you found a working workarround about the colum update, yet I'm pretty sure if the user is going for example right, then goes left a very small amount and goes right again, it's very hard for the scroll engine not to screw up if it decodes larger parts, which is almost always required by the fact you use metatiles, which is needed unless you have infinite ROM and time to draw your levels.
<br />
<br />I remember that I was having multidirectionnal scrolling with a status bar "hiding" the row update glitches (using 1-screen mirroring), and it was impossible to me to have a system that allow the player to repeately change the vertical direction without doing any major screwing up.
<br />Anyway I lost all the code that did that so if I'm rewriting it I will make a better version of it (but it wasn't for my current game project, but for another hypotetical future one).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed May 27, 2009 12:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What about fully unrolled code in RAM?  I think MC Kids uses that to do scrolling updates.  That game also happens to have the 8K WRAM chip, but still...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 27, 2009 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Of course it's not possible to have clean scrolling in both directions, as we've discussed countless times. But provided there is some "wiggle room" (as is always the case when only one type of scrolling is used), it is possible to flush a buffer small pieces at a time.
<br />
<br /><img src="http://img35.imageshack.us/img35/8576/scroll0.png" alt="Image" />
<br />The red blocks are blocks that have already been rendered, the yellow box represents the area that is rendered to the screen.
<br />
<br /><img src="http://img39.imageshack.us/img39/1838/scroll1.png" alt="Image" />
<br />Once the camera moves right and crosses a block boundary, a new column of blocks must be drawn at the far right, <strong>after</strong> the block that will immediately be displayed (this is why you need some wiggle room).
<br />
<br /><img src="http://img38.imageshack.us/img38/5894/scroll2.png" alt="Image" />
<br />The data is fully decoded to RAM but only one column is sent to VRAM, so there are 3 more to go during the next few VBlanks.
<br />
<br /><img src="http://img39.imageshack.us/img39/4294/scroll3.png" alt="Image" />
<br />If the player changes his mind and goes back, there is no problem. If he causes the camera to cross a block boundary, the update in process is canceled and a new starts for the left side. If a boundary is not crossed, the update continues normally.
<br />
<br /><img src="http://img43.imageshack.us/img43/3300/scroll4.png" alt="Image" />
<br />The camera did cross the block boundary after 2 tile columns were updated, but that's not important at all. The new update at the left is processed normally.
<br />
<br /><img src="http://img505.imageshack.us/img505/3162/scroll5.png" alt="Image" />
<br />If the player doesn't change his mind again, that block will be updated, and that will continue to happen as long as the same direction is maintained. If the camera ever goes back to the right, that partially rendered block will be rendered from the start again.
<br />
<br />So, there is no problem in updating blocks little by little if you have the something valid to display while the new data is rendered. The valid stuff will keep you from seeing any glitches.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 27, 2009 1:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">What about fully unrolled code in RAM?</div><br />Totally unecessary, in my opinion. It is very much possible to update a great amount of VRAM with partially unrolled code in ROM.<br /><br />In my scrolling engine I can scroll 16 pixels in both directions if necessary every frame, while also updating sprites, and the bulk of the unrolled code takes only 96 bytes. To update the palette and sparse blocks I need a break from the columns or rows, but I challenge you to find a game (specially a NES game, since not even Sonic on the MD goes that fast) that scrolls 16 pixels in both directions every frame. So chances are there will be time available for other updates besides rows and columns quite often.<br /><br />If Banshaku really wanted to update all 4 column during a single VBlank, that would be quite possible with a little extra unrolling of the code I presented. I just assumed he'd want to spread the update in order to have a simpler NMI routine, but it could work both ways.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think MC Kids uses that to do scrolling updates.</div>
<br />I believe I have expressed my opinions on this game a few times on this board already. I feel like it's nothing but a mediocre game that uses mediocre programming solutions, favoring hardware enhancements (such as extra RAM) to clever logic solutions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed May 27, 2009 1:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think MC Kids uses that to do scrolling updates.</div><br />I believe I have expressed my opinions on this game a few times on this board already. I feel like it's nothing but a mediocre game that uses mediocre programming solutions, favoring hardware enhancements (such as extra RAM) to clever logic solutions.</div>
<br />But it is a benchmark against which to measure your own programming solutions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 27, 2009 1:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But it is a benchmark against which to measure your own programming solutions.</div>
<br />Yes, but just because the author wrote an article about how he made the game many people seem to look at it like the holy bible of platformers.
<br />
<br />I have nothing against comparing current solutions to solutions used in the old commercial games, but we have to stop thinking of the programmers of those games as gods, celebrities or something. What they came up with is in no way better than what we can come up with nowadays. The only reason production was better back then is that they were paid to do it. If we were too we'd have much better stuff being released.
<br />
<br />Also, this game in particular seems to come up more often than others, probably because of the article, that drew more attention to its internal workings.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed May 27, 2009 2:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I only brought it up because it's one of the few games which I've examined the VRAM update code for.  The other games I've looked at are Battletoads, and Monster Max for the GB.
<br />
<br />Monster Max used some crazy tricks for its platform, a series of ld hl,XXXX / push hl instructions stored inside RAM that wrote to VRAM.
<br />Battletoads is just plain unroll crazy, even though it screws up by triggering the page crossing 1-cycle penalty many times.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed May 27, 2009 2:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess completely unrolled loops are useless when partially unrolled loops can get to about 95% of their performance and waste ridiculously less ressources.
<br />I can do 2 row/columns updates + sprite OAM + palette update with completely rolled loops tough.
<br />
<br />Tokumaru your shematics are nice. Yet I fail to see exactly how you "trigger" updates, but I guess it doesn't really matter, as long as you say it works. I'd rather come up with my own project-specific solution anyway. I was just saying that the direction changes were often the more pain in the ass when working with updates split into small parts.
<br />One cause of this is the combination of multidirectionnal scrolling and that.
<br /> I had a system (the one I lost I mentionned above) where it was the opposite of yours : I updated single 8-pixel columns at a time, and large 4-tile rows by splitting updates into small partss.
<br />
<br />The problem was that when updating a column during the split updates of a row, the row was updated on a place it wasn't suppoed to (where the column was updated). When continuing the scroll in the same direction it would just get updated again so that wasn't a problem, but when changing my system was relying on the rest of the row not being updated to go bakward, and the resulted in possible garbage when changing direction vertically while scrolling horizontally. The workarround I eventually found is to only allow direction changing for values of the vertical scroll which are multiple of $10.
<br />Also note that I was trying to minimize updates on that scroller to save them for CHR-RAM.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>