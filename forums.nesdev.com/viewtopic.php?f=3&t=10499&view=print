<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Why is the current PPU VRAM address updated at scanline 0?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Why is the current PPU VRAM address updated at scanline 0?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10499">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10499</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ArsonIzer</b> [ Mon Sep 16, 2013 4:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Why is the current PPU VRAM address updated at scanline 0?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the PPU rendering page, an explanation is given on how the PPU renders scanlines. I'm trying to implement a scanline-based PPU, but when I look at other emulator's sources, they seem to set the PPU's current VRAM address (loopyV) to the temporary VRAM address (loopyT) on scanline 0. Why is this done? It doesn't give a clear explanation for this on the page, and while it's logical to do so (I think) it isn't explained anywhere (to my knowledge). So why do emulators update this address on scanline 0?<br /><br />EDIT: <br /><br />Not even every emulator does so. I don't know when I'm supposed to update LoopyV to LoopyT other than when I write to $2006 for the second time. Can anyone help me with this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Sep 16, 2013 6:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline </b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If rendering is enabled, the video memory address <em>v</em> is updated during the sync pulse before line 0, which ends at dot 304 of the pre-render line.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Sep 16, 2013 7:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Loopy_V is actually the PPU's own counter as it iterates through the tilemap and fetches the tile numbers.  Loopy_T is the PPU's reference to where the top-left corner of the screen is.<br />If you look at how the bits are related to scrolling, and compare the bits for how you select a tile on the tilemap, you'll find they match exactly.  3 extra bits are used as &quot;fine Y&quot; that don't correspond to bits addressing a tile on the map.<br /><br />Loopy_V is incremented 34 times as it fetches the tiles for a scanline, then it snaps back to the start of that scanline (bits from T copied to V) so it can fetch the tile numbers for the next line.  It also increments fine Y, then possibly tile Y at that time.<br />Then at the start of the frame, it needs to apply both the X and Y scrolling position, so it copies all bits from T to V.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ArsonIzer</b> [ Wed Sep 18, 2013 1:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If rendering is enabled, the video memory address <em>v</em> is updated during the sync pulse before line 0, which ends at dot 304 of the pre-render line.</div><br /><br />Due to my lack of understanding, it took me a while to understand what the timing diagram (<a href="http://wiki.nesdev.com/w/images/d/d1/Ntsc_timing.png" class="postlink">http://wiki.nesdev.com/w/images/d/d1/Ntsc_timing.png</a>) can do for me. Turns out at he last VBLANK line, the horizontal positions first get reloaded, and some dozen lines later, the vertical positions get reloaded. It makes much more sense now that I've discovered how helpful the diagram can be <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ArsonIzer</b> [ Wed Sep 18, 2013 1:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Loopy_V is actually the PPU's own counter as it iterates through the tilemap and fetches the tile numbers.  Loopy_T is the PPU's reference to where the top-left corner of the screen is.<br />If you look at how the bits are related to scrolling, and compare the bits for how you select a tile on the tilemap, you'll find they match exactly.  3 extra bits are used as &quot;fine Y&quot; that don't correspond to bits addressing a tile on the map.<br /><br />Loopy_V is incremented 34 times as it fetches the tiles for a scanline, then it snaps back to the start of that scanline (bits from T copied to V) so it can fetch the tile numbers for the next line.  It also increments fine Y, then possibly tile Y at that time.<br />Then at the start of the frame, it needs to apply both the X and Y scrolling position, so it copies all bits from T to V.</div><br /><br />Why 34 times though? The rest of your explanation makes sense, but if you're talking about the horizontal tiles of a scanline, shouldn't it be incremented 32 times because the PPU draws 32 times 8x8 tiles?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 18, 2013 5:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ArsonIzer wrote:</div><div class="quotecontent">Why 34 times though? The rest of your explanation makes sense, but if you're talking about the horizontal tiles of a scanline, shouldn't it be incremented 32 times because the PPU draws 32 times 8x8 tiles?</div><br />I'm not sure why 34 tiles are fetched, but if the horizontal scroll is not 0, the PPU will display 33 tiles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ArsonIzer</b> [ Wed Sep 18, 2013 6:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">ArsonIzer wrote:</div><div class="quotecontent">Why 34 times though? The rest of your explanation makes sense, but if you're talking about the horizontal tiles of a scanline, shouldn't it be incremented 32 times because the PPU draws 32 times 8x8 tiles?</div><br />I'm not sure why 34 tiles are fetched, but if the horizontal scroll is not 0, the PPU will display 33 tiles.</div><br /><br />33? I assume that you mean the fine X scroll, which means that 1 extra tile will be displayed, which results in 2 tiles only being showed partially, right? Still doesn't explain the 34 thing, although maybe he's talking about the last 2 increments of a scanline to grab the correct tiles for the next scanline. On the timing diagram (or whatever it's called), it says there are 2 additional increments of the horizontal position after the vertical position has been incremented to grab the next 2 tiles of the next scanline. Would that make sense? But if that's the case, wouldn't a scanline still only make 32 increments per line, i.e. 30 for itself and 2 for the next line?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Sep 18, 2013 6:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The PPU's memory reader operates on an 8-dot sequence. Because of how scrolling and tile data decoding work through a shift register, the PPU needs to prefetch about two tiles. The first two tiles are fetched during the back porch (end of horizontal blanking) of the previous line, and the fetches continue throughout the display portion of the current line, after which sprite tile fetches begin. The PPU only <em>needs</em> to fetch 33 tiles, but it fetches 34 tiles because it would have cost a few gates to design the hardware to skip fetching during the last 8-dot sequence of the line.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Sep 18, 2013 11:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline </b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In other words, the PPU uses a pipeline. It must be full when the scanline starts, so it needs to start filling ahead of time. Once it gets almost to the end of the scanline, the filling that occurs after that is unnecessary since it'll stop before it empties the pipeline. But, as tepples said, it takes more hardware to stop filling at this point rather than just let it keep filling and abandon the pipeline once the visible pixels for the scanline are rendered.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ArsonIzer</b> [ Thu Sep 19, 2013 1:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">In other words, the PPU uses a pipeline. It must be full when the scanline starts, so it needs to start filling ahead of time. Once it gets almost to the end of the scanline, the filling that occurs after that is unnecessary since it'll stop before it empties the pipeline. But, as tepples said, it takes more hardware to stop filling at this point rather than just let it keep filling and abandon the pipeline once the visible pixels for the scanline are rendered.</div><br /><br />Thanks for the explanation. This isn't something that's necessary to make an accurate emulator, right? I understand that if I want to create a very accurate emulator (using split-screen effects and whatnot), I need to emulate it in a way that it draws X pixels per so many cycles, rather than drawing a single scanline every time. Would I have to emulate this hardware &quot;garbage-filling&quot; quirk as well, or is it irrelevant to the rendering functionality of the real NES?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 19, 2013 5:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline </b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />MMC2 and MMC4 rely on the quirk.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ti_</b> [ Fri Mar 21, 2014 5:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ArsonIzer wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If rendering is enabled, the video memory address <em>v</em> is updated during the sync pulse before line 0, which ends at dot 304 of the pre-render line.</div><br /><br />Due to my lack of understanding, it took me a while to understand what the timing diagram (<a href="http://wiki.nesdev.com/w/images/d/d1/Ntsc_timing.png" class="postlink">http://wiki.nesdev.com/w/images/d/d1/Ntsc_timing.png</a>) can do for me. Turns out at he last VBLANK line, the horizontal positions first get reloaded, and some dozen lines later, the vertical positions get reloaded. It makes much more sense now that I've discovered how helpful the diagram can be <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />When I try to write to ppu on &quot;scanline -1&quot; (261?) adress is changes by +$1000 on each write in Nintedulator, is it correct?<br />So, it's not allowed to write in ppu on that line?  But other emulators allow this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Mar 21, 2014 7:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline </b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In order to write to video memory on the pre-render line, you need to keep rendering turned off (PPUMASK=0) until you're done writing, and you need to turn rendering back on by x=304. I ran into this problem when trying to fit NES15 in the same bank of the multicart as another NROM-128 game because adding the NMI dispatcher pushed it just over the limit. It was relying on the fact that the PPU stays off the bus during vblank time, but some updates were overflowing into the pre-render line. Turning rendering off explicitly allowed updates to continue into the pre-render line with no problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Fri Mar 21, 2014 10:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Why is the current PPU VRAM address updated at scanline</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Ti_ wrote:</div><div class="quotecontent">When I try to write to ppu on &quot;scanline -1&quot; (261?) adress is changes by +$1000 on each write in Nintedulator, is it correct?<br />So, it's not allowed to write in ppu on that line?  But other emulators allow this.</div><br />Accessing $2007 while rendering is active causes the VRAM address to increment in a rather strange way - it activates both &quot;increment horizontal&quot; and &quot;increment vertical&quot;, but during rendering the carry bits are configured differently so it results in it incrementing both &quot;tile X&quot; and &quot;scanline Y&quot;. Young Indiana Jones Chronicles relies on this behavior to make the screen shake vertically.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>