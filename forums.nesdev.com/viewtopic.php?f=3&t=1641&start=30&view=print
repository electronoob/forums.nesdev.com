<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Overall status of NES emulation</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Overall status of NES emulation</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1641">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1641</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 13, 2006 2:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Processors continue to get more and more psychotic.</div><br />Correction: the x86 architecture is psychotic.</div>
<br />Where can one buy an affordable desktop machine that 1. uses an architecture other than x86 and 2. does not require executables to be signed by the machine's manufacturer?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Jun 13, 2006 3:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You mean like an old iMac?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jun 13, 2006 3:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What's being proposed here by tepples and others is not this; the proposal is to use optimized code where it has no side-effects. For example, if a game doesn't touch the PPU registers for the entire frame, you can use optimized tile and sprite rendering, without any effect on accuracy.</div><br /><br />And when you get a game that <em>does</em> touch the PPU registers mid-frame, you need to switch to a scanline renderer. And when they touch PPU regs mid-scanline you need a dot renderer. I find it easier to just implement one thing (the dot renderer) and get consistent performance for all games.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There seems to be significant negativity towards designs that optimize performance of an emulator. In the past people had to focus on efficiency, and they often did this in ways that unnecessarily sacrificed accuracy. I think the activity is enjoyable, though it has nothing to do with emulation in specific. In my emulator I've had fun keeping it efficient while still passing some of my most rigorous test ROMs (and not just "passing" them in a hacky way). It's a more general activity of doing software engineering and examining possible tradeoffs.</div><br /><br />This is my fault, and I apologize. I was defending my approach in response to comments here and at another board that something is "seriously wrong" if an emulator has high requirements (2-3ghz). The attitude seemed to be because ZSNES can do something with 20x the power of the SNES, an accurate emulator should not require more than 30x or it is flawed in some way, so I was defending my viewpoint.<br /><br />I did not mean to convey this was the only way it could be done. In fact, I agree with your viewpoint and I eagerly await to see what mozz and similar programmers come up with for the SNES :D<br /><br />But I still stand by my statement that there's nothing wrong with requiring a modern mid-range PC for an emulator, regardless of what system it's targeting, so long as you aren't unnecessarily being stupid. eg writing the whole thing in Visual Basic and plotting each pixel for HQ4x using GDI's SetPixel API call. My pure algorithmic code is actually quite well optimized (especially the add/sub code, thanks blargg!). It's just my general "reference" approach that makes it so slow. And it runs fullspeed on a processor that can be had for $60 brand new from major retailers (3ghz Celeron).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Correction: the x86 architecture is psychotic. If you've used other architectures, you'd find them infinitely refreshing in their regularity and efficiency (the same way the 6502 and 65816 are). I take it using a compiler for x86 these days is generally a win?</div><br /><br />I can usually double performance of critical routines by rewriting them in x86 assembler. And I optimize both the c++ and assembler code pretty well. Any algorithmic defencencies I have are reflected in both versions of the code, so you can't blame that.<br /><br />Still, I'd love to get a system with a really good processor (G5 maybe?) that runs FreeBSD and all of the packages I need. But I won't pay over $200 for a complete tower, and it'd better be new, too.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's nothing wrong with an emulator design that favors ease-of-maintenance over ultimate efficiency. In these discussions there seems to be the notion that only one design is right, and the others are wrong and should be avoided.</div><br /><br />Yes there is, and that's why I followed suit. Sorry once again.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What about special features that require a fast emulator, like arbitrary seeking in a movie, real-time reverse playback, or showing a wall of emulators all running at full speed? (all of which are quite cool features to see)</div>
<br />
<br />Your wall emulator and rewind features are indeed very cool :D

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Tue Jun 13, 2006 4:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I take it using a compiler for x86 these days is generally a win? </div>
<br />Compilers do a good enough job for many tasks... but for emulating a 6502 or a 65816, having the x86 flags available probably helps a lot.
<br />
<br />
<br />Regarding scanline-based vs. pixel-based PPU rendering, I've been assuming all along that my PPUs will be a "parallel task" (i.e. a separate green thread that is co-operatively multitasked with the PPU and SPC700) to the CPUs and will batch up as many pixel computations as it can -- but not necessarily an entire scanline.  It will only have to stop when the CPU is stuffing new values into PPU registers.  Then it would get caught up on the old part of the scanline, write the new value, update internal caches (or whatever) and be ready to resume computing pixel values in its new state (which it would not actually do until later).  The key here is that something like sprite 0 collision does not actually affect PPU state used for rendering, so it doesn't have to stop on an event like that.  Unless you actually alter display-related PPU registers in the middle of a scanline, my thing would be kinda equivalent to a scanline-based renderer (maybe with a little extra bookkeeping).
<br />
<br />Edit: by the way, I have a lot of respect for byuu and the great progress he's made with BSNES.  I did not mean any of my comments as a criticism of the design of BSNES.  His design is elegant and functional and achieves his stated goals.  There is definitely a tradeoff between performance and other factors (maintainability, for example).
<br />
<br />Myself, I am interested in trying to build an emulator with BOTH high-performance and high accuracy.  Mostly because its about the hardest possible thing to build that I can think of!  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jun 13, 2006 5:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Correction: the x86 architecture is psychotic.</div>Where can one buy an affordable desktop machine that 1. uses an architecture other than x86 and 2. does not require executables to be signed by the machine's manufacturer?</div><br /><br />Are you suggesting that we not call a spade a spade if it's the only one generally available and affordable?<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">And when you get a game that does touch the PPU registers mid-frame, you need to switch to a scanline renderer. And when they touch PPU regs mid-scanline you need a dot renderer. I find it easier to just implement one thing (the dot renderer) and get consistent performance for all games.</div><br /><br />It's not just you; everyone finds that easier. There's not much point in discussing what things people prefer, whether simple and accurate or complex and fast. The point of a discussion like this is to explore the inherent aspects of designs, leaving it up to the participants to make their own choices based on the facts.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was defending my approach in response to comments here and at another board that something is "seriously wrong" if an emulator has high requirements (2-3ghz).</div><br /><br />Many people in the emulator "scene" who don't actually write emulators are generally consumerist and stupid and better to ignore. I really am put off by that kind of attitude. They have no grasp of engineering and the existence of multiple yet conflicting aspects of things. Authors who cater to people with these attitudes throw away the variety possible with emulation. Emulation can be a very creative field if the competition for monoculture is avoided. End of rant.<br /><br /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">Myself, I am interested in trying to build an emulator with BOTH high-performance and high accuracy.</div>
<br />
<br />Just to preempt criticism here, the tradeoff you make if you want a high-performance and high-accuracy emulator is a much larger investment in design, debugging, and more debugging. Which is fun if you want an engineering challenge. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jun 13, 2006 5:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a rather late reply but...
<br />
<br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Optimizing for a generic x86 target is a journey into madness. It's best to just follow a few simple rules (don't use obscure opcodes, try and use the full register sizes whenever possible, etc) and go with that.</div>
<br />
<br />Which is exactly why I just don't understand the appeal to coding straight x86.  The whole point of sacrificing high level abstraction and portability is to get the performance boost of being able to write code which will be relatively consistent.  But x86 seems to always be changing from chip to chip... new versions behave differently, AMD operates differently than Intel.... sometimes even making programs written in assembly practically as slow as they would be if written in a higher level language.
<br />
<br />But there's pros and cons to everything.  I mean no language is the best -- it ultimately comes down to programmer preference.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jun 13, 2006 5:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">Regarding scanline-based vs. pixel-based PPU rendering, I've been assuming all along that my PPUs will be a "parallel task" (i.e. a separate green thread that is co-operatively multitasked with the PPU and SPC700) to the CPUs and will batch up as many pixel computations as it can -- but not necessarily an entire scanline.  It will only have to stop when the CPU is stuffing new values into PPU registers.</div><br /><br />Exactly how I plan on doing it. But I used the "green threads" for CPU&lt;&gt;APU syncing too. That way nothing needs to be "broken up" from its linear execution and no timers are needed anywhere. You switch to another thread only when you need to (eg the CPU talks to the APU or PPU, which is behind the CPU at present time). And of course, forcing a switch when one gets dramatically ahead of the other.<br />But I won't lie, context switching has its performance hit. You really have to carefully limit them to gain significant speedups.<br /><br />I don't know that I will be able to perfect the order of PPU bus reads and internal variable manipulation, but I'll do as much as I can and hope that in the future people as intelligent as those here will move on to the SNES hardware and do what I could not :)<br />At least it isn't as important as it is in NES emulation. I know of maybe five games that write mid-scanline by accident (and all by overshooting hblank during an IRQ).<br /><br />Speaking of which, you're free to use my cothreading library in your emulator if you want to save yourself some time. Or if you're writing your app in pure assembly I'm sure that's not even a concern to you.<br /><br />And you will lose savestates with your approach unless you use some sort of hybrid state-machine-cothreading.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Which is exactly why I just don't understand the appeal to coding straight x86.</div>
<br />
<br />I agree. ZSNES used it because it was needed to run at full speed on computers of that era. And now they are regretting it and constantly porting the code to c. Yes, now they insist on c and won't use c++, heh. Man, I can't even read assembly code as it is written by most people. I don't see why assembly coders don't indent their loops like c++ coders do. It makes a hell of a difference in readability.
<br />
<br />eg
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">main&#40;&#41; &#123;<br />&nbsp; xor eax,eax<br />&nbsp; mov edx,256<br />&nbsp; .loop &#123;<br />&nbsp; &nbsp; mov edi,dword&#91;ebp&#93;<br />&nbsp; &nbsp; add ebp,4<br />&nbsp; &nbsp; mov ecx,65536<br />&nbsp; &nbsp; - rep<br />&nbsp; &nbsp; &nbsp; stosd<br />&nbsp; &nbsp; &nbsp; dec ecx<br />&nbsp; &nbsp; &nbsp; jnz -<br />&nbsp; &nbsp; dec edx<br />&nbsp; &nbsp; jnz .loop<br />&nbsp; &#125;<br />&nbsp; ret<br />&#125;<br /><br />-vs-<br /><br />main:<br />&nbsp; xor eax,eax<br />&nbsp; mov edx,256<br />.loop<br />&nbsp; mov edi,dword&#91;ebp&#93;<br />&nbsp; add ebp,4<br />&nbsp; mov ecx,65536<br />.loop2<br />&nbsp; rep<br />&nbsp; stosd<br />&nbsp; dec ecx<br />&nbsp; jnz .loop2<br />&nbsp; dec edx<br />&nbsp; jnz .loop<br />&nbsp; ret</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 13, 2006 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">You mean like an old iMac?</div>
<br />I meant new, not used. Case in point: If x86 is so much more psycho than other architectures, then why is Apple switching <em>to</em> x86? I guess that shows empirically that x86 is more <a href="http://japanese.about.com/blsjp46_4.htm" class="postlink">最高 (<em>saikou</em>)</a> than psycho.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jun 13, 2006 8:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Case in point: If x86 is so much more psycho than other architectures, then why is Apple switching <em>to</em> x86?</div>
<br />
<br />Because Windows has dominated the market and Mac was simply alienating itself by being 100% incompatible.  They're taking steps to make it easier for developers to code for both Windows and Mac so that Windows doesn't have the market on 2nd and 3rd party developers by the balls.  (something like Wine could now be made for newer Macs -- whereas before it would be pretty much impossible)
<br />
<br />There's no other reason.  x86 provides no special benefits or anything -- it's just been popular for too long to easily change.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Tue Jun 13, 2006 11:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i always indented my asm code and made it readable.
<br />
<br />and i dont think apple switched to intel because thats what PC uses.  i think thats the last reason.  the power consumtion by the g5 was way too much.  and i think the speed was falling behind compared to the intel x86.   i also think ibm pissed off apple by putting more work into the cell processor.
<br />
<br />correct me if i am wrong.
<br />
<br />personally i like the g4 better.  dont have a g5.
<br />
<br />back on topic...  right now my emu is coded in C.  i will probably keep it readable for the part.  and use inline asm where needed.  (start with x86, and later ppc as i havent learned that yet)
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Wed Jun 14, 2006 3:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Speaking of which, you're free to use my cothreading library in your emulator if you want to save yourself some time. Or if you're writing your app in pure assembly I'm sure that's not even a concern to you.</div><br />Thanks byuu.  I planned to try and use your library to get started, but I might end up replacing it later (dunno).  I'm not that far along yet.  Last night I rewrote my code-emitting and pretty-printing infrastructure, scrapping all my codegen code in the process (but I expect I will be much happier with it from now on).  In fact... I think I'll go home and work on it right now!  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">And you will lose savestates with your approach unless you use some sort of hybrid state-machine-cothreading. </div>
<br />I'm not worried about savestates.  I can save the state of each parallel task separately, and just use whatever simulated time they are currently at when I save them.  As long as you save that time as well, you can resume it accurately.  (If you try to get the times as close together as you reasonably can before saving, it allows less precise emulators to import your savestate and ignore the fact that the state was actually from different times, and they can mostly get away with it).  I will only capture state at predefined "safe" points (such as between instructions).  At these "safe" points, all of the state will be up to date in my context structures (i.e. there won't be any values needed from host machine registers, or anything like that).  There was a lengthy discussion about this awhile ago.  There was some question about whether what I'm describing was general/reliable enough, but I think that it is (and I hope I get far enough one day to prove it).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>