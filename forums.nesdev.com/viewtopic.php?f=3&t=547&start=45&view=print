<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - cycle for cycle stuff</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">cycle for cycle stuff</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=547">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=547</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Wed Mar 29, 2006 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">mozz: I do allow breakpoints to be set in both the CPU and APU, I also allow them both to be stepped cycle by cycle in real time. See bsnes v0.013's debugger for an example of this.</div><br />Of course.  I just wanted to emphasize that in an implementation that was geared towards performance, you wouldn't have to run in lock-step mode unless the user actually set breakpoints in both.  Even with breakpoints set for one chip, you could still run it ahead of the other one to batch up work.  <br /><br />I fully realize that sort of thing makes no sense in the context of Bsnes.  I think Bsnes is great, by the way.  I've looked over some of its code and its pretty readable (very readable by the standards of most emulator code! <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />)<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Oh well, I was hoping for actual problem cases for the catch-up method. I agree that a straightforward design like you describe is great for ease-of-implementation, comprehension, and simplicity. If high efficiency wasn't a prime goal, I would not use catch-up. And like you say, all emulators are at a higher level than the console itself. All take liberty by merely emulating the behavior of the hardware at some level, rather than emulating the hardware itself. Putting aside the extremely low-level operation at the molecular and finer levels, practical things like bad cartridge connections and power glitches require a much lower level of emulation than all emulators currently achieve. </div>
<br />Well, you could take the point of view that what you are emulating is an abstract machine--an artificial construct that can be described in its entirety with mathematical precision.  The Nintendo Entertainment System hardware is one implementation of this abstract machine.  An emulator is a different implementation.  Of course there is some uncertainty when you have multiple chips on independent clocks (like the SNES does).  Maybe that defies the "mathematical precision" and you really do have to think of it as emulating two different interacting abstract machines.  Hmm...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat Apr 01, 2006 2:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Topic drift...
<br />
<br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ok, today i finally finished the new cycle-for-cycle accurate 6502 emulator ... Boy, nothing could prepare me for it. On my P4 2.2GHZ I had 60FPS, and full 30 times slower than the previous core, which had 1800FPS in the same situation. </div><br /><br />Then you seriously botched something up</div>
<br />
<br />Oh you betcha. I have just done a test of the following;
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void Operation69&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;switch&#40;CPU.Cycle&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.Cycle++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 1:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.P &amp;= 0x3D;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40; CPU.A + CPU.Memory&#91;CPU.PC&#93; + &#40;CPU.P &amp; 0x01&#41; &gt; 0xFF &#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.TMP = 1; else CPU.TMP = 0;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40; &#40;char&#41;CPU.A + &#40;char&#41;CPU.Memory&#91;CPU.PC&#93; + &#40;CPU.P &amp; 0x01&#41; &lt; -128 || &#40;char&#41;CPU.A + &#40;char&#41;CPU.Memory&#91;CPU.PC&#93; + &#40;CPU.P &amp; 0x01&#41; &gt; 127 &#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.P += 0x40;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.A += CPU.Memory&#91;CPU.PC&#93; + &#40;CPU.P &amp; 0x01&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.P &amp;= 0xFE;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40; !CPU.A &#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.P += 0x02;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.P += CPU.TMP + &#40;CPU.A &amp; 0x80&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.Cycle = 0;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;CPU.CC++;<br />&#125;<br /></div><br /><br />vs.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void Operation69&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;CPU.CC++;<br />&nbsp; &nbsp;UpdatePPU&#40;&#41;;<br />&nbsp; &nbsp;UpdateAPU&#40;&#41;;<br />&nbsp; &nbsp;UpdateMapping&#40;&#41;;<br /><br />&nbsp; &nbsp;CPU.Byte = CPU.Memory&#91;CPU.PC&#93;;<br />&nbsp; &nbsp;CPU.TMP = &#40;char&#41;CPU.A + &#40;char&#41;CPU.Byte + CPU.CF;<br />&nbsp; &nbsp;if&#40; CPU.TMP &lt; -128 || CPU.TMP &gt; 127 &#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU.VF = 0x40; else CPU.VF = 0x00;<br />&nbsp; &nbsp;if&#40; CPU.A + CPU.Byte + CPU.CF &gt; 0xFF &#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU.TMP2 = 1; else CPU.TMP2 = 0;<br />&nbsp; &nbsp;CPU.NF = CPU.ZF = CPU.A += CPU.Byte + CPU.CF;<br />&nbsp; &nbsp;CPU.CF = CPU.TMP2;<br />&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;CPU.CC++;<br />&nbsp; &nbsp;UpdatePPU&#40;&#41;;<br />&nbsp; &nbsp;UpdateAPU&#40;&#41;;<br />&nbsp; &nbsp;UpdateMapping&#40;&#41;;<br />&#125;<br /></div>
<br />
<br />The latter of the two was twice as fast.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Sun Apr 02, 2006 12:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The sticky part of a catch-up scheme is synching the visible environment changes between processors. Queueing up writes works to a point, but anything that can respond asynchronously takes extra effort.
<br />
<br />Scanline interrupts and such are rather predictable, but that of course adds another layer of complexity to the matter.
<br />
<br />Sound/gui updates should be handled as asynchronously as possible anyways, for the reasons mentioned.
<br />
<br />Any coop multitasking system is going to be rather system specific, though the details can be abstracted out to minimize the unportable bits.
<br />
<br />Coroutines might be another approach as well, though implementing them in C is somewhat tricky. Essentially, when the CPU talks to the APU, it jumps over to the APU code, which does it's thing, then jumps back, keeping track of the state for both. It's relatively similar to cooperative multitasking, except you specify the thread to jump to explicitly.
<br />
<br />As for emulating full-blown multiprocessor systems accurately, there's almost always going to be tradeoffs made, if only because emulating the clock skew and propogation delay between chips is a bit extreme for this stuff. It's better to sit down and think about the system, and determine what exactly each processor can see, what events modify that view, and structure things around that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Wed May 03, 2006 5:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am gonna make WedNESday cycle accurate. But there are a few things that I would like to make sure of first.
<br />
<br />1. Is it worth updating the Data Bus after each cycle? I can't see how this would be useful in a 6502 emulator.
<br />
<br />2. What is the 'Address Bus' that some documents keep referring to. Example;
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BRK<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; address R/W description<br />&nbsp; &nbsp; &nbsp; &nbsp;--- ------- --- -----------------------------------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; fetch opcode, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; read next instruction byte &#40;and throw it away&#41;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; $0100,S&nbsp; W&nbsp; push PCH on stack &#40;with B flag set&#41;, decrement S<br />&nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; $0100,S&nbsp; W&nbsp; push PCL on stack, decrement S<br />&nbsp; &nbsp; &nbsp; &nbsp; 5&nbsp; $0100,S&nbsp; W&nbsp; push P on stack, decrement S<br />&nbsp; &nbsp; &nbsp; &nbsp; 6&nbsp; &nbsp;$FFFE&nbsp; &nbsp;R&nbsp; fetch PCL<br />&nbsp; &nbsp; &nbsp; &nbsp; 7&nbsp; &nbsp;$FFFF&nbsp; &nbsp;R&nbsp; fetch PCH<br /></div><br /><br />2. I am quite confused by the 'pipelining' concept. Some documents say that the previous opcode is executed when the new one is fetched. Is this true? Or is the following correct;<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void ADC&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;PC++;<br />&nbsp; &nbsp;CC++;<br /><br />&nbsp; &nbsp;A += ...&nbsp; &nbsp;// Executed ADC NOW not when next opcode is fetched<br />&nbsp; &nbsp;CC++;<br />&#125;<br /></div>
<br />
<br />Thanks in advance.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Wed May 03, 2006 10:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">2. What is the 'Address Bus' that some documents keep referring to.</div>It just refers to the signalling lines that are used by the CPU to tell other bus participants (e.g. a memory controller?) what address it wants to read or write to.<br /><br />Think of a "bus transaction" as follows:  one party (the CPU) supplies an address on the address lines, and indicates whether it wants to read or write.  If writing, it also supplies a "value" on the data lines.  if reading, the other party (the memory controller?) is responsible for setting the data lines.  One party writes to them and the other party reads from them.<br /><br /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">2. I am quite confused by the 'pipelining' concept. Some documents say that the previous opcode is executed when the new one is fetched. Is this true?</div>
<br />Yes.  But for practical purposes, you can pretend it isn't true.
<br />
<br />"Pipelining" means dividing your logic that implements an instruction into multiple "stages".  If you had three instructions A, B, C and a three-stage pipeline, then in cycle 1 instruction A enters the first stage.  In cycle 2 instruction A moves on to the second stage, and instruction B enters the first stage.  In cycle 3 instruction A enters the third stage, B enters the second stage and C enters the first stage.
<br />
<br />The "latency" of instruction A was 3, because it had to pass through 3 pipeline stages (taking one cycle each) before it was completely finished.  However, the "throughput" of this pipeline (assuming all instructions use all 3 stages and have latency of 3 cycles) would be 1 instruction per cycle!  In other words, by splitting up the task of executing an instruction into 3 stages, we manage to be doing 3 things at once instead of just one thing.  So our throughput is 3 times as high.
<br />
<br />Now, its not always so rosy.  For one thing, instructions take different numbers of cycles and sometimes need to participate in only some of the pipeline stages.  Also, sometimes there are bottlenecks: for example, the 80386 had a pipeline but the first stage had to share some resources with the second stage.  So an instruction could only 'issue' into the pipeline every two cycles, and the minimum effective cost of each instruction was 2 cycles.  The 486 fixed this and many of its instructions could then be executed effectively in one cycle, making it perform noticably better.
<br />
<br />Imagine a branch instruction enters the first stage of your pipeline, but you won't figure out if the branch is 'taken' or 'not taken' until stage 3 of the pipeline.  What do you do on the next cycle?  The branch moves up to stage 2 of the pipeline, but what should go into stage 1?  You don't know yet if its the instruction right after the branch, or the instruction at the branch target address.  (even if you knew, you'd have to fetch that byte before you could decode it).  Most processors have 'branch prediction' logic to try and figure out well in advance whether a branch is <strong>likely</strong> to be taken or not.  They then <strong>assume</strong> that is the case and keep filling the pipeline with the predicted instructions.  If it turns out it guessed wrong, it has to flush the parts of the pipeline that contain wrongly-predicted instructions, causing a "pipeline stall".  On modern X86 processors, most branch instructions are predicted correctly 80% to 90% of the time.  The rest of the time, you take a performance hit that could be anywhere from 10 to 25 cycles. [Edit: I think I forgot to mention, that modern x86 processors have the equivalent of 15-25 stages in their pipelines.  Modern GPUs in graphics cards have even more stages---dozens and dozens!]
<br />
<br />
<br />Okay, so getting back to the 6502... think of it as having a "pipeline of depth two".  The first stage performs a memory access (read or write), and the second stage performs the operation of the instruction.  The first and second cycles of a 6502 instruction are consecutive reads.  During the second cycle, it is also decoding the opcode and deciding what to do with it.  Maybe the second read was wasted (e.g. an implied operand), or maybe it was a Direct Offset or an Absolute Address Low byte, or something else we would have needed to read anyway.  Take the example of an implied operand, though.  The *third* cycle of the instruction is when its actually executed!  But the instruction is only two cycles long, you say!  And you're sort of right---that *third* cycle is the same cycle as when the opcode fetch of the next instruction is occurring:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; A-1.&nbsp; fetch A's opcode&nbsp; &nbsp; &nbsp; &#40;and, finish last instruction&#41;<br />&nbsp; &nbsp; A-2.&nbsp; fetch next byte&nbsp; &nbsp; &nbsp; &nbsp; &#40;and decode A&#41;<br />&nbsp; &nbsp; B-1.&nbsp; fetch B's opcode&nbsp; &nbsp; &nbsp; &#40;***and execute A&#41;<br />&nbsp; &nbsp; B-2.&nbsp; fetch next byte&nbsp; &nbsp; &nbsp; &nbsp; &#40;and decode B, which turns out to be a Zero Page insn&#41;<br />&nbsp; &nbsp; B-3.&nbsp; read from Zero Page&nbsp; &nbsp;&#40;and...idle&#41;<br />&nbsp; &nbsp; C-1.&nbsp; fetch C's opcode&nbsp; &nbsp; &nbsp;&#40;and execute B&#41;<br /></div><br /><br />But if you write these effects sequentially, does it really matter how you divide them up?<br /><br />Even if its really doing this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &#40;finish last instruction&#41; and<br />&nbsp; &nbsp; A-1.&nbsp; fetch A's opcode<br />----------------------------<br />&nbsp; &nbsp; &#40;decode A&#41; and<br />&nbsp; &nbsp; A-2.&nbsp; fetch next byte<br />----------------------------<br />&nbsp; &nbsp; &#40;execute A&#41; and<br />&nbsp; &nbsp; B-1.&nbsp; fetch B's opcode<br />----------------------------<br />&nbsp; &nbsp; &#40;decode B, which turns out to be a Zero Page insn&#41;, and<br />&nbsp; &nbsp; B-2.&nbsp; fetch next byte<br /></div><br /><br />you can for the most part think of it instead as doing this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ....<br />&nbsp; &nbsp; &#40;finish last instruction&#41;<br />----------------------------<br />&nbsp; &nbsp; A-1.&nbsp; fetch A's opcode, and<br />&nbsp; &nbsp; &#40;decode A&#41;<br />----------------------------<br />&nbsp; &nbsp; A-2.&nbsp; fetch next byte, and<br />&nbsp; &nbsp; &#40;execute A&#41;<br />----------------------------<br />&nbsp; &nbsp; B-1.&nbsp; fetch B's opcode, and<br />&nbsp; &nbsp; &#40;decode B, which turns out to be a Zero Page insn&#41;<br />----------------------------<br />&nbsp; &nbsp; B-2.&nbsp; fetch next byte, and<br />&nbsp; &nbsp; ....<br /></div>
<br />
<br />I'm no expert so there might be errors in this.  But you get the general idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat May 06, 2006 7:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very helpful thanks. Does anyone know if reseting the NES clears the pipelines?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat May 06, 2006 12:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Reset is one of the three interrupts (the other being IRQ and NMI). Any interrupt will clear the pipeline.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sat May 06, 2006 3:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What about this...
<br />
<br />1. Trigger NMI/IRQ if pending.
<br />2. Fetch next instruction.
<br />3. Decode the addressing mode &amp; process the proper bytes (1 or 2).
<br />4. Jump to the instruction using the addressing mode byte/word as argument.
<br />
<br />Note: I could make great use of jump tables. A lot of opcodes with different addressing modes work as if they would be only 1.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Sat May 06, 2006 7:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />By the way, I don't think you should actually try to emulate the pipelines explicitly in your code!  That would almost certainly be overkill.
<br />
<br />Remember, external devices can ONLY interact with the CPU through memory accesses and the IRQ/NMI/RESET pins.  So while a device (such as a memory mapper, or the PPU) is able to see reads and writes, it is NOT able to see exactly when the 6502 is doing the "work" of executing the instruction.  That would be internal calculations such as adding a temporary value (perhaps read in the previous cycle) to A.
<br />
<br />So as an emulator author, you just have to make sure the correct "internal operations" are performed sometime during the instruction after the inputs become available and before the output is needed.  The 6502 actually performs them in parallel with bus operations and uses the 2-stage pipeline.  But emulator authors should not need to do that.
<br />
<br />This sort of timing stuff can get very complicated.  If it helps you think about it, you could draw out a sort of "timeline of events" for an instruction.  Divide it up into cycles, and mark down when the different actions (reads, writes, internal computations) are occurring.  For anything thats not externally visible, there is no fixed time you have to do it at --- just dependencies on earlier events, and maybe later events that depend on this one.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Note: I could make great use of jump tables. A lot of opcodes with different addressing modes work as if they would be only 1.</div>
<br />Be aware that there is usually a performance penalty for jumping through a jump table.  That is called a "dynamic branch" and modern processors will be very slow unless it is highly predictable, i.e. 95% of the time you are jumping to the same address.  Opcode dispatch is almost the worst case for dynamic branch, being random enough that the CPU can almost never predict the correct address.  For example, if you were to write your core so that each instruction did TWO table dispatches instead of just one, you would probably find that the whole core was now 10-20% slower!  Of course it depends how fast the rest of your instruction emulation is... since the 6502 performs a read or write (which takes you many host cycles worth of work to emulate) on *every* cycle, maybe you're paying enough for that already that the dispatch overhead is kinda small in comparison.
<br />
<br />I'll recommend this: try to do the table lookup into a register well in advance, and leave it there untouched for a few dozen cycles before you actually do the indirect jump.  One of my coworkers once went for a seminar at Intel about their VTune product, and he asked about dynamic branches and was told that on Pentium 2's and Pentium 3's, a jump through a register is "essentially free" if the address sits in the register for at least 40 cycles before the jump.  My takeaway from that story was that 40 cycles is long enough for the write to the register to retire from the ROB and be written back to the architecturally-visible register file.  Anyway, if the value has been in the register long enough, the branch predictor will just use it as the predicted address.  So try to read it as early as possible.
<br />
<br />[Edit: I realize now this part of my post was disengeous, because I'm actually working on generating cores that do in fact divide most instructions into two halves and do two dynamic branches to execute them.  The first routine handles most of the addressing mode, and the second routine includes the various ALU ops and so on.  It should considerably reduce code size (which I think I am about the only person on the planet who cares about that these days!  hehe) and to avoid it being too slow I'll be doing exactly what I recommended above---in fact my two dispatch tables are combined into one table and my dispatch routine will load BOTH addresses into registers as early as possible.  It will then do a few other things before branching to the first register.  The second register will be untouched throughout the first handler for the instruction (the address mode code) unless it needs to be spilled by the handler for a nontrivial memory access such as a PPU access.  So hopefully, the jump-through-a-register which connects the "first half" of my instruction to its "second half" will be essentially free most of the time.  I'm kind of more interested in how much I can optimize code size anyways...]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat May 06, 2006 9:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">'m kind of more interested in how much I can optimize code size anyways...</div>
<br />
<br />If you can get under around 4K of machine code + 1K for the jump table, you have my C++-based core beat. :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun May 07, 2006 8:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As far as i know, there are 3 "options" to bear with opcode emulation...
<br />
<br />a) a LARGE case statement. You know, around 256 entries of case 00h...FFh inside an infinity loop. Pros? Cons?
<br />
<br />b) jump tables. You use the opcodes as small "pieces", and then jumps to proper "piece" carrying an argument (byte or word). It makes the code much smaller. Pros? Cons?
<br />
<br />c) inlined subroutines. The standard thing, newbie style perhaps? You code each opcode into a separate function, maybe inlined &amp;| static. Each opcode is accessed by a pointer, something like (*function_op[opcode_num](argument)); Pros? Cons?
<br />
<br />Actually, I use b. No clue if a small core could be worst than a large core, like the case statement.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sun May 07, 2006 2:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's mine:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">__forceinline void OperationCode69&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;CPU.CC++;<br />&nbsp; &nbsp;// PPU/APU<br />&nbsp; &nbsp;// ADC<br />&nbsp; &nbsp;CPU.PC++;<br />&nbsp; &nbsp;CPU.CC++;<br />&nbsp; &nbsp;// PPU/APU<br />&#125;<br /><br />__forceinline void OperationCode&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;switch&#40;CPU.Memory&#91;CPU.PC&#93;&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0x69: OperationCode69&#40;&#41;; return;<br />&nbsp; &nbsp;&#125;<br />&#125;<br /></div>
<br />Note the return not break at the end of the opcode fetch. Just as long as there is no code after the case table then you can exit the function immediately. I know that without macros the cycle for cycle memory accessing will make the code large, but never mind. Is there a faster method of doing this kind of thing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Sun May 07, 2006 2:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">Here's mine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">__forceinline void OperationCode&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;switch&#40;CPU.Memory&#91;CPU.PC&#93;&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0x69: OperationCode69&#40;&#41;; return;<br />&nbsp; &nbsp;&#125;<br />&#125;<br /></div></div><br /><br />Note that this generates the exact same code as:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">__forceinline void OperationCode&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;switch&#40;CPU.Memory&#91;CPU.PC&#93;&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0x69: OperationCode69&#40;&#41;; break;<br />&nbsp; &nbsp;&nbsp; &nbsp;case 0x70: OperationCode70&#40;&#41;; break;<br />&nbsp; &nbsp;&#125;<br />&#125;<br /></div>
<br />So you're not actually gaining anything.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sun May 07, 2006 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The return would cause the function to exit straight away, whilst the break would cause the program exit the switch table and then return from the function. Surely without the break is faster?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun May 07, 2006 3:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Compile both versions and compare the binaries using an hexa editor. ^_^;;..

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>