<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=8792" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-04-06T01:55:20-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=8792</id>
<entry>
<author><name><![CDATA[socram8888]]></name></author>
<updated>2012-04-06T01:55:20-07:00</updated>
<published>2012-04-06T01:55:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92210#p92210</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92210#p92210"/>
<title type="html"><![CDATA[USB on the NES]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92210#p92210"><![CDATA[
<img src="http://i.imgur.com/Qjk5g.png" alt="Image" /><br />Initializing the UART, if connected to the second NES controller port, in a unrolled fashion, is something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inituart:<br /><br />ldx #0    ; Clear the LATCH pin<br />sta $4016<br />lda $4017 ; Strobe the CLOCK signal, thus resetting the counter<br /><br />inx       ; Clock LATCH. Counter = %01<br />sta $4016<br />dex<br />sta $4016<br /><br />inx       ; Clock LATCH. Counter = %10. As SPI /CS is connected to counter Q2, now /CS is high, resetting the UART.<br />sta $4016<br />dex<br />sta $4016<br /><br />inx       ; Clock LATCH. Counter = %11. /CS still high.<br />sta $4016<br />dex<br />sta $4016<br /><br />inx       ; Clock LATCH. Counter = %00. /CS goes low again. Now the UART is ready.<br />sta $4016<br />dex<br />sta $4016<br /><br />rts</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4431">socram8888</a> — Fri Apr 06, 2012 1:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[socram8888]]></name></author>
<updated>2012-04-05T02:05:57-07:00</updated>
<published>2012-04-05T02:05:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92162#p92162</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92162#p92162"/>
<title type="html"><![CDATA[USB on the NES]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92162#p92162"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I forgot to mention that there'd need to be some sort of way to create /CS from MOSI ($4016.D0 out). Perhaps it could involve an extended pulse on MOSI (detectable with a 555 timer or similar), or rapidly toggling MOSI without CLK ($4017 read).<br /></div><br />Maybe a high-to-low transition on LATCH without CLK going high. Like the start bit on a I2C transmission.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4431">socram8888</a> — Thu Apr 05, 2012 2:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-04-04T17:44:47-07:00</updated>
<published>2012-04-04T17:44:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92153#p92153</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92153#p92153"/>
<title type="html"><![CDATA[USB on the NES]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92153#p92153"><![CDATA[
The options open up a lot if you go with a mcu on a cart.  I'm using the VUSB library on an AVR to get USB on the NESDEV1 cart (rid yourself of uart entierly).  I'm planning on allowing something to this effect making use of dual ported memory in the CPLD that's always quickly readable by the avr.  But if you're just looking for something simple you could do something like an atmega8 and 8x flipflop mapped to whatever address you'd like.  Syncing wouldn't be as hard as you're suggesting though.  Just write to the location of the flipflop that would also interupt the mcu to fetch and store the data in internal SRAM or feed it to the PC over USB.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Wed Apr 04, 2012 5:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-04-04T15:41:22-07:00</updated>
<published>2012-04-04T15:41:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92151#p92151</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92151#p92151"/>
<title type="html"><![CDATA[USB on the NES]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92151#p92151"><![CDATA[
I forgot to mention that there'd need to be some sort of way to create /CS from MOSI ($4016.D0 out). Perhaps it could involve an extended pulse on MOSI (detectable with a 555 timer or similar), or rapidly toggling MOSI without CLK ($4017 read).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Apr 04, 2012 3:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[socram8888]]></name></author>
<updated>2012-04-04T13:48:58-07:00</updated>
<published>2012-04-04T13:48:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92149#p92149</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92149#p92149"/>
<title type="html"><![CDATA[USB on the NES]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92149#p92149"><![CDATA[
There is a problem with using SPI.<br /><br />There is no pin left for the /CS. If we tie it to ground and a communication error between the NES and the UART happens, the UART would be out of sync, and we would be unable to send or receive anything until we shutdown the system.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4431">socram8888</a> — Wed Apr 04, 2012 1:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[socram8888]]></name></author>
<updated>2012-04-04T06:38:03-07:00</updated>
<published>2012-04-04T06:38:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92140#p92140</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92140#p92140"/>
<title type="html"><![CDATA[USB on the NES]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92140#p92140"><![CDATA[
Have anybody tried yet emulating the SPI via the controller's port? It is possibly the best option, because it is simple and compatible with every NES/Famicom/Famiclone<br /><br />I'll try to get some 25Cxx SPI memories and I'll check if the NES is able to read something. If it is, it should be able to use that IC as well.<br /><br />EDIT: For that purspose I think the <a href="http://www.maxim-ic.com/datasheet/index.mvp/id/1731" class="postlink">MAX3100</a> fits better, as it has EIA-232 TTL-level outputs instead of the RS-232 12V outputs from the MAX3110.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4431">socram8888</a> — Wed Apr 04, 2012 6:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-04-04T05:58:49-07:00</updated>
<published>2012-04-04T05:58:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92138#p92138</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92138#p92138"/>
<title type="html"><![CDATA[USB on the NES]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92138#p92138"><![CDATA[
Do any of these UARTs support acting as an SPI slave? Because the controller ports' protocol is very close to SPI.<br /><br /><a href="http://www.maxim-ic.com/datasheet/index.mvp/id/2052" class="postlink">MAX3110E</a> doesn't mean the BPMs of That One Song have become 10 times faster.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Apr 04, 2012 5:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[socram8888]]></name></author>
<updated>2012-04-04T04:06:11-07:00</updated>
<published>2012-04-04T04:06:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92136#p92136</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92136#p92136"/>
<title type="html"><![CDATA[USB on the NES]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8792&amp;p=92136#p92136"><![CDATA[
I've been thinking about many ways to interface my Famiclone with the computer without the usage of the obsolete serial and parallel ports. It has to be able to work without relying on a fixed CPU speed (no bit-banging), mostly because I want to use it to debug my programs in real-time and bit-baging would mean disabling the PPU, and it has to be quite small to fit inside the case of the console.<br /><br />I tought about using an UART or an ACIA plus a cheap TTL-level UART-to-USB adapter, which is both CPU-independent and it's also quite small.<br /><br />I have tought about four different ways to implement the UART:<br /> - MC6850 ACIA + PAL for address decoding. This is so simple it should work with no problems. Unfortunately the ACIA has no byte buffer, so we are limited to 9600 bps or so, unless we are constantly polling the RX buffer.<br /> - CPLD. Quite small, no NOS parts, and can be reprogrammed to fix bugs or add more features, and can have a RX buffer. The bad part is that I don't know a word about either Verilog nor VHDL, so I have to learn how they work first.<br /> - Logic parts. Quite cheap, but quite big also. It would require about 6 or 7 different chips to implent a basic 7-bit ACIA.<br /> - Using an MCU (either a PIC or an AVR). They have an integrated UART. It is very small, it is possible to implement a very deep byte buffer, and can be used also for other purposes (eg. system debugging, cartridge dumping). The bad part is that it would require a quite accurate timing to "talk" in time with the 6502.<br /><br />I'm a bit more biased towards the first method (mostly because I don't have to design anything, just build it  <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> ), but I want to hear the opinion from the experts first.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4431">socram8888</a> — Wed Apr 04, 2012 4:06 am</p><hr />
]]></content>
</entry>
</feed>