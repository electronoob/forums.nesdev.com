<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - An easier bitmap scaler 2x, 3x...???</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">An easier bitmap scaler 2x, 3x...???</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11206">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11206</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu May 01, 2014 6:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Target is my emulator. I want to scale a 256x240 bitmap into a bigger one, like 3x, 4x... but my method seems slow and... well... too basic! <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br />For my best, an 2x scaler that simply duplicates the current pixel at X+1 and at Y+1 is kinda slow. It's even slower if I think to expand the idea for 3x and 4x scalers.<br /><br />Any ideas, guys? <br /><br /><strong><em>The following example is illustrative only, no optimizations.</em></strong><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;Bitmap-&gt;line&#91; y &#93;&#91; x &#93; = putpixel( value ); //current pixel<br />&nbsp;Bitmap-&gt;line&#91; y &#93;&#91; x+1 &#93; = putpixel( value ); //duplicate it<br /><br />&nbsp;Bitmap-&gt;line&#91; y+1 &#93;&#91; x &#93; = putpixel( value ); //for next line<br />&nbsp;Bitmap-&gt;line&#91; y+1 &#93;&#91; x+1 &#93; = putpixel( value ); //duplicate it<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu May 01, 2014 6:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Normally that shouldn't really be a &quot;slow&quot; operation. If the code you provided runs slow, I would primarily suspect the &quot;putpixel&quot; function call. Does it need to be a function call at all? Aren't you just copying data here? Make sure it isn't a virtual function at least, and maybe inline it.<br /><br />Here's a different expression of the same idea that a compiler should be able to generate fairly efficient code from:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for (int y=0; y&lt;240; ++y)<br />{<br />&nbsp; &nbsp; uint32* restrict line0 = bitmap-&gt;line&#91;(y*2)+0&#93;;<br />&nbsp; &nbsp; uint32* restrict line1 = bitmap-&gt;line&#91;(y*2)+1&#93;;<br />&nbsp; &nbsp; uint32* restrict src = source-&gt;line&#91;y&#93;;<br />&nbsp; &nbsp; for (int x=256; x; --x)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; const uint32 p = *src;<br />&nbsp; &nbsp; &nbsp; &nbsp; line0&#91;0&#93; = p;<br />&nbsp; &nbsp; &nbsp; &nbsp; line1&#91;0&#93; = p;<br />&nbsp; &nbsp; &nbsp; &nbsp; line0&#91;1&#93; = p;<br />&nbsp; &nbsp; &nbsp; &nbsp; line1&#91;1&#93; = p;<br />&nbsp; &nbsp; &nbsp; &nbsp; ++src;<br />&nbsp; &nbsp; &nbsp; &nbsp; line0 += 2;<br />&nbsp; &nbsp; &nbsp; &nbsp; line1 += 2;<br />&nbsp; &nbsp; }&nbsp; &nbsp; <br />}</div><br />You could also unroll the loop a little, but the compiler may already do that for you. Check the assembly produced if you want to be sure. The restrict keyword is a C99 extension, so it may be slightly differently named in your compiler (or require C99 extensions to be manually enabled), but it tells the compiler that the memory regions belonging to these pointers do not overlap, which can assist optimization in this case.<br /><br />For simple upscaling, though, a lot of programs nowadays would offload this work to a graphics card instead of doing it in software. Maybe you should investigate that route instead?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu May 01, 2014 6:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong><span style="text-decoration: underline">All this assumes linear memory here, where 1 byte represents the palette index of 1 pixel (you remember DOS days, so I'm referring to something like 320x200 VGA, segment 0xA000).  You'll get the general idea though.  :-)</span></strong><br /><br />I don't know what <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">putpixel&#40;&#41;</tt> does behind the scenes, but if you wrote it, the easy solution is to make a routine that's identical to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">putpixel&#40;&#41;</tt> but instead of writing 1 byte (8-bits) to draw a pixel, try writing 2 bytes (16-bits) to draw 2 pixels, or 4 bytes (32-bits) to draw 4 pixels, etc...<br /><br />The premise is to minimise the number of repeated calls to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">putpixel&#40;&#41;</tt>.  You'll be surprised how much of a speed-up this provides.<br /><br />I always think of things like this in assembly, so what I'm about to say probably doesn't apply necessarily to things like pure C, but: you'd be limited to 4x scaling on 32-bit archs, 8x scaling on 64-bit archs, etc...  But I think extensions like MMX etc. provide things like 128-bit registers.<br /><br />Anyway you get the gist of it I'm sure: instead of calling a subroutine 2 times to draw 2 pixels, instead call a subroutine that natively draws 2 pixels, or 4 pixels, or 8 pixels, etc...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu May 01, 2014 6:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">For simple upscaling, though, a lot of programs nowadays would offload this work to a graphics card instead of doing it in software. Maybe you should investigate that route instead?</div><br />The problem with this method, at least with DirectX and friends, is that the &quot;memory&quot; (I think in DX terms it's the memory associated with a surface?) used is often on the graphics card natively, which results in stupid things like interpolation or anti-aliasing or whatever -- the visual results look blurry as fuck.  Crazy blind fools think &quot;it looks smoother&quot; but they're crazy blind fools (it looks like shit: period).  <strong>I cannot STAND emulators which do this.</strong>  But I also am a serious hater of things like 2xSai and all that other garbage; I want the &quot;pixellated look&quot; to remain that way (linear scaling) if I scale 2x, 4x, 8x, etc...<br /><br />As I understand it, there are ways around this with DirectX, where you (somehow) tell the thing to use system-based surface memory instead, and for linear scaling you get non-blurry results.  I imagine there are probably ways to do this in Direct3D while still using GPU-native memory.  In fact, I know there is...<br /><br />One such example was versions of Nestopia, where to get that &quot;linear pixellation&quot; look, you had to go into Options / Video and change Memory Pool from Video to System.  However, the version of Nestopia I use today (the unofficial version that some dudes maintain somewhere, where EmuCR posts SVN/GIT builds of it whenever something changes), allows me to use Options / Video / Memory Pool: Video and still get linear scaling that looks crisp/sharp.  I just go to View / Screen Size / 2x and it looks good.  It didn't used to be this way though, so someone somewhere improved something.<br /><br />Attached is an example; speaks for itself.  (Sorry, had to use VirtuaNES to get the blurry look (but normally I check Option / Graphics / SystemMemory Surface to ensure this doesn't happen)<br /><br />The downside, as I understand it, is that using a system memory surface is slower/takes up more time than using native video memory (but the level of impact varies per system's hardware and operating system; if someone's using a PCI video card on a circa-2004 motherboard then the impact is probably going to be quite high compared to, say, a PCIe video card on a circa-2009 motherboard).  But as indicated (in Nestopia), there <strong>is</strong> a way to get linear scaling looking correct when using native video memory.  I just don't speak DirectX or Direct3D to know how to do it.<br /><br />And no I don't test full-screen mode of anything.<br /><br /><strong>And please don't forget about us XP users, by the way.  Don't go the &quot;screw it, I'll use DirectX 11 exclusively&quot; route, unless you also plan on implementing a version using DX9, or even GDI.</strong>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<a href="./download/file.php?id=1505&amp;mode=view"><img src="./download/file.php?id=1505&amp;t=1" alt="example.png" /></a><br />
			<span class="gensmall">example.png [ 95.55 KiB | Viewed 442 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu May 01, 2014 6:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ultimately, the most efficient way to achieve what koitsu asks for involves using a pixel shader to run <a href="http://forums.nesdev.com/viewtopic.php?p=122759#p122759" class="postlink">FBI</a>. This strikes the best balance among preserving the correct 1.143:1 (NTSC) pixel aspect ratio, preserving sharp edges of pixels, and keeping diagonal edges even.<br /><br />Forgetting about users of Windows 2000 and Windows XP has become far more acceptable over the past month. <a href="http://www.microsoft.com/en-us/windows/enterprise/end-of-support.aspx" class="postlink">Even Microsoft has forgotten about Windows XP</a>. Windows Vista, on the other hand, is still under extended support for the next few years, so don't leave DX10 out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu May 01, 2014 9:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />At least Visual Studio Express 2013 still comes with a compiler that can target XP, even if it isn't the default compiler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu May 01, 2014 9:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">The problem with this method, at least with DirectX and friends, is that the &quot;memory&quot; (I think in DX terms it's the memory associated with a surface?) used is often on the graphics card natively, which results in stupid things like interpolation or anti-aliasing or whatever -- the visual results look blurry as fuck.  Crazy blind fools think &quot;it looks smoother&quot; but they're crazy blind fools (it looks like shit: period).  <strong>I cannot STAND emulators which do this.</strong>  But I also am a serious hater of things like 2xSai and all that other garbage; I want the &quot;pixellated look&quot; to remain that way (linear scaling) if I scale 2x, 4x, 8x, etc...<br /><br />As I understand it, there are ways around this with DirectX, where you (somehow) tell the thing to use system-based surface memory instead, and for linear scaling you get non-blurry results.  I imagine there are probably ways to do this in Direct3D while still using GPU-native memory.  In fact, I know there is...</div><br /><br />This has nothing to do with the memory usage. It has everything to do with the texture sampling settings. Zepper is asking for nearest-neighbour interpolation, which you will get if you tell your graphics API to do so. If you set up your scaling routine correctly, the type of interpolation should be explicit.<br /><br />FCEUX, for example, right now does not appear to have an option for interpolation method used for hardware scaling, so you get bilinear interpolation unless you select no hardware acceleration (i.e. software scaling). This isn't an issue with the memory location, the program just lacks code to tell the hardware what scaling method to use.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri May 02, 2014 7:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">This isn't an issue with the memory location, the program just lacks code to tell the hardware what scaling method to use.</div><br />Just telling the hardware &quot;nearest neighbor&quot; will produce uneven diagonal lines when you scale 256x240 to 584x480. <a href="https://pineight.com/mw/images/0/0c/Smb1_title_nearest584.png" class="postlink">Look at the hill and ground</a>. Telling the hardware to use area sampling/FBI involves a pixel shader. How these pixel shaders are written differs between old and new Direct3D, and lack of support for new Direct3D in older versions of Windows is the other thing koitsu was complaining about.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri May 02, 2014 7:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's not a relevant problem. The OP asked about 2x or 3x scaling. 2x/3x nearest neighbour scaling can be very easily accomplished with hardware acceleration, and without having to write pixel shaders. There's no reason for koitsu to advise against using hardware scaling for this, it's very easy to do correctly.<br /><br />Anyhow, what I'm getting at is there's multiple very easy and rather robust solutions to the problem asked about. All these issues being brought up are related to solving different (but maybe related) problems. I do agree with the advice not to exclusively target D3D11, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Fri May 02, 2014 9:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;(unsigned int *)buffer&#91;y&#93;&#91;x&#93; = pixel | (pixel &lt;&lt; 16)</div><br /><br />Does it mean something?<br />In fact, I use pointers. That code is only illustrative. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri May 02, 2014 10:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're using a 16 bit colour buffer, that would horizontally double pixels.<br /><br />Are you using a 16 bit colour buffer? That's kind of an unusual format these days... I don't think I've used such a thing since Windows 95.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>proteal</b> [ Sun May 04, 2014 11:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">The problem with this method, at least with DirectX and friends, is that the &quot;memory&quot; (I think in DX terms it's the memory associated with a surface?) used is often on the graphics card natively, which results in stupid things like interpolation or anti-aliasing or whatever -- the visual results look blurry as fuck.  Crazy blind fools think &quot;it looks smoother&quot; but they're crazy blind fools (it looks like shit: period).  </div><br /><br />Obviously, that's a matter of opinion.  But these games were made to be played on old crappy CRTs, which by nature blurred adjacent pixels.  Some people might feel the pixelated rendering is too digital or artificial.  In your comparison shots, the right image looks more like the real thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun May 04, 2014 12:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: An easier bitmap scaler 2x, 3x...???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bilinear filtering is NOT an accurate representation of the effects of NTSC (or PAL) demodulation and an electron beam going through an aperture grill.<br /><br />Horizontally, for NTSC sets, a sinc rescaler is most nearly accurate, because NTSC demodulation serves as a &quot;brick wall&quot; lowpass filter at less than 1.5× the pixel frequency. PAL's bandwidth is higher and close to 1.5× the pixel frequency, so for PAL the 3rd harmonic is mostly present and correspondingly nearest neighbor is most accurate. Using bilinear instead adds too many negatively correlated high-spatial frequency components producing less sharp edges of pixels than exist in reality; it's about as far from NTSC's reality as nearest neighbor is.<br /><br />Vertically, for any set where interlaced and progressive content looks different (which is not all! some smaller sets have too large of an electron beam as a percentage of the height of the screen), failing to emulate scanlines is also incorrect: using bilinear vertically in this case incorrectly blurs things when there should be a distinct and visible separation.<br /><br />Finally, on both axes, the electron beam itself is approximately a gaussian blur. This is then quantized to the phosphors. This also has to be done with the input correctly gamma-de-corrected, filtered, and re-corrected.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>