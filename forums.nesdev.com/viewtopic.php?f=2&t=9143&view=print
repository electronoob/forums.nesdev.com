<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Spec for HLL targeting NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Spec for HLL targeting NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9143">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9143</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Thu Aug 02, 2012 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Edit:  Back to working on this, made some real progress, spec attached below.  Some of the post below is outdated.<br /><br />Before posting this, I went back and reread this thread (Among others) to see if there were any ideas I overlooked.<br /><br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=7976">http://nesdev.com/bbs/viewtopic.php?t=7976</a><!-- m --><br /><br />The op's ideas were pretty close to my own:  The syntax is going to be very simple, almost BASIC-like, but it does adapt things from C:<br /><br />-Pointers are a separate type and must be declared.  Uses Indirect-Y.<br />-Structs are very much in play.  An array of structs would use Direct Indexing.<br />-Local variables will be simulated, but there's no stack manipulation with Indirect.<br /><br />The plan is to generate asm roughly close to what would be hand-written.<br /><br />Some issues that might crop-up (Or, things from C that didn't make it):<br />-No 24-bit or 32-bit vars:  These will be implemented when the compiler targets 16-bit cpus.  What do you call a 24-bit variable when 'int' is reserved for 32-bits and 'long' for 64-bits?  For now, the carry flag is available if more than 16-bits are needed.<br /><br />-1D arrays only:  Readily maps to processor addressing modes.  On x86 and Arm, 2D and more arrays would be trivial with their multiply instruction, but Noism will not be targeting those platforms.  You'll have to use a pointer table to simulate 2D arrays.<br /><br />One change to the spec:  I'm not crazy about retaining any feature of C pointer syntax, so<br />ptr pointer_var = &amp;var<br /><br />might become<br /><br />ptr pointer_var = [var]<br /><br />Also, forgot negation (~).<br /><br />Reasons to use Noism:<br />-Scoping removes the need to juggle temporary variables<br />-Create a portable code base for NES and GB (Others to be added later)<br />-Syntax maps closely to a handful of asm instructions<br /><br />Right now the compiler does syntax error checking.  Once I get the compiler functional, the plan is to release it with at least one demo that will run on both NES and GB.  Looking forward to feedback -- Hopefully someone else will use it.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=980">noism_spec.txt</a> [17.52 KiB]
			</span><br />
			<span class="gensmall">Downloaded 29 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Thu Aug 02, 2012 11:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a note on the whole idea. HLL is a High Level Language, i.e. very abstracted from the low level, the hardware. So there is a dillema - either you target it for effective resulting code, but this brings some hardware limitations back to the abstaction level (like 1D arrays and lack of 32 bit math), thus compicating use of the language, or you target it to simplify programming a lot, hiding all these details, but this leads to not very effective code.
<br />
<br />Another thing, my personal opinion is that some new language, that has syntax far from a popular one (BASIC, C, Java) is doomed to be used by the author and maybe a few other people only - just because people couldn't use their previous experience well, they also can't use this experience later, and it is difficult to get help on an unpopular, new thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Thu Aug 02, 2012 12:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is no doubt an experiment.  But if nothing else, it's pretty fun to work on a really simple compiler.  The first point I agree with.  Effective code is the aim here.  One way a xD array might be simulated is to restrict the higher dimensions to a power of 2.  Then again, that will result in a crazy amount of bit shifts.  The compiler could also create and load the pointer table automatically; I don't like the idea of surprise code, so that might be enabled with a preprocessor option.
<br />
<br />I may just go ahead and include 32-bit math.  But 24-bit vars are also a necessity.
<br />
<br />The second point I see where you're coming from but not really.  Most programming languages demand experienced programmers change their habits a bit.  Lua had the gall to break the tradition of indexing an array with zero, and those Blizzard guys love it.  This language will never be popular anyway unless it gets new people into deving on old systems.
<br />
<br />Also, please ignore the embarrassing self-contradiction in section XIV. of the spec.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nioreh</b> [ Thu Aug 02, 2012 12:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What's wrong with C style syntax?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Aug 02, 2012 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nothing is really wrong with C-style syntax itself, but C itself has some really backwards features in it.
<br />
<br />Lack of forward declarations is the single most annoying part of C and C++.  I write a function, then need to copy-paste the first line somewhere else just so I can call it in code that happens to be before the function.  That is absolutely ridiculous.
<br />
<br />Also, C doesn't have a good way for a function to return multiple values.  You can return a struct, but that mainly leads to the compiler throwing it on the stack instead of returning it in several registers.
<br />
<br />What else is wrong with C and C++?  Assignments in If expression.  Infinite while loops because you accidentally put a semicolon before the open brace.  The postincrement operator having undefined meaning when there is more than one use of that variable.  The wrong order of operations makes bitwise arithmetic lower priority than expected (OR should be like addition, AND and bit shifts should be like multiplication), but they are all low priority instead.  Leading zeroes magically make your numbers octal.  Tons of annoying legacy crap.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Thu Aug 02, 2012 12:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Mostly because using pointers without '*' and '&amp;' looks cleaner, and I'm trying to reduce usage of the shift-key.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Aug 02, 2012 12:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Lack of forward declarations is the single most annoying part of C and C++.  I write a function, then need to copy-paste the first line somewhere else just so I can call it in code that happens to be before the function.  That is absolutely ridiculous.<br /></div><br />I agree with you on this one !<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, C doesn't have a good way for a function to return multiple values.  You can return a struct, but that mainly leads to the compiler throwing it on the stack instead of returning it in several registers.<br /></div>
<br />To return two values, return a long and bit pack both values in the result.
<br />For more than two values, have a pointer in the argument list that points to where you'd like the function to write its results.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nioreh</b> [ Thu Aug 02, 2012 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, things like that can be cumbersome in C. But if I created a new language like this, I would probably keep the syntax as close to C as I could. It will mean the language is easy to pick up for anyone who has done a little programming. Noism doesn't even use return values as far as I can see? Sort of like only allowing for void functions in a C like world.
<br />
<br />I do like this project, btw. Since I think assembly is very complicated to do large logic stuff in, this will probably make things easier.
<br />
<br />I have been using CC65 a lot, and while it does what I want most of the time, there are some things that really make me want to try something else.
<br />
<br />If noism will make it simpler that CC65 to handle bank switching, it can be really useful. I don't have much experience working with bank switching, but in CC65 you basically have to keep your code small enough to fit in one 16K bank, and use the other one for pure data.
<br />
<br />If noism also generates more efficient code than CC65, that is also a great thing.
<br />
<br />Keep up the good work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Aug 02, 2012 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I have been using CC65 a lot, and while it does what I want most of the time, there are some things that really make me want to try something else.</div>
<br />Could you tell us more ?
<br />I had this idea of porting <a href="http://sdcc.sourceforge.net/" class="postlink">sdcc</a> for the 6502 not long ago, but it will be a large project and I'm not sure I can handle it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 02, 2012 1:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strat wrote:</div><div class="quotecontent">Some issues that might crop-up (Or, things from C that didn't make it):<br />-No 24-bit or 32-bit vars:  These will be implemented when the compiler targets 16-bit cpus.  What do you call a 24-bit variable when 'int' is reserved for 32-bits and 'long' for 64-bits?</div><br />Most C platforms I know of with 16-bit int have 32-bit long. You could use the &lt;stdint.h&gt; names int16_t, uint16_t, int32_t, and uint32_t for variables that stay 16-bit or 32-bit regardless of platform. C doesn't define a 24-bit integer type, but int24_t and uint24_t would be <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" class="postlink">least astonishing to programmers</a>, and they can typedef it to something more convenient (like the s32, u32, s16, and u16 commonly seen in GBA code).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Reasons to use Noism:<br />[...]<br />-Create a portable code base for NES and GB (Others to be added later)</div><br />Yay! No more <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" class="postlink">DRY violations</a> that are characteristic of ports to <a href="http://pineight.com/mw/index.php?title=XNA" class="postlink">some platforms</a>. And if you provide a standard C back end, the result becomes more easily portable to Windows, Mac OS X, desktop Linux, iOS, and Android.<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">What else is wrong with C and C++? Assignments in If expression. Infinite while loops because you accidentally put a semicolon before the open brace.</div><br />I believe several compilers have warnings against that. For example, one would get two warnings for code like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">while &#40;pointer = getNext&#40;&#41;&#41; ;</div><br />Both of which could be suppressed by making the intent clearer:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">while &#40;&#40;pointer = getNext&#40;&#41;&#41; != NULL&#41; &#123; &#125;</div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The postincrement operator having undefined meaning when there is more than one use of that variable.</div><br />Then why not put your increments on another line?<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">To return two values, return a long and bit pack both values in the result. </div>
<br />Not if the values you want to return won't fit in a long. For example, a pointer typically takes up a whole long (sizeof(intptr_t) &gt;= sizeof(long)). Passing a pointer to a struct is far more common in code that I've read, even for two results.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Aug 02, 2012 1:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nioreh wrote:</div><div class="quotecontent">If noism will make it simpler that CC65 to handle bank switching, it can be really useful. I don't have much experience working with bank switching, but in CC65 you basically have to keep your code small enough to fit in one 16K bank, and use the other one for pure data.</div>
<br />It should be fine to have code in switchable banks in CC65, just make sure the library routines (like stack manipulation) are in the fixed bank. This can be achieved by naming the fixed bank/segment "CODE". Of course you have to manually make sure the correct functions are mapped in the non-fixed bank whenever calling them. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Thu Aug 02, 2012 9:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Most C platforms I know of with 16-bit int have 32-bit long. You could use the &lt;stdint.h&gt; names int16_t, uint16_t, int32_t, and uint32_t for variables that stay 16-bit or 32-bit regardless of platform.</div><br /><br />Thinking it over real quick, maybe it's best to adopt the GBA syntax as default:  s8, ... s64.  The 's' is supposed to stand for 'signed' but it might as well be 'storage', since cpus afaik don't distinguish between signed and unsigned, only the 'printf' function.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yay! No more DRY violations that are characteristic of ports to some platforms. And if you provide a standard C back end, the result becomes more easily portable to Windows, Mac OS X, desktop Linux, iOS, and Android.</div><br /><br />Hmmm... having read your XNA article, my best interpretation of this idea is that Noism compiles into C code.  That's not really a bad idea.  Then you'd have one code base that will create a real NES game and a retro-style game for highend systems.  Too bad we didn't have this discussion while Megaman 9 was being developed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 02, 2012 9:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strat wrote:</div><div class="quotecontent">Thinking it over real quick, maybe it's best to adopt the GBA [integer type names] as default:  s8, ... s64.  The 's' is supposed to stand for 'signed' but it might as well be 'storage', since cpus afaik don't distinguish between signed and unsigned, only the 'printf' function.</div><br />An 8*8=16 bit multiply, or 16*16=32, or 32*32=64 sure does. So do the operators /, &lt;, and &gt;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Oct 15, 2012 6:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm glad to see my previous work here is still being read <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> I'll be interested to see what you come up with! I did get mine producing assembly code, but did not pursue it much beyond that.<br /><br />What I discovered in my toying around (and never really reported back on) was that the HLL I had designed simply could not produce machine code that was as efficient (or even close) to the code I would write by hand. This was due to the fact that the HLL and the machine were engineered for different patterns.<br /><br />So, if your goal is to produce machine code that is as efficient or very close to the assembly you would write by hand, you need to identify the patterns you are using while writing assembly and then base the requirements of the HLL on those patterns.<br /><br />If you want a common code base for multiple platforms then you're best bet is to use a small set of basic patterns to base your HLL on, then translate those into machine instructions for the target platform that may not necessarily be very efficient.<br /><br />I think trying to achieve both is not terribly productive on these early microprocessor architectures. These things (the 65xx and Z80 series MC's) were specifically engineered to be programmed in their machine language. Other architectures (like the Intel 80 series and later Motorola 68K series) were designed with HLL's in mind, and efficiently implement some of these HLL patterns in hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Mon Oct 15, 2012 7:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Lack of forward declarations is the single most annoying part of C and C++.  I write a function, then need to copy-paste the first line somewhere else just so I can call it in code that happens to be before the function.  That is absolutely ridiculous.<br /></div><br />I agree with you on this one !<br /></div><br /><br />Me too! I hate that crap, it's so unneeded. I also hate how there's no real way to include data for the binary to use at runtime, you have to load it from a file and stick it in an array or something. I hate how modern languages work in general honestly. C isn't too bad, but still, could be much better.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>