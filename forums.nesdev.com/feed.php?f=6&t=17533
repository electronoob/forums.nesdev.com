<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=6&amp;t=17533" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-07-14T16:59:52-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=6&amp;t=17533</id>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-07-14T16:59:52-07:00</updated>
<published>2018-07-14T16:59:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221104#p221104</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221104#p221104"/>
<title type="html"><![CDATA[Re: Autocorrelation, cepstrum, and Mozer transform are relat]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221104#p221104"><![CDATA[
I hadn't even heard of the Power cepstrum before. Sorry about the tangent.<br /><br />(From my experience with the complex cepstrum, I'm not altogether convinced the power cepstrum is actually useful for anything... it's hard enough to get something useful out of the reversible complex cepstrum)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sat Jul 14, 2018 4:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-07-14T15:36:49-07:00</updated>
<published>2018-07-14T15:36:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221100#p221100</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221100#p221100"/>
<title type="html"><![CDATA[Re: Autocorrelation, cepstrum, and Mozer transform are relat]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221100#p221100"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />The cepstrum does <em>not</em> discard phase<br /></div><br />The complex cepstrum does not. The power cepstrum does. I will edit the above to clarify the difference.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jul 14, 2018 3:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-07-14T14:07:53-07:00</updated>
<published>2018-07-14T14:07:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221094#p221094</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221094#p221094"/>
<title type="html"><![CDATA[Re: Autocorrelation, cepstrum, and Mozer transform are relat]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221094#p221094"><![CDATA[
The cepstrum does <em>not</em> discard phase, and if you do you get garbage out.<br /><br />You have to preserve phase, you have to take the complex log of the input function, and you have to &quot;linearize&quot; the phase too so that there are no discontinuities.<br /><br />If you don't linearize phase, the central assumption (i.e. ifft(log(fft(x)·fft(y)))=ifft(log(fft(x)))+ifft(log(fft(y))) is no longer true.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sat Jul 14, 2018 2:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-07-14T11:14:26-07:00</updated>
<published>2018-07-14T11:14:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221076#p221076</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221076#p221076"/>
<title type="html"><![CDATA[Re: Autocorrelation, cepstrum, and Mozer transform are relat]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221076#p221076"><![CDATA[
My point is that all three transforms can be thought of as multiband compressors that discard phase, just with different compression curves. So algorithms using one, particularly pitch detection, can be ported to another.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jul 14, 2018 11:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-07-14T10:31:07-07:00</updated>
<published>2018-07-14T10:31:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221072#p221072</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221072#p221072"/>
<title type="html"><![CDATA[Re: Autocorrelation, cepstrum, and Mozer transform are relat]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221072#p221072"><![CDATA[
Well, they're related in that they all do some work in the frequency domain, but I think that's true of most sound/music/DSP operations? It's just the natural place to do signal analysis most of the time.<br /><br />The Fourier Transform step is just the practical way to get to that domain. Like you can do the autocorrelation convolution in the signal domain if you want, but the existence of the Fast Fourier Transform makes it way more practical to go to the frequency domain to apply the convolution there. (Convolutions where one of the kernels is very short, on the other hand, are often faster if done directly in the signal domain.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sat Jul 14, 2018 10:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-07-14T09:35:28-07:00</updated>
<published>2018-07-14T09:35:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221067#p221067</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221067#p221067"/>
<title type="html"><![CDATA[Autocorrelation, cepstrum, and Mozer transform are related]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17533&amp;p=221067#p221067"><![CDATA[
Autocorrelation, cepstrum, and Mozer transform are three algorithms for processing pitched signals. I realized in the shower this morning how closely related these algorithms are. The only difference is what function is applied to each element of a spectrum in the frequency domain to change the balance of weak and strong signals.<br /><br /><strong>Trigger warning:</strong> This follow-up to <a href="https://forums.nesdev.com/viewtopic.php?p=90899#p90899" class="postlink">a post from six years ago</a> will be very math-heavy, as I'm taking notes for a possible future project.<br /><br />Given two functions f[] and g[] on the integers, their <a href="https://en.wikipedia.org/wiki/Convolution" class="postlink">convolution</a> (f * g)[] is defined as<br /><br />(f * g)[t] = Σ[m=-∞ to ∞](f[m]g[t - m])<br /><br />The related <a href="https://en.wikipedia.org/wiki/Cross-correlation" class="postlink">cross-correlation</a> is<br /><br />(f *_ g)[t] = Σ[m=-∞ to ∞](f*[m]g[t + m])<br /><br />where f* is the complex conjugate (real part same, imaginary part negated) of f. This is equivalent to convolution of the time reversal of first signal's complex conjugate (or the signal itself if it is real-valued) with a second signal. If one signal is real and symmetric, correlation and convolution are essentially equivalent.<br /><br />The <a href="https://en.wikipedia.org/wiki/Support_(mathematics)" class="postlink">support</a> (width of domain where the function is nonzero) of a discrete convolution or cross-correlation equals the sum of the support of the inputs minus one. For example, convolving functions of length 3 and 6 produces a function of length 8.<br /><br />Convolution with a <a href="https://en.wikipedia.org/wiki/Finite_impulse_response" class="postlink">finite impulse response kernel</a> is often used to filter discrete-time signals, such as audio. Cross-correlation of a signal with itself, or autocorrelation, is used to determine the pitch of a signal. A signal's autocorrelation is time symmetric and has a peak once per period of the signal with an overall simpler shape than the signal itself.<br /><br />Convolution of two long signals takes O(n^2) operations, where n is the width of their support. But because convolution in the time domain correspods to multiplication in the frequency domain (and vice versa), this can be reduced to O(n log n) through an algorithm using the <a href="https://en.wikipedia.org/wiki/Fourier_transform" class="postlink">Fourier transform</a>:<br /><br /><ol style="list-style-type: decimal"><li>Pad both signals to at least the sum of their support (to avoid circular convolution effects)</li><li>Take the Fourier transform of both signals, producing two spectra F{f[]} and F{g[]}</li><li>If performing cross-correlation, take the complex conjugate of F{g[]}</li><li>Multiply the spectra together</li><li>Take the inverse Fourier transform of the resulting spectrum</li></ol><br />Thus autocorrelation becomes this:<br /><br /><ol style="list-style-type: decimal"><li>Pad the signal to at least twice its support</li><li>Take the FT of the signal</li><li>Multiply each element of the spectrum by its complex conjugate, or equivalently, take the square of the magnitude</li><li>Take the inverse FT</li></ol><br />Autocorrelation{f[]} = F-1{|F{f[]}|^2}<br /><br />Time symmetry thus results from loss of phase information, and only the positive half of the autocorrelation is considered.<br /><br />A <a href="https://en.wikipedia.org/wiki/Cepstrum" class="postlink">power cepstrum</a> is similar to an autocorrelation, except a logarithm is inserted to boost the weak frequencies and separate the formants (timbre) of a periodic signal from its pitch.<br /><br />PowerCepstrum{f[]} = F-1{log(|F{f[]}|^2)}<br /><br /><ol style="list-style-type: decimal"><li>Pad the signal to at least twice its support</li><li>Take the FT of the signal</li><li>Take the logarithm of the square of the magnitude of each element of the spectrum</li><li>Take the inverse FT</li></ol><br />The power cepstrum discards phase and is suitable for analysis rather than synthesis, such as pitch detection. There also exists a complex cepstrum that preserves phase and is thus useful for synthesis, but the documents I initially found about calculating the unwrapped phase were paywalled at $33.00 per article from IEEE.<br /><br />Another approach is to replace squared magnitude with magnitude. This results in the <a href="https://pineight.com/mw/?title=Mozer_compression" class="postlink">Mozer transform</a>, which discards phase information to find a time-symmetric representation for a given timbre. This was used to compress voice in several products using a codec developed by Electronic Speech Systems, such as <em>Impossible Mission</em> for C64 (&quot;Another visitor&quot;) and <em>Mito Koumon</em> for Famicom.<br /><br /><ol style="list-style-type: decimal"><li>Pad the signal to at least twice its support</li><li>Take the FT of the signal</li><li>Take the magnitude and discard the phase</li><li>Take the inverse FT</li></ol><br />Mozer{f[]} = F-1{|F{f[]}|}<br /><br />Because the signal is symmetric, half of it can be discarded and computed from the time reversal of the other half. It also concentrates the signal's power close to zero in the time domain, allowing lossy compression of the timbre by windowing out small components far from zero time. And theoretically, the only difference between this and the power cepstrum is that the logarithm (which boosts weak signals) is replaced with the square root (which also boosts weak signals).<br /><br />So a speech codec designed for real-time playback on a 1.8 MHz microprocessor without a hardware multiply might break the signal into segments on the order of 25 ms and then do the following to each segment:<br /><br /><ol style="list-style-type: decimal"><li>Across the previous, current, and next segment, apply a suitable <a href="https://en.wikipedia.org/wiki/Window_function" class="postlink">window function</a> to taper out edge discontinuities.</li><li>Apply one of these dephasing transforms to the windowed signal.</li><li>Pick a peak of the signal with a lag (aka quefrency) greater than 2 ms to find the period. One suggestion is to find the amplitude of the strongest such peak, then find the lowest-lag peak with at least 80% of that amplitude. If needed, use the peaks found when analyzing the previous and next segment to help avoid transient octave errors.</li><li>Apply the Mozer transform to the signal.</li><li>Crop out the signal more than half a period from zero, and see how much of the signal between a quarter and half period you can crop out.</li><li>Store the cropped time domain formants and pitch data.</li></ol><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jul 14, 2018 9:35 am</p><hr />
]]></content>
</entry>
</feed>