<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hex to Decimal</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hex to Decimal</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11341">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11341</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Jun 17, 2014 7:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sure, tepples. Right now I am (slowly) working on something in C that will combine 6502 assembly and C in the same source file and call ca65 to build the assembly. I think my idea will work, but I would be interested to see how others solved this problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Tue Jun 17, 2014 7:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">Omegamatrix, nice code, but what I am more interested in at the moment is how you determine the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;--------------------------------<br />;0-99 conversion stats<br />;--------------------------------<br />&nbsp; ;cycles&nbsp; occurances<br />&nbsp; &nbsp; ;28&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;31&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;34&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;37&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;39&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;42&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;45&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;48&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;50&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;56&nbsp; -&nbsp; 10<br /><br />&nbsp; ;average execution is 41 cycles<br /></div><br /><br />What method/tools do you use to create that information?</div><br /><br />I'm running a 2600 program I wrote, because I don't know much about the NES yet. The 2600 has a 1 cycle timer which I'm loading before the subroutine and checking afterward. From there I run some code to check for the best times and worst times. The difference between best and worse times is small enough that I can use some zero page ram to record how many times each cycle scenario occurs. I subtract the best time to offset it to zero, and also 4 cycles for loading the 2600 timer, and an additional 3 cycles for saving the value left in A at the end of the routine (I do that before I load the timer in A).<br /><br /><br />The program I'm using scrolls through all possible values, and checks if they are all correct. If it's good I get a green passed screen, or a red fail screen. Here's some of the code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.innerLoop:<br />&nbsp; &nbsp; dec&nbsp; &nbsp; hexValue<br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexValue&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; A = 0-255<br /><br />&nbsp; IF DETERMINE_BEST_WORSE_TIME<br />&nbsp; &nbsp; ldy&nbsp; &nbsp; #255<br />&nbsp; &nbsp; sty&nbsp; &nbsp; TIM1T<br />&nbsp; ENDIF<br />&nbsp; &nbsp; jsr&nbsp; &nbsp; HexToDec255<br /><br />;... routine runs here<br /><br />&nbsp; &nbsp; sta&nbsp; &nbsp; decOnes&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; save routine value<br />&nbsp; &nbsp; lda&nbsp; &nbsp; INTIM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get timer value<br />&nbsp; &nbsp; sty&nbsp; &nbsp; decHundreds<br />&nbsp; &nbsp; stx&nbsp; &nbsp; decTens<br /><br />&nbsp; &nbsp; eor&nbsp; &nbsp; #$FF<br />&nbsp; &nbsp; sec<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #4+3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; take away 3 cycles for STA decOnes, and 4 cycles for LDA INTIM<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; worstTime&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; save best/worse time<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .lessThen<br />&nbsp; &nbsp; sta&nbsp; &nbsp; worstTime&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; worseTime begins the routine loaded with 0, and bestTime begins with $FF<br />.lessThen:<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; bestTime<br />&nbsp; &nbsp; bcs&nbsp; &nbsp; .moreThen<br />&nbsp; &nbsp; sta&nbsp; &nbsp; bestTime<br />.moreThen:<br /><br />&nbsp; &nbsp; sec<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #35&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; You have run the routine once to get the best time (35 in this case),<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; and run the routine again afterward with that value.<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; lda&nbsp; &nbsp;#1<br />&nbsp; &nbsp; adc&nbsp; &nbsp;occurances,X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; update count for each routine time occurance...<br />&nbsp; &nbsp; sta&nbsp; &nbsp;occurances,X<br /><br /><br /><br />&nbsp; &nbsp; ldy&nbsp; &nbsp; hexValue&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; verify routine values against tables stored in rom<br />&nbsp; &nbsp; lda&nbsp; &nbsp; decOnes<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; OnesTab,Y<br />&nbsp; &nbsp; bne&nbsp; &nbsp; .setBadFlag<br />&nbsp; &nbsp; lda&nbsp; &nbsp; decTens<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; TensTab,Y<br />&nbsp; &nbsp; bne&nbsp; &nbsp; .setBadFlag<br />&nbsp; &nbsp; lda&nbsp; &nbsp; decHundreds<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; HundredsTab,Y<br />&nbsp; &nbsp; beq&nbsp; &nbsp; .skipMarkBadResult<br /><br />.setBadFlag:<br />&nbsp; &nbsp; lda&nbsp; &nbsp; #$FF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; badValueFlag<br />&nbsp; &nbsp; lda&nbsp; &nbsp; firstBadValue<br />&nbsp; &nbsp; bne&nbsp; &nbsp; .skipMarkBadResult<br />&nbsp; &nbsp; sty&nbsp; &nbsp; firstBadValue<br /><br />.skipMarkBadResult:<br />&nbsp; &nbsp; dey<br />&nbsp; &nbsp; cpy&nbsp; &nbsp; #$FF<br />&nbsp; &nbsp; bne&nbsp; &nbsp; .innerLoop</div><br /><br />Here in Stella's debugger you can see the cycles cases begin at $B0 and continues from there. This snapshot is for the results of 0-255.<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=1641&amp;mode=view"><img src="./download/file.php?id=1641&amp;t=1" alt="DebuggerValues.jpg" /></a><br />
			<span class="gensmall">DebuggerValues.jpg [ 72.54 KiB | Viewed 255 times ]</span>
		

		<br />
	</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 17, 2014 7:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I wrote a 6502 simulator in Python so that I could run automated <a href="https://en.wikipedia.org/wiki/Unit_testing" class="postlink">unit tests</a> on 6502 code. [...] Want to see my simulator?</div><br />Sure, tepples.</div><br />Download <a href="http://pineight.com/cookieclicker/" class="postlink">my work-in-progress Cookie Clicker clone</a> and look in the &quot;float&quot; folder.<br /><br /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">Right now I am (slowly) working on something in C that will combine 6502 assembly and C in the same source file and call ca65 to build the assembly. I think my idea will work, but I would be interested to see how others solved this problem.</div><br />Anything like Leushenko's <a href="http://forums.nesdev.com/viewtopic.php?p=127177#p127177" class="postlink">x86-to-C static recompiler</a>?<br /><br /><div class="quotetitle">Omegamatrix wrote:</div><div class="quotecontent">I'm running a 2600 program I wrote [describes unit test harness]</div><br />Neat. It'd be harder to do that on an NES without mapper support.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Jun 17, 2014 7:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Anything like Leushenko's <a href="http://forums.nesdev.com/viewtopic.php?p=127177#p127177" class="postlink">x86-to-C static recompiler</a>?.</div><br /><br />I considered that idea, but i want to be able to use actual ca65 compatible source, so I am going to load the binary output of ca65 into an open-source 6502 emulator's RAM and hook back to C code when needed.<br /><br />Omegamatrix, interesting solution. I am going to have to look at that more than once to really get what you are doing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Tue Jun 17, 2014 8:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But so long as the cart doesn't put something with read side effects into $6xxx, BIT $6469 should work. (The addresses with read side effects on the NES are $2002, $2007, $4015-$4017, and $4020-$5FFF for the Vs. System's credit acknowledge.) The only mapper that I can think of that has read side effects there is <a href="http://wiki.nesdev.com/w/index.php/Bandai_FCG_board" class="postlink">Bandai boards with an I²C EEPROM</a>.</div><br /><br /><br />I have another option I could try. If I substitute:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; .byte $2C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; BIT $6469<br />.use100<br />&nbsp; &nbsp; adc&nbsp; &nbsp; #100<br />.done</div><br /><br />With this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; .byte $2C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; BIT $9BE9<br />.use100<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #-101<br />.done</div><br /><br />The function is the same. It's a little more convoluted and certainly harder to read, but if it doesn't conflict with anything I would certainly switch over to it.<br /><br />If that still potentially breaks something I'm going to stick a branch in there with some comments that a byte can be saved with BIT, but the user must check for these odd cases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 17, 2014 8:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think any NES mapper has read side effects in $8000-$FFFF because that's where the program itself is, except perhaps for really freaking complicated copy protection schemes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Jun 17, 2014 8:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">read side effects in $8000-$FFFF</div> Mapper 234 triggers bankswitches on reads from $FF80-$FFF7. (This doesn't pose a problem with using BIT here)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Tue Jun 17, 2014 9:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">In fact, all of $4020..$FFFF. It could be RAM, ROM, mapper registers or nothing (= open bus).</div>Actually, I think it could even map things to the rest of the address space too if it wanted to (I have discussed deliberately interfering with mirrors of RAM and PPU registers, in order to allow writes to write two things at once; for example, a mapper may be designed to mirrors its write-only registers at $1xxx, $3xxx, $5xxx, $7xxx, $9xxx, $Bxxx, $Dxxx, $Fxxx).<br /><br />Even if such a thing existed it still won't interfere with using BIT here (which only reads), although changing it to SBC #-101 like you have would in fact fix it with whatever mapper you might want to use (probably; I don't know if there are other cases).<br /><br />Like they said there are some mappers that have side-effects on read from some registers, but $9BE9 is not in that range, and I am not sure why anyone would make one where there are side-effects on read at that address.<br /><br />Maybe you can put a comment explaining it; if needed, it can then be changed between ADD #100 or SBC #-101 or a branch instead of BIT, depending on the mapper, if it is necessary to do so.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Tue Jun 17, 2014 9:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">Maybe you can put a comment explaining it; if needed, it can then be changed between ADD #100 or SBC #-101 or a branch instead of BIT, depending on the mapper, if it is necessary to do so.</div><br /><br />Good idea. I added in the comment with some choices.<br /><br />I also added some ASCII support. Cost was just 2 bytes and 2 cycles. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Wed Jun 18, 2014 11:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I took a look and realized there is a easy way to chop another couple of bytes out of the routine by eliminating a branch. This will bring the total size down to 41 bytes, which is not too bad. The downside is that doing so will add an extra 3 cycles to some cases, including the worst case. To me that seemed like no gain at all. In the end I decided to to leave the routine as is and just post the changes here for user to make their own decision.<br /><br /><br />Old:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">HexToDec99; SUBROUTINE<br />&nbsp; &nbsp; ldx&nbsp; &nbsp; #0 + ASCII_OFFSET<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A = 0-99<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .try20<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #50<br />&nbsp; &nbsp; ldx&nbsp; &nbsp; #5 + ASCII_OFFSET<br />&nbsp; &nbsp; bne&nbsp; &nbsp; .try20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;always branch<br /><br />.div20:<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #20<br />.try20:</div><br /><br />New (save 2 bytes by eliminating branch, but add 3 more cycles):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">HexToDec99; SUBROUTINE<br />&nbsp; &nbsp; ldx&nbsp; &nbsp; #0 + ASCII_OFFSET<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A = 0-99<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .try20<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #30<br />&nbsp; &nbsp; ldx&nbsp; &nbsp; #3 + ASCII_OFFSET<br />.div20:<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #20<br />.try20:</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sat Jun 28, 2014 10:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've wrote a couple more 16 bit number (0-65535) to decimal routines. My old, original routine took 258 bytes, and 150-162 cycles. That routine however was not set up for JSR. To do so would requires 3 more bytes, and 15 cycles. That brings it true cost to 261 bytes, and 165-177 cycles.<br /><br />The first new routine I made takes only 234 bytes, and 157-162 cycles (including the JSR, RTS). Its worse case time is 3 cycles faster then the old routines best case, and it saves 27 bytes. The second new routine saves even more taking only 174 bytes, but takes longer requiring 178-186 cycles to execute. Still, those cycles are not too bad, and I'm pretty happy about the overall performance of both routines.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />The basic approach of both new routines is different to the original. Now I'm going after the 10,000's and 1,000's digit by shifting the high byte to the 1024 value bit. This gives a pretty close approximation to an integer divide by 1000. I start with that and correct the result. The fast routine uses a multiply by 24 table to correct the result. I doubled that table up storing the high byte value (0-6) in the bits 0-2. Since the low byte value only ever uses bits 3-7 this was easy to do.<br /><br />Support has also been added for entries into the routine to do 0-999, 0-255, and 0-99 conversions. Adding support for HexToDec255 and HexToDec999 requires 9 more bytes. Ascii support is also available at a cost of 2 bytes and 2 cycles for each digit.<br /><br /><br />Stats:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;slow routine - 174 bytes, 183 bytes with HexToDec255 and HexToDec999<br />;HexToDec99&nbsp; &nbsp; &nbsp;; 37 cycles<br />;HexToDec255&nbsp; &nbsp; ; 52-57 cycles<br />;HexToDec999&nbsp; &nbsp; ; 72-77 cycles<br />;HexToDec65535&nbsp; ; 178-186 cycles<br /><br /><br />;Fast routine - 234 bytes, 243 bytes with HexToDec255 and HexToDec999<br />;HexToDec99&nbsp; &nbsp; &nbsp;; 37 cycles<br />;HexToDec255&nbsp; &nbsp; ; 52-57 cycles<br />;HexToDec999&nbsp; &nbsp; ; 72-77 cycles<br />;HexToDec65535&nbsp; ; 157-162 cycles<br /><br />;-------------------------------------------------------------------------------<br /><br />;HexToDec99<br />; start in A<br />; end with A = 10's, decOnes<br /><br />;HexToDec255<br />; start in A<br />; end with Y = 100's, A = 10's, decOnes<br /><br />;HexToDec999<br />; start with A = high byte, X = low byte<br />; end with Y = 100's, A = 10's, decOnes<br />; requires 1 extra temp register on top of decOnes, could combine<br />; these two if HexToDec65535 was eliminiated...<br /><br />;HexToDec65535<br />; start with A = high byte, X = low byte<br />; end with decTenThousand, decThousand, Y = 100's, A = 10's, decOnes<br />; requires 2 extra temp registers on top of decTenThousand, decThousand, decOnes</div><br /><br /><br />Here's the fast routine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Hex to Decimal (0-65535) conversion<br />;by Omegamatrix<br />;<br />;HexToDec99&nbsp; &nbsp; &nbsp;; 37 cycles<br />;HexToDec255&nbsp; &nbsp; ; 52-57 cycles<br />;HexToDec999&nbsp; &nbsp; ; 72-77 cycles<br />;HexToDec65535&nbsp; ; 157-162 cycles<br /><br />ASCII_OFFSET = $00<br />temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= decOnes<br />hexHigh&nbsp; &nbsp; &nbsp; = temp2<br />hexLow&nbsp; &nbsp; &nbsp; &nbsp;= temp3<br /><br /><br />Mult24Tab:<br />&nbsp; &nbsp; &nbsp;.byte $00,$18,$30,$48,$60,$78,$90,$A8,$C0,$D8<br />&nbsp; &nbsp; &nbsp;.byte $F0,$09,$21,$39,$51,$69,$81,$99,$B1,$C9<br />&nbsp; &nbsp; &nbsp;.byte $E1,$F9,$12,$2A,$42,$5A,$72,$8A,$A2,$BA<br />&nbsp; &nbsp; &nbsp;.byte $D2,$EA,$03,$1B,$33,$4B,$63,$7B,$93,$AB<br />&nbsp; &nbsp; &nbsp;.byte $C3,$DB,$F3,$0C,$24,$3C,$54,$6C,$84,$9C<br />&nbsp; &nbsp; &nbsp;.byte $B4,$CC,$E4,$FC,$15,$2D,$45,$5D,$75,$8D<br />&nbsp; &nbsp; &nbsp;.byte $A5,$BD,$D5,$ED,$06,$1E<br /><br />Mod100Tab:<br />&nbsp; &nbsp; .byte 0,56,12,56+12<br /><br />ShiftedBcdTab<br />&nbsp; &nbsp; .byte $00,$01,$02,$03,$04,$08,$09,$0A,$0B,$0C<br />&nbsp; &nbsp; .byte $10,$11,$12,$13,$14,$18,$19,$1A,$1B,$1C<br />&nbsp; &nbsp; .byte $20,$21,$22,$23,$24,$28,$29,$2A,$2B,$2C<br />&nbsp; &nbsp; .byte $30,$31,$32,$33,$34,$38,$39,$3A,$3B,$3C<br />&nbsp; &nbsp; .byte $40,$41,$42,$43,$44,$48,$49,$4A,$4B,$4C<br /><br />HexToDec65535; SUBROUTINE<br />&nbsp; &nbsp; sta&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @9<br />&nbsp; &nbsp; stx&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @12<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @14<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @16<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @18&nbsp; &nbsp;integer divide 1024 (result 0-63)<br /><br />&nbsp; &nbsp; cpx&nbsp; &nbsp; #$A7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @20&nbsp; &nbsp;account for overflow of multiplying 24 from 43,000 ($A7F8) onward,<br />&nbsp; &nbsp; adc&nbsp; &nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @22&nbsp; &nbsp;we can just round it to $A700, and the divide by 1024 is fine...<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @24<br />&nbsp; &nbsp; lda&nbsp; &nbsp; Mult24Tab+1,Y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @28&nbsp; &nbsp;could use LAX...<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @30<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$F8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @32<br />&nbsp; &nbsp; adc&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @35<br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @37<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @39<br />&nbsp; &nbsp; adc&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @42<br />&nbsp; &nbsp; ror&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @44<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @46<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @48&nbsp; &nbsp;integer divide 1,000 (result 0-65)<br /><br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @50&nbsp; &nbsp;split the 1,000 and 10,000 digit<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @52<br />&nbsp; &nbsp; lda&nbsp; &nbsp; ShiftedBcdTab,X&nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @56<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @58<br />&nbsp; &nbsp; rol&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @60<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @62<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decThousands&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @65<br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @67<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @69<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @71<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @73<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decTenThousands&nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @76<br /><br /><br />&nbsp; &nbsp; ;at this point we have a number 0-65 that we have to times by 24,<br />&nbsp; &nbsp; ;add to original sum, and Mod 1024 to get the remainder 0-999<br /><br />&nbsp; &nbsp; lda&nbsp; &nbsp; Mult24Tab,Y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @80&nbsp; &nbsp;could use LAX...<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @82<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$F8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @84<br />&nbsp; &nbsp; clc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @86<br />&nbsp; &nbsp; adc&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @89<br />&nbsp; &nbsp; sta&nbsp; &nbsp; temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @92<br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @94<br />&nbsp; &nbsp; adc&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @97<br />Start100s:<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @99<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @101&nbsp; &nbsp;0,1,2,3<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @103<br />&nbsp; &nbsp; rol&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @105&nbsp; &nbsp;0,2,5,7<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @107&nbsp; &nbsp;Y = Hundreds digit<br /><br />&nbsp; &nbsp; lda&nbsp; &nbsp; temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @110<br />&nbsp; &nbsp; adc&nbsp; &nbsp; Mod100Tab,X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @114&nbsp; adding remainder of 256, 512, and 256+512 (all mod 100)<br />&nbsp; &nbsp; bcs&nbsp; &nbsp; .doSub200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2³ @116/117<br /><br />.try200:<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @118<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .try100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2³ @120/121<br />.doSub200:<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @122<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @124<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @126<br />.try100:<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @128<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; HexToDec99&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2³ @130/131<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @132<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @134<br />HexToDec99; SUBROUTINE<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @136<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @138<br />&nbsp; &nbsp; lda&nbsp; &nbsp; ShiftedBcdTab,X&nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @142<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @144<br />&nbsp; &nbsp; rol&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @146<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @148<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decOnes&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @151<br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @153<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @155<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @157<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @159<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;6&nbsp; @165&nbsp; &nbsp;A = tens digit<br /><br /><br /><br />HexToDec255; SUBROUTINE<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ldy&nbsp; &nbsp; #ASCII_OFFSET&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2&nbsp; @8<br />&nbsp; &nbsp; bne&nbsp; &nbsp; .try200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @11&nbsp; &nbsp; always branch<br />&nbsp; ELSE<br />&nbsp; &nbsp; ldy&nbsp; &nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @8<br />&nbsp; &nbsp; beq&nbsp; &nbsp; .try200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @11&nbsp; &nbsp; always branch<br />&nbsp; ENDIF<br /><br />HexToDec999; SUBROUTINE<br />&nbsp; &nbsp; stx&nbsp; &nbsp; temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @9<br />&nbsp; &nbsp; jmp&nbsp; &nbsp; Start100s&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @12</div><br /><br /><br />Here's the slower routine, which saves a lot of bytes:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Hex to Decimal (0-65535) conversion<br />;by Omegamatrix<br />;<br />;HexToDec99&nbsp; &nbsp; &nbsp;; 37 cycles<br />;HexToDec255&nbsp; &nbsp; ; 52-57 cycles<br />;HexToDec999&nbsp; &nbsp; ; 72-77 cycles<br />;HexToDec65535&nbsp; ; 178-186 cycles<br /><br />ASCII_OFFSET = $00<br />temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= decOnes<br />hexHigh&nbsp; &nbsp; &nbsp; = temp2<br />hexLow&nbsp; &nbsp; &nbsp; &nbsp;= temp3<br /><br /><br />Mod100Tab:<br />&nbsp; &nbsp; .byte 0,56,12,56+12<br /><br />ShiftedBcdTab<br />&nbsp; &nbsp; .byte $00,$01,$02,$03,$04,$08,$09,$0A,$0B,$0C<br />&nbsp; &nbsp; .byte $10,$11,$12,$13,$14,$18,$19,$1A,$1B,$1C<br />&nbsp; &nbsp; .byte $20,$21,$22,$23,$24,$28,$29,$2A,$2B,$2C<br />&nbsp; &nbsp; .byte $30,$31,$32,$33,$34,$38,$39,$3A,$3B,$3C<br />&nbsp; &nbsp; .byte $40,$41,$42,$43,$44,$48,$49,$4A,$4B,$4C<br /><br />HexToDec65535; SUBROUTINE<br />&nbsp; &nbsp; sta&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @9<br />&nbsp; &nbsp; stx&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @12<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @14<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @16<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @18&nbsp; &nbsp;integer divide 1024 (result 0-63)<br /><br />&nbsp; &nbsp; cpx&nbsp; &nbsp; #$A7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @20&nbsp; &nbsp;account for overflow of multiplying 24 from 43,000 ($A7F8) onward,<br />&nbsp; &nbsp; adc&nbsp; &nbsp; #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @22&nbsp; &nbsp;we can just round it to $A700, and the divide by 1024 is fine...<br /><br />&nbsp; &nbsp; ;at this point we have a number 1-65 that we have to times by 24,<br />&nbsp; &nbsp; ;add to original sum, and Mod 1024 to get a remainder 0-999<br /><br /><br />&nbsp; &nbsp; sta&nbsp; &nbsp; temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @25<br />&nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @27<br />&nbsp; &nbsp; adc&nbsp; &nbsp; temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @30&nbsp; x3<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @32<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @34<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @36<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @38<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @40<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @42<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @44<br />&nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @46<br />&nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @48<br />&nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @50<br />&nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @52<br />&nbsp; &nbsp; clc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @54<br />&nbsp; &nbsp; adc&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @57<br />&nbsp; &nbsp; sta&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @60<br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @62<br />&nbsp; &nbsp; adc&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @65<br />&nbsp; &nbsp; sta&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @68<br />&nbsp; &nbsp; ror&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @70<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @72<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @74&nbsp; &nbsp; integer divide 1,000 (result 0-65)<br /><br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @76&nbsp; &nbsp; split the 1,000 and 10,000 digit<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @78<br />&nbsp; &nbsp; lda&nbsp; &nbsp; ShiftedBcdTab,X&nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @82<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @84<br />&nbsp; &nbsp; rol&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @86<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @88<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decThousands&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @91<br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @93<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @95<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @97<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @99<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decTenThousands&nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @102<br /><br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @105<br />&nbsp; &nbsp; cpy&nbsp; &nbsp; temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @108<br />&nbsp; &nbsp; bmi&nbsp; &nbsp; .doSubtract&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2³ @110/111<br />&nbsp; &nbsp; beq&nbsp; &nbsp; useZero&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2³ @112/113<br />&nbsp; &nbsp; adc&nbsp; &nbsp; #23 + 24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @114<br />.doSubtract:<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #23&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2&nbsp; @116<br />&nbsp; &nbsp; sta&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @119<br />useZero:<br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @122<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @124<br /><br />Start100s:<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @126<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @128&nbsp; &nbsp;0,1,2,3<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @130<br />&nbsp; &nbsp; rol&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @132&nbsp; &nbsp;0,2,5,7<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @134&nbsp; &nbsp;Y = Hundreds digit<br /><br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @137<br />&nbsp; &nbsp; adc&nbsp; &nbsp; Mod100Tab,X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @141&nbsp; &nbsp; adding remainder of 256, 512, and 256+512 (all mod 100)<br />&nbsp; &nbsp; bcs&nbsp; &nbsp; .doSub200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2³ @143/144<br /><br />.try200:<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @145<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .try100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2³ @147/148<br />.doSub200:<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @149<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @151<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @153<br />.try100:<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @155<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; HexToDec99&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2³ @157/158<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @159<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @161<br /><br />HexToDec99; SUBROUTINE<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @163<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @165<br />&nbsp; &nbsp; lda&nbsp; &nbsp; ShiftedBcdTab,X&nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @169<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @171<br />&nbsp; &nbsp; rol&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @173<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @175<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decOnes&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @178<br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @180<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @182<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @184<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @186<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;6&nbsp; @192&nbsp; &nbsp;A = tens digit<br /><br /><br />HexToDec255; SUBROUTINE<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ldy&nbsp; &nbsp; #ASCII_OFFSET&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2&nbsp; @8<br />&nbsp; &nbsp; bne&nbsp; &nbsp; .try200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @11&nbsp; &nbsp; always branch<br />&nbsp; ELSE<br />&nbsp; &nbsp; ldy&nbsp; &nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @8<br />&nbsp; &nbsp; beq&nbsp; &nbsp; .try200&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @11&nbsp; &nbsp; always branch<br />&nbsp; ENDIF<br /><br />HexToDec999; SUBROUTINE<br />&nbsp; &nbsp; stx&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @9<br />&nbsp; &nbsp; jmp&nbsp; &nbsp; Start100s&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @12</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>