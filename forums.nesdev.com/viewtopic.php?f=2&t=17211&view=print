<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - OAM cycling on hypothetical 15-sprite PPU with X as priority</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/">https://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">OAM cycling on hypothetical 15-sprite PPU with X as priority</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/viewtopic.php?f=2&amp;t=17211">https://forums.nesdev.com/viewtopic.php?f=2&amp;t=17211</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 31, 2018 8:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>OAM cycling on hypothetical 15-sprite PPU with X as priority</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kenny Rogers won a Grammy for the song 'The Gambler', in which Don Schlitz wrote:</div><div class="quotecontent">Said &quot;If you're gonna play the Game Boy, you gotta learn to play it right.&quot;</div><br />NES games use a display list in RAM, also called shadow OAM, and then DMA that to the PPU during vertical blanking period. OAM DRAM refresh bugs in the PPU make this necessary even when few sprites move from one frame to the next.<br /><br />But apart from sprite 0, I've gathered that it's also considered best practice not to hardcode a particular game object's starting position in the display list. For example, don't always draw the main character using sprites 1-8, enemy 1 using sprites 9-14, enemy 2 using sprites 15-20, etc. Instead, NES games are supposed to reassign slots every frame, especially if there's a possibility that more than eight will be displayed on the same scanline. This also allows the game to make enemies intentionally Z-fight if they overlap.<br /><br />But in the community for another 8-bit platform, it's common to hardcode OAM indices for actors, and I'm trying to understand why they do that. The best way I know to do so is to generalize from what I know, and I know the NES. So for comparison, I'll describe the other platform's PPU as if it were a famiclone:<br /><br /><ul><li>Like the AVS, this famiclone's PPU has enough secondary OAM to draw 15 sprites per line instead of 8, using the alternate fetch pattern I described in <a href="https://wiki.nesdev.com/w/index.php/Enhancement#Overdraw" class="postlink">Enhancement#Overdraw</a>. Thus sprites can cover nearly half of the screen's width rather than one-fourth. </li><li>The PPU determines which sprites to draw by finding the 15 lowest-numbered sprites in OAM whose Y range overlaps each scanline, just as the authentic NES PPU does. But then it sorts these frontmost 15 sprites by their X coordinate before displaying them. Sprites to the left are drawn in front, with position in OAM only breaking ties. </li></ul><br />On a hypothetical famiclone like this, with more overdraw and less control of sprite-to-sprite priority, would it be less of a bad practice to statically allocate OAM space?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Mar 31, 2018 9:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It would be less of a bad practice, but still not really great.<br />The second problem is that you have to use meta-sprites, and fixing how many metasprites an object can have is limitating.<br /><br />Other than that I don't think there's any problem, assuming objects still have logical X/Y coordinates stored separatedly and copied to OAM every frame. How does most GameBoy and GameBoyColor games handle this ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Sat Mar 31, 2018 9:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, less bad, because the bad thing you want to avoid is <br /><br />1) cancellation of the rendering of information that is critically important to the user on a frame-for-frame basis.<br />2) cancellation that offends the users' subjective, aesthetic sensibilities. <br /><br />imo in that order. <br /> <br />Both are less likely to occur with a more tolerant coverage per scanline. <br /><br /><br />but honestly, there's no universal law that says what is best/worst practice. If the game relies on z-depth, you can't have universal cycling. Examples: any game that is isometric. any game that relies on depth as a mechanic. any game that is using sprites for background decoration (functional or otherwise). Ideally, you don't want an owl to z-compete with the moon. If you think presentation issues like this are important to adress, you need to divide cycling into tiers, or create special clauses. Assume the moon is high up and most entities are ground bound, it'd be perfectly safe to keep said moon at the lowest z-priority, kept apart from the rest.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Mar 31, 2018 9:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How can there be a community for a hypothetical 8-bit system that doesn't exist?<br /><br />I know the people on smwcentral do this, and the explanations I've seen are all like &quot;because rewriting non-animated non-moving sprites will cause slowdown.&quot;  Even though they end up causing more slowdown by searching through inactive sprites for large objects like Banzai Bills and Big Boos.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Mar 31, 2018 9:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is about the Gameboy, right? How the hell do they do sprite cycling if sprite priority is dictated by the X coordinate? Won't sprites to the right ALWAYS get shafted?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Mar 31, 2018 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think drop out on the Game Boy has to do with sprite priority.  Although I could swear I remember Game Boy games that use sprite priorities.  Are there no Final Fight style beat'm'ups on the Game Boy?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Mar 31, 2018 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But in the community for another 8-bit platform, it's common to hardcode OAM indices for actors, and I'm trying to understand why they do that. The best way I know to do so is to generalize from what I know, and I know the NES. So for comparison, I'll describe the other platform's PPU...</div><br />Once again tepples is being intentionally obtuse about something's identity for mysterious reasons. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />I would say it's quite common for new NES developers to hardcode OAM indices too. It's just that they probably pretty quickly get beat back by the problems that creates. On a system with wider tolerance you wouldn't necessarily create a problem at all.<br /><br />Overlap is often a big problem in a platform game with a flat plane of play, since gravity brings everything to the same level. But... 4 sprites on one platform is usually a pretty busy situation in NES games already... 8 sprites? How crowded is this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 31, 2018 11:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">It would be less of a bad practice, but still not really great.<br />The second problem is that you have to use meta-sprites, and fixing how many metasprites an object can have is limitating.</div><br /><em>Super Mario Bros.</em> limits each enemy to six 8x8 pixel sprites. Bowser and Fake Bowsers are the only enemies I can think of that use two enemy slots to circumvent this.<br /><br /><em>Haunted: Halloween '85</em> reserves 16 tiles of CHR RAM for each enemy's current frame (and 16 for its next frame; it's double buffered). This practically limits each enemy to eight 8x16 pixel sprites per cel. The second, fifth, and sixth bosses use two slots, just as <em>SMB1</em> does for Bowser.<br /><br />Another option that's still kinda-sorta hardcoding is to store an actor's starting OAM index in one of the actor's fields, just as you'd store its logical X and Y coordinates, velocity, health, etc.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Other than that I don't think there's any problem, assuming objects still have logical X/Y coordinates stored separatedly and copied to OAM every frame. How does most GameBoy and GameBoyColor games handle this ?</div><br />Game Boy Color I think reverts to the NES behavior of relying entirely on the OAM index to determine priority. The &quot;X determines priority&quot; is a monochrome thing. But even if an actor's logical coordinates are separate, the OAM slots into which those coordinates are copied every frame can still be statically allocated.<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">How can there be a community for a hypothetical 8-bit system that doesn't exist?</div><br />The &quot;other 8-bit platform&quot; exists. I mentioned the Game Boy by name in the song lyric I quoted at the top of my post. I was describing properties of the system using a famiclone analogy, as if an AVS in extra sprites mode were to apply the same sprite priority algorithm described in the Game Boy Pan Docs.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">intentionally obtuse about something's identity for mysterious reasons</div><br />My intent in making the famiclone analogy was twofold. I wanted to explain the problem to people who are familiar with how sprites work on the NES, in order to know how a particular change (more coverage and different priority) would change programming practices. I also wanted to help keep to the topic of OAM index hardcoding in the context of more coverage and X-as-priority, not derail it into a flame war about other unrelated differences between the Game Boy and the NES or between the norms of gbdev.gg8.se and those of NESdev.com. If you would prefer, I could reword this and repost it in GBDev.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Mar 31, 2018 11:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">My intent in making the famiclone analogy was twofold. I wanted to explain the problem to people who are familiar with how sprites work on the NES, in order to know how a particular change (more coverage and different priority) would change programming practices. I also wanted to help keep to the topic of OAM index hardcoding in the context of more coverage and X-as-priority, not derail it into a flame war about other unrelated differences between the Game Boy and the NES or between the norms of gbdev.gg8.se and those of NESdev.com. If you would prefer, I could reword this and repost it in GBDev.</div><br />I think there would have been less irrelevant chatter if you'd just said &quot;game boy&quot; instead of made a big show of not saying it, inviting people to comment on the way you danced around it.<br /><br />I don't give a hoot which forum this appears in, but it's NES dev enough to be where it is. I don't see the point in moving it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Sun Apr 01, 2018 1:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you can do fixed allocation then you do fixed allocation. It saves a lot of clocks and makes code a lot easier. If you can't get away with fixed allocation then you do dynamic allocation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Apr 01, 2018 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What speed benefit does this have?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Apr 01, 2018 7:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">What speed benefit does this have?</div><br />Fixed addresses do not require indexing. Use of an index register has a cycle penalty for some instructions, as well as the general penalty of having one less register to work with.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Apr 01, 2018 7:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Beginner tutorials often start with controller input directly manipulating OAM slots' properties, and end up never going into advanced sprite topics like meta-sprites or priority cycling, so it's no surprise that a lot of &quot;first games&quot; end up using hardcoded OAM positions for its game objects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Apr 01, 2018 8:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You would only be allowed one copy of an object at once unless you duplicate code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Apr 01, 2018 9:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know it sucks, but beginners do it. Copying and pasting is often easier to grasp than indexing and indirection for a beginner.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>