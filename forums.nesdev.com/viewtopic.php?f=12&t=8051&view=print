<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SNES dev newbie questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SNES dev newbie questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=8051">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=8051</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Fri Aug 19, 2011 2:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey all,
<br />
<br />I've just started fiddling around with SNES stuff, more specifically with the <a href="http://en.wikibooks.org/wiki/Super_NES_Programming" class="postlink">Wikibooks tutorial</a>. I have some (probably very) basic questions for which I haven't found an answer on these boards (or byuu's); if I am supposed to find the answers by more research or by moving forward, please don't hesitate to me so. Here's a basic <em>change the BG color</em> example I will refer to in my questions:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.include &quot;Header.inc&quot;<br />.include &quot;Snes_Init.asm&quot;<br /><br />VBlank:<br />&nbsp; RTI<br /><br />.bank 0<br />.section &quot;MainCode&quot;<br /><br />Start:<br />&nbsp; &nbsp; Snes_Init<br /><br />&nbsp; &nbsp; ; Set the background color to green.<br />&nbsp; &nbsp; sep&nbsp; &nbsp; &nbsp;#$20&nbsp; &nbsp; &nbsp; &nbsp; ; Set the A register to 8-bit.<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#%10000000&nbsp; ; Force VBlank by turning off the screen.<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2100<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#%11100000&nbsp; ; Load the low byte of the green color.<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2122<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#%00000000&nbsp; ; Load the high byte of the green color.<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2122<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#%00001111&nbsp; ; End VBlank, setting brightness to 15 &#40;100%&#41;.<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2100<br /><br />Forever:<br />&nbsp; &nbsp; jmp Forever<br /><br />.ends</div><ol style="list-style-type: decimal"><li>Is there a way to load both bytes into $2122 at once? It seems kinda strange to me to set the register to 8 bits, load 8 bits, then load 8 more bits, rather than doing all of this with just one lda/sta.</li><li>Speaking of which... How come doing <em>sta $2122 </em> twice with a byte both times doesn't end up just writing the latest byte of the two? Is writing the low byte first, and the the high byte the "standard way" of setting a color value here?</li><li>I tried copying and pasting the "Set the background [...]" block so that there's two of them, changing the color to red the second time. By moving the Forever label at the top of the first of these blocks, I expected alternating red and green as the background color, but I end up with a rather trippy effect involving red and black only. Am I supposed to do something between (or during) VBlanks?</li></ol>Thanks a bunch for reading, and big thanks to all the passionnate and helpful people around here - I admire all you've done and are doing for the community and beyond! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Aug 21, 2011 3:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">juef wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ; Set the background color to green.<br />&nbsp; &nbsp; sep&nbsp; &nbsp; &nbsp;#$20&nbsp; &nbsp; &nbsp; &nbsp; ; Set the A register to 8-bit.<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#%10000000&nbsp; ; Force VBlank by turning off the screen.<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2100<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#%11100000&nbsp; ; Load the low byte of the green color.<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2122<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#%00000000&nbsp; ; Load the high byte of the green color.<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2122<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#%00001111&nbsp; ; End VBlank, setting brightness to 15 &#40;100%&#41;.<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2100<br /></div><br />Is there a way to load both bytes into $2122 at once? It seems kinda strange to me to set the register to 8 bits, load 8 bits, then load 8 more bits, rather than doing all of this with just one lda/sta.</div><br /><br />No.  $2122 is an 8-bit memory-mapped register for colour data, the data of which is 16-bits; each write to it is handled internally by the PPU unit on the system.  There's no "direct" 16-bit equivalent.  If you were to write a 16-bit value to $2122, the LSB would end up going into $2122, and the MSB would end up going into $2123 which is a completely different register (window mask setting).<br /><br />Per my old SNES documentation:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">| w&nbsp; &nbsp;|$2121&nbsp; |Colour # &#40;or pallete&#41; selection register &#91;CGADD&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|xxxxxxxx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x: Address &#40;color #&#41;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />| wd&nbsp; |$2122&nbsp; |Colour data register &#91;CGDATA&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|xxxxxxxx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x: Value of colour.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|SNES colour is 15 bit; 5 bits for red, green, and blue. The&nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|order isn't RGB though: It's BGR &#40;RGB reversed!&#41;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br /></div><br /><br />I should note you aren't setting $2121 to the index/offset of the palette entry you wish to modify prior to doing it -- so I assume your init_snes routine is what's responsible.  I have to assume you're modifying colour #0.  Just an FYI.<br /><br /><div class="quotetitle">juef wrote:</div><div class="quotecontent">Speaking of which... How come doing <em>sta $2122 </em> twice with a byte both times doesn't end up just writing the latest byte of the two? Is writing the low byte first, and the the high byte the "standard way" of setting a color value here?</div><br /><br />Because it's an 8-bit memory-mapped register.  Each write is handled by the PPU.  You should probably find a copy of my old SNES documentation and review the SNES.1 file.  Both bytes written via the STA statements are honoured by the PPU/used by VRAM.<br /><br /><div class="quotetitle">juef wrote:</div><div class="quotecontent">I tried copying and pasting the "Set the background [...]" block so that there's two of them, changing the color to red the second time. By moving the Forever label at the top of the first of these blocks, I expected alternating red and green as the background color, but I end up with a rather trippy effect involving red and black only. Am I supposed to do something between (or during) VBlanks?</div><br /><br />What's happening is that you're updating the screen "too fast" and not seeing what's going on (visually).  This is further complicated by your desire to turn on/off VBlank.<br /><br />You have two options, and I recommend the former:<br /><br />1) Leave the screen on at all times/set brightness to 100% and do your screen updates (writes to $2122) inside of VBlank time (NMI).  You can wait for the NMI by examining bit 7 of $4210.  You'll need to tie VBlank to NMI by setting bit 7 of $4200 as well.  You can use the WAI opcode to wait for NMI rather than have to poll $4210.<br /><br />2) Leave the screen on at all times/set brightness to 100% and do everything in your main loop but instead of disabling VBlank, you need to wait for it.  See bit 7 of $4212.<br /><br />In either case you need to add some delays.  The screen is updated at 60 times a second (50 if PAL).  The easiest way to delay is to wait for VBlank repetitively (more waits = more delay).  I used to use something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; rep #$10<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #200&nbsp; &nbsp; &nbsp; &nbsp; ; Higher value = longer delay<br />delay&nbsp; &nbsp;jsr WaitVBL<br />&nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp; &nbsp; &nbsp; bpl delay<br />&nbsp; &nbsp; &nbsp; &nbsp; sep #$10<br />...<br /><br />;<br />; Note: Should make sure accum is 8-bit here, not 16-bit<br />;<br />WaitVBL:<br />&nbsp; &nbsp; &nbsp; &nbsp; pha<br />xxx&nbsp; &nbsp; &nbsp;lda $4210<br />&nbsp; &nbsp; &nbsp; &nbsp; bpl xxx<br />&nbsp; &nbsp; &nbsp; &nbsp; lda $4210&nbsp; &nbsp; &nbsp; &nbsp;; Reset it<br />&nbsp; &nbsp; &nbsp; &nbsp; pla<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /></div>
<br />
<br />
<br />It might be worthwhile, as I said earlier, to download my old SNESdoc.  Inside of that archive is an another archive called TEST.LZH, which contains some source code to a very small demo used to show off some of the features on the SNES.  The code is simple and should get you started, and it reads fairly easily.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Sun Aug 21, 2011 5:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">It might be worthwhile, as I said earlier, to download my old SNESdoc.  Inside of that archive is an another archive called TEST.LZH, which contains some source code to a very small demo used to show off some of the features on the SNES.  The code is simple and should get you started, and it reads fairly easily.</div>
<br />I have found your docs; they seem rather helpful and complete. Thanks for writing them, I definitely have to read a bit more before continuing. But most of all, thank you very much for your reply: it is much more complete and helpful than what I hoped!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gilligan</b> [ Tue Aug 23, 2011 7:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As much as koitsu/yoshi deserves credit for his snes documentation which were released /long/ ago you should now refer to more complete documentation most of which can be found at <a href="http://romhacking.net" class="postlink">http://romhacking.net</a> or possibly <a href="http://wiki.superfamicom.org/" class="postlink">http://wiki.superfamicom.org/</a> First and foremost you want to grab <a href="http://www.romhacking.net/docs/196/" class="postlink">http://www.romhacking.net/docs/196/</a> which is a detailed description of all registers including additional info. Looking around on romhacking you will also find an (most certainly illegal) copy of the complete snes development manuals as issued by nintendo. I do have a printed copy of those but tbh the txt file mentioned before is much more useful.
<br />
<br />Hope that helps. Enjoy!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Wed Aug 24, 2011 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is probably more of a general assembly question, but I can't figure this one out. I tried to isolate the issue, which is why this code is missing a lot of important stuff:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.include &quot;header.inc&quot;<br />.include &quot;Snes_Init.asm&quot;<br />VBlank:<br />&nbsp; &nbsp; RTI<br />.bank 0<br />.section &quot;MainCode&quot;<br />Start:<br />&nbsp; &nbsp;Snes_Init<br />&nbsp; &nbsp;sep&nbsp; &nbsp; &nbsp;#$20<br />&nbsp; &nbsp;<br />;TestTable:<br />;&nbsp; &nbsp;.db $00<br /><br />Forever:<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#%00011111<br />&nbsp; &nbsp;sta&nbsp; &nbsp;$2122<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#%00000000<br />&nbsp; &nbsp;sta&nbsp; &nbsp;$2122<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#%00001111<br />&nbsp; &nbsp;sta&nbsp; &nbsp;$2100<br /><br />&nbsp; &nbsp; jmp Forever<br />.ends</div>
<br />As it is above, the code colors the screen red. What confuses me is that uncommenting the two TestTable lines makes the screen green instead. I don't refer to this table anywhere, so I guess somehow adding this piece of code messes with the registers?
<br />
<br />Also, thanks for the help gilligan, I've checked those links out a little. Very helpful indeed!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Aug 24, 2011 7:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">juef wrote:</div><div class="quotecontent">What confuses me is that uncommenting the two TestTable lines makes the screen green instead. I don't refer to this table anywhere, so I guess somehow adding this piece of code messes with the registers?</div>
<br />That is because it executes the data as code since you placed it in the middle of code. Move it to a place which execution will never reach, such as below the "jmp Forever" instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Thu Sep 01, 2011 7:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you for the reply, thefox! There's a lot of stuff I clearly haven't understood correctly yet, and that's one less of them now.
<br />
<br />As an effort to understand better what I'm doing exactly, I've been trying to convert my source code to something that byuu's bass can compile. It's been easier than I thought, except for just this part:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.SNESHEADER<br />&nbsp; ; &#91;...&#93; some useless header stuff happens here &#40;it can be commented without problem&#41;<br />&nbsp; LOROM<br />&nbsp; ; &#91;...&#93; some useless header stuff happens here &#40;it can be commented without problem&#41;<br />.ENDSNES<br /><br />.SNESNATIVEVECTOR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Define Native Mode interrupt vector table<br />&nbsp; COP EmptyHandler<br />&nbsp; BRK EmptyHandler<br />&nbsp; ABORT EmptyHandler<br />&nbsp; NMI VBlank<br />&nbsp; IRQ EmptyHandler<br />.ENDNATIVEVECTOR<br /><br />.SNESEMUVECTOR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Define Emulation Mode interrupt vector table<br />&nbsp; COP EmptyHandler<br />&nbsp; ABORT EmptyHandler<br />&nbsp; NMI EmptyHandler<br />&nbsp; RESET Start&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; where execution starts<br />&nbsp; IRQBRK EmptyHandler<br />.ENDEMUVECTOR</div>
<br />This is part of a 'header.inc' file that my tutorial uses. When assembled, it writes some code at the end, without which the program cannot run. For now, just copying the assembled code from WLA into the file bass assembles works just fine. I'm not too sure what it that code is/does, but mostly, I'd be interested in knowing how to <em>translate</em> it to bass. I'm guessing a different syntax will provide me another way of understanding it, as has happened with plenty of other stuff in the conversion so far.
<br />
<br />Thank you all again very much!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Thu Sep 01, 2011 8:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">juef wrote:</div><div class="quotecontent">Thank you for the reply, thefox! There's a lot of stuff I clearly haven't understood correctly yet, and that's one less of them now.<br /><br />As an effort to understand better what I'm doing exactly, I've been trying to convert my source code to something that byuu's bass can compile. It's been easier than I thought, except for just this part:</div>
<br />
<br />Refer to MukundaJay's SNES Devkit '09, for CA65.
<br />
<br /><!-- m --><a class="postlink" href="http://snes.mukunda.com/">http://snes.mukunda.com/</a><!-- m -->
<br />
<br />Header examples can be found there, More portable than WLA-DX's
<br />
<br />or at least steal the header from your favorite ROM (at least FFC0-FFFF) such as Super Mario World (That will be terrible, though).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Sep 01, 2011 8:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That isn't code at all, but it just a list of address to your interrupt routines.  I guess this was considered significant enough to have it's own Wikipedia article: <a href="http://en.wikipedia.org/wiki/Interrupts_in_65xx_processors" class="postlink">http://en.wikipedia.org/wiki/Interrupts_in_65xx_processors</a>
<br />
<br />Normally you would use .word Emptyhandler (or in CA65 .addr EmptyHandler is the same thing).  You can place this stuff manually with the .org command, but it seems like assemblers usually provide some kind of way of defining it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Sep 02, 2011 3:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't provide additional markup, as it's really not necessary.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lorom</div><br /><br />At the top of the file is all you need for LoROM addressing.<br /><br />As for the vectors, write them directly:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">org $ffe4; dw COP<br />org $ffe6; dw BRK<br />org $ffea; dw NMI<br />org $ffee; dw IRQ<br />org $fffc; dw Reset</div>
<br />
<br />Those are just labels to code that appears between $008000 and $00ffff. So Reset would be Start in your case. You don't HAVE to define ones you don't ever use.
<br />
<br />You'll never use the emulation-mode ones.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Sat Sep 03, 2011 10:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks you all for your answers! Now I can compile what I had done so far with bass, with which I'll probably be stickin' from now on!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Tue Sep 13, 2011 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have been asked to share my code that compiles with bass. I have progressed beyond what I'm posting below, but as there's still some stuff I can't figure out and I won't have the time to look at it for a few days, I'll just share what I had successfully compiled in my previous post. All that happens is that the screen gets colored red.
<br />
<br />File "test.asm"
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">incsrc &quot;SnesInit.asm&quot;<br /><br />Start:<br />&nbsp; &nbsp;&#123;SnesInit&#125;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#%00011111<br />&nbsp; &nbsp;sta&nbsp; &nbsp;$2122<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#%00000000<br />&nbsp; &nbsp;sta&nbsp; &nbsp;$2122<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#%00001111<br />&nbsp; &nbsp;sta&nbsp; &nbsp;$2100<br /><br />Forever:<br />&nbsp; &nbsp;jmp Forever</div><br /><br />File "SnesInit.asm"<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">mapper lorom<br />org $8000; fill $010000<br />org $ffea; dw EmptyHandler&nbsp; &nbsp;// SNES vectors<br />org $fffc; dw Start<br />org $8000;<br /><br />macro SnesInit;<br />&nbsp; &nbsp; &nbsp; &nbsp; sei;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Disabled interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; clc;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// clear carry to switch to native mode<br />&nbsp; &nbsp; &nbsp; &nbsp; xce;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Xchange carry &amp; emulation bit. native mode<br />&nbsp; &nbsp; &nbsp; &nbsp; rep&nbsp; &nbsp; &nbsp;#$18;&nbsp; &nbsp; // Binary mode &#40;decimal mode off&#41;, X/Y 16 bit<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp; &nbsp;#$1FFF;&nbsp; // set stack to $1FFF<br />&nbsp; &nbsp; &nbsp; &nbsp; txs;<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr Init;<br />endmacro<br /><br />Init:<br />&nbsp; &nbsp; &nbsp; &nbsp; sep&nbsp; &nbsp; &nbsp;#$30&nbsp; &nbsp; // X,Y,A are 8 bit numbers<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$8F&nbsp; &nbsp; // screen off, full brightness<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2100&nbsp; &nbsp;// brightness + screen enable register <br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2101&nbsp; &nbsp;// Sprite register &#40;size + address in VRAM&#41; <br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2102&nbsp; &nbsp;// Sprite registers &#40;address of sprite memory &#91;OAM&#93;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2103&nbsp; &nbsp;//&nbsp; &nbsp; &quot;&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2105&nbsp; &nbsp;// Mode 0, = Graphic mode register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2106&nbsp; &nbsp;// noplanes, no mosaic, = Mosaic register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2107&nbsp; &nbsp;// Plane 0 map VRAM location<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2108&nbsp; &nbsp;// Plane 1 map VRAM location<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2109&nbsp; &nbsp;// Plane 2 map VRAM location<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$210A&nbsp; &nbsp;// Plane 3 map VRAM location<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$210B&nbsp; &nbsp;// Plane 0+1 Tile data location<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$210C&nbsp; &nbsp;// Plane 2+3 Tile data location<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$210D&nbsp; &nbsp;// Plane 0 scroll x &#40;first 8 bits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$210D&nbsp; &nbsp;// Plane 0 scroll x &#40;last 3 bits&#41; #$0 - #$07ff<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$FF&nbsp; &nbsp; // The top pixel drawn on the screen isn't the top one in the tilemap, it's the one above that.<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$210E&nbsp; &nbsp;// Plane 0 scroll y &#40;first 8 bits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2110&nbsp; &nbsp;// Plane 1 scroll y &#40;first 8 bits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2112&nbsp; &nbsp;// Plane 2 scroll y &#40;first 8 bits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2114&nbsp; &nbsp;// Plane 3 scroll y &#40;first 8 bits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$07&nbsp; &nbsp; // Since this could get quite annoying, it's better to edit the scrolling registers to fix this.<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$210E&nbsp; &nbsp;// Plane 0 scroll y &#40;last 3 bits&#41; #$0 - #$07ff<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2110&nbsp; &nbsp;// Plane 1 scroll y &#40;last 3 bits&#41; #$0 - #$07ff<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2112&nbsp; &nbsp;// Plane 2 scroll y &#40;last 3 bits&#41; #$0 - #$07ff<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2114&nbsp; &nbsp;// Plane 3 scroll y &#40;last 3 bits&#41; #$0 - #$07ff<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$210F&nbsp; &nbsp;// Plane 1 scroll x &#40;first 8 bits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$210F&nbsp; &nbsp;// Plane 1 scroll x &#40;last 3 bits&#41; #$0 - #$07ff<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2111&nbsp; &nbsp;// Plane 2 scroll x &#40;first 8 bits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2111&nbsp; &nbsp;// Plane 2 scroll x &#40;last 3 bits&#41; #$0 - #$07ff<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2113&nbsp; &nbsp;// Plane 3 scroll x &#40;first 8 bits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2113&nbsp; &nbsp;// Plane 3 scroll x &#40;last 3 bits&#41; #$0 - #$07ff<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$80&nbsp; &nbsp; // increase VRAM address after writing to $2119<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2115&nbsp; &nbsp;// VRAM address increment register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2116&nbsp; &nbsp;// VRAM address low<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2117&nbsp; &nbsp;// VRAM address high<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211A&nbsp; &nbsp;// Initial Mode 7 setting register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211B&nbsp; &nbsp;// Mode 7 matrix parameter A register &#40;low&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$01<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$211B&nbsp; &nbsp;// Mode 7 matrix parameter A register &#40;high&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211C&nbsp; &nbsp;// Mode 7 matrix parameter B register &#40;low&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211C&nbsp; &nbsp;// Mode 7 matrix parameter B register &#40;high&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211D&nbsp; &nbsp;// Mode 7 matrix parameter C register &#40;low&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211D&nbsp; &nbsp;// Mode 7 matrix parameter C register &#40;high&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211E&nbsp; &nbsp;// Mode 7 matrix parameter D register &#40;low&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$211E&nbsp; &nbsp;// Mode 7 matrix parameter D register &#40;high&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211F&nbsp; &nbsp;// Mode 7 center position X register &#40;low&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$211F&nbsp; &nbsp;// Mode 7 center position X register &#40;high&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2120&nbsp; &nbsp;// Mode 7 center position Y register &#40;low&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2120&nbsp; &nbsp;// Mode 7 center position Y register &#40;high&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2121&nbsp; &nbsp;// Color number register &#40;$0-ff&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2123&nbsp; &nbsp;// BG1 &amp; BG2 Window mask setting register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2124&nbsp; &nbsp;// BG3 &amp; BG4 Window mask setting register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2125&nbsp; &nbsp;// OBJ &amp; Color Window mask setting register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2126&nbsp; &nbsp;// Window 1 left position register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2127&nbsp; &nbsp;// Window 2 left position register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2128&nbsp; &nbsp;// Window 3 left position register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2129&nbsp; &nbsp;// Window 4 left position register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$212A&nbsp; &nbsp;// BG1, BG2, BG3, BG4 Window Logic register<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$212B&nbsp; &nbsp;// OBJ, Color Window Logic Register &#40;or,and,xor,xnor&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$212C&nbsp; &nbsp;// Main Screen designation &#40;planes, sprites enable&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$212D&nbsp; &nbsp;// Sub Screen designation<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$212E&nbsp; &nbsp;// Window mask for Main Screen<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$212F&nbsp; &nbsp;// Window mask for Sub Screen<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$30<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2130&nbsp; &nbsp;// Color addition &amp; screen addition init setting<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2131&nbsp; &nbsp;// Add/Sub sub designation for screen, sprite, color<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$E0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$2132&nbsp; &nbsp;// color data for addition/subtraction<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$2133&nbsp; &nbsp;// Screen setting &#40;interlace x,y/enable SFX data&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4200&nbsp; &nbsp;// Enable V-blank, interrupt, Joypad register<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$FF<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$4201&nbsp; &nbsp;// Programmable I/O port<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4202&nbsp; &nbsp;// Multiplicand A<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4203&nbsp; &nbsp;// Multiplier B<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4204&nbsp; &nbsp;// Multiplier C<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4205&nbsp; &nbsp;// Multiplicand C<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4206&nbsp; &nbsp;// Divisor B<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4207&nbsp; &nbsp;// Horizontal Count Timer<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4208&nbsp; &nbsp;// Horizontal Count Timer MSB &#40;most significant bit&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$4209&nbsp; &nbsp;// Vertical Count Timer<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$420A&nbsp; &nbsp;// Vertical Count Timer MSB<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$420B&nbsp; &nbsp;// General DMA enable &#40;bits 0-7&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$420C&nbsp; &nbsp;// Horizontal DMA &#40;HDMA&#41; enable &#40;bits 0-7&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; stz&nbsp; &nbsp; &nbsp;$420D&nbsp; &nbsp;// Access cycle designation &#40;slow/fast rom&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; cli&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Enable interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />EmptyHandler:<br />&nbsp; &nbsp;&nbsp; &nbsp;rti</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Thu Feb 27, 2014 7:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry to bring back such an old topic; I know it's been a long time but I've felt the desire to go back to these things recently and the above posts are still relevant to my following questions.<br /><br />1) In the SNES init routine above, there is this one line:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">stz&nbsp; &nbsp; &nbsp;$4200&nbsp; &nbsp;// Enable V-blank, interrupt, Joypad register</div><br />Now, from what I understand, this sets $4200 to zero, which... disables VBlank NMI, right? Shouldn't this be the following instead?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$80<br />sta $4200<br /></div><br />2) Following koitsu's above advice, I tried inplementing delays between my background color change. The main code goes like this: init the SNES, set the background green, wait, set it red, dim the screen a little, and then do nothing forever. The screen is indeed dimmed, but the color is still red. Any clue to why I can't get some red?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Snes_Init<br /><br />sep&nbsp; &nbsp;#$20<br />lda&nbsp; &nbsp;#%10000000<br />sta&nbsp; &nbsp;$2100<br />lda&nbsp; &nbsp;#%11100000<br />sta&nbsp; &nbsp;$2122<br />lda&nbsp; &nbsp;#%00000011<br />sta&nbsp; &nbsp;$2122<br />lda&nbsp; &nbsp;#%00001111<br />sta&nbsp; &nbsp;$2100<br />&nbsp; &nbsp;<br />rep #$10<br />ldx #200<br />delay:<br />&nbsp; &nbsp;jsr WaitVBL<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;bpl delay<br />sep #$10<br /><br />sep&nbsp; &nbsp;#$20<br />lda&nbsp; &nbsp;#%10000000<br />sta&nbsp; &nbsp;$2100<br />lda&nbsp; &nbsp;#%00011111<br />sta&nbsp; &nbsp;$2122<br />lda&nbsp; &nbsp;#%00000000<br />sta&nbsp; &nbsp;$2122<br />lda&nbsp; &nbsp;#%00000100<br />sta&nbsp; &nbsp;$2100<br /><br />Forever:<br />&nbsp; &nbsp;jmp Forever<br /><br />WaitVBL:<br />&nbsp; &nbsp;sep&nbsp; &nbsp;#$20<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;wai<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;rts</div><br />(Note that I understand the advice about keeping the screen on, but I tried this as a test when I couldn't get red.)<br /><br />This is with WLADX, as I was unable to make my code suitable for the latest bass version.<br />Any help would be much appreciated! Thank you!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Feb 27, 2014 9:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't see you setting $2121 anywhere, which means you're just blindly appending onto the end of the palette rather than changing existing on-screen colours.  You probably want an <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stz $2121</tt> before tinkering with $2122.<br /><br />As for the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">// Enable V-blank, interrupt, Joypad register</tt> comment: the comment itself is wrong and you are correct -- <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stz $4200</tt> would DISABLE NMI when VBlank fires, not enable.  You really should turn on NMI when VBlank fires, otherwise your <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">wai</tt> in WaitVBL doesn't serve a purpose.<br /><br />Also, WaitVBL doesn't look quite right (you could replace that whole thing with just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">wai ; rts</tt> and be done with it; I don't see the point behind the stack operations or the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sep #$20</tt>).  The way the routine &quot;waits for VBlank&quot;, BTW, is by waiting for NMI to fire using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">wai</tt>, which you want tied to VBlank, hence what I said in my above paragraph.  :-)<br /><br />You could also replace <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Forever: jmp Forever</tt> with just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stp</tt> (STop Processor) if you wanted.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DoNotWant</b> [ Fri Feb 28, 2014 3:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Upload your project somewhere in a rar file, and I can make it into bass v14 code for you, and put some comments in there of what to think of when using bass. I'm no expert, but I got some stuff working with it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>