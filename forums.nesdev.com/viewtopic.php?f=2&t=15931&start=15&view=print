<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Koei bytecode</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Koei bytecode</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=15931">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=15931</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Tue May 16, 2017 4:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>INSTRUCTION SET</strong><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />00-0F | LOADL quick&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = &lt;quick&gt;<br />10-1F | LOADR quick&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| right = &lt;quick&gt;<br />20-2F | STORE quick&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| &lt;quick&gt; = left<br />30-3F | PUSH quick&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| push &lt;quick&gt;<br />40-4F | LOADL qimm&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = &lt;qimm&gt;<br />50-5F | LOADR qimm&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| right = &lt;qimm&gt;<br />60-6F | PUSH qimm&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| push &lt;qimm&gt;<br />70-7F | ADD qimm&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = left + &lt;qimm&gt;<br />------+----------------+-------+-------------------------------------<br />code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;80&nbsp; &nbsp;| (illegal)&nbsp; &nbsp; &nbsp; |&nbsp; ---&nbsp; | (illegal)<br />&nbsp;81&nbsp; &nbsp;| LOADL near&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;1&nbsp; &nbsp;| left = &lt;near&gt;<br />&nbsp;82&nbsp; &nbsp;| LOADL far&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| left = &lt;far&gt;<br />&nbsp;83&nbsp; &nbsp;| LOADR near&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;1&nbsp; &nbsp;| right = &lt;near&gt;<br />&nbsp;84&nbsp; &nbsp;| LOADR far&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| right = &lt;far&gt;<br />&nbsp;85&nbsp; &nbsp;| STORE near&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;1&nbsp; &nbsp;| &lt;near&gt; = left<br />&nbsp;86&nbsp; &nbsp;| STORE far&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| &lt;far&gt; = left<br />&nbsp;87&nbsp; &nbsp;| PUSH near&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;1&nbsp; &nbsp;| push &lt;near&gt;<br />&nbsp;88&nbsp; &nbsp;| PUSH far&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| push &lt;far&gt;<br />&nbsp;89&nbsp; &nbsp;| BYTE LOADL imm1|&nbsp; &nbsp;1&nbsp; &nbsp;| left = (int8)&lt;imm1&gt;<br />&nbsp;8A&nbsp; &nbsp;| LOADL imm2&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| left = &lt;imm2&gt;<br />&nbsp;8B&nbsp; &nbsp;| BYTE LOADR imm1|&nbsp; &nbsp;1&nbsp; &nbsp;| right = (int8)&lt;imm1&gt;<br />&nbsp;8C&nbsp; &nbsp;| LOADR imm2&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| right = &lt;imm2&gt;<br />&nbsp;8D&nbsp; &nbsp;| BYTE PUSH imm1 |&nbsp; &nbsp;1&nbsp; &nbsp;| push (int8)&lt;imm1&gt;<br />&nbsp;8E&nbsp; &nbsp;| PUSH imm2&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| push &lt;imm2&gt;<br />&nbsp;8F&nbsp; &nbsp;| BYTE ADD imm1&nbsp; |&nbsp; &nbsp;1&nbsp; &nbsp;| left = left + (int8)&lt;imm1&gt;<br />&nbsp;90&nbsp; &nbsp;| ADD imm2&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| left = left + &lt;imm2&gt;<br />91-9F | (illegal)&nbsp; &nbsp; &nbsp; |&nbsp; ---&nbsp; | (illegal)<br />------+----------------+-------+-------------------------------------<br />code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;A0&nbsp; &nbsp;| BYTE LOADL far |&nbsp; &nbsp;2&nbsp; &nbsp;| left = (uint8)&lt;far&gt;<br />&nbsp;A1&nbsp; &nbsp;| BYTE LOADR far |&nbsp; &nbsp;2&nbsp; &nbsp;| right = (uint8)&lt;far&gt;<br />&nbsp;A2&nbsp; &nbsp;| BYTE STORE far |&nbsp; &nbsp;2&nbsp; &nbsp;| (uint8)&lt;far&gt; = left<br />&nbsp;A3&nbsp; &nbsp;| BYTE PUSH far&nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| push (uint8)&lt;far&gt;<br />&nbsp;A4&nbsp; &nbsp;| LOADL abs&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| left = &lt;abs&gt;<br />&nbsp;A5&nbsp; &nbsp;| BYTE LOADL abs |&nbsp; &nbsp;2&nbsp; &nbsp;| left = (uint8)&lt;abs&gt;<br />&nbsp;A6&nbsp; &nbsp;| LOADR abs&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| right = &lt;abs&gt;<br />&nbsp;A7&nbsp; &nbsp;| BYTE LOADR abs |&nbsp; &nbsp;2&nbsp; &nbsp;| right = (uint8)&lt;abs&gt;<br />&nbsp;A8&nbsp; &nbsp;| STORE abs&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| &lt;abs&gt; = left<br />&nbsp;A9&nbsp; &nbsp;| BYTE STORE abs |&nbsp; &nbsp;2&nbsp; &nbsp;| (uint8)&lt;abs&gt; = left<br />&nbsp;AA&nbsp; &nbsp;| PUSH abs&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| push &lt;abs&gt;<br />&nbsp;AB&nbsp; &nbsp;| BYTE PUSH abs&nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| push (uint8)&lt;abs&gt;<br />&nbsp;AC&nbsp; &nbsp;| CALL abs&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| call &lt;abs&gt;<br />&nbsp;AD&nbsp; &nbsp;| COPY imm2&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| copy &lt;imm2&gt; bytes from *left to *right<br />&nbsp;AE&nbsp; &nbsp;| UNSTACK imm1&nbsp; &nbsp;|&nbsp; &nbsp;1&nbsp; &nbsp;| stackptr = stackptr + (uint8)&lt;imm1&gt;<br />&nbsp;AF&nbsp; &nbsp;| UNSTACK imm2&nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| stackptr = stackptr + &lt;imm2&gt;<br />------+----------------+-------+-------------------------------------<br />code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;B0&nbsp; &nbsp;| DEREF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = *left<br />&nbsp;B1&nbsp; &nbsp;| POPSTORE&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| pop right; *right = left<br />&nbsp;B2&nbsp; &nbsp;| NOP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| no operation<br />&nbsp;B3&nbsp; &nbsp;| PUSHL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| push left<br />&nbsp;B4&nbsp; &nbsp;| POPR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| pop right<br />&nbsp;B5&nbsp; &nbsp;| MULT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = left * right<br />&nbsp;B6&nbsp; &nbsp;| SDIV&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (int16)left / (int16)right<br />&nbsp;B7&nbsp; &nbsp;| LONG (prefix)&nbsp; |&nbsp; var. | (prefix for 32-bit instructions)<br />&nbsp;B8&nbsp; &nbsp;| UDIV&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (uint16)left / (uint16)right<br />&nbsp;B9&nbsp; &nbsp;| SMOD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (int16)left % (int16)right<br />&nbsp;BA&nbsp; &nbsp;| UMOD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (uint16)left % (uint16)right<br />&nbsp;BB&nbsp; &nbsp;| ADD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = left + right<br />&nbsp;BC&nbsp; &nbsp;| SUB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = left - right<br />&nbsp;BD&nbsp; &nbsp;| LSHIFT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = left &lt;&lt; right<br />&nbsp;BE&nbsp; &nbsp;| URSHIFT&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = (uint16)left &gt;&gt; right<br />&nbsp;BF&nbsp; &nbsp;| SRSHIFT&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = (int16)left &gt;&gt; right<br />------+----------------+-------+-------------------------------------<br />code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;C0&nbsp; &nbsp;| CMPEQ&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = (left == right)<br />&nbsp;C1&nbsp; &nbsp;| CMPNE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = (left != right)<br />&nbsp;C2&nbsp; &nbsp;| SCMPLT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int16)left &lt; (int16)right)<br />&nbsp;C3&nbsp; &nbsp;| SCMPLE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int16)left &lt;= (int16)right)<br />&nbsp;C4&nbsp; &nbsp;| SCMPGT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int16)left &gt; (int16)right)<br />&nbsp;C5&nbsp; &nbsp;| SCMPGE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int16)left &gt;= (int16)right)<br />&nbsp;C6&nbsp; &nbsp;| UCMPLT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((uint16)left &lt; (uint16)right)<br />&nbsp;C7&nbsp; &nbsp;| UCMPLE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((uint16)left &lt;= (uint16)right)<br />&nbsp;C8&nbsp; &nbsp;| UCMPGT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((uint16)left &gt; (uint16)right)<br />&nbsp;C9&nbsp; &nbsp;| UCMPGE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((uint16)left &gt;= (uint16)right)<br />&nbsp;CA&nbsp; &nbsp;| NOT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = !left<br />&nbsp;CB&nbsp; &nbsp;| MINUS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = -left<br />&nbsp;CC&nbsp; &nbsp;| COMPL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ~left<br />&nbsp;CD&nbsp; &nbsp;| SWAP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| swap left &lt;-&gt; right<br />&nbsp;CE&nbsp; &nbsp;| (illegal)&nbsp; &nbsp; &nbsp; |&nbsp; ---&nbsp; | (illegal)<br />&nbsp;CF&nbsp; &nbsp;| RETURN&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| return from function<br />------+----------------+-------+-------------------------------------<br />code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;D0&nbsp; &nbsp;| INC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| ++left<br />&nbsp;D1&nbsp; &nbsp;| DEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| --left<br />&nbsp;D2&nbsp; &nbsp;| LSHIFT1&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = left &lt;&lt; 1<br />&nbsp;D3&nbsp; &nbsp;| BYTE DEREF&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = *(uint8 *)left<br />&nbsp;D4&nbsp; &nbsp;| BYTE POPSTORE&nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| pop right; *(uint8 *)right = left<br />&nbsp;D5&nbsp; &nbsp;| SWITCH offs,num|2+2+tbl| contiguous switch (see below)<br />&nbsp;D6&nbsp; &nbsp;| JUMP abs&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| instrptr = &lt;abs&gt;<br />&nbsp;D7&nbsp; &nbsp;| JUMPT abs&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| if (left != 0) instrptr = &lt;abs&gt;<br />&nbsp;D8&nbsp; &nbsp;| JUMPF abs&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| if (left == 0) instrptr = &lt;abs&gt;<br />&nbsp;D9&nbsp; &nbsp;| SWITCH num&nbsp; &nbsp; &nbsp;| 2+tbl | noncontiguous switch (see below)<br />&nbsp;DA&nbsp; &nbsp;| AND&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = left &amp; right<br />&nbsp;DB&nbsp; &nbsp;| OR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = left | right<br />&nbsp;DC&nbsp; &nbsp;| XOR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = left ^ right<br />&nbsp;DD&nbsp; &nbsp;| CALLPTR&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| call *left<br />&nbsp;DE&nbsp; &nbsp;| LEAL far&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| left = &amp;&lt;far&gt;<br />&nbsp;DF&nbsp; &nbsp;| LEAR far&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;2&nbsp; &nbsp;| right = &amp;&lt;far&gt;<br />------+----------------+-------+-------------------------------------<br />code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;E0&nbsp; &nbsp;| SLOADBF sz,pos |&nbsp; 1+1&nbsp; | signed bitfield extract (see below)<br />&nbsp;E1&nbsp; &nbsp;| ULOADBF sz,pos |&nbsp; 1+1&nbsp; | unsigned bitfield extract (see below)<br />&nbsp;E2&nbsp; &nbsp;| STOREBF sz,pos |&nbsp; 1+1&nbsp; | bitfield insert (see below)<br />&nbsp;E3&nbsp; &nbsp;| JUMP back&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;1&nbsp; &nbsp;| instrptr += &lt;back&gt;-256<br />&nbsp;E4&nbsp; &nbsp;| JUMPT back&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;1&nbsp; &nbsp;| if (left != 0) instrptr += &lt;back&gt;-256<br />&nbsp;E5&nbsp; &nbsp;| JUMPF back&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;1&nbsp; &nbsp;| if (left == 0) instrptr += &lt;back&gt;-256<br />&nbsp;E6&nbsp; &nbsp;| JUMP ahead&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;1&nbsp; &nbsp;| instrptr += &lt;ahead&gt;<br />&nbsp;E7&nbsp; &nbsp;| JUMPT ahead&nbsp; &nbsp; |&nbsp; &nbsp;1&nbsp; &nbsp;| if (left != 0) instrptr += &lt;ahead&gt;<br />&nbsp;E8&nbsp; &nbsp;| JUMPF ahead&nbsp; &nbsp; |&nbsp; &nbsp;1&nbsp; &nbsp;| if (left == 0) instrptr += &lt;ahead&gt;<br />&nbsp;E9&nbsp; &nbsp;| CALL abs,imm1&nbsp; |&nbsp; 2+1&nbsp; | call &lt;abs&gt;; stackptr += (uint8)&lt;imm1&gt;<br />&nbsp;EA&nbsp; &nbsp;| CALLPTR imm1&nbsp; &nbsp;|&nbsp; &nbsp;1&nbsp; &nbsp;| call *left; stackptr += (uint8)&lt;imm1&gt;<br />EB-FF | (illegal)&nbsp; &nbsp; &nbsp; |&nbsp; ---&nbsp; | (illegal)</div><br /><strong>Switch instructions</strong><br />There are two switch instructions, one ($D5) for contiguous cases and the other ($D9) for noncontiguous cases. They work exactly like a C switch statement with the left register as the variable to test.<br /><br />For the contiguous switch, the first 16-bit word after the instruction is the twos-complement negative of the smallest case value. The next 16-bit word is the number of cases. Then comes the default jump target, followed by the target for each in-range value of left. Example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.byte $D5 ; contiguous switch instruction<br />.word -4, 5 ; smallest case 4, 5 cases<br />.word DefaultTarget ; jumps to this address if left was &lt; 4 or &gt; 8<br />.word Target4 ; jumps to this address if left was 4<br />.word Target5 ; jumps to this address if left was 5<br />.word Target6 ; jumps to this address if left was 6<br />.word Target7 ; jumps to this address if left was 7<br />.word Target8 ; jumps to this address if left was 8</div><br />For the non-contiguous switch, the first 16-bit word after the instruction is the number of cases. Then comes a table of comparison values followed by jump targets. After all the value-target pairs, the default target comes last. Example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.byte $D9 ; noncontiguous switch instruction<br />.word 5 ; 5 cases<br />.word 1, Target1<br />.word 4, Target4<br />.word 9, Target9<br />.word 16, Target16<br />.word 25, Target25<br />.word TargetDefault</div><br /><strong>Load effective address</strong><br />Instructions $DE and $DF load a register with the value of the argument + the frame pointer, i.e. with the effective (absolute) address of a local variable. They can be used to pass a pointer to a local variable as a function argument, or in conjunction with the bitfield instructions.<br /><br /><strong>Bitfields</strong><br />There are three bitfield instructions: one to extract (load from) a signed bitfield, one to extract an unsigned bitfield, and one to insert (store to) a bitfield. For all three bitfield instructions, the first byte after the instruction is the size of the bitfield in bits, and the following byte is the bit position counting from the LSB. The entire bitfield must fit into a 16-bit word (i.e. size + pos &lt; 16)<br /><br />The two extraction instructions work like the dereference instruction: the address of the bitfield is in left, and the bitfield also gets extracted to left. The insertion instruction takes the value to insert in left, and the address to insert to in right (like the pop-store instruction without the pop).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue May 16, 2017 5:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is really neat! Thanks for documenting it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Tue May 16, 2017 5:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>32 BIT INSTRUCTION SET</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;B700 | (illegal)&nbsp; &nbsp; &nbsp; |&nbsp; ---&nbsp; | (illegal)<br />&nbsp;B701 | LONG MULT&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = left * right<br />&nbsp;B702 | LONG SDIV&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = (int32)left / (int32)right<br />&nbsp;B703 | LONG ADD&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = left + right<br />&nbsp;B704 | LONG SUB&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = left - right<br />&nbsp;B705 | LONG MINUS&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = -left<br />&nbsp;B706 | LONG CMPEQ&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (left == right)<br />&nbsp;B707 | LONG CMPNE&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (left != right)<br />&nbsp;B708 | LONG SCMPLT&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int32)left &lt; (int32)right)<br />&nbsp;B709 | LONG SCMPLE&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int32)left &lt;= (int32)right)<br />&nbsp;B70A | LONG SCMPGT&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int32)left &gt; (int32)right)<br />&nbsp;B70B | LONG SCMPGE&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int32)left &gt;= (int32)right)<br />&nbsp;B70C | LONG LOADL far |&nbsp; &nbsp;2&nbsp; &nbsp;| left = &lt;far&gt;<br />&nbsp;B70D | LONG LOADR far |&nbsp; &nbsp;2&nbsp; &nbsp;| right = &lt;far&gt;<br />&nbsp;B70E | LONG STORE far |&nbsp; &nbsp;2&nbsp; &nbsp;| &lt;far&gt; = left<br />&nbsp;B70F | LONG PUSH far&nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| push &lt;far&gt;<br />------+----------------+-------+-------------------------------------<br />code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;B710 | LONG LOADL abs |&nbsp; &nbsp;2&nbsp; &nbsp;| left = &lt;abs&gt;<br />&nbsp;B711 | LONG LOADR abs |&nbsp; &nbsp;2&nbsp; &nbsp;| right = &lt;abs&gt;<br />&nbsp;B712 | LONG STORE abs |&nbsp; &nbsp;2&nbsp; &nbsp;| &lt;abs&gt; = left<br />&nbsp;B713 | LONG PUSH abs&nbsp; |&nbsp; &nbsp;2&nbsp; &nbsp;| push &lt;abs&gt;<br />&nbsp;B714 | LONG PUSHL&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| push left<br />&nbsp;B715 | LONG POPR&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| pop right<br />&nbsp;B716 | LONG DEREF&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = *(int32 *)left<br />&nbsp;B717 | LONG POPSTORE&nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| pop right; *(int32 *)right = left<br />&nbsp;B718 | LONG LOADL imm4|&nbsp; &nbsp;4&nbsp; &nbsp;| left = &lt;imm4&gt;<br />&nbsp;B719 | LONG LOADR imm4|&nbsp; &nbsp;4&nbsp; &nbsp;| right = &lt;imm4&gt;<br />&nbsp;B71A | LONG SWAP&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| swap left &lt;-&gt; right<br />&nbsp;B71B | LONG INC&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| ++left<br />&nbsp;B71C | LONG DEC&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| --left<br />&nbsp;B71D | LONG BOOL&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((int32)left != 0)<br />&nbsp;B71E | LONG SMOD&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = (int32)left % (int32)right<br />&nbsp;B71F | LONG LSHIFT&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = left &lt;&lt; right<br />------+----------------+-------+-------------------------------------<br />code&nbsp; | nickname&nbsp; &nbsp; &nbsp; &nbsp;| args&nbsp; | operation<br />------+----------------+-------+-------------------------------------<br />&nbsp;B720 | LONG SRSHIFT&nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (int32)left &gt;&gt; right<br />&nbsp;B721 | LONG COMPL&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = ~left<br />&nbsp;B722 | LONG AND&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = left &amp; right<br />&nbsp;B723 | LONG OR&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = left | right<br />&nbsp;B724 | LONG XOR&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = left ^ right<br />&nbsp;B725 | LONG SEXTEND&nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (int32)(int16)left<br />&nbsp;B726 | LONG UEXTEND&nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (uint32)(uint16)left<br />&nbsp;B727 | LONG NOP&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| no operation<br />&nbsp;B728 | LONG NOT (?)&nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| apparently bugged (see below)<br />&nbsp;B729 | LONG UCMPLT&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((uint32)left &lt; (uint32)right)<br />&nbsp;B72A | LONG UCMPLE&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((uint32)left &lt;= (uint32)right)<br />&nbsp;B72B | LONG UCMPGT&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((uint32)left &gt; (uint32)right)<br />&nbsp;B72C | LONG UCMPGE&nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = ((uint32)left &gt;= (uint32)right)<br />&nbsp;B72D | LONG URSHIFT&nbsp; &nbsp;|&nbsp; &nbsp;0&nbsp; &nbsp;| left = (uint32)left &gt;&gt; right<br />&nbsp;B72E | LONG UDIV&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = (uint32)left / (uint32)right<br />&nbsp;B72F | LONG UMOD&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp;0&nbsp; &nbsp;| left = (uint32)left % (uint32)right</div><br /><strong>Extension and bool conversion</strong><br />16-bit instructions only use the lower halves of the registers and leave stale data in the upper halves, so it is necessary to sign-extend or zero-extend when doing arithmetic on mixtures of 16-bit and 32-bit data. Conversely, the bool conversion instruction is needed because the conditional jump instructions only check the (non-)zeroness of the lower half of left.<br /><br /><strong>Instruction $B728</strong><br />Instruction $B728 is probably supposed to be the long version of logical NOT ($CA) but actually has the same effect as instruction $B71D. None of the games I have inspected uses this instruction (the binary sequence $B7 $28 is nowhere to be found in the ROMs) so if it is a bug it seemingly went undetected for as long as Koei used this interpreter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>habstinat</b> [ Tue May 16, 2017 7:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is really cool and I think it definitely at least deserves a page on the NESdev wiki for posterity. Thanks for documenting it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue May 16, 2017 8:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wiki page seconded, it'll be easier to organize and maintain.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Wed May 17, 2017 12:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Neat! <br /><br />It seems more appropriate for Datacrystal or Zophar as to where to document, but yes to archival.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dustmop</b> [ Wed May 17, 2017 3:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is so awesome! Thanks so much for doing all the hard work.<br /><br />Looking forward to working on a disassembler or decompiler, unless someone else gets around to it first.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Wed May 24, 2017 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess someone should write an open source interpreter too. :X

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Wed May 24, 2017 6:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />^^^ I guess you just volunteered?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Bitfields<br />There are three bitfield instructions: one to extract (load from) a signed bitfield, one to extract an unsigned bitfield, and one to insert (store to) a bitfield. For all three bitfield instructions, the first byte after the instruction is the size of the bitfield in bits, and the following byte is the bit position counting from the LSB. The entire bitfield must fit into a 16-bit word (i.e. size + pos &lt; 16)<br /></div>I was going to ask if the fields were little- or big-endian, but I suppose unless you're trying to make machines interoperable with the states of each other (hardly necessary) it doesn't matter.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> CA   | NOT            |   0   | left = !left<br /> CB   | MINUS          |   0   | left = -left<br /> CC   | COMPL          |   0   | left = ~left</div>with all three existing, I'm curious what NOT does. Is it <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LEFT[15:0] = &#40;LEFT[15:0] ==0 ? 1 : 0&#41;</tt>?<br /><br />ed: fixed to only write 16 bits to answer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Wed May 24, 2017 6:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent">^^^ I guess you just volunteered?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Bitfields<br />There are three bitfield instructions: one to extract (load from) a signed bitfield, one to extract an unsigned bitfield, and one to insert (store to) a bitfield. For all three bitfield instructions, the first byte after the instruction is the size of the bitfield in bits, and the following byte is the bit position counting from the LSB. The entire bitfield must fit into a 16-bit word (i.e. size + pos &lt; 16)<br /></div>I was going to ask if the fields were little- or big-endian, but I suppose unless you're trying to make machines interoperable with the states of each other (hardly necessary) it doesn't matter.</div><br /><br />Little-endian. That's what I meant by &quot;counting from the LSB&quot;. A bitfield with a position of 0 is aligned with the LSB of the word it's in, so no shifting is needed on insertion or extraction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Sat May 27, 2017 6:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> CA   | NOT            |   0   | left = !left<br /> CB   | MINUS          |   0   | left = -left<br /> CC   | COMPL          |   0   | left = ~left</div>with all three existing, I'm curious what NOT does. Is it <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LEFT = &#40;LEFT[15:0] ==0 ? 1 : 0&#41;</tt>?</div><br /><br />Yes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon May 29, 2017 3:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been thinking about something similar for the 65816, but with the &quot;word-code&quot; being a list of addresses to jump to.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Wed May 31, 2017 3:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why not look at and extract the 16bit KOEI titles to see if they already have the above in 16bit?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Wed May 31, 2017 12:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I've been thinking about something similar for the 65816, but with the &quot;word-code&quot; being a list of addresses to jump to.</div><br />That of course is what Forth normally does, at least in the indirect-threaded code (ITC) and direct-threaded code (DTC) models.  On the 6502.org forum, Bruce Clark presents the idea of using the 16-bit S (stack-pointer) register as the instruction pointer in DTC Forth on the '816, at <!-- m --><a class="postlink" href="http://forum.6502.org/viewtopic.php?t=586">http://forum.6502.org/viewtopic.php?t=586</a><!-- m --> .  Basically the program itself is on the hardware stack!  The earlier idea of a two-instruction NEXT in ITC Forth on the '816, which he mentions at the top of the head post, is discussed at <!-- m --><a class="postlink" href="http://forum.6502.org/viewtopic.php?t=584">http://forum.6502.org/viewtopic.php?t=584</a><!-- m --> .  Just when you get all comfy with some method, along comes Bruce with some wild idea to turn everything upside down and get you to consider a very different approach that may be a lot better in some situations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed May 31, 2017 8:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you use the stack, you can easily do long addressing.<br /><br />plx<br />plb<br />inc $0000,x<br />rts

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>