<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CRC routines as PRNGs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CRC routines as PRNGs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9598">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9598</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Dec 10, 2012 3:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9562#p104007" class="postlink">Tepples mentioned it</a>, which made me curious.<br /><br />Traditional CRC routines look a <em>lot</em> like LFSR-based PRNGs. Basically, you start with a variable, SEED, and you shift it left once, and if you shift out a 1, you XOR SEED with a constant. If you shift out a 0, you do nothing else. You typically want to shift these 8 times each time you want a random number, to ensure that you get 8 random bits in your byte.<br /><br />CRC generators work the exact same way, except SEED is called CRC, your xor-constant is called the &quot;polynomial&quot;, and it typically performs 8 shifts at a time. CRC generators XOR with a byte of data before it does any shifting, so to use a CRC routine as a pseudoranom number generator, you either pass a constant to it, or you remove that data-byte-XOR all together (equivalent to passing a constant of $00 to it). With an 8-bit generator, you're going to want to keep the data-XOR in and just pass it a constant, because if the generator ever outputs zero, it'll get stuck outputting zeros indefinitely.<br /><br />Now more to the point of my research, <a href="http://6502.org/source/integers/crc-more.html" class="postlink">Greg Cook somehow managed to simplify the entire routine</a> to run in (near)-constant time, without needing to individually shift each bit. I figured out his shortcut for CRC-8 (which I'll put at the end of my post), but I'm having trouble figuring out how he did the CRC-16 routine. Ultimately, I would like a CRC-32 routine that is superefficient like his CRC-16 routine, so that's why I want to figure this out. The best advantage to these routines is that they're the equivalent of doing 8 shifts, so you get 8 random bits with each call, but it takes significantly less time than actually doing 8 shifts.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">== Shortcut method for CRC-8 ==<br />Your polynomial must be an odd number. (all CRC-8 polynomials I've seen are odd anyway).<br />Your polynomial cannot be $01. (This would result in your new byte being the exact same as your starting byte)<br /><br />Start with the MOST SIGNIFICANT 1 BIT of the polynomial, and with each shift, move to the next bit right.<br />Shift.<br />If there's an overflow, xor with the polynomial.<br />If the current bit of the polynomial is 1, xor with your starting value.<br />Repeat until you're out of bits in the polynomial.<br /><br />So, if your polynomial is $07 (which is actually in one of the CRC-8 specs), you only need to perform two shifts.<br />===============================</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Mon Dec 10, 2012 3:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Any data on how varied the distribution is on these modified CRC routines?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Dec 10, 2012 5:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No data whatsoever! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />I have reason to believe they should be acceptable though, just given the way CRC polynomials need to be created.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Dec 10, 2012 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's pretty easy to test a PRNG. Just run it through its cycle and record the results.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Dec 10, 2012 5:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not having a good day (health-wise), but I wanted to chime in and say this is quite clever.  I never would have thought of it (but that's not saying much, honestly).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue Dec 11, 2012 4:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I looked into the CRC-16 shortcut that Greg Cook did, and essentially, the code does this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">The polynomial is x^12 + x^5 + x^0, a.k.a. $1021 (00010000 00100001)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#91;CRC_HI&#93; &#91;CRC_LO&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;abcdefgh ijklmnop<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;┌&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;▼<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ ijklmnop abcdefgh = Input, shifted left 8 bits (wraps around because x^0)<br />&nbsp; &nbsp; &nbsp;XOR ┘ ...abcde fgh..... = x^5<br />Together ┐ efgh.... ....abcd = x^12<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ abcd...a bcd..... = Feedback<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;└&nbsp; &nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;▼&nbsp; &nbsp; &nbsp; &nbsp;▼<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#91;CRC_HI&#93; &#91;CRC_LO&#93;<br /></div><br />I had to pick apart those strings and assemble them like that in order for it to make sense. The first three lines are straightforward enough; wherever there's a 1 in the polynomial, you XOR a shifted copy of the input data. However, the &quot;feedback&quot; line didn't make sense until I really thought about it.<br />If you start with an input of $0100, then you get $1021 out of it. Makes sense, because the very last of the 8 shifts will shift out a 1, and that'll make you XOR the polynomial into your input.<br />If you start with $0200, you get $2042, which, as expected, is the polynomial again, but shifted left once.<br />If you start with $1000, you get $1231. What? Why isn't this the polynomial, just shifted left 4 times?<br /><br />The reason is because you need to think about what's going on when you use a traditional CRC routine. You <em>do</em> XOR a copy of the polynomial shifted left 4 times, but this creates a 1 bit that <em>changes the result of one of your upcoming shifts</em> before you've finished shifting all 8 bits.<br />On the fourth shift, you XOR the polynomial, which places a 1 such that in another four shifts, you're going to XOR the polynomial a second time. So basically, this is feedback.<br /><br />The reason there are 4 bits of feedback in this specific case is because the polynomial, $1021, has its most significant &quot;1&quot; bit <s>as the fourth bit from the top</s> four bits away from the final shift. If the polynomial were instead $2021, then you'd have <s>3</s> 5 bits of feedback. <em>[Edited, I tested this]</em><br /><br />So the key to creating a really quick CRC-32 routine (and thus, a very powerful PRNG) would be to find a polynomial that has the least amount of 1 bits in it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Dec 11, 2012 4:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For a RNG I use something that Blargg used to post here which basically does :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">rand = (rand * 5 + 0x3611) &amp; 0xffff</div><br /><br />Works wonders, and can be done very quickly, without even using X or Y registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Tue Dec 11, 2012 5:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bregalad, is there a mistake in your code? I just tested distribution of this random, and it is really bad, practicaly no distribution at all.<br /><br />I personally use a random random code, i.e. it is not mathematically designed, I just put it by a guess, which has more or less nice distribution, although I'm sure it is far from perfect. Vars are 16 bit words:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">seed1+=(seed2&gt;&gt;1);<br />seed2-=(15^seed1);<br />return seed1;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Dec 11, 2012 6:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">For a RNG I use something that Blargg used to post here which basically does :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">rand = (rand * 5 + 0x3611) &amp; 0xffff</div></div><br />That's called a <a href="https://en.wikipedia.org/wiki/Linear_congruential_generator" class="postlink">linear congruential generator</a>. LCGs tend to have a &quot;hyperplanes&quot; problem unless you use only the high byte.<br /><br />I couldn't find blargg's code in my search; might it have been somebody else?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Dec 11, 2012 10:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I use something like this to experiment with various LFSRs and their periods:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include &lt;stdio.h&gt;<br /><br />static unsigned lfsr( unsigned n )<br />{<br />&nbsp; &nbsp; unsigned c = n &amp; 1;<br />&nbsp; &nbsp; n &gt;&gt;= 1;<br />&nbsp; &nbsp; if ( !c )<br />&nbsp; &nbsp; &nbsp; &nbsp; n ^= 0x860E;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; return n;<br />}<br /><br />int main()<br />{<br />&nbsp; &nbsp; unsigned n = 1;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; int period = 0;<br />&nbsp; &nbsp; do<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; period++;<br />&nbsp; &nbsp; &nbsp; &nbsp; if ( period &gt; 0x100000 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; n = lfsr( n );<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; while ( n != 1 );<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; printf( &quot;%d\n&quot;, period );<br />&nbsp; &nbsp; return 0;<br />}</div><br />Note how lfsr() is written similar to how the 6502 asm would be: save bit that would be shifted into carry, right shift, then test carry. There are lists of &quot;maximal-length&quot; lfsr seeds.<br /><br />Also, CRC LFSR seeds are designed for particular characteristics that help detect bit errors, thus they are not going to be the most optimal to implement in 6502 for a random number generator. Look around for seeds that favor fewer instructions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Dec 11, 2012 2:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't remember exactly, but I'm 100% sure I got this code from this very board, and it was by a regular. I would have bet blargg, but pehaps it was another person. Pehaps it was in the old WWWThread boards, I'm not sure.<br /><br />I'll post it anyways :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GetRandomNmr &nbsp; &nbsp;&nbsp; &nbsp;; See &quot;linear-congruential random number generator&quot; for more.<br />&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; rand = (rand * 5 + 0x3611) &amp; 0xffff;<br />&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; return (rand &gt;&gt; 8) &amp; 0xff;<br />&nbsp; &nbsp;lda RandomH&nbsp; &nbsp; &nbsp;; multiply by 5<br />&nbsp; &nbsp;sta RandomTemp<br />&nbsp; &nbsp;lda RandomL<br />&nbsp; &nbsp;asl a&nbsp; &nbsp;&nbsp; &nbsp;; rand = rand * 4 + rand<br />&nbsp; &nbsp;rol RandomTemp<br />&nbsp; &nbsp;asl a<br />&nbsp; &nbsp;rol RandomTemp<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc RandomL<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda RandomTemp<br />&nbsp; &nbsp;adc RandomH<br />&nbsp; &nbsp;sta RandomH<br />&nbsp; &nbsp;pla&nbsp; &nbsp;&nbsp; &nbsp;; rand = rand + 0x3611<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #$11<br />&nbsp; &nbsp;sta RandomL<br />&nbsp; &nbsp;lda RandomH<br />&nbsp; &nbsp;adc #$36<br />&nbsp; &nbsp;sta RandomH<br />&nbsp; &nbsp;rts&nbsp; &nbsp;&nbsp; &nbsp;; return high 8 bits</div><br /><br />It works wonders to me, and is very fast.<br /><br />LFSRs are great, but they are probably more suited to a hardware implementation as they can be done with N flip-flops, several inverters and a XOR gate.<br />This is a bit slow to emulate in software in my opinion, as you'll need at the very least 16-bit, so it means quite a lot of shift/rotate instructions to execute to get new 8 random bits. A single mult + add is definitely faster.<br /><br />Back to the original topic, those CRC routines could also be very useful to generate some cryptography for passwords in a video game.<br />I mean, take the first byte, compute the CRC, then XOR it with the second byte, take the CRC, etc... and you get all bytes encrypted.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue Dec 11, 2012 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I'd be looking for a polynomial with as few terms as possible.<br /><br />With some help of Wikipedia, I found the polynomial x^n + x^31 + x^30 + x^10 + 1, and if my math is correct, that should be<br />11000000 00000000 00000100 00000001 = C0000401<br /><br />So, when a 1 is shifted out from an ASL, the variable is XORed with C0000401.<br /><br />I may be wrong though.<br /><br />C0000401 creates a lot of feedback, which requires a lot of extra XORs along with shifts. Perhaps a polynomial that begins with 00xxxxxx would be better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Dec 11, 2012 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I mentioned in the other thread, but the LFSR generators don't necessarily have to generate all 8 bits. For full effectiveness you should generate as many new bits as you are consuming, but in practice 2 or 3 generations might be enough for what you're doing. Even just 1 generation is okay for some purposes.<br /><br />Linear congruential generators like Bregalad just suggested can be pretty good too. They're what I normally use on a platform that has a multiply. Using 5 as the multiplier isn't the greatest, but I'm sure the results are useful enough. (Any two primes for the multiply and add will work, though it's normal to choose a multiplier that is a bit larger than that.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Dec 11, 2012 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">Well, I'd be looking for a polynomial with as few terms as possible.</div><br /><br />The polynomials can get extremely simple, for instance the <a href="http://wiki.nesdev.com/w/index.php/APU_Noise" class="postlink">APU Noise</a> LFSR only has two taps. This does not tend to be optimal for &quot;quality&quot;, but again, fine for some purposes. (In this case, 1 bit noise.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue Dec 11, 2012 4:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well yeah, unless I can find a decent 32-bit polynomial (decent meaning maximal-length, as few 1s as possible, ideally with them spread out and away from the most significant 8 bits, while also allowing a good random distribution), it's probably a lot easier to just use a traditional LFSR instead of trying to come up with an optimized one. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>