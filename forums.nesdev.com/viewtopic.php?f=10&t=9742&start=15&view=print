<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How to Update a Palette mid game?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How to Update a Palette mid game?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9742">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9742</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Fri Jan 25, 2013 7:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had a small error in the NMI vector code, it said 0 instead of the NMI label. Please see edited post for corrected version. (I'm sorry its kinda late here)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Fri Jan 25, 2013 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Jeroen wrote:</div><div class="quotecontent">Any reason you're doing sprite dma? Little odd if you don't have sprites yet (if you do nevermind).<br /><br />I don't see the palette code in your nmi?</div><br /><br /><br />I actually do have some sprites for the playstate of the game <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Tried moving the palette code to NMI. Didn't work though. Is that something I really want happening during NMI though? Seems like a loop that I wouldn't want to run continuously if I'm understanding properly how NMI works. Anyway here is the loop that I'm using to load the new palette.<br /><br /><span style="color: #BFBF40">LoadPalettes2:<br />  LDA $2002 ; read PPU status to reset the high/low latch<br />  LDA #$3F<br />  STA $2006 ; write the high byte of $3F00 address<br />  LDA #$00<br />  STA $2006 ; write the low byte of $3F00 address<br />  LDX #$00 ; start out at 0<br /><br />LoadPalettesLoop2:<br />  LDA palette2, x ; load data from address (palette + the value in x)<br />; 1st time through loop it will load palette+0<br />; 2nd time through loop it will load palette+1<br />; 3rd time through loop it will load palette+2<br />; etc<br />  STA $2007 ; write to PPU<br />  INX ; X = X + 1<br />  CPX #$20 ; Compare X to hex $20, decimal 32 - copying 16 bytes = 4 sprites<br />  BNE LoadPalettesLoop2 ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br />; if compare was equal to 32, keep going down<br /><br /><br />And here is the palette .db statements.<br /><br />palette2: <br />   .db $10,$26,$05,$0f,  $10,$30,$21,$0f,  $10,$06,$16,$0f,  $10,$19,$29,$0f   ;;playfield palette<br />   .db $22,$1C,$15,$14,  $22,$02,$38,$3C,  $22,$1C,$15,$14,  $22,$02,$38,$3C   ;;sprite palette</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Fri Jan 25, 2013 7:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You want to keep your nmi as light as possible. So unless you do frequent palette updates you do indeed want to keep such routines out of NMI. (since you have limited time)<br /><br />I can't spot any particular errors in your code. Any chance you could (pastebin) paste all the code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Fri Jan 25, 2013 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Jeroen,<br /><br />EDIT:<br /><br />I updated the code. The first version of the code I put up had a glitch in the scrolling (sorry <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />Also updated the rom on the download link so the title screen works properly.<br /><br />Here is the code. I apologize up front if its a little convoluted. I'm trying to keep things as clean as possible but again, beginner here <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> To give a run down of how it works, it loads the title screen in, and when you hit start (enter) it goes to the playfield. At this point the palette SHOULD change. The bricks should be orange instead of red and the and background should be grey  instead of blue. Here is the full code. The CHR to compile it and the compiled rom are available via download links at the bottom of the screen.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&nbsp; &nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .ineschr 1&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; .inesmap 0&nbsp; &nbsp;; mapper 0 = NROM, no bank swapping<br />&nbsp; .inesmir 1&nbsp; &nbsp;; background mirroring<br />&nbsp; <br /><br />;;;;;;;;;;;;;;;<br /><br />;; DECLARE SOME VARIABLES HERE<br />&nbsp; .rsset $0000&nbsp; ;;start variables at ram location 0<br />&nbsp; <br />gamestate&nbsp; .rs 1&nbsp; ; .rs 1 means reserve one byte of space<br />ballx&nbsp; &nbsp; &nbsp; .rs 1&nbsp; ; ball horizontal position<br />bally&nbsp; &nbsp; &nbsp; .rs 1&nbsp; ; ball vertical position<br />ballup&nbsp; &nbsp; &nbsp;.rs 1&nbsp; ; 1 = ball moving up<br />balldown&nbsp; &nbsp;.rs 1&nbsp; ; 1 = ball moving down<br />ballleft&nbsp; &nbsp;.rs 1&nbsp; ; 1 = ball moving left<br />ballright&nbsp; .rs 1&nbsp; ; 1 = ball moving right<br />ballspeedx .rs 1&nbsp; ; ball horizontal speed per frame<br />ballspeedy .rs 1&nbsp; ; ball vertical speed per frame<br />paddle1ytop&nbsp; &nbsp;.rs 1&nbsp; ; player 1 paddle top vertical position<br />paddle2ybot&nbsp; &nbsp;.rs 1&nbsp; ; player 2 paddle bottom vertical position<br />buttons1&nbsp; &nbsp;.rs 1&nbsp; ; player 1 gamepad buttons, one bit per button<br />buttons2&nbsp; &nbsp;.rs 1&nbsp; ; player 2 gamepad buttons, one bit per button<br />score1&nbsp; &nbsp; &nbsp;.rs 1&nbsp; ; player 1 score, 0-15<br />score2&nbsp; &nbsp; &nbsp;.rs 1&nbsp; ; player 2 score, 0-15<br />pointer&nbsp; &nbsp; .rs 1&nbsp; &nbsp;; background 1 pointer<br />pointer2&nbsp; &nbsp;.rs 1<br />sleeping&nbsp; &nbsp;.rs 1<br />scroll&nbsp; &nbsp; &nbsp;.rs 1&nbsp; ; Scroll Counter for background scrolling<br />nametable&nbsp; .rs 1<br /><br /><br /><br />;; DECLARE SOME CONSTANTS HERE<br />STATETITLE&nbsp; &nbsp; &nbsp;= $00&nbsp; ; displaying title screen<br />STATEPLAYING&nbsp; &nbsp;= $01&nbsp; ; move paddles/ball, check for collisions<br />STATEGAMEOVER&nbsp; = $02&nbsp; ; displaying game over screen<br /><br /><br />RIGHTWALL&nbsp; &nbsp; &nbsp; = $F4&nbsp; ; when ball reaches one of these, do something<br />TOPWALL&nbsp; &nbsp; &nbsp; &nbsp; = $C<br />TOPWALLSPRITE2 = $14<br />TOPWALLSPRITE3 = $1C<br />TOPWALLSPRITE4 = $24<br />BOTTOMWALL&nbsp; &nbsp; &nbsp;= $D8<br />BOTTOMWALLSPRITE2 = $D0<br />BOTTOMWALLSPRITE3 = $C8<br />BOTTOMWALLSPRITE4 = $C0<br /><br />LEFTWALL&nbsp; &nbsp; &nbsp; &nbsp;= $04<br /><br />PADDLE1X&nbsp; &nbsp; &nbsp; &nbsp;= $20&nbsp; ; horizontal position for paddles, doesnt move<br />PADDLE2X&nbsp; &nbsp; &nbsp; &nbsp;= $E0<br /><br /><br />;;;;;;;;;;;;;;;;;;<br /><br /><br /><br /><br />&nbsp; .bank 0<br />&nbsp; .org $C000<br />RESET:<br />&nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable IRQs<br />&nbsp; CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; LDX #$40<br />&nbsp; STX $4017&nbsp; &nbsp; ; disable APU frame IRQ<br />&nbsp; LDX #$FF<br />&nbsp; TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; STX $2000&nbsp; &nbsp; ; disable NMI<br />&nbsp; STX $2001&nbsp; &nbsp; ; disable rendering<br />&nbsp; STX $4010&nbsp; &nbsp; ; disable DMC IRQs<br /><br />vblankwait1:&nbsp; &nbsp; &nbsp; &nbsp;; First wait for vblank to make sure PPU is ready<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait1<br /><br />clrmem:<br />&nbsp; LDA #$00<br />&nbsp; STA $0000, x<br />&nbsp; STA $0100, x<br />&nbsp; STA $0300, x<br />&nbsp; STA $0400, x<br />&nbsp; STA $0500, x<br />&nbsp; STA $0600, x<br />&nbsp; STA $0700, x<br />&nbsp; LDA #$FE<br />&nbsp; STA $0200, x<br />&nbsp; INX<br />&nbsp; BNE clrmem<br /><br />vblankwait2:&nbsp; &nbsp; &nbsp; ; Second wait for vblank, PPU is ready after this<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait2<br /><br /><br />&nbsp; LoadPalettes:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$3F<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $3F00 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $3F00 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br /><br />&nbsp; LoadPalettesLoop:<br />&nbsp; LDA palette, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (palette + the value in x)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 1st time through loop it will load palette+0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2nd time through loop it will load palette+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3rd time through loop it will load palette+2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; etc<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $20, decimal 32 - copying 16 bytes = 4 sprites<br />&nbsp; BNE LoadPalettesLoop&nbsp; ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 32, keep going down<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br /><br />&nbsp; ;; Load Background Title<br /><br />LoadBackground:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$20<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $2000 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $2000 address<br /><br />&nbsp; LDA #$00<br />&nbsp; STA pointer&nbsp; &nbsp; &nbsp; ; put the low byte of the address of background into pointer --- This equals 00?<br />&nbsp; LDA #HIGH(background) ;What does the #HIGH signify? Its not a constant. Is this pulling the tile number from the nametable below?<br />&nbsp; STA pointer+1&nbsp; &nbsp; &nbsp; &nbsp;; put the high byte of the address into pointer. Do we now have $2400?<br /><br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start at pointer + 0<br />&nbsp; LDY #$00<br />OutsideLoop:<br />&nbsp; <br />InsideLoop:<br />&nbsp; LDA &#91;pointer&#93;, y&nbsp; ; copy one background byte from address in pointer plus Y<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; this runs 256 * 8 times<br />&nbsp; <br />&nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; inside loop counter<br />&nbsp; CPY #$00<br />&nbsp; BNE InsideLoop&nbsp; &nbsp; &nbsp; ; run the inside loop 256 times before continuing down<br />&nbsp; <br />&nbsp; INC pointer+1&nbsp; &nbsp; &nbsp; &nbsp;; low byte went 0 to 256, so high byte needs to be changed now<br />&nbsp; <br />&nbsp; INX<br />&nbsp; CPX #$08<br />&nbsp; BNE OutsideLoop&nbsp; &nbsp; &nbsp;; run the outside loop 256 times before continuing down<br /><br />;;:Set starting game state<br />&nbsp; LDA #STATETITLE<br />&nbsp; STA gamestate<br /><br />&nbsp; ;Initialize sleeping variable<br />&nbsp; LDA #$00<br />&nbsp; STA sleeping<br /><br /><br />&nbsp; ;Enable NMI<br /><br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />&nbsp; STA $2000<br /><br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br /><br />;;Scroll Title Screen In&nbsp; <br /><br /><br /><br /><br />Forever:<br />&nbsp; ;JMP Forever&nbsp; &nbsp; &nbsp;;jump back to Forever, infinite loop, waiting for NMI<br /><br />&nbsp; LDA sleeping<br />&nbsp; BEQ Forever<br />&nbsp; <br />&nbsp; <br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />&nbsp; <br />&nbsp; ;; Load In Title Screen<br />&nbsp; ;;Start Scrolling For Title Screen<br />&nbsp; ;;Check if Scrolling is done for title screen<br />&nbsp; LDA gamestate<br />&nbsp; CMP #$01<br />&nbsp; BEQ TitleScrollFinished<br />&nbsp; LDA scroll<br />&nbsp; CMP #$FF<br />&nbsp; BEQ TitleScrollFinished<br />&nbsp; <br />&nbsp; &nbsp;INC scroll&nbsp; &nbsp; &nbsp; &nbsp;; add one to our scroll variable each frame<br /><br />NTSwapCheck:<br />&nbsp; LDA scroll&nbsp; &nbsp; &nbsp; &nbsp;; check if the scroll just wrapped from 255 to 0<br />&nbsp; BNE NTSwapCheckDone&nbsp; <br />NTSwap:<br />&nbsp; LDA nametable&nbsp; &nbsp; ; load current nametable number (0 or 1)<br />&nbsp; EOR #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; exclusive OR of bit 0 will flip that bit<br />&nbsp; STA nametable&nbsp; &nbsp; ; so if nametable was 0, now 1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; if nametable was 1, now 0<br />NTSwapCheckDone:<br /><br />&nbsp; ;;Clean Up PPU address registers<br />&nbsp; <br />&nbsp; LDA #$00<br />&nbsp; STA $2006<br />&nbsp; STA $2006<br /><br />&nbsp; ;;Increment Scroll Counter For Title Screen<br /><br />&nbsp; LDA scroll<br />&nbsp; STA $2005&nbsp; &nbsp; &nbsp; &nbsp; ; write the horizontal scroll count register<br /><br />&nbsp; LDA #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; no vertical scrolling<br />&nbsp; STA $2005<br /><br />&nbsp; TitleScrollFinished:<br /><br /><br /><br />GameLogic:<br />&nbsp; JSR ReadController1 ;get the current button data for player 1<br />&nbsp; JSR ReadController2&nbsp; ;;get the current button data for player 2<br /><br />GameEngine:<br />&nbsp; LDA gamestate<br />&nbsp; CMP #STATETITLE<br />&nbsp; BNE DontJumpTitle&nbsp; &nbsp; ;;game is displaying title screen<br />&nbsp; JMP EngineTitle<br />&nbsp; DontJumpTitle:<br /><br />&nbsp; LDA gamestate<br />&nbsp; CMP #STATEGAMEOVER<br />&nbsp; BNE DontJumpGameOver&nbsp; ;;game is displaying ending screen<br />&nbsp; JMP EngineGameOver<br />&nbsp; DontJumpGameOver:<br /><br /><br />&nbsp; LDA gamestate<br />&nbsp; CMP #STATEPLAYING<br />&nbsp; BNE DontJumpStatePlaying&nbsp; &nbsp;;;game is playing<br />&nbsp; JMP EnginePlaying<br />&nbsp; DontJumpStatePlaying:<br /><br />GameEngineDone:<br /><br /><br />&nbsp; JSR UpdateSprites&nbsp; ;;set ball/paddle sprites from positions<br />&nbsp; LDA #$00<br />&nbsp; STA sleeping<br />&nbsp; JMP Forever<br /><br /><br /><br />NMI:<br /><br />&nbsp;LDA $2002<br /><br />;;Sprite DMA<br />&nbsp; LDA #$00<br />&nbsp; STA $2003&nbsp; &nbsp; &nbsp; &nbsp;; set the low byte (00) of the RAM address<br />&nbsp; LDA #$02<br />&nbsp; STA $4014&nbsp; &nbsp; &nbsp; &nbsp;; set the high byte (02) of the RAM address, start the transfer<br /><br /><br />&nbsp; ;Run Other Game Graphics Code Here<br /><br />&nbsp; JSR DrawScore<br /><br /><br />&nbsp; ;;This is the PPU clean up section, so rendering the next frame starts properly.<br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />&nbsp; ORA nametable<br />&nbsp; STA $2000<br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br />&nbsp; LDA #$01<br />&nbsp; STA sleeping<br />&nbsp; <br />&nbsp; ;; All Graphics Updates done by here.<br /><br />&nbsp; RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; return from interrupt<br /><br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br /><br />EngineTitle:<br /><br />;;if start button pressed<br /><br />&nbsp; &nbsp; lda buttons1&nbsp; &nbsp; &nbsp; &nbsp; ;load the current button state for controller1<br />&nbsp; &nbsp; and #%00010000&nbsp; &nbsp;;isolate the bit representing &quot;up&quot;, by clearing all the other bits<br />&nbsp; &nbsp; beq READSTARTDONE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;if the result was 0, then the &quot;up&quot; bit was clear (thus not pressed), so skip the following code<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ;;Go To Playing State. Set Paddles<br />&nbsp; &nbsp; <br /><br />&nbsp; &nbsp; LDA #STATEPLAYING<br />&nbsp; &nbsp; STA gamestate<br /><br />;; Turn Screen Off<br /><br />&nbsp; LDA #%00000000<br />&nbsp; STA $2001<br /><br />;;Load Paddle Sprites<br /><br />&nbsp; &nbsp; LoadPaddleSpritesLoop:<br />&nbsp; &nbsp; LDA sprites1, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (sprites +&nbsp; x)<br />&nbsp; &nbsp; STA $0204, x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; store into RAM address ($0200 + x)<br />&nbsp; &nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; &nbsp; CPX #$20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $20, decimal 32<br />&nbsp; &nbsp; BNE LoadPaddleSpritesLoop&nbsp; &nbsp;; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if compare was equal to 4, keep going down<br /><br />;;Update Background<br /><br />&nbsp; JSR UpdateBackground<br /><br />;;;Set some initial ball stats<br /><br />&nbsp; LoadPrimaryBallStats:<br /><br />&nbsp; LDA #$01<br />&nbsp; STA balldown<br />&nbsp; STA ballright<br />&nbsp; LDA #$00<br />&nbsp; STA ballup<br />&nbsp; STA ballleft<br /><br />&nbsp; LDA #$50<br />&nbsp; STA bally<br /><br />&nbsp; LDA #$80<br />&nbsp; STA ballx<br /><br />&nbsp; LDA #$02<br />&nbsp; STA ballspeedx<br />&nbsp; STA ballspeedy<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; JMP GameEngineDone<br /><br /><br />&nbsp; READSTARTDONE:<br /><br />&nbsp; JMP GameEngineDone<br /><br /><br /><br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br /><br />EngineGameOver:<br />&nbsp; ;;if start button pressed<br />&nbsp; ;;&nbsp; turn screen off<br />&nbsp; ;;&nbsp; load title screen<br />&nbsp; ;;&nbsp; go to Title State<br />&nbsp; ;;&nbsp; turn screen on<br />&nbsp; JMP GameEngineDone<br /><br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br /><br />EnginePlaying:<br /><br /><br /><br /><br />&nbsp;; Read Controllers and Update Graphics Sprites<br /><br />&nbsp; &nbsp; lda buttons1&nbsp; &nbsp; &nbsp; &nbsp; ;load the current button state for controller1<br />&nbsp; &nbsp; and #%00001000&nbsp; &nbsp;;isolate the bit representing &quot;up&quot;, by clearing all the other bits<br />&nbsp; &nbsp; beq READUPDONE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;if the result was 0, then the &quot;up&quot; bit was clear (thus not pressed), so skip the following code<br />&nbsp; &nbsp; ;code for moving paddle position up here<br /><br />&nbsp; &nbsp; LDA $0204&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 4<br />&nbsp; &nbsp; STA $0204&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0208&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 4<br />&nbsp; &nbsp; STA $0208&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $020c&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 4<br />&nbsp; &nbsp; STA $020c&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0210&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 4<br />&nbsp; &nbsp; STA $0210&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0204<br />&nbsp; &nbsp; CMP #TOPWALL<br />&nbsp; &nbsp; BCS READUPDONE<br /><br />&nbsp; &nbsp; LDA #TOPWALL<br />&nbsp; &nbsp; STA $0204<br /><br />&nbsp; &nbsp; LDA #TOPWALLSPRITE2<br />&nbsp; &nbsp; STA $0208<br /><br />&nbsp; &nbsp; LDA #TOPWALLSPRITE3<br />&nbsp; &nbsp; STA $020C<br /><br />&nbsp; &nbsp; LDA #TOPWALLSPRITE4<br />&nbsp; &nbsp; STA $0210<br /><br />&nbsp; &nbsp; READUPDONE:<br /><br />&nbsp; &nbsp; lda buttons1&nbsp; &nbsp; &nbsp; &nbsp; ;load the current button state for controller1<br />&nbsp; &nbsp; and #%00000100&nbsp; &nbsp; ;isolate the bit representing &quot;down&quot;, by clearing all the other bits<br />&nbsp; &nbsp; beq READDOWNDONE<br />&nbsp; &nbsp; LDA $0204&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0204&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0208&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0208&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $020c&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $020c&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0210&nbsp; &nbsp; &nbsp; &nbsp;; load dave paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0210&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0210<br />&nbsp; &nbsp; CMP #BOTTOMWALL<br />&nbsp; &nbsp; BCC READDOWNDONE<br /><br />&nbsp; &nbsp; LDA #BOTTOMWALL<br />&nbsp; &nbsp; STA $0210<br /><br />&nbsp; &nbsp; LDA #BOTTOMWALLSPRITE2<br />&nbsp; &nbsp; STA $020C<br /><br />&nbsp; &nbsp; LDA #BOTTOMWALLSPRITE3<br />&nbsp; &nbsp; STA $0208<br /><br />&nbsp; &nbsp; LDA #BOTTOMWALLSPRITE4<br />&nbsp; &nbsp; STA $0204<br /><br />READDOWNDONE:<br /><br /><br /><br />&nbsp; &nbsp; lda buttons2&nbsp; &nbsp; &nbsp; &nbsp; ;load the current button state for controller1<br />&nbsp; &nbsp; and #%00001000&nbsp; &nbsp;;isolate the bit representing &quot;up&quot;, by clearing all the other bits<br />&nbsp; &nbsp; beq READP2UPDONE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;if the result was 0, then the &quot;up&quot; bit was clear (thus not pressed), so skip the following code<br />&nbsp; &nbsp; ;code for moving paddle position up here<br /><br />&nbsp; &nbsp; LDA $0214&nbsp; &nbsp; &nbsp; &nbsp;; load John paddle sprite y position<br />&nbsp; &nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 4<br />&nbsp; &nbsp; STA $0214&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0218&nbsp; &nbsp; &nbsp; &nbsp;; load John paddle sprite y position<br />&nbsp; &nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 4<br />&nbsp; &nbsp; STA $0218&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $021c&nbsp; &nbsp; &nbsp; &nbsp;; load John paddle sprite y position<br />&nbsp; &nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 4<br />&nbsp; &nbsp; STA $021c&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0220&nbsp; &nbsp; &nbsp; &nbsp;; load John paddle sprite y position<br />&nbsp; &nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 4<br />&nbsp; &nbsp; STA $0220&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0214<br />&nbsp; &nbsp; CMP #TOPWALL<br />&nbsp; &nbsp; BCS READP2UPDONE<br /><br />&nbsp; &nbsp; LDA #TOPWALL<br />&nbsp; &nbsp; STA $0214<br /><br />&nbsp; &nbsp; LDA #TOPWALLSPRITE2<br />&nbsp; &nbsp; STA $0218<br /><br />&nbsp; &nbsp; LDA #TOPWALLSPRITE3<br />&nbsp; &nbsp; STA $021C<br /><br />&nbsp; &nbsp; LDA #TOPWALLSPRITE4<br />&nbsp; &nbsp; STA $0220<br /><br />&nbsp; &nbsp; READP2UPDONE:<br /><br />&nbsp; &nbsp; lda buttons2&nbsp; &nbsp; &nbsp; &nbsp; ;load the current button state for controller1<br />&nbsp; &nbsp; and #%00000100&nbsp; &nbsp; ;isolate the bit representing &quot;down&quot;, by clearing all the other bits<br />&nbsp; &nbsp; beq READP2DOWNDONE<br />&nbsp; &nbsp; LDA $0214&nbsp; &nbsp; &nbsp; &nbsp;; load John paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0214&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0218&nbsp; &nbsp; &nbsp; &nbsp;; load John paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0218&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $021c&nbsp; &nbsp; &nbsp; &nbsp;; load John paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $021c&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0220&nbsp; &nbsp; &nbsp; &nbsp;; load John paddle sprite y position<br />&nbsp; &nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; &nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 4<br />&nbsp; &nbsp; STA $0220&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; &nbsp; LDA $0220<br />&nbsp; &nbsp; CMP #BOTTOMWALL<br />&nbsp; &nbsp; BCC READP2DOWNDONE<br /><br />&nbsp; &nbsp; LDA #BOTTOMWALL<br />&nbsp; &nbsp; STA $0220<br /><br />&nbsp; &nbsp; LDA #BOTTOMWALLSPRITE2<br />&nbsp; &nbsp; STA $021C<br /><br />&nbsp; &nbsp; LDA #BOTTOMWALLSPRITE3<br />&nbsp; &nbsp; STA $0218<br /><br />&nbsp; &nbsp; LDA #BOTTOMWALLSPRITE4<br />&nbsp; &nbsp; STA $0214<br /><br />&nbsp; &nbsp; READP2DOWNDONE:<br /><br /><br />;Move Ball Sprite<br /><br />&nbsp; MoveBallRight:<br />&nbsp; LDA ballright<br />&nbsp; BEQ MoveBallRightDone&nbsp; &nbsp;;;if ballright=0, skip this section<br /><br />&nbsp; LDA ballx<br />&nbsp; CLC<br />&nbsp; ADC ballspeedx&nbsp; &nbsp; &nbsp; &nbsp; ;;ballx position = ballx + ballspeedx<br />&nbsp; STA ballx<br /><br />&nbsp; LDA ballx<br />&nbsp; CMP #RIGHTWALL<br />&nbsp; BCC MoveBallRightDone&nbsp; &nbsp; &nbsp; ;;if ball x &lt; right wall, still on screen, skip next section<br />&nbsp; LDA #$00<br />&nbsp; STA ballright<br />&nbsp; LDA #$01<br />&nbsp; STA ballleft&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;;bounce, ball now moving left<br />&nbsp; ;;in real game, give point to player 1, reset ball<br />&nbsp; MoveBallRightDone:<br /><br /><br />&nbsp; MoveBallLeft:<br />&nbsp; LDA ballleft<br />&nbsp; BEQ MoveBallLeftDone&nbsp; &nbsp;;;if ballleft=0, skip this section<br /><br />&nbsp; LDA ballx<br />&nbsp; SEC<br />&nbsp; SBC ballspeedx&nbsp; &nbsp; &nbsp; &nbsp; ;;ballx position = ballx - ballspeedx<br />&nbsp; STA ballx<br /><br />&nbsp; LDA ballx<br />&nbsp; CMP #LEFTWALL<br />&nbsp; BCS MoveBallLeftDone&nbsp; &nbsp; &nbsp; ;;if ball x &gt; left wall, still on screen, skip next section<br />&nbsp; LDA #$01<br />&nbsp; STA ballright<br />&nbsp; LDA #$00<br />&nbsp; STA ballleft&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;;bounce, ball now moving right<br />&nbsp; ;;in real game, give point to player 2, reset ball<br />&nbsp; MoveBallLeftDone:<br /><br /><br />&nbsp; MoveBallUp:<br />&nbsp; LDA ballup<br />&nbsp; BEQ MoveBallUpDone&nbsp; &nbsp;;;if ballup=0, skip this section<br /><br />&nbsp; LDA bally<br />&nbsp; SEC<br />&nbsp; SBC ballspeedy&nbsp; &nbsp; &nbsp; &nbsp; ;;bally position = bally - ballspeedy<br />&nbsp; STA bally<br /><br />&nbsp; LDA bally<br />&nbsp; CMP #TOPWALL<br />&nbsp; BCS MoveBallUpDone&nbsp; &nbsp; &nbsp; ;;if ball y &gt; top wall, still on screen, skip next section<br />&nbsp; LDA #$01<br />&nbsp; STA balldown<br />&nbsp; LDA #$00<br />&nbsp; STA ballup&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;;bounce, ball now moving down<br />&nbsp; MoveBallUpDone:<br /><br /><br />&nbsp; MoveBallDown:<br />&nbsp; LDA balldown<br />&nbsp; BEQ MoveBallDownDone&nbsp; &nbsp;;;if ballup=0, skip this section<br /><br />&nbsp; LDA bally<br />&nbsp; CLC<br />&nbsp; ADC ballspeedy&nbsp; &nbsp; &nbsp; &nbsp; ;;bally position = bally + ballspeedy<br />&nbsp; STA bally<br /><br />&nbsp; LDA bally<br />&nbsp; CMP #BOTTOMWALL<br />&nbsp; BCC MoveBallDownDone&nbsp; &nbsp; &nbsp; ;;if ball y &lt; bottom wall, still on screen, skip next section<br />&nbsp; LDA #$00<br />&nbsp; STA balldown<br />&nbsp; LDA #$01<br />&nbsp; STA ballup&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;;bounce, ball now moving down<br />&nbsp; MoveBallDownDone:<br /><br /><br />CheckPaddleCollision:<br />&nbsp; ;;if ball x &lt; paddle1x<br />&nbsp; <br />&nbsp; LDA ballx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Load current horizontal position of ball<br />&nbsp; CMP #PADDLE1X+8&nbsp; &nbsp; &nbsp; &nbsp;;Compare to horizontal position of paddle<br />&nbsp; BCS CheckPaddleCollisionDone&nbsp; ;if ball x position is less than paddle x position branch to CheckPaddleCollisionDone. Otherwise move on to vertical<br /><br />&nbsp; ;;&nbsp; if ball y &gt; paddle y top<br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; &nbsp; ;Load current vertical position of ball<br />&nbsp; CLC<br />&nbsp; ADC #$05<br />&nbsp; CMP $0204&nbsp; ;Compare to paddle1ytop. If ball y position is less than paddle1ytop possition branch to CheckPaddle Collision Done. Otherwise Move on.<br />&nbsp; BCC CheckPaddleCollisionDone<br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; ;;Load Current Vertical Position of ball<br />&nbsp; SEC<br />&nbsp; SBC #$05<br />&nbsp; CMP $0210&nbsp; &nbsp; &nbsp; ;;&nbsp; &nbsp; if ball y greater than paddle y bottom<br />&nbsp; BCS CheckPaddleCollisionDone<br /><br />&nbsp; ;;&nbsp; &nbsp; &nbsp; bounce, ball now moving right<br />&nbsp; <br />&nbsp; LDA #$01<br />&nbsp; STA ballright<br />&nbsp; LDA #$00<br />&nbsp; STA ballleft<br /><br />&nbsp; ;;increase ball speed<br /><br />&nbsp; LDA ballspeedx<br />&nbsp; CMP #$04<br />&nbsp; BEQ ballspeed1done<br />&nbsp; CLC<br />&nbsp; ADC #01<br />&nbsp; STA ballspeedx<br />&nbsp; <br />&nbsp; LDA ballspeedy<br />&nbsp; CMP #04<br />&nbsp; BEQ ballspeed1done<br />&nbsp; CLC<br />&nbsp; ADC #01<br />&nbsp; STA ballspeedy<br /><br />&nbsp; <br />&nbsp; ballspeed1done:<br /><br />CheckPaddleCollisionDone:<br /><br />CheckPaddleCollision2:<br />&nbsp; ;;if ball x &lt; paddle1x<br />&nbsp; <br />&nbsp; LDA ballx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Load current horizontal position of ball<br />&nbsp; CMP #PADDLE2X-8&nbsp; &nbsp; &nbsp; &nbsp;;Compare to horizontal position of paddle<br />&nbsp; BCC CheckPaddleCollision2Done&nbsp; ;if ball x position is less than paddle x position branch to CheckPaddleCollisionDone. Otherwise move on to vertical<br /><br />&nbsp; ;;&nbsp; if ball y &gt; paddle y top<br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; &nbsp; ;Load current vertical position of ball<br />&nbsp; CLC<br />&nbsp; ADC #$05<br />&nbsp; CMP $0214&nbsp; ;Compare to paddle1ytop. If ball y position is Greater than paddle1ytop possition branch to CheckPaddle Collision Done. Otherwise Move on.<br />&nbsp; BCC CheckPaddleCollision2Done<br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; ;;Load Current Vertical Position of ball<br />&nbsp; SEC<br />&nbsp; SBC #$05<br />&nbsp; CMP $0220&nbsp; &nbsp; &nbsp; ;;&nbsp; &nbsp; if ball y &lt; paddle y bottom<br />&nbsp; BCS CheckPaddleCollision2Done<br /><br />&nbsp; ;;&nbsp; &nbsp; &nbsp; bounce, ball now moving left<br />&nbsp; <br />&nbsp; LDA #$00<br />&nbsp; STA ballright<br />&nbsp; LDA #$01<br />&nbsp; STA ballleft<br />&nbsp; <br />&nbsp; ;;increase ball speed<br /><br />&nbsp; LDA ballspeedx<br />&nbsp; CMP #$04<br />&nbsp; BEQ ballspeed2done<br /><br />&nbsp; CLC<br />&nbsp; ADC #$01<br />&nbsp; STA ballspeedx<br />&nbsp; <br />&nbsp; LDA ballspeedy<br />&nbsp; CMP #04<br />&nbsp; BEQ ballspeed2done<br /><br />&nbsp; CLC<br />&nbsp; ADC #01<br />&nbsp; STA ballspeedy<br />&nbsp; <br />&nbsp; ballspeed2done:<br /><br />CheckPaddleCollision2Done:<br /><br />&nbsp; JMP GameEngineDone<br />&nbsp; <br />&nbsp; <br />;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br />&nbsp; &nbsp; &nbsp; &nbsp; ;;UpdateBackground<br /><br />&nbsp; UpdateBackground:<br /><br /><br />;; Load Game State<br />&nbsp; <br />&nbsp; LDA gamestate<br />&nbsp; CMP #STATEPLAYING<br />&nbsp; BNE UpdateBackgroundDone<br />&nbsp; <br />&nbsp; ;; Load Palette<br />&nbsp; <br />&nbsp; &nbsp;;; Vblank Screen by turning off rendering<br /><br />&nbsp; LDA #%00010000&nbsp; &nbsp;; Disable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />&nbsp; STA $2000<br /><br />&nbsp; LDA #%00000000&nbsp; &nbsp;; disable sprites, disable background, no clipping on left side<br />&nbsp; STA $2001<br />&nbsp; <br />;; Load Palettes for Game Area<br /><br />LoadPalettes2:<br />&nbsp; LDA $2002 ; read PPU status to reset the high/low latch<br />&nbsp; LDA #$3F<br />&nbsp; STA $2006 ; write the high byte of $3F00 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006 ; write the low byte of $3F00 address<br />&nbsp; LDX #$00 ; start out at 0<br /><br />LoadPalettesLoop2:<br />&nbsp; LDA palette2, x ; load data from address (palette + the value in x)<br />; 1st time through loop it will load palette+0<br />; 2nd time through loop it will load palette+1<br />; 3rd time through loop it will load palette+2<br />; etc<br />&nbsp; STA $2007 ; write to PPU<br />&nbsp; INX ; X = X + 1<br />&nbsp; CPX #$20 ; Compare X to hex $20, decimal 32 - copying 16 bytes = 4 sprites<br />&nbsp; BNE LoadPalettesLoop2 ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br />; if compare was equal to 32, keep going down<br /><br />&nbsp; LoadPlayBackground:<br /><br />&nbsp; LDA $2002 ;Read PPU status to reset hi/lo latch<br />&nbsp; LDA #$20<br />&nbsp; STA $2006 ;write the high byte of $2000 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006 ;write the low byte of the $2000 address<br /><br /><br />&nbsp; LoadPlayBackgroundLoop:<br /><br />&nbsp; LDA #$00<br />&nbsp; STA pointer2&nbsp; &nbsp; &nbsp; ; put the low byte of the address of background into pointer --- This equals 00?<br />&nbsp; LDA #HIGH(backgroundtwo) ;What does the #HIGH signify? Its not a constant. Is this pulling the tile number from the nametable below?<br />&nbsp; STA pointer2+1&nbsp; &nbsp; &nbsp; &nbsp;; put the high byte of the address into pointer. Do we now have $2400?<br /><br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start at pointer + 0<br />&nbsp; LDY #$00<br /><br />&nbsp; OutsideLoopPlay:<br /><br />InsideLoopPlay:<br />&nbsp; LDA &#91;pointer2&#93;, y&nbsp; ; copy one background byte from address in pointer plus Y<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; this runs 256 * 4 times<br /><br />&nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; inside loop counter<br />&nbsp; CPY #$00<br />&nbsp; BNE InsideLoopPlay&nbsp; &nbsp; &nbsp; ; run the inside loop 256 times before continuing down<br /><br />&nbsp; INC pointer2+1&nbsp; &nbsp; &nbsp; &nbsp;; low byte went 0 to 256, so high byte needs to be changed now<br />&nbsp; <br />&nbsp; INX<br />&nbsp; CPX #$04<br />&nbsp; BNE OutsideLoopPlay&nbsp; &nbsp; &nbsp;; run the outside loop 256 times before continuing down<br />&nbsp; <br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />&nbsp; STA $2000<br /><br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br /><br /><br />RTS<br /><br />UpdateBackgroundDone:<br /><br /><br /><br />&nbsp; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br /><br />UpdateSprites:<br />&nbsp; LDA bally&nbsp; ;;update all ball sprite info<br />&nbsp; STA $0200<br />&nbsp; <br />&nbsp; LDA #$30<br />&nbsp; STA $0201<br />&nbsp; <br />&nbsp; LDA #$00<br />&nbsp; STA $0202<br /><br />&nbsp; LDA ballx<br />&nbsp; STA $0203<br /><br />&nbsp; RTS<br /><br /><br />DrawScore:<br />&nbsp; ;;draw score on screen using background tiles<br />&nbsp; ;;or using many sprites<br />&nbsp; RTS<br /><br />&nbsp;<br />&nbsp;<br />ReadController1:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016<br />&nbsp; LDX #$08<br />ReadController1Loop:<br />&nbsp; LDA $4016<br />&nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; bit0 -&gt; Carry<br />&nbsp; ROL buttons1&nbsp; &nbsp; &nbsp;; bit0 &lt;- Carry<br />&nbsp; DEX<br />&nbsp; BNE ReadController1Loop<br />&nbsp; RTS<br />&nbsp; <br />ReadController2:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016<br />&nbsp; LDX #$08<br />ReadController2Loop:<br />&nbsp; LDA $4017<br />&nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; bit0 -&gt; Carry<br />&nbsp; ROL buttons2&nbsp; &nbsp; &nbsp;; bit0 &lt;- Carry<br />&nbsp; DEX<br />&nbsp; BNE ReadController2Loop<br /><br />&nbsp; RTS&nbsp; <br />&nbsp; <br /><br /><br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; <br />;;;;;;;;;;;;;;<br />&nbsp; <br />&nbsp; <br /><br />&nbsp; .bank 1<br />&nbsp; .org $E000<br />&nbsp; <br />background:<br /><br /><br />;;First Portion Of Title Scrolling Screen<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;.db $80,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $80,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$80,$81,$82,$83,$84,$85,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$90,$91,$92,$93,$94,$95,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$26,$27,$a0,$a1,$a2,$a3,$a4,$a5,$2e,$2f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$80,$81,$82,$83,$84,$85,$ff,$34,$35,$36,$ff,$b0,$b1,$b2,$b3,$b4,$b5,$3e,$3f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$90,$91,$92,$93,$94,$95,$ff,$44,$45,$ff,$ff,$c0,$c1,$c2,$c3,$c4,$c5,$4e,$4f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$a0,$a1,$a2,$a3,$a4,$a5,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$5e,$5f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$b0,$b1,$b2,$b3,$b4,$b5,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$c0,$c1,$c2,$c3,$c4,$c5,$ff,$74,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$40,$41,$42,$43,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$50,$51,$52,$53,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$60,$61,$62,$63,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$c5,$c6,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ea,$eb,$ec,$ed,$ee<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$fa,$fb,$fc,$fd,$fe<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br /><br />&nbsp; &nbsp;<br />&nbsp; &nbsp;;attributes for first portion of title scroll in<br />&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; .db %00000000, %00000000, %00000000, %01010101, %01010101, %00000000, %00000000, %00000000<br />&nbsp; &nbsp; &nbsp; &nbsp; .db %01010101, %01010101, %00000000, %01010101, %01010101, %00000000, %00000000, %00000000<br />&nbsp; &nbsp; &nbsp; &nbsp; .db %01010101, %01010101, %01010000, %00000000, %00000000, %00000000, %01010101, %01010101<br />&nbsp; &nbsp; &nbsp; &nbsp; .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp; &nbsp; &nbsp; .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp; &nbsp; &nbsp; .db %11111111, %01110101, %01010000, %00000000, %00000000, %00000000, %11010101, %11111111<br />&nbsp; &nbsp; &nbsp; &nbsp; .db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010<br />&nbsp; &nbsp; &nbsp; &nbsp; .db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;;;Main Title Screen<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $1d,$18,$19,$24,$00,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$80,$81,$82,$83,$84,$85,$ff,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$90,$91,$92,$93,$94,$95,$ff,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$a0,$a1,$a2,$a3,$a4,$a5,$ff,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$b0,$b1,$b2,$b3,$b4,$b5,$ff,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$c0,$c1,$c2,$c3,$c4,$c5,$ff,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f,$ff,$ff,$ff,$ff,$40,$41,$42,$43,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$84,$85,$86,$87,$88,$89,$8a,$8b,$8c,$8d,$8e,$8f,$ff,$ff,$ff,$ff,$50,$51,$52,$53,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$96,$97,$98,$99,$9a,$9b,$9c,$9d,$9e,$9f,$ff,$ff,$ff,$ff,$60,$61,$62,$63,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$a6,$a7,$a8,$a9,$aa,$ab,$ac,$ad,$ae,$af,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$b6,$b7,$b8,$b9,$ba,$bb,$bc,$bd,$be,$bf,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$c4,$c5,$c6,$ff,$ff,$c9,$ca,$cb,$cc,$cd,$ce,$cf,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$19,$1b,$0e,$1c,$1c,$ff,$ff,$1c,$1d,$0a,$1b,$1d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$c7,$c8,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $e1,$e2,$e3,$e4,$e5,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d7,$d8,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $f1,$f2,$f3,$f4,$f5,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$e7,$e8,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br />&nbsp; &nbsp;.db $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;;End Main Title Screen<br /><br /><br /><br /><br /><br /><br /><br />&nbsp; <br />&nbsp; attributes:&nbsp; ;8 x 8 = 64 bytes<br />&nbsp; <br /><br />&nbsp; &nbsp;<br />&nbsp; &nbsp;;Main Title Scroll In<br /><br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %01010101, %01010101, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %01010101, %01010101, %01010000, %00000000, %00000000, %00000000, %01010101, %01010101<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %11111111, %01110101, %01010000, %00000000, %00000000, %00000000, %11010101, %11111111<br />&nbsp; &nbsp;.db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010<br />&nbsp; &nbsp;.db %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010, %10101010<br />&nbsp; &nbsp;<br /><br /><br /><br /><br /><br />backgroundtwo:<br />&nbsp; &nbsp; &nbsp; &nbsp; .db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$80,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$34,$35,$36,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$40,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6f,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$c0,$c1,$ff,$ff,$ff,$ff,$ff,$74,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$c5,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br />&nbsp; &nbsp;.db $d0,$d0,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$d0,$d0<br /><br /><br /><br /><br />attributestwo:&nbsp; ;8 x 8 = 64 bytes<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br /><br />palette:<br />&nbsp; .db $31,$30,$05,$0f,$31,$30,$21,$0f,$31,$06,$16,$0f,$31,$19,$29,$0f&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;;Title palette<br />&nbsp; .db $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C,&nbsp; $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C&nbsp; &nbsp;;;sprite palette<br />&nbsp; <br />palette2: <br />&nbsp; &nbsp;.db $10,$26,$05,$0f,&nbsp; $10,$30,$21,$0f,&nbsp; $10,$06,$16,$0f,&nbsp; $10,$19,$29,$0f&nbsp; &nbsp;;;playfield palette<br />&nbsp; &nbsp;.db $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C,&nbsp; $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C&nbsp; &nbsp;;;sprite palette<br /><br />sprites:<br />&nbsp; &nbsp; &nbsp;;vert tile attr horiz<br />&nbsp; .db $80, $32, $00, $80&nbsp; &nbsp;;sprite 0<br />&nbsp; .db $80, $33, $00, $88&nbsp; &nbsp;;sprite 1<br />&nbsp; .db $88, $34, $00, $80&nbsp; &nbsp;;sprite 2<br />&nbsp; .db $88, $35, $00, $88&nbsp; &nbsp;;sprite 3<br /><br />&nbsp; <br />&nbsp; sprites1:&nbsp; &nbsp; ;Paddle Sprites<br /><br />&nbsp; .db $50, $76, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite<br />&nbsp; .db $58, $86, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 2<br />&nbsp; .db $60, $96, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 3<br />&nbsp; .db $68, $A6, $02, PADDLE1X&nbsp; &nbsp;;Dave Paddle Sprite 4<br />&nbsp; ;; John Paddle Sprites<br />&nbsp; .db $50, $7A, $02, PADDLE2X<br />&nbsp; .db $58, $8A, $02, PADDLE2X<br />&nbsp; .db $60, $9A, $02, PADDLE2X<br />&nbsp; .db $68, $AA, $02, PADDLE2X<br />&nbsp; <br /><br />&nbsp; <br /><br />&nbsp; <br /><br /><br /><br />&nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens (once per frame if enabled) the<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br />&nbsp; <br />&nbsp; <br />;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 2<br />&nbsp; .org $0000<br />&nbsp; .incbin &quot;mario.chr&quot;&nbsp; &nbsp;;includes 8KB graphics file from SMB1 <br /></div><br /><br /><br />Here is the rom<br /><br /><!-- m --><a class="postlink" href="http://www.bidyourheart.com/pong1.nes">http://www.bidyourheart.com/pong1.nes</a><!-- m --><br /><br />Here is the CHR<br /><br /><!-- m --><a class="postlink" href="http://www.bidyourheart.com/mario.chr">http://www.bidyourheart.com/mario.chr</a><!-- m --><br /><br />Don't mind the website. Its an old dating site I put together when I was learning PHP <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Fri Jan 25, 2013 7:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I updated the code in the above post. The first version of the code I put up had a glitch in the scrolling (sorry <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />Also updated the rom on the download link so the title screen works properly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Fri Jan 25, 2013 8:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see your issue. You're updating the &quot;backround&quot; palette with a different backround color as the sprite backround color. ALL 16 entries are mirrored, so the last value written to the first entry of any of them becomes your backround color.<br /><br />edit: as an example if I write<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette2:<br />&nbsp; &nbsp;.db $01,$26,$05,$0f,&nbsp; $02,$30,$21,$0f,&nbsp; $03,$06,$16,$0f,&nbsp; $04,$19,$29,$0f&nbsp; &nbsp;;;playfield palette<br />&nbsp; &nbsp;.db $05,$1C,$15,$14,&nbsp; $06,$02,$38,$3C,&nbsp; $07,$1C,$15,$14,&nbsp; $08,$02,$38,$3C&nbsp; &nbsp;;;sprite palette</div><br /><br />The effective palette will be:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette2:<br />&nbsp; &nbsp;.db $08,$26,$05,$0f,&nbsp; $08,$30,$21,$0f,&nbsp; $08,$06,$16,$0f,&nbsp; $08,$19,$29,$0f&nbsp; &nbsp;;;playfield palette<br />&nbsp; &nbsp;.db $08,$1C,$15,$14,&nbsp; $08,$02,$38,$3C,&nbsp; $08,$1C,$15,$14,&nbsp; $08,$02,$38,$3C&nbsp; &nbsp;;;sprite palette</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Fri Jan 25, 2013 8:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just to inject some info, don't try to move code around to get something to happen. Programming is not guess and check, it's know and do. Usually for stuff like this, you need specific and timed code to disable and enable the screen well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Fri Jan 25, 2013 8:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd say moving around is ok, as long as its for learning purposes. Don't just guess if you actually expect results though <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Fri Jan 25, 2013 8:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Jeroen wrote:</div><div class="quotecontent">I see your issue. You're updating the &quot;backround&quot; palette with a different backround color as the sprite backround color. ALL 16 entries are mirrored, so the last value written to the first entry of any of them becomes your backround color.<br /><br />edit: as an example if I write<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette2:<br />&nbsp; &nbsp;.db $01,$26,$05,$0f,&nbsp; $02,$30,$21,$0f,&nbsp; $03,$06,$16,$0f,&nbsp; $04,$19,$29,$0f&nbsp; &nbsp;;;playfield palette<br />&nbsp; &nbsp;.db $05,$1C,$15,$14,&nbsp; $06,$02,$38,$3C,&nbsp; $07,$1C,$15,$14,&nbsp; $08,$02,$38,$3C&nbsp; &nbsp;;;sprite palette</div><br /><br />The effective palette will be:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette2:<br />&nbsp; &nbsp;.db $08,$26,$05,$0f,&nbsp; $08,$30,$21,$0f,&nbsp; $08,$06,$16,$0f,&nbsp; $08,$19,$29,$0f&nbsp; &nbsp;;;playfield palette<br />&nbsp; &nbsp;.db $08,$1C,$15,$14,&nbsp; $08,$02,$38,$3C,&nbsp; $08,$1C,$15,$14,&nbsp; $08,$02,$38,$3C&nbsp; &nbsp;;;sprite palette</div></div><br /><br /><br /><br />Thanks you SO MUCH. Honestly, I was pullling my hair out over that <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I have it working now. I have one more bug thats kind of strange. Would you mind looking at it? You can see it in the uploaded rom here.<br /><br /><!-- m --><a class="postlink" href="http://www.bidyourheart.com/pong1.nes">http://www.bidyourheart.com/pong1.nes</a><!-- m --><br /><br />Basically, when you hit start and it goes to the game screen, the titles on the right side of the screen are out of position and some tiles from the title screen are creeping in.<br /><br />Any thoughts?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Fri Jan 25, 2013 8:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Jeroen wrote:</div><div class="quotecontent">I'd say moving around is ok, as long as its for learning purposes. Don't just guess if you actually expect results though <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br /><br />Lol I get there sometimes out of desperation. After I've exhausted all I can think to try from a logical standpoint I start moving code around. Probably the stupidest thing to do actually because it causes all sorts of flow problems and I usually end up with something broken...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Fri Jan 25, 2013 8:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I'm about to go to bed so no time to check.<br /><br />But there's this thing with nes, where using $2006/$2007 tends to clobber the scroll.<br />Try resetting the scroll (Including base nametable bits) to whatever you WANT them to be after you do a bunch of PPU writes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Fri Jan 25, 2013 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks man so much. I truly appreciate the help.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jan 25, 2013 9:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Jeroen wrote:</div><div class="quotecontent">I see your issue. You're updating the &quot;backround&quot; palette with a different backround color as the sprite backround color. ALL 16 entries are mirrored, so the last value written to the first entry of any of them becomes your backround color.<br /><br />edit: as an example if I write<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette2:<br />&nbsp; &nbsp;.db $01,$26,$05,$0f,&nbsp; $02,$30,$21,$0f,&nbsp; $03,$06,$16,$0f,&nbsp; $04,$19,$29,$0f&nbsp; &nbsp;;;playfield palette<br />&nbsp; &nbsp;.db $05,$1C,$15,$14,&nbsp; $06,$02,$38,$3C,&nbsp; $07,$1C,$15,$14,&nbsp; $08,$02,$38,$3C&nbsp; &nbsp;;;sprite palette</div><br /><br />The effective palette will be:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette2:<br />&nbsp; &nbsp;.db $08,$26,$05,$0f,&nbsp; $08,$30,$21,$0f,&nbsp; $08,$06,$16,$0f,&nbsp; $08,$19,$29,$0f&nbsp; &nbsp;;;playfield palette<br />&nbsp; &nbsp;.db $08,$1C,$15,$14,&nbsp; $08,$02,$38,$3C,&nbsp; $08,$1C,$15,$14,&nbsp; $08,$02,$38,$3C&nbsp; &nbsp;;;sprite palette</div></div><br />Slightly incorrect. Not all of the 8 background color locations are mirrors of each other, so the effective palette would actually be this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette2:<br />&nbsp; &nbsp;.db $05,$26,$05,$0f,&nbsp; $06,$30,$21,$0f,&nbsp; $07,$06,$16,$0f,&nbsp; $08,$19,$29,$0f&nbsp; &nbsp;;;playfield palette<br />&nbsp; &nbsp;.db $05,$1C,$15,$14,&nbsp; $06,$02,$38,$3C,&nbsp; $07,$1C,$15,$14,&nbsp; $08,$02,$38,$3C&nbsp; &nbsp;;;sprite palette</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Sat Jan 26, 2013 10:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Stil doesn't the last written value act as the backround? Thus EFFECTIVLY it's what I said, even if the actual values stored are somewhat different.<br /><br />Feel free to correct me if wrong of course.<br /><br />edit: fresh from irc:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&lt;thefox&gt; nope it's not the last written value<br />&lt;thefox&gt; it's the last value written to $3f00 or $3f10<br />&lt;jero32&gt; I see<br />&lt;thefox&gt; 3f00/4/8/C are mirrored down to 3f10/14/18/1C, and that's it<br />&lt;jero32&gt; I'll edit the post to include this information</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Sat Jan 26, 2013 4:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to Update a Palette mid game?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I played around with it in FCEU and I seems like it was the first value that I wrote to the first value of the sprite palette that got mirrored. I could be reading it in reverse though as I'm not quite sure what counts as the first value written and the last value written.<br /><br />Regardless though, I think it makes sense to keep the first byte of each four color palette entry the same for transparency reasons and also to avoid the glitch that I was having.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>