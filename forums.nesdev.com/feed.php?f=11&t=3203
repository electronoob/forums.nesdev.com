<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=11&amp;t=3203" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-04-10T20:44:05-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=11&amp;t=3203</id>
<entry>
<author><name><![CDATA[beneficii]]></name></author>
<updated>2007-04-10T20:44:05-07:00</updated>
<published>2007-04-10T20:44:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3203&amp;p=23086#p23086</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3203&amp;p=23086#p23086"/>
<title type="html"><![CDATA[ＦＤＳ Ｉｎｆｏｌｉｚｅｒ]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3203&amp;p=23086#p23086"><![CDATA[
こんな物を見付けないので、今日はこれを書きました。ソースコードです：<br /><br />【Ｃで書いて、ＭｉｎＧＷでコンパイルをしました。ファイルの名は「ｆｄｓｉｎｆｏ．ｃ」です。】<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/*<br /><br />FDS Infolizer<br />Written by Beneficii on April 10, 2007--finished at 10:38 PM CDT &#40;GMT -05&#41;<br />beneficii@gmail.com<br /><br />Prints information about an FDS file stored in fwNES format; also can output<br />files from the FDS disks to your file system<br />You might want to use redirection &quot;&gt;filename&quot; to redirect the standard output of<br />this program<br />Parameters:<br />    fdsinfo     program filename<br />    fds-file    filename of FDS file to read<br />    -o          adding this tells the program to output the files from the FDS<br />                &#40;optional&#41;<br />    base dir    provides a base directory to store the output files<br />                &#40;optional; defaults to current console window directory&#41;<br />    <br />When this saves the files, it creates a directory for each of the disks and puts<br />the files in their respective disks' directories<br /><br />^_^ Special thanks to Nori's and Brad Taylor's Docs ^_^<br />^_^ And the wonderful people at nesdev.com and acmlm.no-ip.org ^_^<br /><br />*/<br /><br />#include &lt;stdio.h&gt;<br />#include &lt;string.h&gt;<br />#include &lt;dir.h&gt;<br /><br />#define START_ADDRESS     0x10<br />#define DISK_SIZE         &#40;size_t&#41; 65500<br />#define DISK_HEADER       41<br />#define FILE_AMOUNT       1<br />#define FILE_HEADER       15<br />#define F&#40;e,b&#41;            sprintf&#40;e, &quot;Bad format at %s!\n&quot;, b&#41;;<br />#define S&#40;e&#41;              sprintf&#40;e, &quot;Bad file size!\n&quot;&#41;;<br />#define ERROR&#40;c,s,e,f,n&#41;  \<br />if&#40;c&#41; &#123; \<br />    fclose&#40;f&#41;; \<br />    s \<br />    perror&#40;e&#41;; \<br />    return &#40;n&#41;; \<br />&#125;<br />#define FP&#40;c,e,b,f&#41;       ERROR&#40;c, F&#40;e,b&#41;, e, f, 4&#41;<br />#define SP&#40;c,e,f&#41;         ERROR&#40;c, S&#40;e&#41;, e, f, 5&#41;<br />#define COMP_CONDITION1   &#40;&#40;ftell&#40;in&#41;-START_ADDRESS&#41; / DISK_SIZE != nodisks&#41;<br />#define COMP_CONDITION2   &#40;&#40;ftell&#40;in&#41;-START_ADDRESS&#41; % DISK_SIZE&#41;<br /><br />typedef unsigned char data;<br /><br />const char title&#91;&#93;     = &quot;fdsinfo &lt;fds-file&gt; &#91;-o &#91;base directory&#93;&#93;\n\<br />\t-o\toutput fds files\n\n&quot;;<br />const char fds_check&#91;&#93; = &quot;FDS\x1a&quot;;<br />const char hvc_check&#91;&#93; = &quot;*NINTENDO-HVC*&quot;;<br />const char *strings&#91;&#93; = &#123;<br />    &quot;10-Byte Check&quot;,<br />    &quot;Manufacture Code&quot;,<br />    &quot;Game Name&quot;,<br />    &quot;Game Version Number&quot;,<br />    &quot;Side Number&quot;,<br />    &quot;Disk Number&quot;, <br />    &quot;Err. 9&quot;,<br />    &quot;Err. 10&quot;,<br />    &quot;Boot Read File Code&quot;,<br />    &quot;Manufacture Permit Date &#40;?&#41;&quot;,<br />    &quot;Create Date&quot;,<br />&#125;;<br />const char *fstrings&#91;&#93; = &#123;<br />    &quot;File Number&quot;,<br />    &quot;File ID Code&quot;,<br />    &quot;Filename&quot;,<br />    &quot;File &#40;Memory&#41; Address&quot;,<br />    &quot;File Size&quot;,<br />    &quot;File Kind&quot;,<br />&#125;;<br />const char *fkinds&#91;&#93; = &#123;<br />    &quot;Program &#40;PRAM&#41;&quot;,<br />    &quot;Character &#40;CRAM&#41;&quot;,<br />    &quot;Name Table &#40;VRAM&#41;&quot;,<br />&#125;;<br />/* starting byte of each piece of info from disk header starting with first<br />   byte after *NINTENDO-HVC* */<br />const int  dstart&#91;&#93; = &#123;0, 0, 1, 5, 6, 7, 8, 9, 10, 16, 29&#125;;<br />const int  fstart&#91;&#93; = &#123;0, 1, 2, 10, 12, 14&#125;;<br />const char sides&#91;&#93;  = &#123;'A', 'B'&#125;;<br /><br />void buildspacebuffer&#40;char *buff, int num&#41; &#123;<br />int i;<br />     for&#40;i = 0; i &lt; num; i++&#41; &#123;<br />           buff&#91;i&#93; = ' ';<br />     &#125;<br />     if&#40;num &lt; 0&#41; num = 0;<br />     buff&#91;num&#93; = '\0';<br />&#125;<br /><br />int main&#40;int argc, char **argv&#41; &#123;<br />    int outfiles = 0, nodisks = 0, i = 0, j = 0, k = 0, cflag = 0, <br />      dirflag = 0, dircheck = 0;<br />    size_t memstart = 0, outsize = 0;<br />    data input&#91;DISK_SIZE&#93;;<br />    data *ptr = NULL;<br />    FILE *in = NULL, *out = NULL;<br />    char error&#91;300&#93;, space&#91;50&#93;, filename&#91;9&#93;, fileout&#91;350&#93;;<br />    if&#40;argc &lt; 2&#41; &#123;<br />        printf&#40;title&#41;;<br />        return 0;<br />    &#125;<br />    if&#40;argc &gt; 4&#41; &#123;<br />        printf&#40;title&#41;;<br />        perror&#40;&quot;Too many parameters!\n&quot;&#41;;<br />        return 1;<br />    &#125;<br />    in = fopen&#40;argv&#91;1&#93;, &quot;rb&quot;&#41;;<br />    if&#40;in == NULL&#41; &#123;<br />        perror&#40;&quot;Bad filename!\n&quot;&#41;;<br />        return 2;<br />    &#125;<br />    if&#40;argc &gt;= 3&#41; &#123;<br />        if&#40;strcmp&#40;&quot;-o&quot;, argv&#91;2&#93;&#41;&#41; &#123;<br />            fclose&#40;in&#41;;<br />            printf&#40;title&#41;;<br />            perror&#40;&quot;Bad parameter after file!\n&quot;&#41;;<br />            return 3;<br />        &#125;<br />        outfiles = 1;<br />    &#125;<br />    if&#40;argc==4&#41; &#123;<br />        dircheck = chdir&#40;argv&#91;3&#93;&#41;;<br />        if&#40;dircheck &lt; 0&#41; &#123;<br />            dircheck = mkdir&#40;argv&#91;3&#93;&#41;;<br />            if&#40;dircheck &lt; 0&#41; &#123;<br />                perror&#40;&quot;Could not create base directory.  Cannot write files.\n&quot;&#41;;<br />                outfiles = 0;<br />            &#125; else &#123;<br />                dircheck = chdir&#40;argv&#91;3&#93;&#41;;<br />                if&#40;dircheck &lt; 0&#41; &#123;<br />                    perror&#40;&quot;Could not switch to base directory. Cannot write files.\n&quot;&#41;;<br />                    outfiles = 0;<br />                &#125;<br />            &#125;<br />        &#125;    <br />    &#125;<br />    /* deal with fwNES header and total size check */<br />    SP&#40;fread&#40;input, sizeof&#40;data&#41;, strlen&#40;fds_check&#41;, in&#41;!=strlen&#40;fds_check&#41;, error, in&#41;<br />    FP&#40;strncmp&#40;fds_check, input, strlen&#40;fds_check&#41;&#41;, error, &quot;fwNES check&quot;, in&#41;<br />    nodisks = fgetc&#40;in&#41;;<br />    SP&#40;nodisks &lt; 0, error, in&#41;<br />    rewind&#40;in&#41;;<br />    fseek&#40;in, 0, SEEK_END&#41;;<br />    SP&#40;COMP_CONDITION1 || COMP_CONDITION2, error, in&#41;<br />    /* do each disk */<br />    for&#40;i = 0; i &lt; nodisks; i++&#41; &#123;<br />        printf&#40;&quot;Disk %i:\n&quot;, i&#41;;<br />        rewind&#40;in&#41;;<br />        fseek&#40;in, START_ADDRESS + i * DISK_SIZE, SEEK_SET&#41;;<br />        SP&#40;fread&#40;input, sizeof&#40;data&#41;, DISK_SIZE, in&#41;!=DISK_SIZE, error, in&#41;<br />        if&#40;outfiles&#41; &#123;<br />            /* check if already in sub-directory */<br />            if&#40;dirflag&#41; &#123;<br />                j = chdir&#40;&quot;..&quot;&#41;;<br />                if&#40;j &lt; 0&#41; &#123;<br />                    perror&#40;&quot;Error coming out of directory.  Cannot write files.\n&quot;&#41;;<br />                    outfiles = 0;<br />                &#125;<br />            &#125;<br />            sprintf&#40;fileout, &quot;DISK_%02X&quot;, i&#41;;<br />            j = chdir&#40;fileout&#41;;<br />            if&#40;j &lt; 0&#41; &#123;<br />                j = mkdir&#40;fileout&#41;;<br />                if&#40;j &lt; 0&#41; &#123;<br />                    sprintf&#40;error, <br />                      &quot;Cannot create directory %s!  Cannot write files.\n&quot;,<br />                      fileout&#41;;<br />                    perror&#40;error&#41;;<br />                    outfiles = 0;<br />                &#125; else &#123;<br />                    j = chdir&#40;fileout&#41;;<br />                    if&#40;j &lt; 0&#41; &#123;<br />                        sprintf&#40;error, <br />                          &quot;Cannot create directory %s!  Cannot write files.\n&quot;,<br />                          fileout&#41;;<br />                        perror&#40;error&#41;;<br />                        outfiles = 0;    <br />                    &#125;<br />                &#125;<br />            &#125;<br />            dirflag = 1;<br />        &#125;<br />        memstart = outsize = 0;<br />        ptr = input;<br />        cflag = 1;<br />        do &#123;<br />            if&#40;ptr - input &gt;= DISK_SIZE&#41; /* if not enough room on disk */ &#123;<br />                perror&#40;&quot;Disk overflow?\nNot enough room on disk for exit byte!\n&quot;&#41;;<br />                break;<br />            &#125;<br />            switch&#40;*ptr&#41; &#123;<br />                case 1: /*disk header*/<br />                    /* if not enough room for disk header */<br />                    if&#40;ptr - input + 1 + strlen&#40;hvc_check&#41; + DISK_HEADER <br />                      &gt; DISK_SIZE&#41; &#123;<br />                        perror&#40;&quot;Not enough room for disk header!\n&quot;&#41;;<br />                        cflag = 0;<br />                        break;<br />                    &#125;<br />                    ptr++;<br />                    printf&#40;&quot;Header:\n&quot;&#41;;<br />                    if&#40;strncmp&#40;hvc_check, ptr, strlen&#40;hvc_check&#41;&#41;&#41; &#123;<br />                        perror&#40;&quot;Bad header format for disk!\n&quot;&#41;;<br />                        cflag = 0;<br />                        break;<br />                    &#125;<br />                    ptr += strlen&#40;hvc_check&#41;;<br />                    /* print disk header info */<br />                    for&#40;j = 0; j &lt; 11; j++&#41; &#123;<br />                        buildspacebuffer&#40;space, 30 - strlen&#40;strings&#91;j&#93;&#41;&#41;;<br />                        printf&#40;&quot;%s:%s&quot;, strings&#91;j&#93;, space&#41;;<br />                        switch&#40;j&#41; &#123;<br />                            case 0:<br />                                for&#40;k = 0; k &lt; 10; k++&#41; <br />                                    printf&#40;&quot;$%02X &quot;, ptr&#91;k+dstart&#91;j&#93;&#93;&#41;;<br />                                break;<br />                            case 2:<br />                                for&#40;k = 0; k &lt; 4; k++&#41; <br />                                    printf&#40;&quot;%c&quot;, ptr&#91;k+dstart&#91;j&#93;&#93;&#41;;<br />                                break;<br />                            case 4: <br />                                printf&#40;&quot;Side %c&quot;, sides&#91;ptr&#91;dstart&#91;j&#93;&#93; &amp; 1&#93;&#41;;<br />                                break;<br />                            case 9:<br />                            case 10:<br />                                printf&#40;&quot;%x-%x in the year of Showa %x&quot;,<br />                                  ptr&#91;1+dstart&#91;j&#93;&#93;, ptr&#91;2+dstart&#91;j&#93;&#93;, ptr&#91;0+dstart&#91;j&#93;&#93;&#41;;<br />                                break;<br />                            default:<br />                                printf&#40;&quot;$%02X&quot;, ptr&#91;dstart&#91;j&#93;&#93;&#41;;<br />                                break;<br />                        &#125;<br />                        printf&#40;&quot;\n&quot;&#41;;<br />                    &#125;<br />                    printf&#40;&quot;End of block\n\n&quot;&#41;;<br />                    ptr += DISK_HEADER;<br />                    break;<br />                case 2:   /*file amount block*/<br />                    if&#40;ptr - input + 2 &gt; DISK_SIZE&#41; &#123;<br />                        perror&#40;&quot;Not enough space for file amount block!\n&quot;&#41;;<br />                        cflag = 0;<br />                        break;<br />                    &#125;<br />                    ptr++;<br />                    buildspacebuffer&#40;space, 30 - strlen&#40;&quot;Number of files&quot;&#41;&#41;;<br />                    printf&#40;&quot;File amount block:\nNumber of files:%s%i\n&quot;,<br />                      space, *ptr&#41;;<br />                    printf&#40;&quot;End of block\n\n&quot;&#41;;<br />                    ptr++;<br />                    break;<br />                case 3:   /*file header info*/<br />                    if&#40;ptr - input + 1 + FILE_HEADER &gt; DISK_SIZE&#41; &#123;<br />                        perror&#40;&quot;Not enough space for file header block!\n&quot;&#41;;<br />                        cflag = 0;<br />                        break;<br />                    &#125;<br />                    ptr++;<br />                    for&#40;j = 0; j &lt; 6; j++&#41; &#123;<br />                        buildspacebuffer&#40;space, 30 - strlen&#40;fstrings&#91;j&#93;&#41;&#41;;<br />                        printf&#40;&quot;%s:%s&quot;, fstrings&#91;j&#93;, space&#41;; <br />                        switch&#40;j&#41; &#123;<br />                            case 2:<br />                                for&#40;k = 0; k &lt; 8; k++&#41; &#123;<br />                                    filename&#91;k&#93; = ptr&#91;fstart&#91;j&#93;+k&#93;;<br />                                    printf&#40;&quot;%c&quot;, filename&#91;k&#93;&#41;;<br />                                &#125;<br />                                filename&#91;k&#93; = '\0';<br />                                break;<br />                            case 3:<br />                                memstart = ptr&#91;fstart&#91;j&#93;&#93; | &#40;ptr&#91;fstart&#91;j&#93;+1&#93;&lt;&lt;8&#41;;<br />                                printf&#40;&quot;$%04X&quot;, memstart&#41;;<br />                                break;<br />                            case 4:<br />                                outsize  = ptr&#91;fstart&#91;j&#93;&#93; | &#40;ptr&#91;fstart&#91;j&#93;+1&#93;&lt;&lt;8&#41;;<br />                                printf&#40;&quot;$%04X&quot;, outsize&#41;;<br />                                break;<br />                            case 5:<br />                                if&#40;ptr&#91;fstart&#91;j&#93;&#93; &gt; 2&#41; <br />                                    printf&#40;&quot;Unknown &#40;UNKT&#41;&quot;&#41;;<br />                                else<br />                                    printf&#40;&quot;%s&quot;, fkinds&#91;ptr&#91;fstart&#91;j&#93;&#93;&#93;&#41;;<br />                                break;<br />                            default:<br />                                printf&#40;&quot;$%02X&quot;, ptr&#91;fstart&#91;j&#93;&#93;&#41;;<br />                                break;<br />                        &#125;<br />                        printf&#40;&quot;\n&quot;&#41;;<br />                    &#125;<br />                    printf&#40;&quot;End of block\n\n&quot;&#41;;<br />                    ptr += FILE_HEADER;<br />                    break;<br />                case 4:<br />                    if&#40;ptr - input + 1 + outsize &gt; DISK_SIZE&#41; &#123;<br />                        perror&#40;&quot;Not enough room for file on disk!\n&quot;&#41;;<br />                        cflag = 0;<br />                        break;<br />                    &#125;<br />                    ptr++;<br />                    printf&#40;&quot;File %s\n&quot;, filename&#41;; <br />                    if&#40;outfiles&#41; &#123;<br />                        printf&#40;&quot;Printing file from disk %i...\n&quot;, i&#41;;<br />                        for&#40;j = 0; j &lt; 8; j++&#41; <br />                            if&#40;isspace&#40;filename&#91;j&#93;&#41;&#41;<br />                                filename&#91;j&#93; = '_';<br />                        sprintf&#40;fileout, &quot;%s.BIN&quot;, filename&#41;;<br />                        out = fopen&#40;fileout, &quot;wb&quot;&#41;;<br />                        if&#40;out==NULL&#41; &#123;<br />                            outfiles = 0;<br />                            sprintf&#40;error, &quot;Could not open %s for writing!\n&quot;, <br />                                fileout&#41;;<br />                            perror&#40;error&#41;;<br />                            printf&#40;&quot;Cancelling all file write-outs!\n&quot;&#41;;<br />                        &#125; else &#123;<br />                            fwrite&#40;ptr, sizeof&#40;data&#41;, outsize, out&#41;;<br />                            j = fclose&#40;out&#41;;<br />                            if&#40;j&#41; &#123;<br />                                perror&#40;&quot;Ouch, error while closing out file\n&quot;&#41;;<br />                                perror&#40;&quot;Aborting program\n&quot;&#41;;<br />                                j = fclose&#40;in&#41;;<br />                                if&#40;j&#41; &#123;<br />                                    perror&#40;&quot;Ouch, error while closing in file too\n&quot;&#41;;<br />                                    perror&#40;&quot;Something's wrong\n&quot;&#41;;<br />                                &#125;<br />                                return j;<br />                            &#125;    <br />                            printf&#40;&quot;File write to %s successful!\n&quot;, fileout&#41;;<br />                        &#125;<br />                    &#125;<br />                    printf&#40;&quot;End of file\n\n&quot;&#41;;<br />                    ptr += outsize;<br />                    memstart = outsize = 0; /*resetting file info*/<br />                    filename&#91;0&#93; = '\0';<br />                    break;<br />                case 0:<br />                case 255: /* disk end block */<br />                    cflag = 0;<br />                    break;<br />                default:<br />                    sprintf&#40;error, <br />                      &quot;Unknown/Invalid block type at disk %i byte %04X!\n&quot;, <br />                      i, ptr - input&#41;;<br />                    perror&#40;error&#41;;<br />                    cflag = 0;<br />                    break;<br />            &#125;<br />        &#125; while&#40;cflag&#41;;<br />        printf&#40;&quot;End of disk\n\n\n\n&quot;&#41;;<br />    &#125;<br />    i = fclose&#40;in&#41;;<br />    if&#40;i&#41; &#123;<br />        perror&#40;&quot;Error closing in file\nAborting program\n&quot;&#41;;<br />        return i;<br />    &#125;<br />    printf&#40;&quot;End of FDS Disk Set\n&quot;&#41;;<br />    printf&#40;&quot;Success!\n&quot;&#41;;<br />    return 0;<br />&#125;<br />/* updated at 5:18 PM CDT &#40;GMT -5&#41; on Wednesday, May 2, 2007 */<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=156">beneficii</a> — Tue Apr 10, 2007 8:44 pm</p><hr />
]]></content>
</entry>
</feed>