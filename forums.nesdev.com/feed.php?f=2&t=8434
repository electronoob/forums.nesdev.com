<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=8434" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-07-09T12:58:52-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=8434</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-07-09T12:58:52-07:00</updated>
<published>2014-07-09T12:58:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130898#p130898</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130898#p130898"/>
<title type="html"><![CDATA[Re: Call graph]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130898#p130898"><![CDATA[
<div class="quotetitle">pops wrote:</div><div class="quotecontent"><br />Would it work on a project that hadn't been written for the ca65 assembler?<br /></div><br />The parser might need to be changed to work with NESASM or ASM6 or WLA syntax.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I have a tendency to leave my code uncommented - which means that figuring out how a given function works is difficult if I haven't worked on it in a month.<br /></div><br />Read about how to write effective javadoc style comments at the top of each subroutine, and you'll have a target to shoot for.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jul 09, 2014 12:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-07-09T11:06:42-07:00</updated>
<published>2014-07-09T11:06:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130888#p130888</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130888#p130888"/>
<title type="html"><![CDATA[Re: Call graph]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130888#p130888"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Dividing them in groups was enough to get a good idea on how the ROM would have to be organized.<br /></div><br />Good idea. I've taken a first stab at grouping things. First I grouped symbols referred to in only one place with their only caller, and from there I was able to find enough &quot;functional units&quot; to cut the graph roughly in half. I ended up finding a few places where I might need to reorganize the program itself for less coupling.<br /><br /><a href="http://pics.pineight.com/nes/thwaitecalls_grouped.png" class="postlink">http://pics.pineight.com/nes/thwaitecalls_grouped.png</a><br />(still 56K warning, but only about 9,000 pixels wide now)</div>That call graph is exceptionally cool! I could have used something like that when I was returning to work on the NES project I was working on during the spring. Would it work on a project that hadn't been written for the ca65 assembler?<br /><br />I have a tendency to leave my code uncommented - which means that figuring out how a given function works is difficult if I haven't worked on it in a month. This is doubly true with 6502 code. In order to figure out how everything worked together, I had to audit my code, practically line by line. <br /><br />Lesson learned: I now have comments on about 1/2 of the lines of code, and I've documented my data formats in tedious detail.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Wed Jul 09, 2014 11:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-07-08T10:18:39-07:00</updated>
<published>2014-07-08T10:18:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130834#p130834</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130834#p130834"/>
<title type="html"><![CDATA[Re: Call graph]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=130834#p130834"><![CDATA[
Someone in <a href="http://forums.nesdev.com/viewtopic.php?p=130791#p130791" class="postlink">another topic</a> requested the program I wrote to make these call graphs. It requires Python 2 and GraphViz.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jul 08, 2014 10:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-01-05T15:39:46-07:00</updated>
<published>2012-01-05T15:39:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=88487#p88487</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=88487#p88487"/>
<title type="html"><![CDATA[Re: Call graph]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=88487#p88487"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Dividing them in groups was enough to get a good idea on how the ROM would have to be organized.<br /></div><br />Good idea. I've taken a first stab at grouping things. First I grouped symbols referred to in only one place with their only caller, and from there I was able to find enough "functional units" to cut the graph roughly in half. I ended up finding a few places where I might need to reorganize the program itself for less coupling.<br /><br /><a href="http://pics.pineight.com/nes/thwaitecalls_grouped.png" class="postlink">http://pics.pineight.com/nes/thwaitecalls_grouped.png</a><br />(still 56K warning, but only about 9,000 pixels wide now)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Jan 05, 2012 3:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-12-28T16:41:53-07:00</updated>
<published>2011-12-28T16:41:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=88076#p88076</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=88076#p88076"/>
<title type="html"><![CDATA[Call graph]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=88076#p88076"><![CDATA[
For example, here's the call graph of Thwaite:<br /><a href="http://pics.pineight.com/nes/thwaitecalls.png" class="postlink">56K warning, and over 17,000 pixels wide</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Dec 28, 2011 4:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-12-22T18:39:43-07:00</updated>
<published>2011-12-22T18:39:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=87857#p87857</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=87857#p87857"/>
<title type="html"><![CDATA[Re: Call graph]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=87857#p87857"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />MMC1 has a quirk that the NMI handler can't save and restore the entire state of the mapper. Therefore, you usually want to make sure that everything the NMI handler needs is in the fixed bank or in RAM.<br /></div><br />This is one of the reasons I hate the MMC1. There are workarounds though... You could set a flag before bankswitching in the main thread, so that interrupts that also need to bankswitch can detect whether they interrupted a mapper write. In that case, they'd modify that flag and return to let the mapper operation finish, at which point the main thread would be able to detect what happened by checking the flag, and it could resume the interrupt. This is far from ideal though, and makes makes writes even slower than they already are on that mapper.<br /><br />As for call graphs, I don't know enough about them to tell if they're worth the trouble. I sure had to figure out a lot of inter-bank calls when designing my game, but I didn't need to analyze how every little routine was called... Dividing them in groups was enough to get a good idea on how the ROM would have to be organized.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Dec 22, 2011 6:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-12-22T11:51:58-07:00</updated>
<published>2011-12-22T11:51:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=87840#p87840</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=87840#p87840"/>
<title type="html"><![CDATA[Call graph]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8434&amp;p=87840#p87840"><![CDATA[
As programs grow in complexity, tools to manage this complexity become more and more useful. I'm working on a tool written in Python to generate a <a href="http://en.wikipedia.org/wiki/Call_graph" class="postlink">context-insensitive static call graph</a> of a ca65 program consisting of multiple translation units (.s files).<br /><br />A "far call" happens when a subroutine in one PRG bank calls a subroutine in another. On some mappers, especially MMC1, a far call takes quite a few cycles to complete, so you can't just toss a small, often-used subroutine in one bank and expect the rest of the program to far call it. And on mappers with 32 KiB PRG bank switching, you can't toss it in a fixed bank either, so you have to either A. duplicate it in all banks containing a subroutine that calls it or B. move all subroutines that call it to the same bank. You can get an idea for what to do based on the call graph.<br /><br />On a few mappers, the NMI handler needs special consideration. It can be thought of as a subroutine that every other subroutine in the program calls. Mappers with 32 KiB PRG bank switching need at least some of the NMI handler to be duplicated in each bank. MMC1 has a quirk that the NMI handler can't save and restore the entire state of the mapper. Therefore, you usually want to make sure that everything the NMI handler needs is in the fixed bank or in RAM. This becomes more difficult if your NMI handler runs the entire music engine. So you'd look at the call graph to see what the NMI handler is calling and what bank it needs to be in.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Dec 22, 2011 11:51 am</p><hr />
]]></content>
</entry>
</feed>