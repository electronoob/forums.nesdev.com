<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Emulator's main loop problem</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Emulator's main loop problem</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6852">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6852</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Mon Aug 16, 2010 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Emulator's main loop problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i've got some doubts about the emulator's main loop.
<br />
<br />i'm trying to render just the background of Balloon Fight. i know i have to execute 3 PPU cycles for each CPU cycle executed. in code:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CPUCycles = CyclesTable&#91;Opcode&#93;;<br />PPUCycles = CPUCycles * 3;</div>
<br />
<br />but what do i have to do in each PPU cycle? should i fetch background data from the name tables?
<br />
<br />by now, what i'm doing is start the emulation with rendering turned off (i mean with bit 8 of $2002 set). so i'm waiting for the rom to make a LDA $2002 to turn on the rendering. after the rendering is set, i fetch 32 * 30 tiles (wich is the entire background), render out those tiles, and then turn the rendering off again, so the emulator can continue executing opcodes.
<br />
<br />of course this routine is absolutely worng, because i'm drawing the entire background by fetching the tiles from single name table, and the rom can switch between the name tables to make the background.
<br />
<br />so i'm confused about when should i start fetching background tiles and when should i stop. should i always wait for the rom to turn off the rendering via LDA $2002 or shomething similar? or should i force the on/off status of the rendering every N number of cycles?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon Aug 16, 2010 6:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You don't force anything. The software controls whether or not rendering is enabled or not. What happens on each PPU Cycle depends on various things. It also depends on how you choose to emulate the system on what exactly you need to do. For very simple games (Donkey Kong, Donkey Kong Jr, Mario Bros (not Super), 1942) you can actually just render the entire background at once when scanline 240 finishes rendering. 
<br />
<br />But the basic idea is you always execute your 3 ppu cycles per 1 cpu cycle. There are usually 341 PPU cycles per scanline, and there are 240 active scanlines, 21 vblank scanlines, and 1 prerender for NTSC. I may be wrong on the numbers, it's been awhile and I didn't look up to confirm. 
<br />
<br />So depending on the scanline currently being rendered, and the PPU cycle within the scanline, you do different things. And it depends on if rendering is active or not. You render 1 pixel for each PPU cycle for PPU Cycles 1 - 256 of each scanline. Cycles 256 and up modify certain registers at certain times, and fetch certain data. There is alot of information in documents about this sort of thing I believe.
<br />
<br />Just remember that alot of games are pretty forgiving of inaccuracy, but there are some games that are pretty brutal if things aren't very accurate to the hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Mon Aug 16, 2010 7:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thanks in advance for your reply MottZilla.
<br />
<br />supose i'm using the per-frame rendering method (i guess it'll work for some simple games, once i get the basics i should be moving for a per-scanline method). so far, this is way i've understood i've got to proceed:
<br />
<br />* start with the rendering turned off and wait for the game to turn it on
<br />* render a complete frame
<br />* turn off the rendering
<br />* execute some game code keeping trace of the CPU cycles
<br />* since it's known that a frame occurs at a given number of cycles, once the CPU cycles counter exceeds that number i should turn on the rendering and show up the new frame
<br />
<br />am i proceeding right? i've tried that way but the background drawed weren't correct. maybe i'm not proceding right, maybe i'm reading from a wrong address.
<br />
<br />this is the code i get so far to render the background:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">private void DrawBackground&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;int X, Y;<br /><br />&nbsp; &nbsp;X = Y = 0;<br /><br />&nbsp; &nbsp;// 32x30 is the number of tiles showed up in the screen at the same time<br />&nbsp; &nbsp;for &#40;int k = 0; k &lt; 32 * 30; k++&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; if &#40;&#40;k &gt; 0&#41; &amp;&amp; &#40;k % 32 == 0&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Y += &#40;2 * 8&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;X = 0;<br />&nbsp; &nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; &nbsp; for &#40;int i = 0; i &lt; 8; i++&#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Fetch a name table entry<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;byte NameTableEntry = Data.VRAM&#91;NameTableAddr + i + k&#93;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Fetch the corrisponding Attribute Table entry<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;byte AttributeTableEntry = Data.VRAM&#91;NameTableAddr + 0x3c0 + i + k&#93;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Fetch a low-order byte of the tile<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;byte PatternTable_Low = Data.VRAM&#91;NameTableEntry + i&#93;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Fetch a high-order byte of the tile<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;byte PatternTable_High = Data.VRAM&#91;NameTableEntry + i + 8&#93;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Color FillColor;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bool&#91;&#93; TileBits = new bool&#91;16&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for &#40;int j = 0; j &lt; 8; j++&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Fetch the first color bit<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TileBits&#91;j&#93; = Convert.ToBoolean&#40;&#40;PatternTable_Low &gt;&gt; &#40;7 - j&#41;&#41; &amp; 0x1&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Fetch the second color bit<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TileBits&#91;j + 8&#93; = Convert.ToBoolean&#40;&#40;PatternTable_High &gt;&gt; &#40;7 - j&#41;&#41; &amp; 0x1&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Combine the color bits into a pallete index<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FillColor = Data.Pallete&#91;&#40;Convert.ToUInt16&#40;TileBits&#91;j + 8&#93;&#41; * 2&#41; + Convert.ToUInt16&#40;TileBits&#91;j&#93;&#41;&#93;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Surface Pixel = new Surface&#40;2, 2&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Pixel.Fill&#40;FillColor&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Blit the pixel into the screen buffer<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Screen.Blit&#40;Pixel, new Point&#40;X + j * 2, Y + i * 2&#41;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; &nbsp; X += &#40;2 * 8&#41;;<br /><br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;// Render the entire frame<br />&nbsp; &nbsp;Screen.Update&#40;&#41;;<br /><br />&nbsp; &nbsp;return;<br />&#125;</div>
<br />
<br />NameTableAddr -&gt; the Name Table base address
<br />TileBits -&gt; each one of the bits of a pattern table entry
<br />
<br />roughly coded in C# + SDL. note that i'm still not fetching the two upper color bits from the Attribute Table data, that's up to be done later.
<br />the rest of the code should be self explanatory, anyway feel free to ask.
<br />
<br />note that i'm just trying to draw the background, wich is the lowest point of the video emulation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Aug 17, 2010 1:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First off, you don't "turn off rendering" if you mean modifying the NES registers to turn it off. Only the game software should control if rendering is active. But remember, there is the emulated NES's "rendering" and your emulator's rendering. Two separate things.
<br />
<br />The thing I recommend you doing for now (you can improve and change this later) would be to execute 113 (or 114) CPU cycles, and then increase a Scanline variable. This way you can track what your emulated NES is doing video wise. So you can start at 0 and work your way up to 261 (giving you 262 scanlines). You could make scanlines 0 - 239 your "active" scanlines where the screen is being drawn. Then scanlines 240 - 260 are your VBlank scanlines where nothing is drawn, and the game will be informed its in VBlank by your emulator setting the Vertical Blank flag in register $2002 and also by executing a NMI interrupt on the CPU. On scanline 261 nothing needs to happen other than just letting time pass, letting the cpu execute cycles. 
<br />
<br />So what you can do then after this is after scanline 239 is done and you increase the counter to 240, you can set the VBlank flag in $2002, trigger your NMI, and execute your emulator's code to draw the screen/nametable/background. Assuming your CPU code is good and you implement the registers needed correctly you should be able to get simple games like Donkey Kong running and showing their backgrounds.
<br />
<br />By the way, this is a good way to start, by just drawing the background. And then later you can add decoding the Attribute Table so the backgrounds use the right colors. Then you can add Sprite rendering. After that simple games would be playable if you add input emulation. Then maybe you'll try adding scrolling. After that maybe you'll consider doing scanline rendering instead of full frame rendering. There is alot you can do but you should build up to it since I assume this is your first emulator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Tue Aug 17, 2010 4:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thank you very very much MottZilla, you've been as clear as water. on to code now!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Wed Aug 18, 2010 11:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />back again MotZilla. i tried to follow your advices, but i'm still having problems with the background rendering.
<br />
<br />i'll let my code explain it for me, since i consider it's self explanatory. my apologize in advance if someone considers that i'm being insulting by doing this. no intention to get pissed anybody. i'm not being lazzy, it's just sometimes it's not easy when you are a non-native english speaker. so "go take an english class" are going to be consider a constructive reply XD
<br />
<br />this is my emulator's main loop:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">while&#40;CPU_Running &#41;<br />&#123;<br />&nbsp; &nbsp; if&#40;Scanline &lt; 240&#41; // the active scanlines<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; RunScanline&#40;&#41;; // draw a single scanline<br />&nbsp; &nbsp; &nbsp; &nbsp; Scanline++; // increment the scanlines counter<br />&nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; else if&#40;Scanline &lt; 262&#41; // the VBlank scanlines<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; PPU_2002 |= 0x80; // tell the game we're in VBlank so it can execute code<br />&nbsp; &nbsp; &nbsp; &nbsp; Scanline++; // increment the scanlines counter<br />&nbsp; &nbsp; &nbsp; &nbsp; CyclesCPU -= 114; // decrement the CPU cc's counter<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; while&#40;CyclesCPU &lt;= 114&#41; // execute 114 CPU cc's<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OpCode = RAM&#91;PC&#93;; // fetch opcode<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EjecuarOpCode&#40;OpCode&#41;; // execute opcode<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CyclesCPU += CyclesTable&#91;OpCode&#93;; // increment the CPU cc's counter<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; else if&#40;Scanline == 262&#41;&nbsp; // if it's the last scanline, reset the scanlines counter<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; Scanline = 0;<br />&nbsp; &nbsp; &#125;<br />&#125;</div><br /><br />and this is my (so very basic) ppu engine:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void RunScanline&#40;&#41;<br />&#123;<br />&nbsp; &nbsp; int i, j, Y;<br />&nbsp; &nbsp; byte NT_Entry, PT_Entry_Low, PT_Entry_High;<br />&nbsp; &nbsp; word PT_Addr, NT_Addr;<br />&nbsp; &nbsp; byte ColorBit0, ColorBit1, ColorIndex;<br /><br />&nbsp; &nbsp; if&#40;Scanline == 0&#41; // the dummy scanline<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; // TODO. Nothing here yet...<br />&nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; else if&#40;&#40;Scanline &gt; 0 &#41; &amp;&amp; &#40;Scanline &lt;= 240&#41;&#41; // the active scanlines<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; switch&#40;READ_BIT&#40;PPU_2000,4&#41;&#41; // fetch base pattern table address<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0: PT_Addr = 0x0000; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 1: PT_Addr = 0x1000; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; switch&#40;PPU_2000 &amp; 0x3&#41; // fetch base name table address<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0: NT_Addr = 0x2000; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 1: NT_Addr = 0x2400; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 2: NT_Addr = 0x2800; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 3: NT_Addr = 0x2c00; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; for&#40;i = 0; i &lt; 32; i++&#41; // the basic background drawing loop<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NT_Entry = VRAM&#91;NT_Addr + i&#93;; // fetch tile number<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y = &#40;Scanline - 1&#41; % 8; // fetch tile byte-line number<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PT_Entry_Low = VRAM&#91;PT_Addr + &#40;NT_Entry * 16&#41; + Y&#93;; // fetch the lower sliver from the pattern table<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PT_Entry_High = VRAM&#91;PT_Addr + &#40;NT_Entry * 16&#41; + Y + 8&#93;; // fetch the upper sliver from the pattern table<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y++; // increment the tile byte-line number<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;j = 7; j &gt;= 0; j--&#41; // render the 1x8 pixel sliver of the tile<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ColorBit0 = READ_BIT&#40;PT_Entry_Low,j&#41;; // fetch the lower color bit<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ColorBit1 = READ_BIT&#40;PT_Entry_High,j&#41;; // fetch the upper color bit<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ColorIndex = &#40;ColorBit1 &lt;&lt; 1&#41; | ColorBit0; // combine the color bits into a pallete index<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; switch&#40;ColorIndex&#41; // render a single pixel<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0: putpixel&#40;screen,&#40;i * 8&#41; + &#40;&#40;j * &#40;-1&#41;&#41; + 7&#41;,Scanline - 1,COLOR_0&#41;; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 1: putpixel&#40;screen,&#40;i * 8&#41; + &#40;&#40;j * &#40;-1&#41;&#41; + 7&#41;,Scanline - 1,COLOR_1&#41;; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 2: putpixel&#40;screen,&#40;i * 8&#41; + &#40;&#40;j * &#40;-1&#41;&#41; + 7&#41;,Scanline - 1,COLOR_2&#41;; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 3: putpixel&#40;screen,&#40;i * 8&#41; + &#40;&#40;j * &#40;-1&#41;&#41; + 7&#41;,Scanline - 1,COLOR_3&#41;; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; return;<br />&#125;</div>
<br />
<br />as you can see, there's no attribute table data implementation yet.
<br />after that, this is what the screen shows up (the game is Donkey Kong Jr, but the i'm getting the same crappy results on every game):
<br />
<br /><img src="http://img64.imageshack.us/img64/7435/47310216.jpg" alt="Image" />
<br />
<br />and after a little while, that image turns into this one:
<br />
<br /><img src="http://img24.imageshack.us/img24/3474/31822826.jpg" alt="Image" />
<br />
<br />i tryed it by setting the register $2002 to 0 at startup, and by setting the bit #7 to 1, and by setting the bit #7 to 0, and there's no difference between one way or another. it shows the same images or either nothing.
<br />
<br />by the way, i'm setting the bit #7 of $2002 every time the game reads from it, as NESTECH says. also, there's no implementation of scrolling yet in my emu. maybe i'm too stupid but i really don't understand Loopy's document, wich seems has to very important. anyway, there's no scrolling in the game's background that i'm testing my emu with (at least in the title screen). or maybe i'm wrong? there's scrolling and that's way i'm not showing the tiles correctly?
<br />
<br />since all the tiles that comes up to screen are the same, it's clear that i'm not fetching the tile address correctly, or i'm fetching it in wrong a moment. also, i tried it by executing some game code for the first 20 scanlines before the program goes into the main loop, so it have enough time to modify the VRAM and set up the background, but nothing changed.
<br />
<br />this is getting me so frustrated... i'm spending hours and hours in coding, reading and changing things into my program, but all i'm getting is my head hitting the wall. oh lord have mercy! XD
<br />
<br />i'm not asking for code, i'm just looking for someone to shed some light here. any reply will be highly apreciated.
<br />
<br />peace out!
<br />
<br />EDIT: just in case, this is what FCEUXDSP Name Table viewer show:
<br />
<br /><img src="http://img340.imageshack.us/img340/6426/90167299.jpg" alt="Image" />
<br />
<br />so gues yeah... i'm totally fetching the tiles from anywhere but the VRAM <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamburgler</b> [ Thu Aug 19, 2010 7:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NT_Entry = VRAM&#91;NT_Addr + i&#93;; // fetch tile number </div><br />You're only drawing the topmost line's worth of tiles on every scanline.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NT_Entry = VRAM&#91;NT_Addr + &#40;&#40;scanline / 8&#41; * 32&#41; + i&#93;; // fetch tile number </div>
<br />It also looks like you may have a mirroring issue, or something else that's making you draw from the wrong page with all the '0' tiles.
<br />
<br />Try forcing all reads and writes to one nametable (0x2000) and see what that turns up for you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Thu Aug 19, 2010 11:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First up, the PPU $2002 VBlank flag is set ONCE. When VBlank begins, you set the flag. You do not continue to set the flag for every scanline in Vblank. Next, be sure that when the CPU reads $2002, that after you return the value, you CLEAR the VBlank flag. That is the correct behavior. 
<br />
<br />Next your main loop seems confusing to me. Are you executing CPU Cycles before drawing the line? Or are you even executing CPU Cycles for all scanlines and not just for VBlank scanlines?
<br />
<br />Next, you are setting the VBlank flag in $2002, that's good. But I see no mention of triggering a NMI interrupt. If you don't do this, you won't see anything but those 0 tiles and stuff like that. Be sure to properly implement the NMI interrupt before expecting games to do very much. 
<br />
<br />So I would do those things first. Then let us know if you still have problems after that or have questions about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Thu Aug 19, 2010 12:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hamburgler: thanks! didn't note that. my brain went fried last night! the results are still the same, but you we're right, i was reading always the topmost line of every tile <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> 
<br />
<br />MottZilla:
<br />
<br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">the PPU $2002 VBlank flag is set ONCE. When VBlank begins, you set the flag</div><br />dind't know that. so i guess it can be easily corrected like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if&#40;Scanline &lt; 240&#41; // the active scanlines<br />&#123;<br />&nbsp; &nbsp; RunScanline&#40;&#41;;<br />&nbsp; &nbsp; Scanline++;<br /><br />&nbsp; &nbsp; // and that's all... no manullay setting/resetting of the VBL flag<br /><br />&#125;<br />else if&#40;Scanline &lt; 262&#41; // the VBlank scanlines<br />&#123;<br />&nbsp; &nbsp; if&#40;Scanline == 240&#41; PPU_2002 |= 0x80; // manually set the VBL flag at start of VBlank<br /><br />&nbsp; &nbsp; // execute some game code here, but no manually handling<br />&nbsp; &nbsp; // of the VBL flag<br /><br />&#125;</div><br /><br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">be sure that when the CPU reads $2002, that after you return the value, you CLEAR the VBlank flag</div><br />yes, i'm reseting the VBL flag AFTER the read occurs and returning the correct value.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">tmp2002 = PPU_2002;<br />PPU_2002 &amp;= 0x7f;<br />return tmp2002;</div><br />so the behavior is right.<br /><br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">Are you executing CPU Cycles before drawing the line?</div><br />yes, that's what i'm doing. as you can see in the code, i'm firstly rendering the first 240 scanlines, and then execute code for the scanlines #240 to #262, wich are the VBlank ones.<br /><br />as for the NMI's, i've been reading about them but didn't know that we're indispensable in such a low point of rendering. sorry about that. so on NMI handling now...<br /><br />as far as i read, a NMI is triggered at the start of a new frame. since my main loop is scanline based, i should be triggering a NMI at the end of scanline #262. but bit #7 of $2000 is wich controls if the NMI is triggered or not when VBlank is reached, so i should be checking if it is set before i go into the NMI routine. therefore, the basics should be like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />else if&#40;Scanline == 262&#41;<br />&#123;<br />&nbsp; &nbsp; Scanline = 0; // reset scanline counter<br />&nbsp; &nbsp; TriggerNMI&#40;&#41;;<br />&#125;</div>
<br />
<br />am i being correct? sorry if my question is stupid, but there's a LOT of things involved here and sometimes i got confused :\

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Aug 19, 2010 12:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">comegordas wrote:</div><div class="quotecontent">as for the NMI's, i've been reading about them but didn't know that we're indispensable in such a low point of rendering.</div><br />Lots of games do all of their rendering in the NMI, and some have all of their code running inside the NMI, so if you don't emulate NMIs nothing will ever show up on the screen for those games.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">as far as i read, a NMI is triggered at the start of a new frame.</div>
<br />The NMI is triggered when VBlank starts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Fri Aug 20, 2010 11:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />well well well... spent last day reading 'n coding and finally got some good results.
<br />
<br />i've added a simply NMI implementation to my emu. what i'm doing is at scanline #240, when VBlank starts, i set $2002.7 to 1 so the game knows that VBlank has started. after that if $2000.7 is set, i push the PC and the status byte and go into the NMI routine. important: as i read, after push the status byte i've got to raise the interrupt flag status byte BEFORE i go into the NMI routine. is it ok? don't remember now in wich doc i read it (read that yesterday too late at night), but that was the only one doc wich mentioned that, that's why i'm asking.
<br />
<br />have a simply question now: assuming that the game setted $2000.7 to 0 (so no NMI will be triggered at start of VBlank) and i went into the NMI routine, do i have to force that bit to 1 at the END of VBlank, saying to the game that in the NEXT VBlank an NMI will be triggered if it doesn't disable it? i've tried setting and resseting that bit and worked for some games but not for others. maybe it's an opcode emulation problem, as i mention at the end of the post.
<br />
<br />finally, balloon fight gave me this beautiful image:
<br />
<br /><img src="http://img696.imageshack.us/img696/9785/balloon.gif" alt="Image" />
<br />
<br />donkey kong jr. wasn't bad at all...
<br />
<br /><img src="http://img814.imageshack.us/img814/6919/kong.gif" alt="Image" />
<br />
<br />...but 10 Yard Fight :\
<br />nothing showed up with this last rom. seems like the game falls into an infinite bucle, so probably is an opcode emulation problem.
<br />
<br />so i've to say THANKS to all the people here who helped me out. this is something i always wanted to do since i was 14 and started to learn programming. but there's a lot yet to do... <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 20, 2010 11:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">comegordas wrote:</div><div class="quotecontent">...but 10 Yard Fight :\<br />nothing showed up with this last rom. seems like the game falls into an infinite bucle</div><br />A lot of early NES games run entirely in the NMI handler, where the main thread is just<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">forever: jmp forever</div><br />Super Mario Bros. is the same way.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">so probably is an opcode emulation problem.</div>
<br />If you suspect CPU problems, the next step is probably to run nestest.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Aug 20, 2010 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Again, do not "force" bits. If the software disables NMI on VBlank, that's what happens. The game may intend for this to happen and if you force it to happen differently you may crash the game. 
<br />
<br />You should definitely run the NES CPU test rom next. It can spot potential problems with your CPU core which most likely you will have a few errors. Or maybe you have some addressing mode errors. These can be found or atleast get you pointed in the right direction by the test rom. 
<br />
<br /><!-- m --><a class="postlink" href="http://blargg.parodius.com/nes-tests/instr_test-v2.zip">http://blargg.parodius.com/nes-tests/instr_test-v2.zip</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Fri Aug 20, 2010 1:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ok thanks! let's test it! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>