<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=5854" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-02-03T21:37:50-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=5854</id>
<entry>
<author><name><![CDATA[Bavi_H]]></name></author>
<updated>2015-02-03T21:37:50-07:00</updated>
<published>2015-02-03T21:37:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=140550#p140550</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=140550#p140550"/>
<title type="html"><![CDATA[Re: the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=140550#p140550"><![CDATA[
Previously:<br /><ul><li>The Power Glove manual mentions <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5854&amp;start=45#p108715" class="postlink">&quot;special editing codes&quot;</a>, maybe pressing something between the first and second Enter press would do something?</li><li>The <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5854&amp;start=45#p133125" class="postlink">source code</a> for the Power Glove onboard processor executable code</li></ul><br />I immediately looked over the source code when it was posted, and it does suggest some editing abilities are available from the Power Glove's keypad. I had wanted to re-examine the code to make sure I didn't make any mistakes, but I haven't had time. For now, here are some notes from when I last looked at it (September 2014).<br /><br />In the descriptions below, n is a decimal digit, and x, y, and z are hexadecimal digits. [ ]* means you can press the enclosed sequence 0 or more times. To enter hexadecimal digits, use the following buttons:<br /><br />digit: A B C D E F<br />button: A B Left Up Down Right<br /><br /><br />Press Prog to enter the program mode. In the program mode, you can press:<br /><br /><blockquote style="margin-left: 1%; padding-left: 1%; border-left: 3px solid #555577;">n Enter<br />Load template n.<br /><br />n n Enter <br />Load template nn.<br /><br />A x Enter y y [z z]* Enter<br />Insert a gap of x bytes starting at offset yy in the template definition bytes, then begin overwriting with bytes zz.<br /><br />B x Enter y y [z z]* Enter<br />Delete x bytes starting at offset yy in the template definition bytes, then begin overwriting with bytes zz.</blockquote><br />You can press Prog to clear the last digit (or byte? need to check the code again to confirm).<br /><br />You can chain load and edit commands one after another. After your last command, press Enter a second time to exit the program mode.<br /><br />Also, you can press Prog Prog Prog to reset all. (That is, press Prog to enter programming mode, then Prog Prog to reset all.)<br /><br /><br />I may have made some mistakes interpreting the code. And we aren't sure if the code is the same as used on production units.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5902">Bavi_H</a> — Tue Feb 03, 2015 9:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2014-08-27T03:18:43-07:00</updated>
<published>2014-08-27T03:18:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133147#p133147</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133147#p133147"/>
<title type="html"><![CDATA[Re: the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133147#p133147"><![CDATA[
Pretty cool! The tools run fine in DOSBox.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Wed Aug 27, 2014 3:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2014-08-26T18:57:39-07:00</updated>
<published>2014-08-26T18:57:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133131#p133131</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133131#p133131"/>
<title type="html"><![CDATA[Re: the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133131#p133131"><![CDATA[
...and of course BATCAVE is the re-entry point to BATLOOP.  Makes perfect sense.  And ye gods this is well-commented.<br /><br />I have not experienced this much happy while reading ASM since digesting the Virtual Boy sacred scrolls  <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br /><div class="quotetitle">PG.MAC wrote:</div><div class="quotecontent"><br />; Set up upload pointers<br />;<br />BT:<br />LDA,[B]<br />RLCA; Locate bitmap of upload values in template<br />ANDA,#01E; mask all but gesture byte count<br />INCA; Add 2 for template header and logic byte<br />INCA; count <br />ADDA,#TEMPLATE<br />XA,B<br />LDA,[B+]; Save bitmap in GSTAT<br />XA,GSTAT1<br />LDA,[B+]<br />XA,GSTAT2; <br />; Build list of data addresses following logic in template<br />LDA,B; RAM address in B is transferred to X<br />PUSHA<br />XA,X; <br />POPA<br />XA,GBASE; Save pointer for upload routine to use<br /><br />LDCREG,#0; Initialize bit counter<br />BATLOOP:<br />LDA,CREG<br />JSRGBX; Get B pointer to GSTAT1 or 2 and A=bitmask<br />ANDA,[B]<br />IFNEA,#0<br />JPPUTONE<br />BATCAVE:<br />JSRINCREG; Increment CREG<br />IFNEA,#15; (value of CREG before incrementing) = 15 ?<br />JPBATLOOP<br /><br />LDA,#0FF<br />XA,[X]; Put FF marker at end of list<br />JMPZSTAT<br /><br />PUTONE:; Put a pointer in the table<br />LDA,CREG<br />ADDA,#L(IATABLE)<br />LAID<br />XA,[X+]<br />JPBATCAVE<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Tue Aug 26, 2014 6:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2014-08-27T18:50:03-07:00</updated>
<published>2014-08-26T18:13:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133125#p133125</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133125#p133125"/>
<title type="html"><![CDATA[Re: the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=133125#p133125"><![CDATA[
<strong><span style="font-size: 200%; line-height: normal">BIG AND I MEAN HUGE NEWS</span></strong><br />When poking around for resources on the Miracle Piano, I stumbled across the website of Paul White, one of the retired original engineers on the Miracle and Power Glove.  After striking up a conversation, he was willing to share the recollections and resources he had accumulated.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The power glove used a special control script to convert various gestures into Nintendo button presses.  I think you would punch in the appropriate code on the PG keypad to select the gesture template for the game you wanted to play.  The PG to Nintendo interface was simple, like a button controller, so standard games would work without modification.  As I see you know, there was also the raw mode, where special software on the Nintendo side could read the various glove parameters directly.<br /></div><br /><br />Of course, that isn't too new.  What is new and merits a big, long, <br /><span style="font-size: 150%; line-height: normal">drumrollllllllllllllllll....</span><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I found some nice Power Glove information for you.  The source code and<br />various utilities are available here:<br /><br />[attached to post]<br /><br />The PG uses a National Semiconductor COP888 microcontroller.<br />You may be able to find info about the assembly language syntax on the<br />web.  If not, I may still have some data books around somewhere.<br /><br />I haven't tried running the NGL.EXE program, but I seem to recall it has<br />something to do with generating gesture templates, or some such.<br /></div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />ASM888.EXE COP888 assembler<br />HEXLM.EXE Hex to Load Module utility<br />LMHEX.EXE Load Module to Hex utility<br />NGL.EXE Nintendo Glove Language utility ?<br />PG.MAC Main Power Glove source<br />PGCON.INC Power Glove constants<br />PGMEM.INC Power Glove memory definitions<br />PGTEMPL.INC Power Glove template include file<br />COP888.INC COP888 header file<br /></div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Most of the assembly code is pretty straightforward reading, with the possible exception of the &quot;X&quot; command.  As I recall, the COP processor doesn't have a STORE command as such, but it does have an eXchange command that swaps the accumulator with the specified memory location.<br /><br />Unfortunately I don't have copies of the PG schematic, because it wasn't created on my computer.  I think I must have worked from a printed copy, which I no longer have.  There are references in the code to some &quot;high voltage&quot; stuff.  There was an output pin connected to an inductor/diode/capacitor circuit, and it had to be pulsed periodically to generate a high voltage for the piezoelectric ultrasonic beepers.  They needed a fairly high voltage to get loud enough to provide a reasonable range.  You can probably figure out the rest.<br /></div><br /><br />Yes, to all initial indications, this is <span style="font-size: 150%; line-height: normal">THE SOURCE TO THE EXECUTABLE CODE EMBEDDED ON THE ONBOARD PROCESSOR OF THE POWER GLOVE</span>.  I say &quot;to all initial indications&quot; because I don't have time right now to fully investigate, but the source and comments look believable, and if it is, this is huge and ought to crack the whole apparatus wide open to proper emulation.<br /><br />* editorial note: being in software development myself, I could easily see how this might be an earlier or later version than actually ended up on the Glove if it's just the copy that Paul dropped on a floppy for his own collection.  Still, it's NaN% more than I think we've ever had to work with, and odds are since he did the actual coding and had his hands on the source most readily, even <em>if</em> it isn't the shipped build, it's pretty darn close and ought to at least be concretely testable against actual Glove behavior.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Tue Aug 26, 2014 6:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[slobu]]></name></author>
<updated>2013-04-09T13:22:46-07:00</updated>
<published>2013-04-09T13:22:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=110735#p110735</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=110735#p110735"/>
<title type="html"><![CDATA[Re: the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=110735#p110735"><![CDATA[
Seems to me the boys that played with VR and attaching the PowerGlove to the PC par. port would have figured out the mysteries.  I wonder if any good FAQs still exist from those days..<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4942">slobu</a> — Tue Apr 09, 2013 1:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2013-04-06T10:28:49-07:00</updated>
<published>2013-04-06T10:28:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=110631#p110631</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=110631#p110631"/>
<title type="html"><![CDATA[Re: the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=110631#p110631"><![CDATA[
Yeah... I haven't done much with the PowerGlove recently from a research standpoint, although there will be a new release of Nesglovphone with one or two new features as soon as I get around to doing a demo recording.  These days, if anything, my focus is shifting to Virtual Boy ( <!-- m --><a class="postlink" href="http://www.planetvb.com/content/downloads/documents/stsvb.html">http://www.planetvb.com/content/downloa ... stsvb.html</a><!-- m --> ), but that's a discussion for another thread.<br /><br />But so far as I remember, the bottleneck is not so much on sending the data- you can poll it to your heart's content just like any input device- the glove's internals simply can't build new packets instantaneously, so if you ask it to put a lit of data in the packet, you need to give it sufficient time to get ready.  If you want it to be ready faster, ask for fewer data fields.  I have no recollection of how/whether there was a &quot;ready&quot; byte and I'm too lazy to review the whole thread, but it would make a lot of sense if one does exist, and if so, yes, the process would be along the lines of: read header/ready byte -&gt; check &quot;ready&quot; state -&gt; if ready, read more (data packet) bytes.<br /><br />I could conceive of alternate explanations for needing to press Enter twice to change programs- early digital state machine systems were not always the prettiest hacks- but the notion of user-programmability is intriguing.  There is, with certainty, some small microcontroller in the glove, and my experiments with initialization codes seemed to suggest that there were swaths of data in there not necessarily related to normal intended operation.  The riddle which may never be answered is whether the raw data &quot;modes&quot; I discovered were intentional-but-not-yet-documented, or simply artifacts of deterministic program/junk data that was never intended to be indexed into.  That might help clear up whether &quot;programming&quot; modes via the keypad were a fully flexible specification system, or just a hypothetical back-door to get at similar deterministic alternate behavior that wouldn't be worth documenting until someone wanted/needed it.<br /><br />As to repair, I now have 2 Gloves (the one that came with my full setup, and a second which, in isolation, had likely long since been relegated to a costume prop), but I'm still not brave enough to do a teardown until one fails so absolutely that I can't use it for anything else.  The sensors are some manner of thin sheet laminated into the rubber fingers of the glove, so repairing/replacing them would be impossible without destroying the glove as-such (which is not to say that after surgery, you might not find another fabric glove to bond the electronics back onto).  The access screws for the rectangular block on the glove (the &quot;gamepad&quot;/keyboard) are accessible enough, but that's not where the flex sensor leads likely originate, and the screws to get into the oblong emitter nodule (assuming it's not just glued together) are on the far side of the glove fabric.  I'm pretty sure I've seen a few pics of both sets of internals, but didn't glean any earth-shakingly useful information from them at the time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Sat Apr 06, 2013 10:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bavi_H]]></name></author>
<updated>2013-03-03T02:37:34-07:00</updated>
<published>2013-03-03T02:37:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=108715#p108715</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=108715#p108715"/>
<title type="html"><![CDATA[Re: the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=108715#p108715"><![CDATA[
I don't have a Power Glove, but was reading about it today, and found the technical information in this thread very interesting.<br /><br />One additional thing I'm interested in is if it's possible to manually enter advanced programs on the glove's keypad.<br /><br />In the <a href="http://www.8-bitcentral.com/nintendo/powerGloveManual.html" class="postlink">Power Glove manual</a>, the Problems and Solutions (page 34) says (emphasis mine):<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />P: I would like to use different motions with the game I am playing.<br />S: The glove comes with 14 different programs, each with different moves. [...] Special games like Bad Street Brawler have more programs on them. <strong>There will also be special &quot;editing&quot; codes published in magazines for more games.</strong><br /></div><br />This makes it sound like advanced programs could be manually entered on the glove keypad.<br /><br />I think it is unusual the glove requires you to press ENTER twice to load a program. Wouldn't one ENTER press suffice? I suspect there's a hidden reason two ENTER presses are required. Perhaps you are able to enter advanced programming steps after the first ENTER press and the second ENTER press finally ends the programming mode.<br /><br />Perhaps someone with a Power Glove would be interested in testing if undocumented key sequences in the programming mode have any effect...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5902">Bavi_H</a> — Sun Mar 03, 2013 2:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2012-06-25T18:32:20-07:00</updated>
<published>2012-06-25T18:32:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=96039#p96039</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=96039#p96039"/>
<title type="html"><![CDATA[the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=96039#p96039"><![CDATA[
Less than 3 frames? No, I think the latest info was 4 frames, and sometimes 3 frames (see <!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?p=92301#92301">http://nesdev.com/bbs/viewtopi ... 2301#92301</a><!-- m -->) the only later news was that there is the "ready byte", if you are polling it once per frame then you should get the possible rate, without getting into unstable situations. If 3 or 4 frames is too slow for your purposes - you could try to poll it more than once per frame; and maybe receive data every 2.5 or 3.5 frames.<br /><br />No idea if it's possible to repair the flex sensors, how they do look like, and if one can buy replacement parts. Is it difficult to disassemble them?<br />If they are actually broken then you are probably in trouble - soldering would probably melt them, and conductive silver would probably break as soon as you flex the fingers. If you are lucky, then it's just a dirty contact between the wire &amp; sensor.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Mon Jun 25, 2012 6:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Roni]]></name></author>
<updated>2012-06-19T22:31:25-07:00</updated>
<published>2012-06-19T22:31:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95692#p95692</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95692#p95692"/>
<title type="html"><![CDATA[the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95692#p95692"><![CDATA[
Well it seems that the power glove does have ring finger control, in addition to thumb, index and middle fingers, but the middle one on mine is broken. (no response, FingersByte bits 2-3 stuck at "10")<br /><br />It's probably likeky that the flex sensor in these gloves degrades over time or was just fragile. I wonder if it can be repaired.<br /><br />So what's the verdict on the reads? Has it been determined if the glove can send a full packet of reliable data in less than three NTSC frames?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3693">Roni</a> — Tue Jun 19, 2012 10:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2012-06-11T20:49:04-07:00</updated>
<published>2012-06-11T20:49:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95385#p95385</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95385#p95385"/>
<title type="html"><![CDATA[the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95385#p95385"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />one pin could very easily control all LEDs if the LED state is determined on the microcontroller.<br /></div><br />The shift register (on the LED board) needs Data and Clk (two pins). <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If anything, it might make sense if the LEDs reflected every single byte of data output by the glove to the NES, not just one particular "final" field.<br /></div><br />Yes, exactly. Just what I was saying. But you would barely see them (blinking only for very short moments), so only the final ones (which last for longer time) should be visible.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That's closer to the actual appearance of the LEDs. Very rarely is one lamp ever solidly illuminated in raw mode; I've only ever seen a combination of solid and flicker when I've gotten into really unorthodox configurations with more static garbage fields than dynamic data.<br /></div><br />What's with the Super Glove Ball game? That should be the normal/official case... I couldn't find any videos or descriptions how it should look like.<br /><br />But I would stay with my theory: The two button LEDs should be flimmering, the four direction LEDs should be off - unless you cover the speakers/microphones, then some of the direction LEDs should flimmer, too (in respect to the lower 4 occlusion bits).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />it would probably be easy enough to look at the traces on the junction PCB to see if blue/green share any connections with the to-NES port or figure out where yellow/orange/pink go.<br /></div><br />What traces? You've uploaded only component side photos. But, following traces on photos would be a pain anyways (easiest would be using a multimeter to check for 0 ohm connections).<br /><br />Yeah, having a glove at hand would be nice... and the NES CompuTrainer from RacerMate... and all the other odd NES controllers. But I don't have the money and storage to buy all that stuff.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Mon Jun 11, 2012 8:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2012-06-10T14:23:00-07:00</updated>
<published>2012-06-10T14:23:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95284#p95284</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95284#p95284"/>
<title type="html"><![CDATA[the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=95284#p95284"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />For the microphones, I'd have expected 3 inputs (though Tim has listed only two pins going to "near receivers") (but I'd guess there might be one more microphone pin somewhere).<br /></div><br />If they're going to the LM324s in the junction box proper, those receiver pins may be the serial send/receive pins for communication with the NES.  This also makes sense because the WR# write pin is reported as tying directly to a LM324 pin, while the RD# read pin is reported as tying to likely some Resistor/Capacitor buffer before entering digital world.  The COP888 does have direct serial I/O capacity.  And in fact, certain write-ups describe that particular series of chips as being pathologically serial, even in the way it reads instructions from its own internal ROM.<br /><br />I also have some doubts that the designers would have necessarily allocated pins for all 3 mics and 2 speakers in parallel given that they only need one speaker/mic pair at a time.  I'd suspect the speakers are in the "from top of glove" pin set (in fact... XMTR is probably [trans]MiTteR).  The microphones are a little bit of a puzzle, but one which may be illuminated if we ask why 8 op-amp 'gates' are needed for 2, or at most 3, lines communicating with the NES, particularly when each mic PCB has its own dual op-amp chip.  My analog EE is very rusty, but I could see a possibility of them hacking together a primitive multiplexor or delay circuit to serialize the mic returns if there's no obvious parallel pin set on the COP888.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The whole NES data, LED data, and MICrophone data is squeezed through the 9pin connector on the junction box: Two pins for VCC and GND, three pins for NES connector, and presumably three pins for the microphones. That would would leave only 1 spare pin. Should be pretty impossible to control the six LEDs through that 1 spare pin...<br /></div><br />I have seen no indication that the LEDs are programmer-accessible; read or write.  They seem to be automatically operated.  But with the serial-to-parallel chip boxed in on the LED PCB, one pin could very easily control all LEDs if the LED state is determined on the microcontroller.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />With "Error Flags" I meant you "occlusion" byte, which would be the last byte transferred (If you are doing it the way as Super Glove Ball). So, in analog mode the LED bits should blink between 3Fh (1 frame; no errors) and FFh (2 frames, not ready).<br /><br />Bit0-3 of that value would be the four "direction-LEDs", bit4-5 would be "start/select" (which have no LEDs), and bit 6-7 would be the two "button LEDs".<br /><br />So, with the 3Fh/FFh values, the upper four LEDs should glow permanently, and lower two LEDs should flimmer (which may look as they are dimmed to medium brightness). At least, I'd think that it'd look like so in Glove Ball. EDIT: Or more likely vice-versa: FFh=All LEDs OFF, 3Fh=Lower 2 LEDs ON.<br /><br />During the transfer, all LEDs would blink more or less "randomly" while new data is shifted-in, but that should occur only for very short moments, probably one won't see that at all.<br /></div><br /><br />If anything, it might make sense if the LEDs reflected <em>every single byte</em> of data output by the glove to the NES, not just one particular "final" field.  That's closer to the actual appearance of the LEDs. Very rarely is one lamp ever solidly illuminated in raw mode; I've only ever seen a combination of solid and flicker when I've gotten into really unorthodox configurations with more static garbage fields than dynamic data.<br /><br />But if the glove's output packets are splitting off to drive the LEDs, that's even more evidence that the output packets are serialized by the time they hit the junction box, as nothing in the junction box or frame would serialize the data prior to the LED serial-to-parallel chip.<br /><br />Reexamining my photos, it's fairly clear that the wiring through the frame is<br /><br />Box 1:<br />- Hot (red)<br />- Ground (black)<br />- Mic1 data (brown)<br /><br />Box2:<br />- all Box1<br />+ Mic2 data (gray)<br />+ LED data+clock (green/blue)<br /><br />Box3:<br />- all Box1<br />- all Box2<br />+ Mic3 data (mic data likely recolored yellow/orange/pink on exit; not sure which is which without re-opening the box and looking at the trace side)<br /><br />From there, it would probably be easy enough to look at the traces on the junction PCB to see if blue/green share any connections with the to-NES port or figure out where yellow/orange/pink go.  I may try that at some point, but it sounds like you could really stand to get your own glove <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Sun Jun 10, 2012 2:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2012-06-02T23:29:52-07:00</updated>
<published>2012-06-02T23:29:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94964#p94964</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94964#p94964"/>
<title type="html"><![CDATA[the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94964#p94964"><![CDATA[
Many thanks for uploading the photos!<br /><br />Yes, the COP should be 44pin SMD chip on the control-pad board; since it's SMD, one can't see solder pads on the PCB-back-side photo that I've found.<br /><br />As how I understand the COP pinouts: The microwire feature is used to receive serial data from NES. And in the opposite direction, the 4021 parallel-in serial-out shift register is used to send serial data to NES.<br /><br />And there's a 8x3 keyboard matrix; 3 outputs, and 8 inputs; ie. the thing outputs a LOW level on one row, and checks if any column inputs go LOW (=button is pressed). The pull-ups are just there to drag the columns HIGH if the button isn't pressed (so there's just logic LOW and HIGH on that pins, no analog stuff).<br /><br />For the microphones, I'd have expected 3 inputs (though Tim has listed only two pins going to "near receivers") (but I'd guess there might be one more microphone pin somewhere).<br /><br />The whole NES data, LED data, and MICrophone data is squeezed through the 9pin connector on the junction box: Two pins for VCC and GND, three pins for NES connector, and presumably three pins for the microphones. That would would leave only 1 spare pin. Should be pretty impossible to control the six LEDs through that 1 spare pin...<br /><br />That's why I was suggesting that 4021 shift-register (and the wires in the cable) are shared for both COP-to-NES and COP-to-LED. So, the 4021's serial-output is wired both to NES, and to the 74LS165's serial-input on the LED board (and the 74LS165's parallel output then wired to the LEDs).<br /><br />With "Error Flags" I meant you "occlusion" byte, which would be the last byte transferred (If you are doing it the way as Super Glove Ball). So, in analog mode the LED bits should blink between 3Fh (1 frame; no errors) and FFh (2 frames, not ready).<br /><br />Bit0-3 of that value would be the four "direction-LEDs", bit4-5 would be "start/select" (which have no LEDs), and bit 6-7 would be the two "button LEDs".<br /><br />So, with the 3Fh/FFh values, the upper four LEDs should glow permanently, and lower two LEDs should flimmer (which may look as they are dimmed to medium brightness). At least, I'd think that it'd look like so in Glove Ball. EDIT: Or more likely vice-versa: FFh=All LEDs OFF, 3Fh=Lower 2 LEDs ON.<br /><br />During the transfer, all LEDs would blink more or less "randomly" while new data is shifted-in, but that should occur only for very short moments, probably one won't see that at all.<br /><br />Ah, okay, didn't knew that 3rd OBJ was intended for in your test program. I don't have transfer "timeouts" yet emulated, so packets in my emu doesn't run in sync with the test program - which caused the 3rd OBJ to jump randomly. Sorry for the confusion.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Sat Jun 02, 2012 11:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2012-06-02T19:40:30-07:00</updated>
<published>2012-06-02T19:40:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94952#p94952</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94952#p94952"/>
<title type="html"><![CDATA[the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94952#p94952"><![CDATA[
<div class="quotetitle">nocash wrote:</div><div class="quotecontent"><br />PCB at the front of the glove (on the hand): <!-- m --><a class="postlink" href="http://www.instructables.com/files/deriv/FOZ/BKA3/FT17YOV5/FOZBKA3FT17YOV5.LARGE.jpg">http://www.instructables.com/files/deri ... .LARGE.jpg</a><!-- m --> (component side), and <!-- m --><a class="postlink" href="http://www.instructables.com/files/deriv/F2S/ZDBG/FT17VT0N/F2SZDBGFT17VT0N.LARGE.jpg">http://www.instructables.com/files/deri ... .LARGE.jpg</a><!-- m --> (solder side). The two speakers seem to be the round black things above index finder and little finger. And, there seems to be a third speaker glued to the middle of the casing; I guess that's where the "beep" sounds are coming from.<br /><br />PCB for the button part (on the arm): <!-- m --><a class="postlink" href="http://www.instructables.com/files/deriv/FWB/0JZC/FT1816N4/FWB0JZCFT1816N4.LARGE.jpg">http://www.instructables.com/files/deri ... .LARGE.jpg</a><!-- m --> (showing a fragment of the solder side only). Not much seen there, judging from the solder pads, it doesn't look as if there's a CPU on the component side (unless it'd be a SMD chip). So far, I'd guess that the CPU is located in that mysterious "junction box" (the small box that most photographers never mind taking pictures of when they are posing with their glove).<br /></div><br /><br />Okay.  So the brain isn't in the front of the glove, and it's not in the controller part of the glove (unless it's the IC evident on the reverse side of that PCB).  Which leaves the box-shaped things.  And box-shaped things with easily accessible screws aren't as bad to open.  <br /><br />I opened up the junction box (first box off the short lead to the NES plug) and the brain isn't there.  Just some resistors and a couple "ST" brand LM324N A935 ICs which, without bothering to look them up because I'm lazy, I'd guess would be some manner of shift-register or serialization controller.  (EDIT: nope.  It's a quad op-amp. - <!-- m --><a class="postlink" href="http://www.datasheetcatalog.com/datasheets_pdf/L/M/3/2/LM324N.shtml">http://www.datasheetcatalog.com/datashe ... 324N.shtml</a><!-- m -->) <!-- m --><a class="postlink" href="http://www.psychsoftware.org/stuff/temp/photo/PowerGlove/P6020329.JPG">http://www.psychsoftware.org/stuff/temp ... 020329.JPG</a><!-- m --><br /><br />Which leaves the boxes in the frame.  Frame box #1 (literally, they have numbers: 1, 2, 3) contains a minimalist PCB with one tiny Texas Instruments TL062CP 939EB (EDIT: another op-amp - <!-- m --><a class="postlink" href="http://www.datasheetcatalog.com/datasheets_pdf/T/L/0/6/TL062CP.shtml">http://www.datasheetcatalog.com/datashe ... 62CP.shtml</a><!-- m -->). <!-- m --><a class="postlink" href="http://www.psychsoftware.org/stuff/temp/photo/PowerGlove/P6020330.JPG">http://www.psychsoftware.org/stuff/temp ... 020330.JPG</a><!-- m -->  Ditto on box #3 (out of order only because it was more accessible than the corner), which also has the main wire harness out to the Junction Box.  <!-- m --><a class="postlink" href="http://www.psychsoftware.org/stuff/temp/photo/PowerGlove/P6020331.JPG">http://www.psychsoftware.org/stuff/temp ... 020331.JPG</a><!-- m --><br />Box 2 has 2 boards- a clone of #1/#3, and the LED board containing a somewhat prominent Texas Instruments / MALAYSIA 8935AS SN74LS164N.  Which still doesn't look big enough to be a proper CPU.  (EDIT: THIS is a shift-register.  Serial-in-parallel-out shift reg, precisely, meaning it's probably taking a bitstream in and using it to drive all the LEDs at once - <!-- m --><a class="postlink" href="http://www.datasheetcatalog.com/datasheets_pdf/S/N/7/4/SN74LS164N.shtml">http://www.datasheetcatalog.com/datashe ... 164N.shtml</a><!-- m -->) <!-- m --><a class="postlink" href="http://www.psychsoftware.org/stuff/temp/photo/PowerGlove/P6020332.JPG">http://www.psychsoftware.org/stuff/temp ... 020332.JPG</a><!-- m --><br /><br />Save copies of the photos if you want them; I'm not going to guarantee perma-hosting, at least not in that location.<br /><br />There's certainly nothing big enough to be a cop888 in any of those locations.  I seem to recall reading somewhere that the brain chip was indeed in the glove, which may mean it is on the backside of the D-pad PCB.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Sat Jun 02, 2012 7:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2012-06-02T18:42:18-07:00</updated>
<published>2012-06-02T18:42:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94949#p94949</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94949#p94949"/>
<title type="html"><![CDATA[the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94949#p94949"><![CDATA[
I'm sure nocash has already done this as well, but... yeh.  The ALU opcodes in the cop888 seem to have no alignment any which way to the behaviors he's documented for the 8 and 16-bit instructions.  Which, sadly, means there's probably some internal ROM being run that takes the data and parses it out as a sort of meta code set.  And really, with so many bits seeming to correspond to raw data parameters, there wasn't much room at all for them to be proper CPU opcodes <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />And speaking of opcodes and programming... ugh.  I can see why reading whatever <em>is</em> there would be a pain.  Looks like the only way in or out of this chip for bulk data transfer is the MICROWIRE/PLUS bus which, at a very high level, looks to be an 8-bit-at-a-time automatic serial protocol.  Very nice, presumably, when dealing with data from a shift register, but not set up for a good old-fashioned address-&gt;data query.  For that matter, indications seem to point to the ROM being on-board and not even accessible directly to the program running within it- all opcodes resolve to an independent data-space address map.  Allegedly chunks of ROM can be transferred to data RAM, but to do that you'd presumably need to be running your own code in the ROM to begin with.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Sat Jun 02, 2012 6:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-06-02T16:25:29-07:00</updated>
<published>2012-06-02T16:25:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94948#p94948</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94948#p94948"/>
<title type="html"><![CDATA[the Power Glove]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5854&amp;p=94948#p94948"><![CDATA[
<div class="quotetitle">LoneKiltedNinja wrote:</div><div class="quotecontent"><br />What I was previously identifying as "program modes" were almost certainly the glove getting malformed packets of increasing insufficiency, and thus reading increasingly further into some internal memory bank and treating that cold-start garbage as opcode.  But as soon as I start sending well-formed packets, even using the data from the malformed ones as a starting point, the glove goes into more or less its canonical raw operation.<br /></div><br />Once we figure out more about the glove's operation, this might end up being the beginning of a way to dump the internal ROM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I develop on Mac, so I work against Nestopia which is highly accurate but has no debugger.<br /></div><br />FCEUX for Windows works without sound in Wine for Ubuntu. Does FCEUX for Windows work in Wine for Intel Mac?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />My first suspicion was overrunning vblank or not zeroing $2003, but what ended up solving the problem was changing which sprite indices I used.  Which is frustrating, but leads me to think it might be an issue with the PowerPak devcart, which does claim to give some games sprite issues (and gives other games other issues which it doesn't even claim).<br /></div><br />If you turn off rendering early at the wrong time, you might get problems with some sprites overwriting other sprites. I had issues with LJ65 on my PowerPak, and others had the same issues on their real hardware, until blargg figured out that turning off rendering early is safest just <em>before</em> hblank on a scanline with no sprites.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jun 02, 2012 4:25 pm</p><hr />
]]></content>
</entry>
</feed>