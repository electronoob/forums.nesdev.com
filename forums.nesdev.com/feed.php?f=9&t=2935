<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=2935" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-02-11T07:51:03-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=2935</id>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2007-02-11T07:51:03-07:00</updated>
<published>2007-02-11T07:51:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21919#p21919</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21919#p21919"/>
<title type="html"><![CDATA[Simulating the MMC1 with a PAL 22V10 ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21919#p21919"><![CDATA[
I'm not sure, it's hard to tell from just the pictures (too lazy to read it all) but each flip flop's clock is made by a product term like a CPLD so it will surely work for your registers. I think you might be able to do it since not all macrocells are tied to outputs unlike SPLD.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sun Feb 11, 2007 7:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-02-11T02:22:02-07:00</updated>
<published>2007-02-11T02:22:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21918#p21918</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21918#p21918"/>
<title type="html"><![CDATA[Simulating the MMC1 with a PAL 22V10 ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21918#p21918"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It seems a great deal more complex, but there's only one output stage still. CPLD are as if 10+ 22V10s were interconnected and each flip flop had it's own clock.<br /></div><br />That rocks all the way !!<br />I think an external shift register and write counter can be done, and leave all the rest to that chip, or am I wrong ? The chip claims there is 20 flip-flops, exactly the numbers the MMC1 needs aside of the shift register and write counter. Then it would be 3 chips : 74164, 74161 and Atmel chip. Wow !<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Feb 11, 2007 2:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2007-02-10T18:41:42-07:00</updated>
<published>2007-02-10T18:41:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21915#p21915</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21915#p21915"/>
<title type="html"><![CDATA[Simulating the MMC1 with a PAL 22V10 ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21915#p21915"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />The chip was done so that you could tie it's inputs and outputs together externally to make one pin have more complex sequencial logic than just one latch, right ?<br /></div><br />It seems a great deal more complex, but there's only one output stage still. CPLD are as if 10+ 22V10s were interconnected and each flip flop had it's own clock.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I think the a way to do it is to manually simplify the thing examintating all possiblities (with Karnaugh maps) and then enter the result logic in your PLD. There is only 4 mirroring configuration possible, that makes a 6 input karnaugh map (heavy !) but it will siplify a lot.<br /></div><br />I have simplified it; it still requires two OR gates which means two I/O, not not a big deal but when trying to do combinatorial logic on register outputs, turning 10 outputs into 5 is a big deal.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The chip was done so that you could tie it's inputs and outputs together externally to make one pin have more complex sequencial logic than just one latch, right ?<br /></div><br />You don't need to do it externally, you can just leave the output disconnected and tie it's feedback to any product term. Every output is fed back into the array automatically, it's your choice whether or not to use it. If you had to feed it back externally, that would reduce "real" I/O by 3 when doing combinatorial on registers o_0;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sat Feb 10, 2007 6:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-02-10T14:10:18-07:00</updated>
<published>2007-02-10T14:10:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21912#p21912</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21912#p21912"/>
<title type="html"><![CDATA[Simulating the MMC1 with a PAL 22V10 ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21912#p21912"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I have never used any Atmel PLD so I don't know.<br /></div><br />The Atmel ATF750C also comes in a DIP24 packages (just like a GAL22V10), but it claims to be more complex. I don't understand much to <a href="http://www.alldatasheet.com/semiconductor/electronic_components/datasheet/90551/ATMEL/ATF750C.html" class="postlink">it's datasheet</a>, tough (now I think I finally understand how PALs works and that is disapointingly simple).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />These do not come in DIP packages<br /></div> Well, I really want it to be in a DIP package so that it can be easily programmed by an external device (I'm not making it in-circuit programmable).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Please look at a internal diagram of the 22V10, the flipflop can either be output as the last stage or fed back to the array. If you desire to preform functions on the flip flop's output, you must feed it back into the array and output the combinatorial result on another pin which reduces the outputs by half.<br /></div><br />Okay, I think I understand that pretty much. The chip was done so that you could tie it's inputs and outputs together externally to make one pin have more complex sequencial logic than just one latch, right ?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There is more difficulty however when cascading MUXes (for mirroring) because each I/O has only one SOP term, this will make you again feed your output back to the array.<br /></div><br />I think the a way to do it is to manually simplify the thing examintating all possiblities (with Karnaugh maps) and then enter the result logic in your PLD. There is only 4 mirroring configuration possible, that makes a 6 input karnaugh map (heavy !) but it will siplify a lot.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />For MMC1 you need a clock for the shift register and write counter, and 4 separate clocks for the registers, for those parts alone that's 6 PLD<br /></div><br />I think a single 74139 can handle all those clocks. I think something using 74164 (shift register)+74139 (clock &amp; register adress decoder) + 74161 (write counter)+4x74378 (registers in question : wasting so much chip for these is really a lame) + Atmel PLD should do, that makes 8 chips (blah... I'd like to see it reducted to 3 chips or something...)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Feb 10, 2007 2:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2007-02-10T11:59:07-07:00</updated>
<published>2007-02-10T11:59:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21911#p21911</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21911#p21911"/>
<title type="html"><![CDATA[Simulating the MMC1 with a PAL 22V10 ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21911#p21911"><![CDATA[
I have never used any Atmel PLD so I don't know. If you really want to make a true MMC1 on one chip, I would choose a cheap CPLD by Xilinx or Altera. These do not come in DIP packages but any EPLD (between SPLD and CPLD) which perhaps could emulate MMC1 will be 17 years old and not supported by the new design software and not programmable by JTAG.<br /><br />74 series + GAL would be far better. For example: instead of wasting an entire PLD for a shift register, you can use a 74164 which is much cheaper.<br /><br />Please look at a internal diagram of the 22V10, the flipflop can either be output as the last stage or fed back to the array. If you desire to preform functions on the flip flop's output, you must feed it back into the array and output the combinatorial result on another pin which reduces the outputs by half. S(imple)PLD are not like CPLD, they don't have the complex interconnects (or very good routing software); you must preform all logic before the output stage. Also realize there is only one global clock for the entire device. <br /><br />For MMC1 you need a clock for the shift register and write counter, and 4 separate clocks for the registers, for those parts alone that's 6 PLD. 22V10 have 10 outputs so can probably handle the 5-bit registers + output logic. There is more difficulty however when cascading MUXes (for mirroring) because each I/O has only one SOP term, this will make you again feed your output back to the array.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sat Feb 10, 2007 11:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-02-10T09:53:33-07:00</updated>
<published>2007-02-10T09:53:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21910#p21910</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21910#p21910"/>
<title type="html"><![CDATA[Simulating the MMC1 with a PAL 22V10 ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21910#p21910"><![CDATA[
Well, I guess the MMC1 needs exactly 25 flip-flops, but aside of that I guess the circuitery is some very simple combinatorial logic. Both CHR registers don't even need any combinatorial logic exept for A12.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you want to make your own MMC1, you should use regular 74 series MSI and use some GALs to do the decoding. Maybe this way you can get by with under 10 chips, maybe not.<br /></div><br />WHAT ??? I guess the inside of the MMC1 is very simple, it's just that the 74 series isn't very well suited to do it, because you don't get 5xflip-flops, but only 4x, wich means you need two chips per register, and the multiplexers in the 74 series sucks all the way and never have the features you want them to have.<br />Is just the number of flip-flops the problem ? If the whole thing cannot fit one single PLD, couldn't one for input logic and register flip-flops, then a second for output logic do ? Would things be simpler if the serial interface is bypassed by a parallel one wich would just count the writes and latches them only one write out of fives (require less flip-flops) ?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />BTW, if you don't need all the MMC1 features, you can probably make a very nice enhanced UOROM like mapper out of two 22V10, using one of them for combinatorial output and one for registered.<br /></div><br />Maybe, but that would be a bit a shame. Mirror contorl would also be needed, at least.<br /><br />EDIT : Can the Atmel ATF750C do anything better than a regular PAL/GAL 22V10 ? I really have trouble with this kind of chips I've never used, you see.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Feb 10, 2007 9:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2007-02-10T08:25:00-07:00</updated>
<published>2007-02-10T08:25:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21908#p21908</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21908#p21908"/>
<title type="html"><![CDATA[Simulating the MMC1 with a PAL 22V10 ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21908#p21908"><![CDATA[
A single PAL22V10 will not be able to simulate the MMC1, you would need a number of them to do that (I think around 10.) The reason is because when the device is in registered mode, macrocell (flip flop) must all be output at the same time when enabled, drastically loosing output efficiency. You also need an external clock which would need to be decoded outside of the PAL. Also MMC1 requires nearly 30 flip flops when a 22V10 supplies 10 and cannot preform the MMC1 output logic without feedback which will need another combinatorial output.<br /><br />I would use a GAL instead of a PAL, they are far more common and less difficult to program. They opposed to PAL are also erasable; PALCE or PEEL are other compatible PLD that are erasable but they are even more difficult to program today than PAL.<br /><br />If you want to make your own MMC1, you should use regular 74 series MSI and use some GALs to do the decoding. Maybe this way you can get by with under 10 chips, maybe not. In the right circumstances and ONLY in the right circumstances, small PLD can be used to reduce a lot of gates. Where they are most useful is when creating state machines or stuff like crazy address decoding which would require a very large gate inventory.<br /><br />To develop for PLD, you can use PALASM or CUPL or directly toggle fuses (I do this heh) Probably the few people still using SPLDs today use WinCUPL.<br /><br /><br />BTW, if you don't need all the MMC1 features, you can probably make a very nice enhanced UOROM like mapper out of two 22V10, using one of them for combinatorial output and one for registered.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sat Feb 10, 2007 8:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-02-10T07:09:59-07:00</updated>
<published>2007-02-10T07:09:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21907#p21907</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21907#p21907"/>
<title type="html"><![CDATA[Simulating the MMC1 with a PAL 22V10 ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2935&amp;p=21907#p21907"><![CDATA[
I'd like to simulate the MMC1 chip with a PLD chip for a custom cart I'm planning to do. Of course I could use a real MMC1 chip, but that is not too fun, and I suck at desoldering anyway. So I'd like to have fun trying to simulate it in a PLD.<br />The PAL 22V10 has the exact right number of pins, but can it hold the exact same function as a MMC1 ? What kind of software do I need to devlopp stuff for such chips ? I tried searching on the net, but I really did found nothing usefull, only confusing things comes up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Feb 10, 2007 7:09 am</p><hr />
]]></content>
</entry>
</feed>