<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Why PPU A0-A3 are connected on the MMC2 ?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Why PPU A0-A3 are connected on the MMC2 ?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=2862">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=2862</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jan 10, 2007 10:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Why PPU A0-A3 are connected on the MMC2 ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It must be one of the most useless question I've been asking, but this still bothers me.
<br />The MMC2 does detect when the PPU reads from certain tiles ($fd and $fe) to active different CHR bankswitching latches. To detect those fetch, I think there should be a giant AND gate between all adress lines A6-A11, A12 (inverted for pattern table 0 and noninverted for pattern table 1), and A4 and A5 inverted or not depending on wich latch you want to activate. Since this must happen on all 8 scanlines the PPU is rendering the tile (i.e. the switching must happen when the tile is fetched, regardless if it's the top or the bottom of it). So then, A0-A3 should *not* be decoded, and if they were the switching wouldn't happen on the whole tile.
<br />
<br />So then, I ask why those are connected to the MMC2 at all. Maybe they're just non connected internally ?
<br />Also, since the chip does not map or watch anything in the CPU $0000-$7fff range, I really don't see why M2 is connected. Also, the chip has 2 ground pins.
<br />Nintendo could then reduce pin cound to 34 pins without altering the chip's behaviour (however I don't know if there is anything between DIP-32 and DIP-40, but since they used that weird small-spaced DIP, why not use one with weird pin cound then ?).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dvdmth</b> [ Wed Jan 10, 2007 10:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll venture a guess and say that A0-A3 are used to distinguish between PPU rendering and $2007 accesses.  If the PPU is rendering, then A0-A2 should remain constant and A3 toggle between 0 and 1 during the course of the CHR fetches.  If $2007 were used, then A0-A2 would not be constant (if VRAM increment is 1) or A3 would not toggle (if VRAM increment is 32).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jan 10, 2007 11:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If the PPU is rendering, then A0-A2 should remain constant and A3 toggle between 0 and 1 during the course of the CHR fetches.</div>
<br />For BG fetches, yeah. But definitely not for sprites fetches, unless you can make sure of this only with two ready (one with A3 at 0, then at 1 to validate the latch switch). And it'd be easy to bypass this by just reading $2007 twice with an increment of 1.
<br />Also, I see no reason why manual $2007 reads would prevent the latches to be set to known state, since there is no other reason to read $2007 in the pattern table area. (I don't think games would just store dummy PRG data in the CHR chip and read it during VBlank, causing the latches go wrong. That would just be stupid).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Wed Jan 10, 2007 11:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I believe the logic is so that sprite switches happen only on the first scanline of the tile, while background switches happen on every scanline of the tile. From what I recall, the Japanese MMC2 patent document had a nice schematic of the entire CHR switching logic, and this is exactly what it did (specifically, it only used A0-A3 for one pattern table, but not the other).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jan 10, 2007 1:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> From what I recall, the Japanese MMC2 patent document had a nice schematic of the entire CHR switching logic</div><br />That doesn't help me much, since I've no acess to this (Google patent only include U.S. patents, and even if they had japanese one I'd understand nothing to them).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and this is exactly what it did (specifically, it only used A0-A3 for one pattern table, but not the other).</div>
<br />Does it keep track of all $2000 writes to know wich pattern table is used for BG/Sprites (that would give a good reason to input M2 to the chip) ? Or does it try to determine wich of them is acessed from the previos/next PPU fetch to know if the tile was probably a BG or a sprite fetch ? Or does the chip just decode one line for tiles from a pattern table, and all lines for the other pattern table, assuming the game will put this to good use (like the MMC3 with its scanline counter) ? Does the same thing apply to MMC4 ?
<br />
<br />EDIT : All few MMC2-MMC4 games I checked (wich is actually all ever made probably) used pattern table 0 for sprites and pattern table 1 for BG.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Wed Jan 10, 2007 2:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />MMC2 doesn't "keep track" of anything in the sense of MMC5, it simply decodes two tile accesses, each decoding will select their corresponding register be to output. MMC4 works in the same fashion.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Wed Jan 10, 2007 4:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Or does the chip just decode one line for tiles from a pattern table, and all lines for the other pattern table, assuming the game will put this to good use (like the MMC3 with its scanline counter) ?</div>
<br />
<br />Presumably, this is how it works. Since both pattern tables have the same bank size, this doesn't present any real difficulty on the code side (with the MMC3, they added the extra bit to specify which one got two 2KBs and which one got four 1KBs).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jan 11, 2007 10:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, this still bothers me a bit. I think I fully understand how nametable latches works. When a tile is encountered horizontally, it just change the VROM bank used for BG, and this has proved to be very usefull to have up to 512 tiles at one time on a single BG screen, especially for letters in textboxes. (Punchout does just do one change midframe, that could be done on any maper. However, it does this thing to show the opponant's graphics before the fight, and the MMC4 games uses this a lot).
<br />
<br />But for sprites, I really don't see much usage of this, and the games I checked seems to no use sprite latch switching in an evident way as they do for BG.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dvdmth</b> [ Thu Jan 11, 2007 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The only way I know of that this mapper can effectively be used for sprites is if each on-screen sprite had two consecutive entries in OAM, the first using tile $FD or $FE and the second using the tile # for the sprite.  This would ultimately result in only 4 sprites per line, although this can be improved if multiple sprites have the same Y coordinate and use the same CHR bank (those sprites would need to appear consecutively and have a single $FD/FE sprite preceding them).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jan 12, 2007 10:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, but if the mapper decodes only the first line of the tile, the only usage of this is standard midframe CHR switching, allowing the only advantage of avoiding boring timed code and sprite-zero hits. Also the sprite would be easier to hide, since it can be in a hidden area or just be blank, and the PPU will still fetch it resulting in a bankswitch (as opposed with sprite-zero hit where the sprite mustn't be blank).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 12, 2007 3:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If (as I understand it from this topic) <em>Punch-Out!!</em> severely underuses the MMC2, then how hard would it be to mapper-hack <em>Punch-Out!!</em> to, say, MMC3?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jan 13, 2007 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually what I said wasn't exact.
<br />Punch-Out uses the MMC2 BG switching at title screen and all between-stage screen. MMC2 switching is almost not used on battle screen (only to switch screens between the actual fight area and the status bar/border of fight area and to show 'GET UP' when you get knocked out), and that is rather crazy since a sprite zero hit is used to change the horizontal BG scrolling, so why not use it to change the CHR bank as well ? Also, the game seems to rely on dummy name table/pattern table fetches to switch banks here. However, I'm pretty they could arrange tiles differently and use midframe bankswitching to bypass this.
<br />
<br />MMC2 sprite switching is used before the fight, where the sprite banks alternate betwen the opponant's and the entrainer's (the hero is in BG), and since both does not overlapp only one sprite of each, $fd and $fe, is used at strategical position on the screen. Both sprites are totally transparent, and are in priority 0 and 1, so I think they could use sprite 0 for hit instead and switch sprite bank midframe using this.
<br />
<br />The real mystery is that someimes sprites $fd and $fe are used on the opponant sprites on battle screen. At least Piston Honda has some $fe sprites on his animation frames.
<br />
<br />My conculsion is that sprites can be used for bankswitching as well, but only their first row is taken care. Since sprite pattern fetching appear on the good order, on a gived scanline the priority of the sprites is more important that their position. So for several sprites sharing the same vertical position, it's possible to have one $fd sprites, up to 3 sprites from a bank, a $fe sprite and up to 3 sprites from another bank, and having them in any horizontal position will work. However, the latch will remain $fe for the 7 following scanline wich is plain STUPID ! This ruins all the advantage this technique could do.
<br />
<br />Overall, Puch-Out does mainly waste MMC2's capacibilities, but it still use plenty of them everywhere (due to how it was designed), so it'd be quite hard to port the game to another mapper without rewriting the game core (arranging screens differently, etc...), but the game could get very similar graphics. Also, it's still worth noting the game was developped before the MMC3 was created, so it'd still have to rely on quite some raster effect to work with MMC1 (without talking about how PRG banks are organised).
<br />
<br />Also, why M2 is connected to the chip is still a mystery, unless the chip decodes $2000 writes.
<br />
<br />EDIT : Also, an interesting thing is that the MMC4 (so most probably the MMC2 too) does the switching AFTER the fetch. Punch-out and FC wars doesn't rely on this, but at least Fire Emblem relies on this on the right of textboxes. Some emulators (I don't remember wich ones) emulated the switching to take place just when the fetch is detected, making screwed up graphics in Fire Emblem. After all dvdmth was probably right on his first post, the lower adress lines are here to detect both pattern table fetches, then trigger the latch switching immediately after the second. And also I seriously doubt the complete adress is decoded for sprite and not for BG. Also I wonder how well $2007 reads have effect. None of those commercial games seems to read $2007 to set the latch in a known states, so no clue here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Sun Jan 14, 2007 5:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've managed to dig up the MMC2 patent, and I've posted the last 2 pages (with the diagrams):
<br />
<br /><!-- m --><a class="postlink" href="http://www.qmtpro.com/~nes/docs/mmc2pat1.png">http://www.qmtpro.com/~nes/docs/mmc2pat1.png</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://www.qmtpro.com/~nes/docs/mmc2pat2.png">http://www.qmtpro.com/~nes/docs/mmc2pat2.png</a><!-- m -->
<br />
<br />If you want the entire patent document, you can get it <a href="http://www.qmtpro.com/~nes/docs/mmc2pat.zip" class="postlink">here</a>, though be warned that it'll take a while to download (it's about 800KB and the server isn't exactly on a fast connection).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jan 15, 2007 9:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow !!
<br />It's so much a shame it's all in japanese !
<br />
<br />The system seems to rely on a pulse on the read line to activate the latches.
<br />A shematic on page 14 seems to proof that A0-A2 are used for fully decoding the adress only if A13 is low too. Also, this shematic show two flip flops in series, meaning that the actual latch will be actived after the second read, regardless if the second read is still in the $xfd0-$xfef section.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Jan 15, 2007 9:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wouldn't count on the patent being exact, the MMC1 patent was only similar to the actual logic. You should check out the Funkyflash implementation of PEROM if you want a working schematic.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>