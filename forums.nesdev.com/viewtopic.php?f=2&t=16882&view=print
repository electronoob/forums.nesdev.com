<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Limitiation or compromise if write program in c</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Limitiation or compromise if write program in c</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16882">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16882</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Dec 31, 2017 11:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First, happy new year from Japan!<br /><br />One of my new year resolution is to try to write something for the nes, anything is fine as long as I finish it.  Since I didn't touch asm code for a while, it would take some time before getting back on track. My best guess would be to write code in C but I'm not sure what are the compromise you have to do if you decide to go that way.<br /><br />I know that a few homebrew were made in C so I would like to know what are the compromise or gotcha that you have to be aware if you write most of the code in c.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Sun Dec 31, 2017 12:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Performance and size. Grab cc65 and neslib, and off to coding!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Dec 31, 2017 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Passing arguments to functions is incredibly slow for the 6502. Pass 1 argument at max, it can use the a and x registers for the first argument.<br /><br />I recommend the neslib. Use globals, basically everywhere.<br /><br />The main advantage of C is ease in programming. I even find debugging easier in C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Dec 31, 2017 7:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are a few useful hints on this site, especially the point &quot;Optimization&quot;:<br /><!-- m --><a class="postlink" href="https://shiru.untergrund.net/articles/programming_nes_games_in_c.htm">https://shiru.untergrund.net/articles/p ... s_in_c.htm</a><!-- m --><br /><br /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">Passing arguments to functions is incredibly slow for the 6502. Pass 1 argument at max, it can use the a and x registers for the first argument.</div><br />If the function is implemented in C, has one parameter and is declared __fastcall__, the compiler will still put the variable into the software stack first. So, functions written in C should not use parameters at all.<br />If the function is implemented in Assembly, then one parameter is alright. If you declare the function as __fastcall__ (which you should do with any function anyway since there's no disadvantage in doing so), it will be put into A (or, if it's two bytes wide, into A and X) and your Assembly function can decide for itself what it wants to do with it.<br /><br /><br />Besides, even with global variables, you can still simulate normal function calls with the help of macros:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">extern unsigned char DoSomething_Parameter1_;<br />extern unsigned char DoSomething_Parameter2_;<br />extern unsigned char DoSomething_Parameter3_;<br /><br />void __fastcall__ DoSomething_(void);<br /><br />#define DoSomething(parameter1, parameter2, parameter3)\<br />{\<br />&nbsp; &nbsp; DoSomething_Parameter1_ = parameter1;\<br />&nbsp; &nbsp; DoSomething_Parameter2_ = parameter2;\<br />&nbsp; &nbsp; DoSomething_Parameter3_ = parameter3;\<br />&nbsp; &nbsp; DoSomething_();\<br />}</div><br /><br />If you program efficiently, then C should not prevent you from writing real games.<br /><br />I wrote a jump'n'run in C:<br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=Eee0yurkIW4">http://www.youtube.com/watch?v=Eee0yurkIW4</a><!-- m --><br /><br />This game has platforms, jump physics etc., so the movement functions are a bit more complex than a simple &quot;if button up, then check for wall at position (X, Y - 1)&quot;. And still, it works completely without lags.<br /><br />Some stuff should still be written in Assembly, like general functions (CopyArray*, randomizer etc.), the stuff that happens in NMI or the sprite rendering function (the one that turns the meta sprites into hardware sprites).<br />But apart from that, I managed to program the whole game logic in standard C and there was never a situation where I had to optimize a random part of the game to be written in Assembly.<br /><br /><br />* CopyArray, FillArray etc. should be reimplemented because the official C functions memcpy and memset use a size parameter of two bytes (type size_t). This makes those functions bigger and more complex than if you simply use a byte value as the size parameter.<br />After all, when do you ever need to copy or fill more than 255 bytes to an array at once?<br />Also, they use local parameters.<br /><br />Instead, your own CopyArray could look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">In C:<br /><br />void __fastcall__ CopyArray_(unsigned char size);<br /><br />#define CopyArray(destinationArray, sourceArray, size)\<br />{\<br />&nbsp; &nbsp;CommonPointer1 = destinationArray;\<br />&nbsp; &nbsp;CommonPointer2 = sourceArray;\<br />&nbsp; &nbsp;CopyArray_(size);\<br />}<br /><br />In Assembly:<br /><br />_CopyArray_:<br /><br />&nbsp; &nbsp;TAY<br /><br />@loop:<br /><br />&nbsp; &nbsp;CPY #0<br />&nbsp; &nbsp;BEQ @end<br /><br />&nbsp; &nbsp;DEY<br /><br />&nbsp; &nbsp;LDA (CommonPointer2), Y<br />&nbsp; &nbsp;STA (CommonPointer1), Y<br /><br />&nbsp; &nbsp;JMP @loop<br /><br />@end:<br /><br />&nbsp; &nbsp;RTS</div><br /><br />Do you already know what kind of game you want to program?<br /><br /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I even find debugging easier in C.</div><br />How do you debug the C code of an NES game?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Dec 31, 2017 8:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Performances and the uses of parameters in c was mostly what I though would be an issue so it seems my guess were right or I did remember some of the comments posted on nesdev in the past.<br /><br />thank you for refreshing my memory on the subject!<br /><br />I'm not expecting to write everything in C since my experience from the dos days reminds me that some part has to be written in assembler because of performance issues (any copy related method mentioned above are better in asm).<br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Do you already know what kind of game you want to program?<br /></div><br /><br />Right now I have not decided yet. I always had ideas that were too technical so they went nowhere so I need to focus on something small first so I can build some base code. <br /><br />There is one game I started 25 years ago under dos that I would like to make on the nes but this game too is incomplete so only the basic characters and concept would be ported.  It was a double dragon style game and liked that alot in the past but now my taste changed a little bit but still would like to see something out of it.<br /><br />I should start with a one screen game, it just that I never really liked those in the first place. Still, it would be a good start.<br /><br />Is using other modules like either famitracker or famitone(?) more complicated with c code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Dec 31, 2017 9:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">I'm not expecting to write everything in C since my experience from the dos days reminds me that some part has to be written in assembler because of performance issues (any copy related method mentioned above are better in asm).</div><br />I was surprised in the end that I only had to use generic functions in Assembly. There was never an issue where I had to write a real game-specific function (like MoveHero etc.) in Assembly.<br /><br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">It was a double dragon style game and liked that alot in the past but now my taste changed a little bit but still would like to see something out of it.</div><br />My hint: Beat'em ups are always pretty boring due to their slow speed: You have to hit your opponents many times and the game prevents you from going on until all of them are defeated.<br />How about a fast-paced beat'em up?<br /><br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">I should start with a one screen game, it just that I never really liked those in the first place. Still, it would be a good start.</div><br />I was pretty glad that my first game was not just a one screen game, but that I actually included full scrolling and realtime level loading. This way it was a mundane issue to do this for the next game.<br /><br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">Is using other modules like either famitracker or famitone(?) more complicated with c code?</div><br />No. Just like you can mix and match C code with Assembly, you can also include the Assembly code of FamiTone into your own code.<br />You might want to create a little Assembly file that wraps the other file.<br /><br /><br />Besides, the FamiTracker driver itself should probably not be used. The code is very big (about 5 KB), the music files will become big, it doesn't have support for sound effects and I assume it's not very efficient and you need the CPU time for other things.<br /><br />If FamiTone is not too limited for your music compositions, it's pretty good for games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Mon Jan 01, 2018 1:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have an idea for a multiple player game, more or less a beat-em-up, but I need to define what the characters can do and do quick prototype to see how interesting it would be. Maybe this would be the chance to build it in C and test how it goes.<br /><br />As for Famitone, I'm not a very talented artist music wise so I do not use much effects so I guess I would have no issue with the famitone requirements.  I was using up to now FT 2.7 driver (which is smaller) but the issue was sound effects.<br /><br />When I have something working I will be more than happy to share it. For now, it's just a new year resolution. The other reason for C is to be able to port it to other platform but maybe with the nes limitation (for c code) it may just be wishful thinking only.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Mon Jan 01, 2018 4:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have ported NES games written in C to Genesis and GBA without much issue.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Mon Jan 01, 2018 6:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">I have an idea for a multiple player game, more or less a beat-em-up, but I need to define what the characters can do and do quick prototype to see how interesting it would be.</div><br />How about a first attempt of a real &quot;Street Fighter II&quot;-like fighting game instead of a multiplayer versus version of &quot;Double Dragon&quot;? Maybe with small 16 x 40 characters in the first step. (Huge characters with many animation frames would require MMC3 for instant change of the CHR values.)<br /><br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">The other reason for C is to be able to port it to other platform but maybe with the nes limitation (for c code) it may just be wishful thinking only.</div><br />The limitations for C code (like using global variables instead of parameters) are nothing that go against standard C, so you can use the code for everything else as well. It might be considered bad programming style in another context, but it's still all valid C.<br /><br />What might be a problem when it comes to porting: There's probably less abstraction in NES games.<br /><br />For example, my characters on screen contain a pointer variable to a meta sprite that is the currently drawn animation frame. And the data that the pointer points to is an array of tile values from the CHR ROM.<br />So, I don't have abstraction values for PlayerStanding, PlayerWalking1, PlayerWalking2, PlayerWalking3 etc. Instead, it points directly into the data itself and the UpdateSprites function uses the pointer for buildup.<br /><br />On another platform, your meta sprites definitions would probably not consist of a bunch of tile values, but each animation would maybe be a bitmap file. (And if you write clean code, your value in the game logic would just be an index for a lookup array, specifically so that you can switch the underlying data without having to change the game logic code. But for the NES, this abstraction layer would cost ROM space and CPU time.)<br /><br />So, you would have to redefine the pointer to an array of byte values into a string variable that hold the bitmap file name. Or an integer that holds the Windows bitmap resource ID. (Or an integer that holds the index to an array of implementation-defined data.)<br /><br />Same with the background buildup:<br /><br />When it's time to update the background, the game logic fills an array with data that's very close to how the PPU structures its data, so that the NMI can process the array as fast as possible.<br />You probably don't have the same tile-by-tile-with-values-from-CHR buildup in a PC game unless you actually recreate the behavior of the NES PPU. So, you would have to rewrite these parts and they might be mixed with your regular game logic code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 01, 2018 9:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">My hint: Beat'em ups are always pretty boring due to their slow speed: You have to hit your opponents many times and the game prevents you from going on until all of them are defeated.</div><br />I'd bet a lot of the scroll stop behavior in these games derives from CHR address space and palette limits, with two players and two enemy types allowed to be loaded at once. The other option is pop-in, where enemies just blink into existence once all enemies of a particular type are defeated.<br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">How about a fast-paced beat'em up?</div><br />Once it gets fast enough, it stops feeling like a beat-em-up in favor of another genre entirely. I never thought of <em>Haunted: Halloween '85</em> as any more of a beat-em-up than, say, <em>Super Mario 64</em>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Mon Jan 01, 2018 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">[<br />How about a first attempt of a real &quot;Street Fighter II&quot;-like fighting game instead of a multiplayer versus version of &quot;Double Dragon&quot;? Maybe with small 16 x 40 characters in the first step. (Huge characters with many animation frames would require MMC3 for instant change of the CHR values.)</div><br /><br />What I had in mind was not a double dragon like fighting game but more a fast paced arena like fighting with traps, wall jumping, maybe weapons (or some characters have weapon) either one or one or one to many (depending of limit with four score).  The concept is raw and to make it interesting, you have to build interesting battle ground that allow strategy to attack the other player.<br /><br />The idea is still raw but this is maybe an idea that came out from a screenshot I saw from another game (never saw the game play though) and though it could be interesting on the nes, if the game play is fast enough. This means small characters and interaction with the environment.<br /><br />As for porting, it was more for other platform like sms, pce etc. The logic may be portable (to some degree) but to abstract the hardware may not be possible so I guess most code must be adapted for the platform anyway.<br /><br />Once I have some concept I will try to share it. For now I didn't but anything on paper yet. What is the most important is the battleground and make interesting fighters that are balanced.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Jan 01, 2018 10:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How do you debug the C code of an NES game?</div><br /><br />Let's say you want to do something like this...<br /><br />If (some_flag &amp;&amp; (x_position&gt;25) &amp;&amp; (direction == left)) {<br /> do_something();<br />}<br /><br />this is much easier to understand than the equivalent asm, which would be about 10-15 lines long. And, I have it compile and add the C source to the asm file. If, there's a problem, I can set a breakpoint, and step through the code, and look at the asm file (with C source), and still know what's going on.<br /><br />cc65 command line directive --add-source<br /><br />even coming back to this code a year later, it would only take an instant to comprehend it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 01, 2018 12:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">As for porting, it was more for other platform like sms, pce etc. The logic may be portable (to some degree) but to abstract the hardware may not be possible</div><br />I'm not entirely sure to what extent the logic would be efficiently portable.<br /><br />Z80, MC68000, and MIPS have indexing modes with a large (16- to 32-bit) pointer and a small (at least 7-bit) constant offset. This leads to a preference for an &quot;array of structures&quot; (AOS) organization of data, where all fields related to one object are consecutive in memory. For example, the X and Y coordinates of an object might be at $F000 and $F002, while the X coordinates of two different objects might be at $F000 and $F020. In C, it'd look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define NUM_ACTORS 16<br />struct Actor {<br />&nbsp; uint16_t x, y;&nbsp; &nbsp;// displacement<br />&nbsp; int16_t dx, dy;&nbsp; // velocity<br />&nbsp; uint8_t health, actor_type, frame_timeleft, frame;<br />&nbsp; // et cetera<br />};<br />struct Actor actors&#91;NUM_ACTORS&#93;;<br /></div><br />Then a program can keep a pointer to the current actor structure, which C++ calls <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">this</tt>, in a machine register and access fields using each field's offset. In Z80 (not 8080/8085 or LR35902), <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">this</tt> is IX; in 68000, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">this</tt> may be A0; and in MIPS, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">this</tt> is the first argument register (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$4</tt> aka <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$a0</tt>). Indexing is a bit trickier on 8080/8085 and LR35902: a pattern shown in <a href="https://forums.nesdev.com/viewtopic.php?p=210296#p210296" class="postlink">this post</a> is to pad each struct to a power of two bytes and aligning it to its &quot;natural&quot; boundary so that you can access fields of the object pointed to by HL by doing math on the lower bits of L, leaving H and the upper bits of L alone. I wonder what practical C compilers for 8080/8085/LR35902 do, or what Z80 C compilers do if IX and IY are already occupied.<br /><br />The fast indexing modes in the 6502, by contrast, add a small (8-bit) variable offset to a large (16-bit) constant pointer. This leads to a &quot;structure of arrays&quot; (SOA) organization, which places values of one field of several objects in consecutive addresses. So you'd get X and Y coordinates of an actor at $F010 and $F030, but X coordinates of multiple actors at $F010, $F011, $F012, ...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define NUM_ACTORS 16<br />uint8_t actor_xsub&#91;NUM_ACTORS&#93;;<br />uint8_t actor_x&#91;NUM_ACTORS&#93;;<br />uint8_t actor_ysub&#91;NUM_ACTORS&#93;;<br />uint8_t actor_y&#91;NUM_ACTORS&#93;;<br />uint8_t actor_dxsub&#91;NUM_ACTORS&#93;;<br />int8_t actor_dx&#91;NUM_ACTORS&#93;;<br />uint8_t actor_dysub&#91;NUM_ACTORS&#93;;<br />int8_t actor_dy&#91;NUM_ACTORS&#93;;<br />uint8_t actor_health&#91;NUM_ACTORS&#93;;<br />uint8_t actor_type&#91;NUM_ACTORS&#93;;<br />uint8_t actor_frame_timeleft&#91;NUM_ACTORS&#93;;<br />uint8_t actor_frame&#91;NUM_ACTORS&#93;;<br /></div><br />C is traditionally used on machines with large pointer+small offset, which prefer an array of structures. I'm not aware of any C implementation (or even any high-level language in the first place) that automatically translates code to the structure-of-arrays approach. Is there a good way to use the C preprocessor to output both structure-of-arrays and array-of-structures code from one source file?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Mon Jan 01, 2018 1:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A little stylistic suggestion: I would still put these values into a struct:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* In a .h file: */<br /><br />#define NUM_ACTORS 16<br /><br />struct Actors<br />{<br />&nbsp; &nbsp; uint8_t xsub&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t x&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t ysub&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t y&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t dxsub&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; int8_t dx&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t dysub&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; int8_t dy&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t health&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t type&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t frame_timeleft&#91;NUM_ACTORS&#93;;<br />&nbsp; &nbsp; uint8_t frame&#91;NUM_ACTORS&#93;;<br />};<br /><br />extern struct Actors actors;<br /><br />/* In a .c file: */<br /><br />struct Actors actors;</div><br />This way, you don't need to declare every single variable in a C file and the same set of variables as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">extern</tt> in a header file.<br /><br />(Also, I like to typedef <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned char</tt> to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">byte</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">signed char</tt> to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sbyte</tt>.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Mon Jan 01, 2018 5:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Limitiation or compromise if write program in c</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">What I had in mind was not a double dragon like fighting game but more a fast paced arena like fighting with traps, wall jumping, maybe weapons (or some characters have weapon) either one or one or one to many (depending of limit with four score).</div><br />Something like &quot;Nekketsu Kakutou Densetsu&quot;?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>