<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=9379" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-11-08T08:15:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=9379</id>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2012-11-08T08:15:15-07:00</updated>
<published>2012-11-08T08:15:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102554#p102554</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102554#p102554"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102554#p102554"><![CDATA[
&gt; My guess is that nocash is assuming a reset vector of $8000 if a ROM is &lt;32K<br />No, at FFFC, as usually. With ROMs of 1K,2k,4K,8K,16K size being mirrored within the 32K area. I thought that'd be obvious. Now I am wondering if there has ever been something like a 1K-compo for the SNES.<br /><br />&gt; the PPU mid scanline effects still work, but seem to not work as well?<br />&gt;  Like, you lower the brightness from max to full black, yet you see onscreen a light gray color.<br />You mean [2100h]=00h doesn't act as black, and not as dark-gray? And instead it does produce light gray?<br />Or, that there are a few gray pixels displayed at time of writing any value to 2100h?<br /><br />&gt; Known models:<br />&gt; CPU/PPU1/PPU2<br />&gt; 1/1/1 (uncommon)<br />&gt; 2/1/1 (rarest)<br />&gt; 2/1/2 (really rare)<br />&gt; 2/1/3 (common as dirt)<br />Okay, and the newer stuff including cost-down single-chip version returns 2/1/3, too? Then I'll try a guess:<br /><br /><strong>CPU Versions</strong><br />CPU.ID=1  100pin  Nintendo, S-CPU,   5A22-01  (CPU)  <!-- m --><a class="postlink" href="http://www.chipdb.org/img-nintendo-s-cpu-snes-5274.htm">http://www.chipdb.org/img-nintendo-s-cpu-snes-5274.htm</a><!-- m --><br />CPU.ID=2  100pin  Nintendo, S-CPU A, 5A22-02  (CPU) as found in my own SNES<br />CPU.ID=2  100pin  Nintendo, S-CPU B, 5A22-02  (CPU)  <!-- m --><a class="postlink" href="http://www.snescentral.com/article.php?id=1017">http://www.snescentral.com/article.php?id=1017</a><!-- m --><br />CPU.ID=2  160pin  Nintendo, S-CPUN A, RF5A122 (CPU, PPU1, PPU2, S-CLK)<br /><br /><strong>PPU1 Versions</strong><br />PPU1.ID=1 100pin  Nintendo, S-PPU1, 5C77-01   (PPU1) as found in my own SNES<br />PPU1.ID=1 160pin  Nintendo, S-CPUN A, RF5A122 (CPU, PPU1, PPU2, S-CLK)<br /><br /><strong>PPU2 Versions</strong><br />PPU2.ID=1 100pin  Nintendo, S-PPU2?, 5C78-01?  (rarely mentioned in internet)<br />PPU2.ID=2 100pin  Nintendo, S-PPU2 A?, 5C78-02?? (never mentioned in internet)<br />PPU2.ID=3 100pin  Nintendo, S-PPU2 B, 5C78-03 (PPU2) as found in my own SNES<br />PPU2.ID=3 100pin  Nintendo, S-PPU2 C, 5C78-03 (PPU2) <!-- m --><a class="postlink" href="http://www.snescentral.com/article.php?id=1017">http://www.snescentral.com/article.php?id=1017</a><!-- m --><br />PPU2.ID=3 160pin  Nintendo, S-CPUN A, RF5A122 (CPU, PPU1, PPU2, S-CLK)<br /><br />Could that be correct?<br />The &quot;S-CPUN A&quot; chip name suggests that there might have also been a &quot;S-CPUN&quot; (without &quot;A&quot;)?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Thu Nov 08, 2012 8:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2012-11-07T15:45:59-07:00</updated>
<published>2012-11-07T15:45:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102495#p102495</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102495#p102495"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102495#p102495"><![CDATA[
&gt; It doesn't take 32K just to describe a reset vector, at least on the Super NES's predecessor.<br /><br />Sure, and technically if you use a board manifest with my emulator you can do it with less than 32K as well. You can even map RAM there instead.<br /><br />But the heuristics are a cheap hack to get commercial software working, and all commercial software either has 32K or 64K banks, so nobody scans for headers at 16K, etc.<br /><br />My guess is that nocash is assuming a reset vector of $8000 if a ROM is &lt;32K, which isn't how the hardware would work, but I guess is nice if you don't want to pad the test ROM for some reason.<br /><br />&gt; Is it flexible enough to allow multiple games in one file, such as for a plug-in that can load ROMs out of a .zip or .7z?<br /><br />Yes, I used to do that too with the old bsnes/Qt version of this concept (snesloader)<br />It was fun eating up 600MB of RAM and ten seconds to load Super Mario World from the GoodMerge set (997 hacks in one archive. Not exaggerating that number, it's an exact value.) [and that speed/RAM usage was with the official 7zip library code, as used in fex.] {by the way, fex is fucking fantastic if you've never tried it.}<br />A lot of people loved that feature, too.<br /><br />&gt; I wonder how hard it'd be to port something like blargg's flowing palette demo to the Super NES.<br /><br />Due to the DRAM refresh in the middle of each rendering scanline, it would have a sharp bar of solid colors for ~10-15 pixels. But aside from that, it would only be nominally harder (have to add in variable memory access speed and penalty cycles.) Good news is that it should work in bsnes/accuracy, too.<br /><br />I used the display brightness register to write text with my demo ROMs. It was nowhere near as visually pleasing as blargg's example.<br /><br />&gt; I think it would remain in the current mode until the next scanline.<br /><br />Likewise. Or worse, it will be like turning the display on and off. It'll just fuck the graphics up royally for several pixels, and then recover.<br /><br />&gt;  U1  100pin Nintendo, S-CPU A, 5A22-02, 2FF 7S    ;CPU  ;ID=2 in 4210h<br /><br />That's a revision 2. Your CPU is immune to DMA/HDMA crash.<br /><br />&gt; My bigger concern is that we don't seem to know which CPU (and PPU) versions do exist at all.<br /><br />CPU has revision 1 &amp; 2.<br />PPU1 has revision 1.<br />PPU2 has revision 1, 2 &amp; 3. Revision 2 is hauntingly rare.<br /><br />Known models:<br />CPU/PPU1/PPU2<br />1/1/1 (uncommon)<br />2/1/1 (rarest)<br />2/1/2 (really rare)<br />2/1/3 (common as dirt)<br /><br />Once Nintendo moved to the one-chip design, they stopped updating the revisions, but still changed things.<br />The SNES Jr, for instance, has different SMP timer behavior (no glitching), and the PPU mid scanline effects still work, but seem to not work as well? Like, you lower the brightness from max to full black, yet you see onscreen a light gray color. WRAM/APURAM initialization patterns are totally different each time, too.<br /><br />It's my personal opinion that the SNES Jr is an official clone (redesign) of the original system.<br /><br />I've not found any differences between the PPU2 revisions. All the bugs I know of (X=256 priority issue, half-height on OAM size 6 interlace mode, EXTBG BG2 using the wrong scroll offset in one direction, etc) still exist.<br /><br />&gt; The funny thing is that the PPU is actually doing 680 insane-fast multiplications per scanline (normally one would need 8 multiplications for the first pixel, and then add horizontal offsets for the following pixels).<br /><br />Wow, so they do reload and remultiply for every pixel? In that case, you could change the values mid-scanline.<br /><br />&gt; Patent workaround perhaps?<br /><br />'604: &quot;A method for adding to a number after having multipled it.&quot;<br /><br />Sadly, I could see the US patent office granting that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Wed Nov 07, 2012 3:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-11-07T14:29:20-07:00</updated>
<published>2012-11-07T14:29:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102489#p102489</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102489#p102489"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102489#p102489"><![CDATA[
<div class="quotetitle">nocash wrote:</div><div class="quotecontent"><br />My bigger concern is that we don't seem to know which CPU (and PPU) versions do exist at all. That tiny detail should be reverse-engineered <em>before</em> talking about smarter differences between revisions.<br /></div><br />In The Lion King, if you push B Button, A Button, R Button, R Button, Y Button (BARRY), it'll tell you what the IDs are.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The funny thing is that the PPU is actually doing 680 insane-fast multiplications per scanline (normally one would need 8 multiplications for the first pixel, and then add horizontal offsets for the following pixels).<br /></div><br />Patent workaround perhaps?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Nov 07, 2012 2:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2012-11-07T13:39:56-07:00</updated>
<published>2012-11-07T13:39:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102487#p102487</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102487#p102487"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102487#p102487"><![CDATA[
&gt; DMA/HDMA crash on CPU revision 1<br />I don't think that my SNES is having that revision... or is revision1 the first revision (version2) after the original version (version1)? My bigger concern is that we don't seem to know which CPU (and PPU) versions do exist at all. That tiny detail should be reverse-engineered <em>before</em> talking about smarter differences between revisions. I know that my SNES is having this chipset (and ID values in right column):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> Board:     (C) 1992 Nintendo, SNSP-CPU-01        ;BOARD<br /> U1  100pin Nintendo, S-CPU A, 5A22-02, 2FF 7S    ;CPU  ;ID=2 in 4210h<br /> U2  100pin Nintendo, S-PPU1, 5C77-01, 2EU 64     ;PPU1 ;ID=1 in 213Eh<br /> U3  100pin Nintendo, S-PPU2 B, 5C78-03, 2EV 7G   ;PPU2 ;ID=3 in 213Fh<br /></div><br />There seem to be different chip versions, and even a cost-down version with CPU+PPUs in one chip. The thing I'd like to see would be chip names &amp; ID values typed-up from such consoles (or without typing-up: photos of the mainboard, bundled with screenshots of the ID values).<br /><br />&gt; PPU: What if you use the MUL functionality during a Mode7 screen rendering?<br />MUL writes are just treated as rotation/scaling parameters, and MUL reads work as so: <!-- m --><a class="postlink" href="http://nocash.emubase.de/fullsnes.htm#snesppurotationscaling">http://nocash.emubase.de/fullsnes.htm#s ... ionscaling</a><!-- m --> (in the &quot;M7A/M7B Port Notes&quot; section).<br />The funny thing is that the PPU is actually doing 680 insane-fast multiplications per scanline (normally one would need 8 multiplications for the first pixel, and then add horizontal offsets for the following pixels).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Wed Nov 07, 2012 1:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-11-07T10:51:07-07:00</updated>
<published>2012-11-07T10:51:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102470#p102470</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102470#p102470"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102470#p102470"><![CDATA[
Well, I don't know. In some cases one or two flip-flops could saves several dozen of gates.<br />The NES PPU is very &quot;combinational&quot; in it's design, however the C64 chip is exactly the opposite, it is very &quot;sequential&quot; as you can fool it into thinking it has done something when it haven't, or vice versa (you can focre it to re-fetch color table etc..., while the NES fetches colours every scanline)<br /><br />Anyways we're not going to re-invent the SNES PPU and this should be tested.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Nov 07, 2012 10:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-11-07T10:17:37-07:00</updated>
<published>2012-11-07T10:17:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102466#p102466</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102466#p102466"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102466#p102466"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I think it would remain in the current mode until the next scanline.<br /></div><br />Wouldn't that violate the hardware engineering rule of thumb to use the minimum number of flip-flops, such as those holding the current mode?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Nov 07, 2012 10:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-11-07T10:13:31-07:00</updated>
<published>2012-11-07T10:13:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102464#p102464</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102464#p102464"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102464#p102464"><![CDATA[
This would be incredibly cool, but I think the probability such a thing can be done in hardware is like 0.001%<br /><br />I think it would remain in the current mode until the next scanline.<br /><br />This should really be tested though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Nov 07, 2012 10:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2012-11-07T09:54:17-07:00</updated>
<published>2012-11-07T09:54:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102462#p102462</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102462#p102462"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102462#p102462"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />PPU:<br />We barely understand this at all. Almost no data on cycle timings here.<br />What if you use the MUL functionality during a Mode7 screen rendering?<br />What if you toggle a BGMODE in the middle of a scanline? (god help us if it actually gets acknowledged ...)<br /></div><br /><br />I've been wondering lately what happens when you change the Mode7 parameters midscreen.  The best case senario would be a split-screen Mode-7 effect, which can be useful for a giant front facing angel boss with rotating wings.<br /><br />For changing BGMODE mid scanline, the best case senario would be a splite-screen effect, but with a garbage tile inbetween.  If that is the case, then maybe you can disable the BG layer right before the mode switch, switch to mode-7, enable the BG layer again, Let the Mode-7 layer rotate an object, disable the BG layer, switch modes, enable it again, to continue the background layer, and then use sprites to patch up the rectangular hole in the background layer.  This way you can have a BG layer and a Mode-7 layer, without creating the entire background out of sprites.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Wed Nov 07, 2012 9:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-11-07T05:35:16-07:00</updated>
<published>2012-11-07T05:35:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102455#p102455</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102455#p102455"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102455#p102455"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />Not having enough ROM data to describe a reset vector isn't very fun<br /></div><br />It doesn't take 32K just to describe a reset vector, at least on the Super NES's predecessor. A 16K ROM on the NROM-128 board is mirrored into both $8000-$BFFF and $C000-$FFFF. One game is so small it's mapped into $8000-$9FFF, $A000-$BFFF, $C000-$DFFF, and $E000-$FFFF, and the most common file format for NES games just accepts that as an overdump. It's made official as of NES 2.0: &quot;double it up and call it a day&quot; says kevtris.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />But yeah, the external plugin works nicely. Lets me put all the legacy code somewhere outside the emulator, which is something I can tolerate.<br /></div><br />Is it flexible enough to allow multiple games in one file, such as for a plug-in that can load ROMs out of a .zip or .7z?<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />I wrote some fun tests that wrote text on the screen by changing the registers mid-scanline. But otherwise, nobody's interested in emulating or coding for the PPU like this ... I currently have the only dot-based PPU renderer, and it's as slow as you think it is.<br /></div><br />I wonder how hard it'd be to port something like <a href="http://forums.nesdev.com/viewtopic.php?p=63014#p63014" class="postlink">blargg's flowing palette demo</a> to the Super NES.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Nov 07, 2012 5:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2012-11-07T00:03:05-07:00</updated>
<published>2012-11-07T00:03:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102447#p102447</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102447#p102447"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102447#p102447"><![CDATA[
&gt; it took me an hour to figure out how to load a rom-image into it<br /><br />Don't worry, the next release is going to feature an external DLL to load files, and it'll accept files in the format you're used to.<br />I presume that will make koitsu very happy as well.<br /><br />&gt; at least if they are padded to min 32kbytes, else nothing happens<br /><br />Not having enough ROM data to describe a reset vector isn't very fun <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />&gt; And I thought no$sns was a bit old-fashioned, and the more modern emus would work by click-and-play <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />I do things the more correct way, rather than the easiest way. I'm not in it for the popularity.<br />But yeah, the external plugin works nicely. Lets me put all the legacy code somewhere outside the emulator, which is something I can tolerate.<br /><br />&gt; Looks as if there is at least one secret still hiding in the console.<br /><br />I'm skeptical, but do let me know when you figure it out, I'll confirm your findings on the five or so decks I have here.<br />For what it's worth, there' a lot more than one secret remaining.<br /><br /><strong>CPU:</strong><br />DMA/HDMA crash on CPU revision 1<br />If you start a DIV during a MUL, or vice versa, the results are psychotic<br />Initial values in WRAM are off the wall crazy; they vary per system and per reset ... approximating it to some degree would be good<br />On the very first frame only, the VIRQ value is off by one scanline<br />What is the exact timing involved in auto joypad polling? I only have an approximation because it is hard to test with manual input.<br />Need to wire up an Arduino to send deterministic data to it or something.<br /><br /><strong>SMP:</strong><br />The TEST register has two mystery bits that make the timers go crazy.<br /><br /><strong>DSP:</strong><br />When you mute a channel, it fades out and does not silence immediately<br /><br /><strong>PPU:</strong><br />We barely understand this at all. Almost no data on cycle timings here.<br />What if you use the MUL functionality during a Mode7 screen rendering?<br />What if you toggle a BGMODE in the middle of a scanline? (god help us if it actually gets acknowledged ...)<br /><br />I wrote some fun tests that wrote text on the screen by changing the registers mid-scanline. But otherwise, nobody's interested in emulating or coding for the PPU like this ... I currently have the only dot-based PPU renderer, and it's as slow as you think it is.<br /><br /><strong>SuperFX:</strong><br />What happens if the secondary pixel cache fills up and the SFX CPU is accessing RAM? Does it interleave writes, or does one stall the other? If the CPU can stall the secondary pixel cache, you could have a RAM-only program permanently cause it to stay full.<br /><br /><strong>SA-1:</strong><br />Some registers can only be accessed from the SA1, some from the CPU.<br />The stuff no games use is not understood: H/VIRQs (how does it time the H/V position?), clock-IRQs, etc.<br />How in god's name do we emulate the SA-1 memory conflict controller that stalls its CPU when the SNES CPU is reading from ROM/RAM? That's going to require monstrous overhead. We can't afford to step both the CPU and SA-1 one clock tick at a time.<br /><br /><strong>DSP-n/ST01n NEC DSP:</strong><br />How do OV1 and S1 flags work? Documentation sucks.<br /><br /><strong>Cx4 / Hitachi DSP:</strong><br />How does the program RAM work? It caches pages, but what's the overhead on that? Are all opcodes one cycle each?<br />Currently my emulation causes Rockman to die in the intro, unless you set a different frequency rate <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br />$70-77:0000-7fff always returns 0 when read. Looks like it has the option to have RAM pass through it, but MMX2/3 didn't use that.<br />What's with all the regs? $7f52 has to be 1 for MMX3 to read past 1MB; has to be 0 for MMX2 to read past 1MB.<br /><br /><strong>ST018:</strong><br />What's with the timer value thing?<br />Cydrak wrote a cool exploit to crush the stack and execute uploaded code out of RAM.<br /><br /><strong>SPC7110:</strong><br />What does $4808 and $58:0000-ffff do?<br />What in the hell was the intended usage of the interleave/skip functions on decompression? What are the timing restrictions there?<br />How do we emulate bad input data causing the decompressor to 'crash' and spit out junk?<br /><br /><strong>SPC7110-RTC:</strong><br />There's some interesting delays for certain actions, if you start reading too soon you get crazy stuff happening that's not in the datasheet.<br /><br /><strong>SDD1:</strong><br />Can DMAs happen on any channel? If not, which bits control activating decompression DMA?<br />How the hell does the SDD1 know when a DMA is taking place?<br />What's with the crazy read data when you set bank selections bigger than the ROM size?<br />How do we emulate this chip crashing on bad input data (like a string of 0x00s for a long time)?<br /><br /><strong>SRTC:</strong><br />There's a test register we know nothing about.<br />I haven't mapped out how the BCD works on invalid values. Took me a fucking week to do that for the SPC7110-RTC.<br /><br />&gt; Don't know when I get around to extract my ARM assembler/disassembler/emulator from no$gba for use in no$sns<br /><br />Yours may be a bit trickier because I bet you share ARMv4/v5 for your NDS emulation; but I use the same CPU core for the GBA and ST018 (ARMv3), and it works fine. I need to make a separate instruction table to omit the v4-only stuff though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Wed Nov 07, 2012 12:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2012-11-06T19:39:30-07:00</updated>
<published>2012-11-06T19:39:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102440#p102440</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102440#p102440"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102440#p102440"><![CDATA[
&gt; What anomie calls do_transfer is cleared at the start of every frame,<br />&gt; regardless of whether HDMA is enabled or not. Similarly, the completed flag is cleared.<br />Okay, then the bugfix for Ghouls &amp; Ghosts wasn't so wrong.<br /><br />&gt; keep in mind that any HDMA during DMA will kill that DMA channel mid-progress.<br />&gt; That'll fix a few bugs for you (I think in Bugs Bunny and some football game.)<br />Good to know, thanks! I've been a bit lazy there and hoped no game would rely on such things.<br /><br />I've just first-time tested bsnes (on a winxp computer via remote desktop, hoping that it'd be able to run bsnes... it worked... but it took me an hour to figure out how to load a rom-image into it (in short: the browse file gui turned out to be misleading... it didn't do anything except occasionally crashing... but loading roms via commandline worked... at least if they are padded to min 32kbytes, else nothing happens)). And I thought no$sns was a bit old-fashioned, and the more modern emus would work by click-and-play :-)<br /><br />Anyways - I got the test program running, and bsnes didn't reproduce the HDMA glitch either (ie. it didn't fetch the 55h data byte as reload/counter value). Looks as if there is at least one secret still hiding in the console.<br /><br />&gt; Not to derail, but did you ever get a chance to look at the ST018?<br />Don't know when I get around to extract my ARM assembler/disassembler/emulator from no$gba for use in no$sns (whenever that happens, I'll have a look at the st018 bios and ioports &amp; let you know if I find out anything new).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Tue Nov 06, 2012 7:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2012-11-06T17:00:26-07:00</updated>
<published>2012-11-06T17:00:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102435#p102435</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102435#p102435"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102435#p102435"><![CDATA[
What anomie calls do_transfer is cleared at the start of every frame, regardless of whether HDMA is enabled or not. Similarly, the completed flag is cleared.<br /><br />After that, -only if HDMA is enabled-, you then stop any active DMA that has HDMA enabled, copy the source address to the HDMA address, and then reload the line counter (and thus indirect address if required.) Since I'm mentioning it, keep in mind that any HDMA during DMA will kill that DMA channel mid-progress. That'll fix a few bugs for you (I think in Bugs Bunny and some football game.)<br /><br />Technically this process happens at the first cycle edge at or above V=0,H=12+8-dma_counter() for CPU revision 1, and V=0,H=12+dma_counter() for CPU revision 2. dma_counter() = total clocks executed since power on &amp; 7; (or &amp;6; if you want.)<br /><br />Or if you want, here's the implementation, I tried to follow anomie's names where possible, but I emulate some stuff he never knew about as well:<br /><!-- m --><a class="postlink" href="http://gitorious.org/bsnes/bsnes/blobs/master/bsnes/sfc/cpu/dma/dma.cpp">http://gitorious.org/bsnes/bsnes/blobs/ ... ma/dma.cpp</a><!-- m --><br /><!-- m --><a class="postlink" href="http://gitorious.org/bsnes/bsnes/blobs/master/bsnes/sfc/cpu/timing/timing.cpp">http://gitorious.org/bsnes/bsnes/blobs/ ... timing.cpp</a><!-- m --><br /><br />Not to derail, but did you ever get a chance to look at the ST018? I could never figure out what that one port was that looked like a timer (it was writing 21.47MHz/3 to it.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Tue Nov 06, 2012 5:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nocash]]></name></author>
<updated>2012-11-06T16:12:05-07:00</updated>
<published>2012-11-06T16:12:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102432#p102432</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102432#p102432"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=102432#p102432"><![CDATA[
I am having two problems with HDMAs started mid-frame. Both are probably related to the &quot;do_transfer&quot; flag (as how it is called in the anomie docs).<br /><br />The first problem is that Super Ghouls &amp; Ghosts isn't working in current no$sns version. The anomie doc isn't too clear about if/when/how do_transfer flags are initialized for HDMAs that are started mid-frame.<br />I got the game working by initializing the &quot;do_transfer&quot; flags of all disabled channels to zero in line 0.<br />That way the game does work, but I am not sure if it's a correct reproduction of what the hardware does(?)<br /><br />Alongsides, I've been writing a test program that does set up to HDMA channels, both with values as so:<br />420Ch=00h ;stop all HDMA channels<br />43x0h=02h ;transfer two bytes to [bbus+0], and [bbus+0]<br />43x1h=88h ;dummy bbus destination address (unused port 2188h)<br />42x4h=abus.src.bank<br />42x8h=abus.src.offs.lo<br />42x9h=abus.src.off.hi<br />42xAh=01h ;remain count<br />abus.src is pointing to &quot;02h,77h,55h,00h&quot; (repeat/pause 2 scanlines (02h), and transfer one data unit (77h,55h), and after the pause, finish the transfer (00h).<br />Then I am starting the first of the two channels in line 128, and watch the src/remain values in 43x8h..43xAh, which behave as expected (src increases, and remain decreases from 02h downto 00h).<br />A few scanlines later, I starting the second HDMA channel, which should do the same thing - but doesn't do so. Instead, it's decreasing remain count in 43xAh from 55h downwards... Is that a known effect?<br /><br />The second channel does apparently start with &quot;do_transfer=1&quot; (for whatever reason), causing it to transfer 02h,77h as data, and then fetch 55h as repeat count for next scanlines.<br />This happens only when starting the HDMA channels one after another; it doesn't happen when I do start BOTH channels in scanline 128 (then both do decrease remain from 02h downto 00h).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5211">nocash</a> — Tue Nov 06, 2012 4:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2012-10-24T15:46:41-07:00</updated>
<published>2012-10-24T15:46:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=101718#p101718</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=101718#p101718"/>
<title type="html"><![CDATA[Re: question about DMA registers]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=101718#p101718"><![CDATA[
Lots of great ideas, anyone here want to test them out on hardware and see? <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />I'm honestly pretty swamped from my end. Dumping more than 720 carts, databasing all the board layouts, hacking Far East of Eden Zero, trying to figure out a hires blending edge case in Marvelous, build an SNES expansion port connector, on and on.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Wed Oct 24, 2012 3:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-10-24T10:50:38-07:00</updated>
<published>2012-10-24T10:50:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=101700#p101700</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=101700#p101700"/>
<title type="html"><![CDATA[Address bus conflict?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9379&amp;p=101700#p101700"><![CDATA[
It's not a bus conflict between the DMA unit's address output and the CPU's address output, is it?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Oct 24, 2012 10:50 am</p><hr />
]]></content>
</entry>
</feed>