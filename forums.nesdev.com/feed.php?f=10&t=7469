<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=7469" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-02-14T18:51:53-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=7469</id>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2011-02-14T18:51:53-07:00</updated>
<published>2011-02-14T18:51:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73995#p73995</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73995#p73995"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73995#p73995"><![CDATA[
<div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">For example a projectile can't have an health variable, so instead the damage amount the projectile does is stored here instead (for an example).<br /></div><br /><br />In another project I was working on I treated projectiles exactly the same as other enemies.  Their health would get set to 1 and there was a separate field for damage, since regular enemies would damage the hero on collision too.  The only real difference was how they were created in-game.  Normal enemies were spawned by the level data, and projectile enemies were spawned by other enemies.  Under the hood they were the same.</div><br /><br />I actually just ran into a dilemma with my project's set up where I was having enemies/objects handle their own projectile weapons with their own RAM. A couple problems concerned speed and space consumption, but another problem arose that I'd never even thought about. When an enemy was deactivated, it's projectiles were deactivated also. That's why I completely redesigned things and separated the two. Now, there are 8 available slots for intelligent objects, and 8 available slots for "spontaneous" objects. Spontaneous objects include projectile weapons and powerups. They don't need as much RAM as enemies and generally deactivate when the player touches them. Separating the two also made the weapon independent of the enemy that instantiated it, so it wouldn't disappear when you killed the enemy.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Mon Feb 14, 2011 6:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2011-02-12T05:53:31-07:00</updated>
<published>2011-02-12T05:53:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73885#p73885</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73885#p73885"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73885#p73885"><![CDATA[
I interleave my object data like Tokumaru, except that I give them specific labels from the start.  The objects (enemies) in my current project don't vary much so I haven't needed to re-label fields for different uses.<br /><br />I like declaring the object data in interleaved blocks because it's really easy to loop through all objects with field labels + the X register.  I also like the convenience of being able to add and remove fields from my objects without messing up my object handling code too much.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />For example a projectile can't have an health variable, so instead the damage amount the projectile does is stored here instead (for an example).<br /></div><br /><br />In another project I was working on I treated projectiles exactly the same as other enemies.  Their health would get set to 1 and there was a separate field for damage, since regular enemies would damage the hero on collision too.  The only real difference was how they were created in-game.  Normal enemies were spawned by the level data, and projectile enemies were spawned by other enemies.  Under the hood they were the same.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Sat Feb 12, 2011 5:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2011-02-12T04:02:27-07:00</updated>
<published>2011-02-12T04:02:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73883#p73883</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73883#p73883"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73883#p73883"><![CDATA[
I do it exactly like Celius described. It works fairly well but it's still a pain in the *** to write AI code.<br /><br />By the way it's possible to use the same variable for different uses in function of the object. For example a projectile can't have an health variable, so instead the damage amount the projectile does is stored here instead (for an example).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Feb 12, 2011 4:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-02-11T18:37:05-07:00</updated>
<published>2011-02-11T18:37:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73869#p73869</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73869#p73869"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73869#p73869"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ObjectXL: .ds 8<br />ObjectXH: .ds 8<br />ObjectYL: .ds 8<br />ObjectYH: .ds 8<br />ObjectHealth: .ds 8<br />...<br /></div><br /></div><br />That's exactly it! Only I don't use such specific names in the declaration, I use "ObjectByte00", "ObjectByte01", etc., and near the object routines I use more significant names, like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ObjectXLo = ObjectByte00<br />ObjectXHi = ObjectByte01<br />&#40;...&#41;</div><br />I do this because not all objects use the same bytes for the same purposes, although a lot of them do.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Feb 11, 2011 6:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[frantik]]></name></author>
<updated>2011-02-11T17:48:08-07:00</updated>
<published>2011-02-11T17:48:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73868#p73868</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73868#p73868"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73868#p73868"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Putting local variables on the stack means you can't easily use the X register, as you need to TSX to get your frame pointer.<br /></div><br /><br />the code i created doesn't use "the" stack for variables, it uses "a" stack.. a separate one.  you still have to use x or y to indirectly access the data though<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3841">frantik</a> — Fri Feb 11, 2011 5:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2011-02-11T16:43:10-07:00</updated>
<published>2011-02-11T16:43:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73866#p73866</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73866#p73866"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73866#p73866"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Each object accesses its own bytes with indirect addressing through a single pointer variable that gets updated after each object is done being processed.<br /></div><br />That's the reason why I don't use linear blocks of memory for my objects. Having to modify Y in order to access any byte would be a pain in the ass. I figured that having the object memory interleaved would be more efficient. Loads and stores are 1 cycle faster than in indirect addressing, and there's no need to modify an index register to access different object properties, you just use labels. Also, modifying only the index register to access different object slots is quicker than modifying a 16-bit pointer. I took all that into consideration before deciding to go with the interleaved way. It just happens that, on the 6502, 99% of the time it's easier/faster to handle interleaved data than linear data.<br /></div><br /><br />That's a really great idea! So if I'm understanding correctly, you'll have something like this in RAM:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ObjectXL: .ds 8<br />ObjectXH: .ds 8<br />ObjectYL: .ds 8<br />ObjectYH: .ds 8<br />ObjectHealth: .ds 8<br />...<br /></div><br /><br />Then in your AI code, you'll have something like X loaded with the object number, so in your code you can do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx ObjectNumber<br />lda ObjectXL,x<br />sta Var<br />lda ObjectXH,x<br />sta Var2<br /></div><br /><br />instead of the slower:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldy #CoordXL<br />lda &#40;pointer&#41;,y<br />sta Var<br />iny<br />lda &#40;pointer&#41;,y<br />sta Var2<br /></div><br /><br />If I'm understanding that correctly, that is way more efficient than the way I'm doing it now. From what I see, going interleaved is almost always faster! I interleave a lot of my data, like tile definitions, but for some reason I never thought to interleave variables.<br /><br />If only I'd thought about doing this earlier! I could save hundreds of bytes and cycles...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri Feb 11, 2011 4:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-02-11T07:42:45-07:00</updated>
<published>2011-02-11T07:42:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73848#p73848</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73848#p73848"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73848#p73848"><![CDATA[
Putting local variables on the stack means you can't easily use the X register, as you need to TSX to get your frame pointer.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 11, 2011 7:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[frantik]]></name></author>
<updated>2011-02-11T07:20:23-07:00</updated>
<published>2011-02-11T07:20:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73847#p73847</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73847#p73847"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73847#p73847"><![CDATA[
not sure if this is what you mean, but i created ways to make functions which dynamically allocate memory  for their local variables on a stack<br /><br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=5038&amp;highlight=functions">http://nesdev.com/bbs/viewtopi ... =functions</a><!-- m --><br /><br />it's more a proof of concept than anything i've used in a program though<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3841">frantik</a> — Fri Feb 11, 2011 7:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-02-11T00:29:54-07:00</updated>
<published>2011-02-11T00:29:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73829#p73829</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73829#p73829"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73829#p73829"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />Each object accesses its own bytes with indirect addressing through a single pointer variable that gets updated after each object is done being processed.<br /></div><br />That's the reason why I don't use linear blocks of memory for my objects. Having to modify Y in order to access any byte would be a pain in the ass. I figured that having the object memory interleaved would be more efficient. Loads and stores are 1 cycle faster than in indirect addressing, and there's no need to modify an index register to access different object properties, you just use labels. Also, modifying only the index register to access different object slots is quicker than modifying a 16-bit pointer. I took all that into consideration before deciding to go with the interleaved way. It just happens that, on the 6502, 99% of the time it's easier/faster to handle interleaved data than linear data.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm not sure what sort of other techniques are used in other projects. I do speed a lot of things up by copying object coordinates and velocity values into ZP before handling those objects.<br /></div><br />I do most of these calculations in place, unless I need both index registers, in which case I have to copy the data to temporary locations.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Feb 11, 2011 12:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ManicGenius]]></name></author>
<updated>2011-02-10T21:51:34-07:00</updated>
<published>2011-02-10T21:51:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73817#p73817</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73817#p73817"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73817#p73817"><![CDATA[
From most posts so far it seems most people just use a set of fixed variables that they let objects utilize at a given time... Which definitely makes sense, cause like clueless said, on a system like this fragmentation and allocation management is a bitch.<br /><br />Though I kinda like tokumaru's singly-linked list deal.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4461">ManicGenius</a> — Thu Feb 10, 2011 9:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ManicGenius]]></name></author>
<updated>2011-02-10T21:49:02-07:00</updated>
<published>2011-02-10T21:49:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73816#p73816</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73816#p73816"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73816#p73816"><![CDATA[
<div class="quotetitle">clueless wrote:</div><div class="quotecontent"><br />I'm curious why you asked.  Do you have a use-case for a generic memory allocator?  If so, please share.  I'm really curious now on how a NES game might benefit form one.<br /></div><br /><br />Pretty much just general curiosity really. Old-school ASM programming is really kind've a lost art and thinking about high-level stuff in low-level terms on a limited instruction set is a fun thought game.<br /><br />A lot of the people on this forum are really knowledgable about things, and just trolling posts here helps a lot. This is just one thing I don't think I've seen a post on so I figured I'd ask.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4461">ManicGenius</a> — Thu Feb 10, 2011 9:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2011-02-10T21:31:37-07:00</updated>
<published>2011-02-10T21:31:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73815#p73815</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73815#p73815"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73815#p73815"><![CDATA[
<div class="quotetitle">ManicGenius wrote:</div><div class="quotecontent"><br />We usually end up having almost no time to code really. It's kind've sad since that's the fun part.<br /></div><br /><br />That sucks.  Coding is the fun part.<br /><br /><div class="quotetitle">ManicGenius wrote:</div><div class="quotecontent"><br />Do any of you veterans out there use dynamic memory allocation techniques when storing/creating/freeing objects/entities? Or do you primarily just use fixed memory tables with a set position.<br /></div> <br /><br />Back to your original post.  I understood your question to ask if anyone was using a "heap" and implemented a generic mamory allocator, like malloc() / free() / realloc() / sbrk() / omgplzcrashmehardnow().<br /><br />I know that cc65 has malloc/free as part of its library.  I've used them on a Apple II project many years ago.  But I can't imagine using them for a NES game.  Possibly for doing A-star path finding, but I can imagine a more (speed) efficient implementation using memory slots and a linked list (in unused slots) to point to the next (like tokumaru described).<br /><br />A huge problem with malloc/free on a system with limited memory would be memory fragmentation.  One could use a SLAB allocator I suppose.  But all of these things have CPU overhead and consume memory for heap mgmt.<br /><br />I'm curious why you asked.  Do you have a use-case for a generic memory allocator?  If so, please share.  I'm really curious now on how a NES game might benefit form one.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Thu Feb 10, 2011 9:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ManicGenius]]></name></author>
<updated>2011-02-10T21:27:18-07:00</updated>
<published>2011-02-10T21:27:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73814#p73814</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73814#p73814"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73814#p73814"><![CDATA[
<div class="quotetitle">clueless wrote:</div><div class="quotecontent"><br />My point is (other than a little bragging):  <strong>Data structures and IO patterns _do_ matter.  Even incredibly powerful modern computers and networks can be brought to their knees by bad coding practices.</strong><br /></div><br /><br />... I'm kinda not arguing against this, you do realize that.  I'm just trying in a very poor way to explain that I have never had a need to reinvent the wheel in my day job.  Our deadlines are too stringent to bother, so we usually use libraries. It's a crap practice for programmers who love doing everything by themselves in a really low level, but when you spend less than 1% of your time coding it kind've happens. (Most of my time is writing papers, not coding.)<br /><br />The 6502 is a completely different beast to me compared to what I'm used to.  That was the entire point about the beginning of this topic in the first place, I wanted to get a overview about how everyone else is doing things but it kind've got off-topic.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4461">ManicGenius</a> — Thu Feb 10, 2011 9:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2011-02-10T20:17:20-07:00</updated>
<published>2011-02-10T20:17:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73807#p73807</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73807#p73807"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73807#p73807"><![CDATA[
We were evaluating a vendor product for viewing a certain kind of data file (most 80-byte records of various types, but also includes variable length TIFF images embedded inside, all text is EBCDIC; yeah, it was designed by a committee too).  These files are typically large (200MB to 1GB).  <br /><br />This vendor app was written in dot-net by a total fucking idiot.  His code took 45 minutes to read a 800MB file over a network drive mount (client + server on same network segment).  So I debugged it using tcpdump / wireshark, procexp and filemon.  His code would issue a 4K read request to the kernel for EACH 1, 2 or 4 byte field within each record.  Overlapping reads.  Literally:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">seek 0, seek_set<br />read 4096<br />seek 2, seek_set<br />read 4096<br />.....<br /></div><br /><br />I filed a bug report.  He didn't understand the problem.  I sent in my data.  He finally got it.  They fixed the bug, but wanted to up their price by $2K for the fix.  I said fuck this (if you haven't gathered, I was pissed at their sloppiness).<br /><br />Over one weekend I wrote a win32 gui app in C++ using the pure win32 api (no mfc, no dot-crap, no winforms, gdi++ to read TIFFs from a memory stream).  I mem-map the data file with a 256MB window that slides 64MB at a time.  My app can process a 800MB file from local disk in 7 seconds (when its hot in the cache) and a 1G file over the network at near wire speed (12 seconds or so).<br /><br />His app was a memory hog.  Mine uses a bit of memory, but not a terrible amount.  I designed a hybrid data structure (part tree, part linked-list) to hold the file's hierarchy in memory as I parsed it.  The user can then search for records and the app displays the image and other record data.<br /><br />I wanted to open-source the app and dump it on the Internet.  As much as my bosses thought that would be funny, they did not permit me to. <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />My point is (other than a little bragging):  <strong>Data structures and IO patterns _do_ matter.  Even incredibly powerful modern computers and networks can be brought to their knees by bad coding practices.</strong><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Thu Feb 10, 2011 8:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-02-10T19:36:42-07:00</updated>
<published>2011-02-10T19:36:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73802#p73802</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73802#p73802"/>
<title type="html"><![CDATA[Dynamic Memory Allocation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7469&amp;p=73802#p73802"><![CDATA[
<div class="quotetitle">ManicGenius wrote:</div><div class="quotecontent"><br />Day job as a programmer: Don't care 'bout what kind of structure I use, just as long as I'm storing data somehow (usually).<br />[...]<br />6502 ASM: Vital to the performance of the app due to severe memory and speed restrictions.<br /></div><br />At my work, my Python code processes product listing changes for 100,000 different products in two minutes. It has to use the right data structure to look up the categories, calculate the brand based on the SKU prefix, calculate sale prices based on MSRP, minimum advertised price, and cost, and somehow chew through 80 MB of product descriptions without swapping. And then it has to do it all over again for each of several web sites on which we list products.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That and I have the wonders of garbage collection and don't give a damn about memory unless there's a leak.<br /></div><br />In a garbage-collected environment, you still have to null out reference variables when you're done with an object. Otherwise, an object may remain reachable longer than you expect and cause a leak. The care needed for this is almost the care needed for an RAII environment with auto pointers like C++.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 10, 2011 7:36 pm</p><hr />
]]></content>
</entry>
</feed>