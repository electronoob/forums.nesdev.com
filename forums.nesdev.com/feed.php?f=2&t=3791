<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=3791" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-12-21T13:11:03-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=3791</id>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2007-12-21T13:11:03-07:00</updated>
<published>2007-12-21T13:11:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29789#p29789</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29789#p29789"/>
<title type="html"><![CDATA[Question about AND]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29789#p29789"><![CDATA[
If you use many flags, which I'm sure you will, you may want to have 8 flags in a byte instead of just 1. It will take a few extra cycles to do AND before every comparison. So if you wanted to test bit #5, you'd have to do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda FlagHolder ;This byte holds 8 flags<br />and #$20 ; We test bit 5 by clearing all other bits except bit 5<br />beq FlagNotSet ;If the flag is not set, the value will be EQual to 0, so branch.<br />jsr FlagSet ;If the flag is set, the value will Not be Equal to 0, and will not branch, and it will come to here.<br /></div><br /><br />The only reason I say this is because the first minigame I made had me checking for flags, and I only used the first bit of every bit to determine if a flag was set. The code was ugly, sloppy, and a terrible space-waster.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri Dec 21, 2007 1:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-12-21T12:38:10-07:00</updated>
<published>2007-12-21T12:38:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29787#p29787</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29787#p29787"/>
<title type="html"><![CDATA[Question about AND]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29787#p29787"><![CDATA[
Yes, you can store the result of an AND to memory.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  ; prepare memory<br />  lda #%11111101<br />  sta $00<br />  lda #%11111111<br />  sta $01<br /><br />  ; test AND instruction<br />  lda $00  ; A has %11111101<br />  and #%00000010  ; A has 00000000<br />  sta $02  ; $02 has 00000000<br /><br />  lda $00  ; A has %11111111<br />  and #%00000010  ; A has 00000000<br />  sta $03  ; $03 has 00000010<br /></div><br />Then when you load it back again, you can use BNE or BEQ to test whether the result was zero or nonzero:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  lda $03<br />  beq dontRedraw<br />  jsr redrawLine<br />dontRedraw:<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Dec 21, 2007 12:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-12-21T12:38:49-07:00</updated>
<published>2007-12-21T12:37:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29786#p29786</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29786#p29786"/>
<title type="html"><![CDATA[Question about AND]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29786#p29786"><![CDATA[
<div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #%11111111<br />and #%00000010<br />sta flag<br />; flag = %00000010<br /><br />lda #%00000000<br />and #%00000010<br />sta flag<br />; flag = %00000000</div><br />If you don't mind flag being 0 for false and %00000010 for true, then no LSR is needed. For example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda flag<br />bne flag_is_true<br />flag_is_false:<br />...<br /><br />flag_is_true:<br />...</div><br />Don't you have something you can run 6502 code with to try these things?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Dec 21, 2007 12:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sivak]]></name></author>
<updated>2007-12-21T12:08:09-07:00</updated>
<published>2007-12-21T12:08:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29785#p29785</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29785#p29785"/>
<title type="html"><![CDATA[Question about AND]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3791&amp;p=29785#p29785"><![CDATA[
Alright.  I know that in DOS assembly, you can use AND on a register to clear bits by having a binary mask of what you want cleared set to 0 and what you don't want cleared as 1.  Then it stores the new number in the same register.<br /><br />What I want to be able to do in 6502 is use an AND statement on something, use a mask to clear all but one bit.  Say I want to look at bit #1 (mask of %00000010).  Can I then take that bit I looked at and store its 1 or 0 into something or do I have to use a LSR and store after that?<br /><br />Basically say I had a variable that had the binary value:  %11111101, I loaded that into A and then performed AND with %00000010.  Obviously bit #1 is 0.  Can I take that 0 and store it without having to use a bunch of CMP statements?<br /><br />Sorry if this sounds strange, but I tried wording it as best I could.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3374">Sivak</a> — Fri Dec 21, 2007 12:08 pm</p><hr />
]]></content>
</entry>
</feed>