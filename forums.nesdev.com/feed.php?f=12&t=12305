<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=12305" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-03-19T00:31:03-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=12305</id>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2015-03-03T22:03:29-07:00</updated>
<published>2015-03-03T22:03:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142387#p142387</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142387#p142387"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142387#p142387"><![CDATA[
Maybe I'll use a forward flying kick as the normal attack, instead of half of a roundhouse kick.<br /><br />Heck, it could be that I just over-animated it, and if I cut a frame or two out, it will look right.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Tue Mar 03, 2015 10:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-03-03T19:27:58-07:00</updated>
<published>2015-03-03T19:27:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142382#p142382</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142382#p142382"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142382#p142382"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />I might as well use Espozo's idea since I ran into a little trouble today with vram overload in my Alisha's Adventure, though I want to fix some other issues first.<br /></div><br />Hold on now! You still need to pay me the royalties. (It's patented. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> )<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />-explosions cause too much flicker and clutter up the view too much.<br /></div><br />Honestly, I don't think explosions really fit for what you're using them for. I would recommend using a spikey cloud like thing you would see in a comic book for whenever you hit an enemy, like the affect that plays whenever you jump on an enemy in DKC. You could use and explosion for when the enemy is defeated though, and make it to where it isn't permanently in vram like it is now.<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />kicks look weird.<br /></div><br />Would you be interested in someone helping you with artwork?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Tue Mar 03, 2015 7:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2015-03-02T22:59:18-07:00</updated>
<published>2015-03-02T22:59:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142334#p142334</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142334#p142334"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=142334#p142334"><![CDATA[
I might as well use Espozo's idea since I ran into a little trouble today with vram overload in my Alisha's Adventure, though I want to fix some other issues first.<br /><br />-players collision box is too big.<br />-kicks look weird.<br />-explosions cause too much flicker and clutter up the view too much.<br />-button scheme needs a little reworking.<br />-BG collision routine takes too much CPU time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Mon Mar 02, 2015 10:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2015-02-22T22:45:35-07:00</updated>
<published>2015-02-22T22:45:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141818#p141818</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141818#p141818"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141818#p141818"><![CDATA[
I <em>am</em> using the version that's clocked twice as fast.  And there are no other programmable special chips for the Super NES that are better at bitplane blitting.  I'd have to make something up, which would essentially render this project non-executable.<br /><br />(I've been busy with work, but I really should mock up a bullet-rendering engine and start getting a feel for what the real-world performance is like.  Last I heard, emulated Super FX chips weren't exactly the same as real ones, but I think higan is pretty close...)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Sun Feb 22, 2015 10:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-22T22:40:52-07:00</updated>
<published>2015-02-22T22:40:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141816#p141816</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141816#p141816"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141816#p141816"><![CDATA[
Who said you had to use the SuperFX... Anyway, If you run out of time using the normal SuperFX chip, you could use the version that's clocked twice as fast, unless you're still afraid of running out of time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sun Feb 22, 2015 10:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2015-02-22T22:35:28-07:00</updated>
<published>2015-02-22T22:35:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141815#p141815</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141815#p141815"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141815#p141815"><![CDATA[
According to my calculations a GSU2 in high-speed mode (Super FX2) would be fairly heavily loaded just drawing the bullets at 4bpp and 30 fps.  In fact I'm still not certain it's possible to do a 1:1 port, though I think it's close enough that if it comes to it, a few tricks ought to get me over the line.  We'll see.  If all else fails I might have to accept a bit of slowdown.<br /><br />In any case doing a scaling/rotating background at the same time, especially an 8bpp one, would completely blow away my processor time budget.  And if it were 8bpp, it would take twice as long to DMA.  Flipping it on its side really isn't an option; the feel would be completely different, which isn't really acceptable for a port.<br /><br />I could scale it down and not use Mode 7 for the backgrounds, but I don't want to, and I think the system can handle what I want to do.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Sun Feb 22, 2015 10:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-22T22:07:57-07:00</updated>
<published>2015-02-22T22:07:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141813#p141813</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141813#p141813"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141813#p141813"><![CDATA[
At how much stuff you are doing (enhancement chips, buffers, changing object tables) couldn't you just have it to where the entire playing field is just a buffer, similar to Doom? If you're worried about frame rate, you could always flip the image on it's side for more DMA bandwidth. Off course, the pictures on its side. <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sun Feb 22, 2015 10:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2015-02-22T22:12:22-07:00</updated>
<published>2015-02-22T21:59:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141812#p141812</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141812#p141812"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141812#p141812"><![CDATA[
In the general case, yes, it'd be tricky.  My game is a unique case in that a lot of the sprites have a defined position on the screen that doesn't change during gameplay.<br /><br />It's a bullet hell port, that can easily have hundreds of bullets onscreen, and some of the backgrounds really want to be in Mode 7.  This means (a) I need the Super FX chip or something similar to blit the bullets to a surface, and (b) the blitted surface sometimes has to be a tiled sprite layer, because Mode 7 doesn't let you use any other background layers.  The sprites in the bullet layer never move, so they only need to be stored once for a given frame.<br /><br />Plus, the sidebar with score and lives and whatnot would eat too many sprites if I just overlaid it on Mode 7, so I need to switch from Mode 7 to Mode 1 about two-thirds of the way across the screen.  This generates a column of garbage a few tiles wide, which needs to be masked with - you guessed it - more sprites.  Which also never move...<br /><br />...<br /><br />I figure I can probably get away with using one sprite table for all of the stuff that can show up anywhere plus maybe one or two of the 32x32 mode switch masking sprites.  Then I can simply modify the offset of the second table to give me 3/2 buffering for the bullet layer, in which I use two tables for a frame, overwrite the third table during VBlank, use the same two tables (giving me 30 fps), overwrite one of the just-used tables, and then change to using the two newly-overwritten tables for the third frame; rinse and repeat.  Minimal duplication.  I may have to reserve more space for BG tiles, which would cut into the space available for Mode 7 data, but I'll cross that bridge when I come to it.<br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />Maybe your code could look to see where you object is vertically and only update the table that corresponds to what part of the screen it's on? You'd still have to write to both if it is in the dead center.<br /></div><br />Depending on what you were doing, you might even want to move the table switch up and down depending on where stuff is...  That wouldn't work for my game, but I'm sure it's theoretically possible to come up with a scenario in which it'd be useful...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Sun Feb 22, 2015 9:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-22T19:35:58-07:00</updated>
<published>2015-02-22T19:35:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141788#p141788</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141788#p141788"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141788#p141788"><![CDATA[
If you were doing this though, wouldn't you have to duplicate a bunch of tiles to be on both sprite tables? Basically, you have to reserve half of vram for sprites even if you really only need about 24KB. The main problem I see with this though is that you'd have to update vram twice for one object. Maybe your code could look to see where you object is vertically and only update the table that corresponds to what part of the screen it's on? You'd still have to write to both if it is in the dead center.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sun Feb 22, 2015 7:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2015-03-19T00:31:03-07:00</updated>
<published>2015-02-22T14:41:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141770#p141770</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141770#p141770"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=141770#p141770"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />I'm not sure if you can change OBSEL during HBlank (though I certainly hope so, and I should probably test this), but I know you can change it between frames.<br /></div><br />Well, last night I decided to check this, and now I'm sure.  You <em>can</em> change at least the table locations by writing to OBSEL during HBlank.  Transition is seamless, so far as I can tell.<br /><br />(This test ROM lets you move a red square around the screen.  Halfway down, it turns green.  No modifications to CGRAM are involved.)<br /><br />It's probable I'm not the first to find this out, since every emulator I tried (even ZSNES) gets it right.  But I wanted to be certain, because this was one of the few remaining potential wrenches in the works that could have derailed my porting project.  I have a lot of sprites that never move, and even without anything else going on they don't fit in 16 kB...  unless I waste a lot of 8x8 sprites to avoid tile duplication, in which case they seem to just barely fit in 16 kB with little or no room for anything else...<br /><br />EDIT:  replaced .rar with .7z in deference to the moderators.  Also note that this doesn't quite work properly in the latest version of higan; the switch seems to be reversed (green on top, red on bottom).  In the accuracy core, the top scanline matches the bottom half of the screen as far back as bsnes v072.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Sun Feb 22, 2015 2:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-04T21:18:46-07:00</updated>
<published>2015-02-04T21:18:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140619#p140619</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140619#p140619"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140619#p140619"><![CDATA[
A bit of a bump but, you know, another thing I'm starting to wonder is how you are going to tell the metasprite routine where to look for the tiles in each sprite. It's easy to do it for x and y position, because you can always find each sprite's position relative to the metasprites x and y, but you cant really do this for character data, because in the routine I made, there are plenty of times where there could be a gap in between sprites in a metasprite do to how it handles double sized sprites. I have my original metasprite code (that still has plenty of work to be done <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> ) right here,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">: lda MetaspriteCount       ; If MetaspriteCount is zero, then we're done.  Otherwise we have<br />  beq done                  ; metasprites to iterate over and populate for DMA (see VBlank)<br />  lda MetaspriteTable,x     ; 1st byte = sprite X position (value 0-255)<br />  adc MetaspriteXPosition<br />  and #$00FF<br />  sta SpriteBuf1,y          ; Store sprite X position SpriteBuf1+y<br />  lda MetaspriteTable+2,x   ; 2nd byte = sprite Y position (value 0-255)<br />  adc MetaspriteYPosition<br />  and #$00FF<br />  sta SpriteBuf1+1,y        ; Store sprite Y position in SpriteBuf1+1,y<br />  lda MetaspriteTable+4,x   ; 2nd byte = sprite Y position (value 0-255)<br />  sta SpriteBuf1+2,y        ; Store sprite Y position in SpriteBuf1+1,y<br />  txa<br />  clc<br />  adc #$0006<br />  tax<br />  tya<br />  clc<br />  adc #$0004                ; Increment Y by 4 because each sprite in the OAM table has 4 bytes<br />  tay                      <br />  dec MetaspriteCount       ; Decrement MetaspriteCount by 1<br />  bra :-                    ; Back to the loop...</div><br /><br />and the makeshift one right here. (The hard part was trying to index for 3 different things) I really don't want to jump the routine that finds tile numbers in the metasprite routine, because that would cause me to find the tile number of sprites that aren't even going to undergo any animation change.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">: lda MetaspriteCount       ; If MetaspriteCount is zero, then we're done.  Otherwise we have<br />  beq done                  ; metasprites to iterate over and populate for DMA (see VBlank)<br />  lda MetaspriteTable,x     ; 1st byte = sprite X position (value 0-255)<br />  adc MetaspriteXPosition<br />  and #$00FF<br />  sta SpriteBuf1,y          ; Store sprite X position SpriteBuf1+y<br />  lda MetaspriteTable+2,x   ; 2nd byte = sprite Y position (value 0-255)<br />  adc MetaspriteYPosition<br />  and #$00FF<br />  sta SpriteBuf1+1,y        ; Store sprite Y position in SpriteBuf1+1,y<br />  lda MetaspriteTable+4,x   ; 2nd byte = sprite Y position (value 0-255)<br />  sty TempY1<br />  ldy MetaspriteCharacterOffsetOffset ;(a bit redundant, but I can't think of a better title right now...)<br />  clc<br />  adc MetaspriteCharacterOffset,y<br />  iny<br />  sty MetaspriteCharacterOffsetOffset<br />  ldy TempY1<br />  and #$01FF<br />  sta SpriteBuf1+2,y        ; Store sprite Y position in SpriteBuf1+1,y<br />  txa<br />  clc<br />  adc #$0006<br />  tax<br />  tya<br />  clc<br />  adc #$0004                ; Increment Y by 4 because each sprite in the OAM table has 4 bytes<br />  tay                      <br />  dec MetaspriteCount       ; Decrement MetaspriteCount by 1<br />  bra :-                    ; Back to the loop...</div><br />Just so you know, this is using ca65 assembler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Wed Feb 04, 2015 9:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-02T21:24:54-07:00</updated>
<published>2015-02-02T21:24:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140448#p140448</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140448#p140448"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140448#p140448"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />I'm wondering.  If you have the same sprite shown on two or more consecutive frames, and to save on DMA bandwidth, your keeping the sprites in the same place in vram, how were you planning on keeping track of the locations?  I have two ideas:<br /><br />1) Each object slot holds the tile numbers for all sprites in the object's metasprite.<br />2) Each object slot holds a pointer to where in the OAM the object's metasprite was written to in the previous frame, so it can look up the tile numbers.<br /></div><br />The way I was thinking it would be to go through the code, find the result, and then store it in a register offset by what sprite it is currently on. (So there will be 128) When my code jumps to the metasprite routine, it loads the values for the metasprite table in a sprite buffer offset by y. You probably load the tile number byte offset by y (unfortunately, this means using 512 registers...) and then adding the number to the bytes in OAM that hold the Character selection bits. To be completely honest with you, I really haven't even thought this far. (And it's not even far at all... <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> )<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Mon Feb 02, 2015 9:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2015-02-02T19:09:27-07:00</updated>
<published>2015-02-02T19:09:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140436#p140436</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140436#p140436"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140436#p140436"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />I meant with the 16x16 and 32x32 combo. (probably should have specified that... <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> ) Also just thinking, I know this isn't exactly a sprite issue, (its a BG one) but many games on the PCE uses sprites for background elements, reducing the amount of sprites to use by a bit.<br /></div><br /><br /> Depends on the game. It's not that common, but Lords of Thunder and Dracula X:Rondo of blood probably do it the most.<br />I made a video a while back showing a PCE game using sprites for non object stuffs:<br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=Mm4pKt_LE2k">https://www.youtube.com/watch?v=Mm4pKt_LE2k</a><!-- m --><br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=PQX8KfYT-zc">https://www.youtube.com/watch?v=PQX8KfYT-zc</a><!-- m --><br />All real BG stuff is greyscale and all sprites are monochrome (green or red). If it looks like separate scrolling layers in the BG and it's not monochrome green/red, then it's either hsync line scrolls and/or dynamic tiles.<br /><br /> Watch the second video, then watch <a href="http://youtu.be/fqL0ebFmOpg?t=6m41s" class="postlink">this</a>. The pillars are sprites. As much as sprites are on screen at that moment, the SAT isn't maxed out AFAIK. Though it's probably pretty close. But I find those results <em>very </em>acceptable, considering you really <em>don't</em> see snes games with such a number of objects on screen - let alone exceed it. <br /><br /> The problem with using sprites for more complex overlapping BG parts, is that it increases the risk of hitting the sprite scanline pixel limit - <em>not </em>maxing out the SAT. I have a WIP demo that uses a ton of sprites to simulate a large free-directional second BG layer on the PCE, <em>way </em>more than any official game and the SAT isn't maxed (enough entries left for a SMB3 or Sonic style game objects. It's the scanline limit that's the issue, not so much the SAT size). Anyway, I can't think of a better real example than the last video I linked (superhard mode for PCECD; revenge bullets), for how the SAT size isn't an issue at that res. Matter of fact, on the Genesis it's 64 too. It's only bumped to 80 when using 320 mode, because there's 25% more pixel coverage needed for the same screen real estate/area. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Reportedly the vertical flip function works on each half separately,<br /></div><br />Which kinda makes then useless. That, and the fixed rectangle size for both entries. <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />because it said the PCE used 16x16 sized sprites as its smallest size<br /></div><br />That's correct. Though there's a way to make it do vertical cell size of 8 pixel increments (XXby8,XXby16,XXby32), but no official games do this. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you had the entire screen filled with 32x64 sprites on the PCE, you could do the same think with the SNES because although you don't have 32x64 sized sprites, you still have 2x the amount of sprites, and they are 32x32, so you could just piece them together<br /></div><br /><br /> But see, this is my point. As soon as you start to compare/argue/whatever <em><span style="text-decoration: underline">larger </span></em>sprite sizes than 16x16, it really becomes irrelevant. Because you're gonna hit that sprite scanline pixel limit way <em><span style="text-decoration: underline">before </span></em>you hit the full entry of the SAT/OAM. That's my point. From games that I played over the years of that era, 16x16, 32x16, 16x32, and 32x32 seem to be the most common sizes. Or close to those sizes but the same range (Genesis has more options for in between sizes). <br /><br /> Your examples aid my point; the larger SAT/OAM-table is meaning less for sprite sizes outside of 8x8/16x16 - because all these system have a pretty limited sprite scanline limit, and you're gonna hit that limit much before you hit the table limit.<br /><br /> I do think the 8x8/16x16+128OAMsize has a lot of advantages and is the <em>best </em>mode of the SNES. It's just more cpu overhead (and coupled of the upper layout of the OAM table, etc). 16x16/32x32 makes sense for reducing cpu overhead, but I don't think it's a better mode; just more practical in regards to cpu usage. I just don't see how the the 128 table size is advantageous outside of <em>that </em>mode, especially when real world examples show otherwise. <br /><br /><br /> If you're interested in discussing this further (examples, etc), maybe we should start a new thread instead of derailing/side tracking this one?  <br /><br />So this organization routine you're writing - it's for 16x16/32x32 mode right? Because of how the sprites cell rows are interleaved?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Mon Feb 02, 2015 7:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2015-02-02T01:08:00-07:00</updated>
<published>2015-02-02T01:08:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140374#p140374</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140374#p140374"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140374#p140374"><![CDATA[
I'm wondering.  If you have the same sprite shown on two or more consecutive frames, and to save on DMA bandwidth, your keeping the sprites in the same place in vram, how were you planning on keeping track of the locations?  I have two ideas:<br /><br />1) Each object slot holds the tile numbers for all sprites in the object's metasprite.<br />2) Each object slot holds a pointer to where in the OAM the object's metasprite was written to in the previous frame, so it can look up the tile numbers.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Mon Feb 02, 2015 1:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-01T20:35:38-07:00</updated>
<published>2015-02-01T20:35:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140363#p140363</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140363#p140363"/>
<title type="html"><![CDATA[Re: Dynamic Sprite Vram Routine Ideas]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12305&amp;p=140363#p140363"><![CDATA[
I meant with the 16x16 and 32x32 combo. (probably should have specified that... <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> ) Also just thinking, I know this isn't exactly a sprite issue, (its a BG one) but many games on the PCE uses sprites for background elements, reducing the amount of sprites to use by a bit.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sun Feb 01, 2015 8:35 pm</p><hr />
]]></content>
</entry>
</feed>