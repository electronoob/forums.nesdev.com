<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CPU-test: cpu_exec_space [DONE]</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CPU-test: cpu_exec_space [DONE]</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8755">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8755</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sun Mar 25, 2012 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CPU-test: cpu_exec_space [DONE]</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In case anyone ever gets an urge to write "JSR $2001" to their NES code, this test verifies that everything works as it should.
<br />
<br />Download test at: <!-- m --><a class="postlink" href="http://bisqwit.iki.fi/src/nes_tests/cpu_exec_space.zip">http://bisqwit.iki.fi/src/nes_tests/cpu_exec_space.zip</a><!-- m -->
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NES Memory Execution Tests<br />----------------------------------<br />These tests verify that the CPU can execute code from any possible<br />memory location, even if that is mapped as I/O space.<br /><br />In addition, two obscure side effects are tested:<br /><br />1. The PPU open bus. Any write to PPU will update the open bus.<br />&nbsp; &nbsp;Reading from 2002 updates the low 5 bits. Reading from 2007<br />&nbsp; &nbsp;updates 8 bits. The open bus is shown in any addresss/bit<br />&nbsp; &nbsp;that the PPU does not write to. Read from 2000, you get open bus.<br />&nbsp; &nbsp;Read from 2006, ditto. Read from 2002, you get that in high 3 bits.<br />&nbsp; &nbsp;Additionally, the open bus decays automatically to zero in about one<br />&nbsp; &nbsp;second if not refreshed.<br />&nbsp; &nbsp;This test requires that a value written to $2003 can be read back<br />&nbsp; &nbsp;from $2001 within a time window of one or two frames.<br /><br />2. One-byte opcodes must issue a dummy read to the byte immediately<br />&nbsp; &nbsp;following that obcode. The CPU always does a fetch of the second<br />&nbsp; &nbsp;byte, before it has even begun executing the opcode in the first<br />&nbsp; &nbsp;place.<br /><br />Additionally, the following PPU features must be working properly:<br /><br />1. PPU memory writes and reads through $2006/$2007<br />2. The address high/low toggle reset at $2002<br />3. A single write through $2006 must not affect the address used by $2007<br />4. NMI should fire sometimes to salvage a broken program, if the JSR/JMP<br />&nbsp; &nbsp;never reaches its intended destination. &#40;Only required in the<br />&nbsp; &nbsp;test IF the CPU and/or open bus are not working properly.&#41; <br /><br />The test is done FIVE times: Once with JSR $2001, again with JMP $2001,<br />and then with RTS &#40;with target address of $2001&#41;, and then with a JMP&nbsp; <br />that expects to return with an RTI opcode. Finally, with a regular&nbsp; &nbsp; &nbsp;<br />JSR, but the return from the code is done through a BRK instruction.&nbsp; &nbsp;<br /><br />Tests and results:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#2: PPU memory access through $2007 does not work properly. &#40;Use other tests to determine the exact problem.&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#3: PPU open bus implementation is missing or incomplete: A write to $2003, followed by a read from $2001 should return the same value as was written.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#4: The RTS at $2001 was never executed. &#40;If NMI has not been implemented in the emulator, the symptom of this failure is that the program crashes and does not output either &quot;Fail&quot; nor &quot;Passed&quot;&#41;.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#5: An RTS opcode should still do a dummy fetch of the next opcode.&nbsp; &#40;The same goes for all one-byte opcodes, really.&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#6: I have no idea what happened, but the test did not work as supposed to. In any case, the problem is in the PPU.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#7: A jump to $2001 should never execute code from $8001 / $9001 / $A001 / $B001 / $C001 / $D001 / $E001.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#8: Okay, the test passed when JSR was used, but NOT when the opcode was JMP. I definitely did not think any emulator would trigger this result.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#9: Your PPU is broken in mind-defyingly random ways.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#10: RTS to $2001 never returned. This message never gets displayed.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#11: The test passed when JSR was used, and when JMP was used, but NOT when RTS was used. Caught ya! Paranoia wins.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#12: Your PPU gave up reason at the last moment.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#13: JMP to $2001 never returned. Again, this message never gets displayed.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#14: An RTI opcode should still do a dummy fetch of the next opcode.&nbsp; &#40;The same goes for all one-byte opcodes, really.&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#15: An RTI opcode should not destroy the PPU. Somehow that still appears to be the case here.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#16: IRQ occurred uncalled<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#17: JSR to $2001 never returned. &#40;Never displayed&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#18: The BRK instruction should issue an automatic fetch of the byte that follows right after the BRK. &#40;The same goes for all one-byte opcodes, but with BRK it should be a bit more obvious than with others.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#19: A BRK opcode should not destroy the PPU. Somehow that still appears to be the case here.<br /><br /><br /><br />Expected output:<br />&nbsp; &nbsp; &nbsp; &nbsp; TEST: test_cpu_exec_space<br />&nbsp; &nbsp; &nbsp; &nbsp; This program verifies that the<br />&nbsp; &nbsp; &nbsp; &nbsp; CPU can execute code from any <br />&nbsp; &nbsp; &nbsp; &nbsp; possible location that it can <br />&nbsp; &nbsp; &nbsp; &nbsp; address, including I/O space. <br /><br />&nbsp; &nbsp; &nbsp; &nbsp; In addition, it will be tested<br />&nbsp; &nbsp; &nbsp; &nbsp; that an RTS instruction does a<br />&nbsp; &nbsp; &nbsp; &nbsp; dummy read of the byte that&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; immediately follows the<br />&nbsp; &nbsp; &nbsp; &nbsp; instructions.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; JSR test OK<br />&nbsp; &nbsp; &nbsp; &nbsp; JMP test OK<br />&nbsp; &nbsp; &nbsp; &nbsp; RTS test OK<br />&nbsp; &nbsp; &nbsp; &nbsp; JMP+RTI test OK<br />&nbsp; &nbsp; &nbsp; &nbsp; BRK test OK<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; Passed<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FHorse</b> [ Sun Mar 25, 2012 3:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Many thx Bisqwit, with this test I discovered that I've forgotten to implement the dummy fetch in the RTS. Fixed and now I pass the test without problems.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sun Mar 25, 2012 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice. I updated the test and added test also for the RTI and BRK opcodes.
<br />
<br />I have no idea why, but Nintendulator fails #18.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 25, 2012 4:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Failed #5 here... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Fixing...
<br />
<br /><strong>EDIT:</strong> RTS, RTI, BRK... It's OK now. Anyway, <em>much</em> interesting that a readvalue(cpu-&gt;PC) makes difference, instead of just clocking the PPU. The same "rule" probably occurs with the NMI/IRQ/RESET interrupts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sun Mar 25, 2012 5:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">Anyway, <em>much</em> interesting that a readvalue(cpu-&gt;PC) makes difference, instead of just clocking the PPU.</div><br />Only in such a contrived example as this. But technically, if the cartridge can monitor reads, it can also act on whether the CPU does this stuff or not.<br /><br /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">The same "rule" probably occurs with the NMI/IRQ/RESET interrupts.</div>
<br />I was pondering the same. Basically, any and all instructions begin with two sequential fetches from the current PC location. (Which are actually performed at the end of the previous instruction.) It's just that the one-byte instructions discard the results of the second fetch, and do not increment PC (so the same byte is fetched twice).
<br />As I understand it, when an NMI/IRQ/RESET occurs, the first byte already fetched will be re-interpreted as 0x00, but no extra fetches occur at the location of the current code.
<br />
<br />Now, to keep with the theme of this test, I should also try to execute APU I/O ports. It is a bit more difficult, because if I am right, the APU open bus shares the same open bus as is used for the instruction fetches, and also for stack fetches. Meaning that the last "valid" byte loaded before the jump to APU registers, is the one that is found in the APU register space as well. An RTS might work, if RAM did not also use the same bus. With RAM in the same bus, the values read from stack must also end in a $60. Which is not true for $40xx addresses... But hmm, $40 is RTI. Maybe I can do this after all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sun Mar 25, 2012 5:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Allright, added a test in which the APU space ($4010..$4017) is also tested (with exception of $4015, which is a readable port), but also the unallocated space from $4018 to $40FF. The link in the first post has both tests.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 25, 2012 6:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Passed. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sun Mar 25, 2012 6:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">Passed. :)</div>
<br />When I enable the jmp to $4015, your emulator (and also puNES, and Nintendulator, and Nestopia) still passes the test even though they should not. I wonder how that is possible. For that to happen, $4015 would have to yield a $40 value, which happens when a frame IRQ is pending, but that is not the case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 25, 2012 7:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, you <em>probably</em> knows this info, but I'm double-checking my code.
<br />The only way of reading bit 6 ($40) set is activating frame IRQ by writing to $4017:$40. Then, it's triggered after 29828 cycles, and for the next 3 ones.
<br />
<br />Plus...
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$4017 = $00 &#40;frame irq enabled&#41; &#91;power up sequence&#93;<br />APU mode in $4017 was unchanged &#91;after RESET&#93;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Mon Mar 26, 2012 12:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">OK, you <em>probably</em> knows this info, but I'm double-checking my code.<br />The only way of reading bit 6 ($40) set is activating frame IRQ by writing to $4017:$40.</div>
<br />My bad, I thought I had APU IRQs disabled, but I only had the CPU's I flag on which is why I was not noticing them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Thu Apr 05, 2012 4:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just for the record, the dummy fetch should happen with all of the following opcodes (all are single byte).
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 40 RTI&nbsp; 60 RTS<br />08 PHP&nbsp; 28 PLP&nbsp; 48 PHA&nbsp; 68 PLA<br />88 DEY&nbsp; A8 TAY&nbsp; C8 INY&nbsp; E8 INX<br />18 CLC&nbsp; 38 SEC&nbsp; 58 CLI&nbsp; 78 SEI<br />98 TYA&nbsp; B8 CLV&nbsp; D8 CLD&nbsp; F8 SED<br />0A ASL&nbsp; 2A ROL&nbsp; 4A LSR&nbsp; 6A ROR<br />8A TXA&nbsp; AA TAX&nbsp; CA DEX&nbsp; EA NOP<br />1A*NOP&nbsp; 3A*NOP&nbsp; 5A*NOP&nbsp; 7A*NOP<br />9A TXS&nbsp; BA TSX&nbsp; DA*NOP&nbsp; FA*NOP</div>
<br />With these opcodes, the first cycle of the opcode has the fetching the next byte, and the last cycle has the fetching of the next opcode, which may or may not be the same as the byte fetched earlier. If it is the same byte, the same byte is fetched twice.
<br />
<br />Without a custom mapper I know presently only means to test those opcodes that divert the program flow, which are RTI, RTS and BRK (though BRK is technically two-byte).
<br />
<br />There might be a way to do it with precise NMI / IRQ timing, but I have not yet been able to create a testing framework that can reliably predict the occurrence of an NMI / IRQ at cycle accuracy even when the emulator that runs it does not obey particular standard (read: hardcoded) PPU/APU timings. I am also not sure if the NMI / IRQ is checked _after_ fetching the opcode byte anyway, making the test pointless. (I don't really know at which points exactly the NMI / IRQ is checked.)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>