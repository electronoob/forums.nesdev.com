<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - ca65 scopes and macros</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">ca65 scopes and macros</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5481">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5481</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Mon Feb 15, 2010 4:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is many way to skin a cat <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />  As for this idea, hmm... What I don't like is there is no scope to it at all and you must use the local name + struct to access it.  
<br />
<br />In my example, you cannot mix the scope. If you use the variable outside the function scope, you have to specify the function name. In your example, the param struct is defined at module scope or higher and all code can see it. In my example, the scope is only defined at the function level and the same name can be re-used in all function, which is quite useful and keep your code organized the same way so you know what to expect when using a function.
<br />
<br />edit:
<br />
<br />I didn't realize that the struct was defined at function level. I was not aware you could do this. But still, the second issue is still there, it makes the variable even longer. Since the scope or struct code is almost the same, you should go with a scope. You can always do:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.scope Param<br />&nbsp; &nbsp;posX&nbsp; &nbsp; &nbsp; = locals + 1<br />&nbsp; &nbsp;posY&nbsp; &nbsp; &nbsp; = locals + 2<br />&nbsp; &nbsp;direction&nbsp; &nbsp;= locals + 3<br />.endscope<br /></div>
<br />
<br />and now you saved the extra local when accessing it. Another issue is what happen if a function inside a function uses the param? How do you define in the strut that you must use the values in locals after the one that was used inside the first function? I'm not sure how you could do that with strut.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Tue Feb 16, 2010 9:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dangit, I guess I can't define a struct inside a procedure. I just tried it. It looks like I'd have to use some kind of naming convention for myself such as, inside my header file I might have:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.import testMapCollision<br />.struct testMapCollision_Params<br />&nbsp; &nbsp;x .byte<br />&nbsp; &nbsp;y .byte<br />.endstruct</div><br /><br />Only, I'm not sure how I could include the header file into the module itself. Maybe I'd have to use the .global directive that miau mentioned earlier, so that when the label is defined it is exported, and when used, imported. That way I could put:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.global testMapCollision<br />.struct testMapCollision_Params<br />&nbsp; &nbsp;x .byte<br />&nbsp; &nbsp;y .byte<br />.endstruct<br /></div><br />and include the header both in the module itself and in any other modules that use it. That would be somewhat similar to C/C++ function prototypes.<br /><br />I think when all is said and done though I like your approach better. With explicitly named zp variables being used, it'd be easier in the debugger to track bugs than having one flat array of bytes that can be used in any way by procedures' param structs.<br /><br />Question: Say you are calling a procedure that resides in a seperate module. Are you still able to get at those scopes defined inside the procedure?<br /><br />*edit* I think I may try a hybrid of the two approaches. In my headers, I think I will do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.global MyProcedure<br />.scope MyProcedure_Params<br />&nbsp; x = zpByte0<br />&nbsp; y = zpByte1<br />.endscope<br />.scope MyProcedure_Locals<br />&nbsp; counter = zpByte2<br />.endscope</div>
<br />
<br />And then in the source file, you just include this header and now you can use the procedure and its parameter/local scopes both inside the module and anywhere you use the module.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Tue Feb 16, 2010 9:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Gradualore wrote:</div><div class="quotecontent">Question: Say you are calling a procedure that resides in a seperate module. Are you still able to get at those scopes defined inside the procedure?</div>
<br />
<br />To my knowledge, the answer would be no.  Scope are file scope and cannot be exported. This mean that you have to redefine them in your h file.  In my case this is not an issue since the name of the function inside the module and the way to access it outside is completely different.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Inside asm file<br /><br />.proc subMyFunction<br />.scope Param<br />&nbsp; &nbsp;posX = zpParam1<br />.enscope<br />...<br />.endproc<br /><br />-------<br />Inside H file<br /><br />.scope MyModule<br />&nbsp; &nbsp; &nbsp;myFunction = __subMyModuleMyFunction<br /><br />&nbsp; &nbsp; .scope myFunction<br />&nbsp; &nbsp; &nbsp; &nbsp; .scope Param<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;posX = __myModuleFunctionParam1<br />&nbsp; &nbsp; &nbsp; &nbsp; .endscope<br />&nbsp; &nbsp; .endscope<br />.endscope<br /><br /></div><br /><br />With those scope, you can do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda someValue<br />&nbsp; &nbsp; sta MyModule::myFunction::Param::posX<br /></div>
<br />
<br />Since we call it from outside the module, maybe the Param scope is redundant and should be removed. I'm still testing which approach is better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Thu May 23, 2013 11:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 scopes and macros</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">miau wrote:</div><div class="quotecontent">using the macros like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">peng::particle_create #01<br />peng::particle_setpos #40,#120</div><br />doesn't work.<br />Macros seem to be directly accessible from all scopes(?), so just calling them without the &quot;peng::&quot; part works. That defies the purpose of scopes, though.<br /><br />My questions: Is there any way around this? Is it even good practice to write code like this or is there a better, recommended way?<br /><br />It's the first time I've been using scopes in this way, but I've got older similar code that I want to convert to be more readable and organized.</div><br /><br />&lt;Insert apology about necro-bump here&gt;<br /><br />I also wanted to keep things more readable and organized, I figured you can force yourself to use a scope-like syntax without any obvious (so far) downside. One can create a macro with the same name as the scope that acts as a fake scope/namespace and then calls the macro that was intended. Example code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro SCOPE_NAME name_param1, param2, param3, param4, param5, param6, param7, param8, param9, param10<br /><br />&nbsp; &nbsp; aPrivateScope::interfaceValid&nbsp; .set 1<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; .if .not .xmatch(.mid(0,1,{name_param1}),::)<br />&nbsp; &nbsp; &nbsp; &nbsp; .error &quot;Scope operator expected.&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; .exitmacro<br />&nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; .ifnblank param10<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}, {param3}, {param4}, {param5}, {param6}, {param7}, {param8}, {param9}, {param10}<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .not .blank( param9 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}, {param3}, {param4}, {param5}, {param6}, {param7}, {param8}, {param9}<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .not .blank( param8 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}, {param3}, {param4}, {param5}, {param6}, {param7}, {param8}<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .not .blank( param7 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}, {param3}, {param4}, {param5}, {param6}, {param7}<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .not .blank( param6 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}, {param3}, {param4}, {param5}, {param6}<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .not .blank( param5 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}, {param3}, {param4}, {param5}<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .not .blank( param4 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}, {param3}, {param4}<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .not .blank( param3 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}, {param3}<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .not .blank( param2 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__ , {param2}<br />&nbsp; &nbsp; &nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .define __PARAMS__<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; .if .tcount({name_param1}) = 2 ; scope operator and name, no first param, maybe other params<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .mid(1,1,{name_param1}) __PARAMS__<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .tcount({name_param1}) &gt;= 3 ; scope operator, name and param1, maybe other params<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .mid(1,1,{name_param1}) .mid(2,255,{name_param1}) __PARAMS__<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .error &quot;Syntax Error.&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; .undefine __PARAMS__<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; .endif<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp;aPrivateScope::interfaceValid&nbsp; .set 0<br /><br />.endmacro<br /><br />.macro checkInterface<br />&nbsp; &nbsp; .if .not aPrivateScope::interfaceValid<br />&nbsp; &nbsp; &nbsp; &nbsp; .error &quot;Please use the proper interface syntax.&quot;<br />&nbsp; &nbsp; .endif<br />.endmacro<br /><br /></div><br /><br />For each macro that is a part of the scope the first line should be 'checkInterface', to make sure you used the namespace:: syntax. There might be a sneaker way to deal with multiple paramaters. Edit: add curly brackets. Edit: more robust code.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>