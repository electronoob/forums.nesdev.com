<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 2A03-D+PCM - Method for high-quality low-CPU sample playback</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">2A03-D+PCM - Method for high-quality low-CPU sample playback</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=14923">http://forums.nesdev.com/viewtopic.php?f=22&amp;t=14923</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>VitinhoCarneiro</b> [ Sun Oct 09, 2016 7:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>2A03-D+PCM - Method for high-quality low-CPU sample playback</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, I was brainstorming yesterday, and had an idea of a method of sample playback on the NES, at high quality, with little CPU overhead and small size (2-bit/sample average).<br /><br />And this is the result: <a href="https://github.com/VitinhoCarneiro/2a03-d-plus-pcm" class="postlink">https://github.com/VitinhoCarneiro/2a03-d-plus-pcm</a><br /><br />Unfortunately I'm not any good at 6502 ASM programming (though I might give it a try), so I just did a simulation of the encoding/decoding process in C. So, no ROMs or demos yet, though I've uploaded a sample of the program output here: <a href="https://www.youtube.com/watch?v=qgnXLjX4EMI" class="postlink">https://www.youtube.com/watch?v=qgnXLjX4EMI</a><br /><br />This codec is based on ideas from za909's MintaBOOM sample engine, available here: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=14520">viewtopic.php?f=22&amp;t=14520</a><!-- l --><br /><br />How it works:<br />-The codec combines 7-bit PCM with DPCM deltas and uses the DMC interrupt for triggering samples.<br />-The audio is divided into 2-byte blocks, containing 8 samples.<br />-The first byte is a 7-bit PCM value to be written to the DMC delta counter.<br />-The second byte represents a pointer to the DPCM sample table - it's basically a sequence from 0x00 to 0xFF, where the value of the pointer is equal to the value stored in the table.<br />-On playback, the PCM value is written to the delta counter, and then the 1-byte DPCM sample is triggered and the interrupt set to trigger on the sample end; the CPU then returns to execution of normal code until the interrupt fires.<br />-The sample rate can be varied by simply changing the DMC frequency value, since that's what triggers the sample playback - this also opens possibilities for sample repitching.<br /><br />Based on these ideas, this method of sample playback should be very easy to integrate into games/demos (as long as they don't require cycle-accurate execution, since the interrupt will disrupt their timing), since it should take very few CPU cycles to trigger a new block of samples every time the interrupt is fired.<br /><br />Besides from low overhead, this codec also has a high compression rate (2 bits per sample, as opposed to the usual 8-bit padded PCM), and still high quality (even at ~32kbps ($C playback rate), it sounds way better than plain DPCM at $F).<br /><br />I might try making a simple NES decoder for sample playback as a proof-of-concept for this method. But anyone is free to study and modify the source code, improve on it, and even making demos out of it.<br /><br />I'd love to hear your feedback on this. I feel like this could be a game-changer for sample playback on the NES.<br /><br /><em>(PS: I'm thinking about a version of this that will use only 1 byte per 8 samples, using 4-bit ADPCM and vector-quantized DPCM sample blocks. I might have to test if it will decompress well, though...)</em>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Oct 09, 2016 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So... this is the same as the regular 1-bit DPCM format but augmented by letting it do an arbitrary jump every 8 samples?<br /><br />Hmm, I would guess that the jumps at ~4kHz would split the bandwidth, giving more fidelity to lower freqencies (under ~2kHz) via the added jumps, and possibly make more headroom for higher frequencies in the 1-bit DPCM stream? I could see this being a significant improvement, though it would be easier to hear in example if you made a video/recording comparing plain 1-bit DPCM encoding to your method, side by side.<br /><br /><br />Some thoughts about implementing it:<br /><br />DPCM samples have a <s>16</s> <strong><em>64</em></strong> byte memory alignment, so a table of 256 1-byte DPCM samples actually requires <s>4k</s> <strong><em>16k</em></strong> of space. Something with RAM in the DPCM area (e.g. FDS) could avoid having a table, though. (You could stick other data in the <s>15</s> <strong><em>63</em></strong> bytes between samples, though, if you needed to take up that space, but it's quite inconvenient.)<br /><br />Also the IRQ happens when the DPCM sample byte is fetched, not when it's finished playing, so the stream should have the DPCM data shifted ahead by one. (This might make using the IRQ trickier.)<br /><br />Your IRQ will happen every 432 cycles, so I'd guess this would take up at least 10% of the CPU?<br /><br />Games also have the problem of needing to do an OAM DMA once per frame, which will take 514 cycles, overlapping at least 1 sample, so there's a problem to solve regarding that interruption. (If not accommodating sprite animation, might be acceptable to use a lot more CPU?)<br /><br /><em>Edit: samples are 64 byte aligned, not 16, as tepples points out below.</em>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Oct 09, 2016 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's worse than that. DPCM is 64-byte aligned, meaning a 256-entry table would use the first byte of the whole fixed bank, reducing the whole fixed bank to carefully chopped up 63-byte segments. (The <em>lengths</em> are 1 plus a multiple of 16 bytes.) This makes the vector quantization angle even more attractive, as only the last kilobyte needs the 63-byte treatment.<br /><br />Still, 10% of the CPU is a lot better than 99%.<br /><br />And I wonder if VQing DPCM alone could be a good way to save some space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>VitinhoCarneiro</b> [ Sun Oct 09, 2016 11:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Hmm, I would guess that the jumps at ~4kHz would split the bandwidth, giving more fidelity to lower freqencies (under ~2kHz) via the added jumps, and possibly make more headroom for higher frequencies in the 1-bit DPCM stream? I could see this being a significant improvement, though it would be easier to hear in example if you made a video/recording comparing plain 1-bit DPCM encoding to your method, side by side.</div><br /><br />As originally posted, I've uploaded a sample of the program output here: <!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=qgnXLjX4EMI">https://www.youtube.com/watch?v=qgnXLjX4EMI</a><!-- m --><br /><br />Definitely much better than plain DPCM.<br /><br />EDIT: I've uploaded a plain DPCM version encoded by a modified version of my program: <!-- m --><a class="postlink" href="https://drive.google.com/file/d/0B4aSs65VLLafT3J2LS12YXduZlk/view?usp=sharing">https://drive.google.com/file/d/0B4aSs6 ... sp=sharing</a><!-- m --><br />The quality difference is pretty noticeable, especially in the snare drums, which sound pretty muffled.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It's worse than that. DPCM is 64-byte aligned, meaning a 256-entry table would use the first byte of the whole fixed bank, reducing the whole fixed bank to carefully chopped up 63-byte segments. (The lengths are 1 plus a multiple of 16 bytes.) This makes the vector quantization angle even more attractive, as only the last kilobyte needs the 63-byte treatment.</div><br /><br />Well, that sucks, but there can always be some use for 256 63-byte segments (who knows... I could even interleave the samples there if I do it right)... Or I could just go with VQ, since there's probably a lot of redundancy within the delta blocks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Oct 09, 2016 7:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">VitinhoCarneiro wrote:</div><div class="quotecontent">The quality difference is pretty noticeable, especially in the snare drums, which sound pretty muffled.</div><br />Yeah, thanks for the DPCM example to compare against.<br /><br />Less muffled snares makes sense to me. One of 1-bit's DPCM's big failings is that loud low frequencies tend to mask higher frequencies, a problem which I believe your method solves very well (what I meant about headroom before).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Oct 09, 2016 9:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Interesting idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 09, 2016 10:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cool idea indeed. I wonder if this can be done without stealing too much CPU time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Oct 10, 2016 12:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very cool idea, but<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">It's worse than that. DPCM is 64-byte aligned, meaning a 256-entry table would use the first byte of the whole fixed bank, reducing the whole fixed bank to carefully chopped up 63-byte segments. (The <em>lengths</em> are 1 plus a multiple of 16 bytes.) This makes the vector quantization angle even more attractive, as only the last kilobyte needs the 63-byte treatment.</div><br />For code, I think you can manage to deal with it by using branch/jump instructions accordingly, but for lookuptables bigger than 63 entries... it's really unusable. And I fear lookup tables are necessary to a lot of applications.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Oct 10, 2016 12:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Storing the PCM data in there would be no problem though. Very easy to just skip every 64th byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Tue Nov 01, 2016 10:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 2A03-D+PCM - Method for high-quality low-CPU sample play</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is it feasible to consider multiple virtual channels for sample playback in the vein of SuperNSF using this technique with 2 byte blocks of 8 samples each?<br /><br />I guess for sample retriggering, and sample offset commands the chunks would be a lot longer and you'd have less control..  Also an instance of the &quot;decoding&quot; would be run every sample initialization, so that if you were running 2-4 additional virtual channels mixed over one another you'd also have to deal with volume control and the additional CPU overhead...

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>