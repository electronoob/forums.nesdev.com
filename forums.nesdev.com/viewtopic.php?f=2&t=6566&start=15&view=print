<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Modularity/File Size vs. Efficiency</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Modularity/File Size vs. Efficiency</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6566">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6566</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Mon Jul 05, 2010 6:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">It's nine tiles.</div><br />Not even nine. I guess I need to work harder! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Perhaps a tiny edit is in order.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You're right. This is the NES, not the Atari 2600.</div>  
<br />I agree, perhaps I just spend too much time browsing atariage.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jul 05, 2010 11:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, when it comes for optimisation, there is several tricks. Avoid clearing/setting carry before add/substract is definitely something you'd want to do - it saves one byte every time, but in a project you'll easily save hundreds of bytes that way.
<br />
<br />I always keep the clc or sbc instruction before the add/substract, but have it commented. That way if I modify the code so that the state of the carry is not the same - I take it into account and don't introduce stupid bugs that way.
<br />
<br />The same applies if you're loading something in a register but that it will already have the value loaded in. For example, you can save some bytes by removing instructions like "lda #$00" if you know A already contains $00. Again, you should keep the instruction, but have it commented.
<br />
<br />Other major optimisations are possible by making clever use of N and C flags. For example intead of ANDing a value with #$80, you can check the N flag. Intead of ANDing it with #$01, you can LSR it and check the C flag. Instead of ANDing it with #$40, you can either BIT it anc check the V flag, or ASL it and check the N flag. Also, use "cmp #$80" to transfer the N flag to C.
<br />
<br />Another nice trick, is, for example, if you want A to be #$06 if the carry flag is set, and #$00 if clear (just random example), do the following :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; bcc +<br />&nbsp; lda #$06<br />&nbsp; .db $cd&nbsp; &nbsp; &nbsp; &nbsp;;cmp $xxxx instruction<br />+ lda #$00<br />.....<br /></div>
<br />This will avoid a branch in the case of C is set, and save bytes. $cd is easy to remember because you just have to think about a CD-ROM and that's it. It does however affect most flags, and you could accidentally read a mirror of $2007 and introduce graphical glitches that way (tough that's not possible for the lda #$xx opcode ($a9) which can only read $2001 mirrors, it's possible for other opcodes).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jul 06, 2010 9:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">As for avoiding clc and sec, it can indeed save you a lot of cycles in loops. clc/sec before a loop instead of during every iteration is simple enough.</div>
<br />This is strategic use of such optimizations, which is usually a net benefit. It reduces clarity of the optimized routine, but frees up cycles so that the <em>rest</em> of your code can be clearer and not have to be as optimized.
<br />
<br />My main point was that you can make the most impact with a given amount of your time by spending some/most of it at the end. At that time, you have the big picture and can consider high-level changes that make a big impact, or clarity-reducing low-level optimizations where they provide the most impact (like in a division routine).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jul 06, 2010 9:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, the general form of this is: if a bit is already set as needed, don't set it again. So you run through the code and keep track of which bits will have a known state.
<br />
<br />Regarding ADC #imm and SBC #imm, another trick is that if the carry is always set or always clear before the instruction, you don't need to change it. If carry is always set before an ADC #imm, just do ADC #imm-1. If it's always clear before the SBC, do SBC #imm+1. This will compensate without having to clear/set the carry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Jul 06, 2010 11:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The same applies if you're loading something in a register but that it will already have the value loaded in. For example, you can save some bytes by removing instructions like "lda #$00" if you know A already contains $00. Again, you should keep the instruction, but have it commented.<br /></div><br />Yep. This saves even more bytes than making jmps branches and avoiding sec/clc. I remember when I started I didn't understand the concept of "code takes up space". I used <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda #$00<br />&nbsp; sta $2007<br />&nbsp; lda #$00;Could be commented out of course, but it's still a horrible way to do it<br />&nbsp; sta $2007<br />&nbsp; lda #$01<br />&nbsp; sta $2007<br /><br />;etc<br /></div><br />to write an entire nametable. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />  Now I always avoid loads when the number I need is already in the register. Saves two bytes and cycles every time, if it's always immediate.<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Intead of ANDing it with #$01, you can LSR it and check the C flag.</div><br />I'm surprised I didn't really think of that! That's good stuff! I do a lot of bit checking, since each of my sprites has a lot of data to be stored in a few bytes. That's one I'll definitely see what I can do when my code is absolutely final. Only because I think some of the places I'd want to use this depend on the carry not being messed with for an actual branch. (and not a branch that could be a jmp <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />)<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Another nice trick, is, for example, if you want A to be #$06 if the carry flag is set, and #$00 if clear (just random example), do the following :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; bcc +<br />&nbsp; lda #$06<br />&nbsp; .db $cd&nbsp; &nbsp; &nbsp; &nbsp;;cmp $xxxx instruction<br />+ lda #$00<br />.....<br /></div><br /></div>
<br />Edit: nvm, what am I thinking?
<br />
<br />I've found my limit in how far I'd go for optimizations. I probably wouldn't do THAT, but it's safer than I first thought it was (hence the edit). It's nice to know about though (I totally wouldn't have thought of it) and there are at least three places I could use it off the top of my head. It's totally awesome if I ever wind up using it!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jul 06, 2010 11:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some other slight optimizations:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ASL reg/mem ; clear bit 0<br />LSR reg/mem ; clear bit 7<br />INC/DEC mem&nbsp; &nbsp; &nbsp;; toggle bit 0<br />ASL reg&nbsp; &nbsp; &nbsp;; put bit 7 into carry, and bit 6 into N flag<br />CMP #$80&nbsp; &nbsp; ; put bit 7 into carry, without modifying A<br />CMP #1&nbsp; &nbsp; &nbsp; ; set carry if A is not zero</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jul 06, 2010 12:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The CMP #$80 and CMP #$01 trick is definitely awesome.
<br />
<br />Another one is that if you have a jsr followed by a rts, replace it by a jmp. It saves one byte each time but it can end up a lot of bytes in a large program.
<br />
<br />Another thing I like to do is to avoid branches. For example, if I want A = #$04 if C is clear, and A = $06 if C is set, I could do something like :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;bcc +<br />&nbsp; &nbsp;lda #$06<br />&nbsp; &nbsp;bcs ++<br />+&nbsp; lda #$04<br />++ ....</div><br />But I find it less elegant than noticing that A = $04 + 2*C and coding it like that :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp;rol A<br />&nbsp; &nbsp;asl A<br />&nbsp; &nbsp;ora #$04<br />&nbsp; &nbsp;....</div><br />Note that this also show off you can sometimes use ORA instead of ADC - <em>if you know the values that are added together never have the same bits set</em> - and don't have to deal with the carry.<br /><br />Finally, whenever you use LU tables, be sure to have them pre-formatted as much as possible. I'd avoid doing stuff like that :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda LUTable,X<br />&nbsp; &nbsp;asl A<br />&nbsp; &nbsp;asl A<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #$03<br />&nbsp; &nbsp;sta Wathever,Y<br /><br />LUTable<br />&nbsp; &nbsp;.db Val_1, Val_2, Val_3</div><br />But do it like this instead :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda LUTable,X<br />&nbsp; &nbsp;sta Wathever,Y<br /><br />LUTable<br />&nbsp; &nbsp;.db Val_1*4+3, Val_2*4+3, Val_3*4+3</div><br /><br />It can seem obvious put that way, but trust me you don't always think about it.<br /><br />Finally, it's usually good practice if you have table of pointers, to split it between high and low tables. Instead of doing this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;asl A<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda Adr,X<br />&nbsp; &nbsp;sta PointerL<br />&nbsp; &nbsp;lda Adr+1,X<br />&nbsp; &nbsp;sta PointerH<br />&nbsp; &nbsp;ldy #$00<br />&nbsp; &nbsp;lda &#40;Pointer&#41;,Y<br />&nbsp; &nbsp;....<br /><br />Adr<br />&nbsp; &nbsp;.dw Adr1, Adr2, Adr3, ...</div><br />You do it like this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda AdrL,X<br />&nbsp; &nbsp;sta PointerL<br />&nbsp; &nbsp;lda AdrH,X<br />&nbsp; &nbsp;sta PointerH<br />&nbsp; &nbsp;ldy #$00<br />&nbsp; &nbsp;lda &#40;Pointer&#41;,Y<br />&nbsp; &nbsp;....<br /><br />AdrL<br />&nbsp; &nbsp;.db &lt;Adr1, &lt;Adr2, &lt;Adr3<br /><br />AdrH<br />&nbsp; &nbsp;.db &gt;Adr1, &gt;Adr2, &gt;Adr3</div><br />However, I admit I don't always do that, because it only saves 1 byte (the ASL a, possibly a second if the routine is called with the index already in X), and it's very annoying to split long tables manually to save just ONE byte.<br /><br />However, if the data is small, all high adress are likely to be equal. If the data pointed by AdrN is less than 256 bytes, you can take advantage of this if your assembler support align and do that :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda AdrL,X<br />&nbsp; &nbsp;sta PointerL<br />&nbsp; &nbsp;lda #&gt;Adr1&nbsp; ;Same high adress for all pointers<br />&nbsp; &nbsp;sta PointerH<br />&nbsp; &nbsp;ldy #$00<br />&nbsp; &nbsp;lda &#40;Pointer&#41;,Y<br />&nbsp; &nbsp;....<br /><br />AdrL<br />&nbsp; &nbsp;.db &lt;Adr1, &lt;Adr2, &lt;Adr3</div>
<br />
<br />Then it's also likely that &lt;Adr1 is equal to $00 (I don't know if there's a way to take advantage of it).
<br />Also, I don't know if there is a way to do something like that but for data larger than 256 bytes. Something evil woud be to do a loop that seeks all entries of the table up to the one requested, and increment high byte when an entry in the low table is smaller than the previous entry. A variant of it would be to have a 8-bit size table (instead of a 16-bit pointer table) and add all values up to the one requested to find the address. I don't know how many bytes this would save, but it'd definitely be slower. That's an interesting concept for NROM or CNROM games though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jul 06, 2010 1:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Another one is that if you have a jsr followed by a rts, replace it by a jmp. It saves one byte each time but it can end up a lot of bytes in a large program.</div><br />Computer science has a name for this: <a href="http://en.wikipedia.org/wiki/Tail_call" class="postlink">tail call optimization</a>. Not only does it save ROM, but it also saves two bytes of stack, giving you more breathing room if you're using half the stack page for a VRAM transfer buffer.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Finally, whenever you use LU tables, be sure to have them pre-formatted as much as possible.</div><br />Unless you use the same table in several different ways. For example, one of my projects needs a table of X values of objects for positioning them on the background and a table of (X * 8 + 8) values for positioning sprites. You could put both tables in the source code, but then you would have to remember to change both unless you write a preprocessor that keeps them consistent.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">it's very annoying to split long tables manually to save just ONE byte.</div><br />True, another maintainability tradeoff unless you write a preprocessor.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, I don't know if there is a way to do something like that but for data larger than 256 bytes. Something evil woud be to do a loop that seeks all entries of the table up to the one requested, and increment high byte when an entry in the low table is smaller than the previous entry. A variant of it would be to have a 8-bit size table (instead of a 16-bit pointer table) and add all values up to the one requested to find the address.</div>
<br />The map decoding in President works just like this. Each map has a start address (2 bytes) and a list of 32 length values (1 byte each). Each length value L[i] is the length in bytes of the object list data for objects whose leftmost X coordinate (in metatile units) is between i*16 and i*16+15. It's scanned once for each frame when the camera crosses a tile boundary, and it's actually not that bad in CPU time.
<br />
<br />I'm working on doing something similar for encoding dictionaries in my text compression engine, except counting bits instead of bytes. The words in the dictionary are sorted by decreasing frequency, but only the starting address of one out of every 16 is stored in its entirety. The rest are stored as the number of bits in the Huffman-compressed spelling of that word in characters. This is one of the steps in compressing a novel by a factor of three.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jul 06, 2010 2:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Another thing I like to do is to avoid branches. For example, if I want A = #$04 if C is clear, and A = $06 if C is set, I could do something like :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;bcc +<br />&nbsp; &nbsp;lda #$06<br />&nbsp; &nbsp;bcs ++<br />+&nbsp; lda #$04<br />++ ....</div><br />But I find it less elegant than noticing that A = $04 + 2*C and coding it like that :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; rol A<br />&nbsp; &nbsp; asl A<br />&nbsp; &nbsp; ora #$04<br />&nbsp; &nbsp; ....</div></div><br />Simpler and more general form of "If carry, A=xx, otherwise A=yy":<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda xx<br />&nbsp; &nbsp; bcs +<br />&nbsp; &nbsp; lda yy<br />+:</div><br />Note that this works for xx and yy as immediate values, or values loaded from memory. If the condition is based on N or Z, load the value into A before you set the condition:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda xx<br />&nbsp; &nbsp; cpx foo<br />&nbsp; &nbsp; bne +<br />&nbsp; &nbsp; lda yy<br />+:</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jul 07, 2010 1:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Computer science has a name for this: tail call optimization. Not only does it save ROM, but it also saves two bytes of stack, giving you more breathing room if you're using half the stack page for a VRAM transfer buffer.</div>
<br />Nice, I didn't know there was a name on it. Speaking about it, I forgot to mention than if a routine is called multiple times, including at least one time at the "tail" of another routine, instead of having a JMP, paste the routine <em>directly</em> after the other one and comment the JMP, effectively saving a total of 4 bytes as opposed to JSR-RTS.
<br />
<br />Not to mention the same would apply to all routines which are called only once trough the code - just paste them where they're called. Although I admit I still have some routines which are called only once in my code because because of clarity and maintainability. This technique might not save bytes if there is branches going across the said routine, which could have to be replaced by conditional JMPs.
<br />
<br />@Blargg : Yeah this is nice too, but both yours and mine approach is 6 bytes, but mine execute in constant time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jul 07, 2010 8:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">if a routine is called multiple times, including at least one time at the "tail" of another routine, instead of having a JMP, paste the routine <em>directly</em> after the other one and comment the JMP, effectively saving a total of 4 bytes as opposed to JSR-RTS.</div><br />I do this too occasionally. But of course, switching from a tail call to fallthrough works only if the routines are in the same <a href="http://en.wikipedia.org/wiki/Translation_unit_%28programming%29" class="postlink">translation unit</a>, and if you're using a <a href="http://nesdev.com/bbs/viewtopic.php?t=6197" class="postlink">shuffler to detect buffer overflows</a>, you have to take care to keep them in the same chunk.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Not to mention the same would apply to all routines which are called only once trough the code - just paste them where they're called.</div>
<br />In other words, <a href="http://en.wikipedia.org/wiki/Inline_function" class="postlink">inlining</a>, with the caveats you mentioned.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed Jul 28, 2010 6:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know smkd is going to disagree with me, but I don't understand why developers waste their already very limited time being obsessive compulsing about memory size to gain a trivial amount of memory they don't even use. 
<br />
<br />For instance, the draw_status_bar code in Super Mario World. They make an entire loop, just to load 7 registers. All it does is save 5 extra bytes that they eventually didn't used, at the cost of effort and speed. That short of a loop actually takes more effort, than writing it without the loop.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Jul 28, 2010 6:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wish one of the vast library of NES emulators would support profiling similar to AMD's CodeAnalyst and Intel's VTune on x86. On the same note it could also keep track of RAM usage, access frequencies and stuff like that (and display the results visually). Would be optimal if it could also handle assembler generated symbols.
<br />
<br />I kinda want to write an emulator with emphasis on developers now. Problem however is that for it to be useful the emulation would have to be pretty accurate and thus it would take a long time to develop. Accuracy wouldn't matter that much for profiling though, as long as the CPU was stable...
<br />
<br />Oh well, rambling away once again. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Wed Jul 28, 2010 7:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I kinda want to write an emulator with emphasis on developers now. Problem however is that for it to be useful the emulation would have to be pretty accurate and thus it would take a long time to develop. Accuracy wouldn't matter that much for profiling though, as long as the CPU was stable... </div>
<br />Nestopia is open source.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Jul 28, 2010 8:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mic_ wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I kinda want to write an emulator with emphasis on developers now. Problem however is that for it to be useful the emulation would have to be pretty accurate and thus it would take a long time to develop. Accuracy wouldn't matter that much for profiling though, as long as the CPU was stable... </div><br />Nestopia is open source.</div>
<br />Yeah, and way too complicated for me to want to try to figure it out. <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>