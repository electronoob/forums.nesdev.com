<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - [C/C++]Relying on short to be 2 bytes wide, a good practice?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">[C/C++]Relying on short to be 2 bytes wide, a good practice?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6167">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6167</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Sun Mar 14, 2010 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>[C/C++]Relying on short to be 2 bytes wide, a good practice?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Of course you can't just rely on it, because a short int must be bigger than a char but can be as big as an int, which can be 4 bytes wide.
<br />What I plan on doing is using short for addresses, and making an assert that won't let the emulator run if a short variable is not 2 bytes wide.
<br />
<br />This way I can rely on the PC and other addresses to wrap around $FFFF as would do the original NES registers.
<br />
<br />I know that the feature of short being 2 or 4 byte is oriented to optimization because in some processors it may be faster to process a 4 byte number than a 2 byte, but, if I can't rely in the address wrapping around, I have to AND the addresses with 0xFFFF each time to be sure they don't overflow the 2 LSBytes, and then the original optimization is lost anyway.
<br />
<br />What do you think of this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Mar 14, 2010 9:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you make something short, the compiler is adding code to truncate it to short size every operation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Sun Mar 14, 2010 9:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So you would suggest ANDing it with FFFF every time its value changes, or is there a more clever option?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Mar 14, 2010 9:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: [C/C++]Relying on short to be 2 bytes wide, a good pract</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Petruza wrote:</div><div class="quotecontent">if I can't rely in the address wrapping around, I have to AND the addresses with 0xFFFF each time to be sure they don't overflow the 2 LSBytes</div>
<br />On many compilers, (unsigned short int)value and (value &amp; 0xFFFF) produce <em>the same</em> machine instruction. It's not worth the time to try to optimize for speed without appropriate metrics. But if you can demonstrate that a change increases speed, make sure to summarize the metrics in code comments: "This change improved frames per second by 3%."
<br />
<br />There are at least four passes where errors in a C or C++ program can be raised: preprocess time, compile time, link time, and run time. I know of assertion mechanisms for three of these steps: at preprocess time, use #if; at run time, use if(). But sizeof isn't available until compile time, so you'll need to use a variable declaration that acts like a compile-time assertion.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Declares a negative sized array only if value is false at compile time.<br />// Name must be unique.<br />#define COMPILE_ASSERT&#40;name, value&#41; extern const char name&#91;&#40;value&#41;?1:-1&#93;;<br /><br />#include &lt;limits.h&gt;&nbsp; // import CHAR_BIT<br />COMPILE_ASSERT&#40;eight_bit_bytes, 8 == CHAR_BIT&#41;<br />COMPILE_ASSERT&#40;sixteen_bit_shorts, 2 == sizeof&#40;short&#41;&#41;<br /></div>
<br />It is an error to declare an array with a negative number of elements. If this happens, the compiler is supposed to emit a diagnostic and not produce object code for this translation unit. The COMPILE_ASSERT macro is supposed to trigger this if and only if value is false.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Sun Mar 14, 2010 9:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />if you need an int to be exactly 16bits wide, why not use int16_t / uint16_t instead (defined in &lt;stdint.h&gt;)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Mar 14, 2010 10:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I recommend simply masking with 0xFFFF. I use plain int for addresses in most of my emulators and don't have to constantly mask them. This is the most portable approach, since it doesn't depend on the hardware doing anything in particular. If you want to support machines with 16-bit int (rare these days), you'll need to use unsigned int. If you want to support non-two's-complement machines, you'll need to use unsigned int or cast to unsigned int before masking (consider subtracting 1 from an address of 0; you get -1 if signed int, then cast to unsigned int and are guaranteed a two's complement representation, for masking).
<br />
<br />If profiling shows that masking is somehow significantly slower than using uint16_t, you can get the latter from &lt;stdint.h&gt;. Just remember that stdint.h isn't part of C89 (it's part of C99), and not a part of any C++ standard. Even on C99, it's not guaranteed to exist, because the host hardware might not support such a size.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Mar 14, 2010 10:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I say typedef it.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef unsigned short u16;<br />typedef signed short s16;<br /></div>
<br />
<br />If you run into a compiler/system where short is a different size -- just change your typedef.
<br />
<br />If you run into a compiler/system that doesn't support a 16-bit data type, you can write a class to simulate one (can just use a larger type and overload mathematical operators to mask afterward).  Just change your typedef to be your class.
<br />
<br />
<br />typedefs are great.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 14, 2010 10:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- Well, I knew about the alignment thing, but never thought it would have some impact.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Sun Mar 14, 2010 10:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />yes, I actually use typedef unsigned short int word;
<br />Thanks for the tips on how to assert word's length at compile time.
<br />
<br />I just want to make the code the most portable possible, but I guess the source would need some modification for machines in which shorts are larger than two bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Mar 14, 2010 11:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Please don't assume short = 16-bit.  That simply isn't the case on all platforms.  Please use the standard uintXX_t and intXX_t types that are already defined (mostly) universally.  Specifically uint8_t, uint16_t, uint32_t, and uint64_t.  Same goes for the non-unsigned versions.
<br />
<br />You might also find things like 1ULL useful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Mar 14, 2010 2:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's one thing to use uint16_t to get implicit masking with 0xFFFF, but quite another to use it for a particular format in memory. Many machines store the least-significant octet first, then the most, but plenty store it in the reverse order. And plenty of machines require that it be aligned on a two-byte boundary, either aborting the program or giving a wrong result when it's not aligned. Unless profiling shows that your program is too slow AND that it is improved enough by using uint16_t instead of accessing the bytes individually and combining them, stick to something you know is portable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Sun Mar 14, 2010 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well my main concern right now is not speed optimization, but just to have a value I'm sure won't surpass 0xFFFF.
<br />So it's either enforced by the data type or by a bit mask.
<br />That's why I ask this.
<br />And also my concern is that this code is the most portable possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 14, 2010 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- It makes sense, but it's just annoying to use only <strong>int</strong> or <strong>unsigned int</strong> for every value. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Some values must be boolean (unsigned char), for example.
<br />
<br />- Anyway, what system/OS/whatever "see" an unsigned short different, other than 16bit long? AFAIK, the "old" (?) Macs use reversed bytes, Big endian, not Little endian.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hangin10</b> [ Sun Mar 14, 2010 6:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Portability is great, but how many people that are all about it actually make sure their code runs on all of Windows, *nix, and Mac? Nevermind the fact that newer Macs make it so they don't have to care about non-x86 platforms.
<br />
<br />I have noticed lately that I need to use long long to get 64bit "u64" typedefs on both i586 and x86-64 gcc, so I really shouldn't talk.  <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />  <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sun Mar 14, 2010 6:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, I've spent half my afternoon to find a solution without using any macro (because macros are evil (C++ FAQ lite) and we want something more portable) and without execution penalty (in other words, everything is done compile-time).  My code is a bit generic, so it may suit other situations.
<br />
<br />The key is to use templates to make compile-time decisions on the type of a typedef. First, we have to make a kind of static linked list of types using templates, and make a meta-programmed algorithm to find the desired type that have the sizeof we want.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// we have to make such a static linked list of type. <br />// so that's the basic definition, and later we'll link it with himself<br />template&lt;typename T, typename U&gt;<br />&nbsp;struct type_list<br />&#123;<br />&nbsp; &nbsp; //those members are facultative here, but might be useful<br />&nbsp; &nbsp; typedef T head;<br />&nbsp; &nbsp; typedef U tail;<br />&#125;;<br /><br />// but to find the end of such a list, we have to define it<br />class Empty&#123;&#125;;<br /><br /><br />// and now, we make our list of unsigned integral type<br />typedef type_list&lt;<br />&nbsp; &nbsp; &nbsp; &nbsp; unsigned char, type_list&lt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned wchar_t, type_list&lt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned short, type_list&lt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned int, type_list&lt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned long int, type_list&lt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned long long int, Empty&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &gt;<br />&nbsp; &nbsp; unsigned_integral_type_list;<br /><br /><br />// that class will perform the actual research algorithm<br />template&lt;unsigned size_of, typename T&gt;<br />&nbsp; class find_type_with_n_bytes;<br /><br />// anything that doesn't match something below will lead to compile error.<br />template&lt;unsigned size_of, typename head, typename tail&gt;<br />&nbsp;class find_type_with_n_bytes&lt;size_of,type_list&lt;head, tail&gt; &gt;<br />&#123;<br />&nbsp; &nbsp; // in the private field we have another struct that will truly do the job<br />&nbsp; &nbsp; // using recursion, at compile-time.<br />&nbsp; &nbsp; template&lt;bool, unsigned, typename, typename&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; struct research_type_by_size_of;<br /><br />&nbsp; &nbsp; // this is the case when we have found the type.<br />&nbsp; &nbsp; template&lt;unsigned my_size_of,typename _result, typename _any&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; struct research_type_by_size_of&lt;true, my_size_of, _result, _any &gt;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; typedef _result _type;<br />&nbsp; &nbsp; &#125;;<br /><br />&nbsp; &nbsp; //this is the case when the type is not found, and we're at the end of <br />&nbsp; &nbsp; // the list. We typedef the struct type_not_found so when trying to<br />&nbsp; &nbsp; // actually use the type, it will fail to compile with a fairly explicit <br />&nbsp; &nbsp; // error like &quot; illegal use of 'struct type_not_found' &quot;<br />&nbsp; &nbsp; template&lt;unsigned my_size_of, typename _result&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; struct research_type_by_size_of&lt;false, my_size_of, _result, Empty &gt;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; typedef struct type_not_found _type;<br />&nbsp; &nbsp; &#125;;<br /><br />&nbsp; &nbsp; // the recursive case, when the type is not found and we're not yet at<br />&nbsp; &nbsp; // the end of the list.<br />&nbsp; &nbsp; template&lt;unsigned my_size_of,typename _result, typename _head, typename _tail&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; struct research_type_by_size_of&lt;false, my_size_of, _result, type_list&lt; _head, _tail &gt; &gt;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; typedef typename research_type_by_size_of&lt;&#40;sizeof&#40;_head&#41;== my_size_of&#41;, my_size_of, _head, _tail &gt;::_type _type;<br /><br />&nbsp; &nbsp; &#125;;<br /><br />public:<br />&nbsp; &nbsp; // what the user can use.<br />&nbsp; &nbsp; typedef typename research_type_by_size_of&lt;&#40;sizeof&#40;head&#41;== size_of&#41;, size_of, head, tail &gt;::_type result;<br /><br /><br />&#125;;<br /><br />int main&#40;int,char *&#91;&#93;&#41;<br />&#123;<br />&nbsp; &nbsp; &nbsp;// how to use:<br />&nbsp; &nbsp; &nbsp;typedef find_type_with_n_bytes&lt;2,unsigned_integral_list_type&gt;::result myUInt_16_t;<br /><br />&nbsp; &nbsp; &nbsp;//do whatever you want with<br />&nbsp; &nbsp; &nbsp;myUInt_16_t a, b, c = b = a = 0;<br /><br />&nbsp; &nbsp; &nbsp;return 0;<br />&#125;<br /></div>
<br />
<br />Note: I suspect there's something in the C++ Boost library that already addresses the issue, but I didn't checked out, probably because I wanted to take that challenge <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>