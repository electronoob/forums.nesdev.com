<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=10654" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-06-21T19:18:48-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=10654</id>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-06-21T19:18:48-07:00</updated>
<published>2014-06-21T19:18:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=130114#p130114</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=130114#p130114"/>
<title type="html"><![CDATA[Re: organizing memory for multijointed bosses]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=130114#p130114"><![CDATA[
If I only need to save the angle of the sprites I can probably fit it all within a single slot.  The only issue is my complicated animation engine requiring words for vram and dma management.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sat Jun 21, 2014 7:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-05-29T03:39:10-07:00</updated>
<published>2014-05-29T03:39:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129335#p129335</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129335#p129335"/>
<title type="html"><![CDATA[Re: organizing memory for multijointed bosses]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129335#p129335"><![CDATA[
Nice idea, and you can use the other slots specifically for specific parts.<br /><br />For an SNES game, I'd use the direct page for normal enemies, but use X-index for boss parts since it is has the benefit of incrementing and decrementing, and long addressing.<br /><br />The way the data format will work is to have a structure table that has all the information about how the boss is structured, followed by key frame parameters and the duration of the &quot;sweep time&quot; between key frames.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Thu May 29, 2014 3:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-05-29T01:27:12-07:00</updated>
<published>2014-05-29T01:27:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129330#p129330</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129330#p129330"/>
<title type="html"><![CDATA[Re: organizing memory for multijointed bosses]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129330#p129330"><![CDATA[
It's fun because I am also in the hassle of creating bosses and their AI and this is a very hard thing to do. Although at least designing bosses is more interesting than designing random enemies, which is hard AND not very interesting.<br /><br />What I do is that I cheat and rely on different boss parts to be at exact specific slots, for example my bosses AI rely on the main boss being in slot #0, and this allows me to free both X and Y for other usage. I haven't done multi-part bosses yet but I plan to. Normal enemy AI routines normally always have X=slot number of enemy, and if it has to be overwritten it should be restored back. In bosses AI I'd have to do it so often it doesn't make the cut since I KNOW it'll be in slot #0 there's no way to waste bytes and time for all that saving/restoring of a de-facto constant value.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu May 29, 2014 1:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-05-28T21:12:21-07:00</updated>
<published>2014-05-28T21:12:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129320#p129320</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129320#p129320"/>
<title type="html"><![CDATA[Re: organizing memory for multijointed bosses]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=129320#p129320"><![CDATA[
I think I'll special case this, and have a designated area of memory for bosses.  I don't really like the idea of borrowing slots.<br /><br />I wouldn't be surprised Treasure's own engine was limited to just 1 boss at a time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Wed May 28, 2014 9:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2013-11-06T20:50:53-07:00</updated>
<published>2013-11-06T20:50:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120357#p120357</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120357#p120357"/>
<title type="html"><![CDATA[Re: organizing memory for multijointed bosses]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120357#p120357"><![CDATA[
I have a grab system in a place in my game. Each object has a byte to specify a holder object's index, and a byte to specify the index of the object it's holding. If the object is holding itself (the index in it's &quot;holding&quot; byte is its own index), it's not carrying anything. If the object is held by itself, it's not being carried. Each object also has two bytes that specify its &quot;hotspot&quot;, or a set of relative coordinates. An object that is held has its position set to its holder's hotspot, minus half the held object's height/width. (This is done after all positions in the game are final except for movement because of being carried, so there's (almost) never any visual drag. But there would be visual drag if an object needed to carry an object that was also carrying something, and the object's respective indexes weren't in order. It's very possible to combat this with extra logic, or allow objects to hold multiple objects.)<br /><br />For bosses, I could almost certainly just ensure the indexes were in order if I ever needed a part connected to a part connected to a part. I'd probably just try to keep the boss as one actual object, though, and just do all the logic for the individual parts within its main routine. In the absolute worst case I needed a bunch of positions stored in RAM, I'd create another invisible object solely to use some of its RAM. (My main character actually uses one of his bullet objects to store extra info about himself)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Wed Nov 06, 2013 8:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-11-06T12:17:32-07:00</updated>
<published>2013-11-06T12:17:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120335#p120335</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120335#p120335"/>
<title type="html"><![CDATA[Re: organizing memory for multijointed bosses]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120335#p120335"><![CDATA[
My objects always have some general purpose bytes they can use as they see fit, so I would just use part of that memory to store the indices of the slots that contain the child objects. The parent object would be responsible for calling it's children's AI routines (they wouldn't be processed by the normal loop that processes objects), in order to have full control over the order in which sprites are rendered.<br /><br />If a boss has too many individual parts (like a neck composed of several spheres), I'd probably have the entire neck be a single object, and the general purpose bytes would hold coordinates for several spheres.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Nov 06, 2013 12:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2013-11-06T12:06:16-07:00</updated>
<published>2013-11-06T12:06:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120334#p120334</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120334#p120334"/>
<title type="html"><![CDATA[organizing memory for multijointed bosses]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10654&amp;p=120334#p120334"><![CDATA[
Anybody know of a good way to organize objects to allow them to link to eachother?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Wed Nov 06, 2013 12:06 pm</p><hr />
]]></content>
</entry>
</feed>