<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Speeding up my graphics routine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Speeding up my graphics routine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=5585">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=5585</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat May 22, 2010 6:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not understanding the purpose of the switch on ColorIndex. It seems tomount to switch(n) { case 0: foo( 0x3F00 + 0 ); break; case 1: foo( 0x3F00 + 1 ); break; ... case 15: foo( 0x3F00 + 15 ); break; }. Assuming n can only have the values 0 to 15, then it could just be coded as foo( 0x3F00 + n ).
<br />
<br />And then what's up with the for loop after that? Maybe I'm missing something, but couldn't it be coded as
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if &#40; 0 &lt;= PaletteVal &amp;&amp; PaletteVal &lt; 0x40 &#41; //not sure whether it can even be outside this<br />&nbsp; &nbsp; COLOR = Color &#91;PaletteVal&#93;;</div>
<br />
<br />Try running through the code in your mind, form a picture of what it's actually doing, then see whether it's doing it in a roundabout way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Mon Aug 23, 2010 8:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />sorry if i'm reviving an old post, but i don't wanna open a new thread because i'm having the same problem.
<br />
<br />my emu is showing graphics at the poor rate of 5 FPS. as the same as Undubbed i'm using C + Allegro and the "_putpixel" function, but i tried to run the EXE file outside the IDE but nothing changed.
<br />
<br />something that i think that ould make the emu faster is to check if the Name Tables as changed, so if it doesn't then i draw just the sprites, but couldn't find a way to do it. any suggestion? for all that has a emu out there, how did you handled this?
<br />
<br />if someone wants to check the code just have to say it. don't wanna post it without petition beacuse i don't want to look like a gimme-the-code one.
<br />
<br />maybe with SDL? i don't think that will make radical changes :\
<br />the balloon barely moves... looks like it was made of concrete hahaha XD
<br />
<br /><img src="http://img541.imageshack.us/img541/6155/sinttulo1vx.gif" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Aug 23, 2010 8:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">comegordas wrote:</div><div class="quotecontent">something that i think that ould make the emu faster is to check if the Name Tables as changed, so if it doesn't then i draw just the sprites</div>
<br />That's not a good idea, because even when the name tables don't change the rendered background might. There are a lot of mid-screen operations such as scroll changes or color emphasis changes that might make the new frame different than the previous one even when the name tables don't change. Even if you don't support such changes yet, ignoring them this early will not make things easier later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon Aug 23, 2010 8:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I used Allegro in my two NES emulators and didn't have any speed issues. So it's not that Allegro is at fault. Perhaps whatever you are doing to render graphics just takes too long to calculate.
<br />
<br />One suggestion. With CHR-ROM, decoding the tiles everytime you draw them (which I think in another post you showed you are doing this) is wasteful.
<br />
<br />What you should do is on loading of a ROM using CHR-ROM is create a decoded array of tiles. Decode their value of each pixel which will be 0,1,2, or 3 as you know. Now when rendering you don't need to decode this for each pixel you draw, you just lookup the value in your array of tiles. Ex: TileCache[TileNumber].TileData[x][y]
<br />
<br />This will help your speed. Another thing that will help your speed is to specify the each putpixel inline function you need. If you are using 8bit color mode, I think it is just _putpixel() but for 16bit mode I think it's _putpixel16(). But you must be careful, if you draw out of bitmap bounds there is no protection in this function. 
<br />
<br />Back to caching, for handling CHR-RAM what I did was made an array of flags for each tile in CHR-RAM. Whenever rendering was needed before drawing tiles it would check the flag for tiles to see if they need to be updated in cache due to a change in CHR-RAM caused by the game writing to update patterns or whatever else might effect it. 
<br />
<br />I'm not sure what other tips to give you. Just try to picture what your computer has to do with your code to calculate everything each frame. Make sure you don't have something in there that is just eating up CPU time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Mon Aug 23, 2010 9:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thanks Tokumaru and MottZilla! i'd like your idea of make a tile cache. let's see what happens <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon Aug 23, 2010 9:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think it should help. When I was designing my emulator I really had no idea how other people did it. So it was alot of fun figuring out my own way. I'm not sure if other emulators make some sort of CHR cache but as I said the general idea is to reduce unneeded calculations and operations. When you realize that CHR-ROM pattern data is decoded to the same result 100% of the time and CHR-RAM is decoded the same probably 99% of the time you are just wasting time calculating it and throwing the results away. 
<br />
<br />I do recall hearing the suggestions about not redrawing name tables but I never did this. I suppose if you cached the rendered name tables somehow you could do this. But even in my speed oriented emulator running on a 233mhz or 266mhz pentium laptop I got 60fps without any sort of optimization regarding not redrawing nametables all the time.
<br />
<br />So try out the CHR Cache and let me know if you get a good speed boost.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Mon Aug 23, 2010 10:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ok i have some crazy results hahaha <img src="./images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" /> 
<br />i started with an array like TileCache[960][8][8] and in each position of the array i saved the PaletteEntry the actual pixel to be draw. so the bucle goes like "if(TileCache[TileNumber][TileByteSliver][0] == NULL) ... save the tile in the cache". therefore, i decode the tile only once, and at the second time i fetch it from the cahe. but nothing changed <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> 
<br />BUT.... instead of a 64x3=192 bytes array for the RGB palette i used once that has only one byte to identify the color (so the array for the palette is only 64 bytes long), so i don't have to call the function "makecol()" to compose the color... and guess what??? the emulator flew like a Concorde plain <img src="./images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" />  <img src="./images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" />  <img src="./images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" /> 
<br />it gave a ratio of more than 300 FPS (yes... you read it ok...). the problem is that the color codes of the palette are completely messed up, so i'll have to made one by myself or find one that works correctly.
<br />
<br />well, well... it's late at night in Argentina and i gotta go to college tomorrow, so wi'll talk about later! do you think that maybe it's an error? that ratio sounds like tooooooooo much for me...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Aug 24, 2010 4:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">comegordas wrote:</div><div class="quotecontent">my emu is showing graphics at the poor rate of 5 FPS. as the same as Undubbed i'm using C + Allegro and the "_putpixel" function, but i tried to run the EXE file outside the IDE but nothing changed.</div><br />Are you compiling an optimized/release build, or are you still running the debug build? Have you tried compiling a profiling build? Profiling should help you find bottlenecks (such as makecol()) and think of fixes (such as your solution of caching makecol() results) more rapidly.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">maybe with SDL? i don't think that will make radical changes :\</div>
<br />The one advantage of SDL that I can think of is that if you make a Linux port, sound will work even on distributions such as Ubuntu that have switched to PulseAudio.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Tue Aug 24, 2010 2:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thanks Tepples. tried to run the profiler but couldn't make it work (i'm using Code::Blocks + Allegro), but i guess that's something offlimits here in NESDev. anyway, i think the problem is on the "makecol()" function, so i'll have to find a palette with just one value per color (and not 3 like the one i'm actually using). have one already but it's completely wrong, but maybe is because i'm fetching the wrong colors. the 3-values-per-color palette i'm using now was taken from NESdoc.pdf and i'm still showing the wrong colors. who knows! <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Tue Aug 24, 2010 6:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />look now without the makecol() function (and using _putpixel()): 539 FPS!!! <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> 
<br />
<br />but i'm sure that i'm fetching the colors incorrectly :\
<br />about the palette mirroring, i've found different information in different docs, so finally implemented the palette mirroring like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Writes to PPU $2007<br /><br />if&#40;PPU_2006 == 0x3f00&#41; for&#40;i = 0x3f00; i &lt;= 0x3f1c; i += 4&#41; VRAM&#91;i&#93; = Valor;</div><br /><br />...and the i have a mirror of $3F00 at $3F04/$3F08/$3F0C/$3F10/$3F14/$3F18/$3F1C as the wiki says.<br /><br />this is my actual palette:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static const byte Paleta&#91;64&#93; =<br />&#123;<br />&nbsp; &nbsp; 0x00, 0x10, 0x20, 0x30,0x01, 0x11, 0x21, 0x31,<br />&nbsp; &nbsp; 0x02, 0x12, 0x22, 0x32,0x03, 0x13, 0x23, 0x33,<br />&nbsp; &nbsp; 0x04, 0x14, 0x24, 0x34,0x05, 0x15, 0x25, 0x35,<br />&nbsp; &nbsp; 0x06, 0x16, 0x26, 0x36,0x07, 0x17, 0x27, 0x37,<br />&nbsp; &nbsp; 0x08, 0x18, 0x28, 0x38,0x09, 0x19, 0x29, 0x39,<br />&nbsp; &nbsp; 0x0A, 0x1A, 0x2A, 0x3A,0x0B, 0x1B, 0x2B, 0x3B,<br />&nbsp; &nbsp; 0x0C, 0x1C, 0x2C, 0x3C,0x0D, 0x1D, 0x2D, 0x3D,<br />&nbsp; &nbsp; 0x0E, 0x1E, 0x2E, 0x3E,0x0F, 0x1F, 0x2F, 0x3F<br />&#125;;</div>
<br />
<br />at this point... any hints? maybe i'm fetching incorrectly the attribute bytes :\
<br />
<br />anyway, here's a pic that may help to solve the problem:
<br />
<br /><img src="http://img837.imageshack.us/img837/1954/sinttulo2b.gif" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Aug 24, 2010 6:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You don't need to use allegro's makecol() routine. You can make your own array of NES palette to RGB values. This is what I did. So when you need color 3 or something like that it's just a lookup in the NESGLOBALPAL[3] array. It looks like you are trying this with 8bit color mode.
<br />
<br />First test that your palette is correct at all by only drawing using the first palette and just test games looking to see if any of the background is in the correct colors. Donkey Kong I think is good for that. If nothing is in correct colors its a emulator palette issue and not an emulator attribute fetching issue.
<br />
<br />The reason you had such a speed boost by removing makecol() is because you were probably calling it thousands of times per frame. 
<br />
<br />You can always post your code for how you are decoding what attribute/palette to use for each background tile and we can try to spot any errors you may have.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Aug 24, 2010 7:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">So when you need color 3 or something like that it's just a lookup in the NESGLOBALPAL[3] array.</div>
<br />Couldn't this array be bi-dimensional so that it is able to translate color emphasis too?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Aug 24, 2010 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sometimes color emphesis is done in an 8-bit mode by ORing the color with 64, 128, or 192.  Then you have different emphesized versions of the palette.  This limits you to 4 different emphasis settings per frame though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Aug 24, 2010 7:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Sometimes color emphesis is done in an 8-bit mode</div>
<br />Oh yeah, 8-bit is not enough for all 8 variations of the palette. I was assuming a mode with more colors when I suggested that. I think it's important to be able to do what the NES can, even if no games did it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>comegordas</b> [ Tue Aug 24, 2010 7:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thank you guys, you're really helping me. just wish that someday i could give all this help back. you know, sharing is all we have in this hobby.
<br />
<br />yeah, so it was just that stupid function. i was calling it for reach pixel geting drawn, that was the bottleneck. i almost thought that was a hardware issue of my computer!!! wich BTW is very slow... (don't tell anybody, but when i bought it the shop gifted me a slave with a shovel and a sack of coal to feed it <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> )
<br />
<br />i'll try to fix the palette and see what's happen. in order to solve this mess i tried to fix the colors by taking a snapshot of the screen of Balloon Fight runing on FCEUXD, then copy that snapshot on a Photoshop window and extract the color number via the dropper tool (dropper? is that the name in english of "cuentagotas"? google's translator helped me on this...). the problem was that the color values in Photoshop are given in 24-bits bit format, so i tried the set all the drawing and the color depth in 24-bits, but didn't work, colors looked really dark.
<br />
<br />anyway, if this is a palette issue then its a minor issue. the major issue should be the color fetching algorithm. i'll show you my code, sure it'll be helpful for you to give some hints.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int i, j, Y, temp1, temp2;<br />byte NT_Entry, PT_Entry_Low, PT_Entry_High, AT_Entry, EmphasisBits, PaletteEntry;<br />word PT_Addr, NT_Addr, TileNumber;<br />byte ColorBit0, ColorBit1, ColorBit2and3, ColorIndex;<br />byte OAM_Byte0, OAM_Byte1, OAM_Byte2, OAM_Byte3;<br /><br />word PPUCycle, SpriteX, SpriteY;<br />byte OAM&#91;32&#93;, SpriteCounter, SpriteByte;<br />int SpriteRange;<br /><br />void RunScanline&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;if&#40;CoordY == 239&#41; CoordY = 0;<br /><br />&nbsp; &nbsp;if&#40;Scanline == 0&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; // Nothing here yet...<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;else if&#40;&#40;Scanline &gt; 0 &#41; &amp;&amp; &#40;Scanline &lt;= 240&#41;&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; if&#40;READ_BIT&#40;PPU_2001,3&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// BACKGROUND ROUTINE. Just pay atention the color fetching lines, the rest<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// works fine :&#41;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PT_Addr = READ_BIT&#40;PPU_2000,4&#41; &lt;&lt; 12;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;NT_Addr = &#40;&#40;PPU_2000 &amp; 0x3&#41; &lt;&lt; 10&#41; + 0x2000;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;EmphasisBits = &#40;&#40;PPU_2001 &amp; 0xe0&#41; &gt;&gt; 5&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CoordX = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for&#40;i = 0; i &lt; 32; i++&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y = &#40;Scanline - 1&#41; % 8;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TileNumber = &#40;&#40;&#40;Scanline - 1&#41; &gt;&gt; 3&#41; &lt;&lt; 5&#41; + i;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NT_Entry = VRAM&#91;NT_Addr + TileNumber&#93;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PT_Entry_Low = VRAM&#91;PT_Addr + &#40;NT_Entry &lt;&lt; 4&#41; + Y&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PT_Entry_High = VRAM&#91;PT_Addr + &#40;NT_Entry &lt;&lt; 4&#41; + Y + 8&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;j = 7; j &gt;= 0; j--&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ColorBit0 = READ_BIT&#40;PT_Entry_Low,j&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ColorBit1 = READ_BIT&#40;PT_Entry_High,j&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if&#40;EmphasisBits&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // TO DO!!!<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf&#40;&quot;Emphasis bits!!!&quot;&#41;; getch&#40;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;ColorBit0 || ColorBit1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Using a crappy array to fetch AT bytes. Couldn't find<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// some maths to do it, please don't laugh :&#40;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AT_Entry = VRAM&#91;NT_Addr + 0x3c0 + AT_Byte&#91;TileNumber&#93;&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;switch&#40;AT_Bits&#91;TileNumber&#93;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0x03: ColorBit2and3 = AT_Entry &amp; AT_Bits&#91;TileNumber&#93;; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0x0c: ColorBit2and3 = &#40;AT_Entry &amp; AT_Bits&#91;TileNumber&#93;&#41; &gt;&gt; 2; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0x30: ColorBit2and3 = &#40;AT_Entry &amp; AT_Bits&#91;TileNumber&#93;&#41; &gt;&gt; 4; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0xc0: ColorBit2and3 = &#40;AT_Entry &amp; AT_Bits&#91;TileNumber&#93;&#41; &gt;&gt; 6; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ColorIndex = &#40;ColorBit2and3 &lt;&lt; 2&#41; | &#40;ColorBit1 &lt;&lt; 1&#41; | ColorBit0;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PaletteEntry = VRAM&#91;0x3f00 + ColorIndex&#93; &amp; 0x3f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_putpixel&#40;ScreenBuffer,CoordX,CoordY,Paleta&#91;PaletteEntry&#93;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PaletteEntry = VRAM&#91;0x3f00&#93; &amp; 0x3f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_putpixel&#40;ScreenBuffer,CoordX,CoordY,Paleta&#91;PaletteEntry&#93;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CoordX++;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; CoordY++;<br />&nbsp; &nbsp; &nbsp; <br /><br />&nbsp; &nbsp; &nbsp; if&#40;READ_BIT&#40;PPU_2001,4&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// SPRITES ROUTINE<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// This routine is far from the described in Qeed's doc, just made to see some<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// basic results.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Initialize OAM to 0xFF<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for&#40;i = 0; i &lt; 32; i++&#41; OAM&#91;i&#93; = 0xff;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SpriteCounter = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for&#40;i = 0; i &lt; 0x100; i += 4&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // A crappy way stop the sprites fetching when 8 sprites in a scanline<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // had already been fetched<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;SpriteCounter == 8&#41; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Evaluate sprite's range<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SpriteRange = &#40;&#40;Scanline - 1&#41; - 21&#41; - &#40;SRAM&#91;i&#93; + 1&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // If sprite's in range copy the rest of its data into OAM<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;&#40;SpriteRange &gt;= 0&#41; &amp;&amp; &#40;SpriteRange &lt;= 7&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for&#40;j = 0; j &lt; 4; j++&#41; OAM&#91;&#40;SpriteCounter &lt;&lt; 2&#41; + j&#93; = SRAM&#91;i + j&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SpriteCounter++;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for&#40;i = 0; i &lt; SpriteCounter; i++&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Fetch sprite's data<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OAM_Byte0 = OAM&#91;0 + &#40;i &lt;&lt; 2&#41;&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OAM_Byte1 = OAM&#91;1 + &#40;i &lt;&lt; 2&#41;&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OAM_Byte2 = OAM&#91;2 + &#40;i &lt;&lt; 2&#41;&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OAM_Byte3 = OAM&#91;3 + &#40;i &lt;&lt; 2&#41;&#93;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TileNumber = OAM_Byte1;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PT_Addr = &#40;READ_BIT&#40;PPU_2000,3&#41; &lt;&lt; 12&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y = &#40;Scanline - 1&#41; % 8;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PT_Entry_Low = VRAM&#91;PT_Addr + &#40;TileNumber &lt;&lt; 4&#41; + Y&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PT_Entry_High = VRAM&#91;PT_Addr + &#40;TileNumber &lt;&lt; 4&#41; + Y + 8&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SpriteX = OAM_Byte3;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SpriteY = OAM_Byte0 + Y;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // &quot;Normal&quot; sprite rendering<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;!&#40;OAM&#91;2 + &#40;i &lt;&lt; 2&#41;&#93; &amp; 0x40&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for&#40;j = 7; j &gt;= 0; j--&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ColorBit0 = READ_BIT&#40;PT_Entry_Low,j&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ColorBit1 = READ_BIT&#40;PT_Entry_High,j&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;ColorBit0 || ColorBit1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ColorBit2and3 = OAM_Byte2 &amp; 0x3;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ColorIndex = &#40;ColorBit2and3 &lt;&lt; 2&#41; | &#40;ColorBit1 &lt;&lt; 1&#41; | ColorBit0;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PaletteEntry = VRAM&#91;0x3f10 + ColorIndex&#93; &amp; 0x3f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_putpixel&#40;ScreenBuffer,SpriteX,SpriteY,Paleta&#91;PaletteEntry&#93;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SpriteX++;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Horizontally flipped sprite rendering<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for&#40;j = 0; j &lt;= 7; j++&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ColorBit0 = READ_BIT&#40;PT_Entry_Low,j&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ColorBit1 = READ_BIT&#40;PT_Entry_High,j&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;ColorBit0 || ColorBit1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ColorBit2and3 = OAM_Byte2 &amp; 0x3;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ColorIndex = &#40;ColorBit2and3 &lt;&lt; 2&#41; | &#40;ColorBit1 &lt;&lt; 1&#41; | ColorBit0;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PaletteEntry = VRAM&#91;0x3f10 + ColorIndex&#93; &amp; 0x3f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_putpixel&#40;ScreenBuffer,SpriteX,SpriteY,Paleta&#91;PaletteEntry&#93;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SpriteX++;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp;&#125;<br />&#125;</div>
<br />
<br />...and that's it. don't have to pay extremely atention at the code, just give it a fast check. i know there's no good in posting code. i'm feeling like i'm treating you like as my teachers at college, wich is kind of embarazing because there's no reason for you to waist your time in correcting my code :\

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>