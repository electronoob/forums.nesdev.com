<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - I created an emulator...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">I created an emulator...</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8385">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8385</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zelex</b> [ Wed Dec 21, 2011 8:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very awesome! Great job!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zelex</b> [ Wed Dec 21, 2011 9:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The implementation is very clever. I must study this further.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zelex</b> [ Wed Dec 21, 2011 9:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How did you generate the Base64 (err, Base256? =D) encoded strings? Another program, or by hand?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Dec 30, 2011 4:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zelex wrote:</div><div class="quotecontent">How did you generate the Base64 (err, Base256? =D) encoded strings? Another program, or by hand?</div>
<br />Sorry about taking many days to notice your post. phpBB only sent me a notification of your first post, and I did not know about the second one. Or the third one.
<br />Answer: Another program.
<br />
<br />For each micro-op (each of those lines is one), a list of opcodes using that micro-op is built.<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; // $point = current micro-op ID, $plans = list of micro-ops required by all opcodes &#40;the list is called a &quot;plan&quot;&#41;<br />&nbsp; $ops = Array&#40;&#41;;<br />&nbsp; foreach&#40;$plans as $op =&gt; $plan&#41;<br />&nbsp; &nbsp; if&#40;isset&#40;$plan&#91;$point&#93;&#41;&#41;<br />&nbsp; &nbsp; &nbsp; $ops&#91;$op&#93; = $op;</div>Then the list is converted into a string by translating 8 bits at once using a character lookup array:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; $ranges = Array&#40;&#41;;<br />&nbsp; &nbsp; for&#40;$n=0; $n*8&lt;0x103; ++$n&#41; //<br />&nbsp; &nbsp; &nbsp; $ranges&#91;&#93; = 0;<br />&nbsp; &nbsp; foreach&#40;$ops as $o&#41;<br />&nbsp; &nbsp; &nbsp; $ranges&#91;&#40;int&#41;&#40;$o / 8&#41;&#93; |= 1 &lt;&lt; &#40;$o % 8&#41;;<br />&nbsp; &nbsp; $s = '';<br />&nbsp; &nbsp; for&#40;$n=0; $n*8&lt;0x103; ++$n&#41; //<br />&nbsp; &nbsp; &nbsp; $s .= $rangebytetranslation&#91;$ranges&#91;$n&#93;&#93;;<br />&nbsp; &nbsp; $s = '&quot;'.$s.'&quot;';</div><br />The lookup array (which determines which character maps into which byte) was built as follows:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$bitno = 0;<br />// Initial version, using BASE64 &#40;6 bits per character&#41;:<br />$charset = &quot; !&quot;;<br />&nbsp;for&#40;$c=0; $c&lt;15; ++$c&#41; $charset .= chr&#40;65+$c&#41;; // A-O<br />&nbsp;for&#40;$c=0; $c&lt;11; ++$c&#41; $charset .= chr&#40;80+$c&#41;; // P-Z<br />&nbsp;for&#40;$c=1; $c&lt;10; ++$c&#41; $charset .= chr&#40;48+$c&#41;; // 0-9 <br />&nbsp;for&#40;$c=0; $c&lt;15; ++$c&#41; $charset .= chr&#40;97+$c&#41;; // a-o <br />&nbsp;for&#40;$c=0; $c&lt;11; ++$c&#41; $charset .= chr&#40;112+$c&#41;; // p-z<br /><br />// Figure out which kind of bytes we actually are going to need to present:<br />$rangebytetranslation = Array&#40;&#41;;<br />$rangebytes = Array&#40;&#41;;<br />foreach&#40;$points as $point =&gt; $code&#41;<br />&#123;<br />&nbsp; $ops = Array&#40;&#41;;<br />&nbsp; foreach&#40;$plans as $op =&gt; $plan&#41; if&#40;isset&#40;$plan&#91;$point&#93;&#41;&#41; $ops&#91;$op&#93; = $op;<br />&nbsp; $ranges = Array&#40;&#41;;<br />&nbsp; for&#40;$n=0; $n*8&lt;0x103; ++$n&#41; $ranges&#91;&#93; = 0;<br />&nbsp; foreach&#40;$ops as $o&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$ranges&#91;&#40;int&#41;&#40;$o / 8&#41;&#93; |= 1 &lt;&lt; &#40;$o % 8&#41;;<br />&nbsp; foreach&#40;$ranges as $v&#41; @$rangebytes&#91;$v&#93; += 1;<br />&#125;<br />ksort&#40;$rangebytes&#41;; #$rangebytes = array_reverse&#40;$rangebytes, true&#41;;</div><br />By observing patterns within the bytes that need to be represented, I created an encoding which is easy to encode and relatively easy to decode.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Assign a character for each of those distinct bytes.<br />$n=94;<br />$tab = ''; $firstn=-1;<br />foreach&#40;$rangebytes as $v=&gt;$tmp&#41;<br />&#123;<br />&nbsp; if&#40;$v&lt;=1&#41; $c = 32+$v;<br />&nbsp; #elseif&#40;$v &lt;= 26&#41; $c = 64 + $v;<br />&nbsp; elseif&#40;$v &lt;&nbsp; 64&#41; $c = 40 + $v; <br />&nbsp; else &#123; if&#40;$firstn&lt;0&#41; $firstn = $v;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$tab .= chr&#40;32 + $v - $firstn&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$c = $n++; &#125;//?<br />&nbsp; $rangebytetranslation&#91;$v&#93; = chr&#40;$c&#41;;//$charset&#91;$n++&#93;;<br />&#125;</div><br /><br />By the way, here is a version that uses hexadecimal numeric constants, requiring no C++0x. One may guess why I did not use it in that video.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; /* Decode address operand */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;1,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, addr = 0xFFFA&#41; // NMI vector location<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;2,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, addr = 0xFFFC&#41; // Reset vector location<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;4,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001, addr = 0xFFFE&#41; // Interrupt vector location<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FB,0xFAFFF0FA, addr = RB&#40;PC++&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xF0F0000A,0xF0F0000A,0x3030000A,0x3030000A,0xF0F0000A,0xF0F0000A,0xF0F0000A,0xF0F0000A, d = X&#41; // register index<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x0A0E0000,0x0A0E0000,0xCACE0000,0xCACE0000,0x0A0E0000,0x0A0E0000,0x0A0E0000,0x0A0E0000, d = Y&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A, addr=u8&#40;addr+d&#41;; d=0; tick&#40;&#41;&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // add zeropage-index<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xFA00F000,0xFA00F000,0xFA00F000,0xFA00F000,0xFA00F000,0xFA00F000,0xFA00F001,0xFA00F000, addr=u8&#40;addr&#41;;&nbsp; &nbsp;addr+=256*RB&#40;PC++&#41;&#41;&nbsp; &nbsp; &nbsp; &nbsp;// absolute address<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x000E000A,0x000E000A,0x000E000A,0x000E000A,0x000E100A,0x000E000A,0x000E000A,0x000E000B, addr=RB&#40;c=addr&#41;; addr+=256*RB&#40;wrap&#40;c,c+1&#41;&#41;&#41;// indirect w/ page wrap<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x32020000,0x32020000,0xFA0E0000,0x00000000,0x32020000,0x32020000,0x32020000,0x32020000, Misfire&#40;addr, addr+d&#41;&#41; // abs. load: extra misread when cross-page<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xC80C0000,0xC80C0000,0x00000000,0xFA0E0000,0xC80C0000,0xC80C0000,0xC80C0000,0xC80C0000, RB&#40;wrap&#40;addr, addr+d&#41;&#41;&#41;// abs. store: always issue a misread<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Load source operand */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0xAAAAAAAA,0x00000500,0xAAAAAAAA,0x00000C04,0xAAAAAFAE,0xAAAABEBE,0xAAAAAEAE, t &amp;= A&#41; // Many operations take A or X as operand. Some try in<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00001111,0x00000C00,0x00000000,0xCCCCCCC8,0x00000000,0x00000000,0x00000000,0x00000000, t &amp;= X&#41; // error to take both; the outcome is an AND operation.<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00001111,0x00000000,0x11101111,0x00000000,0x00000000,0x00000000,0x00000000, t &amp;= Y&#41; // sty,dey,iny,tya,cpy<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x0C000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, t &amp;= S&#41; // tsx, las<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x01010000,0x01010000,0x01010000,0x00010000,0x01010000,0x01010000,0x01010000,0x01010101, t &amp;= P.raw|pbits; c = t&#41;// php, flag test/set/clear, interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00001011,0xAAAABABB,0x00000000,0x00000000,0x00000000,0xAAAAA2AA,0xAAAAB2BA,0xAAAAA2AA, c = t; t = 0xFF&#41;&nbsp; &nbsp; &nbsp; &nbsp; // save as second operand<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xEAEEF0FA,0xEAEEF0FA,0xFAFEF0FA,0x00000000,0xEAEEE0EA,0xEAEEE0EA,0xEAEEF0FA,0xEAEEE0EA, t &amp;= RB&#40;addr+d&#41;&#41; // memory operand<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000A05,0x00000A05,0x00000A05,0x00000A05,0x00000A04,0x00000A04,0x00000A04,0x00000A04, t &amp;= RB&#40;PC++&#41;&#41;&nbsp; &nbsp;// immediate operand<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Operations that mogrify memory operands directly */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00001010,0x00000000, P.V = t &amp; 0x40; P.N = t &amp; 0x80&#41; // bit<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0xC8CCCCCC,0x00000000,0xC8CCC4CC,0x00000000, sb = P.C&#41;&nbsp; &nbsp; &nbsp; &nbsp;// rol,rla, ror,rra,arr<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000800,0x00000000,0xC8CCCCCC,0xC8CCCCCC, P.C = t &amp; 0x80&#41; // rol,rla, asl,slo,&#91;arr,anc&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0xC8CCC4CC,0xC8CCCCCC,0x00000000,0x00000000, P.C = t &amp; 0x01&#41; // lsr,sre, ror,rra,asr<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xC8CCC4CC,0xC8CCC4CC, t = &#40;t &lt;&lt; 1&#41; | &#40;sb &lt;&lt; 0&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0xC8CCCCCC,0xC8CCCCCC,0x00000000,0x00000000, t = &#40;t &gt;&gt; 1&#41; | &#40;sb &lt;&lt; 7&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0xC8CCC4C8,0x00000000,0x00000100,0x00000000,0x00000000,0x00000000,0x00000000, t = u8&#40;t - 1&#41;&#41;&nbsp; // dec,dex,dey,dcp<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xC8CCC1C8,0x00000100,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, t = u8&#40;t + 1&#41;&#41;&nbsp; // inc,inx,iny,isb<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Store modified value &#40;memory&#41; */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xC8CCC0C8,0xC8CCC0C8,0x00000000,0x22FEF0FA,0xC8CCC0C8,0xC8CCC0C8,0xC8CCC0C8,0xC8CCC0C8, WB&#40;addr+d, t&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0xD8000000,0x00000000,0x00000000,0x00000000,0x00000000, WB&#40;wrap&#40;addr, addr+d&#41;, t &amp;= &#40;&#40;addr+d&#41; &gt;&gt; 8&#41;&#41;&#41; // &#91;shx,shy,shs,sha?&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Some operations used up one clock cycle that we did not account for yet */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0xDDDCC5C8,0xDDDCC5C8,0x05000500,0x05000500,0xDDDCC5D9,0xDDDCC5D8,0xDDDCC5C9,0xDDDCD5D9, tick&#40;&#41;&#41; // nop,flag ops,inc,dec,shifts,stack,transregister,interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Stack operations and unconditional jumps */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000001,0x00000100,0x00000000, tick&#40;&#41;; t = Pop&#40;&#41;&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // pla,plp,rti<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000001,0x00000000,0x00000000, RB&#40;PC++&#41;; PC = Pop&#40;&#41;; PC |= &#40;Pop&#40;&#41; &lt;&lt; 8&#41;&#41; // rti,rts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x00000000,0x00000000, RB&#40;PC++&#41;&#41;&nbsp; // rts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000001, d=PC+&#40;op?-1:1&#41;; Push&#40;d&gt;&gt;8&#41;; Push&#40;d&#41;&#41;&nbsp; &nbsp; &nbsp; // jsr, interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x00000000,0x00000000,0x00000000,0x00000000,0x00001000,0x00001000,0x00000001,0x00000001, PC = addr&#41; // jmp, jsr, interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000000,0x00000101, Push&#40;t&#41;&#41;&nbsp; &nbsp;// pha, php, interrupts<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Bitmasks */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x01010000,0x01010000,0x01010000,0x00010000,0x01010000,0x01010000,0x01010000,0x01010001, t = 1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x01010000,0x01010000,0x00000000,0x00000000,0x00000000,0x00000000,0x00010000,0x00010000, t &lt;&lt;= 1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x01000000,0x01000000,0x01000000,0x00000000,0x01010000,0x01010000,0x00010000,0x00010001, t &lt;&lt;= 2&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x01000000,0x00000000,0x00010000,0x00010000,0x00010000,0x00010000, t &lt;&lt;= 4&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xAAAAAAAA,0x01000000,0x01000000,0x00000000,0x00000000,0x01000000,0x00000000,0x01000000, t = u8&#40;~t&#41;&#41; // sbc, isb,&nbsp; &nbsp; &nbsp; clear flag<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x01000000,0x00000000,0x00000000,0x00000000,0x01000000,0x00000000,0x01000000,0xAAAAA2AB, t = c | t&#41;&nbsp; // ora, slo,&nbsp; &nbsp; &nbsp; set flag<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00010000,0x01010000,0x01010000,0x00010000,0x00010000,0x01010000,0xAAABB2BA,0x01010000, t = c &amp; t&#41;&nbsp; // and, bit, rla, clear/test flag<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xAAAAA2AA,0x00000000,0x00000000, t = c ^ t&#41;&nbsp; // eor, sre<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Conditional branches */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00010000,0x00000000,0x00010000,0x00000000,0x00010000,0x00000000,0x00010000,0x00000000, if&#40;t&#41;&nbsp; &#123; tick&#40;&#41;; Misfire&#40;PC, addr = s8&#40;addr&#41; + PC&#41;; PC=addr; &#125;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00010000,0x00000000,0x00010000,0x00000000,0x00010000,0x00000000,0x00010000, if&#40;!t&#41; &#123; tick&#40;&#41;; Misfire&#40;PC, addr = s8&#40;addr&#41; + PC&#41;; PC=addr; &#125;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Addition and subtraction */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xAAAAAAAA,0x00000000,0x00000000,0x00000000,0xAAAAA2AA,0x00000000,0x00000000,0x00000000, c = t; t += A + P.C; P.V = &#40;c^t&#41; &amp; &#40;A^t&#41; &amp; 0x80; P.C = t &amp; 0x100&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00001011,0xAAAABABB,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, t = c - t; P.C = ~t &amp; 0x100&#41; // cmp,cpx,cpy, dcp, sbx<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Store modified value &#40;register&#41; */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xAAAAAAAA,0x00000000,0xAAAAAAAA,0x01000C00,0xAAAAAFAE,0xAAAAAEAE,0xAAAAAEAE,0xAAAAAEAE, A = t&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000100,0x00000C00,0xCCCCCCCC,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, X = t&#41; // ldx, dex, tax, inx, tsx,lax,las,sbx<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000100,0x10101111,0x00000100,0x00000000,0x00000000,0x00000000,0x00000000, Y = t&#41; // ldy, dey, tay, iny<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x08000000,0x0C000000,0x00000000,0x00000000,0x00000000,0x00000000, S = t&#41; // txs, las, shs<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;7,0x01000000,0x01000000,0x01000000,0x00000000,0x01000000,0x01000001,0x01000100,0x01000001, P.raw = t &amp; ~0x30&#41; // plp, rti, flag set/clear<br />&nbsp; &nbsp; &nbsp; &nbsp; /* Generic status flag updates */<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xEAEEFBFB,0xEAEEFFFB,0xFEFEFFFF,0x01000D00,0xEAEEEFEE,0xEAEEEEEE,0xEAEEEEEE,0xEAEEEEEE, P.N = t &amp; 0x80&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0xEAEEFBFB,0xEAEEFFFB,0xFEFEFFFF,0x01000D00,0xEAEEEFEE,0xEAEEEEEE,0xEAEEFEFE,0xEAEEEEEE, P.Z = u8&#40;t&#41; == 0&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000800,0x00000000,0x00000000,0x00000000, P.V = &#40;&#40;&#40;t &gt;&gt; 5&#41;+1&#41;&amp;2&#41;&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// &#91;arr&#93;</div>It can be decoded like this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; // Define the opcode decoding matrix, which decides which micro-operations constitute<br />&nbsp; &nbsp; &nbsp; &nbsp; // any particular opcode. &#40;Note: The PLA of 6502 works on a slightly different principle.&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; const unsigned o8 = op / 32, o8m = 1u &lt;&lt; &#40;op%32&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; #define t&#40;w8,w7,w6,w5,w4,w3,w2,w1,w0,code&#41; if&#40; \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#40;o8&lt;1?w0##u : o8&lt;2?w1##u&nbsp; : o8&lt;3?w2##u : o8&lt;4?w3##u : \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;o8&lt;5?w4##u : o8&lt;6?w5##u&nbsp; : o8&lt;7?w6##u : o8&lt;8?w7##u : w8##u&#41; &amp; o8m&#41; &#123; code; &#125;</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>