<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=5662" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-03-02T18:26:50-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=5662</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-03-02T18:26:50-07:00</updated>
<published>2010-03-02T18:26:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57433#p57433</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57433#p57433"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57433#p57433"><![CDATA[
<div class="quotetitle">bigjt_2 wrote:</div><div class="quotecontent"><br />So, just as a clue for later, when I get advanced enough to do scrolling and start wanting to shift nametables, does it work kind of like this, where there's a quick graphical update in NMI and the logic to shift into one nametable or another is handled in logic outside of NMI?<br /></div><br />It's similar, but unfortunately Nintendo didn't include something to speed things up (like the DMA does for sprites), so we must do most of it ourselves.<br /><br />Inside the game logic loop is where all the camera movement will be, and whenever the camera moves enough to show a new part of the level you have to read data from your level map (what format will be used to encode it is up to you) and feed some buffers with the tile and attribute data corresponding to the new part of the level. Then, inside the NMI, you copy that data to VRAM as fast as you can.<br /><br />It's the same principle: compute all the data inside the game logic loop and in the NMI just upload the computed data to VRAM.<br /><br />Note that to make a scrolling game you don't have to shift the whole background, as that would take too much time and would be impossible to update in a single VBlank. This is why the hardware scroll exists, to display different parts of the name tables based on the coordinates you give it. This means that each frame you only have to worry about new background elements that enter the game view from the edges of the camera.<br /><br />Like I always recommend, play a scrolling game (preferably one that doesn't use 1-screen mirroring, because that's hard to see) in an emulator that has name table viewing (FCEUX(D), Nintendulator... even Nesticle!) and watch how the new things that enter the view replace old ones that are no longer visible.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Mar 02, 2010 6:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bigjt_2]]></name></author>
<updated>2010-03-02T17:40:03-07:00</updated>
<published>2010-03-02T17:40:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57431#p57431</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57431#p57431"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57431#p57431"><![CDATA[
Okay, I see the difference now.  So in this instance the graphic update (and the only thing that really needs done in NMI) is the DMA, which is simply transferring my sprites (with their current attributes and coordinates) from my RAM (in this case the $0200 page) to the PPU (through the $4014 write register).  And that, of course, is done right after the NMI: label.<br /><br />I just re-incorporated my UpdateSprites back into the main logic and see it's still working fine.  Cool, learned something again.  Getting there slowly but surely.  Thanks!<br /><br />So, just as a clue for later, when I get advanced enough to do scrolling and start wanting to shift nametables, does it work kind of like this, where there's a quick graphical update in NMI and the logic to shift into one nametable or another is handled in logic outside of NMI?  I'm assuming it is.  (I'm not asking for specifics, just a general idea, mostly because I barely understand how scrolling works right now).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4230">bigjt_2</a> — Tue Mar 02, 2010 5:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-03-02T17:11:07-07:00</updated>
<published>2010-03-02T17:11:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57429#p57429</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57429#p57429"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57429#p57429"><![CDATA[
<div class="quotetitle">bigjt_2 wrote:</div><div class="quotecontent"><br />I've placed the logic into a main loop called GameLogic:, separated it from the NMI, and left only the update logic for my moving box sprite within the NMI.<br /></div><br />Technically, updating the positions of the sprites should be part of the game logic too. Ideally, the NMI would just do the sprite DMA and set up the display for the next frame. In the NMI you should only have the bare essentials for updating VRAM. <br /><br />Maybe you though you had to update the sprite coordinates during Vblank because everyone says that video-related stuff should be done at that time, but modifying the RAM where the sprite data is does not count as a video-update operation. That's just regular RAM, you can mess with it whenever you want. What must be done during Vblank is the sprite DMA, which will copy the data from RAM to the OAM. As long as the DMA is done during Vblank, you can modify the values in the page you set aside for sprites all you want, no restrictions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I know it's unlikely that the small amount of logic code I have in this basic collision test would spill over the frame and get nailed by the next NMI firing, but I can easily see where this would cause problems on more advanced projects and wanted to start teaching myself better habits now.<br /></div><br />Yeah, that's the idea. If you design the structure of your program well, it will give you less headaches in the future.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Mar 02, 2010 5:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bigjt_2]]></name></author>
<updated>2010-03-02T15:28:53-07:00</updated>
<published>2010-03-02T15:28:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57421#p57421</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57421#p57421"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57421#p57421"><![CDATA[
Thanks so much guys,<br /><br />I've learned a lot from this thread and the document metalslime recommended about NMI and Vblank.  Just to check that I understand and am doing things a little better, I've placed some new code at the link below where I've placed the logic into a main loop called GameLogic:, separated it from the NMI, and left only the update logic for my moving box sprite within the NMI.  I also implemented the technique Celius recommended at the end of the main loop (again, called GameLogic), as well as the better controller reading bunnyboy covers in one of his tutorials. <br /><br /><a href="http://www.mediafire.com/?w2hgoyzd4mm" class="postlink">http://www.mediafire.com/?w2hgoyzd4mm</a><br /><br />I know it's unlikely that the small amount of logic code I have in this basic collision test would spill over the frame and get nailed by the next NMI firing, but I can easily see where this would cause problems on more advanced projects and wanted to start teaching myself better habits now.  If any of you wish to take a look and let me know what I can improve, please do.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4230">bigjt_2</a> — Tue Mar 02, 2010 3:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-02-28T18:27:40-07:00</updated>
<published>2010-02-28T18:27:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57357#p57357</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57357#p57357"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57357#p57357"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />The 7-cycle jitter will always happen, whether from a loop like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">: cmp nmis<br />  beq :-<br /></div><br /></div><br />With this code, the jitter will not be as big if the timing-sensitive code is inside the NMI, because the instruction that is executing when the interrupt fires is the only one that matters in this case. If however your NMI just sets a flag (which is how you said your programs work), the whole time this loop takes matters.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />or from a single 7-cycle instruction like "rol $0100,x" (which I in fact use in my CHR decompressor).<br /></div><br />Only slow instructions like these will cause 7-cycle jitters if the timing-sensitive code is inside the NMI, but that's the worst that can happen because no instruction takes longer than this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Feb 28, 2010 6:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-02-28T12:21:26-07:00</updated>
<published>2010-02-28T12:21:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57349#p57349</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57349#p57349"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57349#p57349"><![CDATA[
But if the NMI occurs anywhere but a tight loop like the cmp/beq loop, it might run into one of these 7-cycle RMW instructions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Feb 28, 2010 12:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-02-28T10:22:29-07:00</updated>
<published>2010-02-28T10:22:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57342#p57342</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57342#p57342"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57342#p57342"><![CDATA[
No, inside an interrupt which happen in a cmp/beq loop, there is 3 cycle jitter because both the cmp and the beq takes 3 cycles (and all similar loops, such as lda/bne, lda/beq, cmp/bne, bit/bpl, etc... are the same which is useful). This is what I tried to explain in my latest update of my raster code FAQ.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Feb 28, 2010 10:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-02-28T10:06:08-07:00</updated>
<published>2010-02-28T10:06:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57341#p57341</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57341#p57341"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57341#p57341"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />(the only time I've ever done this is in my "midscanline" demo where 7 cycle jitter wasn't acceptable).<br /></div><br />The 7-cycle jitter will always happen, whether from a loop like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">: cmp nmis<br />  beq :-<br /></div><br />or from a single 7-cycle instruction like "rol $0100,x" (which I in fact use in my CHR decompressor).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Feb 28, 2010 10:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-02-28T09:09:51-07:00</updated>
<published>2010-02-28T09:09:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57340#p57340</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57340#p57340"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57340#p57340"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I'd still recommand doing what Celius says for standard applications, but in some cases if you do crazy raster effects and want to synchronize with NMI (instead of sprite zero hit) you're pretty much forced to do otherwise and have your raster effect in NMI.<br /></div><br />SMB, for example, could have avoided the shaky status bar if the NMI, firing at the start of every VBlank, handled everything related to it (scroll, sprite 0 hit), only returning control to the game logic after having displayed it and adjusted the scroll for the gameplay window.<br /><br />Things that should happen even during lag frames should go in the NMI, it's the only way to make sure they will always happen. But you can't have <strong>only</strong> the critical stuff in the NMI, because you can't, for example, run the music code and then return control to the main thread to take care of VRAM updates, because a lot of VBlank time would have been wasted with music. So the logical answer is to put all video updates in the NMI as well, before the critical stuff.<br /><br />Celius' set up allows for this, VRAM updates and critical stuff (music, status bar) go into the "blah code" part. It's important that the code that updates VRAM makes sure a frame is complete and that the values in the buffers are valid though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Feb 28, 2010 9:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-02-28T08:58:07-07:00</updated>
<published>2010-02-28T08:58:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57339#p57339</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57339#p57339"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57339#p57339"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Well, that's simply not true, it could have as well returned from NMI to the main loop which checks the "nmi flag". There's no upside to doing that though if you need raster timed code, so might as well have everything in NMI. (And there's a small downside: the NMI flag polling loop will result in a more variable delay depending what code is executing when NMI occurs.)<br /></div><br />You are right - but forget an important detail : in order for it to work you'll have to design ALL your NMI routine so that everything takes exactly or almost exacly the same number of cycles no matter what. So basically if you don't need to do ALL updates to VRAM, you'll have to kill time, and design your sound code so that it always execute in a constant time, etc... which sounds quite tedious to me (altough it's very possible).<br /><br />If you do the raster effect in NMI and do the variable lenght stuff (such as music) after it it would make things simpler - but you'll need to code an alternate NMI routine that does the effect (the only time I've ever done this is in my "midscanline" demo where 7 cycle jitter wasn't acceptable).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Feb 28, 2010 8:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2010-02-28T06:07:44-07:00</updated>
<published>2010-02-28T06:07:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57336#p57336</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57336#p57336"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57336#p57336"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, your game logic can prepare data for different types of updates gradually, so that the NMI can use whatever is ready when it fires<br /></div><br />Which means you have to learn how to use semaphores so that your VRAM update logic never sees any half-finished buffers.</div><br /><br />I just realized that my drawing buffer code doesn't protect against this.  Right now if the NMI comes while my main program is adding to the buffer, bad things would definitely happen!<br /><br />I don't think that will ever happen in my current project, but I can't be sure.  I need to fix this right away.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Sun Feb 28, 2010 6:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2010-02-28T05:03:48-07:00</updated>
<published>2010-02-28T05:03:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57335#p57335</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57335#p57335"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57335#p57335"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Here you have the option to update some stuff even if the frame logic isn't finished yet, like the music, so that even though the gameplay lags the music doesn't (this seems to annoy players less than when everything lags).<br /></div><br />If the code signals NMI by adding 1 to a counter (which is dead easy on 6502), it will increment the counter twice, and the main thread can detect this and run music twice. Pokemon Blue's music often gets behind by five or six frames while things load into the Game Boy's VRAM, but it always catches up.</div><br />Yeah so then it will not lag, it will "skip" which is equally bad in my opinion.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I agree 100% with celius, but yet I just wanted to point out that Gradius, Contra, Super C, Castlevania 1, 2 &amp; 3, Lagrange Point, etc.... ALL does everything in NMI, so this is possible. I'd still recommand doing what Celius says for standard applications, but in some cases if you do crazy raster effects and want to synchronize with NMI (instead of sprite zero hit) you're pretty much forced to do otherwise and have your raster effect in NMI.<br /></div><br />Well, that's simply not true, it could have as well returned from NMI to the main loop which checks the "nmi flag". There's no upside to doing that though if you need raster timed code, so might as well have everything in NMI. (And there's a small downside: the NMI flag polling loop will result in a more variable delay depending what code is executing when NMI occurs.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Sun Feb 28, 2010 5:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-02-28T02:32:02-07:00</updated>
<published>2010-02-28T02:32:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57331#p57331</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57331#p57331"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57331#p57331"><![CDATA[
I agree 100% with celius, but yet I just wanted to point out that Gradius, Contra, Super C, Castlevania 1, 2 &amp; 3, Lagrange Point, etc.... ALL does everything in NMI, so this is possible. I'd still recommand doing what Celius says for standard applications, but in some cases if you do crazy raster effects and want to synchronize with NMI (instead of sprite zero hit) you're pretty much forced to do otherwise and have your raster effect in NMI.<br /><br />However, it's rare in an actual game you'll find yourself writing to $2005 every scanline or so - but for example Marble Madness which writes to $2000 twice every scanline to display text was forced to do everything in NMI like early Nintendo and Konami games.<br /><br />So the "ultimate" solution is to do what Celius says, but if you want to do something special like crazy raster effect have a flag in the NMI routine that makes it execute another portion of code instead of the normal NMI so that everything is timed etc...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Feb 28, 2010 2:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2010-02-27T22:21:00-07:00</updated>
<published>2010-02-27T22:21:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57327#p57327</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57327#p57327"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57327#p57327"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I see absolutely no point in having everything in the NMI.<br /></div><br /><br />Really, the only point is so you can perform the code defined in the NMI routine one time every frame. It just regulates the speed at which your code is executed. This is what some see as the easy way out of setting up a main loop that's executed once every frame by waiting for the next frame at the end of the loop. But once you figure it out, it's pretty uncomplicated:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI:<br /> ;Save A, X, and Y<br /> ;blah code<br /> ;Restore A, X, and Y<br /> inc VBLCount<br /> rti<br /><br />MainLoop:<br /> ;blah code<br /><br /> lda VBLCount<br />-<br /> cmp VBLCount<br /> beq -<br /> jmp MainLoop<br /><br /></div><br /><br />So once you see the simplicity of setting that up, you're right, there's really no advantage to putting your code in the NMI routine. I think it's just being lazy. If you're making a simple test program, it's fine. If you're making a game like a platformer or something that has to work with AI and all sorts of decompression, it would be catastrophic.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Sat Feb 27, 2010 10:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-02-27T15:32:10-07:00</updated>
<published>2010-02-27T15:32:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57302#p57302</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57302#p57302"/>
<title type="html"><![CDATA[Help with noob problems in my noob code?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5662&amp;p=57302#p57302"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />If your sprite 0 is near the bottom, you'll have problems even if you do update VRAM in an NMI thread.<br /></div><br />Sure, but this is a special case of "early VBlank", and the NMI can only warn you about regular VBlanks, not early ones. I guess this is why status bars at the bottom of the screen only became common once scanline counters were widely available.<br /><br />The solution used by Gradius is very sub-optimal though, because the game wastes time figuring out if it can use more time, which is a paradox. If it didn't have to check, there would be more free time, but not necessarily enough. Let's agree that even though it's better than visual glitches, it's still not a very good solution.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Altough I agree with you that "everything in NMI" idea is questionable, I don't think it is a valid argument : you don't have to code the program in the same order as it is executed. Taking care of VRAM updates typeically is just emptying a few buffers if corresponding flags are set, and one of the first things you'd want to code anyway.<br /></div><br />You are right, but my point is that since you are using flags to control what gets updated and what doesn't anyway, it would make more sense to clearly separate the 2 threads than awkwardly pack them together.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />However this is also due that my programming skills and knowledge of hardware increased as I switched from a model to another.<br /></div><br />Yeah, the whole concept of interrupts is hard to grasp for a beginner, and for them it's probably easier to code it all linearly.<br /><br />The problem is that many tutorials would rather teach what gives quick results than best practices. It may look like a good idea at first, but in the long run it ends up confusing people.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Feb 27, 2010 3:32 pm</p><hr />
]]></content>
</entry>
</feed>