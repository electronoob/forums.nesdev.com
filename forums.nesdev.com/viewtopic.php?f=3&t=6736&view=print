<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Battletoads level 2, anybody?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Battletoads level 2, anybody?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6736">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6736</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Macifom</b> [ Mon Aug 02, 2010 10:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Battletoads level 2, anybody?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've spent a week or so improving CPU and PPU timing in my emulator, Macifom, trying to improve compatibility with certain titles, especially everyone's favorite, Battletoads. Following the advice of others on the board I modified my renderer to perform VRAM address updates on exact cycles and only when the PPU is on (e.g. vertical increment on 251, horizontal reset on 256, copy temporary VRAM address on 303 of pre-render scanline). As my emulator renders in scanline units only, however, I am not emulating the timed reads during rendering - the first cycle of a new scanline is reached, it's rendered in its entirety.
<br />
<br />With these improvements in place, the intro scenes and first level of Battletoads are now totally glitch-free. The second level, as you've probably already guessed, is somewhat less than perfect.
<br />
<br />The start of the second level plays flawlessly for a time with no status bar shaking or other visible issues. Eventually, however, the game locks transitioning between status bar and normal background rendering. This seems to occur almost at random, with the status bar either near its normal position or three quarters of the way down the screen.
<br />
<br />Everything starts so pleasantly:
<br /><img src="http://lh6.ggpht.com/_IZL9Sfh9qCQ/TFdD7DXKNtI/AAAAAAAAABc/kACBD0-B4FA/s800/Screen%20shot%202010-08-02%20at%2012.09.14%20PM.png" alt="Image" />
<br /><img src="http://lh6.ggpht.com/_IZL9Sfh9qCQ/TFdFyAq2tfI/AAAAAAAAABw/Dnjl-omw5mA/s800/Screen%20shot%202010-08-02%20at%2012.24.27%20PM.png" alt="Image" />
<br />
<br />When the sprite 0 hit misses and the game locks, the status bar is in one of a couple positions:
<br /><img src="http://lh6.ggpht.com/_IZL9Sfh9qCQ/TFdD7fxVMuI/AAAAAAAAABg/MBaH1156Yf4/s800/Screen%20shot%202010-08-01%20at%208.08.43%20PM.png" alt="Image" />
<br /><img src="http://lh6.ggpht.com/_IZL9Sfh9qCQ/TFdD7m34yHI/AAAAAAAAABk/cQE6g-_ha-Q/s800/Screen%20shot%202010-08-02%20at%208.28.09%20AM.png" alt="Image" />
<br />
<br />From an architectural standpoint, there's nothing remarkable about my emulator. Cycle-exact accounting is used for the CPU and PPU, which are synchronized using the common catch-up method. Here's where it stands on the correctness tests:
<br />
<br />(CPU Test Programs)
<br />  * Kevtris' nestest.nes - Passes for all legal opcodes.
<br />  * Blargg's NES CPU Test 5 - Passes for legal opcodes.
<br />  * Blargg's CPU Timing Test 6 - Passes for legal opcodes.
<br />  * Branch Basics (Blargg's Branch Timing Tests) - Passes.
<br />  * Backward Branches (Blargg's Branch Timing Tests) - Passes.
<br />  * Forward Branches (Blargg's Branch Timing Tests) - Passes.
<br />  * Blargg's CLI Latency Test - Fails (#3).
<br />
<br />(PPU Test Programs)
<br />  * Palette RAM (Blargg's PPU Tests 2005-09-15b) - Passes.
<br />  * Power-up Palette (Blargg's PPU Tests 2005-09-15b) - Fails (#2) (Palette values are initialized differently).
<br />  * Sprite RAM (Blargg's PPU Tests 2005-09-15b) - Passes.
<br />  * VBL Clear Time (Blargg's PPU Tests 2005-09-15b) - Fails (#3) (Currently clearing at cycle 6820, test checks for 6810).
<br />  * VRAM Access (Blargg's PPU Tests 2005-09-15b) - Passes.
<br />  * Sprite 0 Hit Basics (Blargg's Sprite Hit Tests 2005-10-05)  - Passes.
<br />  * Sprite 0 Hit Alignment (Blargg's Sprite Hit Tests 2005-10-05) - Passes.
<br />  * Sprite 0 Hit Corners (Blargg's Sprite Hit Tests 2005-10-05) - Passes.
<br />  * Sprite 0 Hit Flip (Blargg's Sprite Hit Tests 2005-10-05) - Passes.
<br />  * Sprite 0 Hit Left Clip (Blargg's Sprite Hit Tests 2005-10-05) - Fails (#2).
<br />  * Sprite 0 Hit Right Edge (Blargg's Sprite Hit Tests 2005-10-05) - Fails (#2).
<br />  * Sprite 0 Hit Screen Bottom (Blargg's Sprite Hit Tests 2005-10-05) - Passes.
<br />  * Sprite 0 Hit Double Height (Blargg's Sprite Hit Tests 2005-10-05) - Passes.
<br />  * Sprite 0 Hit Timing Basics (Blargg's Sprite Hit Tests 2005-10-05) - Fails (#3).
<br />  * Sprite 0 Hit Order (Blargg's Sprite Hit Tests 2005-10-05) - Fails (#2).
<br />  * Sprite 0 Hit Edge Timing (Blargg's Sprite Hit Tests 2005-10-05) - Fails (#2).
<br />  * Blargg's Sprite 0 Hit Timing - Fails (#3).
<br />  * Sprite Overflow Basics (Blargg's Sprite Overflow Tests) - Passes.
<br />  * Sprite Overflow Details (Blargg's Sprite Overflow Tests) - Passes.
<br />  * Sprite Overflow Timing (Blargg's Sprite Overflow Tests) - Fails (#2).
<br />  * Sprite Overflow Obscure (Blargg's Sprite Overflow Tests) - Fails (#2).
<br />  * Sprite Overflow Emulation (Blargg's Sprite Overflow Tests) - Passes.
<br />  * Frame Basics (Blargg's VBL/NMI Tests) - Passes.
<br />  * VBL Timing (Blargg's VBL/NMI Tests) - Fails (#3) (Seems to be one cycle off - read is occurring on 89341 rather than 89342).
<br />  * Even / Odd Frames (Blargg's VBL/NMI Tests) - Fails (#3).
<br />  * VBL Clear Timing (Blargg's VBL/NMI Tests) - Fails (#5).
<br />  * NMI Suppression (Blargg's VBL/NMI Tests) - Fails (#3).
<br />  * NMI Disable (Blargg's VBL/NMI Tests) - Fails (#3).
<br />  * NMI Timing (Blargg's VBL/NMI Tests) - Fails (#3).
<br />  * scanline.nes - All tests fail due to lack of partial scanline rendering.
<br />
<br /><a href="http://nesdev.com/bbs/viewtopic.php?t=5108" class="postlink">This post</a> describes a similar issue but the author didn't disclose precisely how he resolved it. 
<br />
<br />Before I start stepping through execution, do any old hands have some advice as to where I should focus my attention? Is the scanline-based rendering I'm using ultimately insufficient for Rare/Tradewest titles? Does Battletoads perform perform some periodic task (like DMC DMA?) that I might not be accounting for that could whack the status bar down that far? You help is much appreciated!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Aug 02, 2010 11:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It crashes when sprite collision doesn't happen when it should.  You need accurate scrolling and timing for the sprite hit to happen.
<br />
<br />Is there any shaking anywhere?  That would indicate that timing of the game writing graphics data is wrong because you're not emulating the penalty cycle when the source address crosses a page.
<br />But if you're passing the timing test, that's clearly not the problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Aug 03, 2010 10:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's cheating but you can prevent this by detecting Battletoads either by checksum on loading or by current mapper number and changing Sprite Hit Zero conditions to declare a hit when the first non-transparent pixel of the sprite is drawn, rather than when the first non transparent drawn ontop of a non transparent background pixel. Ofcourse if you strive for accuracy you wouldn't want to settle for this, however you could try this to rule out any other issue that may cause it though it seems pretty clear its hanging on waiting for sprite 0 to be hit which will never occur again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Macifom</b> [ Tue Aug 03, 2010 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Is there any shaking anywhere?  That would indicate that timing of the game writing graphics data is wrong because you're not emulating the penalty cycle when the source address crosses a page.<br />But if you're passing the timing test, that's clearly not the problem.</div><br /><br />Oddly, there's no noticeable shaking prior to this occurring. It's as though every so often Battletoads performs some operation for which I'm allotting too many cycles. I pass every timing test that I know of, however.<br /><br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">It's cheating but you can prevent this by detecting Battletoads either by checksum on loading or by current mapper number and changing Sprite Hit Zero conditions to declare a hit when the first non-transparent pixel of the sprite is drawn, rather than when the first non transparent drawn ontop of a non transparent background pixel.</div>
<br />
<br />I'd recently verified that with a sprite 0 hack in place, the game will not lock, but I haven't re-tested since making further refinements. I'll throw the hack back in to see what other behaviors occur. Hopefully that'll give some clue as to what I should be looking for when stepping through.
<br />
<br />I'm not a zealot, but I'd like to keep things hack-free, if possible.
<br />
<br />Thanks, guys.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Macifom</b> [ Wed Aug 04, 2010 1:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>More tweaking, same result</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, a bit more digging yielded a silly bug with post-VBLANK PPU cycle accounting. With that fixed I'm now passing Blargg's VBL Timing and Even / Odd Frames tests as well. Battletoads, unfortunately, behaves no differently than before.
<br />
<br />I have verified that hacking the Sprite 0 logic to register a hit when the first non-transparent pixel of that sprite is drawn still prevents the hang. Watching closely during testing, I didn't see the status bar make occasional leaps toward the bottom of the frame. That seems a bit odd, though it's possible I'm simply not noticing the one broken frame.
<br />
<br />Given how large the status bar displacement is when it occurs I'm beginning to wonder if some cumulative timing error is causing the code to sometimes erroneously skip or enter NMI, resulting in a ton of extraneous code execution.
<br />
<br />I'm really not looking forward to wading into Battletoads' assembly, but I'm running out of avenues to explore. Final thoughts, guys?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Aug 04, 2010 2:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Find out the timestamps for all the PPU writes, and the timestamp for when it starts the sprite collision polling loop.  Compare them to the other emulators.  There should be some minor frame-by-frame variation in when the events happen, but they shouldn't be too different from the other emulators.
<br />
<br />Compare the timestamps of the PPU writes with that of Nintendulator and FCEUX, because those emulators have debuggers and run the game correctly.
<br />
<br />If the timestamps seem to match up, check if you aren't making any stupid mistakes on scrolling, such as advancing the Y coordinate too early or too late, or scrolling with the screen off, or not scrolling with either sprites or BG enabled.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Wed Aug 04, 2010 2:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- Well, my emu passes ok in all those listed tests... and still fails in Battletoads. I really think it's because of my PPU engine, since the real thing "delays" the on-screen pixels. Y-scroll should reset at 251, but 251 is still a visible field, so my engine does at 256. There's no other reason for sprite #0 fails in Battletoads I believe.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 04, 2010 2:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Changing the scroll value at x = 251 should not affect your display because the NES is displaying prefetched pixels.
<br />
<br />The NES PPU operates on "slivers", or 2-byte values representing 8x1-texel pattern areas. At x = 8n + 1, it reads the nametable and decides which tile it will fetch. Then it reads the two pattern bytes at x = 8n + 5 and 8n + 7 and loads them into a shift register. By the time x = 251 comes around and the Y scroll value changes, the pattern texels for the last column of pixels are already in the shift register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Wed Aug 04, 2010 5:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Changing the scroll value at x = 251 should not affect your display because the NES is displaying prefetched pixels.</div>
<br />
<br />- Yup, but my emu doesn't follow the steps provided by Brad a few years ago; it just renders what the PPU scroll registers/patters/whatever are currently in the memory, starting at PPU cycle 0. If I reset the Y-scroll before 256, there's a visible 1-scanline gfx difference.
<br />
<br />- Plus, Disch said about cycle 251 as a (possible) fix for Battletoads... somewhere. ^_^;;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 05, 2010 4:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're not ready to emulate the prefetch all the way, you can approximate the effect of the prefetch by delaying the <em>visual</em> effect of changes to the (X, Y) position by 8 pixels except for the low 3 bits of X. Pixel output and sprite 0 hit are calculated based on this delayed value. This way, the write to the Y bits at x=251 won't take visual effect until 259, producing no artifact.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Aug 05, 2010 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Pixel output and sprite 0 hit are calculated based on this delayed value.</div>
<br />
<br />- I wonder why none of the sprite 0 tests fail then..?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Macifom</b> [ Thu Aug 05, 2010 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">- Yup, but my emu doesn't follow the steps provided by Brad a few years ago; it just renders what the PPU scroll registers/patters/whatever are currently in the memory, starting at PPU cycle 0. If I reset the Y-scroll before 256, there's a visible 1-scanline gfx difference.<br /><br />- Plus, Disch said about cycle 251 as a (possible) fix for Battletoads... somewhere. ^_^;;</div>
<br />
<br />As the smallest unit of rendering in my emulator is a scanline, I cheat a bit here as well. On cycle 319 I cache the first two tiles of the upcoming scanline, which is rendered in its entirety (with 31 horizontal VRAM increments) on cycle 0. Then on cycle 251 I perform the vertical increment and the 32nd horizontal increment, followed by horizontal reset and sprite evaluation on cycle 257. This is only superficially accurate, but it works quite well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Macifom</b> [ Thu Aug 05, 2010 10:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Fixed it!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Find out the timestamps for all the PPU writes, and the timestamp for when it starts the sprite collision polling loop.  Compare them to the other emulators.  There should be some minor frame-by-frame variation in when the events happen, but they shouldn't be too different from the other emulators.</div>
<br />
<br />Thanks for the suggestion! I beefed up my PPU logging a bit to perform the necessary traces. What I learned pointed me to a solution that's hopefully correct.
<br />
<br />When Battletoads level 2 is working properly, the following PPU reads and writes occur for each frame:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;In changeMirroringType method. Switching to mirroring mode 2 on PPU scanline 0 cycle 68.<br />&nbsp;In writeToPPUControlRegister2 &#40;0x2001&#41; method. Writing 0x00 on PPU scanline 0 cycle 98.<br />&nbsp;In DMAtransferToSPRRAM:onCycle: method on scanline 0 cycle 2.<br />&nbsp;In writeToPPUControlRegister1 &#40;0x2000&#41; method. Writing 0x10 on PPU scanline 4 cycle 333.<br />&nbsp;In readFromPPUStatusRegisterOnCycle: method. Returning 0xc0 on scanline 5 cycle 1.<br />&nbsp;In writeToPPUControlRegister1 &#40;0x2000&#41; method. Writing 0x00 on PPU scanline 5 cycle 106.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;first write&#41;. Writing 0x23 on scanline 5 cycle 145.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;second write&#41;. Writing 0x00 on scanline 5 cycle 166.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;first write&#41;. Writing 0x23 on scanline 8 cycle 64.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;second write&#41;. Writing 0x00 on scanline 8 cycle 91.<br />&nbsp;In writeToPPUControlRegister1 &#40;0x2000&#41; method. Writing 0x10 on PPU scanline 8 cycle 229.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;first write&#41;. Writing 0x23 on scanline 8 cycle 310.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;second write&#41;. Writing 0xc0 on scanline 8 cycle 328.<br />&nbsp;In writeToPPUControlRegister1 &#40;0x2000&#41; method. Writing 0x10 on PPU scanline 13 cycle 267.<br />&nbsp;In changeMirroringType method. Switching to mirroring mode 3 on PPU scanline 14 cycle 271.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;first write&#41;. Writing 0x00 on scanline 14 cycle 292.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;second write&#41;. Writing 0x10 on scanline 14 cycle 313.<br />&nbsp;In changeMirroringType method. Switching to mirroring mode 3 on PPU scanline 35 cycle 193.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;first write&#41;. Writing 0x00 on scanline 35 cycle 232.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;second write&#41;. Writing 0x60 on scanline 35 cycle 250.<br />&nbsp;In writeToVRAMAddressRegister1 &#40;0x2005&#41; method &#40;first write&#41;. Writing 0x00 on PPU scanline 35 cycle 262.<br />&nbsp;In writeToVRAMAddressRegister1 &#40;0x2005&#41; method &#40;second write&#41;. Writing 0x00 on PPU scanline 35 cycle 274.<br />&nbsp;In writeToPPUControlRegister2 &#40;0x2001&#41; method. Writing 0x08 on PPU scanline 35 cycle 292.<br />&nbsp;In writeToPPUControlRegister2 &#40;0x2001&#41; method. Writing 0x18 on PPU scanline 36 cycle 308.<br />&nbsp;In changeMirroringType method. Switching to mirroring mode 3 on PPU scanline 37 cycle 90.<br />&nbsp;In changeMirroringType method. Switching to mirroring mode 3 on PPU scanline 42 cycle 185.<br />&nbsp;In readFromPPUStatusRegisterOnCycle: method. Returning 0x00 on scanline 42 cycle 257.<br />...<br />&nbsp;In readFromPPUStatusRegisterOnCycle: method. Returning 0x40 on scanline 51 cycle 262.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;first write&#41;. Writing 0x03 on scanline 51 cycle 283.<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;second write&#41;. Writing 0x80 on scanline 51 cycle 295.<br />&nbsp;In writeToVRAMAddressRegister1 &#40;0x2005&#41; method &#40;first write&#41;. Writing 0xfc on PPU scanline 56 cycle 18.<br />&nbsp;In changeMirroringType method. Switching to mirroring mode 2 on PPU scanline 56 cycle 261.<br />&nbsp;In writeToPPUControlRegister1 &#40;0x2000&#41; method. Writing 0x90 on PPU scanline 59 cycle 195.<br />&nbsp;In changeMirroringType method. Switching to mirroring mode 2 on PPU scanline 59 cycle 300.<br />&nbsp;In changeMirroringType method. Switching to mirroring mode 2 on PPU scanline 152 cycle 99.<br />&nbsp;In writeToPPUControlRegister1 &#40;0x2000&#41; method. Writing 0x90 on PPU scanline 153 cycle 76.<br />... and repeat<br /></div><br /><br />Early in VLBANK, PPU rendering is turned off, and whole bunch of PPU writes are performed right up through the 14th visible scanline (just above the status bar). Battletoads then cleverly turns on the PPU around cycle 292 - just after the vertical increment and horizontal reset on cycles 251 and 257 and just before the two tile fetches for the next scanline on cycles 319 and 327. The exact cycle when the PPU is engaged varies slightly, but so long as it's in that pocket, everything's fine and dandy. The game then polls PPU status until Sprite 0 hits at the end of visible scanline #30, signaling that the end of the status bar has been reached. Finally, Battletoads switches the nametable mirroring and writes to VRAM address registers to render the rest of the playfield. <br /><br />When the PPU flipped on a cycle or two before that safe zone, the result was the observed hang. It seems that if the value Battetoads writes to $2005 is subject to vertical increment on cycle 251, the status bar does not properly align with Sprite 0, resulting in an endless loop:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />&nbsp;In writeToVRAMAddressRegister2 &#40;0x2006&#41; method &#40;second write&#41;. Writing 0x60 on scanline 35 cycle 209.<br />&nbsp;In writeToVRAMAddressRegister1 &#40;0x2005&#41; method &#40;first write&#41;. Writing 0x00 on PPU scanline 35 cycle 221.<br />&nbsp;In writeToVRAMAddressRegister1 &#40;0x2005&#41; method &#40;second write&#41;. Writing 0x00 on PPU scanline 35 cycle 233.<br />&nbsp;In writeToPPUControlRegister2 &#40;0x2001&#41; method. Writing 0x08 on PPU scanline 35 cycle 251.<br />&nbsp;In writeToPPUControlRegister2 &#40;0x2001&#41; method. Writing 0x18 on PPU scanline 36 cycle 267.<br />... polls PPU Status forever<br /></div><br /><br />The problem, it therefore seemed, was that the PPU writes were occurring a tad bit early, resulting in PPU engagement occasionally coinciding with the vertical increment on 251. As these routines are part of Battletoads' NMI handler, I booted up Blargg's NMI Timing test to see where I stood there. Sure enough:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">2&#41; NMI occurred 3 or more PPU clocks too early</div><br /><br />My emulator has a rather simple way of triggering NMI. After VBLANK, I subtract the total number of PPU cycles in the current frame (89341 or 89342) from starting cycle, then divide by 3 to get the number of CPU cycles to run. (If it doesn't divide evenly, I slap on another CPU cycle). The CPU interpreter then executes as many whole instructions as it can until it the cycle count reaches or surpasses that cycle.<br /><br />To see what it would take to pass Blargg's test, I added an NMI_DELAY factor and tested each value, starting at 1:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;_shortenPrimingScanline = &#40;_backgroundEnabled || _spritesEnabled&#41; &amp;&amp; _oddFrame;<br />&nbsp; &nbsp;remainingCycles = &#40;_shortenPrimingScanline ? CYCLES_IN_FRAME_SHORT : CYCLES_IN_FRAME_NORMAL&#41; - _lastCycleOverage + NMI_DELAY;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;return &#40;remainingCycles / 3&#41; + &#40;&#40;remainingCycles % 3&#41; == 0 ? 0 : 1&#41;; <br /></div>
<br />
<br />Cranking NMI_DELAY up to 6 was sufficient to pass the test and - I still can't quite believe it myself - fix Battletoads. I'm happy for the result but I'm not entirely clear on why this needs to be done or why 6 is the magic value. I've heard mention of a delay between the VBLANK flag being set and invocation of NMI, but don't quite understand the mechanics there. Looking at the source for Nestopia, it seems they're only using a 2 cycle delay. Am I just sweeping a timing bug under the rug here?
<br />
<br />Thanks for the help, everyone.
<br />
<br />EDIT: Rewrote my explanation of Battletoads' PPU writes to improve clarity. Hopefully this will be useful to others.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Sep 05, 2010 6:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- I still need to test your NMI magic. By the way, the problem relies in the PPU x CPU timing. In other words, if the VBlank flag rises right after the ending of an instruction .OR. during an instruction. My emu threats it as an edge case, but it wasn't interesting enough here and around... -_-;;

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>