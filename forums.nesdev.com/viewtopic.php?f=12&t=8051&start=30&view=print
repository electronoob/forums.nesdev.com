<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SNES dev newbie questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SNES dev newbie questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=8051">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=8051</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Mar 06, 2014 12:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What a clusterfuck (re: those init routines).  No wonder you can't make up your mind!  I now see your dilemma.<br /><br />Snes_Init is *almost* right, meaning it's the closest to the official init routine Nintendo mandates, but it's still incorrect in some spots.<br /><br />InitSNES goes about things in what I would call &quot;rude&quot;, meaning it isn't easy to follow and it's not even necessary (I'll explain why).  The file DOES contains some useful routines, such as the ClearPalette and ClearVRAM (kudos to those!), but the rest is what I call &quot;programmer wank-off material&quot; -- someone literally sat around trying to think up ways to &quot;speed up the initialisation routine&quot; when such isn't needed at all.  It's pure jack-off material because this is only something <strong>you do once</strong> at RESET!<br /><br />So in my opinion, you actually need a combination of the two.  I will write this for you in a bit, I have a dental appointment to go to, and in especially bad health today, so it will take me some time.<br /><br />P.S. -- Je suis désolé, mais je ne parle pas Français, but if you ever need something I've written in English turned into Quebecian French, let me know and I can have a friend of mine from Montreal translate.  The diversity of this forum is one of the things that I find awesome.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Thu Mar 06, 2014 3:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Snes_Init is *almost* right, meaning it's the closest to the official init routine Nintendo mandates, but it's still incorrect in some spots.</div><br />Really? I assumed it wasn't that close due to how concise it is, and the fact that I could figure out it wasn't always correct despite my extremely limited skills. As for InitSNES, I thought it wasn't that bad, but I can't say I understood every part of it. What boggles my mind is that despite the many SNES dev tutorials available and some great homebrew such as Super Road Blaster, there isn't a single initialization routine that is generally accepted and praised, now that the SNES is rather well understood.<br /><br />Your offer to write a combination of the two is much appreciated, thank you!<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">if you ever need something I've written in English turned into Quebecian French, let me know and I can have a friend of mine from Montreal translate.</div><br />Thanks for the offer! I like to believe I am doing alright. It's just that I strive to be as respectful and appropriate as possible, and sometimes I feel that my lack of vocabulary is a barrier to this goal, especially online, where tone and intent interpretation can go wrong so easily.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Mar 06, 2014 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's my version:<br /><br /><!-- m --><a class="postlink" href="https://www.dropbox.com/s/s641i1p19du57gl/initsneskoitsu.txt">https://www.dropbox.com/s/s641i1p19du57 ... koitsu.txt</a><!-- m --><br /><br />I would strongly suggest byuu review it, as it's been a while since I've written 65816, and I will tell you this is not my best (especially the ClearRAM routine, which could be sped up by 2x if lengths were halfed, writes used 16-bit accumulator, and inx/cpx was used instead of ldx/dex/bpl).  I'm already 30 minutes past start of work so I'm in a hurry anyway.  I'm certain I missed something in the &quot;ClearXXX&quot; routines, but I can assure you the register initialisation at the start is done 100% to-the-book.<br /><br />P.S. -- Your English is fantastic, and you have an excellent vocabulary.  I had no idea you natively spoke French until you mentioned ESL (English as a Second Language) and were from Quebec.  So don't worry :-)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Thu Mar 06, 2014 8:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great, thank you very much! This is a delight to read. I have a few questions / comments:<br /><br />1) Typo on line 282's comment, should be 7f (in case you intend on reusing that file).<br /><br />2) In ClearRAM, is there a reason for clearing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$000000-$001fff</tt> and then <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$7e2000-$7effff</tt> rather than simply clearing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$7e0000-$7effff</tt>? If I understand mirroring correctly, this would have the exact same result and allow the removal of a few lines of code.<br /><br />3) The code seems to run perfectly until ClearRAM. I have tried my best to understand what's going on, but I failed miserably at that. Here is snes9x's debugger's output for the relevant part (by the way, is there a more interesting debugger to use nowadays?):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$00/819D A9 7E&nbsp; &nbsp; &nbsp; &nbsp;LDA #$7E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:0000 X:FFFF Y:0000 P:eNvMxdIzC<br />$00/819F 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PHA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007E X:FFFF Y:0000 P:envMxdIzC<br />$00/81A0 AB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007E X:FFFF Y:0000 P:envMxdIzC<br />$00/81A1 A2 FF DF&nbsp; &nbsp; LDX #$DFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:007E X:FFFF Y:0000 P:envMxdIzC<br />$00/81A4 9D 00 20&nbsp; &nbsp; STA $2000,x&#91;$7E:FFFF&#93;&nbsp; &nbsp;A:007E X:DFFF Y:0000 P:eNvMxdIzC<br />$00/81A7 CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007E X:DFFF Y:0000 P:eNvMxdIzC<br />$00/81A8 10 FA&nbsp; &nbsp; &nbsp; &nbsp;BPL $FA&nbsp; &nbsp; &#91;$81A4&#93;&nbsp; &nbsp; &nbsp; A:007E X:DFFE Y:0000 P:eNvMxdIzC<br />$00/81AA A9 7F&nbsp; &nbsp; &nbsp; &nbsp;LDA #$7F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:007E X:DFFE Y:0000 P:eNvMxdIzC<br />$00/81AC 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PHA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:DFFE Y:0000 P:envMxdIzC<br />$00/81AD AB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:DFFE Y:0000 P:envMxdIzC<br />$00/81AE A2 FF FF&nbsp; &nbsp; LDX #$FFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:007F X:DFFE Y:0000 P:envMxdIzC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;----<br />$00/81B1 95 00&nbsp; &nbsp; &nbsp; &nbsp;STA $00,x&nbsp; &#91;$00:FFFF&#93;&nbsp; &nbsp;A:007F X:FFFF Y:0000 P:eNvMxdIzC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;----<br />$00/81B3 CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:FFFF Y:0000 P:eNvMxdIzC<br />$00/81B4 10 FB&nbsp; &nbsp; &nbsp; &nbsp;BPL $FB&nbsp; &nbsp; &#91;$81B1&#93;&nbsp; &nbsp; &nbsp; A:007F X:FFFE Y:0000 P:eNvMxdIzC<br />$00/81B6 28&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:FFFE Y:0000 P:eNvMxdIzC<br />$00/81B7 AB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:FFFE Y:0000 P:envmxdizc<br />$00/81B8 FA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:FFFE Y:0000 P:envmxdiZc<br />$00/81B9 68&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:0000 Y:0000 P:envmxdiZc<br />$00/81BA 60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:0000 X:0000 Y:0000 P:envmxdiZc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;----<br />$00/0001 00 00&nbsp; &nbsp; &nbsp; &nbsp;BRK #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:0000 X:0000 Y:0000 P:envmxdiZc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;----<br />$00/81F5 40&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:0000 X:0000 Y:0000 P:envmxdIZc<br />$03/0303 00 00&nbsp; &nbsp; &nbsp; &nbsp;BRK #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:0000 X:0000 Y:0000 P:envmxdiZc<br />$00/81F5 40&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:0000 X:0000 Y:0000 P:envmxdIZc</div><br />The whole project's code can be found <a href="https://dl.dropboxusercontent.com/u/19680817/snes/dev/2014-03-06%20-%20WLA%20MSU1%20detection%20test%20with%20InitSNESKoitsu.7z" class="postlink">here</a>. Thank you once again!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Mar 06, 2014 8:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">juef wrote:</div><div class="quotecontent">2) In ClearRAM, is there a reason for clearing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$000000-$001fff</tt> and then <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$7e2000-$7effff</tt> rather than simply clearing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$7e0000-$7effff</tt>? If I understand mirroring correctly, this would have the exact same result and allow the removal of a few lines of code.</div><br />You're correct -- I missed the brief diagram comment in the official docs that indicates $7E, $0000-1FFF is effectively mirrored throughout banks $00-3F (same address range).  So yes, that should simplify the routine greatly.<br /><br />The SNES memory map is a general gigantic clusterfuck, so consider yourself warned.  ;-)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">$00/81AA A9 7F&nbsp; &nbsp; &nbsp; &nbsp;LDA #$7F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:007E X:DFFE Y:0000 P:eNvMxdIzC<br />$00/81AC 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PHA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:DFFE Y:0000 P:envMxdIzC<br />$00/81AD AB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:DFFE Y:0000 P:envMxdIzC<br />$00/81AE A2 FF FF&nbsp; &nbsp; LDX #$FFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:007F X:DFFE Y:0000 P:envMxdIzC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;----<br />$00/81B1 95 00&nbsp; &nbsp; &nbsp; &nbsp;STA $00,x&nbsp; &#91;$00:FFFF&#93;&nbsp; &nbsp;A:007F X:FFFF Y:0000 P:eNvMxdIzC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;----<br />$00/81B3 CA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:007F X:FFFF Y:0000 P:eNvMxdIzC<br />$00/81B4 10 FB&nbsp; &nbsp; &nbsp; &nbsp;BPL $FB&nbsp; &nbsp; &#91;$81B1&#93;&nbsp; &nbsp; &nbsp; A:007F X:FFFE Y:0000 P:eNvMxdIzC</div></div><br />Based on what I'm seeing above, it looks as if your assembler took <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sta $0000,x</tt> (assembled bytes should be: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">9d 00 00</tt>) and thought it would be intelligent to &quot;optimise&quot; that into <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sta $00,x</tt> (assembled bytes: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">a5 00</tt>)<br /><br />The reason it did because it thought by referring to $0000, that the intended goal was to use direct page, which is not the case here.  Nothing pisses me off more than assemblers which try to out-smart the programmer... :-)<br /><br />I don't know what assembler you're using, but there is probably a way to tell it &quot;by $0000 I mean the absolute 16-bit address, not the direct page address&quot;.  The mnemonic for that varies per assembler; it could be <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">:</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&lt;</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&gt;</tt>, or who knows what.  Your assembler should have documentation telling you how to do this.<br /><br />You can verify all this if your assembler generates what's called a &quot;code listing&quot;.  It is ALWAYS wise to generate a code listing when starting new projects or learning.  ALWAYS.<br /><br />BTW, the ClearVRAM routine would have the same problem.  You can clearly see me saying <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stx $0000</tt> there, so it too would need to be changed.  It should assemble to bytes <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">8e 00 00</tt>, not <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">86 00</tt>.<br /><br />You will probably need to remember this situation any time you try to use an absolute 16-bit address that is within the range of $0000 to $00ff.<br /><br />I've updated the content at my aforementioned Dropbox URL to reflect all of this, particularly by adding comments that indicate what SHOULD be happening, but obviously will vary depending on what assembler you use (not my responsibility to cater to that.  :-) ).<br /><br />Edit: I just realised why the BRKs occur after the RTS.  I was staring at that a while going &quot;eh?&quot;  *laugh* Silly, silly me: ClearRAM stomps over the RAM used for stack space ($1FFF going downward).  So ClearRAM really needs to be made into its own macro (not subroutine) or JMP/JML-based, avoiding use of the stack entirely.  I've modified mine to just use a pair of JMP statements (JMP'ing into the routine, and at the end JMP'ing back out of it).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>juef</b> [ Fri Mar 07, 2014 8:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I don't know what assembler you're using, but there is probably a way to tell it &quot;by $0000 I mean the absolute 16-bit address, not the direct page address&quot;.  The mnemonic for that varies per assembler; it could be <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">:</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&lt;</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&gt;</tt>, or who knows what.  Your assembler should have documentation telling you how to do this. [...] You will probably need to remember this situation any time you try to use an absolute 16-bit address that is within the range of $0000 to $00ff.</div><br />I have been using WLA DX's latest version (can't say I'm a huge fan so far, but with my very limited assembly experience, I can't really be picky). It seems that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sta.w $0000,x</tt> assembles correctly. Thanks!<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I've updated the content at my aforementioned Dropbox URL to reflect all of this, particularly by adding comments that indicate what SHOULD be happening, but obviously will vary depending on what assembler you use (not my responsibility to cater to that.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> ).<br /><br />Edit: I just realised why the BRKs occur after the RTS.  I was staring at that a while going &quot;eh?&quot;  *laugh* Silly, silly me: ClearRAM stomps over the RAM used for stack space ($1FFF going downward).  So ClearRAM really needs to be made into its own macro (not subroutine) or JMP/JML-based, avoiding use of the stack entirely.  I've modified mine to just use a pair of JMP statements (JMP'ing into the routine, and at the end JMP'ing back out of it).</div><br />I'm glad you figured that out because I'm not sure I would have thought about the stack! Thanks again very much. There's still a problem I haven't figured out but I haven't had the chance to look at it thoroughly yet: the loops in ClearRAM still only <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">dex</tt> once before branching (pretty much the same as the first two arrows in the debugging log from <a href="http://forums.nesdev.com/viewtopic.php?p=126482#p126482" class="postlink">this post</a>). I'll take a deeper look later this weekend. For reference, my current code is <a href="https://dl.dropboxusercontent.com/u/19680817/snes/dev/2014-03-07%20-%20WLA%20MSU1%20detection.7z" class="postlink">here</a>.<br /><br />Oh, and another question regarding your RAM clearing routines. Considering these new modifications, is there a point to the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">phx</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">plx</tt> in ClearVRAM, ClearPalette and ClearOAM? ClearRAM, which is run last, can't use the stack and overwrites the X value so that we can use it as an index.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">The SNES memory map is a general gigantic clusterfuck, so consider yourself warned.  <img src="./images/smilies/icon_wink.gif" alt=";-)" title="Wink" />  [...]  Nothing pisses me off more than assemblers which try to out-smart the programmer... <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /></div><br />I'm truly no expert, but so far I tend to agree with these statements <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Mar 07, 2014 10:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">juef wrote:</div><div class="quotecontent">I'm glad you figured that out because I'm not sure I would have thought about the stack! Thanks again very much. There's still a problem I haven't figured out but I haven't had the chance to look at it thoroughly yet: the loops in ClearRAM still only <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">dex</tt> once before branching (pretty much the same as the first two arrows in the debugging log from <a href="http://forums.nesdev.com/viewtopic.php?p=126482#p126482" class="postlink">this post</a>). I'll take a deeper look later this weekend. For reference, my current code is <a href="https://dl.dropboxusercontent.com/u/19680817/snes/dev/2014-03-07%20-%20WLA%20MSU1%20detection.7z" class="postlink">here</a>.</div><br />Actually, it's obvious to me why.  A value of $FFFF would have the negative flag set, as would $FFFE, so that's why the loop only happens once.  You can see it in the snes9x debugger CPU flags -- when <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">n</tt> becomes <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">N</tt> (little n means n=0, big N means n=1).  TL;DR -- It's a bug as a result of me not doing 65xxx as often as I used to.<br /><br />I've changed the loop once more, and it should be more obvious to you what's going on: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldx #0 / Loop: stz.w $0000,x / inx / bne Loop</tt>, which should write 65536 bytes.<br /><br />I also found another bug in ClearRAM: I was using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sta</tt> to zero out the memory contents (so I was actually writing the bank number across each bank of RAM), not <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stz</tt>.  That was purely a typo on my part (a and z keys are next to one another).<br /><br />I've also changed all the 16-bit absolute references to use the WLA DX <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.w</tt> modifier, for your benefit.  It makes the visual layout stupid, since the opcodes no longer are clearly aligned in a column, so I had to space things out a bit.  *sigh*  Another reason I hate that kind of modifier being done in the opcode area and not the operand area.  Matter of personal preference though.<br /><br /><div class="quotetitle">juef wrote:</div><div class="quotecontent">Oh, and another question regarding your RAM clearing routines. Considering these new modifications, is there a point to the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">phx</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">plx</tt> in ClearVRAM, ClearPalette and ClearOAM? ClearRAM, which is run last, can't use the stack and overwrites the X value so that we can use it as an index.</div><br />This is purely a matter of pedantry (on the part of the person who wrote the routines originally (not me)).  It looks to me like the intended goal was to make the routines so that they could be used at any time (not just during reset), which is perfectly okay.  Although ClearVRAM does make use of direct page addresses $0000 and $0001 (it stores a value of $0000 there, which is what the DMA routine uses as the value to write all across VRAM).<br /><br />You're welcome to change them so that they don't save/restore registers, turn them into macros, make them <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsl</tt>-able (using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsl/rtl</tt> instead of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsr/rts</tt>) or do whatever you want with them.  The point is that the initialisation routines should do the Right Thing(tm) and not a mix-match of messy nonsense like the other two routines/code sets you were using previously.<br /><br />I've updated my Dropbox stuff as usual.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sat Mar 08, 2014 1:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; I would strongly suggest byuu review it<br /><br />That should be fine. I use more DMAs and short loops to clear memory and registers in my own routine. But that's more because it runs on a 2KB SRAM chip (dev cart) that also houses a bunch of serial UART functions. But for ROM usage, yours should get the job done.<br /><br />For any aspiring sound developer, note that the SPC700 RAM (aside from the stack by the IPLROM) is also uninitialized, and you should probably flush all the SMP/DSP registers as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 08, 2014 8:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I found a couple minor typos:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">; If using high-speed mode (3.58MHz), you need to use a long (24-bit)<br />; JMP to set the &quot;B&quot; register (Program Bank) to bank $80 or above.</div><br />I thought the program bank was K and the data bank was B.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">; L=$00, H=$01 (no explanation given by Nintendo)</div><br />This sets up the mode 7 matrix as the identity matrix.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">; JMP because the routine zeros out the area of RAM where the stack lives.</div><br />If this routine is entered and left by jumping to a constant address, why not just save two JMPs and inline ClearRAM?<br /><br />It should also be possible to save 3 bytes in ClearPalette by using 8-bit XY.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Mar 08, 2014 4:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1. Thanks for the typo fix, tepples.  Yes it should be &quot;K&quot;.<br /><br />2. Yes, I'm aware of what the $211b and related mode 7 registers are, but I don't understand what makes matrix parameter A ($211b) and parameter D ($211e) special that they warrant being set to $0100.  I've never done mode 7 stuff, and calculus formulas are not something I get anyway.  :P<br /><br />3. You're right (I didn't write that routine though ;-) ).  As for inlining: like I said in my earlier posts, if the OP wants to change the routine to be a macro (inlining), fine by me, I really don't care/it's besides the point.  I'm not going to get pedantic about it.<br /><br />As for using DMA to clear memory: I didn't think this was possible until I found registers $2180/1/2/3 (I always wondered what the purpose of those was, now I know ;-) ).<br /><br />One question for byuu: do you happen to know if the general DMA registers retain their contents after a DMA transfer (particularly registers $43x0 through $43x6) or are they changed/reset?  With regards to RAM clearing, I was thinking of doing this to clear $7e0000 to $7fffff, but wasn't sure if I needed to re-set all the DMA registers before I did the 2nd transfer:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; rep&nbsp; &nbsp;#$30&nbsp; &nbsp;&nbsp; &nbsp;; A=8, X/Y=16<br />&nbsp; &nbsp; sep&nbsp; &nbsp;#$20<br /><br />&nbsp; &nbsp; ldx&nbsp; &nbsp;#$8008&nbsp; &nbsp;&nbsp; &nbsp;; $4300: $08: DMA mode: fixed source, write-once, A-bus-&gt;B-bus<br />&nbsp; &nbsp; stx.w $4300&nbsp; &nbsp;&nbsp; &nbsp;; $4301: $80: DMA destination: register $2180<br />&nbsp; &nbsp; lda&nbsp; &nbsp;#$00<br />&nbsp; &nbsp; ldx&nbsp; &nbsp;#$0000<br />&nbsp; &nbsp; stx.w $4302&nbsp; &nbsp;&nbsp; &nbsp;; DMA source address: $0000<br />&nbsp; &nbsp; sta.w $4304&nbsp; &nbsp;&nbsp; &nbsp;; DMA source bank: $00<br />&nbsp; &nbsp; stx.w $4305&nbsp; &nbsp;&nbsp; &nbsp;; DMA transfer size: 65536 writes (bytes)<br />&nbsp; &nbsp; stx.w $2181&nbsp; &nbsp;&nbsp; &nbsp;; WRAM address (16 bits of 17-bit address):&nbsp; $0000<br />&nbsp; &nbsp; sta.w $2183&nbsp; &nbsp;&nbsp; &nbsp;; WRAM address (17th bit of 17-bit address): $00<br />&nbsp; &nbsp; inc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; A=$01<br />&nbsp; &nbsp; sta.w $420b&nbsp; &nbsp;&nbsp; &nbsp;; Initiate DMA transfer -- should zero $7e:0000 to $7e:ffff<br />&nbsp; &nbsp; sta.w $420b&nbsp; &nbsp;&nbsp; &nbsp;; Initiate DMA transfer -- should zero $7f:0000 to $7f:ffff<br /></div><br />Sorry for the formatting errors, forum/code block doesn't particularly like literal tabs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 08, 2014 5:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Typo: &quot;the official SNES Developrs manual&quot;<br /><br />In linear algebra, an <a href="https://en.wikipedia.org/wiki/Identity_matrix" class="postlink">identity matrix</a> looks like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;1 0<br />&nbsp;0 1&#93;<br /><br />&#91;1 0 0<br />&nbsp;0 1 0<br />&nbsp;0 0 1&#93;<br /><br />&#91;1 0 0 0<br />&nbsp;0 1 0 0<br />&nbsp;0 0 1 0<br />&nbsp;0 0 0 1&#93;<br />etc.<br /></div><br />Multiplying a vector by an identity matrix leaves the vector unchanged. Mode 7 is all one big pile of linear algebra, so it's probably best for the init code to put the matrix in &quot;do nothing&quot; mode initially, where only the scrolling registers do anything.<br /><br />I'm not a lawyer, but I feel a need to get &quot;because Nintendo said so&quot; lines out of the way so that fewer people are tempted to seek out what are at least nominally trade-secret documents. Here's how I'd reword the notice in my own copy:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;<br />; The S-CPU's memory controller supports fast (3.58 MHz) ROM access<br />; only in banks $80-$FF.&nbsp; Jumping out of bank $00 early in the reset,<br />; NMI, and IRQ handlers allows high-speed access on a cartridge<br />; configured for it.&nbsp; Doing this in normal-speed mode doesn't hurt,<br />; so it's a win-win no matter what PCB layout/spec you're using.<br />;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sat Mar 08, 2014 9:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; As for using DMA to clear memory: I didn't think this was possible until I found registers $2180/1/2/3 (I always wondered what the purpose of those was, now I know ;-) ).<br /><br />Oh sorry, guess I should have posted examples. It's possible to clear everything with them: VRAM, OAM, CGRAM, WRAM. And even better to reuse most of the DMA setup between all four of your clears.<br /><br />$2180 is also extremely useful for its auto-increment functionality. It's used all the time for streaming decompression and such.<br /><br />&gt; do you happen to know if the general DMA registers retain their contents after a DMA transfer (particularly registers $43x0 through $43x6) or are they changed/reset?<br /><br />They are live registers used directly (eg no shadow registers or caching.) So $43x5-6 decrement visibly after each byte transfer, $43x2-3 increment (that's not a typo, $43x4 does not increment.) So you'll get back zero, unless the DMA was aborted mid-way (eg HDMA on the same channel runs.) $43x0-1 stay the way they were.<br /><br />&gt; With regards to RAM clearing, I was thinking of doing this to clear $7e0000 to $7fffff, but wasn't sure if I needed to re-set all the DMA registers before I did the 2nd transfer:<br /><br />Reuse the same function code to initialize the DMA registers, and then for each clear function, call the stub, set the specific registers (eg for VRAM, set 2115, for WRAM, set 2181-3, etc) and transfer. Like you've said, being too aggressive with optimizations on cold code is never wise (eg your reset routine doesn't need sei, clc, cld. It can start with xce and work just fine. But yeah, have fun with your three saved bytes and less experienced people reporting it as a bug.) Instead, I adhere to &quot;don't repeat yourself&quot; to avoid accidental mistakes.<br /><br />To throw a fun crazy idea at you ... one of my favorite 65816 tricks is static arguments. Your code looks like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr function<br />db $00, $01, $02, ...<br />nextInstructions:</div><br /><br />function accesses the data after the jsr via lda $nn,s; and then it adds the size of the static parameters to the return address, so the rts returns after the static data.<br /><br />Consider having a DMA transfer function like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr transferDMA; db 4300, 4301, 4302, 4303, 4304, 4305, 2115, 2116, 2117<br />//or use a pretty macro if you want</div><br /><br />If nothing else, it'll confuse the hell out of people =)<br /><br />&gt; Sorry for the formatting errors, forum/code block doesn't particularly like literal tabs.<br /><br />One of the reasons I gave up on requiring tabs for my extensible markup format was phpBB's poor handling of tabs. Sucks to paste an example, they copy it, and now it doesn't work.<br /><br />And now I have people whose files break because they intermix tabs and spaces in a Python-like language that counts nesting level by indention level, and nobody on the planet can agree on how many spaces equals one tab. Fun.<br /><br />&gt; In linear algebra, an identity matrix looks like this:<br /><br />Set the registers to zero on reset. When someone wants to use Mode 7, they can set the identity matrix to 1 themselves.<br /><br />Deciding on default values would bring you into a rats nest of bike shedding. What about 2115? Surely #$80 is more common. What about add/sub settings? Shouldn't Vscroll account for line 0 being blank by default? Yeah, better to just say &quot;everything's zero.&quot; and people can go from there. The only exception you really need for the PPU is $2100 display disable should certainly be on (technically, it's set on reset by hardware, so you can skip it if you want.) Clearly it should have been a display <em>enable</em> bit, but oh well. Not every design is elegant and well thought out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ARM9</b> [ Sun Mar 09, 2014 6:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">With regards to RAM clearing, I was thinking of doing this to clear $7e0000 to $7fffff, but wasn't sure if I needed to re-set all the DMA registers before I did the 2nd transfer:</div><br />I don't think that should work on an actual console, for $2180 superfamicom.org states:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">attempting a DMA from WRAM to this register will not work, WRAM will not be written. Attempting a DMA from this register to WRAM will similarly not work, the value written is (initially) the Open Bus value. In either case, the address in $2181-3 is not incremented.</div><br />I tested in geiger and no$sns, only worked in the latter (which is sort of unreliable in terms of accuracy). What you can do is put 0 in rom and use that as the DMA source.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun Mar 09, 2014 1:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, can't assert the same chip for reading and writing at the same time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Mar 09, 2014 4:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES dev newbie questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ARM9 wrote:</div><div class="quotecontent">I don't think that should work on an actual console, for $2180 superfamicom.org states:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">attempting a DMA from WRAM to this register will not work, WRAM will not be written. Attempting a DMA from this register to WRAM will similarly not work, the value written is (initially) the Open Bus value. In either case, the address in $2181-3 is not incremented.</div></div><br />I've read this paragraph 4 times now, and it's bloody confusing.  I can't reliably say I understand what it means, specifically the phrases &quot;attempting a DMA from WRAM to this register&quot; and &quot;attempting a DMA from this register to WRAM&quot;.  The only conclusion I've been able to reach is that the author of those lines is trying to say &quot;Don't use general DMA to read from banks $7e/7f + write to $2180, and don't use general DMA to read from $2180 + write to banks $7e/7f&quot;, and if that's the case, then I can see some legitimacy in that.<br /><br />But neither case is what my code was doing.  <a href="http://forums.nesdev.com/viewtopic.php?p=126561#p126561" class="postlink">The code</a> uses general DMA to read from $000000 (fixed address) and writes to $2180.  I'm aware of the RAM mirroring (banks $00-3f, ranges $0000-1fff, from banks $7e/7f).  If what you're saying is that the above code won't work, then that brings into question <a href="http://forums.nesdev.com/viewtopic.php?p=126569#p126569" class="postlink">byuu's statement that general DMA can be used to clear WRAM</a>.<br /><br />It's really good that we're discussing all this and probably confusing the hell out of the OP.  *rolls eyes*

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>