<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Object collision</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Object collision</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=352">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=352</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Jun 14, 2005 4:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could use a scanline counting, but this would require good timing. As reference, set up a variable indexed with the timing (in cycles per frame). Every NMI would reset it to zero. As it's indexed properly, you linked it with the Y position of the objects - if any object's present, then analyse its X position in a certain range. You would do this 1 time per line, and killing it if the object is in range.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Tue Jun 14, 2005 4:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>suggestion</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>This abstracted version (often called a "engine") should allow you design levels using the concept of objects, as opposed to pixels. The key is to get the level of abstraction right.</em>
<br />
<br />Agreed.  A pixel based collision algorithm would require signficantly more work since it needs to be calculated each and every time.
<br />
<br />#define LEFT   1
<br />#define UP      2
<br />#define RIGHT 4
<br />#define DOWN 8
<br />#define UL  16          /*upper left*/
<br />#define UR  32          /*upper right*/
<br />#define LL  64          /*lower left*/
<br />#define LR  128          /*lower  right*/
<br /> 
<br />
<br />Collision_Detect(int x, int y)
<br />{
<br />
<br />int return_value = 0;
<br />
<br />if (location (x - 1, y) has an object in it)  /*check to the left*/
<br />   return_value = LEFT;
<br />
<br />if (location (x + 1, y) has an object in it)  /*check to the right*/
<br />   return_value = return_value BITWISE_OR RIGHT;
<br />
<br />... test the remaining directions
<br />
<br />return return_value;
<br />}

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Sep 03, 2005 7:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I've figured out a way to collide with the background, I just need to find a better way to actually check for collision with certain objects. Here's my code for collision, I have variables:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">upcol: .ds 1&nbsp; &nbsp; &nbsp; &nbsp;;variable for upper collision<br />dncol: .ds 1&nbsp; &nbsp; &nbsp; &nbsp;;variable for down collision<br />lfcol: .ds 1&nbsp; &nbsp; &nbsp; &nbsp; ;variable for left collision<br />rtcol: .ds 1&nbsp; &nbsp; &nbsp; &nbsp; ;variable for right collision<br /><br /></div><br /><br />understand? Okay, and when there's a collision, 1 is added to upcol, dncol, or whatever one. and when there isn't a collision, the value of upcol, etc. is 0. It's kind of like a bit on/off thing where the bit is 1 when on, and 0 when off. okay, here's my code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">upkey:<br />&nbsp; &nbsp; &nbsp; &nbsp;lda upcol<br />&nbsp; &nbsp; &nbsp; &nbsp;cmp #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;check for collision<br />&nbsp; &nbsp; &nbsp; &nbsp;beq stop<br />&nbsp; &nbsp; &nbsp; &nbsp;jsr wait_vbl&nbsp; &nbsp; ; wait two vblanks<br />&nbsp; &nbsp; &nbsp; &nbsp;dec cy&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; decrease sprites y position once per 2 vblanks<br />&nbsp; &nbsp; &nbsp; &nbsp;rts<br /><br />stop:<br />&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; no operation, stop moving.<br /><br /></div><br /><br />and that's how it is for every press. I just have it so you can't go past a certain line, and I have a function saying:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">check:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda cy&nbsp; &nbsp; &nbsp; &nbsp; ;sprites y position<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cmp #150<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;beq there&nbsp; ; if sprites y pos is 150, go to there lable<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda cy<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cmp #150<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bne therea ; if sprites y pos isn't 150, go to therea lable<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rts<br /><br />there:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta upcol<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />therea:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta upcol<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br /></div>
<br />
<br />Yeah, so it just checks for that line of pixels, and nothing else. What's a good method to check for background objects? And I would really appreciate if sample code was supplied. thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Sep 04, 2005 1:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The code you supplied is, oh my, incredibly bad.
<br />Collision detection is much easier than it seems. You just have to be sure of what you want to do. It would be pretty different from a top-down adventure game, a side-scroller platformer, or an RPG. Basically, you have to first check if the player is moving or not. Then if moving, check for collision for all direction to be able if the move can be done or not. Eventually, setup the new position if there is no collision. The vertical and horizontal thing should be setup separately, since the player can colisionate only horizontally but not vertically (aka : Jumping on a wall while trying to enter to the wall), or horizontally but not vertically (aka: While just walking on platformers, the hero would automatically fall exept if there is a collision, so it's the case on normal walking).
<br />This may sound a bit confusing, but a platformer needs to always check collision while a RPG doesn't (scince the player won't fall if there is no collision).
<br />But anyway do <strong>NOT</strong> wait wblanks while checking for collision or you may not go far away. This sould be done DURING the frame.
<br />By the way, checking the sprites position trough the sprite buffer $200-$2ff is also an incredibly bad idea, because you basically have sprites with different size and sprite cycling, well, it's a terrible idea. You anyway should have copies of all position for your sprites in RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sun Sep 04, 2005 11:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, I don't think the code is THAT bad. It's definetely not what you want to use, but it's not that bad. I'm making a top down pacman style game right now, and I want to know how you can check if the sprites are over a certain tile. like, how would you say this?:
<br />
<br />collision:
<br />          lda sprite_pos
<br />          (some code to 
<br />           check if it's over
<br />           a certain tile)
<br />          (then some collision
<br />           code)
<br />
<br />I really don't know how to do that, because I'm not sure how the sprites position and the placement of tiles are at all related. Any advice?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 04, 2005 11:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The location of the 8x8 pixel tile that corresponds to a particular sprite X location is given by the formula:
<br />tile X = (sprite X + screen scroll X) / 8
<br />tile Y = (sprite X + screen scroll Y) / 8
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ; convert sprite coords to tile coords<br />&nbsp; clc<br />&nbsp; lda sprite_x<br />&nbsp; add screen_scroll_x<br />&nbsp; lsr a<br />&nbsp; lsr a<br />&nbsp; lsr a<br />;&nbsp; lsr a&nbsp; ; uncomment this if you're using 16 pixel wide metatiles<br />&nbsp; sta tile_x<br />&nbsp; clc<br />&nbsp; lda sprite_y<br />&nbsp; adc screen_scroll_y<br />&nbsp; lsr a<br />&nbsp; lsr a<br />&nbsp; lsr a<br />;&nbsp; lsr a&nbsp; ; uncomment this if you're using 16 pixel tall metatiles<br />&nbsp; sta tile_y<br />&nbsp; ; Take tile_x and tile_y as indices into your map array,<br />&nbsp; ; looking up whether the tile at this position is transparent.<br />&nbsp; ; The technique for this depends on how you're storing your maps.<br /></div>
<br />You'll usually want to do this for several points on the outside of your sprite's hitbox.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Sep 04, 2005 11:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You should have the decompressed map stored in RAM (or at least, the parts of the map that are on screen or player/object accessable).  To keep it easy, the map width should be a power of 2 value (16 or 32 is a reasonable width).  Alternatively, you could keep the width the sum of 2 power-of-two values (16+4 = 20, or 16+8=24) but this will make tile lookup a little harder and take a little longer.
<br />
<br />The map should probably be stored in "read like a book" fashion, top row stored first, left to right, then 2nd row, then third row, etc, etc.
<br />
<br />How a small 4x4 example map might look:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1111<br />1001<br />1101<br />1111<br /></div><br /><br />'1' tiles being the tiles the player cannot move over, '0' being the tiles the player can move over.<br /><br />This would be stored in RAM somewhere like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">01 01 01 01 01 00 00 01 01 01 00 01 01 01 01 01<br /></div><br /><br />Assuming a tile size of 16x16 pixels, you can easily convert the player's X,Y pixel coords to tile coords by right shifting each four times.  Once you have the tile coords, you can lookup which tile the player is currently over with a simple formula:<br /><br />tile[ (Ycoord * mapwidth) + Xcoord ]<br /><br />In 6502 you could code that something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA Player_Y_coord<br />ASL A<br />ASL A&nbsp; ; multiply by 4 &#40;example map had width of 4&#41;<br /><br />CLC<br />ADC Player_X_coord<br /><br />TAX ; move to index reg<br /><br />LDA Map_in_RAM, X<br /><br />; A now contains the tile they're stepping on<br /></div>
<br />
<br />When moving, you can check the tile the player will be moving TO and see if they can move there.  If they can, then allow them to move, but if they can't, you know they're trying to hit a wall, so stop them from moving.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Sep 04, 2005 11:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, I'll show you a sample to give you several ideas.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GetCollision: ;A=Vert.Pos, X = Horiz. Pos<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Get the collision in an array of 8x8 background block<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;The flag saying if the background is set is in a RAM array<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Where each BG block attibute is, let's say, 2 bytes long<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Exit with carry clear if solid, set if passable<br />asl A<br />asl A<br />asl A&nbsp; &nbsp; &nbsp; ;The array is 8x8 so the vertical should be multiplied by 8<br />stx Temp<br />ora Temp ;And added with the horizontal index<br />tax<br />lda MapTable,X ;Get the block number<br />asl A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;I said the block attibs are 2 bytes long so multiply by 2<br />tax<br />lda BlockTable,X ;Load the attribute for the current block<br />asl A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Let's say that the data is in bit 7 of the first byte<br />rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;The carry has the value of that bit = slolid or not</div>
<br />
<br />Of course, scince your sprite whill have a fixed width, you'll probably have to do more than one check like this, i.e. when walking up, you should check at the extreme left and at the upper-left and upper-right corner of your sprite, and the same principles apply to all 4 directions. I think you'll basically need a different piece of code for each 4 directions, and all of them will call similar routines like the one above.
<br />
<br />Edit : Wow, both Dish and Tepples posted their answer while I was writing mine, so you definitely have different example from different peple explaining things differentely to you. No excuse, now  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-tokumaru-</b> [ Mon Sep 05, 2005 10:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">upkey:<br />&nbsp; &nbsp; &nbsp; &nbsp;lda upcol<br />&nbsp; &nbsp; &nbsp; &nbsp;cmp #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;check for collision<br />&nbsp; &nbsp; &nbsp; &nbsp;beq stop<br />&nbsp; &nbsp; &nbsp; &nbsp;jsr wait_vbl&nbsp; &nbsp; ; wait two vblanks<br />&nbsp; &nbsp; &nbsp; &nbsp;dec cy&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; decrease sprites y position once per 2 vblanks<br />&nbsp; &nbsp; &nbsp; &nbsp;rts<br /><br />stop:<br />&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; no operation, stop moving.<br /></div><br /><br />and that's how it is for every press.<br /></div>
<br />
<br />OK, Celius. You are doing something really wrong here. You should NEVER wait for vblanks inside your keypressing routine. Why? Well, mainly because there are (or at least should be) more stuff happening in the screen besides the movement of the player. You are literally stoping EVERYTHING (for two frames!) while your player moves. The music (if you have any) will hang, enemies that should be moving around will stop, etc etc.
<br />
<br />In order for a game to work, your engine CAN'T revolve around 1 object, in this case, your player. You must let the frames flow, and every frame check if there is anything to do with each object in the screen.
<br />
<br />In your case, you shouldn't have an "upkey" routine. I think you should have 2 "acceleration" variables. One horizontal and one vertical. If the up key was pressed, set your vertical "acceleration" to -1 (so your player goes up), and increment your acceleration variables to the player's coordinates every frame. Don't just hang the game while the player is moving, he/she is not the only thing that needs attention in the game.
<br />
<br />And if you NEED to restrict the player's speed to less than 1 pixel per frame, just add a fraction of the acceleration to the player's coordinates. If the minimum you player can walk is half a pixel (as you said, 1 pixel in two vblanks) you add half the value in the acceleration variables to the player's coordinates.
<br />
<br />Now, after moving, you check if the object/player collided agains anything. If it did, move it back to where it was.
<br />
<br />And as Bregalad said, don't do your game logic during vblank. In most cases, there is not enough time, unless your game is REALLY simple. You should do the logic OUTSIDE of vblank, and wai for vblank to DRAW the stuff you just computed to the screen.
<br />
<br />Sorry if I didn't supply you with any sample code as you'd like, but the ideas I presented here are very simple, if you read carefully and try to pictures the stuff I'm saying I'm sure you'll understand.
<br />
<br />-tokumaru-

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-tokumaru-</b> [ Mon Sep 05, 2005 11:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, it may be a little hard to understand at first, so here is some pseudo-code. Start this OUTSIDE of vblank:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//The first thing you do is read the keys. Do this however you want.<br /><br />//Clear acceleration.<br />AccelX = 0;<br />AccelY = 0;<br /><br />//Set acceleration according to keys pressed.<br />if &#40;keyup&#41; then AccelY = AccelY - 1;<br />if &#40;keydown&#41; then AccelY = AccelY + 1;<br />if &#40;keyleft&#41; then AccelX = AccelX - 1;<br />if &#40;keyright&#41; then AccelX = AccelX + 1;<br /><br />//Move the player horizontally.<br />PlayX = PlayX + AccelX;<br /><br />//Check for collision with background &#40;this is just one way of doing it...&#41;.<br />If &#40;Map&#91;PlayX div 16, PlayY div 16&#93; &lt;&gt; 0&#41; then PlayX = PlayX - AccelX;<br /><br />//Move player vertically.<br />PlayY = PlayY + AccelY;<br /><br />//Check for vertical collision with background.<br />If &#40;Map&#91;PlayX div 16, PlayY div 16&#93; &lt;&gt; 0&#41; then PlayY = PlayY - AccelY;<br /><br />//Move any other objects you may need to move now.<br /><br />//Now you wait for vblank and draw the stuff to the PPU. Start over.<br /></div>
<br />Of course the collision detection here is very basic, I'm even ignoring the concept of bounding boxes, but implementing it woudn't be very hard. 
<br />
<br />Also, in this case you're limited to 1 pixel per frame. To move less than that, I guess you'd have to increase the precision of your player's coordinates (double it) and them divide it by 2 when placing the graphics on screen. You can't add half the acceleration (as I said before) as it will always be 0 when you divide 1 by 2 and the player will never move! I was thinking about something else, in my game I divide the acceleration to have my player accelerate slower. I mixed things up.
<br />
<br />Also, in my game I don't clear the acceleration, I decrease it little by little if the player is not pressing a key in that direction. And I set limits to it (so the player does not move too fast), and then it really works like acceleration.
<br />
<br />-tokumaru-

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Sep 05, 2005 11:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I totally agree, however I have to discuss about one point.
<br />You said you have two variables, one for VSpeed and HSpeed.
<br />On the game I'm writing now, I do it on a very different way.
<br />I check for what the player does (in a flag that could handle each player action, stuff like staying, walking, prepare to attack, attack, etc...). Then, if the action is walking (and this would be probably the only one where the player would move), check for witch directions are pressed on the joy-pad. Eventually, if the player moves vertically, check for if it's up or down (one button will override the other one if both are pressed, that is impossible on a NES joypad), and then it's position will be decreased/increased by 1 on odd frames and 2 on even frames, then the collision will be checked vertically. Now, do the same horizontally (so the player can move diagonally).
<br />
<br />This is slightly different, because there is no speed variables at all, and the player does move at a constant rate (I kinda prefer this, since the player is more responsive, however I'm not against a little acceleration like in Mega Man games, but a gigantic acceleartion like in SMB makes the whole game hell). Do you think I should change that, or is it okay as it ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-tokumaru-</b> [ Mon Sep 05, 2005 11:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I totally agree, however I have to discuss about one point.<br />You said you have two variables, one for VSpeed and HSpeed.<br />On the game I'm writing now, I do it on a very different way.<br />I check for what the player does (in a flag that could handle each player action, stuff like staying, walking, prepare to attack, attack, etc...). Then, if the action is walking (and this would be probably the only one where the player would move), check for witch directions are pressed on the joy-pad. Eventually, if the player moves vertically, check for if it's up or down (one button will override the other one if both are pressed, that is impossible on a NES joypad), and then it's position will be decreased/increased by 1 on odd frames and 2 on even frames, then the collision will be checked vertically. Now, do the same horizontally (so the player can move diagonally).<br /><br />This is slightly different, because there is no speed variables at all, and the player does move at a constant rate (I kinda prefer this, since the player is more responsive, however I'm not against a little acceleration like in Mega Man games, but a gigantic acceleartion like in SMB makes the whole game hell). Do you think I should change that, or is it okay as it ?</div>
<br />
<br />I think your method is fine. Since your game is RPG style, and you don't move diagonally (in many RPG's you can't, right?), it works quite well as you described. The method I described (in better detail in my second post) is more suited to a platformer, where you can have any combination of horizontal and vertical speeds. But when I simplified it for Celius's needs it didn't look all that smart! =)
<br />
<br />You're absolutely right when you say you only check for collisions in the direction you're walking. You can do that with the method I use, just decide what to do based on the speed values (you're right, maybe it is better to call them SPEED variables). If it is 0, don't check for collisions. If it is negative, look for collisions at the top/left, and if it is positive, look for collisions at the bottom/right.
<br />
<br />In the example I posted, opposing keys will cancel each other, even though it is not possible on a real NES pad! Most people run this stuff in emulators, anyway! =)
<br />
<br />The method I described is really good for games with actual acceleration, like Mario or Megaman, as you said. Just set your limits and scales carefully and you can do both with this technique, I guess.
<br />
<br />-tokumaru-

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-tokumaru-</b> [ Mon Sep 05, 2005 12:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just adding one more thing on Bregalad's post:
<br />
<br />I prefer to have the two directions variables in addition to the flags, as opposed to only the flags. That is because, in my platform game, walking does not cancel other actions. I might be walking/running -"moving" is a better word, actually- at the same time I'm jumping, attacking, etc.
<br />
<br />
<br />In most games of the kind you're making you can't, say, attack and walk at the same time, right? If you press the attack button, while walking, the player will stop, attack, and then continue walking, right? If so, the flag for each action method works just fine. The "attack" flag must have a higher priority though, right? And the "attack" action is also affected by the direction the player is headed to, isn't it? So you know where the impact of the attack should happen... You must keep track of the direction of the player (in a separate variable, probably) even if he is not moving, so the other actions also work in the direction they should... right?
<br />
<br />-tokumaru-

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Sep 05, 2005 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I can and will move diagonally, because the left/right move and up/down move are done in parallel. This is not a RPG, but Action RPG, so good controls are definitely needed. I decided to do exacly as you explain in the second post, so attack button is checked even while walking, and if active, the player will stop to walk, attack, and begin to walk again. As you described, the direction the player is facing is independent from where it moves, but is redirected if the player is no longer pressing the corresponding arrow. So, you can move up-left while watching up or while watching left, both are possible.
<br />
<br />I can't imagine how bad would Mega Man or Contra be with this method, however. But Crystalis would surely be better if the hero would stop to walk while attacking. I found that terribly anoying.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-tokumaru-</b> [ Mon Sep 05, 2005 12:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I can and will move diagonally, because the left/right move and up/down move are done in parallel.</div><br /><br />Oh, I see. But it will be on exact diagonals, right? Since your speed is fixed... I say that because, in a platformer, you can, really, move in any combination of vertical and horizontal speeds. I guess it's best described as an "all-way scroller" then an "8-way scroller"! =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is not a RPG, but Action RPG, so good controls are definitely needed. I decided to do exacly as you explain in the second post, so attack button is checked even while walking, and if active, the player will stop to walk, attack, and begin to walk again.</div><br /><br />But the way you did before worked as you wanted, didn't it? That thing I wrote is more usefull if you do want to attack and keep moving, and I can see this is not your case. Not that it won't work for you or anything, you can do what you think is best, and I think your new way will work just as well! =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As you described, the direction the player is facing is independent from where it moves, but is redirected if the player is no longer pressing the corresponding arrow. So, you can move up-left while watching up or while watching left, both are possible.</div><br /><br />I didn't quite understand this... you can move towards one direction while facing another? I've never seen a game do this... Well, at least not in the NES, where we have limited controls... In newer games it is quite common beeing able to walk/move in one direction while shooting at the other and all...<br />Anyway, I just think I didn't understand what you said! =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I can't imagine how bad would Mega Man or Contra be with this method, however. But Crystalis would surely be better if the hero would stop to walk while attacking. I found that terribly anoying.</div>
<br />
<br />Hehe! I did a Megaman clone for the PC years ago where the player had really bad limitations. I had only horizontal acceleration, the vertical speed was fixed! Looked pretty bad! And to save graphics, the player could only shoot standing. It wasn't very smooth, indeed. With tiled graphics it is easier, since you could keep the legs moving AND keep the arm straight shooting, but I didn't have a clue about tiled graphics back then.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>