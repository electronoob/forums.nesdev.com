<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - First steps in writing an emulator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">First steps in writing an emulator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10558">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10558</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Sat Oct 05, 2013 12:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey guys, I'm new here.  Glad I found the place  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />I'd say I'm a pretty good programmer.  I've been programming for about 5 years.  Started with Python, then Javascript, then C#, and just recently I've done a few things in C++.  I've been interested in emulators since I found out they existed.  I downloaded a N64 emulator and started playing old N64 games from my childhood.  The N64 was my favorite, and the nostalgia of playing those games again was great  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />Afterwards, I thought it would be interesting to write a N64 emulator.  I did some research for about an hour until I came to the conclusion that it would be ridiculously hard haha.  So I decided I'd try emulating a simpler system.  I did some research on the Chip-8, and programmed my own, all in one sitting.  I learned a lot, but I like a challenge.  The Chip-8 was far too easy, so yesterday I started an NES emulator.  I've been doing a LOT of reading, and a bit of programming.  After what I've read and programmed so far, I can say this is definitely more challenging!<br /><br />I'm using C++.  So far, I wrote a NES class that holds all the other components.  I made a CPU class, and started a cpuCycle() function, which has switch statement for the opcodes.  I plan to write a function for each opcode, and a function for each addressing mode.  That way, I'd have a lot less functions compared to if I wrote a function for each unique opcode with addressing mode.  That should work, right?  I also wrote a Memory class, which doesn't do much besides have methods for reading and writing.  I believe I understand mirroring, but it seems strange.  When you write to an address on the CPU memory, it gets mirrored to the corresponding mirror addresses.  Can I program this explicitly into the CPU Memory class?  Can anything change how the CPU memory is mirrored?  I also wrote a ROM loader.  It reads the header, and loads the 1 or 2 program banks into the CPU PRG memory.  I'm only going to worry about ROMs with 1 or 2 program banks, until I get it running.<br /><br />So now, my NES reads the ROM and loads the program banks into memory.  Now what?  I'm a little confused.  The program counter starts at 0, right?  Which corresponds to the very first byte in the CPU memory?  What gets loaded there when the ROM loads?  Or does the program counter start at the lower PRG bank?<br /><br />I know, it's quite a few questions.  But I'm finding it hard to find answers to simple questions like these.  Trust me, I've been doing a LOT of reading.  I'd like to have the CPU memory set up first, so I can start programming the opcodes.  That should be my next step, right?  Or are there other things I have to get set up first?  Could someone give me a basic step-by-step order I should program things in?  Some help would be GREATLY appreciated.  Thanks  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />EDIT:  Also, does anyone know where I could find source code for a very simple and organized emulator?  I looked at the Nintendulator source, and it's crazy.  I'm a freak about commenting, organizing, and simplifying my code.  It makes it very very easy for someone else to read and understand.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat Oct 05, 2013 2:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Take a look at <a href="http://www.walkofmind.com/programming/side/side.htm" class="postlink">SIDE</a> and <a href="http://www.walkofmind.com/programming/pie/pie.htm" class="postlink">PIE</a>.<br /><br />A function per opcode and per addressing mode will work and could allow to organize things clearly, but don't forget that it could hit the performance a lot as well, with many thousands of funciton calls per frame (so think about inlining, call table, etc).<br /><br />Read/write handlers is the place to implement mirroring, so yes, Memory class is the place.<br /><br />When you writing an emulator, one of very first things to do is to take a look at memory map. If you do so, you'll realize NES can't start from address 0, because there is RAM. The answer is in 6502 docs, though, read about so called 'vectors' (namely reset vector), they are the thing that tells CPU where to start and where interrupt handlers are located.<br /><br />And kind of an offtopic response, I've been a programmer for about 20 years now, wrote few emulators, but still I wouldn't say I'm a pretty good programmer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Sat Oct 05, 2013 2:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you.  Yeah, I'm going to inline the functions.  I'm not too worried about performance yet.  I just want to get it up and running before I worry about optimization.  So the reset vector tells the program counter where to start?  If I have the program banks loaded into memory, and get memory mirroring set up, and set the program counter to the reset vector, can I start programming opcodes and letting the CPU cycle?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat Oct 05, 2013 2:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, the program counter is loaded with value from the reset vector at reset.<br /><br />I'd say that writing and debugging a 6502 emulator with a NES emulator at once is way more difficult thing to do than doing these things separately, because you could make mistakes in both counterparts without being sure where it is. A better approach for start would be just writing 6502 emulator, with very simple abstact system, like plain 64K RAM where you will manually put some test code. Just make your 6502 emulation code well separated from everything else, and you'll be able to both debug it in the test enviroment (when you need to catch a bug), and use it in complete NES emulator enviroment.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Oct 05, 2013 11:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">janzdott wrote:</div><div class="quotecontent">When you write to an address on the CPU memory, it gets mirrored to the corresponding mirror addresses.  Can I program this explicitly into the CPU Memory class?</div><br />The best way to handle memory mirroring is doing it like the hardware does: partially decoding addresses. The reason $0000-$07FF is mirrored all the way up to $1FFF is because the NES only has 2KB of memory to fill a space of 8KB. Once the NES detects that $0000-$1FFF is being accessed (detecting $0000-$07FF would need more hardware, because it would have to watch more address lines), it uses the 11 bits it takes to address 2KB and ignores the remaining 2 address line it would take to access 8KB. Mirroring is just a side effect of ignoring some address lines, because it's cheaper to do so. You can do the same thing in software.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can anything change how the CPU memory is mirrored?</div><br />Carts can map anything they want from $4020 to $FFFF. Even though this is not terribly common, it's certainly possible.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I also wrote a ROM loader.  It reads the header, and loads the 1 or 2 program banks into the CPU PRG memory.  I'm only going to worry about ROMs with 1 or 2 program banks, until I get it running.</div><br />Keep in mind that the NES doesn't &quot;load&quot; anything, no data is copied anywhere. It instantaneously sees the ROM when it's powered on. Even when bankswitching is used nothing is ever copied anywhere, what happens is that the address lines are manipulated to make different sections of a larger memory chip visible in the small window that the CPU can see.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The program counter starts at 0, right?</div><br />Nope. It starts at the address pointed by the RESET vector. The 6502 looks for 3 special addresses at the end of the addressing space: $FFFA-$FFFF contain the addresses the CPU is supposed to jump to in case of an NMI, RESET or IRQ. If the RESET vector points to $0000 then the CPU will try to execute code from there, but that wouldn't really work because $0000 is RAM, and right after power on it's contents are undefined (NMI and IRQ can safely point to RAM if the program puts the code to handle these interrupts there though).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What gets loaded there when the ROM loads?</div><br />Nothing, which means the CPU would try to execute a &quot;random&quot; sequence of undefined bytes as if they were code... that's a certain crash!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'd like to have the CPU memory set up first, so I can start programming the opcodes.  That should be my next step, right?  Or are there other things I have to get set up first?  Could someone give me a basic step-by-step order I should program things in?</div><br />The CPU is a good place to start. Keep in mind that you must have the CPU, PPU and APU running in parallel at all times, each one doing there thing and interacting with each other, so you'll have to program these components in a way that they can either run little by little one at a time (often called &quot;cycle-by-cycle&quot;, which is somewhat slow depending on the machine that's running the emulator), or predict when the next interaction with other components will be and emulate up until that point (this is significantly harder!).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I looked at the Nintendulator source, and it's crazy.  I'm a freak about commenting, organizing, and simplifying my code.</div><br />Nintendulator is one of the most accurate NES emulators out there, so it's no surprise that it's source code is pretty complex. I'm not sure how simple you can keep things if you plan on making accurate emulators, because there's all sorts of little hardware quirks that make it impossible to solve problems with straightforward solutions. If you just want to get games running (as opposed to faithfully emulating all hardware aspects), things get easier and you can make use of game-specific hacks (this makes your emulator suck as a game development tool though, since it's specifically tailored for existing games). I believe most N64 emulators are like that though, since cycle by cycle emulation gets incredibly slower as the complexity of the systems increases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Sun Oct 06, 2013 1:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks guys.  That answered all my basic questions.  So, for memory mirroring, the NES has to know when memory gets accessed, right?  Would it work if I kept an array of function pointers that get called when the memory is read from or written to?  And about the whole CPU testing...  I found a website that had programs that test the CPU.  It might have been this website actually, I don't remember.  But that'll definitely be my next step.  Thanks guys  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Oct 06, 2013 5:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, this really should be moved to the NESemdev section...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Sun Oct 06, 2013 7:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well it says NESemdev now, but someone must've moved it.  Sorry!  I'll post any further questions I have in this thread when they come up

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sun Oct 06, 2013 8:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">janzdott wrote:</div><div class="quotecontent">Would it work if I kept an array of function pointers that get called when the memory is read from or written to?</div><br />Yep that would work.<br /><div class="quotetitle">janzdott wrote:</div><div class="quotecontent">And about the whole CPU testing...  I found a website that had programs that test the CPU.  It might have been this website actually, I don't remember.  But that'll definitely be my next step.  Thanks guys  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div><br />I gathered oodles of them and put them up on GitHub <a href="https://github.com/christopherpow/nes-test-roms" class="postlink">here</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Mon Oct 07, 2013 9:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For what it's worth, I do &quot;slow&quot; CPU emulation with interrupt polling in each instruction and no prediction, and CPU emulation accounts for about 4-5% of the runtime in my emulator (out of a total of using about 40% of one core on my two-year-old Core-i7 2600K). Most of that is in the read() and write() routines. My PPU code is very slow due to rendering pixel-for-pixel and doing sprite/bg pixel selection and sprite evaluation like the real PPU.<br /><br />The point is that you should know your range of target systems before optimizing, and not optimize parts of your program prematurely on a guess that they'll be significant. For modern desktop systems, you can usually get away with doing the straightforward thing in an NES emulator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Mon Oct 07, 2013 9:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When it comes to inlining, one thing you should definitely do is whole-program/link-time optimization. When you're callings lots of function per tick, letting the compiler inline across compilation units can help a lot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Mon Oct 07, 2013 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ulfalizer wrote:</div><div class="quotecontent">For what it's worth, I do &quot;slow&quot; CPU emulation with interrupt polling in each instruction and no prediction</div><br /><br />Hmm, I was going to write a interrupt function that just sets the program counter whenever it's called.  How did you set it up to check for interrupts every cycle? I would imagine that's how the CPU actually handles interrupts, but I'm not very knowledgeable about this stuff... yet  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><br /><br />Though I do have about half of my opcodes written now.  But I can't test it until they're all done.  It's probably gonna be riddled with bugs.  I'll stay up late working on it, and I'll find out tonight!<br /><br />Oh, and one more dumb question to clarify something haha.  Each memory read/write uses one cycle, right?  I've been looking at a table that shows how many cycles each opcode uses.  Do I just waste dummy cycle(s) for the PPU and APU to catch up when the number of cycles in my opcode doesn't match the table?  I'm a little confused by this, and obviously keeping the timing correct is very important.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Mon Oct 07, 2013 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">janzdott wrote:</div><div class="quotecontent"><div class="quotetitle">ulfalizer wrote:</div><div class="quotecontent">For what it's worth, I do &quot;slow&quot; CPU emulation with interrupt polling in each instruction and no prediction</div><br /><br />Hmm, I was going to write a interrupt function that just sets the program counter whenever it's called.  How did you set it up to check for interrupts every cycle? I would imagine that's how the CPU actually handles interrupts, but I'm not very knowledgeable about this stuff... yet  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /></div><br /><br />The CPU checks for interrupts each instruction. The precise details are at <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/CPU_interrupts">http://wiki.nesdev.com/w/index.php/CPU_interrupts</a><!-- m -->, though it's overkill to get the timing exactly right when starting out (you could just check for pending interrupts between instructions). In addition to setting the program counter, an interrupt also saves the old program counter and the flags on the stack.<br /><br /><div class="quotetitle">janzdott wrote:</div><div class="quotecontent">Oh, and one more dumb question to clarify something haha.  Each memory read/write uses one cycle, right?  I've been looking at a table that shows how many cycles each opcode uses.  Do I just waste dummy cycle(s) for the PPU and APU to catch up when the number of cycles in my opcode doesn't match the table?  I'm a little confused by this, and obviously keeping the timing correct is very important.</div><br /><br />Yup, each read/write is one cycle. In fact, every cycle executed by the 6502 is either a read or a write cycle, with some being dummy reads/writes that don't do any useful work. Those can still be significant for some games due to reads/writes to certain addresses having side effects though - see Cobra Triangle in <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Tricky-to-emulate_games">http://wiki.nesdev.com/w/index.php/Tric ... late_games</a><!-- m -->.<br /><br />You can look in <!-- m --><a class="postlink" href="http://nesdev.com/6502_cpu.txt">http://nesdev.com/6502_cpu.txt</a><!-- m --> to see what reads/writes are done for different instructions. Implementing the instructions like in that doc is feasible, and makes the timing work out &quot;automagically&quot; without tables. You can also factor out the fetch of the opcode and the byte after that, since all instructions do it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Mon Oct 07, 2013 7:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ulfalizer wrote:</div><div class="quotecontent">You can look in <!-- m --><a class="postlink" href="http://nesdev.com/6502_cpu.txt">http://nesdev.com/6502_cpu.txt</a><!-- m --> to see what reads/writes are done for different instructions. Implementing the instructions like in that doc is feasible, and makes the timing work out &quot;automagically&quot; without tables. You can also factor out the fetch of the opcode and the byte after that, since all instructions do it.</div><br /><br />Thanks, that's a pretty helpful page.  I hadn't read that one before.  But I'm a little confused.  It says, &quot;The processors also use a sort of pipelining. If an instruction does not store data in memory on its last cycle, the processor can fetch the opcode of the next instruction while executing the last cycle.&quot;  So only the opcodes that don't store data in memory on the last cycle do that, or do all of them?  Is it necessary to emulate that behavior?<br /><br />And by the way, thanks for helping guys.  I wasn't expecting this forum to be as active as it is!  Time to get crackin' on the keyboard and load up a test program and get this CPU up and running tonight  <img src="./images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" /> I'm expecting bugs up the wazzoo though haha

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Tue Oct 08, 2013 2:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I tried out a CPU test ROM, and a hard time getting it to work, but there was a problem with my ROM loading.  I got it working now, and it executes a lot of code until it hits a loop.  I'm not sure if that's intended or not.  I do have 4 opcodes that aren't implemented yet.  I wrote a function that dumps the memory to a text file.  My next step is to write one that dumps the opcode and all the registers for each cycle, so I can compare it to the correct log file and see what problems I have to fix. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>