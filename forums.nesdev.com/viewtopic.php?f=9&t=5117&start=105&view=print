<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - New approach to the fabled NES ethernet adapter</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">New approach to the fabled NES ethernet adapter</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=5117">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=5117</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>8</strong> of <strong>9</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 03, 2010 5:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or look up "flow control": DSR/DTR, XON/XOFF, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Wed Mar 03, 2010 8:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Or look up "flow control": DSR/DTR, XON/XOFF, etc.</div>
<br />Flow control alone still wouldn't give us the ability to queue up transactions for delivery while the NES is between the 14ms polling periods.  As a consequence, it wouldn't guarantee a consistent stream of data.  It would stutter and you'd use a good chunk of NES CPU time either waiting for delivery or holding off until the next polling period.  Either way, you're wasting valuable time.  A rough analogy would be using LLQ in the Cisco world to support VoIP.  You COULD get by without it, but then your voice quality would suffer.  Here's we're not only trying to get the data to the NES as fast as possible, but with the lowest latency we can get.
<br />
<br />And before anyone starts in on the analogy, yes, I know LLQ prioritizes certain packets before other types of packets.  But the goal is the same.  Didn't say it was a perfect analogy.  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />
<br />While writing this, I just realized that you may have been referring to the congestion notifications.  If that's the case, my bad - you're absolutely right.  The only reason I'd avoid standard XON/XOFF signals is that they do not give enough info.  Depending on the size of the next incoming command, the NES232 may or may not have enough buffer space.  Instead of XON/XOFF, send status signals to the host with the amount of free buffer space.  If the space available is not large enough, it will not transmit and will wait until more buffer space is available.  But yes, in theory, I do agree with you.  This does require flow control.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Mar 03, 2010 2:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chykn wrote:</div><div class="quotecontent">Similar to congestion notication signalling in the routing world.  That way the NES doesn't send data that ends up in the bit bucket.</div>
<br />
<br />Oh yeah that makes sense, especially considering the host system would be running an operating system of some sort, it's sure to have a lot of other stuff going on.
<br />
<br />If it's not a big hassle, it would be cool if it could support an NES bit-banged async mode.  I'd be willing to try my hand at coding it in whatever memory might be left over in the MCU (heh).  It'd be for back-compatibility with stuff I wrote before, and probably a couple other people who have bit-banged stuff over RS232.  The only released thing that comes to mind is the Pitfall! port by never-obsolete: <a href="http://nesdev.com/bbs/viewtopic.php?t=3744&amp;highlight=pitfall" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=3744&amp;highlight=pitfall</a>.  I sent him the code for bit-banged XMODEM that the level editor can use, but it hasn't been tested in-game AFAIK.  It's just as well to leave async mode in the dust though, I don't think anyone would be mourning the loss. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Even the async NES-RS232 adapters I built (like 6 of them years ago), I later repurposed to use for Squeedo, with a real UART.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Mar 03, 2010 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">The only released thing that comes to mind is the Pitfall! port by never-obsolete: <a href="http://nesdev.com/bbs/viewtopic.php?t=3744&amp;highlight=pitfall" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=3744&amp;highlight=pitfall</a>.</div>
<br />Off-topic: Yet another broken link, I wish we had a central place where we could collect and showcase stuff like this so it wouldn't be buried in the depths of the forum so quickly. The main page kinda serves the purpose but not at this rate of updates. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Wed Mar 03, 2010 4:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow - whoever mentioned standardizing serial communication was really on to something.  I was looking at emulator support a few minutes ago and found something very interesting.  The FCEUX guys replied back and said an existing controller module could be modified to emulate the function of the NES232.  I looked over the source and it looks like it's doable.  One caveat, you'd have to also install another package to support the necessary virtual serial ports if you're using a pure software solution.  But here's how it would work...
<br />
<br /><strong>Hardware: NES -&gt; NES232(COM1) -&gt; IP Proxy App(COM1)<br />Emulator: FCEUX -&gt; VirtualNES232(VirtCOM3) -&gt; IP Proxy App (VirtCOM4)</strong>
<br />OR
<br /><strong>Hardware: NES -&gt; NES232(COM1) -&gt; TestApp(COM1)<br />Emulator: FCEUX -&gt; VirtualNES232(VirtCOM3) -&gt; TestApp(VirtCOM4)</strong>
<br />
<br />Using serial communications in both situations would allow us to make it more modular.  Say you wrote a test app that would talk directly to the NES using CGP (Classic Gaming Protocol, made that up).  You could have the physical NES connect to the test app or fire up the ROM in FCEUX and have it talk to the same app.  Better yet, say you wanted to reprogram a WRT54G to proxy the IP traffic.  You could test it with the emulator like this...
<br />
<br /><strong>Emulator: FCEUX -&gt; VirtualNES232(COM1) -&gt; WRT54G(COM2)</strong>
<br />
<br />As long as everything is using the same protocol, a setup like this would not be too hard to do.  If anyone has a good amount of experience in C++, please let me know.  We could have the hardware and the emulator support ready in the very near future if someone can give me a hand with the emulator portion.
<br />
<br />For those who need the link, I'm posting all the project info here...
<br /><a href="http://nesdev.chykn.com" class="postlink">http://nesdev.chykn.com</a>
<br />
<br />I'm going to try and finish the outgoing buffer code on the MCU this evening.  If we can agree on the functional responsibilities of the NES232, I might be able to send a few samples out to those who are interested in the next few days.  To make it as flexible as possible, it should only serve three functions...
<br />
<br />1. Serve as a NES-&gt;RS232 signal translator
<br />2. Provide buffer space so full commands (up to 34 bytes each) can be delivered and accomodate for speed mismatch
<br />3. Notify the NES and RS232 host of available buffer space prior to receiving transmissions
<br />
<br />Item 3 is what Tepples was referring to, I believe.  What if we did something like this...
<br />
<br />1. NES starts by sending code 0x09 (or whatever) to request the available outgoing buffer space
<br />2. The NES232 replies with code 0x0A followed by the total buffer space
<br />3. The NES sends full commands up to the total buffer length
<br />4. After the NES232 successfully sends out data upstream, it tells the NES the new amount of free buffer space
<br />(Repeat steps 3 and 4 for all further transmissions)
<br />
<br />The same process applies to the RS232 host.  This way, the NES232 can be upgraded to a device with a larger buffer, up to 255 chars in each direction.  That would allow for longer commands and faster loading of bulk data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Thu Mar 04, 2010 7:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I reworked the transceiving method.  It's now full duplex and executes in roughly half the time on the NES.  I've update the wiki and posted all the details.  Click on the "NES232 Adapter" link on the main page and scroll down.  You'll see the functional description for the device as well as the ASM code for the NES side.  Let me know what you think.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Mar 04, 2010 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's really cool and compact.  It's funny how bufferbyte can contain the sent and received byte.  Also, maybe that CLC could be optimized out by changing 'ADC bufferbyte' to 'ORA bufferbyte'.
<br />
<br />Also there was the idea of mounting one of these inside an NES.  The more I thought about it though, I realized it would prevent a toploader (and don't forget the SNES, with it's 100% compatible ports, even the SNES regs are at $004016/$004017).   Having it inside would allow the extra data lines to be used though, if there was any point.
<br />
<br />It might be useful to pass through a controller signal if it was external, you could put one of these on there maybe: <a href="http://www.parallax.com/Store/Components/Other/tabid/157/CategoryID/32/List/0/SortField/0/Level/a/ProductID/522/Default.aspx" class="postlink">http://www.parallax.com/Store/Components/Other/tabid/157/CategoryID/32/List/0/SortField/0/Level/a/ProductID/522/Default.aspx</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Thu Mar 04, 2010 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">memblers wrote:</div><div class="quotecontent"> Also, maybe that CLC could be optimized out by changing 'ADC bufferbyte' to 'ORA bufferbyte'. </div><br />I'm all for cutting out any unnecessary steps.  The initial ROL sets C which is added by ADC #0 and outputted to STA $4016.  If C is high, it will affect the ADC bufferbyte in step 7, thus the CLC.  If there's a better way to clear it, LMK and I'll update it.<br /><br /><div class="quotetitle">memblers wrote:</div><div class="quotecontent">and don't forget the SNES, with it's 100% compatible ports</div><br />Very true - this is one of the reasons I'm taking a modular approach with this whole thing.  If you wired the NES232 up to the SNES port, you could poll it the exact same way.  A custom SNES game using CPG could talk to the same Proxy App and game server as a NES game.<br /><br /><div class="quotetitle">memblers wrote:</div><div class="quotecontent">It might be useful to pass through a controller signal if it was external,</div>
<br />The NES232 would have to poll it then pass the data to the NES via the buffer.  But yeah, definitely possible.  Good idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Mar 04, 2010 5:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chykn wrote:</div><div class="quotecontent"><div class="quotetitle">memblers wrote:</div><div class="quotecontent"> Also, maybe that CLC could be optimized out by changing 'ADC bufferbyte' to 'ORA bufferbyte'. </div><br />I'm all for cutting out any unnecessary steps.  The initial ROL sets C which is added by ADC #0 and outputted to STA $4016.  If C is high, it will affect the ADC bufferbyte in step 7, thus the CLC.  If there's a better way to clear it, LMK and I'll update it.</div>
<br />He told you the better way. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Take out step 4 (CLC) and change step 7 "ADC bufferbyte" to "ORA bufferbyte".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Thu Mar 04, 2010 6:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">He told you the better way.</div>
<br />My bad - you're absolutely right.  Thanks for the correction guys.  I've updated the wiki.  Down to 7 instructions from 8.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Sat Mar 06, 2010 1:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just about wrapped up the initial hardware design tonight...
<br /><ul><li>Finally got the NES232 talking to the NES using the full duplex method.</li><li>The incoming buffer is working, up to 112 bytes can be queued.</li><li>The full duplex method added enough cycles that the NES transmits and receives a bit slower than the 115,200 bps serial link.  This means we do not need an outgoing buffer.  Each bit takes ~16us to transmit.  If my math is correct, that's around 62,500 bps.  If you're doing bulk reads, this CAN be increased to over 100,000 bps by eliminating the instructions necessary for transmitting.</li><li>NULL bytes from NES - the MCU was receiving 0x00 bytes and transmitting them even if the NES had no outgoing data.  Applied the same rules as the inbound, first byte must be the length descriptor.  Done.</li><li>Had to modify the method - replaced ROL with ASL due to unwanted bits coming back on the right and screwing up the following ORA statement.  Also had to add another step to pull the outgoing bit from Carry instead of the LSB.  Don't ask why I did that to begin with - seemed like a good idea at the time.   <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> </li></ul>I got to thinking about the congestion management.  Since the NES should be sending ackowledgements anyway, it can send "Received X bytes" upstream after it gets done receiving the commands for that data exchange session.  Then the host will know the space is free and proceed to send.<br /><br />So, I'm done with it for now.  Here's a recap of where we are....<br /><ul><li>NES232, based on an Atmel ATTiny2313 @ 11MHz</li><li>Talks to the PC via RS232 @ 115,200 bps</li><li>Talks to the NES via 2nd controller port @ ~62,500 bps</li><li>Uses a buffer for incoming commands</li><li>Sends outgoing data on the fly</li><li>Congestion management will be handled via NES ACK to the upstream host.</li></ul>
<br />Feedback would be greatly appreciated.  Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Sat Mar 06, 2010 8:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />how are you connecting it to your computer? IIRC a max232 is needed to put between the attiny and the serial port due to voltage diffs (or fl232rl for usb support)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Sat Mar 06, 2010 8:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">how are you connecting it to your computer?</div>
<br />The cans and a string didn't work - had high hopes for that, too.  I play around with WRT54G's &amp; OpenWRT, so I keep a MAX232 chip, DB9 connector and .1uf caps on my breadboard.  Jumpered that to the ATTiny2313 and hooked it up to COM1 on the laptop.  Good to go.
<br />
<br />It will actually easier to get it up and running on the WRT54G because you won't have to use the MAX232 chip.  You could go straight TTL from the ATTiny2313 to the second UART port on the WRT54G.  Or Buffalo, whatever your preference.  Then the WRT54G would be the IP proxy.  That would be pretty sweet since it wouldn't require a PC for operation and you could use it as a wireless client.  Cheaper than developing an embedded solution and much more readily available.
<br />
<br />You're right about the USB support.  That's the way most folks would want to go if they wanted to hook it to the PC.  I've never played with the FL232RL chips; will have to try that out sometime.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Sat Mar 06, 2010 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ooops, i meant ft, not fl sorry for that :S

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Mon Mar 08, 2010 4:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, here's the schematic.  The serial RX/TX lines would need to go to a TTL to RS232 converter or similar device unless you're hooking it up to another TTL device.  Just search "TTL RS232" on Ebay.  There are also TTL to USB devices available, but I haven't tested any out myself.  I imagine they'd work just fine.  For now, please contact me for the firmware.  Not quite ready to post publicly.  I want to make sure this behaves as expected before letting untested firmware go in the wild.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NES232 ASCII Schematic<br />Pete Brown, 3/6/2010<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ATTINY2313<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ___________<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 1&nbsp; &nbsp; 20 |--- Vcc +5v<br />Serial RX--------&gt;--| 2&nbsp; &nbsp; 19 |<br />Serial TX--------&lt;--| 3&nbsp; &nbsp; 18 |<br />XTAL--+-------------| 4&nbsp; &nbsp; 17 |<br />XTAL--|-+-----------| 5&nbsp; &nbsp; 16 |<br />&nbsp; &nbsp; &nbsp; | | CLOCK--&gt;--| 6&nbsp; &nbsp; 15 |<br />&nbsp; &nbsp; &nbsp; | | LATCH--&gt;--| 7&nbsp; &nbsp; 14 |<br />&nbsp; &nbsp; &nbsp; | |&nbsp; DATA--&lt;--| 8&nbsp; &nbsp; 13 |<br />&nbsp; &nbsp; &nbsp; | |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| 9&nbsp; &nbsp; 12 |<br />&nbsp; &nbsp; &nbsp; | |&nbsp; GND--+---| 10&nbsp; &nbsp;11 |<br />&nbsp; &nbsp; &nbsp; | |&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp;-----------<br />&nbsp; &nbsp; &nbsp; | +---&#41;|--+<br />&nbsp; &nbsp; &nbsp; +-----&#41;|--+<br /><br />* The two caps tying XTAL to GND are 22pf ceramic<br />* XTAL is 11MHz &#40;11.0592 is perfect, but 11 will be fine&#41; <br /></div>
<br />
<br />If you want to start developing with one of these and you don't have the facilities to build your own, let me know.  If there's enough interest I'll get enough to do 10 boards or so from DigiKey.  Will probably cost around $20 to build and ship.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>8</strong> of <strong>9</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>