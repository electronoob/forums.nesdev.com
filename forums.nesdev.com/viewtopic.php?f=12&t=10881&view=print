<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - S-SMP Control Register and Timer Reset</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">S-SMP Control Register and Timer Reset</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10881">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10881</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Sat Jan 11, 2014 8:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a question related to bits 0,1,2 of the $F1 control register in the S-SMP.<br /><br />There is some conflicting information on exactly what condition/action causes the timer registers to be reset. Anomie's <a href="http://www.romhacking.net/documents/197/" class="postlink">spc700.txt</a> states:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When transitioning from 0 to 1, the timer Stage 2 and 3 counters are both reset to 0.</div><br />However, nocash's <a href="http://nocash.emubase.de/fullsnes.htm" class="postlink">fullsnes.txt</a> states:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(0=Disable, set TnOUT=0 &amp; reload divider, 1=Enable)</div><br />So nocash is basically stating the exact opposite of what Anomie states (i.e. writing a 0 performs the reset of the timer register, while writing a 1 just enables the timer).<br /><br />In addition, the <a href="http://wiki.superfamicom.org/snes/show/SPC700+Reference" class="postlink">SPC700 Reference</a> states:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Writing to the control register will ALWAYS reset active timers.</div><br />So the SPC-700 reference seems to think that writing any value whatsoever to the $F1 control register will cause all of the timers to reset.<br /><br />Can someone please clarify which of the above is correct?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Jan 11, 2014 9:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This verifies Anomie's doc for the stage 3 counter (the one readable at T0OUT). Values in comment are what is logged when run on hardware.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">main:<br />&nbsp; &nbsp; ; begin_test delays so that T0OUT has incremented twice<br />&nbsp; &nbsp; call begin_test<br />&nbsp; &nbsp; mov a, T0OUT<br />&nbsp; &nbsp; call log_a ; 02<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; Writing $01 to CONTROL when it's already $01 doesn't clear timer<br />&nbsp; &nbsp; call begin_test<br />&nbsp; &nbsp; mov CONTROL, #$01<br />&nbsp; &nbsp; mov a, T0OUT<br />&nbsp; &nbsp; call log_a ; 02<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; Writing $00 to CONTROl when it was $01 doesn't clear timer<br />&nbsp; &nbsp; call begin_test<br />&nbsp; &nbsp; mov CONTROL, #$00<br />&nbsp; &nbsp; mov a, T0OUT<br />&nbsp; &nbsp; call log_a ; 02<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; Writing $00 to CONTROL stops timer, so we only get 02 rather than 04<br />&nbsp; &nbsp; call begin_test<br />&nbsp; &nbsp; mov CONTROL, #$00<br />&nbsp; &nbsp; call delay_256<br />&nbsp; &nbsp; mov a, T0OUT <br />&nbsp; &nbsp; call log_a ; 02<br /><br />&nbsp; &nbsp; ; Writing $01 to CONTROL when it was $00 clears T0OUT<br />&nbsp; &nbsp; call begin_test<br />&nbsp; &nbsp; mov CONTROL, #$00<br />&nbsp; &nbsp; call delay_256<br />&nbsp; &nbsp; ; T0OUT is still 02<br />&nbsp; &nbsp; mov CONTROL, #$01<br />&nbsp; &nbsp; mov a, T0OUT<br />&nbsp; &nbsp; call log_a ; 00<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; call print_log<br />&nbsp; &nbsp; ret<br /><br />begin_test:<br />&nbsp; &nbsp; mov CONTROL, #$01<br />&nbsp; &nbsp; mov T0TARGET, #1<br />&nbsp; &nbsp; call sync_timer0_coarse<br />&nbsp; &nbsp; call delay_256<br />&nbsp; &nbsp; ret<br /><br />sync_timer0_coarse:<br />&nbsp; &nbsp; mov a, T0OUT<br />:&nbsp; &nbsp;mov a, T0OUT<br />&nbsp; &nbsp; beq :-<br />&nbsp; &nbsp; ret<br /><br />delay_256:<br />&nbsp; &nbsp; call !delay_128<br />delay_128:<br />&nbsp; &nbsp; call !delay_64<br />delay_64:<br />&nbsp; &nbsp; call !delay_32<br />delay_32:<br />&nbsp; &nbsp; call !delay_16<br />delay_16:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 8 call<br />&nbsp; &nbsp; notc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; ret&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 5</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Jan 11, 2014 9:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And the other issue, when the divider is reset, makes no difference as far as I can see. If it's cleared on CONTROL.0 1-&gt;0, then you won't be able to see the effect until after you do 0-&gt;1 to start the timer again. And if it's cleared on 0-&gt;1, then you'll see it just as soon. Either way, this confirms that on one of those transitions it's reset. BTW, I've worked with Anomie in the past and found his documentation to be the most authoritative. You can't really gather all the various descriptions of behavior and expect them to agree, and if you treat a disagreement as a lack of any reliable information, you're setting yourself up for lots of unnecessary work.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">main:<br />&nbsp; &nbsp; ; begin_test delays so after 128 cycles T0OUT has incremented once<br />&nbsp; &nbsp; call begin_test<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; mov a, T0OUT<br />&nbsp; &nbsp; call log_a ; 01<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; Writing $00 to CONTROL stops increment of divider<br />&nbsp; &nbsp; call begin_test<br />&nbsp; &nbsp; mov CONTROL, #$00<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; mov a, T0OUT<br />&nbsp; &nbsp; call log_a ; 00<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; Writing $00 then $01 to CONTROL resets divider<br />&nbsp; &nbsp; call begin_test<br />&nbsp; &nbsp; mov CONTROL, #$00<br />&nbsp; &nbsp; mov CONTROL, #$01<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; mov a, T0OUT<br />&nbsp; &nbsp; call log_a ; 00<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; call print_log<br />&nbsp; &nbsp; ret<br /><br />begin_test:<br />&nbsp; &nbsp; mov CONTROL, #$01<br />&nbsp; &nbsp; mov T0TARGET, #8<br />&nbsp; &nbsp; call sync_timer0_coarse<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; call delay_128<br />&nbsp; &nbsp; ret<br /><br />sync_timer0_coarse:<br />&nbsp; &nbsp; mov a, T0OUT<br />:&nbsp; &nbsp;mov a, T0OUT<br />&nbsp; &nbsp; beq :-<br />&nbsp; &nbsp; ret<br /><br />delay_128:<br />&nbsp; &nbsp; call !delay_64<br />delay_64:<br />&nbsp; &nbsp; call !delay_32<br />delay_32:<br />&nbsp; &nbsp; call !delay_16<br />delay_16:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 8 call<br />&nbsp; &nbsp; notc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; ret&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 5</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Sun Jan 12, 2014 12:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks a bunch for the info Blargg. Let me implement the timers as best I can with this information and then I will compile the example code you have provided and make sure I get the same results.<br /><br />You don't already happen to have this example code as part of a test ROM would you?  I was thinking these timers were going to be very straightforward and simple...and while they aren't difficult per-se there is a lot of stuff going on that's really easy to screw up.  An &quot;SMP Timer Test ROM&quot; sure would be awesome....hint hint <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Jan 12, 2014 12:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Heh, yeah, I can just alter the above code slightly and it becomes a test ROM (I'm still working on the rewrite of the SPC-700 CPU tests BTW).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Jan 13, 2014 12:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">jwdonal wrote:</div><div class="quotecontent">I have a question related to bits 0,1,2 of the $F1 control register in the S-SMP.<br /><br />There is some conflicting information on exactly what condition/action causes the timer registers to be reset. Anomie's <a href="http://www.romhacking.net/documents/197/" class="postlink">spc700.txt</a> states:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When transitioning from 0 to 1, the timer Stage 2 and 3 counters are both reset to 0.</div><br />However, nocash's <a href="http://nocash.emubase.de/fullsnes.htm" class="postlink">fullsnes.txt</a> states:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(0=Disable, set TnOUT=0 &amp; reload divider, 1=Enable)</div><br />So nocash is basically stating the exact opposite of what Anomie states (i.e. writing a 0 performs the reset of the timer register, while writing a 1 just enables the timer).<br /></div><br />My info is a bit different, but not the exact opposite. As far as I remember, the timer is &quot;reset-to-0&quot; while and as long as the enable bit is 0. Ie. during enable=0, and also up to (as anomie said) until the enable 0-to-1 transition.<br />In practice, the reset-to-0 upon 0-to-1 transition might be the most relevant part for most games. Though a few games might also rely on whether the timers are reset-to-0 during enable=0. Would be glad if somebody could re-verify if the hardware does really work like so.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Mon Jan 13, 2014 2:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think we need to be precise on exactly what we mean when we say &quot;timer&quot;.  Does &quot;timer&quot; mean stage 2, stage 3, or both?<br /><br />Like Blargg said, when the divider (i.e. stage 2) gets reset is ultimately irrelevant, since there is no way to read the current divider value.  The critical piece of info is when does stage 3 (i.e. TnOUT) get reset - since that is what can be read.  Anomie/Blargg say stage 3 is not reset until a 0-&gt;1 transition of the enable bit. Nocash says it happens immediately when the enable bit gets set to 0.<br /><br />From Blargg's test code results above (and because Blargg always develops his tests on a real console) I expect that he is correct on this one.  If stage 3 was reset immediately when the enable bit is set to 0 then Blargg's test results would be different.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Jan 13, 2014 11:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am always testing things on real console, too. Although... in this case... I can't find any timer-reset test code in my snes test program. Hum, correcting myself: I am not always testing (everything) on real console : - )<br />If blargg's <em>&quot;; Writing $00 to CONTROL stops timer, so we only get 02 rather than 04&quot;</em> test passed on real hardware, then the info in anomie's doc should be correct, and my description was wrong.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Jan 13, 2014 6:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here are the above two as test ROM SPCs, with source. Let me know if they don't run with just an SMP, as I haven't tested them with a lack of DSP yet.<br /><br /><a href="http://blargg.8bitalley.com/temp/spc-timer-clear.zip" class="postlink">spc-timer-clear.zip</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Tue Jan 14, 2014 10:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey Blargg, just wanted to let you know that I'm working on getting these tests to pass. Think I might have some bugs. I will let you know how it goes once I get them working.  I super appreciate you making these tests. Thanks a ton.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Tue Jan 14, 2014 11:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />W00t! Both of these ROMs pass in my emu (which has no DSP or any other SNES chips implemented yet).  Interestingly, the mess emulator fails the reset-TnOUT test with error code 6 which is:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&quot;Writing $01 to CONTROL when it was $00 should clear T0OUT&quot;</div><br />I have to say I'm kind of shocked that the mess emulator fails this basic test. It seems to me that not clearing the TNOUT registers properly would make pretty much all of the SNES games sound completely wrong, no?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jan 15, 2014 1:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for reporting back that they work standalone. I doubt software relies much on this, since they normally don't want to be resetting the timer (reading TnOUT clears it without resetting the divider).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Wed Jan 15, 2014 10:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing I noticed that was really interesting about one of the tests (can't remember which one it was now...maybe even both), was that your code would read the T0OUT register in _precisely_ the same clock cycle that my code was going to increment the T0OUT register.<br /><br />The bug I had was that the clearing of the T0OUT register (due to your reading the register) was higher priority than the incrementing of the register (due to tick from Stage 2). So what would happen is your read would clear the T0OUT register over and over and get into an infinite loop since your code would never see the T0OUT register having anything other than 0 (because T0OUT kept getting cleared by your read since your read was higher priority than the increment).<br /><br />So I swapped the priority so that incrementing was higher priority and the test passes fine now. It just makes it so that your code has to perform one additional read attempt before seeing the new incremented value.<br /><br />But this did make me think about the real SNES and what it does if there was a read of the TnOUT register in the exact same cycle that it was supposed to be incremented by a tick from stage 2.  Since your test passes on a real SNES I would imagine that incrementing of the TnOUT registers must have the higher priority.<br /><br />Any ideas/thoughts/evidence regarding what happens with simultaneous read and stage-2-tick?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jan 15, 2014 12:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Reading T0OUT is an atomic get-then-clear operation. The increment is never lost.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Wed Jan 15, 2014 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: S-SMP Control Register and Timer Reset</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you say &quot;get-then-clear&quot; do you mean &quot;get-then-in-the-next-clock-cycle-clear&quot;?<br /><br />It's not possible in hardware to have a counter that you increment _and_ clear in the same cycle. It can only do one or the other in each clock cycle, not both. If it's the case that it just clears in the next clock cycle (which is what I think you mean) then that's really easy to do.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>