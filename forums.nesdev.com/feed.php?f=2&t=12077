<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=12077" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-11-28T08:12:35-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=12077</id>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2014-11-28T08:12:35-07:00</updated>
<published>2014-11-28T08:12:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12077&amp;p=137009#p137009</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12077&amp;p=137009#p137009"/>
<title type="html"><![CDATA[CMake toolchain file for cc65 (ca65)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12077&amp;p=137009#p137009"><![CDATA[
Here's something I came up with a couple of days ago. I doubt it will be wildly popular, but I might as well throw it out there. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />It's a toolchain file for cc65 (the C compiler and assembler) for CMake. CMake is a build system that can generate build instructions for other tools like Ninja and make (Makefiles). The benefit of using CMake over something like Makefiles is that the scripts are much easier to write, and much more cross-platform (CMake takes care of the platform differences, for the most part).<br /><br />This thing can also handle implicit dependencies (if file A includes file B, when B changes, A will get recompiled) as long as the target build system supports make-style dependency files (Ninja does).<br /><br />I recommend using <a href="http://martine.github.io/ninja/" class="postlink">Ninja</a> together with this.<br /><br />I did not test this very much, so there might be some problems, but it seems to work.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"># CMake toolchain file for cc65<br /># This is largely a result of experimentation, so some things may be done<br /># suboptimally/wrong. Some compilation options/CMake features may not work.<br /># Some generators will also not work (like MSVS). Ninja and Makefiles have<br /># been tested to work.<br /># What is supported: C, assembly, static libraries<br /><br />set( CMAKE_SYSTEM_NAME Generic )<br /><br />macro( __compilerCc65 lang )<br />    set( CMAKE_${lang}_COMPILER cl65 )<br />    set( CMAKE_${lang}_COMPILER_ID cc65 )<br /><br />    # We cannot run tests for the cc65 compiler, because of cross-compilation,<br />    # so force the compiler tests to passed.<br />    set( CMAKE_${lang}_COMPILER_ID_RUN TRUE )<br />    # Don't know if these are necessary.<br />    set( CMAKE_${lang}_COMPILER_ID_WORKS TRUE )<br />    set( CMAKE_${lang}_COMPILER_ID_FORCED TRUE )<br /><br />    set( CMAKE_DEPFILE_FLAGS_${lang} &quot;--create-dep &lt;DEPFILE&gt;&quot;)<br />    set( CMAKE_${lang}_VERBOSE_FLAG &quot;-v&quot; )<br />    set( CMAKE_${lang}_FLAGS_DEBUG_INIT &quot;-g&quot; )<br />endmacro()<br /><br />__compilerCc65( C )<br />__compilerCc65( ASM )<br /><br />set( CMAKE_ASM_SOURCE_FILE_EXTENSIONS s;S;asm )<br /><br /># \todo Not sure why CACHE is required here. Seems like something empties<br />#       this variable after this script has ran...<br />set( CMAKE_AR &quot;ar65&quot; CACHE PATH &quot;archive&quot; )<br /><br /># \note Need to delete the old file first because ar65 can only add files<br />#       into an archive (or remove named files, but we don't know the names).<br />set( CMAKE_C_CREATE_STATIC_LIBRARY<br />    &quot;&lt;CMAKE_COMMAND&gt; -E remove &lt;TARGET&gt; &quot;<br />    &quot;&lt;CMAKE_AR&gt; a &lt;TARGET&gt; &lt;LINK_FLAGS&gt; &lt;OBJECTS&gt;&quot;<br />)<br />set( CMAKE_ASM_CREATE_STATIC_LIBRARY ${CMAKE_C_CREATE_STATIC_LIBRARY} )<br /></div><br />An example CMakeLists.txt could be something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cmake_minimum_required( VERSION 3.0 )<br /><br />project( MyProject ASM )<br /><br />set( sources<br />    test.s<br />    something-else.s<br />)<br /><br />add_executable( MyExecutable ${sources} )<br /><br />set_target_properties( MyExecutable<br />    PROPERTIES<br />        OUTPUT_NAME blah.nes<br />        COMPILE_FLAGS &quot;-t none -v -g --cpu 6502x --asm-define NODEBUG&quot;<br />        LINK_FLAGS &quot;-t none -C ${CMAKE_CURRENT_SOURCE_DIR}/blah.cfg&quot;<br />)<br /></div><br />add_custom_command could be used to bring in asset processing commands and so on.<br /><br />And to use the toolchain the spell is something like (last part depends on where your build directory is):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=cc65-toolchain.cmake ..<br /></div><br /><br />EDIT: Modified the toolchain file slightly.<br /><br />EDIT: Seems like dependency handling doesn't work with the Makefile generator, for whatever reason. CMake is simply not adding the &quot;--create-dep&quot; switch to the compilation. It works with Ninja, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Fri Nov 28, 2014 8:12 am</p><hr />
]]></content>
</entry>
</feed>