<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Maximal arbitrary beamchasing? Code golf</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Maximal arbitrary beamchasing? Code golf</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=21&amp;t=14352">http://forums.nesdev.com/viewtopic.php?f=21&amp;t=14352</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri Jun 03, 2016 5:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&lt;Bushytail&gt;&nbsp; &nbsp;beam chasing refers more to the beam that makes scanlines on a CRT, and trying to make code for graphical effects fast enough to fit<br />&lt;Bushytail&gt;&nbsp; &nbsp;it comes up more on the 2600 for obvious reasons</div><br />This got me wondering just how many HBlank writes one can stuff into the NES. I choes to do this without WRAM, because it makes it actually possible to continuously run (as it takes a lot longer to rewrite the WRAM of an unrolled-loop, and picture-time is greater than Vblank, so…very much not having time in VBlank to rewrite all the HBlank code)<br /><br />So, the biggest way to do it is to have a 240-byte table for each address/data of write. Initially I was thinking only of PPU registers, not mapper registers…which requires more than one byte of rewritable address.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Maximum beamchasing...in RAM.<br />;Hblank is 28⅓, non is 86⅓ cycles<br />&nbsp; &nbsp; ldx #16 (end of vblank)<br />looptop: (8)<br />&nbsp; &nbsp; lda $write1addr,x ;256-byte tables of where we want each write<br />&nbsp; &nbsp; sta $wr1+2 (16)<br />&nbsp; &nbsp; lda $write2addr,x<br />&nbsp; &nbsp; sta $wr2+2 (24)<br />&nbsp; &nbsp; lda $write3addr,x<br />&nbsp; &nbsp; sta $wr3+2 (32)<br />&nbsp; &nbsp; lda $write4addr,x<br />&nbsp; &nbsp; sta $wr4+2 (40)<br />&nbsp; &nbsp; lda $write5addr,x<br />&nbsp; &nbsp; sta $wr5+2 (48)<br />&nbsp; &nbsp; lda $write6addr,x<br />&nbsp; &nbsp; sta $wr6+2 (56)<br />&nbsp; &nbsp; lda $write4,x;and what we want written<br />&nbsp; &nbsp; sta $re4+1 (64)<br />&nbsp; &nbsp; lda $write5,x<br />&nbsp; &nbsp; sta $re5+1 (72)<br />&nbsp; &nbsp; lda $write6,x<br />&nbsp; &nbsp; sta $re6+1 (80)<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda $write1,x (84)<br />&nbsp; &nbsp; ldy $write2,x (88)<br />&nbsp; &nbsp; sty $re2+1 (92)<br />&nbsp; &nbsp; ldy #write3,x (96)<br />&nbsp; &nbsp; stx $FF&nbsp; (100)<br />re2:ldx #00 ;overwritten<br />wr1:sta $20ZZ&nbsp; &nbsp;;addr overwritten, write cycle is when hblank begins (103+1)<br />wr2:stx $20ZZ&nbsp; &nbsp;;addr overwritten (5)<br />wr3:sty $20ZZ&nbsp; &nbsp;;addr overwritten (9)<br />re4:lda #00&nbsp; &nbsp; &nbsp;;value overwritten (11)<br />wr4:sta $20ZZ&nbsp; &nbsp;;addr overwritten (15)<br />re5:lda #00&nbsp; &nbsp; &nbsp;;value overwritten (17)<br />wr5:sta $20ZZ&nbsp; &nbsp;;addr overwritten (21)<br />re6:lda #00&nbsp; &nbsp; &nbsp;;value overwritten (23)<br />wr6:sta $20ZZ&nbsp; &nbsp;;addr overwritten (27) <br />&nbsp; &nbsp; ;…and we're out of hblank time. One cycle (and one-third) of leeway.<br />&nbsp; &nbsp; ldx $ff ;(3)nonblank times<br />&nbsp; &nbsp; inx ;(5)<br />&nbsp; &nbsp; bne looptop;(8)<br />;so, 102+28 if we're perfect, we have the cycle in hblank but not out to spare<br />;92+28 if we're executing out of ZP</div><br />Should probably unrollx3 at least just to make it easy to deal with the third-cycles.<br />Obviously if one is writing out of WRAM one could unroll it all the way and just use ld#imm to easily fit, but that requires WRAM. I want t osee if it can fit in ZP in such a way, because it makes it easy to &quot;bankswitch&quot; our arbitrary tables (rewrite the 12 values, relatively easy to fit in Vblank)<br /><br />You can get two more writes if you're doing the 2006/5/5/6 thing,but obviously you have to find some cycles to put them in. <br />Presently 91 bytes, and those 92+28 cycles (if ZP)...unrolling 3 times will drop some cycles, and make it easier to deal with the ⅔ cycle per line accruing.<br /><br />(pre-post edit: save a cycle by changing the &quot;save x&quot; store to point at the load-x and making the ldx #imm; also means not having to not save a ZP slot for that.)<br /><br />Of course, if we fix two of the writes to scroll registers, that will save the rewriting which-register-bytes…which is enough to drop it to fit a 3-unrolled into ZP, and also get it actually fitting under the cycle count, though sync cycles still need to be considered…<br /><br />edit: or fix two to &quot;disable render enable render&quot;, which makes for THREE ditched tables (2xaddr, 1xdata for the disable-render value)...but at cost of true-arbitrary writes.<br /><br />edit2: added leading explanation. It occurs tome that a CHR bankswitch might be a desired write as well, which would require making one of the writes have its hi-address rewritable. Also fixed the ldx, as there are only 240 scanlines to write. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><br /><br />edit3,4: In sum: &quot;[How] Can we fit six arbitrary Hblank (PPU register/CHR bank/VRAM) writes in every scanline every frame? If not, how much freedom needs sacrificing to fit them in?&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jun 03, 2016 5:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have no idea what you're trying to do. Care to write an introduction to your post to give it some context?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Fri Jun 03, 2016 7:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I feel like this post was written by some kind of automated nesdev post bot. It contains words that you would find in a typical post, but not in any order that makes any sense to me.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can we fit six arbitrary Hblank (PPU register/CHR bank/VRAM) writes in every scanline</div><br /><br />Edit...my rough math says Hblank is about 30 cycles...<br />I suppose, sta stx sty is about 12 cycles, lda sta 8 cycles, lda sta 8 cycles...5 writes, per Hblank with timed code.<br /><br />Even if you can time code for the entire screen, that gives you no rendering time for game logic, so is this for some kind of tech demo that changes a BG color every scanline?<br /><br />(Edited) Disch in another post says Hblank is &quot;28 cycles&quot; long.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darryl.revok</b> [ Fri Jun 03, 2016 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I feel like this post was written by some kind of automated nesdev post bot. It contains words that you would find in a typical post, but not in any order that makes any sense to me.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can we fit six arbitrary Hblank (PPU register/CHR bank/VRAM) writes in every scanline</div></div>LOL this is pretty funny. I want to try...<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does MMC5 allow horizontal VRAM updates on consecutive odd cycle sprite NMIs?</div><br /><br />I'm sorry, no offense intended and please split me if this is memeworthy but I found dougeff's post very humorous.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Jun 03, 2016 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What Myask said is true; there are 341 pixels, 256 during rendering and 85 during hblank, so there are 28⅓ instruction cycles during hblank.<br /><br />Except that whether we can use all 85 cycles during hblank depends on the nature of the raster effect. We might have as few as 62 pixels. (The light blue area on <a href="http://wiki.nesdev.com/w/images/d/d1/Ntsc_timing.png" class="postlink">Ulfalizer's timing diagram</a>; while the PPU is fetching patterns for sprites). Afterwards, we might collide with the tile fetches for the left-most two columns.<br /><br />Also, the the relative alignment of the CPU and PPU means that we'll rarely get all 28(or 20) cycles; we probably only actually have 27(or 19) even given precision to single cycles.<br /><br />Cycle-perfect timing means the first write can finish on the first cycle of hblank. That leads 26/18 cycles for any subsequent loads and stores.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darryl.revok</b> [ Fri Jun 03, 2016 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awww you edited it. I suppose I'll have to edit mine too. Anyway, yeah I see you figured out the context of the sentence.<br /><br />Here's a thread from when I first started playing with them. <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13360">viewtopic.php?f=2&amp;t=13360</a><!-- l --> The discussion convinced me to limit to techniques not requiring disabling rendering during a scanline, for gameplay at least. There are specific situations where it could be useful, like a scroll bar, but for the most part, it doesn't seem feasible in gameplay, therefore a generic solution to do the technique at the best extent possible for the hardware isn't particularly useful, as it would have to be tailored to when and where something like a palette change could happen.<br /><br />If you could somehow figure out a way to fit one palette color change in hBlank, that could be big, but that alone would take some magic. People keep figuring out new things all of the time though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Fri Jun 03, 2016 7:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry, you guys are too quick for me. I restored the original, so the replies make sense.<br /><br />I have a bad habit of posting before I've fully thought through the comment, and then editing my comment after it's been posted.<br /><br />Another edit...If the first write to PPU is the first half of a PPU address, then &quot;yes&quot; you can fit 6 in a Hblank, the first occurring just prior to it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Jun 03, 2016 7:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent">&quot;[How] Can we fit six arbitrary Hblank (PPU register/CHR bank/VRAM) writes in every scanline every frame? If not, how much freedom needs sacrificing to fit them in?&quot;<br /></div>Look at <a href="http://forums.nesdev.com/viewtopic.php?p=139925#p139925" class="postlink">my annotated Indiana Jones title screen</a>. 7 writes on three scanlines in a row, five clusters each vsync. (Yes, the first write  takes advantage of the first write to $2006 being buffered)<br /><br />... Oh, man, I don't know/keep forgetting the offset between PPU cycles and when pixel N shows up on-screen. That makes this annoying to say anything useful.<br /><br />The last write (enable) is timed such that it has just a little clearance (pixel 311 at latest) before the first real nametable fetch restarts (cycle 320) ... and they've also got the &quot;conceal leftmost 8 columns&quot; bit on, whatever that means.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Jun 03, 2016 8:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Check out this attachment if you want to see some old and ugly code where I tried to pull something like this off.  It does no less than 8 PPU register writes every scanline.  It tries to shut the screen off early on every line, so the usable horizontal size is actually smaller than the NES screen.  It was partly successful, it worked some of the time.  I didn't understand why at the time, but I think it must have been from the differing CPU/PPU alignments on power-up.  IIRC, moving it back 1 cycle or forward 1 cycle hosed everything up, so it was a fun little experiment that almost worked.  I'm sure it could have been done better.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=5949">fautest.zip</a> [19.35 KiB]
			</span><br />
			<span class="gensmall">Downloaded 95 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darryl.revok</b> [ Mon Jun 06, 2016 6:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Maximal arbitrary beamchasing? Code golf</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just a random thought on this matter.<br /><br />If you really want to cram as many operations as possible in a scanline, I think you're going to have to write machine code into RAM, and load absolute values.<br /><br />I'd be interested in seeing some developments in the raster arena that fit into game design. Doing fancy things in this department often requires some significant trade-off of cycles, inflexibility, or difficulty in implementation.<br /><br />Perhaps a technique to safely cram updates after an already timed scroll split could be useful. Doing something like a status bar or some minimal parallax isn't often too hard. I started thinking about this last night and considered doing the same as I described, with absolute values in RAM, so that I could assign a unique palette to my top status bar.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>