<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How do I do in CA65 things I do in ASM6?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How do I do in CA65 things I do in ASM6?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>5</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Nov 09, 2015 8:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just put all my RAM allocations in a single file, and import everything from there. Everything includes this file. When I assemble the file, I define RAM_EXPORT which causes all the allocations and exports to be made, but elsewhere it is included and just creates the necessary imports.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro RESZP label, size<br />&nbsp; &nbsp;.ifdef RAM_EXPORT<br />&nbsp; &nbsp;&nbsp; &nbsp;label: .res size<br />&nbsp; &nbsp;&nbsp; &nbsp;.exportzp label<br />&nbsp; &nbsp;.else<br />&nbsp; &nbsp;&nbsp; &nbsp;.importzp label<br />&nbsp; &nbsp;.endif<br />.endmacro<br /><br />.macro RES label, size<br />&nbsp; &nbsp;.ifdef RAM_EXPORT<br />&nbsp; &nbsp;&nbsp; &nbsp;label: .res size<br />&nbsp; &nbsp;&nbsp; &nbsp;.export label<br />&nbsp; &nbsp;.else<br />&nbsp; &nbsp;&nbsp; &nbsp;.import label<br />&nbsp; &nbsp;.endif<br />.endmacro<br /><br />.segment &quot;ZEROPAGE&quot;<br /><br />RESZP&nbsp; i,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1<br />RESZP&nbsp; j,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1<br />RESZP&nbsp; k,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1<br /><br />.segment &quot;OAM&quot;<br />RES&nbsp; &nbsp; oam,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;256<br /><br />.segment &quot;RAM&quot;<br />RES&nbsp; &nbsp; collision,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;256<br />RES&nbsp; &nbsp; dog_data0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;16<br />RES&nbsp; &nbsp; dog_data1,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;16<br />RES&nbsp; &nbsp; dog_data2,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;16</div><br /><br />If I am using temporary variables in functions, and I wanted a &quot;helpful&quot; name for them, I'd just alias them there:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc my_func<br />param_a = i<br />param_b = j<br />param_c = k<br />&nbsp; &nbsp;lda param_a<br />&nbsp; &nbsp;eor param_b<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc param_c<br />&nbsp; &nbsp;rts<br />.endproc</div><br /><br />Your problem seems to stem specifically from wanting to use aliased zeropage variables before the definition of the function. I think you I'd just do a &quot;forward declaration&quot; for that variable if it ever came up, but really it hasn't for me. (Forward declarations are a common necessity in C/C++, so I'm used to doing that already.) The stuff I tend to alias is always in BSS, and I'm used to using the common temporaries for ZP, they're all named like i, j, k, l, etc. and usually I document which ones a function uses or which ones it doesn't because there's a lot of overlap-- so I'd rather know a common name for them than hide it from myself with an alias.<br /><br />The BSS stuff that I do alias is usually to do with different types of object, all of which use the same memory areas to store their state, but each of them has different data needs, so I alias the various bytes to document their usage. A struct might have done the job well, if I wasn't using striped arrays. At any rate, not really an issue because it's not on the zeropage, so it's not subject to the one-pass problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Nov 10, 2015 5:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I also never had the problem because of the include/module architecture I've been using.<br /><br />You can force zeropage addressing with .lobyte or &quot;&lt;&quot;, but if you were ever to move the variable outside zeropage, the hibyte would silently get truncated out. There's also a bug in the current version that gives a &quot;suspicious address expression&quot; warning when you use &quot;z:&lt;foo&quot;: <!-- m --><a class="postlink" href="https://github.com/cc65/cc65/issues/194">https://github.com/cc65/cc65/issues/194</a><!-- m --><br /><br />Actually, come to think of it, in this case you should be able to force zeropage addressing with &quot;z:&quot;, and also get an error if it's not a zeropage address:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda z:foo ; OK<br />foo = $55<br />lda z:bar ; error<br />bar = $123<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Nov 10, 2015 9:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, good to know there's a way to force ZP addressing. Since I only need that for accessing a subroutine's local variables from outside that subroutine, which is a very particular case, I might just do that.<br /><br />Anyway, I just thought of another way to implement overlapping variables. The idea is to use a huge dummy segment as a counter, defining dummy labels there so you can calculate the offset from the beginning and then add the offset to the base label in the actual segment that's used for memory. First, you need to reserve the bytes in the actual memory segment:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;: zeropage<br />Scratchpad: .res 32 ;reserve 32 bytes for scratchpad variables</div><br />Then you need a couple of macros:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro StartScratchpadPage<br />&nbsp; &nbsp;.segment &quot;SCRATCHPAD&quot;: zeropage ;switch to the dummy segment, which is way bigger than 32 bytes<br />&nbsp; &nbsp;.align $20 ;move on to the next &quot;page&quot;<br />&nbsp; &nbsp;;(could optionally add padding here so variables begin after another block of variables)<br />.endmacro<br /><br />.macro DefineScratchpadVariable Name, Size<br />&nbsp; &nbsp;.local Dummy<br />&nbsp; &nbsp;.segment &quot;SCRATCHPAD&quot;: zeropage<br />&nbsp; &nbsp;Dummy: .res Size<br />&nbsp; &nbsp;.ident(.string(Name)) = Scratchpad + (Dummy &amp; $1f) ;ignore the higher bits of the offset when adding to the base address<br />.endmacro</div><br />Now you can start defining variables:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">StartScratchpadPage<br />DefineScratchpadVariable foo, 2<br />DefineScratchpadVariable bar, 2<br /><br />StartScratchpadPage<br />DefineScratchpadVariable baz, 2<br />DefineScratchpadVariable qux, 2</div><br />Now both foo and baz point to $00, while both bar and qux point to $02.<br /><br />Again, this feels a little hacky to me, but if adding offsets manually is acceptable, I don't see why calculating the offsets automatically before adding wouldn't be OK.<br /><br />The biggest advantage over using structs is that you don't need anything fancy to use these variables, they're just like regular labels, as far as the assembler is concerned.<br /><br />I haven't worked out the details yet, but I'm pretty sure this solution can also be applied to temporary variables in general, meaning I could have as many temporary modules as necessary without having to create new segments for each of them. They'd all use the same 8 dummy segments to calculate the offsets, and add the offsets to labels in the actual memory pages.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 11, 2015 9:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, I believe these are the final macros for creating scratchpad variables (please don't mind my long macro names):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Starts a new block of scratchpad variables.<br />.macro Assembler_StartScratchpadVariables Offset<br />&nbsp; &nbsp;.pushseg ;save the current segment<br />&nbsp; &nbsp;.segment &quot;SCRATCHPAD_RAM_BLOCKS&quot; ;switch to a large dummy segment<br />&nbsp; &nbsp;.align $20 ;move on to the next block<br />&nbsp; &nbsp;: ;mark the start with a label<br />&nbsp; &nbsp;.ifnblank Offset<br />&nbsp; &nbsp;&nbsp; &nbsp;.res Offset ;skip the requested amount of bytes<br />&nbsp; &nbsp;.endif<br />.endmacro</div><br />When calling this macro you can provide an offset, which is the number of bytes to skip before starting the new variables. This offset must be a constant number, which can be written manually or automatically generated from a previous scratchpad declaration.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Declares a scratchpad variable in the current block.<br />.macro Assembler_DeclareScratchpadVariable VariableName, VariableSize<br />&nbsp; &nbsp;.ident(.string(VariableName)) = Assembler_Scratchpad + &lt;(* - :-) ;create the address by adding the base address to the offset from the start of the block<br />&nbsp; &nbsp;.res VariableSize ;advance the amount of bytes used by the variable<br />.endmacro</div><br />&quot;Assembler_Scratchpad&quot; is a label in regular zero page, where 32 bytes are reserved.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Ends the current block of scratchpad variables.<br />.macro Assembler_EndScratchpadVariables Offset<br />&nbsp; &nbsp;.ifnblank Offset<br />&nbsp; &nbsp;&nbsp; &nbsp;.ident(.string(Offset)) = &lt;(* - :-) ;save the current offset in the specified symbol<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.popseg ;restore the previous segment<br />.endmacro</div><br />When ending the declaration you can optionally save the current offset in a symbol, which you can use in a later declaration to have that block placed after this one.<br /><br />Here's how the macros are used:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Assembler_StartScratchpadVariables<br />Assembler_DeclareScratchpadVariable Scratch0, 2<br />Assembler_DeclareScratchpadVariable Scratch1, 2<br />Assembler_EndScratchpadVariables<br /><br />Assembler_StartScratchpadVariables<br />Assembler_DeclareScratchpadVariable Scratch2, 3<br />Assembler_DeclareScratchpadVariable Scratch3, 1<br />Assembler_DeclareScratchpadVariable Scratch4, 2<br />Assembler_EndScratchpadVariables ScratchBlock0Size<br /><br />Assembler_StartScratchpadVariables ScratchBlock0Size<br />Assembler_DeclareScratchpadVariable Scratch5, 2<br />Assembler_DeclareScratchpadVariable Scratch6, 1<br />Assembler_EndScratchpadVariables</div><br />The final addresses will be:<br /><br />Scratch0: $00<br />Scratch1: $02<br />Scratch2: $00<br />Scratch3: $03<br />Scratch4: $04<br />Scratch5: $06<br />Scratch6: $08<br /><br />You have to admit, this is a pretty good alternative to manually typing offsets, and you end up with the exact same kinds of labels, so you don't even need any special tricks for using these variables once they're declared.<br /><br />I'm now working on a similar set of macros to deal with the reusable general RAM areas.<br /><br />EDIT: Now that I think of it, the .align is probably unnecessary, since the offsets are calculated with subtractions. If that's the case, I might even be able to use the same dummy segment for scratchpad variables and for general RAM, since it's basically a space I can fill linearly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 11, 2015 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's what I believe to be the final scratchpad RAM macros, in case anyone is interested:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Starts a new block of scratchpad variables.<br />.macro Assembler_StartScratchpadVariables Offset<br />&nbsp; &nbsp;.pushseg<br />&nbsp; &nbsp;.segment &quot;DUMMY&quot;<br />&nbsp; &nbsp;:<br />&nbsp; &nbsp;.ifnblank Offset<br />&nbsp; &nbsp;&nbsp; &nbsp;.res Offset<br />&nbsp; &nbsp;.endif<br />.endmacro</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Declares a scratchpad variable in the current block.<br />.macro Assembler_DeclareScratchpadVariable VariableName, VariableSize<br />&nbsp; &nbsp;.local Variable<br />&nbsp; &nbsp;Variable: .res VariableSize<br />&nbsp; &nbsp;.ident(.string(VariableName)) = Assembler_Scratchpad + (Variable - :-)<br />&nbsp; &nbsp;.assert .ident(.string(VariableName)) + VariableSize &lt;= 32, ldwarning, &quot;Scratchpad RAM overflow.&quot;<br />.endmacro</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Ends the current block of scratchpad variables.<br />.macro Assembler_EndScratchpadVariables Offset<br />&nbsp; &nbsp;.ifnblank Offset<br />&nbsp; &nbsp;&nbsp; &nbsp;.ident(.string(Offset)) = &lt;(* - :-)<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.popseg<br />.endmacro</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Nov 11, 2015 1:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, once you get over the learning curve for ca65's advanced features, it becomes pretty apparenty just how powerful it is. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />Movax12 took a crack at making a &quot;high level assembly&quot; language out of macros for ca65: <a href="http://forums.nesdev.com/viewtopic.php?t=9272" class="postlink">http://forums.nesdev.com/viewtopic.php?t=9272</a> / <a href="http://www.romhacking.net/documents/635/" class="postlink">http://www.romhacking.net/documents/635/</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 11, 2015 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Yeah, once you get over the learning curve for ca65's advanced features, it becomes pretty apparenty just how powerful it is. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /></div><br />Indeed. I'm still struggling a bit, but the time I spent working on these macros was essential for me to understand the basics. I won't lie though, I can't wait to finish these support macros so I can get back to coding 6502 assembly!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Movax12 took a crack at making a &quot;high level assembly&quot; language out of macros for ca65: <a href="http://forums.nesdev.com/viewtopic.php?t=9272" class="postlink">http://forums.nesdev.com/viewtopic.php?t=9272</a> / <a href="http://www.romhacking.net/documents/635/" class="postlink">http://www.romhacking.net/documents/635/</a></div><br />I vaguely remember that, but since I didn't use ca65 at the time, I didn't pay much attention. Only now I'm catching up with the crazy stuff people have used this assembler for, like tepples reimplementing 6502 or blargg implementing Z80.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Nov 11, 2015 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some documentation for the  &quot;highlevel macros&quot; <!-- m --><a class="postlink" href="https://www.assembla.com/spaces/ca65hl/wiki">https://www.assembla.com/spaces/ca65hl/wiki</a><!-- m --><br /><br />As far as reserving RAM, you can use .struct with macros to define your variables yourself, as constants at assemble time. This is not the intended use, but I do it. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">resZP baz .word<br /><br />; or, multiple declarations at once<br /><br />resZP {&nbsp; &nbsp;/<br />foo .byte,&nbsp; &nbsp; /<br />bar .byte 4&nbsp; &nbsp;/<br />}<br /></div><br /><br />Same thing for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">resBSS</tt>.<br /><br />The downside of keeping track of RAM at assemble is that it won't work for multiple modules. So, at the end of the file I (hackily) output the current RAM usage to a file named for the module(s) that will be called from that file. The module loads its RAM offsets based on that file. That way, exclusive sections/states of code, that will never run at the same time, can use the same memory.<br /><br />Hope that makes sense. I've been thinking about a way to make the assembler do this natively.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 12, 2015 9:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">Hope that makes sense.</div><br />Actually... I'm pretty confused! I couldn't find anything about resZP or resBSS, not in the documentation you liked to nor in the SMB High Level Disassembly files... What am I missing?<br /><br />Random ca65 question time:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro IncludeHidden FilePath<br />&nbsp; &nbsp;.scope<br />&nbsp; &nbsp;&nbsp; &nbsp;.include FilePath<br />&nbsp; &nbsp;.endscope<br />.endmacro</div><br />Why doesn't this work?<br /><br />Scoping an include normally works as expected (all identifiers are hidden), but not inside a macro, and I can't for the life of me understand why.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Nov 12, 2015 9:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ca65 macros are really strange. They're not a text-replacement macro like with C, they get turned into some sort of tokenized equivalent and ends up doing the substitution at some weird intermediate stage with a lot of funny rules. It's kind of unfortunate; I think there's equal probability that it's just a bug, or it was just somehow really hard to do scope + include inside a macro because of the internal implementation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 12, 2015 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see... so the scope is probably being opened and closed before the include itself is executed, and it affects only identifiers created inside the macro itself (none, in this case)... bummer. Simple text-replacement would've been way more intuitive.<br /><br />This would've helped me make my main file look cleaner, but now I'll have to .scope the shit out of it. <img src="./images/smilies/icon_cry.gif" alt=":cry:" title="Crying or Very sad" /><br /><br /><s>I guess I could maybe cheat and have this macro include files containing &quot;.scope&quot; and &quot;.endscope&quot; instead of using the actual commands in the macro, but that would be such a nasty thing to do... if it even works!</s> EDIT: It doesn't work. I'm out of ideas.<br /><br />EDIT: One more idea - I can create scoped versions of the files I need to scope, which contain nothing but the scope and an include of the original file. Still pretty crappy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Fri Nov 13, 2015 4:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">Hope that makes sense.</div><br />Actually... I'm pretty confused! I couldn't find anything about resZP or resBSS, not in the documentation you liked to nor in the SMB High Level Disassembly files... What am I missing?<br /></div><br /><br />These are separate macros just used as an example. They use .struct and track RAM usage. I was mostly trying to make the point that you can keep track of RAM yourself, but only if you have a single module. <br />When you use .struct you are creating constants starting at 0, .res will just mark the identifier with its address size, the linker assigns the actual address. It would be nice if there was a way to manage RAM yourself across multiple modules without having to get too crazy with linker configurations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Nov 13, 2015 5:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The .scope/.include thing seems like a bug to me, assuming that by &quot;doesn't work&quot; you meant that it executes but the identifiers appear in global scope.<br /><br />There's an issue tracker over at <!-- m --><a class="postlink" href="https://github.com/cc65/cc65/issues">https://github.com/cc65/cc65/issues</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Fri Nov 13, 2015 5:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I see... so the scope is probably being opened and closed before the include itself is executed</div><br /><br />I think this is basically what is happening.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 13, 2015 5:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">The .scope/.include thing seems like a bug to me, assuming that by &quot;doesn't work&quot; you meant that it executes but the identifiers appear in global scope.</div><br />Yes, that's what happens.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's an issue tracker over at <!-- m --><a class="postlink" href="https://github.com/cc65/cc65/issues">https://github.com/cc65/cc65/issues</a><!-- m --></div><br />I'm not really sure about how these things work, since I've never filed but reports before (I don't even have a GitHub account). Does anyone here feel like reporting this?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>5</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>