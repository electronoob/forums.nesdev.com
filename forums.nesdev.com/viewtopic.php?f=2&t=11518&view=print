<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sending data to NES through controller port</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sending data to NES through controller port</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11518">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11518</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nestendo</b> [ Sun Aug 10, 2014 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey guys<br /><br />Just wondering what you think of this. I haven't been able to find anything similar so let me know if someone has tried this before!<br /><br />I've rigged up an arduino to send data to my NES through the controller port. So far I'm able to able to:<br /><br />- send text from computer and have it display on screen like a text console<br />- send bytes representing frequencies to play simple melodies<br />- drag&amp;drop an image into a program to make nes-friendly tiles then send them to the NES, overwriting the pattern table (CHR RAM), and then writing to the nametable to show the tiles on the screen as they were displayed in the computer program (*not perfect)<br /><br /><br /><strong>How it works:</strong><br /><br />I soldered a little port in the bottom of an nes controller with 1 wire for each button, plus 1 ground (9 pins) so that if you connect a wire from one of the 8 button wires to the 9th (ground), it is equivalent to what happens when you press a button.<br /><br />I connected the controller to an arduino using darlington transistors which work sort of like relays so that when I change the state of a pin on the arduino I can open and close a circuit. You can't just hook the buttons up to an arduino output pin directly, you only want to <em>allow electricity to go through</em> (button pressed) or not (button not pressed) rather than <em>sending electricity</em> to the controller from the arduino. You want it so that you can tell the arduino to set an output pin to 1 (electricity going out the pin) and that is the signal for the darlington transistor to close the gap as if you had pressed a button. The darlington transistors were pretty cheap and easy to order.<br /><br /> I open and close a circuit for each button in the controller. Because there are 8 buttons which can be in a state of 0 (not pressed) and 1 (pressed), I can take an 8-bit value (0 to 255) and break it down into 8 bits and then &quot;press&quot; the controller buttons accordingly. The wiring does not interfere with pressing buttons on the actual controller - if the arduino is not manipulating the state of the buttons, the extra wires stay open, so the controller can be used normally when the arduino is not plugged in to it.<br /><br />In the case of the text console, I have an nes program where the background tileset contains all the basic ASCII characters. Their index in the pattern table is their ascii code.<br /><br />So say I have a tile at position 65 in the pattern table that looks like the letter A, and 65 is the ascii code for A. I send an &quot;A&quot; (65) to the arduino from a computer, it turns the 65 into 01000001. If you don't know how binary works you could say that each bit in that sequence is &quot;worth&quot; a certain amount. The amount each bit is worth goes in this order: 128,64,16,8,4,2,1. So we have one bit worth 64 and one bit worth 1 in the example of the letter A (65). <br /><br />The button order is A, B, Select, Start, Up, Down, Left, Right. <br />So in this case the arduino will press/not press the buttons as follows:<br /><br />A = not pressed (128)<br />B = PRESSED (64)<br />Select = not pressed (32)<br />Start = not pressed (16)<br />Up = not pressed (8)<br />Down = not pressed (4)<br />Left = not pressed (2)<br />Right = PRESSED (1)<br />....... and 64+1 = 65 = A<br /><br />On the nes I have a program that reads the state of all the buttons and recreates the byte. In the case above, it would start out with a value of 0. Since B is pressed it would add 64, and since Right is pressed it would add 1. So it would end up with the value 65. It puts this value in the nametable and since position 65 in the pattern table contains a pattern that looks like the letter A, the letter A gets displayed on screen!<br /><br /><br /><strong>Parts</strong><br /><br />Arduino + 8 darlington transistors + 8 resistors + wires + soldering 8 points in controller<br />python program to communicate with arduino. python program sends text, music, or chr tile data.<br />processing (.org) program for drag&amp;drop conversion of image to nes-friendly format, creates tile data that python script can send to arduino<br />nes program to interpret controller presses as bytes (on flash cart)<br /><br /><br /><strong>Problems</strong><br /><br />- A few bytes are reserved for control codes so when you send new CHR data for displaying images, there are certain values you can't send because they're reserved.<br /><br />- The arduino and NES are not exactly in sync so sometimes the nes gets the wrong value if the arduino was in the middle of switching to a new byte when the NES read the state of the buttons. Probably about 1 out of every 300 bytes comes out wrong but I'm hoping to add a couple more wires so that the arduino can tell when the NES strobes the controller and switch to the next value perfectly between reads.<br /><br />- This is the second thing I've ever tried to program on the NES and the first didn't come out too good. I could work around the control code problem with some better code but I'm completely new to 6502 asm and the nes.<br /><br />- Trying to think of a way to send data out of the nes to the arduino for two-way communication<br /><br /><br /><strong>The Rest</strong><br /><br />Let me know if you've seen/done something like this before, I'd love some tips. I really don't know if this will even interest anyone. I'll post some pictures/videos/code if it does.<br /><br />If you're familiar with the arduino, you can solder the wires in the controller, and you can pick up some darlington transistors you could probably have this up and running in about an hour. I'm not sure what you could use it for but if it was a bit more solid you could send pretty much anything you want from a computer to an NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Aug 10, 2014 7:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Does your microcontroller have an SPI slave port? The NES controller protocol is really just a variant of SPI. The console can send bits by putting a voltage on the strobe wire (STA $4016) and sending clock pulses to one of the devices (LDA $4017). The Super NES Mouse, for example, uses this to send commands to change the sensitivity.<br /><br />What tool are you using to convert graphics to NES format?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nestendo</b> [ Sun Aug 10, 2014 8:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmm I think the arduino can work with SPI though I haven't done anything with it before. I'll have to look into that.<br /><br />The tool I'm using is just something I wrote. It doesn't use any standard formats it just generates data that I can dump directly into the pattern table. Saves it in a text file for the python program to read and send it to the arduino, which sends it to the nes.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<a href="./download/file.php?id=1853&amp;mode=view"><img src="./download/file.php?id=1853&amp;t=1" alt="processing_nes.jpg" /></a><br />
			<span class="gensmall">processing_nes.jpg [ 278.38 KiB | Viewed 477 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Aug 10, 2014 9:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi kids! Do you like Python?<br />I made a <a href="http://forums.nesdev.com/viewtopic.php?p=100523#p100523" class="postlink">PNG to NES converter</a> so you can get your draw on.<br />Wanna copy me and be a pixel artist?<br />Try your hardest to make the NES show all this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Aug 10, 2014 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've not made an interface exactly like that, but others, and myself, have built communication adapters using RS232 (w/ MAX232/MAX202) and USB (PL2303 or FT232) through the controller port.  I've built a batch of these recently that will be used for an upcoming project.  It's just bog-standard, old-as-the-hills RS232, and common USB adapters work in a compatible way by creating a &quot;virtual COM port&quot;.  With that interface, you only need 1 input and 1 output.  The input to the NES is usually D0 (though D3,D4 are available if you have the right cable), and output from the NES the only option is OUT0 (AKA 'strobe').<br /><br />So, to receive data you would read the input bit at D0 of $4017, if you use the 2nd port.  And to write data, write to D0 of $4016 (doesn't matter which port you're using).<br /><br />There are quite a bit of other threads on the forum, here's one:<br /><a href="http://forums.nesdev.com/viewtopic.php?t=7032&amp;view=next" class="postlink">http://forums.nesdev.com/viewtopic.php?t=7032&amp;view=next</a><br /><br />I remember another project that was kinda similar, in that it was synchronous:<br /><a href="http://nesdev.com/lptnes_v130.zip" class="postlink">http://nesdev.com/lptnes_v130.zip</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- A few bytes are reserved for control codes so when you send new CHR data for displaying images, there are certain values you can't send because they're reserved.</div><br />Yes, a common problem.  The usual solution is to use &quot;escape codes&quot;, say $FE is the escape code.  To send command 0, send $FE $00 and so on.  Send $FE $FE to send just plain old byte $FE.  It's much like run-length-encoding, which has a lot of examples on NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nestendo</b> [ Sun Aug 10, 2014 11:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah so this has been done before. Sounds like a much better way of doing it too.<br /><br />What kind of speed can you get with your method?<br /><br />I've read through the link you posted, thanks. I'm not sure I could build such a thing from that information though.<br /><br />Would you happen to have instructions on how to build the cable you're using?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Aug 10, 2014 11:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's also this, which I built a cable for and it works great.  (The Youtube video is missing however, sorry about that -- I merged my old Youtube and Gmail accounts and as such it didn't move a lot of my videos, so I had to reupload ones I had archived, which were only a few):<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7520">viewtopic.php?f=9&amp;t=7520</a><!-- l --><br /><br />I'm sure thefox will chime in here if/when he sees your thread.  :-)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 11, 2014 1:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Blargg has done some awesome work when it comes to sending data through the controller port. The software koitsu linked is my software called pc2nes which takes an iNES ROM and transfers it over the controller port to PowerPak. pc2nes uses blargg's nrpc library. nrpc is a C/C++ library that takes a set of commands as function calls (such as write to CPU memory, write to PPU memory, etc) and produces a file that can be transferred to a NES that is running a bootloader software. Bootloader is simply a tiny software that waits for a transfer from outside, then executes the transferred block. nrpc was never officially released though.<br /><br />Upcoming is also nrpc 2, which adds synchronous serial so it can get transfer speeds upto 25 KB/sec. The asynchronous serial was limited to about 10 KB/sec. I have been testing nrpc 2 a little bit earlier this year.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Mon Aug 11, 2014 8:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The darlington transistors are not really necessary. It is easier to just set the pin to output a logic 0 and then change its mode to OUTPUT to pull the line low, and change it to INPUT to put it in a high-z state (no button pressed). However, the transistors make the design a little easier to adapt.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nestendo</b> [ Mon Aug 11, 2014 11:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, interesting.<br /><br />I'm not a pro when it comes to the electronics side of things. A friend picked up some darlington transistors and when I saw how they work I thought of this project. Didn't realize it could be done without them or some form of relay. Though I see now there's definitely better ways to do it with ftdi/rs232/spi/whatnot. Must have been using the wrong search terms when I set out to find if anybody had done this before. A few of you, at least, have this all figured out.<br /><br />I'm still not sure what the concensus is on the best way to do it, though.<br /><br />Is there any thread that sort of sums up the various approaches and singles one out as the winner? Or is there a most-popular method that is the best supported by all the tools people have made? Seems like all the information on this is scattered between many threads.<br /><br />I'm still reading through the threads and I'm at work at the moment so maybe there's a nice summary I haven't run into yet. I've already got an FTDI cable and a RS232-USB cable so hopefully when I get home I can get to the bottom of this.<br /><br />Thanks for all the replies, by the way!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Aug 11, 2014 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I believe Blargg's bootloader is the best solution for compatibility:<br /><a href="http://slack.net/~ant/old/nes-code/bootloader/" class="postlink">http://slack.net/~ant/old/nes-code/bootloader/</a><br /><a href="http://slack.net/~ant/old/nes-code/serial/spec.html" class="postlink">http://slack.net/~ant/old/nes-code/serial/spec.html</a><br /><a href="http://slack.net/~ant/old/nes-code/serial/cable.html" class="postlink">http://slack.net/~ant/old/nes-code/serial/cable.html</a><br /><br />What I like about it, is that it's basically a bootloader's bootloader.  It could be compatible with any type of comms adapter, all it has to do is support 57600 baud async for the initial load.  So for the end user, they would select a driver for the device they have.  The bootloader then loads that driver into the NES's RAM, from there it could begin using SPI, parallel, other async options, anything.<br /><br />It doesn't address compatibility between programs, that's something that remains to be worked out as more of these types of programs are developed.  I'd say on the PC side that using a serial port (COM port in Windows, TTY in Linux) is pretty much universal.  The end user just needs to select which port to use, the OS handles the rest.  On the NES side, it pretty much comes down to having 2 subroutines, one to send a byte, and one to receive a byte.  Receiving is the only place where differences could occur, I think it's best to return from it with (for example) a pass/fail condition in the carry flag, as opposed to polling forever.  But maybe that would be a candidate for a third subroutine, I don't know.  The bootloader pretty much makes it easy for the end user, since it's typically  easier to load new software onto the PC compared to an NES cart.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nestendo</b> [ Sun Aug 17, 2014 10:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Woo, got it working! Both the bootloader thing and pc2nes.<br /><br />pc2nes worked right away on my PC but the computer closest to my NES is a mac and under wine pc2nes bugged out so I had to compile pc2nes from source.<br /><br />Initially it didn't work but I noticed it would do the first transfer properly and then bug out on the second, regardless of whether the second part was configured to go at 57600 or 115200 bps. I went back to the source and changed the delay between the two transfers to 500ms instead of 100ms, which is probably overkill, but now it works. Though only at 57600bps for some reason on the mac. On my pc 115200bps works no problem.<br /><br /><strong>Instructions for anyone trying to get pc2nes-v01 working on osx (tested on mavericks) so you can drag&amp;drop to send files to the NES through the second controller port:</strong><br /><br />1. Get a USB-RS232 cable, I used <a href="http://ca.startech.com/Cards-Adapters/Serial-Cards-Adapters/USB-RS232-DB9-DB25-Serial-Adapter-Cable~ICUSB232DB25" class="postlink">this one</a>. This one uses a &quot;Prolific PL-2303&quot; chip, I'm not sure what everybody else is using but add this to the list of chips that work.<br /><br />2. Build the RS232-TTL circuit from <a href="http://slack.net/~ant/old/nes-code/serial/cable.html" class="postlink">here</a>. So far I have only built the one-way cable, the diagram on the left. Credit goes to Blargg for this one.<br /><br />3. Download pc2nes-v01 from <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7520" class="postlink">here</a>. Credit to thefox for pc2nes-v01.<br /><br />4. Extact the zip and follow the instructions in the readme file, put your mappers in the mappers folder and get it on your powerpak. Then go to the source folder. Open up Main.cpp. Change #define SEND_115200 from 1 to 0. Look for delay(100) and change it to delay(500). Save.<br /><br />5. Download the boost library source from <a href="http://sourceforge.net/projects/boost/files/boost/1.56.0/boost_1_56_0.tar.gz/download" class="postlink">here</a>.<br /><br />6. Build the boost libs for your system. In a terminal, cd /path/to/boost_1_56_0/ and then run ./bootstrap.sh and then ./b2<br /><br />7. Compile the pc2nes source. The first time you run this command you might get an error saying you don't have the developers tools and it will prompt you to install the command line developers tools. Go along with it. And then cd to the pc2nes-source directory and run this command, with paths changed so it can find the boost include and lib files on your system (credit goes to Bananmos from <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7520&amp;start=60" class="postlink">this thread</a>):<br /><br />g++ -o pc2nes_osx_57600 -I./nrpc-1.2a1 -I/wherever/you/put/boost_1_56_0 -L/wherever/you/put/boost_1_56_0/stage/lib Main.cpp nrpc-1.2a1/nrpc/*.c* -pthread -lboost_system<br />mv pc2nes_osx_57600 ../<br /><br />8. Use automator to make a shortcut you can drag .nes files on to send them to the NES similar to the SendTo trick posted by thefox <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7520&amp;start=30" class="postlink">here</a>.<br /><br />Open automator from the Applications folder, pick &quot;Application&quot; as the type and click the choose button. <br />Type shell in the search box and drag a &quot;Run Shell Script&quot; action over to the right side. <br />On the &quot;Run Shell Script&quot; action you just added, where it says &quot;Pass input: to stdin&quot; change it to &quot;Pass input: as arguments&quot;.<br />Replace the default script with:<br /><br />export DYLD_LIBRARY_PATH=.:/wherever/you/put/boost_1_56_0/stage/lib<br />cd /wherever/you/put/pc2nes-v01/<br />./pc2nes_osx_57600 -ntsc -port=/dev/tty.usbserial $1<br /><br />Of course, replace the paths to the boost libs and pc2nes-v01 folder with your own, and replace /dev/tty.usbserial with the name of the device your USB-RS232 cable is showing up as.<br />Now click Save and call the .app file whatever you want. For me I called it SendToNES.app. I dragged it on to my dock and now when I want to send something to the NES I just drag it on to the icon and off it goes. My next step will be moving the pc2nes and boost libs into the SendToNES.app package so that everything is completely self contained. But this example doesn't get to that point.<br /><br />9. Drag and drop something to the NES, you're done.<br /><br /><br />Serious thanks to everyone that has been working on this. thefox, pc2nes is amazing. I'm SO new to nes development. I have to try things over and over to get them working. This really saves time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nestendo</b> [ Sat Aug 30, 2014 8:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I believe Blargg's bootloader is the best solution for compatibility:<br /><a href="http://slack.net/~ant/old/nes-code/bootloader/" class="postlink">http://slack.net/~ant/old/nes-code/bootloader/</a><br /><a href="http://slack.net/~ant/old/nes-code/serial/spec.html" class="postlink">http://slack.net/~ant/old/nes-code/serial/spec.html</a><br /><a href="http://slack.net/~ant/old/nes-code/serial/cable.html" class="postlink">http://slack.net/~ant/old/nes-code/serial/cable.html</a></div><br />Does anyone know what happened to this website? Been down for a few weeks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>43110</b> [ Sat Aug 30, 2014 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nestendo wrote:</div><div class="quotecontent">Does anyone know what happened to this website? Been down for a few weeks.</div><br />Using redirections <a href="http://forums.nesdev.com/viewtopic.php?p=107763#p107763" class="postlink">described in this thread</a>, the new locations are:<br /><br /><a href="http://blargg.8bitalley.com/parodius/nes-code/bootloader/" class="postlink">http://blargg.8bitalley.com/parodius/nes-code/bootloader/</a><br /><a href="http://blargg.8bitalley.com/parodius/nes-code/serial/spec.html" class="postlink">http://blargg.8bitalley.com/parodius/nes-code/serial/spec.html</a><br /><a href="http://blargg.8bitalley.com/parodius/nes-code/serial/cable.html" class="postlink">http://blargg.8bitalley.com/parodius/nes-code/serial/cable.html</a><br /><br />Although I think the <a href="http://wiki.nesdev.com/w/index.php/Serial_Bootloader" class="postlink">boot loader specs</a> on the wiki is more up to date and simpler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nestendo</b> [ Sat Aug 30, 2014 5:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awesome, thank you.<br /><br />I'm hoping I can use this to make a set of general send/receive functions I can use inside a game to stream in small amounts of data between frames or larger amounts if the screen is turned off. Not a bootloader just some way to signal the PC and then pick up a stream of bytes of whatever length, so that the NES doesn't have to keep polling the data line to wait for the PC to send something.<br /><br />If anybody has anything like that, let me know!<br /><br />I've got a vertical scrolling ski-free sort of game started, I'm thinking of trying to stream in the level from a PC.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>