<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7185" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-04-19T12:12:35-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7185</id>
<entry>
<author><name><![CDATA[Bananmos]]></name></author>
<updated>2012-04-19T12:12:35-07:00</updated>
<published>2012-04-19T12:12:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92628#p92628</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92628#p92628"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92628#p92628"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I put all the snake.* files into the same folder as atalan.exe. What could I be doing wrong?<br /></div><br /><br />Sounds like the same issues I was having whenever I tried compiling anything with the "-p NES" option. <br /><br />The only solution I found was ignoring the win32 build on the webpage and building it from the latest source grabbed from the repository.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=106">Bananmos</a> — Thu Apr 19, 2012 12:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2012-04-19T01:25:43-07:00</updated>
<published>2012-04-19T01:25:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92621#p92621</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92621#p92621"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92621#p92621"><![CDATA[
<div class="quotetitle">rudla.kudla wrote:</div><div class="quotecontent"><br />As for indentation, Atalan supports syntax with parentheses, in such case it ignores indent.<br /></div>Haskell allows both explicit {;} and implicit by layout. I always use the explicit mode although the layout mode is more commonly used by Haskell programmers in general. If your programming language does not need delimiters between commands (such as semicolons) then what you gave in example should be working too; that is good too<br /><br />And, where is document of macros?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Thu Apr 19, 2012 1:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[slobu]]></name></author>
<updated>2012-04-13T11:49:59-07:00</updated>
<published>2012-04-13T11:49:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92444#p92444</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92444#p92444"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92444#p92444"><![CDATA[
I am running Vista 32-bit.<br /><br />When I first tried "atalan -P nes snake" Atalan complained about missing MCVCR100.dll.<br /><br />I downloaded and installed Microsoft Visual C++ 2010 Redistributable Package.<br /><br />It still errors out with this information:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Problem signature:<br />  Problem Event Name:   APPCRASH<br />  Application Name:   atalan.exe<br />  Application Version:   0.0.0.0<br />  Application Timestamp:   4d84e642<br />  Fault Module Name:   atalan.exe<br />  Fault Module Version:   0.0.0.0<br />  Fault Module Timestamp:   4d84e642<br />  Exception Code:   c0000005<br />  Exception Offset:   00002650<br />  OS Version:   6.0.6002.2.2.0.768.3<br />  Locale ID:   1033<br />  Additional Information 1:   03d5<br />  Additional Information 2:   c62ce54d72177dd32c2e4ef275293885<br />  Additional Information 3:   c99c<br />  Additional Information 4:   af763b56a93ceca5ccfc6d5f0fa3b625</div><br /><br />I put all the snake.* files into the same folder as atalan.exe.  What could I be doing wrong?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4942">slobu</a> — Fri Apr 13, 2012 11:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rudla.kudla]]></name></author>
<updated>2012-04-05T14:14:32-07:00</updated>
<published>2012-04-05T14:14:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92190#p92190</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92190#p92190"/>
<title type="html"><![CDATA[Improved optimization]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=92190#p92190"><![CDATA[
Being provoked by previous posts, I have decided to implement new optimizations (and thus introduce new bugs) instead of fixing bugs. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />For this code:<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">use NES<br /><br />const EDIT_CURSOR_TILEID = 100 <br /><br />const EditCursorCHR:array&#40;&#41; = 0,1,2,3,4,5,6,7<br /><br />ppu.ptr = EDIT_CURSOR_TILEID*16  <br /><br />for i:0..7 ppu.data = 0 <br />for i:0..7 ppu.data = EditCursorCHR#i<br /></div><br /><br />Atalan now produces this:<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ppu__data_adr equ 8198<br />ppu__data equ 8199<br />   opt h-<br />   .byte&#40;'N', 'E', 'S', $1A, $02, $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00&#41;<br />   org $8000<br />RESET:<br />   sei<br />   cld<br />   ldx #$FF<br />   txs<br />;### opti_nesx2.atl&#40;7&#41; ppu.ptr = EDIT_CURSOR_TILEID*16  <br />   lda #6<br />   sta ppu__data_adr<br />   lda #64<br />   sta ppu__data_adr<br />;### opti_nesx2.atl&#40;9&#41; for i:0..7 ppu.data = 0 <br />   ldx #248<br />   lda #0<br />_lbl6:<br />   sta ppu__data<br />   inx<br />   jne _lbl6<br />;### opti_nesx2.atl&#40;10&#41; for i:0..7 ppu.data = EditCursorCHR#i<br />   ldx #248<br />_lbl8:<br />   lda EditCursorCHR-248,x<br />   sta ppu__data<br />   inx<br />   jne _lbl8<br />   rts<br />EditCursorCHR:<br />;### opti_nesx2.atl&#40;5&#41; const EditCursorCHR:array&#40;&#41; = 0,1,2,3,4,5,6,7<br />   dta 0<br />   dta 1<br />   dta 2<br />   dta 3<br />   dta 4<br />   dta 5<br />   dta 6<br />   dta 7<br />   icl 'P:\atalan\src\atalan\platform\NES\NES.asm'<br />   icl 'P:\atalan\src\atalan\cpu\m6502\m6502.asm'<br />   .align $FFF9,$00<br />NMI:<br />    rti<br />   org $FFFA<br />   .dw NMI<br />   .dw RESET<br />   .dw 0<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4635">rudla.kudla</a> — Thu Apr 05, 2012 2:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rudla.kudla]]></name></author>
<updated>2012-03-25T16:27:10-07:00</updated>
<published>2012-03-25T16:27:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91821#p91821</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91821#p91821"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91821#p91821"><![CDATA[
The inferring does not work with global variables. That's what you use in your first example.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4635">rudla.kudla</a> — Sun Mar 25, 2012 4:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bananmos]]></name></author>
<updated>2012-03-25T16:16:14-07:00</updated>
<published>2012-03-25T16:16:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91820#p91820</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91820#p91820"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91820#p91820"><![CDATA[
Ok, I think I see what you mean... basically, you're saying that the compiler tracks the allowable range of variables from the range in their definitions to be able to produce more optimized code, as some of the bits should be known to be zero?<br /><br />That makes sense to me, but I still can't understand how this results in that<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">in joyP0@$15:byte<br /></div><br /><br />Should be any different from<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">joyP0@$15:byte<br /></div><br /><br />Both have the same 'byte' range (0..255) after all, so how come the 'in' keyword is required? How can that change the behavior?<br /><br />Also, the inferring of ranges did not seem to do what I would have expected in the code I tried:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">editCursorX:0..15<br />editCursorY:0..15<br />DrawEditCursor:proc =<br />    DrawSpriteImage editCursorX*16 editCursorY*16 SpriteImageEditCursor<br /></div><br /><br />This would produce a call to a system routine for multiplication, even though the range is 0..15 multiplied by 16, and therefore fits within a byte and be achievable with four simple 'asl' instructions.<br /><br />But changing it to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">editCursorX:0..15<br />editCursorY:0..15<br />DrawEditCursor:proc =<br />    screenX:0..255 = editCursorX*16<br />    screenY:0..255 = editCursorY*16<br />    DrawSpriteImage screenX screenY SpriteImageEditCursor<br /></div><br /><br />Would produce the four 'asl' instructions for each multiplication, as I expected. But the temporary variables will also result in redundant writes to RAM, as in the previous examples.<br /><br />Perhaps I am missing something, but it seems that at least in the trunk source code of Atalan, this range tracking isn't working as it should?<br /><br />EDIT: I guess what you said here:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />- Types may be inferred for procedure arguments and local variables (these are two<br />diferents algorithms).<br /></div><br /><br />...could be the reason why the behavior changes when I introduce the intermediate variable? i.e., the inferring works for locals but *not* for procedure arguments?...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=106">Bananmos</a> — Sun Mar 25, 2012 4:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rudla.kudla]]></name></author>
<updated>2012-03-25T15:23:32-07:00</updated>
<published>2012-03-25T15:23:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91818#p91818</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91818#p91818"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91818#p91818"><![CDATA[
Atalan tries to infer set of possible values of the result of every operator in the<br />code. So it not only deduces, that the variable should be integer, but also<br />the range of the integer.  <br />  <br />The following examples use type assert. <br /><strong>assert x:min..max</strong> makes sure the compiler at specified line <br />inferred the range of variable x to be min..max.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Basic type inference <br />in x:10..20<br />y = x <br />assert y:10..20   ;For input variables, Atalan uses the defined type<br />y = x * 2 <br />assert y:20..40 <br />y = y + 5 <br />assert y:25..45 <br />z = y - 30 <br />assert z:-5..15 <br /><br />;Conditions are recognized<br />in x:10..20 <br />y = x * 2 <br />assert y:20..40 <br />if y &gt; 30 <br />    y = 30 <br />assert y:20..30 <br />if y &lt;= 25 then y = 26 <br />assert y:26..30 <br /><br />;Some loops are supported<br />x = 10 <br />while x &lt; 100 <br />    inc x <br />    assert x:11..100 <br />assert x:100..100 <br />x = 3 <br />while x &lt;= 23 <br />    inc x <br />    assert x:4..24 <br />assert x:24..24<br /> <br />;Dependent varibles in loop may be computed<br />y = 1 <br />for x:0..7 <br />   inc y <br />assert y:9..9 <br /></div><br /><br />Benefits of type inferencing<br /><br />- You don't need to declare types of local variables, leading to shorter,<br />  more readable code. It is easier to introduce a new local variable,<br />  so you can create some extra ones, with meaningfull names, which<br />  will further improve code readability.<br />  <br />- With exact interval type inferencing, the compiler may statically check<br />  array bounds errors, incorrect asignment errors etc.<br /><br />- Inferred types may be used for optimizations.<br /><br />- With proper interval type inferenced, compiler can produce correct code<br />  in most situations. For example when computing expression like (a * b) / 128<br />  where a and b are in range 0..127, compiler will correctly use 2 byte temporary<br />  variable for the result of multiplication, even if the final result is only byte again.<br />  <br />- Types may be inferred for procedure arguments and local variables (these are two<br />  diferents algorithms).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4635">rudla.kudla</a> — Sun Mar 25, 2012 3:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bananmos]]></name></author>
<updated>2012-03-25T14:18:53-07:00</updated>
<published>2012-03-25T14:18:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91815#p91815</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91815#p91815"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91815#p91815"><![CDATA[
Well one input from me regarding parsing problems in general:<br />Unless you want to dedicate a lot of your development time to writing a lexalizer/parser for the pure sake of learning, it is IMO an almost insane waste of time to write your own parser. <br /><br />Parsing source code is one of the things in compiler programming that is very simple to write a first working implementation for, yet extremely hard and tedious to get bugfree. I'm willing to bet that replacing your own parsing code with Flex/Bison will make life much simpler for both you and Atalan users. Not to mention the fact that when the rest of the Atalan backend is so configurable and data-driven, it sure would be nice if the scanning&amp;parsing would be as easy for other people to understand and experiment with :)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />As for strange 'Logic error: Cannot infer type ' errors. This is side effect of very interesting (I believe) and very experimental feature of Atalan. It does interval type inferecing. The algorithm is complex and not yet complete and often needs much better error messages. So what happens in your case is, that Atalan fails to infer type of the variable joyP0 at that exact position. When you mark the variable as input, Atalan always takes the defined interval as the value range.<br /></div><br /><br />I did not understand this very well - would you mind explaining it in more detail? :)<br /> <br />i.e., what is this "interval type inferecing"? And why does it only respect the "defined interval" (the :byte tag I presume?) if the variable is marked with 'in'? This one is really puzzling me.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=106">Bananmos</a> — Sun Mar 25, 2012 2:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rudla.kudla]]></name></author>
<updated>2012-03-25T12:56:00-07:00</updated>
<published>2012-03-25T12:56:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91813#p91813</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91813#p91813"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91813#p91813"><![CDATA[
Thanks for trying Atalan. I'm sorry your experience has not been better. Atalan is still work in progress (and will probably be forever <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> ) and not much code has been written in it, therefore it is not impossible (or even hard) to encounter error in parsing. They are usually easy to fix, and I will try to use your example to fix the error.<br /><br />Optimizations are similar story.  I only recently introduced support for processor flags, and not everything has been tuned up (again, having test examples helps a lot). For example 'STA' storing the result of 'AND' into local variable has not been removed, because it modifies flags and they are used in next instruction. Of course the same flag has been set by 'AND', but teaching this the compiler is one of hundreds little things that must be done. Now that I have the input, I may be able to do it.<br /><br />As for strange 'Logic error: Cannot infer type ' errors. This is side effect of very interesting (I believe) and very experimental feature of Atalan. It does interval type inferecing. The algorithm is complex and not yet complete and often needs much better error messages. So what happens in your case is, that Atalan fails to infer type of the variable joyP0 at that exact position. When you mark the variable as input, Atalan always takes the defined interval as the value range.<br /><br />All in all, although I would very much like someone to keep trying to use Atalan and thus give me the valuable inputs I'm currently missing, I would not recommend anyone to try to use it for 'real' development. Atalan is now just for the brave. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />I am now trying to develop some bigger game in Atalan for Atari while fixing any errors I encounter in the process and implementing necessary features. After I finish this, I may try to port the game for NES, and that may be the right moment to jump the train for others.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4635">rudla.kudla</a> — Sun Mar 25, 2012 12:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2012-03-25T10:27:44-07:00</updated>
<published>2012-03-25T10:27:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91810#p91810</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91810#p91810"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91810#p91810"><![CDATA[
<div class="quotetitle">Bananmos wrote:</div><div class="quotecontent"><br />Anyways, now I was somewhat back on track to re-write my assembly code in Atalan. Atalan uses the syntax of the MADS assembler for the assembly code it outputs, while my project uses CA65. But fortunately, rewriting the m6502.atl and nes.atl files to produce code in CA65 syntax wasn't that hard, and was one of the things I found exciting about the Atalan project - to easily be able to tune the backend for your own needs. It did help that I know Polish as a second language though, since the MADS documentation is in Polish and I had to find out how certain directives worked to know which CA65 counterparts they should use instead. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /></div><br />To whom it may concern, CA65 has an undocumented pseudo-op ".dbg" that CC65 uses to add debug line information (among other things) to asm generated from C code. With some changes to Atalan (I doubt it's possible just by modifying the templates?) it should be possible to use it to get source level debugging of Atalan code in emulators like NESICIDE and NintendulatorDX.<br /><br />Just throwing that out there since it's probably not common knowledge.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Sun Mar 25, 2012 10:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bananmos]]></name></author>
<updated>2012-03-25T07:47:10-07:00</updated>
<published>2012-03-25T07:47:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91802#p91802</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91802#p91802"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=91802#p91802"><![CDATA[
So, I had a go at trying out Atalan this weekend, and thought I'd summarize my experience with it for the benefit of others.<br /><br />I approached it with a quite positive attitude. While some of the syntax might seem strange at first, I did find it rather elegant, and saving a lot of characters to write compared to C/Java syntax.<br /><br />I decided to try and port the simple map editor I have written for my current game project, which allows you to do some simple editing of the map for easier debugging. This seemed like a good example of something I could try out a HLL for: performance is not a big issue and it requires a lot of repetitive code that becomes hard to maintain in asm. Besides, since it's not something you'd need in the final product, you wouldn't become dependent on it for the rest of your game.<br /><br />But when trying out the version available from the website, switching the platform to nes with the '-p nes' option would make the compiler crash with a "Atalan has stopped working" windows dialog. Compiling for the default atari target did work though. (for 'hello world' and the other included examples at least)<br /><br />Not wanting to give up just yet, I checked out the SVN source from the Atalan source repository trunk. And with this one, the 'hello world' example finally worked. However, when trying out the part of my map editor that I had re-written in Atalan, I got the same old compiler crash. Eventually, I tracked down that this code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const SpriteImageEditCursor:array = &#40;<br />    4,<br />    0,EDIT_CURSOR_TILEID&amp;$FF,$00,0<br />    0,EDIT_CURSOR_TILEID&amp;$FF,$40,8<br />    8,EDIT_CURSOR_TILEID&amp;$FF,$80,0<br />    8,EDIT_CURSOR_TILEID&amp;$FF,$C0,8<br />    &#41;<br /></div><br /><br />...should really look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const SpriteImageEditCursor:array = &#40;<br />    4,<br />    0,EDIT_CURSOR_TILEID bitand $FF,$00,0<br />    0,EDIT_CURSOR_TILEID bitand $FF,$40,8<br />    8,EDIT_CURSOR_TILEID bitand $FF,$80,0<br />    8,EDIT_CURSOR_TILEID bitand $FF,$C0,8<br />    &#41;<br /></div><br /><br />But I sure would have expected this to result in a syntax error rather than a crashing compiler.<br /><br />Anyways, now I was somewhat back on track to re-write my assembly code in Atalan. Atalan uses the syntax of the MADS assembler for the assembly code it outputs, while my project uses CA65. But fortunately, rewriting the m6502.atl and nes.atl files to produce code in CA65 syntax wasn't that hard, and was one of the things I found exciting about the Atalan project - to easily be able to tune the backend for your own needs. It did help that I know Polish as a second language though, since the MADS documentation is in Polish and I had to find out how certain directives worked to know which CA65 counterparts they should use instead. :)<br /><br />One strange error I never understood was how defining a byte value at a certain memory location like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">joyP0@$15:byte<br /></div><br /><br />And then using it like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if joyP0 bitand JOY_SELECT &lt;&gt; 0<br />    CopyMapToSRAM<br />    return $80<br /></div><br />Would produce "Logic error: Cannot infer type of result of operator 'bitand'." from the compiler (very common error message that kept creeping up in a lot of other cases as well)<br /><br />The solution I found by trial and error was to replace the declaration with:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">in joyP0@$15:byte<br /></div><br />Which is really only supposed to be needed for hardware registers where you don't want the compiler to optimize away multiple reads from it.<br /><br />I had read a lot about Atalan's optimization features, so I was very eager to inspect the resulting code. Here's the routines I wrote one-by-one:<br /><br /><strong>* Atalan source *</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">UploadEditCursorCHR:proc =<br />    addr:0..65535<br />    addr = EDIT_CURSOR_TILEID*16<br />    PPU_DATA_ADR = hi addr<br />    PPU_DATA_ADR = lo addr<br />    for i:0..7<br />        PPU_DATA = 0<br />    for i:0..7<br />        PPU_DATA = EditCursorCHR&#40;i&#41;<br /></div><br /><br /><strong>* Assembly output *</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc UploadEditCursorCHR<br />;### editmap.atl&#40;55&#41;     addr = EDIT_CURSOR_TILEID*16<br />   lda #240<br />   sta UploadEditCursorCHR__addr+0<br />   lda #31<br />   sta UploadEditCursorCHR__addr+1<br />;### editmap.atl&#40;56&#41;     PPU_DATA_ADR = hi addr<br />   sta PPU_DATA_ADR<br />;### editmap.atl&#40;57&#41;     PPU_DATA_ADR = lo addr<br />   lda #240<br />   sta PPU_DATA_ADR<br />;### editmap.atl&#40;58&#41;     for i:0..7<br />   lda #0<br />   sta _s1__i<br />_lbl6:<br />;### editmap.atl&#40;59&#41;         PPU_DATA = 0<br />   lda #0<br />   sta PPU_DATA<br />   inc _s1__i<br />   lda _s1__i<br />   cmp #8<br />   jne _lbl6<br />;### editmap.atl&#40;60&#41;     for i:0..7<br />   ldx #0<br />_lbl8:<br />;### editmap.atl&#40;61&#41;         PPU_DATA = EditCursorCHR&#40;i&#41;<br />   lda EditCursorCHR,x<br />   sta PPU_DATA<br />   inx<br />   cpx #8<br />   jne _lbl8<br />   rts<br />.endproc<br /></div><br /><br />First, I would have expected the stores to the intermediate 'addr' variable to be optimized out by the compiler. But even more strange is how the first loop writing zeros to $2007 produces much worse code than the one copying the contents of my array.<br /><br />Then finally, a small part of my original asm routine that updates the cursor movement in the map editor:<br /><br /><strong>* Atalan source *</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">UpdateMapEditor:proc &gt;modifiedFlags:byte = <br />    DrawEditCursor<br /><br />    if joyP0 bitand JOY_SELECT &lt;&gt; 0<br />        CopyMapToSRAM<br />        return $80<br />    else if &#40;joyP0 bitand JOY_LEFT &lt;&gt; 0&#41; and editCursorX &gt; 0<br />        dec editCursorX<br />    else if &#40;joyP0 bitand JOY_RIGHT &lt;&gt; 0&#41; and editCursorX &lt; 15<br />        inc editCursorX<br />    else if &#40;joyP0 bitand JOY_UP &lt;&gt; 0&#41; and editCursorY &gt; 0<br />        dec editCursorY<br />    else if &#40;joyP0 bitand JOY_DOWN &lt;&gt; 0&#41; and editCursorY &lt; 14<br />        inc editCursorY<br /><br />    return 0<br /></div><br /><br /><strong>* Assembly output *</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc UpdateMapEditor<br />;### editmap.atl&#40;71&#41;     DrawEditCursor<br />   jsr DrawEditCursor<br />;### editmap.atl&#40;73&#41;     if joyP0 bitand JOY_SELECT &lt;&gt; 0<br />   lda joyP0<br />   and #root__JOY_SELECT<br />   sta UpdateMapEditor___37<br />   jeq _lbl9<br />;### editmap.atl&#40;74&#41;         CopyMapToSRAM<br />   jsr CopyMapToSRAM<br />;### editmap.atl&#40;75&#41;         return $80<br />   jmp _exit32766<br />_lbl9:<br />;### editmap.atl&#40;76&#41;     else if &#40;joyP0 bitand JOY_LEFT &lt;&gt; 0&#41; and editCursorX &gt; 0<br />   lda joyP0<br />   and #root__JOY_LEFT<br />   sta UpdateMapEditor___39<br />   jeq _lbl11<br />   lda #0<br />   cmp editCursorX<br />   jcs _lbl11<br />   dec editCursorX<br />   jmp _exit32766<br />_lbl11:<br />;### editmap.atl&#40;78&#41;     else if &#40;joyP0 bitand JOY_RIGHT &lt;&gt; 0&#41; and editCursorX &lt; 15<br />   lda joyP0<br />   and #root__JOY_RIGHT<br />   sta UpdateMapEditor___40<br />   jeq _lbl12<br />   lda editCursorX<br />   cmp #15<br />   jcs _lbl12<br />   inc editCursorX<br />   jmp _exit32766<br />_lbl12:<br />;### editmap.atl&#40;80&#41;     else if &#40;joyP0 bitand JOY_UP &lt;&gt; 0&#41; and editCursorY &gt; 0<br />   lda joyP0<br />   and #root__JOY_UP<br />   sta UpdateMapEditor___41<br />   jeq _lbl13<br />   lda #0<br />   cmp editCursorY<br />   jcs _lbl13<br />   dec editCursorY<br />   jmp _exit32766<br />_lbl13:<br />;### editmap.atl&#40;82&#41;     else if &#40;joyP0 bitand JOY_DOWN &lt;&gt; 0&#41; and editCursorY &lt; 14<br />   lda joyP0<br />   and #root__JOY_DOWN<br />   sta UpdateMapEditor___42<br />   jeq _exit32766<br />   lda editCursorY<br />   cmp #14<br />   jcs _exit32766<br />   inc editCursorY<br />_exit32766:<br />   rts<br />.endproc<br /></div><br /><br />The 'jmp' commands to _exit32766 could obviously be optimized away with an 'rts'. Also, the 'return N' commands don't seem to work at all since the return values aren't stored anywhere. <br /><br />But most importantly, we again see lots of intermediate results being written to temporary variables for no good reason. For just this short piece of code, there are no less than 4 of them.<br /><br />So this looks like the real showstopper to me and I probably won't attempt to convert the rest of my mapeditor to Atalan. While I could live with some of the slower/larger code produced, it seems like the memory usage will just explode in Atalan code. While it is true that this is only temporary variable space, and Atalan did correctly re-use the same memory areas in other routines in my short program, the unnecessary memory stores could easily eat up most of your zeropage memory in a more complex routine. And really, ~16 bytes should be enough temporary space for most projects I could think of.<br /><br />So my conclusion would be that Atalan is a very fascinating proof-of-concept, and if it did perform what the documentation suggests, it would likely be the language I'd choose for non-performance critical AI code in my game. But at this point, the implementation is just not mature enough to be usable in practice. I hope that it reaches that stage in a few years from now, but looking at the source code repository and the discussion groups, development seems to have been ramping down quite a bit during the last year.<br /><br />Still, I recommend anyone who's thinking about implementing a compiler for the 6502 (or any other low-level system for that matter) to have a serious look at Atalan for inspiration. If you do like to have a go at language implementation in your spare time, improving Atalan could be a good start. But personally, I don't want to get stuck in yet another time-consuming sideproject that keeps me from actually working on my project :)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=106">Bananmos</a> — Sun Mar 25, 2012 7:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-12-21T10:45:53-07:00</updated>
<published>2010-12-21T10:45:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=71716#p71716</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=71716#p71716"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=71716#p71716"><![CDATA[
I'd say FCEU (the plain version) because it has an easy to use debugger.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Tue Dec 21, 2010 10:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[-Basti-]]></name></author>
<updated>2010-12-21T09:09:50-07:00</updated>
<published>2010-12-21T09:09:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=71707#p71707</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=71707#p71707"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=71707#p71707"><![CDATA[
Great project. I learned Python at school and would really like to give this one a try.<br />Does anyone know a good emulator to test my atalan code?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4577">-Basti-</a> — Tue Dec 21, 2010 9:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2010-11-30T16:33:34-07:00</updated>
<published>2010-11-30T16:33:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=70779#p70779</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=70779#p70779"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=70779#p70779"><![CDATA[
- A minor thing: personally, I like the C stardard for comparison and attribution. Like...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> int A = 0; /* A becomes zero */<br /><br />while&#40; A == 0 &#41; &#123; /* compares A with zero */ <br />&#125;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Tue Nov 30, 2010 4:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rudla.kudla]]></name></author>
<updated>2010-11-28T16:23:40-07:00</updated>
<published>2010-11-28T16:23:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=70635#p70635</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=70635#p70635"/>
<title type="html"><![CDATA[ATALAN - new programming language for 6502]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7185&amp;p=70635#p70635"><![CDATA[
You inspired me to develop optimization for these cases. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> Now the code looks like this (see how that same optimization applied at the beginning of the source code):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">RANDOM equ 53770<br />VCOUNT equ 54283<br />WSYNC equ 54282<br />button__state__pressed equ 0<br />STRIG equ 644<br />DMACTL equ 559<br />player_size equ 53256<br />player_x equ 53248<br />player_gfx equ 53261<br />player_col2 equ 53266<br />GRACTL equ 53277<br />   org $2e0<br />   dta a&#40;$2000&#41;<br />   org $2000<br />;### stars.atl&#40;12&#41; DMACTL = 0<br />   ldx #0<br />   stx DMACTL<br />;### stars.atl&#40;13&#41; GRACTL = 0<br />   stx GRACTL<br />;### stars.atl&#40;17&#41; for i <br />_lbl2:<br />;### stars.atl&#40;18&#41;    hpos&#40;i&#41;  = RANDOM<br />   lda RANDOM<br />   sta hpos,x<br />;### stars.atl&#40;19&#41;    speed&#40;i&#41; = &#40;RANDOM and 3&#41; + 1<br />   and #3<br />   clc<br />   adc #1<br />   sta speed,x<br />;### stars.atl&#40;20&#41;    col&#40;i&#41;   = RANDOM or 3         ;make the star color light enough <br />   lda RANDOM<br />   ora #3<br />   sta col,x<br />   inx<br />   cpx #243<br />   jne _lbl2<br />;### stars.atl&#40;24&#41; player_gfx&#40;0&#41; = 1<br />   lda #1<br />   sta player_gfx<br />;### stars.atl&#40;25&#41; player_size&#40;0&#41; = 0<br />   lda #0<br />   sta player_size<br />;### stars.atl&#40;40&#41; player_gfx&#40;0&#41; = 0<br />   jmp _lbl3<br />_lbl7:<br />;### stars.atl&#40;30&#41;       wait'line<br />   sta WSYNC<br />_lbl5:<br />;### stars.atl&#40;29&#41;    until VCOUNT = 4 <br />   lda VCOUNT<br />   cmp #4<br />   jne _lbl7<br />_lbl6:<br />   ldx #0<br />_lbl9:<br />;### stars.atl&#40;33&#41;       player_col2&#40;0&#41; = col&#40;i&#41;<br />   lda col,x<br />   sta player_col2<br />;### stars.atl&#40;34&#41;       player_x&#40;0&#41; = hpos&#40;i&#41;<br />   lda hpos,x<br />   sta player_x<br />;### stars.atl&#40;35&#41;       hpos&#40;i&#41; = hpos&#40;i&#41; + speed&#40;i&#41;<br />   clc<br />   adc speed,x<br />   sta hpos,x<br />;### stars.atl&#40;36&#41;       wait'line<br />   sta WSYNC<br />   inx<br />   cpx #243<br />   jne _lbl9<br />_lbl3:<br />;### stars.atl&#40;27&#41; until STRIG&#40;0&#41; = pressed<br />   lda STRIG<br />   cmp #button__state__pressed<br />   jne _lbl5<br />_lbl4:<br />   lda #0<br />   sta player_gfx<br />;### stars.atl&#40;41&#41; player_gfx&#40;1&#41; = 0<br />   sta player_gfx+1<br />;### stars.atl&#40;42&#41; GRACTL = 0<br />   sta GRACTL<br />;### stars.atl&#40;43&#41; DMACTL = 34<br />   lda #34<br />   sta DMACTL<br />_lbl11:<br />   jmp _lbl11<br />hpos:<br />   .ds 243<br />speed:<br />   .ds 243<br />col:<br />   .ds 243<br />   icl 'P:\atalan\atalan\platform\atari\atari.asm'<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4635">rudla.kudla</a> — Sun Nov 28, 2010 4:23 pm</p><hr />
]]></content>
</entry>
</feed>