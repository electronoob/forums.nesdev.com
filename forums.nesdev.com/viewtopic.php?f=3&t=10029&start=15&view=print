<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CPU/PPU timing</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CPU/PPU timing</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10029">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10029</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Apr 22, 2013 6:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU/PPU timing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, here's what I've got for now, just figuring out some kind of test framework to make these measurements.<br /><br />I've got code that synchronizes with VBL, then has a STA ABS instruction execute as late as possible just before NMI is vectored, and also have NMI just get vectored before that instruction (same code, does the before/after depending on CPU-PPU alignment after reset). On the scope is /NMI going low, and to show what the CPU is doing, A8. The STA ABS is at an address with A8 high, and the instruction just before it has A8 low (a JMP) to it. The STA ABS stores into $00xx, so A8 goes low during the store. During NMI vectoring, A8 is high. So you can see what's happening. I figured an address line would assert sooner than anything else. If anyone has better ideas, I'm open to them.<br /><br />In the pictures there are 1250ns/division (250ns/subdivision dots). A=A8 B=/NMI. Sorry about leaving the vertical cursor bars up.<br /><br />In the first one, /NMI goes low just too late, so the STA ABS executes. A8 goes high about 612ns after /NMI goes low. It does three fetches with A8 high (opcode, two bytes of address), 1780ns, then low for 560ns, then high for 3920ns, then low (the NMI handler code has A8 low).<br /><br />In the second one, /NMI goes low just in time, so you get 3920ns of vectoring with A8=high, then A8=low for NMI handler.<br /><br />(For triggering this, I run the scope in one-shot digital capture mode, and trigger it using EXT TRIG connected to the $4016 read strobe with a BIT $4016 a little before these events)<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=562&amp;mode=view"><img src="./download/file.php?id=562&amp;t=1" alt="NMI after.JPG" /></a><br />
			<span class="gensmall">NMI after.JPG [ 70.31 KiB | Viewed 1014 times ]</span>
		

		<br />
	</div><br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=563&amp;mode=view"><img src="./download/file.php?id=563&amp;t=1" alt="NMI before.JPG" /></a><br />
			<span class="gensmall">NMI before.JPG [ 71.58 KiB | Viewed 1014 times ]</span>
		

		<br />
	</div><br /><br />I've figured out how to capture the scope's RS-232 plotter output for better pictures (hp2xx FTW!), but need to get a DB-9 F-F null modem adapter before it's convenient.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Mon Apr 22, 2013 10:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU/PPU timing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just figured out that you can make reads start at an exact master cycle in Visual 2C02 (see the updated <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Visual_2C02">http://wiki.nesdev.com/w/index.php/Visual_2C02</a><!-- m --> for how. The io_ce node can be used to confirm where the read starts). The duty cycle is the same as the 2A03's, and it assumes the value is sampled at the end of the read cycle.<br /><br />There seems to be four cycles where the read can start where the interrupt line and the VBL flag setting gets suppressed <strong>completely</strong>, so for those it's probably safe to say that no NMI would happen on the real thing. For other start cycles INT/VBL rises momentarily, and those might be trickier I guess. Maybe this info could be combined with some of the earlier stuff to figure out what's going on.<br /><br />Brain dump below with results from Visual 2C02. The numbers at the top are PPU dots on the line after the post-render line. The 0's are the first phase of the read, the 1's the second (the duty cycle is 5/8).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----------------------------... VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----------------------------... VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --------------------------... VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ------------------------... VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----------------------... VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear, INT and VBL completely suppressed <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear, INT and VBL completely suppressed <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear, INT and VBL completely suppressed<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear, INT and VBL completely suppressed <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set (note the short INT assertion)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ---&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ---------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -----------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -------------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ---------------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /></div><br /><br />Some kind of buffering is used in the PPU for the value &quot;returned&quot; by the read, which is why it can be read as set even though INT drops really quickly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Tue Apr 23, 2013 5:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU/PPU timing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Taking just the ticks from the &quot;preferred&quot; alignment, you get the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----------------------------... VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as clear, INT and VBL completely suppressed<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set (note the short INT assertion)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT<br /><br />&nbsp; -2&nbsp; &nbsp; &nbsp; -1&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4<br />* * * * * * * * * * * * * * * * * * * * * * * * * * * * * MASTER<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000000000111111111111111&nbsp; &nbsp; &nbsp; &nbsp; CPU&nbsp; &nbsp; &nbsp; Reads as set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ---------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VBL/INT</div><br /><br />I'm guessing that those correspond, in order, to <em>2 before</em>, <em>1 before</em>, <em>at</em>, and <em>1 after</em>, as specified in <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_frame_timing">http://wiki.nesdev.com/w/index.php/PPU_frame_timing</a><!-- m --> and the vbl_nmi_timing tests. If the NMI input is sampled near the end of a CPU cycle (not sure if it is), then it makes sense that the last two would miss the NMI even though it momentarily rises. Later starting points would have parts of the NMI assertion overlapping the end of the <em>previous</em> CPU cycle however, and so would not be missed.<br /><br />Edit: I'm assuming this alignment corresponds to your 742. Is that correct? Just realized it's a bit tricky to see whether this one would be 742 or 743 in <!-- m --><a class="postlink" href="http://i.imgur.com/nq78U8I.gif">http://i.imgur.com/nq78U8I.gif</a><!-- m --> .  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Apr 25, 2013 9:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU/PPU timing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've done several new test and am finishing them and going to post the readings. I'm forming a picture that isn't pleasing of the meta-situation here. I'm thinking there's no clear &quot;this happens at this moment&quot; situation, especially since the CPU can be at any master clock offset with respect to the PPU. That's less than 50ns, so a few gate propagation delays can mean the difference between it being read on one cycle or another. So because of buffers/counters there are between the clock and what the CPU reads/writes, timing is spread across cycles and dots. I think this means that there won't be a clear &quot;this happens on this cycle, that happens on that&quot;, unless you're emulating to master clocks and emulating all four CPU-PPU alignments. Even then, you'll have to implement delays, where something can happen but not be visible until a master clock later or so.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Apr 25, 2013 10:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU/PPU timing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I've done several new test and am finishing them and going to post the readings. I'm forming a picture that isn't pleasing of the meta-situation here. I'm thinking there's no clear &quot;this happens at this moment&quot; situation, especially since the CPU can be at any master clock offset with respect to the PPU. That's less than 50ns, so a few gate propagation delays can mean the difference between it being read on one cycle or another. So because of buffers/counters there are between the clock and what the CPU reads/writes, timing is spread across cycles and dots. I think this means that there won't be a clear &quot;this happens on this cycle, that happens on that&quot;, unless you're emulating to master clocks and emulating all four CPU-PPU alignments. Even then, you'll have to implement delays, where something can happen but not be visible until a master clock later or so.</div><br /><br />What I'm doing above is picking a particular alignment for which the behavior is known (742 I believe - would be nice to have this confirmed), checking the results you get for different PPU clock offsets near a point (or region perhaps) of interest with that alignment in Visual 2C02 (VBL setting and INT assertion in this case), and then doing some elimination to figure out what these offsets correspond to (&quot;1 before&quot;, &quot;at&quot;, &quot;1 after&quot;, etc.). Of course you can only be completely sure by testing on the real hw, but I think you could still come up with some pretty good guesses.<br /><br />Barring me having messed up, there doesn't seem to be any other way to assign <em>1 before</em>, etc., with the 742 alignment that would be likely to produce the observed behavior, even taking propagation delays and such into account.<br /><br />Edit: s/master clock offsets/PPU clock offsets/<br /><br />Edit 2: Calling it &quot;1 before&quot;, etc. is a bit arbitrary. It's not a point, as you say, and depends on CPU/PPU interaction around the region of interest. I'm basically just trying to figure out what happens when a read starts at PPU tick n for the 742 alignment at the moment.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed May 01, 2013 6:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU/PPU timing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, finally posting a lot of timing test results. Not complete by any measure, but if I don't post they might get lost in the shuffle of life. Pictures and some docs: <a href="http://blargg.8bitalley.com/temp/nes-signal-timings.zip" class="postlink">nes-signal-timings.zip</a><br /><br />The goal here is to get a clearer picture of when things happen and how these correspond to the various test ROMs and timings we see from a purely programming perspective.<br /><br />* terms - lays out basic terms, the four alignments, why they aren't trivial, how we can synchronize to the PPU frame, and a common timing reference in software to use<br />* timing pictures - descriptions of all the scope pictures showing various timings<br />* CPU cycle timing - distillation of the timings into one diagram<br /><br />One thing that is wanted is a picture of how CPU cycles correspong to PPU dots. It's still not clear when those begin.<br /><br />I believe that for the CPU, it may be considered beginning/ending on the falling edges of PHI2. I've used the CPU address line changes as a 0 reference, since it's useful for showing which cycle is of interest. I measured PHI2's falling edge to be 60ns before the address line change, and have read that this might be the &quot;proper&quot; beginning a CPU cycle.<br /><br />Do we have verification that /VBL goes low on the first dot of a frame? If so, then we have enough to form a clear picture of the timings for the four alignments.<br /><br />The PPU apparently latches internally when reading from it, so the CPU sees the state of things around the time PPU /CE is asserted. For example, even though /VBL goes high during the read, D7 to the CPU doesn't change, indicating that the PPU has a latch for outputs when reading from it.<br /><br />For what I'm calling the +0 clocks alignment (in the previously posted list, the last is +0 clocks, the next-to-last +1 clocks, etc.), we have CPU A8 going low for the access at +0ns, then at +163ns PPU /CE going low, presumably latching the VBL flag internally. If the CPU had read even one clock sooner, it wouldn't have found VBL set. So if VBL is set on the first dot, then we have a dot beginning around +163ns, and the CPU cycle at +0ns. A PPU dot is 186.24ns, so this is slightly less than a dot. There's probably a little propagation delay from the dot beginning to VBL getting set internally, so the dot probably begins a little sooner.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ns -------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 11111111112222222222333333333344444444445555555555<br />&nbsp; &nbsp; &nbsp; 7654321012345678901234567890123456789012345678901234567890123456789<br />&nbsp; &nbsp; &nbsp; _______&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;___<br />A0-A15_______\_______________________________________________________/___<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 559<br />&nbsp; &nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_________________________________<br />PHI2&nbsp; &nbsp;\___________________/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\___________<br />&nbsp; &nbsp; &nbsp; -60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;135&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;487<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ___________________&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_______<br />PPU /CE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \___________________________________/<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 163&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;517<br /><br />dots 0clk&#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;VBL set&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;<br />dots 1clk&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;VBL set&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;<br />dots 2clk&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;VBL set&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#93;<br />dots 3clk&nbsp; &nbsp; &#93;&#91;VBL set&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#93;&#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#93;<br />cpu a8&nbsp; &nbsp; &nbsp; &#93;&#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Read&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#93;&#91;<br />&nbsp; phi2 &#91;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Read&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#93;&#91;</div><br />So there are the probable timings, with the two interpretations of a CPU cycle shown.<br /><br />Note that if we examine only CPU reads, it's irrelevant where the CPU cycle is, since all the reads occur at the same point. The important thing is that an alignment of +0 clocks corresponds to the CPU reading the VBL flag the earliest possible in the frame.<br /><br />I haven't looked as much at writes. I'm guessing that they occur on the rising edge of the /CE line, once data lines have stabilized. SO that would put them about 352ns after reads, or about 7.6 clocks later, slightly less than 2 dots.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Wed May 22, 2013 11:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU/PPU timing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />About to look into this some more. I poked around a bit in Visual 2A03/2C02. Here's some stuff that might be useful before I forget it:<br /><br /><ul><li>I added a section on PPU address bus contents/timing to <a href="http://wiki.nesdev.com/w/index.php/PPU_rendering" class="postlink">http://wiki.nesdev.com/w/index.php/PPU_rendering</a> . In Visual 2C02 ALE is high exactly during the first cycle of a two-cycle VRAM access, so barring propagation delays, ALE goes high right when a PPU cycle starts (but obv. only for the first PPU cycle).</li><li><a href="http://wiki.nesdev.com/w/index.php/CPU_interrupts" class="postlink">http://wiki.nesdev.com/w/index.php/CPU_interrupts</a> (renamed from &quot;CPU interrupt quirks&quot;) now has more precise info on when interrupts are polled. Seems to be during the first phase (half-cycle) of the CPU cycle.</li><li><a href="http://wiki.nesdev.com/w/index.php/CPU_pin_out_and_signal_description" class="postlink">http://wiki.nesdev.com/w/index.php/CPU_pin_out_and_signal_description</a> has some more info on the timing of reads and writes.</li><li>Also added some misc. info to <a href="http://wiki.nesdev.com/w/index.php/PPU_pin_out_and_signal_description" class="postlink">http://wiki.nesdev.com/w/index.php/PPU_pin_out_and_signal_description</a>, though it might not be as relevant.</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Jun 06, 2013 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU/PPU timing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've figured out roughly what goes on with the <strong>VBlank</strong> in the PPU that causes the weird reading behavior.<br /><br />Inside the PPU, there are two key players when it comes to signal timing:<br /><br /><ol style="list-style-type: decimal"><li>Read/write signals like <strong>/r2002</strong> and <strong>/w2001</strong>.</li><li>The <strong>_io_ce</strong> signal.</li></ol><br />The read/write signals are generated directly by stuffing the <strong>r/w</strong> line and the three address bus lines from the CPU into a decoder (around node 419 in Visual 2C02). The <strong>r/w</strong> line and the address bus is set at the beginning of a read/write CPU cycle, so the read/write signals will have the corresponding values without delay as soon as the read or write starts (ignoring propagation delays - not sure if they're significant here).<br /><br />The <strong>_io_ce</strong> line comes from the address decoder (the chip marked &quot;LS139&quot; in <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/images/f/f3/Neswires.jpg">http://wiki.nesdev.com/w/images/f/f3/Neswires.jpg</a><!-- m -->). The address decoder is set up so that the chip enable signals are generated during the second, high phase of M2 (it basically has an &quot;AND M2&quot; condition on all the outputs, though some are inverted). The <strong>/DBE</strong> input to the PPU in the diagram corresponds to <strong>_io_ce</strong>, and is also inverted, so that <strong>_io_ce</strong> will be <em>low</em> during the second, high phase of M2. M2 has a modified non-50% duty cycle (see <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/CPU_pin_out_and_signal_description">http://wiki.nesdev.com/w/index.php/CPU_ ... escription</a><!-- m -->).<br /><br /><em>To summarize:</em> For a read/write cycle from the CPU, the internal read/write signals in the PPU will get their values right away, while <strong>_io_ce</strong> will go low during the second (high) phase of M2.<br /><br />Inside the PPU, the same signal, <strong>read_2002_output_vblank_flag</strong>, is used both to clear the VBlank flag and to hold the value of the read buffer (see the tutorial). While the read buffer is not held (closed off), it simply mirrors the VBlank flag. The relationship between the signals is<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">read_2002_output_vblank_flag = /r2002 NOR _io_ce</div><br /><br />This means that <strong>read_2002_output_vblank_flag</strong> goes high during the second phase of M2 during a read from $2002. Since this is the point where the value is held, we can make the following observation:<br /><br /><ul><li>The value returned by the read is the value the VBlank flag has when the high phase of M2 starts.</li></ul><br />To figure out the rest, there's one more piece needed: The signal that sets the VBlank flag (node 5807 - let's call it &quot;<strong>set_vbl_flag</strong>&quot;) is high during the first PPU half-cycle (i.e., during <strong>pclk0</strong>) of <strong>vpos</strong>=241/<strong>hpos</strong>=1. This means that if a read ends before the end of <strong>set_vbl_flag</strong>, the VBlank flag will still get set and remain set. However, if a read ends after <strong>set_vbl_flag</strong> (e.g. in a case where the high phase of M2 completely overlaps <strong>set_vbl_flag</strong>), then the flag will be cleared during and after it is being set, suppressing the setting.<br /><br />The NMI output is directly tied to the VBlank flag (it just has an additional &quot;AND nmi_enabled&quot; condition). Looking at the above, you can see how an NMI might be missed, as the high &quot;clearing&quot; phase of M2 might completely override <strong>set_vbl_flag</strong>, and thus the NMI.<br /><br />It's a bit confusing, but clicking around a bit helps. I also put some notes (mostly for myself) at <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/User:Ulfalizer">http://wiki.nesdev.com/w/index.php/User:Ulfalizer</a><!-- m --> .<br /><br />Sorry for not looking into the timing stuff you posted yet btw, but attacking the issue from two angles is probably a good idea at least. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Maybe <strong>read_2002_output_vblank_flag</strong> should be renamed to something like &quot;<strong>read_2002_clear_vblank_flag_and_hold_value</strong>&quot; by the way.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>