<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES programming without Assembler actually possible?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES programming without Assembler actually possible?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5914">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5914</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Jan 09, 2010 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES programming without Assembler actually possible?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JohnJohn wrote:</div><div class="quotecontent">(I'm asking because I searched the internet, but have never seen even an NES demo program written in C.)<br /></div>
<br />
<br />There actually is one, there is a tetris game written by Groepaz in C.  If look for his directory in the CC65 archive you will find it.  It uses the conio library, and he also wrote a conio library for the NES - but the problem is that the library won't work on a real NES.  Just on the version of FCEU that was available at the time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jan 09, 2010 3:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems that most attempts at coding for the NES using languages other than assembly happened at a time when the NES wasn't so well known (technically, I mean) and it wasn't as easy to test programs on hardware, so later it was discovered that these libraries and tools were not compatible with actual consoles, only with the forgiving emulators that existed back then.
<br />
<br />I don't want to be a dick, but I strongly believe that if a person can't learn 6502 assembly they will not be able to make games for the NES even if they use another language. Learning assembly is part of the process of understanding how the NES works, and if you can't handle that it's unlikely that you'll do anything significant with the system.
<br />
<br />We have a few examples here of people that didn't even know any other languages before 6502 assembly and they turned out to be pretty good NES coders. This shows that it's never too late to learn assembly, and if you already program anything else you are even more likely to grasp assembly if you try hard enough.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neilbaldwin</b> [ Sat Jan 09, 2010 3:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Listen to tokumaru: he speaks the truth.
<br />
<br /><img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sat Jan 09, 2010 7:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess it all comes down to what motivates you. If your goal is to make a game quickly regardless of what platform you write it for, the NES is probably not a good platform for you. If your goal is specifically to make a game that actually works on a real classic video game system, then it may be worth the extra effort to learn assembly.
<br />
<br />I know for me, it really came down to the fact that I loved the NES as a kid, still love it and play it, and thought there would be nothing cooler than making a game for it. Plus, it will be really easy to show what I make to others. Millions of people have a NES and even more people have an NES emulator on their toaster, cellphone, PC, dvd player or what have you.
<br />
<br />So if that's the reason you're interested in it, I'd say go for it. Assembly isn't all that hard, especially if you do know C and are familiar with pointers and such. Beyond that, you will need to learn hex and binary number systems, bitwise operations, and 2's complement math is useful as well.
<br />
<br />I learned those concepts from <a href="http://www.duntemann.com/assembly.htm" class="postlink">"Assembly Language: Step by Step" by Jeff Duntemann</a>. He targets X86, but many of the concepts carry (heh) over so well to 6502 I recommend it to newbies to assembly language in general.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JohnJohn</b> [ Sun Jan 10, 2010 5:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alright, well, then it's Assembly.
<br />
<br /><div class="quotetitle">Gradualore wrote:</div><div class="quotecontent">So if that's the reason you're interested in it, I'd say go for it. Assembly isn't all that hard, especially if you do know C and are familiar with pointers and such. Beyond that, you will need to learn hex and binary number systems, bitwise operations, and 2's complement math is useful as well.</div>
<br />Those things are absolutely no problem to me. I never had problems with pointers. And I know binary, hexadecimal, bitwise operations and the two's complement quite well.
<br />
<br />Now I have two more questions that I need to know in advance:
<br />
<br />1. What's the best tutorial to read? I found a lot tutorials that teach you how to program the NES, but what is the best, the most complete and the most comprehensive one?
<br />
<br />2. When I program an NES game, do I have to know how the game shall look like from the beginning? I mean, when I program with C++ or any other high level language, I can start making a game without actually knowing what the game will be like at all.
<br />At first I start with general graphic stuff: Creating an image class, giving it methods to load a bitmap, to write its bitmap or a part of it to the back buffer with or without transparent background, to write the back buffer to the screen etc. (DirectX is not that convenient here, so a bit of selfmade encapsulation is necessary.)
<br />Then I will create a level class on the logic side. (Like, a level internally consists of a two-dimensional array when the game has a top-down perspective.)
<br />Then I will make the graphic part capable of diplaying the level that is represented on the logic part. (I still have no idea what the game will be about.)
<br />Then I program a movable character class and let the graphic part display any characters in the levels too.
<br />Then I can slowly think of what the game shall actually do. I derive classes from the character class so that I have a player class whose objects receive manual input and an opponent class whose objects move according to a certain pattern.
<br />Then I can evaluate the game situation and make the game react to enemy touch (loss of energy or the loss of a life with the reset of the level), reaching the exit (loading of the next level) etc.
<br />So, as you see, I can spend a huge time with programming the basic stuff and I still don't need to worry yet if the game shall become a "Pac-Man" or a "Zelda" or a top-down car race. I can decide that later and don't need to rewrite existing code, just add new stuff accordingly.
<br />Is that also possible with NES programming? Or do I have to know exactly what I want the game to be since later changes would require a huge rewrite of the code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Jan 10, 2010 7:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JohnJohn wrote:</div><div class="quotecontent">So, as you see, I can spend a huge time with programming the basic stuff and I still don't need to worry yet if the game shall become a "Pac-Man" or a "Zelda" or a top-down car race. I can decide that later and don't need to rewrite existing code, just add new stuff accordingly.<br />Is that also possible with NES programming? Or do I have to know exactly what I want the game to be since later changes would require a huge rewrite of the code?<br /></div>
<br />
<br />For me there is some stuff (like the screen updating system, animation system, initialization, and sprite/sprite hit detection) that I wrote once and reuse forever with little modification (other than fixes/optimizations).  Sounds pretty much like the stuff you listed, so yeah, programming the NES is just like any other system.  The one thing you will want to know before though, is if you'll be scrolling horizontally, vertically, 4 directions, or 8 directions, if you want to allow scrolling backwards, stuff like that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 10, 2010 8:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Memblers is right... the type of scrolling does affect the design of your game engine pretty heavily, so that's probably the first thing to get out of the way.
<br />
<br />I'd say that although making games on the NES isn't that much different from other systems, it's a bit harder to make serious design changes later on. Good programmers will obviously try to make the different parts of the program independent of each other, but eventually, usually for performance reasons, things end up merging more than we'd like.
<br />
<br />So I guess that if you want to avoid multiple recoding cycles, it's better that you start out with a good notion of what kind of game you want.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 10, 2010 9:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That, and make a prototype for the PC first if you want.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 10, 2010 10:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">That, and make a prototype for the PC first if you want.</div>
<br />Sometimes that helps a lot, but other times I feel like it's a waste of time. For my raycaster I felt the need of prototyping, because it used a lot of pre-calculated values and I had to make sure those were correct. Also, the whole technique was experimental, so I wanted to make sure it worked.
<br />
<br />But when the overall process is pretty clear in my mind, and the details can be tweaked in assembly without much trouble, I usually code straight for the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sun Jan 10, 2010 4:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For me, the absolute best tutorial for NES programming was <a href="http://nesdev.com/NES101.zip" class="postlink">Michael Martin's NES 101 tutorial.</a> It has a complete program compilable by P65, an assembler written in perl. It demonstrates the basics of sprites, backgrounds, sounds and input. I think if you're already an experienced programmer, that's the best way to go.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Mon Jan 11, 2010 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Screw hex editing, I just thought of the craziest way to enter code.
<br />
<br />Ready for it?
<br />
<br />Use a tile editor.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jan 11, 2010 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strat wrote:</div><div class="quotecontent">Use a tile editor.</div>
<br />Heh! Sometimes I use tile editors with my programs just to get a visual representation of how much space I have used and how much is left. When doing that sometimes I try to identify pieces of code just for fun, and unrolled loops are particularly easy to find! =) I'd never change anything there though...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 11, 2010 2:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Sometimes I use tile editors with my programs just to get a visual representation of how much space I have used and how much is left.</div><br />So do I. They're also good for finding blank spaces where .align is skipping too far, so that I can re-Tetris the code and put something useful in that hole.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When doing that sometimes I try to identify pieces of code just for fun, and unrolled loops are particularly easy to find! =)</div>
<br />Switching among different consoles' tile formats can sometimes be good for finding compression formats. DPCM has a distinctive signature, as does Super NES BRR.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Sat May 08, 2010 8:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES programming without Assembler actually possible?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JohnJohn wrote:</div><div class="quotecontent">Hi,<br />I'm completely new to NES programming. I'm able to program with high level languages, but have never done anything Assembler-like.<br />So, I'd really like to know: Is it actually possible to program an NES game in C and compile it with cc65 without having to use Assembler? Or is the NES support for cc65 of no real practical use? (I'm asking because I searched the internet, but have never seen even an NES demo program written in C.)<br />If the latter is the case, are there any other compilers for programming NES games in a high level language or do I finally indeed have to resort to Assembler to get it done?</div>
<br />
<br />I guess this thread is a bit old already, the original poster didn't ever reply and the topic got to other issues, but if I may...
<br />Although I agree with what was said here that the best choice to develop for NES is pure assembler, you actually can code in C for the NES.
<br />I made a background+sprite+split scrolling demo and a metronome for the NES, to test a C library for CC65 I made, although it's very basic and I'm not working on it anymore.
<br />But you actually can make demos and games with C.
<br />I actually plan to re-write the library in assembler, so it's faster, but still has function definitions to call from C.
<br />The bottomline is of course you can read and write from and to memory with C, you can compile for NES with cc65, so it's perfectly possible to write games for NES in C.
<br />Will they be as efficient as if written in assembler? nope.
<br />Although you should know that the NES support in cc65 is rather poor. By default it sticks an entire ASCII charset into the CHR-ROM, and implements printf and such functions that make no sense in the NES.
<br />But with a little tweaking of config files, you can clean all that and make a decent NES program.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat May 08, 2010 10:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's a little platformer demo I wrote completely in C (including the music engine): <!-- m --><a class="postlink" href="http://thefox.aspekt.fi/super.nes">http://thefox.aspekt.fi/super.nes</a><!-- m -->
<br />
<br />So it's definitely possible to write games in C, even something else than puzzle games. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Although I must admit there's not too much CPU time to spare. I will release the source for the demo and the replacement CC65 NES library once I get the time to polish it up a bit...
<br />
<br />Only parts that are written in assembly are:
<br />- boot code
<br />- controller reading (I wanted to include DPCM safe controller reading in my library so I used blargg's code)
<br />- NMI handler (simply increases a variable in memory)
<br />
<br />Oh, also note that the music was made with PAL timing in mind.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>