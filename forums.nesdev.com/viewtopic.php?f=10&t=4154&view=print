<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Question about NES vectors and PPU</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Question about NES vectors and PPU</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4154">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4154</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Tue Jun 10, 2008 7:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Question about NES vectors and PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alright, first time posting a question. Note that I'm not new to programming nor assembly, but I'm new to programming a game and new to the assembler, meaning that I don't know how the assemblers work. 
<br />
<br />Well, I knows the vectors present in the NES, and know what they are suposed to do, in the microprocessor view. But what's a bit unclear is what are their purpose in a NES game. NMIs are for updating the screen (graphics), very clear because it's its very first purpose due of the behavior of WRAM when rendering. NMIs are also for sound, because it is a great idea to update this at a precise timing interval, and also update any "internal timer" of the game (ex. decreasing time left) or any time-based routine. But waht's up with the code in the reset vetor??? Okay for any initialisation code, but what else in run-time? Also, does the IRQ can be used for anything else than for graphic FX (status bar remain at it place)?
<br />
<br />PPU: it is another 65xx-based core unit, which is a CPU. It work in a kind of slave mode? What code it executes?
<br />
<br />Please warn me if I "jargonize", and consider my apologies if it is the case.
<br />
<br />Thanks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jun 10, 2008 7:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NMI: used to synchronize with VBL, also other things done every frame
<br />
<br />Reset: tells where game code starts. Used when powering on and when reset button is pressed.
<br />
<br />IRQ: BRK goes here, as well as APU interrupts and any mapper provides.
<br />
<br />The PPU is a hardware state machine, not a processor.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jun 10, 2008 7:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Question about NES vectors and PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent">NMIs are for updating the screen (graphics), very clear because it's its very first purpose due of the behavior of WRAM when rendering. NMIs are also for sound, because it is a great idea to update this at a precise timing interval, and also update any "internal timer" of the game (ex. decreasing time left) or any time-based routine.</div><br /><br />Yeah NMIs fire at a steady rate, so they can be used for timing mechanisms.  Also note that they fire at the start of VBlank, which indicates it is now safe to make PPU accesses for a certain time period (and thus updating the screen).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But waht's up with the code in the reset vetor??? Okay for any initialisation code, but what else in run-time?</div><br /><br />Reset vector is the entry point for your program.  It's only used at system startup and is not used at all at runtime (unless the user presses the reset button on the console).  It's not like other interrupts because you don't RTI from a reset.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, does the IRQ can be used for anything else than for graphic FX (status bar remain at it place)?</div><br /><br />Well it can be used for whatever you want.  Like for another timing mechanism... but usually it's used for raster effects (like splitting the screen).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">PPU: it is another 65xx-based core unit, which is a CPU. It work in a kind of slave mode? What code it executes?</div>
<br />
<br />The PPU does not run code... it is not a 65xx core unit.  It is just a graphics processor.  (EDIT:  maybe I shouldn't say "processor" since I guess it technically isn't a processor?  But I thought PPU stood for 'Picture Processing Unit'?)
<br />
<br />The PPU is the part of the NES that transforms the palette, nametables, and CHR into visible on-screen pixels that get output to the TV.  You do not program anything for the PPU, other than changing a few registers which change how the PPU renders.
<br />
<br />All of the 6502 code you write for your game will be exeucted by the CPU.  None of it is handled by the PPU.
<br />
<br />
<br />EDIT - doh blargg posted too quick

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doppelganger</b> [ Tue Jun 10, 2008 8:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It processes pictures, not code ;-)
<br />
<br />Also re: NMI's being for sound, technically this isn't true.  You can probably run sound at any time, it not being critical to be timed in vertical blank, although it's usually a good idea to run it in NMI if you're doing weird stuff like split-screen madness.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Wed Jun 11, 2008 2:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In fact if you want to get really technical, I suppose you could say it doesn't process a picture.......but data that it turns INTO a picture. (not sure if it actually processes the picture after that)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jun 11, 2008 6:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doppelganger wrote:</div><div class="quotecontent">It processes pictures, not code ;-)<br /><br />Also re: NMI's being for sound, technically this isn't true.  You can probably run sound at any time, it not being critical to be timed in vertical blank, although it's usually a good idea to run it in NMI if you're doing weird stuff like split-screen madness.</div>
<br />The PPU processes bits from VRAM/palette and turns them into a video waveform which the TV turns into a picture. And the NMI is for whatever the Famicom hardware designers put it there for, which was probably for periodic graphic and sound operations; just because the beginning VBL triggers it doesn't mean it's meant only for synchronization to VBL. You don't want sound interrupting your NMI code, nor do you want sound code being delayed by the time spent in the NMI routine if the sound interrupt happens to occur during it.
<br />
<br />To get really technical, the non-maskable interrupt (NMI) was meant for things which must interrupt the processor no matter what, like a "power is about to fail, so write critical state" or "break into low-level debugger" signal. The fact that the PPU can turn off off NMI shows that they are "misusing" it. The "proper" approach for the 6502 is to run all interrupts on IRQ, and differentiate them inside the interrupt handler by polling each possible interrupt source until the initiator is found. But since there's no other use for NMI, they use it as a second higher-priority interrupt, making interrupt handling faster since the routine doesn't need to poll as much, and ensuring that VBL code gets top priority.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 11, 2008 8:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">To get really technical, the non-maskable interrupt (NMI) was meant for things which must interrupt the processor no matter what, like a "power is about to fail, so write critical state" or "break into low-level debugger" signal.</div>
<br />Can you quote any MOS Technology datasheet that recommends these as the intended uses for NMI?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jun 11, 2008 9:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Can you quote any MOS Technology datasheet that recommends these as the intended uses for NMI?</div><br />Hmmm, all I find is this:<br /><div class="quotetitle">MOS 6502 Manual wrote:</div><div class="quotecontent">As is discussed, it is often desirable to have the ability to interrupt an interrupt with a high priority device which cannot afford to wait during the time interrupts are disabled.  For this reason, the MCS650X has a second interrupt line, called a Non-Maskable Interrupt.</div>
<br />Maybe I was wrong, and NMI is simply a second less-flexible interrupt line that's unmaskable, thus minimizing response time. The unmaskability still has the advantage that there's no way for software to disable it (short of telling external hardware to disable it as on the NES with the PPU).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Fri Jun 13, 2008 11:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So many thanks for these fast answers.
<br />
<br />The confusion with the PPU is because 2A03 and 2C02 were chips supplied by Ricoh and their name and pin package were so identical I thought they were actually 2 modified 6502s... But it was always clear to me that PPU doesn't read instructions back from the cartridge by its dedicated bus, but only graphic data. I only thought that, if it weren't a state machine but a modified 6502, it would have to run some code that would be inside the NES...
<br />
<br />So, code pointed by the reset vector,except for initialisation of the PPU and memory and everything you want to initialize (mappers, perhaps), does nothing? It means that, in a game, when RTI'ing, the main code simply waits another interrupt? That is the whole point I want to clarify. When RTI'ing, what main code would be supposed to do? Or in other words: when RTI'ing, so when CPU is inactive, what it can do? Also, except processing picture and (hopefully) sound, and reading controller(s), what else NMI have to do?
<br />
<br />@ doppelganger: of course NMIs are not for sound, but I knew it is very wise to use it in this way because Vblanks like you all said are a simple time base for it, and a fixed time base is crucial to sound to be played correctly (irregular notes or laggy music isn't cool)
<br />
<br />@ blaarg: I admire your knowledge of µP and electronic in general, you stand here like an encyclopedia in this forum. As I mentioned in the beginning, I knew the purpose of each vectors in the microprocessor view. Reset is what's normally runs, IRQ contains a routine to perform when an external device want that the µP pays attention to it (timers are considered "devices") and NMI is the highest priority of IRQs that is non-maskable in software and generally dedicaced for critical events. I can't hide you that I found very funny that the NMIs on NES can be actually "masked", hence proving what you told about missusing the NMI.
<br />
<br />By the way, have fun viewing this thingy making noise that I did ~6 month ago. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> <a href="http://fr.youtube.com/watch?v=VJMtdfLtKCE&amp;NR=1" class="postlink">http://fr.youtube.com/watch?v=VJMtdfLtKCE&amp;NR=1</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Jun 14, 2008 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent">So, code pointed by the reset vector,except for initialisation of the PPU and memory and everything you want to initialize (mappers, perhaps), does nothing?</div><br /><br />Not really....  Code pointed to by the reset vector is <em>your game</em>.  It's the entry point.  The reset vector simply tells the NES where the start of your program is.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It means that, in a game, when RTI'ing, the main code simply waits another interrupt?</div><br /><br />RTI simply jumps back to the code that was executing before the interrupt occured.  Just like RTS jumps back from a subroutine you JSR'd to -- RTI returns back from a routined that was NMI'd/IRQ'd to.<br /><br />You <em>do not</em> RTI from a reset... since nothing was happening before reset (the system was off) it would have nothing to return to.  RTIing here would just cause the CPU to jump to garbage code, which would just execute random opcodes and probably eventually deadlock, with another reset (ie:  power cycling the unit, or pressing the Reset button) being the only way to start it back up.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That is the whole point I want to clarify. When RTI'ing, what main code would be supposed to do? Or in other words: when RTI'ing, so when CPU is inactive, what it can do? Also, except processing picture and (hopefully) sound, and reading controller(s), what else NMI have to do?</div>
<br />
<br />The CPU is never inactive.  The only time it's inactive is when the system is powered off.
<br />
<br />Anyway... what code goes where is really a preference thing.  Many games do it different ways.  One common setup is something like:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">in NMI:<br />- update PPU &#40;$2007 writes&#41;<br />- update sprites &#40;$4014 writes&#41;<br />- set scroll &#40;$2000,$2005,$2005 writes&#41;<br />- JSR to music routine<br />- RTI<br /><br /><br />&quot;Main game&quot; &#40;gets interrupted by NMI&#41;:<br />- poll joypads &#40;$4016,$4017&#41;<br />- update game logic &#40;move objects, collision detection, etc&#41;<br />- wait for NMI and repeat the process once NMI exits<br /></div>
<br />
<br />Some games (SMB comes to mind, iirc) do <em>everything</em> inside NMI and simply have an infinite loop outside of it.  Other games (Final Fantasy) do nothing in NMI (they exit it immediately) and simply use it to know when VBlank has started.
<br />
<br />What you decide to do is completely your preference.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sat Jun 14, 2008 3:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent">So, code pointed by the reset vector,except for initialisation of the PPU and memory and everything you want to initialize (mappers, perhaps), does nothing?</div><br /><br />Not really....  Code pointed to by the reset vector is <em>your game</em>.  It's the entry point.  The reset vector simply tells the NES where the start of your program is.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It means that, in a game, when RTI'ing, the main code simply waits another interrupt?</div><br /><br />RTI simply jumps back to the code that was executing before the interrupt occured.  Just like RTS jumps back from a subroutine you JSR'd to -- RTI returns back from a routined that was NMI'd/IRQ'd to.<br /><br />You <em>do not</em> RTI from a reset... since nothing was happening before reset (the system was off) it would have nothing to return to.  RTIing here would just cause the CPU to jump to garbage code, which would just execute random opcodes and probably eventually deadlock, with another reset (ie:  power cycling the unit, or pressing the Reset button) being the only way to start it back up.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That is the whole point I want to clarify. When RTI'ing, what main code would be supposed to do? Or in other words: when RTI'ing, so when CPU is inactive, what it can do? Also, except processing picture and (hopefully) sound, and reading controller(s), what else NMI have to do?</div><br /><br />The CPU is never inactive.  The only time it's inactive is when the system is powered off.<br /><br /></div><br /><br />I think I posted in the wrong section  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />  . I'm not newb that much ( "newb" here is not pejorative). I know every single 6502 instruction (the documented ones), I know what they do and how to use them. I also know that a CPU cannot be inactive, except if an instruction tells the CPU to "sleep" and wait an interrupt, which don't exist in the 6502. And it was far away from my mind to have a RTI in main code! Don't worry, I study in electronic, so I know this stuff already.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br /><br />BUT, thank you Disch, thank you alot, because with this.......<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anyway... what code goes where is really a preference thing. Many games do it different ways. One common setup is something like: <br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">in NMI: <br />- update PPU &#40;$2007 writes&#41; <br />- update sprites &#40;$4014 writes&#41; <br />- set scroll &#40;$2000,$2005,$2005 writes&#41; <br />- JSR to music routine <br />- RTI <br /><br /><br />&quot;Main game&quot; &#40;gets interrupted by NMI&#41;: <br />- poll joypads &#40;$4016,$4017&#41; <br />- update game logic &#40;move objects, collision detection, etc&#41; <br />- wait for NMI and repeat the process once NMI exits <br />&nbsp;</div><br /><br /><br />Some games (SMB comes to mind, iirc) do everything inside NMI and simply have an infinite loop outside of it. Other games (Final Fantasy) do nothing in NMI (they exit it immediately) and simply use it to know when VBlank has started. <br /><br />What you decide to do is completely your preference.</div>
<br />...you answered <strong>exactly</strong> to my question.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  
<br />Maybe I wasn't clear. This is a known problem to me, and my apologies if it is the case. At least nobody tried to explain how interrupts work...
<br />
<br />Interresting... the problem is that my first thought about how to make an NES game engine is that it was something close to SMB, according to what you said. Hmm, in you "code" section, I'll have to know how to do in NMI: update PPU, update sprites, set scroll and in main code: update game logic, which is something I have absolutely no idea how...  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> 
<br />
<br />Hey, Thanks you all!.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Jun 14, 2008 4:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&quot;Main game&quot; &#40;gets interrupted by NMI&#41;:<br />- poll joypads &#40;$4016,$4017&#41;<br /></div><br /></div>
<br />
<br />Really? I'd think you would read the joypad in the NMI section, so it could happen once every frame, so you don't have a character moving at 100 pixels a frame or something like that. I suppose it depends on how long your game loop takes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jun 14, 2008 4:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I'd think you would read the joypad in the NMI section, so it could happen once every frame, so you don't have a character moving at 100 pixels a frame or something like that.</div>
<br />My engines increment a retrace count on NMI and do nothing else (like FF1 does). The main code relies on this retrace count changing 60 times a second. It waits for the retrace count to change, then updates VRAM, reads the controller, and does game logic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jun 14, 2008 5:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I'd think you would read the joypad in the NMI section, so it could happen once every frame, so you don't have a character moving at 100 pixels a frame or something like that.</div><br />My engines increment a retrace count on NMI and do nothing else (like FF1 does). The main code relies on this retrace count changing 60 times a second. It waits for the retrace count to change, then updates VRAM, reads the controller, and does game logic.</div>
<br />This is fine as long as you're sure your frame calculations won't go beyond the time at which the NMI fires. If the code takes longer than that, you'll misdetect the start of VBlank and will possibly mess with the PPU while the next frame is already rendering.
<br />
<br />Of course it's not desirable to have your game lagging, but in some more complex designs (Kirby's Adventure, for example) this does happen once in a while, so you'd better be prepared.
<br />
<br />And Celius, either way could work fine. In my game, I have a main loop processing input, scrolling, object AI and so on. Data to be sent to the PPU is calculated during that time, and when everything is ready, It sets a flag indicating so. When the NMI fires, it only updates the PPU if that flag is set. If by any chance the frame is not ready when the NMI fires, nothing is updated, but the sound code is still executed so that the music doesn't slow down. Anyway, after the main loop indicates that a frame is ready through the flag, it enters a loop that will only be broken when the NMI runs, because it clears that flag.
<br />
<br />The flag prevents the game from reading the joypad many times in case frames are calculated too quickly, because the next frame is only processed after the NMI code has been executed, so everything runs at the steady rate of 60Hz (or less, in case a frame takes too long, but never more than that).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Jun 14, 2008 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Really? I'd think you would read the joypad in the NMI section, so it could happen once every frame, so you don't have a character moving at 100 pixels a frame or something like that. I suppose it depends on how long your game loop takes.</div>
<br />
<br />Having joypad polling outside of NMI doesn't mean it will happen more than once a frame.  The "main game" code will only run once, then wait for an NMI to happen -- so there will always be an NMI between joypad polls.
<br />
<br />The reason I would leave it outside of NMI is because if there's slowdown, you don't poll the joypad more than necessary (unlike the music routine -- since even if there's slowdown, I wouldn't want the music to slow down).
<br />
<br />Anyway, my approach would probably be something like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Main Game:<br />- poll joypads<br />- process game logic<br />- compile a list of PPU writes that need to be done so that NMI can quickly just dump the stuff from the list into VRAM, without having to really compute anything<br />- set a &quot;waiting for NMI&quot; flag<br />- wait for said flag to become clear<br />- repeat the process<br /><br /><br />NMI:<br />- Check &quot;wait for NMI&quot; flag, do the following only if set:<br />--- Sprite DMA<br />--- read from precompiled list and do necessary PPU writes<br />--- clear &quot;wait for NMI&quot; flag<br /><br />&#40;do the rest regardless of that flag's state&#41;<br />- set scroll values appropriately<br />- set up whatever IRQs need to be set up &#40;do this first if they're CPU cycle based -- here otherwise&#41;<br />- JSR to music<br />- RTI<br /></div>
<br />
<br />The reason for skipping over the chunk if the flag is clear is in case of multiple NMIs firing before game logic finishes (ie: slowdown).  This will prevent frames from being "half drawn", parts of the frame being unnecessarily drawn multiple times, and/or potential VRAM corruption if the compiled list is still being compiled at the time the NMI fires.
<br />
<br />
<br />If the game engine is designed so that it never attempts to draw too much in 1 frame's worth of processing time... skipping all the drawing and sprite DMA stuff for a frame will work just fine, since next frame it won't have to draw more than 1 frame's worth of work (despite it not drawing anything this frame).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>