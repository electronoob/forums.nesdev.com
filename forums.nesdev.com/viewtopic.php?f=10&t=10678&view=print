<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How do I come about collision detection?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How do I come about collision detection?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=10678">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=10678</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Wed Nov 13, 2013 4:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How to write collision detection for player, bullets, etc.?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Nov 13, 2013 5:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">x_collision = ( object1_xmin &lt; object2_xmax ) &amp;&amp; ( object1_xmax &gt; object2_xmin)<br />y_collision = ( object1_ymin &lt; object2_ymax) &amp;&amp; ( object2_ymax &gt; object2_ymin)<br /><br />collision = x_collision &amp;&amp; y_collision</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 13, 2013 7:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Object x object collision uses the formula Bregalad posted. You have to keep track of the four edges (top, bottom, left and right) of your objects and compare them according to that formula. The basic idea is to make sure that the conditions that make a collision impossible aren't met. For example: if the right side of object 1 is smaller than the left side of object 2, they can't possibly be touching each other (draw it on paper and you'll understand). Small objects (such as bullets) can probably be just a point.<br /><br />Collisions between objects and the level map are different. If moving right, you have to check all the background blocks from the top right to the bottom right of the object (you'll have to convert object coordinates to map coordinates - if you're not scrolling, this can be as simple as dividing them by 16 or 8), to make sure that the character is allowed to move to that position. If it isn't, you have to push it back.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 13, 2013 8:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Round object collision, such as whether an explosion is touching something, is almost as easy. Once you know the objects' rectangles overlap, subtract x2-x1 and y2-y1, take their absolute value, use a lookup table to square them (.byte 0, 1, 4, 9, 16, ...), and compare this to the square of the sum of the radii. For example, an object 8 units across and an object 16 units across will have a collision radius of 8/2 + 16/2 = 12 units, so you're checking whether (x2 - x1)^2 + (y2 - y1)^2 &lt; 144.<br /><br />Another problem comes with what direction to push an object if it is moving diagonally, or if a block has appeared behind the object. I posted a fairly general solution to this problem in <a href="http://forums.nesdev.com/viewtopic.php?p=106161#p106161" class="postlink">another topic</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Nov 13, 2013 9:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Rect collision should test is the rects are <strong>not</strong> intersect, rather than is they intersect. It is faster. Like, if (x1+width1)&lt;x2, you already know that there is no collision, and can skip all further checks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Wed Nov 13, 2013 3:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Before you get to object to object collision detection you really need to think about limiting the scope of collision detection. CPU cycles are at a premium on the NES, and you really can't afford to test every object against every other object every frame at 60 FPS. Instead you need to use object groups.<br /><br />For instance, in a Contra-esque game, you might track the players, the player bullets, the enemies and the enemy bullets. Then your collision comparisons would only look at collisions between players and enemy bullets, and between enemies and player bullets, and between enemies and players. This significantly reduces the number of rect overlap calculations you have to do.<br /><br />Furthermore, depending on the requirements of the project, you may need to move to an interleaved collision system. Example: on odd frames you calculate player bullets to enemy collisions, and on even frames you calculate enemy and enemy bullets to player collisions.<br /><br />It's amazing how much of the CPU time gets spent updating positions and checking for collisions in your typical sidescroller. One way to reduce the CPU overhead is to limit one of your axis to an 8-bit value (like the Y value in SMB1, for instance). Reducing the number of 16-bit calculations will speed things up a bit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 13, 2013 3:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Furthermore, depending on the requirements of the project, you may need to move to an interleaved collision system. Example: on odd frames you calculate player bullets to enemy collisions, and on even frames you calculate enemy and enemy bullets to player collisions.</div><br />Thwaite does this. Collisions between a missile and an explosion are processed in even frames for even numbered explosions and odd frames for odd numbered explosions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Wed Nov 13, 2013 4:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To expand on what Shiru posted:<br /><br />You have two objects: A and B. A and B have four values; the X position of the left edge, X of right edge, Y of top edge, Y of bottom edge.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if A.right&nbsp; &lt; B.left&nbsp; &nbsp;then goto NO_COLLISION<br />if A.left&nbsp; &nbsp;&gt; B.right&nbsp; then goto NO_COLLISION<br />if A.bottom &lt; B.top&nbsp; &nbsp; then goto NO_COLLISION<br />if A.top&nbsp; &nbsp; &gt; B.bottom then goto NO_COLLISION<br />; If you get here, then a collision is taking place between A and B.<br />end<br />NO_COLLISION:<br />; If you get here, no collision is taking place.<br />end<br /></div><br /><br />What this code does is check for the possibilities that tell you there's no way a collision could take place. For instance, if the left edge of one is farther right than the right edge of the other, then you know a collision can't be taking place, and you don't need to check anything else.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Wed Nov 13, 2013 6:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, now harder question: Collisions with background. Mario does collisions with blocks and ground, but not e.g. with bushes or clouds. All those are part of the background. How SMB differentiates between those?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 13, 2013 6:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In general: When you decode your maps, you'll have to decide which tile numbers are passable and which aren't.<br /><br />Specifically, SMB1 breaks metatiles into four groups depending on how they're colored in the attribute table: $00-$3F, $40-$7F, $80-$BF, and $C0-$FF. If I recall correctly, each group has a threshold: lower numbers are solid and higher numbers are passable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 13, 2013 8:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">darkhog wrote:</div><div class="quotecontent">Mario does collisions with blocks and ground, but not e.g. with bushes or clouds. All those are part of the background.</div><br />The visual representation of a block should not be directly tied to its physical attributes. Most games use the concept of metatiles, blocks that are composed of several tiles (in most cases 4, arranged in a grid of 2x2), that in addition to the indices of the tiles have other attributes, like a palette index, a &quot;type&quot; code (solid, water, hazard, empty, etc.), a height map (for slopes), and so on. For drawing them you read their tiles and palette index in order to write to the name and attribute tables, while for collisions/physics you check their type, height maps, and so on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Nov 14, 2013 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Before you get to object to object collision detection you really need to think about limiting the scope of collision detection. CPU cycles are at a premium on the NES, and you really can't afford to test every object against every other object every frame at 60 FPS. Instead you need to use object groups.</div><br />I think it's okay to do it with 8 or so objects. At least that's what I do - but objects only call the routine if they need it.<br />The complexity is quadratic, so this will only work for small amount of objects.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ok, now harder question: Collisions with background.</div><br />In fact it's easier I think.<br /><br />Just do something like this pseudo code :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">boolean check_collision(x, y)<br />{<br />&nbsp; map_x = object_x &gt;&gt; 4 (or whathever other value depending on the size of your metatile)<br />&nbsp; map_y = object_y &gt;&gt; 4<br />&nbsp; metatile = map&#91;map_x&#93;&#91;map_y&#93;<br />&nbsp; return = meta_tiles_definition&#91;metatile&#93; &amp; collision_bit&nbsp; &nbsp;(depends how exactly you implemented your metatiles)<br />}<br /><br />topleft_bg_col = check_collision(object_xmin, object_ymin)<br />topright_bg_col = check_collision(object_xmax, object_ymin)<br />bottomleft_bg_col = check_collision(object_xmin, object_ymax)<br />bottomright_bg_col = check_collision(object_xmax, object_ymax)<br /><br />bg_collision = topleft_bg_col || topright_bg_col || bottomleft_bg_col || bottomright_bg_col<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 14, 2013 7:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You should not limit collision detection to the 4 corners of your objects... if you have a character that's 24 pixels tall you can have it go straight through a 16-pixel tall block. Ideally you'd check all blocks across the whole edge of the object. For example, if the player comes running and jumps against a solid metatile like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; +------A<br />&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; |+------+<br />&nbsp; &nbsp; &nbsp; | PLA&nbsp; || META |<br />&nbsp; &nbsp; &nbsp; | YER&nbsp; || TILE |<br />&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; |+------+<br />&nbsp; &nbsp; &nbsp; +------B<br />&nbsp; &nbsp; &nbsp;/<br />&nbsp; &nbsp; /<br />------------------------</div><br />If you check just the A and B points, he'll go through the meta tile. To solve this problem you have to check all blocks from point A to point B:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +------+<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : META :<br />&nbsp; &nbsp; &nbsp; +------A: TILE :<br />&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; |+------+<br />&nbsp; &nbsp; &nbsp; | PLA&nbsp; || META |<br />&nbsp; &nbsp; &nbsp; | YER&nbsp; || TILE |<br />&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; |+------+<br />&nbsp; &nbsp; &nbsp; +------B: META :<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : TILE :<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +------+</div><br />Also, you don't need to check all 4 sides every frame. Since an object can only move in one direction horizontally and one direction vertically, you need to check at most 2 sides. If an object moves right, its left side can't possibly collide with anything, so you don't even check it. If an object doesn't move left or right from one frame to the next, you don't have to check for horizontal collisions at all (the same goes for vertical movement).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 14, 2013 7:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If an object moves right, its left side can't possibly collide with anything, so you don't even check it.</div><br />This is true of a static map metatile, not so much of a map that changes blocks from solid to passable and vice versa.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Thu Nov 14, 2013 11:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I come about collision detection?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're performing collision detection against a tilemap whose tiles are very simple (as in, the tiles aren't complicated to the point where a tile can be solid on one half, and empty on the other half, tiles aren't round or have funny-shaped edges, things like that), then you can take advantage of this fact, and the fact that every tile is the same size.<br /><br />Let's pretend the player is 12x12, and the tiles of the tilemap are 8x8. It'll look something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">╔══════╗<br />║&nbsp; &nbsp; &nbsp; ║<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; ┌──────────┐<br />╚══════╝&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />╔══════╗&nbsp; &nbsp; │&nbsp; PLAYER&nbsp; │<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />╚══════╝&nbsp; &nbsp; └──────────┘<br />╔══════╗╔══════╗╔══════╗╔══════╗<br />║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║<br />║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║<br />╚══════╝╚══════╝╚══════╝╚══════╝<br /></div>To check the bottom edge of the player against the tilemap, first, look at the bottom left corner of the player, down one extra pixel, and sample the properties of the tile at this point:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">╔══════╗<br />║&nbsp; &nbsp; &nbsp; ║<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; ┌──────────┐<br />╚══════╝&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />╔══════╗&nbsp; &nbsp; │&nbsp; PLAYER&nbsp; │<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />╚══════╝&nbsp; &nbsp; └──────────┘<br />╔══════╗╔═══█══╗╔══════╗╔══════╗<br />║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║<br />║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║<br />╚══════╝╚══════╝╚══════╝╚══════╝<br /></div>Next, move your point to the right by the width of a tile (in this case, 8 pixels), but only if it doesn't exceed the width of the player. Because you're moving by the width of a tile, you are guaranteed to be looking at the next tile over:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">╔══════╗<br />║&nbsp; &nbsp; &nbsp; ║<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; ┌──────────┐<br />╚══════╝&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />╔══════╗&nbsp; &nbsp; │&nbsp; PLAYER&nbsp; │<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />╚══════╝&nbsp; &nbsp; └──────────┘<br />╔══════╗╔═══░══╗╔═══█══╗╔══════╗<br />║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║<br />║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║<br />╚══════╝╚══════╝╚══════╝╚══════╝<br /></div>Moving the point by the width of a tile again will exceed the width of the player. So instead, check the bottom right corner of the player, down one extra pixel, and sample the properties of the tile at this point:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">╔══════╗<br />║&nbsp; &nbsp; &nbsp; ║<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; ┌──────────┐<br />╚══════╝&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />╔══════╗&nbsp; &nbsp; │&nbsp; PLAYER&nbsp; │<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />║&nbsp; &nbsp; &nbsp; ║&nbsp; &nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />╚══════╝&nbsp; &nbsp; └──────────┘<br />╔══════╗╔═══░══╗╔═══░══█╔══════╗<br />║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║<br />║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║║&nbsp; &nbsp; &nbsp; ║<br />╚══════╝╚══════╝╚══════╝╚══════╝<br /></div><br /><br />If any of those tiles were solid, then the player doesn't fall. If zero of those tiles were solid, then the player falls.<br /><br /><br />Checking the other edges of the player work in a similar manner: To check the left edge of the player, start at the top left corner of the player (pushed out one pixel to the left), and move down in &quot;tile_height&quot; increments, sampling each pixel until you get to or move past the bottom left corner (pushed out one pixel to the left), at which point you check the bottom left corner itself. If all of the tiles at those pixels were solid, then the player can't pass through. If none of them were solid, then they player can pass through.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>