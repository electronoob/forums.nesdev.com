<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - cc65: Unnecessary code when accessing pointers</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">cc65: Unnecessary code when accessing pointers</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17470">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17470</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jun 27, 2018 4:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Is there any way I can force the compiler to treat this as a byte?</div><br />Only the result of (src+3) matters, you don't have to cast everything else. Cast has higher precedence than &gt;&gt; or most operators so you don't need extra parentheses either (unless you prefer them to make the order clear.)<br /><br />This works for me:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;<br />; i = (unsigned char)(j+3) &gt;&gt; 2;<br />;<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_j<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#$03<br />&nbsp; &nbsp;lsr&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;lsr&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_i<br />;</div><br />(i and j as zpsym)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Wed Jun 27, 2018 4:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks. Yeah, this seems to work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Wed Jun 27, 2018 6:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Since we are talking about unnecessary code for pointers, I could talk about one of the result of my tests. One of my function that is processing intensive data requires to be done in asm. The parameters are for an entity that we put in a buffered list so it will be set later in the OAM when parsing is over.  Instead of passing the parameters to the function or one my one with some with some ZP variables, what I do is I share a block of memory from the asm side and map it on the C side with a struct. This way all parameters, pointer included, are accessed with an indexer and cc65 doesn't use it's ptr1 thingy.<br /><br />The c code would look that way when imported:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">someheader.h<br /><br />typedef struct {<br />&nbsp; &nbsp; char x;<br />&nbsp; &nbsp; char y;<br />&nbsp; &nbsp; char foo;<br />&nbsp; &nbsp; const char* data;<br />} myParmeters_t;<br /><br />extern myParameters_t addToBufferParams;<br />#pragma zpsym(&quot;adToBufferParams&quot;);<br /><br />void __fastcall__ addToBuffer(void);<br /></div><br /><br />when used:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;mycode.c<br /><br />&nbsp; &nbsp;// ---- begin addToBuffer -----<br />&nbsp; &nbsp;addToBufferParams.x = actor.x;<br />&nbsp; &nbsp;addToBufferParams.y = actor.y;<br />&nbsp; &nbsp;addToBufferParams.foo = actor.foo;<br />&nbsp; &nbsp;addToBufferParams.data = actor.currentFrame;<br />&nbsp; &nbsp;addToBuffer();<br />&nbsp; &nbsp;// ----- end addToBuffer ---------<br /></div><br /><br />Finally, the assembler would look something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />.export _addToBuffer := subAddToBuffer<br /><br />.exportzp _addToBufferParams := zpParams<br /><br /><br />.segment &quot;ZEROPAGE&quot;<br />zpPrams:&nbsp; &nbsp; .res 10&nbsp; &nbsp;; this is a shared buffer for parameters<br /><br />.segment &quot;BSS&quot;<br />bufferedList&nbsp; .res 60 ; some list of entitites<br /><br />.segment &quot;CODE&quot;<br /><br />;-&gt;BEGIN----------------------------------------------------------------------<br />; add to entity buffer<br />;<br />; Note: uses shared parameters (etc etc)<br />;<br />.proc subAddToBuffer<br />;---------------- Parameters definitions ----------------<br />.scope local<br />&nbsp; &nbsp; &nbsp;posX = zpParams<br />&nbsp; &nbsp; &nbsp;posY = zpParams+1<br />&nbsp; &nbsp; &nbsp;foo&nbsp; = zpParams+2<br />&nbsp; &nbsp; &nbsp;data = zpParams+3<br />.endscope<br />;---------------------------------------------------------<br /><br />&nbsp; &nbsp; &nbsp;; ... some code before<br />&nbsp; &nbsp; &nbsp;lda local::posY<br />&nbsp; &nbsp; &nbsp;; do some processing<br />&nbsp; &nbsp; &nbsp;sta bufferedList,x<br />&nbsp; &nbsp; &nbsp;; .... mode code here<br /><br />&nbsp; &nbsp; &nbsp;rts<br />.endproc<br />;-&lt;END------------------------------------------------------------------------<br /></div><br /><br />The code generated on the C side access the shared buffer with indexers (_addToBufferParams,x) for all parameters so it should be fast enough. But, it may be possible that different structs may generate different access code so more testing would be required.<br /><br />One thing that may not be relevant to this conversation but found interesting is that cc65 doesn't use signed char by default: everything is unsigned unless you pass a parameter to the compiler. Which means, unless you want to write portable code (which is maybe not that possible with the nes), you don't have to write unsigned char since char is unsigned. My definition of variable were becoming long with all those const that I may decide to remove the unecessary unsigned for now. I'm just used to write it out of habit.<br /><br />edit:<br />I confused it with some other tests, it was not with an indexer but like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; addTobufferedListParams.data = hero.frame.current;<br />518 ;<br />519&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.dbg&nbsp; &nbsp; line, &quot;src/example1.c&quot;, 201<br />520&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_hero+7+1<br />521&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_addTobufferedListParams+3+1<br />522&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_hero+7<br />523&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_addTobufferedListParams+3<br /></div><br /><br />edit2:<br />Updated the asm code since it did something else. This code is written by end for example only.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Thu Jun 28, 2018 12:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I immediately wondered about your statement that simple struct members are accessed with an indexer. Since the location of the member is known at compile time, it's of course simply a +.<br /><br /><br />I didn't know that char was always unsigned in cc65. I would say this goes against the C standard.<br /><br />In my case, it doesn't really make a difference. One of the first things that I included into my C code was:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef unsigned char byte;<br />typedef signed char sbyte;<br />typedef byte bool;<br />#define false 0<br />#define true 1</div><br /><br />By the way, you should be really careful about sharing struct data with Assembly code. Because you always need to make sure that the data actually matches between the two.<br /><br />I've had a similar issue where I wanted to use my struct for the current character data in Assembly, but it's not possible to actually export the member names as constants, so that they can be included in Assembly.<br /><br />That's why I'm using inline assembly whenever I need the performance of Assembly with the data of a struct:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* C version: */<br />En = Player.Energy;<br /><br />/* Inline Assembly in C: */<br />__asm__(&quot;LDA %v + %b&quot;, Player, offsetof(struct GameCharacter, Energy));<br />__asm__(&quot;STA %v&quot;, En);</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Thu Jun 28, 2018 6:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">I didn't know that char was always unsigned in cc65. I would say this goes against the C standard.</div><br /><a href="https://en.cppreference.com/w/c/language/arithmetic_types" class="postlink">The signedness of the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char</tt> type is implementation-dependent</a>; that means it can be either signed or unsigned, and the implementer of the compiler is free to choose one. Oddly enough, whatever the signedness, it is not equivalent to the corresponding signed/unsigned <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char</tt>. That is, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned char</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">signed char</tt> are always distinct types.<br /><br />You may want to use types in the <a href="https://en.cppreference.com/w/c/types/integer" class="postlink">stdint.h</a> header, if you want portable integers of known sizes you can use these handy typedefs: int8_t, uint8_t, uint16_t etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Thu Jun 28, 2018 6:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">https://en.cppreference.com/w/c/language/arithmetic_types wrote:</div><div class="quotecontent">char - type for character representation. <strong><span style="text-decoration: underline">Equivalent to either signed char or unsigned char</span></strong> (which one is implementation-defined and may be controlled by a compiler commandline switch), but <strong><span style="text-decoration: underline">char is a distinct type, different from both signed char both unsigned char</span></strong></div><br />So which one is it? Equivalent to either one of the two or always distinct from both?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Jun 28, 2018 7:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Regarding c65, I think it is mentioned here:<br /><br /><!-- m --><a class="postlink" href="http://cc65.github.io/doc/cc65.html#toc7.15">http://cc65.github.io/doc/cc65.html#toc7.15</a><!-- m --><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">7.15 #pragma signed-chars ([push,] on|off)<br /><br />Changes the signedness of the default character type. If the argument is &quot;on&quot;, default characters are signed, otherwise characters are unsigned. The compiler default is to make characters unsigned since this creates a lot better code. This default may be overridden by the --signed-chars command line option.<br /><br />The #pragma understands the push and pop parameters as explained above.<br /></div><br />As for standards, is seems to be c89 with a few things from c99:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">--standard std<br /><br />    This option allows to set the language standard supported. The argument is one of<br /><br />    c89<br /><br />        This disables anything that is illegal in C89/C90. Among those things are // comments and the non-standard keywords without underscores. Please note that cc65 is not a fully C89 compliant compiler despite this option. A few more things (like floats) are missing.<br />    c99<br /><br />        This enables a few features from the C99 standard. With this option, // comments are allowed. It will also cause warnings and even errors in a few situations that are allowed with --standard c89. For example, a call to a function without a prototype is an error in this mode.<br />    cc65<br /><br />        This is the default mode. It is like c99 mode, but additional features are enabled. Among these are &quot;void data&quot;, non-standard keywords without the underlines, unnamed function parameters and the requirement for main() to return an int.<br /><br />    Please note that the compiler does not support the C99 standard and never will. c99 mode is actually c89 mode with a few selected C99 extensions.<br /></div><br /><br />edit:<br /><br />I forgot about the main point talked, using some mapped values with struct. Yes, there is some risks but it simplify a lot of access so I guess if the person is organized it should be usable. Of course, when there is a bug with overlapping values then the fun begins .. ^^;;; I guess it a compromise between speed, usability and risk of weird bugs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slembcke</b> [ Wed Jul 11, 2018 11:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm a bit late to the party, but register variables can be a good solution to the original problem.<br /><br />For instance, this function avoids copying the pointer into a scratch location. You can mark function arguments as register too, and it generates slightly different code.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void bar(void){<br />&nbsp; &nbsp;register u8 *foo;<br />&nbsp; &nbsp;*foo = 5;<br />}<br /></div><br /><br />Accessing the pointer is cheaper now, but the downside is there is kind of a lot of code (like 20 bytes) associated with saving and restoring register variables. So use them carefully.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;<br />; register u8 *foo;<br />;<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;regbank+14<br />&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;regbank+15<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;pushax<br />;<br />; *foo = 5;<br />;<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$05<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(regbank+14),y<br />;<br />; }<br />;<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;regbank+14<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;regbank+15<br />&nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;incsp2<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>