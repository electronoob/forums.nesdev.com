<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Help with noob problems in my noob code?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Help with noob problems in my noob code?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5662">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5662</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Wed Oct 21, 2009 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Help with noob problems in my noob code?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've spent a lot of time away from NES programming and I'm trying to come back and get a better feel for it.
<br />I'm working on a ball and paddle game and I'm running into problems right away.
<br />My lame collision works as it is. But, if I add so much as a NOP, it hangs upon collision. It also fills the second ram page with what looks like nonsense. What could make it so fragile? I'm not doing a million things between vblanks.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.inesmap 0<br />&nbsp; &nbsp;.inesmir 1<br />&nbsp; &nbsp;.ineschr 1<br /><br />&nbsp; &nbsp;.bank 1&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw VBlank_Routine ; address to execute on VBlank<br />&nbsp; &nbsp;.dw Start&nbsp; &nbsp; ; address to execute on reset<br />&nbsp; &nbsp;.dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no whatever<br /><br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $0000<br />VBlankOrNo:&nbsp; &nbsp;&nbsp; &nbsp;.db&nbsp; &nbsp;0<br />Direction:&nbsp; &nbsp;&nbsp; &nbsp;.db 0 ;ball direction 0=left<br />&nbsp; &nbsp;.org $0300 ; OAM Copy location $0300<br />&nbsp; &nbsp;<br />Sprite0_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite0_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite0_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite0_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite1_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite1_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite1_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite1_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite2_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite2_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite2_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite2_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br /><br />; this would just go on and on for however many sprites you have<br />&nbsp; &nbsp;.org $8000&nbsp; ; code starts at $8000 or $C000<br />&nbsp; &nbsp;<br />;-------------------------------------------------------------------------<br />reset:<br />&nbsp; &nbsp; sei&nbsp; &nbsp; &nbsp; &nbsp; ; ignore IRQs<br />&nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; &nbsp; ldx #$40<br />&nbsp; &nbsp; stx $4017&nbsp; ; disable APU frame IRQ<br />&nbsp; &nbsp; ldx #$ff<br />&nbsp; &nbsp; txs&nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; &nbsp; stx $2000&nbsp; ; disable NMI<br />&nbsp; &nbsp; stx $2001&nbsp; ; disable rendering<br />&nbsp; &nbsp; stx $4010&nbsp; ; disable DMC IRQs<br />&nbsp; &nbsp;stx $2005<br />&nbsp; &nbsp;stx $2005<br /><br />&nbsp; &nbsp; ; Optional &#40;omitted&#41;:<br />&nbsp; &nbsp; ; Set up mapper and jmp to further init code here.<br /><br />&nbsp; &nbsp; ; First of two waits for vertical blank to make sure that the<br />&nbsp; &nbsp; ; PPU has stabilized<br />vblankwait1:&nbsp; <br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait1<br /><br />&nbsp; &nbsp; ; We now have about 30,000 cycles to burn before the PPU stabilizes.<br />&nbsp; &nbsp; ; Use it to clear RAM.&nbsp; X is still 0...<br />&nbsp; &nbsp; txa<br />clrmem:<br />&nbsp; &nbsp; sta $000,x<br />&nbsp; &nbsp; sta $100,x<br />&nbsp; &nbsp; sta $200,x<br />&nbsp; &nbsp; sta $300,x<br />&nbsp; &nbsp; sta $400,x<br />&nbsp; &nbsp; sta $500,x<br />&nbsp; &nbsp; sta $600,x<br />&nbsp; &nbsp; sta $700,x&nbsp; ; Remove this if you're storing reset-persistent data<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; bne clrmem<br />;-------------------------------------------------------------------------<br /><br />VBlank_Routine:<br />&nbsp; &nbsp;;start of function to execute on VBlank<br />&nbsp; &nbsp;inc VBlankOrNo<br />&nbsp; &nbsp;; add one &#40;1&#41; to VBlankOrNo, will be 1 if VBlank, 0 if not.<br />&nbsp; &nbsp;rti&nbsp; ; RTI is &#40;Interrupt RETurn or ReTurn from Interrupt&#41;<br />&nbsp; &nbsp;<br />Start:<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldx #$00&nbsp; &nbsp; ; clear X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;; start of pallete loading code<br /><br />&nbsp; &nbsp;lda #$3F&nbsp; &nbsp; ; have $2006 tell<br />&nbsp; &nbsp;sta $2006&nbsp; &nbsp;; $2007 to start<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp; ; at $3F00 &#40;pallete&#41;.<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;<br />loadpal:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; this is a freaky loop<br />&nbsp; &nbsp;lda tilepal, x&nbsp; ; that gives 32 numbers<br />&nbsp; &nbsp;sta $2007&nbsp; &nbsp; &nbsp; &nbsp;; to $2007, ending when<br />&nbsp; &nbsp;inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X is 32, meaning we<br />&nbsp; &nbsp;cpx #32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; are done.<br />&nbsp; &nbsp;bne loadpal&nbsp; &nbsp; &nbsp;; if X isn't =32, goto &quot;loadpal:&quot; line.<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;; end of pallete loading code<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$20<br />&nbsp; &nbsp;sta $2006 ; give $2006 both parts of address $2020.<br />&nbsp; &nbsp;sta $2006 <br /><br />load_name_tables:<br />; Jam some text into the first name table &#40;at $2400, thanks to mirroring&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$04<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #low&#40;ourMap&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $10<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #high&#40;ourMap&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $11<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$20<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2006<br />load_name_tables_loop:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda &#91;$10&#93;,y<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; &nbsp; bne load_name_tables_loop<br />&nbsp; &nbsp;&nbsp; &nbsp;inc $11<br />&nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp; &nbsp; &nbsp; bne load_name_tables_loop<br /><br />setup_Y_X:<br />&nbsp; &nbsp;ldx #$0<br />&nbsp; &nbsp;stx Sprite0_T<br />&nbsp; &nbsp;stx Sprite0_S<br />&nbsp; &nbsp;stx Sprite1_S<br />&nbsp; &nbsp;stx Sprite2_S<br />&nbsp; &nbsp;stx Sprite1_X<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;stx Sprite1_T<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;stx Sprite2_T<br />&nbsp; &nbsp;lda #$70<br />&nbsp; &nbsp;sta Sprite0_Y<br />&nbsp; &nbsp;sta Sprite2_Y<br />&nbsp; &nbsp;adc #$7<br />&nbsp; &nbsp;sta Sprite1_Y<br />&nbsp; &nbsp;lda #$80<br />&nbsp; &nbsp;sta Sprite2_X<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%10001000&nbsp; ;<br />&nbsp; &nbsp;sta $2000&nbsp; &nbsp; &nbsp; &nbsp;; <br />&nbsp; &nbsp;lda #%00011110&nbsp; ; Our typical PPU Setup code.<br />&nbsp; &nbsp;sta $2001&nbsp; &nbsp; &nbsp; &nbsp;; <br />&nbsp;; ---------------------------------------------------<br />&nbsp;; Setup is done<br />&nbsp;; ---------------------------------------------------<br />&nbsp;<br />infinite:&nbsp; ; a label to start our infinite loop<br />WaitForVBlank:<br />&nbsp; &nbsp;lda VBlankOrNo ; A = VBlankOrNO<br />&nbsp; &nbsp;cmp #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; if A == 1 then is VBlank<br />&nbsp; &nbsp;bne WaitForVBlank ; if not VBlank, then loop and do again<br />&nbsp; &nbsp;dec VBlankOrNo ; 1-- or VBlankOrNO - 1 . VBlankOrNo will be 0 again.<br />&nbsp; &nbsp;; vblank part is done<br /><br />&nbsp; &nbsp;lda #3 ; load sprite DMA offset<br />&nbsp; &nbsp;sta $4014 ; write sprite offset to PPU<br /><br />&nbsp; &nbsp;lda #$01&nbsp; &nbsp;; these<br />&nbsp; &nbsp;sta $4016&nbsp; ; lines<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;; setup/strobe the <br />&nbsp; &nbsp;sta $4016&nbsp; ; keypad.<br /><br />&nbsp; &nbsp;lda $4016&nbsp; ; load Abutton Status <br />&nbsp; &nbsp;and #1<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Bbutton Status<br />&nbsp; &nbsp;and #1<br />&nbsp; &nbsp;lda $4016&nbsp; ; load Select Status<br />&nbsp; &nbsp;and #1 <br />&nbsp; &nbsp;lda $4016&nbsp; ; load Start Status<br />&nbsp; &nbsp;and #1 <br />&nbsp; &nbsp;lda $4016&nbsp; ; load UP Status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp; ; just check the least significant bit aka 00000001<br />&nbsp; &nbsp;beq Load_Down ; if it wasn't pushed go to the next button<br />&nbsp; &nbsp;dec Sprite0_Y ; if it was pushed move the sprite UP<br />Load_Down:<br />&nbsp; &nbsp;lda $4016&nbsp; ; load DOWN Status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp; ; just check the least significant bit aka 00000001<br />&nbsp; &nbsp;beq Load_Left ; if it wasn't pushed go to the next button<br />&nbsp; &nbsp;inc Sprite0_Y ; if it was pushed move the sprite Down<br />Load_Left:<br />&nbsp; &nbsp;lda $4016&nbsp; ; load LEFT Status<br />&nbsp; &nbsp;and #1 <br />&nbsp; &nbsp;lda $4016&nbsp; ; load RIGHT Status<br />&nbsp; &nbsp;and #1 <br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA Direction ; zero on start<br />&nbsp; &nbsp;BNE Go_Right&nbsp; ; if 1 go_right<br />&nbsp; &nbsp;LDA Sprite0_X<br />&nbsp; &nbsp;ADC #8<br />&nbsp; &nbsp;CMP Sprite2_X ; see if sprite 1 is on same x and sprite 0<br />&nbsp; &nbsp;BNE NO_COL&nbsp; &nbsp; ; if it isn't keep going left<br />&nbsp; &nbsp;LDA Sprite0_Y<br />&nbsp; &nbsp;SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set carry for subtraction<br />&nbsp; &nbsp;SBC Sprite2_Y ; subtract sprite 1 y from sprite 0 y to see if it is greater or less<br />&nbsp; &nbsp;BPL POS&nbsp; &nbsp; &nbsp; &nbsp;; if 1 is less than 0 jump POS<br />&nbsp; &nbsp;CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clear carry for addition<br />&nbsp; &nbsp;ADC #8&nbsp; &nbsp; &nbsp; &nbsp; ; if greater see if it's within 7<br />&nbsp; &nbsp;BPL COL&nbsp; &nbsp; &nbsp; &nbsp;; if it is, change direction to &quot;right&quot;<br />&nbsp; &nbsp;JMP NO_COL&nbsp; &nbsp; ; if not, keep on going left<br />POS:<br />&nbsp; &nbsp;SBC #8&nbsp; &nbsp; &nbsp; &nbsp; ; if less see if it's withing 7<br />&nbsp; &nbsp;SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set carry for subtraction<br />&nbsp; &nbsp;BMI COL&nbsp; &nbsp; &nbsp; &nbsp;; if it is, change direction to &quot;right&quot;<br />&nbsp; &nbsp;JMP NO_COL&nbsp; &nbsp; ; if not, keep on going left<br />COL:<br />&nbsp; &nbsp;INC Direction ; set direction to &quot;right&quot;<br />&nbsp; &nbsp;<br />Go_Right:<br />&nbsp; &nbsp;INC Sprite2_X ; moves right<br />&nbsp; &nbsp;LDA Sprite2_X<br />&nbsp; &nbsp;CMP #247&nbsp; &nbsp; &nbsp; ; see if we hit the right side of the screen<br />&nbsp; &nbsp;BNE infinite&nbsp; ; if we didn't start the loop over<br />&nbsp; &nbsp;dec Direction ; if we did, set direction to &quot;left&quot;<br />&nbsp; &nbsp;JMP infinite<br />NO_COL:<br />&nbsp; &nbsp;DEC Sprite2_X ; moves left<br />&nbsp; &nbsp;nop<br />&nbsp; &nbsp;jmp infinite<br /><br />tilepal:&nbsp; &nbsp;.incbin &quot;pong.pal&quot;&nbsp; ; a label for our pallete data<br />ourMap: .incbin &quot;pong.map&quot; ; assuming our.map is the binary map file.<br />&nbsp; &nbsp;.bank 2<br />&nbsp; &nbsp;.org $0000<br />&nbsp; &nbsp;.incbin &quot;pong.bkg&quot;<br />&nbsp; &nbsp;.incbin &quot;pong.spr&quot;</div>
<br />Thanks a lot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JunoMan</b> [ Wed Oct 21, 2009 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help with noob problems in my noob code?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For a start you need to add a jump over the Vblank_Routine after the clrmem part or was that just a typo?
<br />
<br />Juno

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Wed Oct 21, 2009 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just copied the start up portion from the web. So if it is a typo, it isn't mine.
<br />I added "JMP Start" after the bne clrmem, but NOP's still crash it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Wed Oct 21, 2009 4:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You don't have any reset vectors at $FFFA-$FFFF defined, do you?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JunoMan</b> [ Wed Oct 21, 2009 4:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure if you need it as I see you are following the GBA guy tutorials.
<br />
<br />in the NMI you probably need to push the status registers as the inc will change the flags
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">VBlank_Routine:<br />&nbsp; &nbsp;php<br />&nbsp; &nbsp;;start of function to execute on VBlank<br />&nbsp; &nbsp;inc VBlankOrNo<br />&nbsp; &nbsp;; add one &#40;1&#41; to VBlankOrNo, will be 1 if VBlank, 0 if not.<br />&nbsp; &nbsp;plp<br />&nbsp; &nbsp;rti&nbsp; ; RTI is &#40;Interrupt RETurn or ReTurn from Interrupt&#41;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Wed Oct 21, 2009 4:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ccovell wrote:</div><div class="quotecontent">You don't have any reset vectors at $FFFA-$FFFF defined, do you?</div>
<br />
<br />*My* code doesn't start until the controller checking starts. So, the resets are probably taken from GBA Guy.
<br />
<br />This looks like the extent of it.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.bank 1&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw VBlank_Routine ; address to execute on VBlank<br />&nbsp; &nbsp;.dw Start&nbsp; &nbsp; ; address to execute on reset<br />&nbsp; &nbsp;.dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no whatever</div>
<br />
<br />I added the php and plp in vblank but it still hangs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Oct 21, 2009 6:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JunoMan wrote:</div><div class="quotecontent">in the NMI you probably need to push the status registers as the inc will change the flags</div>
<br />Not necessary. On interrupts the flags are automatically pushed, and RTI restores them. You only need to push/restore A, X and Y, if you use them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Oct 21, 2009 6:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Skidlz wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.bank 1&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw VBlank_Routine ; address to execute on VBlank<br />&nbsp; &nbsp;.dw Start&nbsp; &nbsp; ; address to execute on reset<br />&nbsp; &nbsp;.dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no whatever</div></div>
<br />You used "Start" as the reset point, so none of the code before it (i.e. all the initialization) is running. Change that "Start" to "reset", which is where you want the program to start. You do need that JMP to skip over the VBlank_Routine though. Better yet, move the VBlank_Routine to after the infinite loop.
<br />
<br />EDIT: Also, pointing your NMI vector to "0" isn't a good idea either. In case an IRQ happens, the CPU will try to execute RAM variables as if they were code... not good. Just have it point to a location in ROM with an RTI instruction, so that in case of an IRQ it simply returns.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JunoMan</b> [ Thu Oct 22, 2009 5:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I can't believe I missed that obvious mistake. Explains why the NMI routine wasn't breaking it when it was being executed (in theory) after the start code.
<br />
<br />I guess it would have been easier to debug if the rest of the files were supplied to assemble it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Thu Oct 22, 2009 9:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JunoMan wrote:</div><div class="quotecontent">I can't believe I missed that obvious mistake. Explains why the NMI routine wasn't breaking it when it was being executed (in theory) after the start code.<br /><br />I guess it would have been easier to debug if the rest of the files were supplied to assemble it.</div>
<br />
<br />I can upload the files somewhere if anyone can use them.
<br />I changed "Start" to reset but the problem persists.
<br />The code currently looks like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.inesmap 0<br />&nbsp; &nbsp;.inesmir 1<br />&nbsp; &nbsp;.ineschr 1<br /><br />&nbsp; &nbsp;.bank 1&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw VBlank_Routine ; address to execute on VBlank<br />&nbsp; &nbsp;.dw reset&nbsp; &nbsp; ; address to execute on reset<br />&nbsp; &nbsp;.dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no whatever<br /><br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $0000<br />VBlankOrNo:&nbsp; &nbsp;&nbsp; &nbsp;.db&nbsp; &nbsp;0<br />Direction:&nbsp; &nbsp;&nbsp; &nbsp;.db 0 ;ball direction 0=left<br />&nbsp; &nbsp;.org $0300 ; OAM Copy location $0300<br />&nbsp; &nbsp;<br />Sprite0_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite0_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite0_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite0_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite1_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite1_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite1_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite1_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite2_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite2_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite2_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite2_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br /><br />; this would just go on and on for however many sprites you have<br />&nbsp; &nbsp;.org $8000&nbsp; ; code starts at $8000 or $C000<br />&nbsp; &nbsp;<br />;-------------------------------------------------------------------------<br />reset:<br />&nbsp; &nbsp; sei&nbsp; &nbsp; &nbsp; &nbsp; ; ignore IRQs<br />&nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; &nbsp; ldx #$40<br />&nbsp; &nbsp; stx $4017&nbsp; ; disable APU frame IRQ<br />&nbsp; &nbsp; ldx #$ff<br />&nbsp; &nbsp; txs&nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; &nbsp; stx $2000&nbsp; ; disable NMI<br />&nbsp; &nbsp; stx $2001&nbsp; ; disable rendering<br />&nbsp; &nbsp; stx $4010&nbsp; ; disable DMC IRQs<br />&nbsp; &nbsp;stx $2005<br />&nbsp; &nbsp;stx $2005<br /><br />&nbsp; &nbsp; ; Optional &#40;omitted&#41;:<br />&nbsp; &nbsp; ; Set up mapper and jmp to further init code here.<br /><br />&nbsp; &nbsp; ; First of two waits for vertical blank to make sure that the<br />&nbsp; &nbsp; ; PPU has stabilized<br />vblankwait1:&nbsp; <br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait1<br /><br />&nbsp; &nbsp; ; We now have about 30,000 cycles to burn before the PPU stabilizes.<br />&nbsp; &nbsp; ; Use it to clear RAM.&nbsp; X is still 0...<br />&nbsp; &nbsp; txa<br />clrmem:<br />&nbsp; &nbsp; sta $000,x<br />&nbsp; &nbsp; sta $100,x<br />&nbsp; &nbsp; sta $200,x<br />&nbsp; &nbsp; sta $300,x<br />&nbsp; &nbsp; sta $400,x<br />&nbsp; &nbsp; sta $500,x<br />&nbsp; &nbsp; sta $600,x<br />&nbsp; &nbsp; sta $700,x&nbsp; ; Remove this if you're storing reset-persistent data<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; bne clrmem<br />;-------------------------------------------------------------------------<br />&nbsp; &nbsp;JMP Start<br />VBlank_Routine:<br />&nbsp; &nbsp;;start of function to execute on VBlank<br />&nbsp; &nbsp;inc VBlankOrNo<br />&nbsp; &nbsp;; add one &#40;1&#41; to VBlankOrNo, will be 1 if VBlank, 0 if not.<br />&nbsp; &nbsp;rti&nbsp; ; RTI is &#40;Interrupt RETurn or ReTurn from Interrupt&#41;<br />&nbsp; &nbsp;<br />Start:<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldx #$00&nbsp; &nbsp; ; clear X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;; start of pallete loading code<br /><br />&nbsp; &nbsp;lda #$3F&nbsp; &nbsp; ; have $2006 tell<br />&nbsp; &nbsp;sta $2006&nbsp; &nbsp;; $2007 to start<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp; ; at $3F00 &#40;pallete&#41;.<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;<br />loadpal:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; this is a freaky loop<br />&nbsp; &nbsp;lda tilepal, x&nbsp; ; that gives 32 numbers<br />&nbsp; &nbsp;sta $2007&nbsp; &nbsp; &nbsp; &nbsp;; to $2007, ending when<br />&nbsp; &nbsp;inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X is 32, meaning we<br />&nbsp; &nbsp;cpx #32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; are done.<br />&nbsp; &nbsp;bne loadpal&nbsp; &nbsp; &nbsp;; if X isn't =32, goto &quot;loadpal:&quot; line.<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;; end of pallete loading code<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$20<br />&nbsp; &nbsp;sta $2006 ; give $2006 both parts of address $2020.<br />&nbsp; &nbsp;sta $2006 <br /><br />load_name_tables:<br />; Jam some text into the first name table &#40;at $2400, thanks to mirroring&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$04<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #low&#40;ourMap&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $10<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #high&#40;ourMap&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $11<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$20<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2006<br />load_name_tables_loop:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda &#91;$10&#93;,y<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; &nbsp; bne load_name_tables_loop<br />&nbsp; &nbsp;&nbsp; &nbsp;inc $11<br />&nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp; &nbsp; &nbsp; bne load_name_tables_loop<br /><br />setup_Y_X:<br />&nbsp; &nbsp;ldx #$0<br />&nbsp; &nbsp;stx Sprite0_T<br />&nbsp; &nbsp;stx Sprite0_S<br />&nbsp; &nbsp;stx Sprite1_S<br />&nbsp; &nbsp;stx Sprite2_S<br />&nbsp; &nbsp;stx Sprite1_X<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;stx Sprite1_T<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;stx Sprite2_T<br />&nbsp; &nbsp;lda #$70<br />&nbsp; &nbsp;sta Sprite0_Y<br />&nbsp; &nbsp;sta Sprite2_Y<br />&nbsp; &nbsp;adc #$7<br />&nbsp; &nbsp;sta Sprite1_Y<br />&nbsp; &nbsp;lda #$80<br />&nbsp; &nbsp;sta Sprite2_X<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%10001000&nbsp; ;<br />&nbsp; &nbsp;sta $2000&nbsp; &nbsp; &nbsp; &nbsp;; <br />&nbsp; &nbsp;lda #%00011110&nbsp; ; Our typical PPU Setup code.<br />&nbsp; &nbsp;sta $2001&nbsp; &nbsp; &nbsp; &nbsp;; <br />&nbsp;; ---------------------------------------------------<br />&nbsp;; Setup is done<br />&nbsp;; ---------------------------------------------------<br />&nbsp;<br />infinite:&nbsp; ; a label to start our infinite loop<br />WaitForVBlank:<br />&nbsp; &nbsp;lda VBlankOrNo ; A = VBlankOrNO<br />&nbsp; &nbsp;cmp #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; if A == 1 then is VBlank<br />&nbsp; &nbsp;bne WaitForVBlank ; if not VBlank, then loop and do again<br />&nbsp; &nbsp;dec VBlankOrNo ; 1-- or VBlankOrNO - 1 . VBlankOrNo will be 0 again.<br />&nbsp; &nbsp;; vblank part is done<br /><br />&nbsp; &nbsp;lda #3 ; load sprite DMA offset<br />&nbsp; &nbsp;sta $4014 ; write sprite offset to PPU<br /><br />&nbsp; &nbsp;;nop<br />&nbsp; &nbsp;lda #$01&nbsp; &nbsp;; these<br />&nbsp; &nbsp;sta $4016&nbsp; ; lines<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;; setup/strobe the <br />&nbsp; &nbsp;sta $4016&nbsp; ; keypad.<br /><br />&nbsp; &nbsp;lda $4016&nbsp; ; load Abutton Status <br />&nbsp; &nbsp;and #1<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Bbutton Status<br />&nbsp; &nbsp;and #1<br />&nbsp; &nbsp;lda $4016&nbsp; ; load Select Status<br />&nbsp; &nbsp;and #1 <br />&nbsp; &nbsp;lda $4016&nbsp; ; load Start Status<br />&nbsp; &nbsp;and #1 <br />&nbsp; &nbsp;lda $4016&nbsp; ; load UP Status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp; ; just check the least significant bit aka 00000001<br />&nbsp; &nbsp;beq Load_Down ; if it wasn't pushed go to the next button<br />&nbsp; &nbsp;dec Sprite0_Y ; if it was pushed move the sprite UP<br />Load_Down:<br />&nbsp; &nbsp;lda $4016&nbsp; ; load DOWN Status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp; ; just check the least significant bit aka 00000001<br />&nbsp; &nbsp;beq Load_Left ; if it wasn't pushed go to the next button<br />&nbsp; &nbsp;inc Sprite0_Y ; if it was pushed move the sprite Down<br />Load_Left:<br />&nbsp; &nbsp;lda $4016&nbsp; ; load LEFT Status<br />&nbsp; &nbsp;and #1 <br />&nbsp; &nbsp;lda $4016&nbsp; ; load RIGHT Status<br />&nbsp; &nbsp;and #1 <br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA Direction ; zero on start<br />&nbsp; &nbsp;BNE Go_Right&nbsp; ; if 1 go_right<br />&nbsp; &nbsp;LDA Sprite0_X<br />&nbsp; &nbsp;ADC #8<br />&nbsp; &nbsp;CMP Sprite2_X ; see if sprite 1 is on same x and sprite 0<br />&nbsp; &nbsp;BNE NO_COL&nbsp; &nbsp; ; if it isn't keep going left<br />&nbsp; &nbsp;LDA Sprite0_Y<br />&nbsp; &nbsp;SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set carry for subtraction<br />&nbsp; &nbsp;SBC Sprite2_Y ; subtract sprite 1 y from sprite 0 y to see if it is greater or less<br />&nbsp; &nbsp;BPL POS&nbsp; &nbsp; &nbsp; &nbsp;; if 1 is less than 0 jump POS<br />&nbsp; &nbsp;CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clear carry for addition<br />&nbsp; &nbsp;ADC #8&nbsp; &nbsp; &nbsp; &nbsp; ; if greater see if it's within 7<br />&nbsp; &nbsp;BPL COL&nbsp; &nbsp; &nbsp; &nbsp;; if it is, change direction to &quot;right&quot;<br />&nbsp; &nbsp;JMP NO_COL&nbsp; &nbsp; ; if not, keep on going left<br />POS:<br />&nbsp; &nbsp;SBC #8&nbsp; &nbsp; &nbsp; &nbsp; ; if less see if it's withing 7<br />&nbsp; &nbsp;SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set carry for subtraction<br />&nbsp; &nbsp;BMI COL&nbsp; &nbsp; &nbsp; &nbsp;; if it is, change direction to &quot;right&quot;<br />&nbsp; &nbsp;JMP NO_COL&nbsp; &nbsp; ; if not, keep on going left<br />COL:<br />&nbsp; &nbsp;INC Direction ; set direction to &quot;right&quot;<br />&nbsp; &nbsp;<br />Go_Right:<br />&nbsp; &nbsp;INC Sprite2_X ; moves right<br />&nbsp; &nbsp;LDA Sprite2_X<br />&nbsp; &nbsp;CMP #247&nbsp; &nbsp; &nbsp; ; see if we hit the right side of the screen<br />&nbsp; &nbsp;BNE infinite&nbsp; ; if we didn't start the loop over<br />&nbsp; &nbsp;dec Direction ; if we did, set direction to &quot;left&quot;<br />&nbsp; &nbsp;JMP infinite<br />NO_COL:<br />&nbsp; &nbsp;DEC Sprite2_X ; moves left<br />&nbsp; &nbsp;nop<br />&nbsp; &nbsp;jmp infinite<br /><br />tilepal:&nbsp; &nbsp;.incbin &quot;pong.pal&quot;&nbsp; ; a label for our pallete data<br />ourMap: .incbin &quot;pong.map&quot; ; assuming our.map is the binary map file.<br />&nbsp; &nbsp;.bank 2<br />&nbsp; &nbsp;.org $0000<br />&nbsp; &nbsp;.incbin &quot;pong.bkg&quot;<br />&nbsp; &nbsp;.incbin &quot;pong.spr&quot;</div>
<br />Thanks for all the help so far.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JunoMan</b> [ Thu Oct 22, 2009 11:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looks ok.. Can you stick the other files somewhere. That would make it much easier to fix.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Oct 23, 2009 3:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another thing that appears to be wrong (but I'm not sure because I'm not a NESASM user) is that you state that there is only one PRG bank (.inesprg 1) but in fact you have two. I can't see anything else wrong.
<br />
<br />What exactly isn't working right when you run it in an emulator?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Fri Oct 23, 2009 10:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JunoMan wrote:</div><div class="quotecontent">Looks ok.. Can you stick the other files somewhere. That would make it much easier to fix.</div><br /><br /><!-- m --><a class="postlink" href="http://www.mediafire.com/download.php?jymyigz4wyj">http://www.mediafire.com/download.php?jymyigz4wyj</a><!-- m --><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Another thing that appears to be wrong (but I'm not sure because I'm not a NESASM user) is that you state that there is only one PRG bank (.inesprg 1) but in fact you have two. I can't see anything else wrong. <br /><br />What exactly isn't working right when you run it in an emulator?</div><br /><br />I saw something in another post about NESASM treating banks as 32K instead of 16K, or some such thing. It assembles so I would guess it's correct.<br /><br />The demo consists of a ball and a paddle. The ball collides with the paddle and bounces in the unmodified code. If I add *any* opcode at seemingly any point in the code, the demo freezes when the ball hits the paddle.[/quote]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Oct 23, 2009 11:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Skidlz wrote:</div><div class="quotecontent">I saw something in another post about NESASM treating banks as 32K instead of 16K, or some such thing.</div><br />It doesn't really matter how NESASM treats them, iNES files always counts PRG banks in 16KB units. Anyway, it's a fact that you are trying to assemble 32KB of PRG ROM, and if ".inesprg 1" writes a 1 to the PRG bank count field in the header, it's wrong. Try using a 2 here and see if it makes any difference.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It assembles so I would guess it's correct.</div>
<br />Well, NESASM is notorious for outputting glitched binaries instead of showing errors. It is known to mess up with addressing modes and such and not telling the user anything. Don't assume it's correct just because it assembles.
<br />
<br />BTW, what are you using to test your ROM? Make sure to test on different emulators, and that new and reliable emulators (such as Nestopia and Nintendulator) are in that list. Please tell us if different emulators behave differently.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Fri Oct 23, 2009 11:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It doesn't really matter how NESASM treats them, iNES files always counts PRG banks in 16KB units. Anyway, it's a fact that you are trying to assemble 32KB of PRG ROM, and if ".inesprg 1" writes a 1 to the PRG bank count field in the header, it's wrong. Try using a 2 here and see if it makes any difference.</div><br /><br />I get it. If it's writing to the iNES header, all that matters is what ends up in the header.<br />Well I changed it to ".inesprg 2" and it wont do anything at all.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">BTW, what are you using to test your ROM? Make sure to test on different emulators, and that new and reliable emulators (such as Nestopia and Nintendulator) are in that list. Please tell us if different emulators behave differently.</div>
<br />
<br />I use FCEUXD/FCEU and it has always worked. I know that doesn't mean much so I downloaded Nestopia.
<br />Nestopia gives the error "CPU Jam!" when I add a NOP. It also refuses to run with ".inesprg 2"

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>