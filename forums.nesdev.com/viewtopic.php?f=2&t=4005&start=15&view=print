<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Polygon filling..</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Polygon filling..</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4005">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4005</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>_cgtr_</b> [ Mon Mar 31, 2008 7:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just ran your test rom on the real hardware.
<br />
<br />Nintendulator's output is the closest match to the real hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Mon Mar 31, 2008 9:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">_cgtr_ wrote:</div><div class="quotecontent">I just ran your test rom on the real hardware.<br /><br />Nintendulator's output is the closest match to the real hardware.</div>I've rechecked Nintendulator and it seems to shift by multiple lines, regardless of what I stated earlier, though its emulation is definitely cycle-exact which is ominous. So do you mean that it shifts by a single line, which could probably be fixed by waiting a few extra cycles before turning on the display, or more than one, in which case I'm probably screwed?
<br />In case of the former I've prepared a second test where you can control the delay with the controller, which hopefully should make it possible to stabilize it to never shift vertically.
<br />
<br />Anyway, your help is much appreciated. Now I think I'll go further check Nintendulator's code some more to see if I can figure out what's going on.
<br />
<br /><a href="http://minoan.ath.cx/~doynax/6502/blanking2.zip" class="postlink">http://minoan.ath.cx/~doynax/6502/blanking2.zip</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Mar 31, 2008 10:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The DMC is constantly running, even when disabled.  There's no way to make it stop, really.  Instead you just tell it to not fetch bytes and to be silent.  However internally it's period divider still clocks itself, and its shifter keeps shifting.
<br />
<br />Because of this, whenever you "turn on" the DMC it doesn't start actually playing until it finishes its current cycle.  Which, depending on the set frequency, could be up to several hundred CPU cycles!  This means that you have a <em>very</em> large window where the IRQ could happen, making precise timing pretty much impossible.  This is why games only use DMC IRQs as a rough timer, then use sprite-0 hit to fine-tune their timing.
<br />
<br />Even at the fastest DMC playback speed, there's 54 cycles between delta shifts.  This means you have about a 54*8 = <em><span style="text-decoration: underline">432 cycle</span></em> window that the IRQ will fall in (several scanlines!).  And it only gets worse with slower playback speeds.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Apr 01, 2008 6:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">Even at the fastest DMC playback speed, there's 54 cycles between delta shifts.  This means you have about a 54*8 = <em><span style="text-decoration: underline">432 cycle</span></em> window that the IRQ will fall in (several scanlines!).  And it only gets worse with slower playback speeds.</div>Gaah! I give up, there just aren't any decent timing values for a centered screen. Not if I want to minimize the amount of busy-waiting (i.e. use high frequencies) and support both PAL and NTSC anyway.
<br />
<br />Time to go to plan B: Timed vblank code..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Apr 01, 2008 8:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can still use DMC IRQs, just fall back to sprite 0 for fine-tuning the timing.
<br />
<br />You could make this work by having a chunk of your nametable nothing but blank (transparent) tiles except for a small marker tile a few scanlines above where you want your actual mini-screen to start.  Put sprite 0 on top of that marker tile and wait for sprite-0 to hit after the DMC IRQ triggers.
<br />
<br />Of course this means:
<br />
<br />1)  you will need to have the PPU on for the top portion of the screen (can't make PPU accesses during that time).  Although you can still turn the PPU off and make accesses after you turn the PPU off for the bottom portion of the screen.
<br />
<br />2)  You will need to keep a large chunk of one of the nametables empty so that garbage isn't rendered for the top portion.  But if the actual display window is smaller, then I don't see this as being a real problem.
<br />
<br />3)  A small marker tile will be visible above the main window.  But note you can get around this by palette manipulation.  If you have the BG tile have an entry in its palette that's the same as the backdrop color, and give sprite-0 low priority, then the marker tile will be invisible.
<br />
<br />
<br />I would think that waiting 8 or so scanlines for sprite 0 hit is far more preferable than waiting for 70 or so in timed loops.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Apr 01, 2008 8:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">You can still use DMC IRQs, just fall back to sprite 0 for fine-tuning the timing.<br /><br />You could make this work by having a chunk of your nametable nothing but blank (transparent) tiles except for a small marker tile a few scanlines above where you want your actual mini-screen to start.  Put sprite 0 on top of that marker tile and wait for sprite-0 to hit after the DMC IRQ triggers.</div>Actually I tried that method. You can even blank the top part of the screen as long as you turn it on again right before the sprite 0 hit loop. Then just scroll to the visible portion of the nametable and you get a nice stable display.<br />The real problem is that the DMC timing granularity is way too high, and by an unlucky coincidence there aren't any reasonable timing values for setting up a 20-22 character high screen. It sort of works on NTSC, but there isn't anything even close on PAL (which happens to be my main target).<br />Of course I could use zero length samples with frequency $f to get an IRQ every 400 cycles, but that would waste about 10% of the blanking period on interrupt handling.<br /><br /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">I would think that waiting 8 or so scanlines for sprite 0 hit is far more preferable than waiting for 70 or so in timed loops.</div>I meant timed code as in rewriting the VRAM upload code to run for a predictable number of cycles and calculate ahead of time just how many tiles I can afford to transfer per interrupt. Then just wait for whatever remainder you've got left and turn on the screen.
<br />This means that I have to split anything unpredictable out of the vblank, costing me a bunch of cycles and memory, but at least it'll be a tad more NTSC friendly since the vertical blanking portion itself will run faster. Plus I won't need any code to figure out the vblank code's PPU address after an interrupt, which ought to be far trickier to write than the cycle counting..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Apr 01, 2008 10:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The real problem is that the DMC timing granularity is way too high, and by an unlucky coincidence there aren't any reasonable timing values for setting up a 20-22 character high screen. It sort of works on NTSC, but there isn't anything even close on PAL (which happens to be my main target).</div>
<br />
<br />By my math, it looks like PAL actually works out much better.  But maybe I fudged up somewhere.  Here's what I came up with:
<br />
<br />For a 20 character (160 scanline) screen to be centered, you want 40 scanlines above and below the image.  On NTSC this works out to needing to wait 20+1+40 = 61 scanlines from NMI, and on PAL this is 70+1+40=111 scanlines.
<br />
<br />I cut 9 scanlines from that so that there's wiggleroom (52 lines NTSC, 102 PAL).  In CPU cycles this worked out to:
<br />
<br />NTSC:  5910
<br />PAL:  10869
<br />
<br />For PAL, DMC freq $D goes 624 cycles/byte, and $F goes 400 cycles/byte.  This worked out to:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 624 * 17 = 10608&nbsp; &lt;--&nbsp; freq=D, len=1<br />+ 400 * 1&nbsp; = 11008&nbsp; &lt;--&nbsp; freq=F, len=0<br /></div><br /><br />11008 cycles is a little over, but it should be within the given wiggleroom.  Of course you'd want to prefix this with a freq=F, len=0 to keep the window small.  So you'd probably end up doing this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI<br />freq=F, len=0<br />IRQ &#40;should happen virtually instantly&#41;<br />freq=D, len=1<br />IRQ<br />freq=F, len=0<br />IRQ<br />wait for sprite 0<br /></div><br /><br />The first IRQ should happen right away as long as the DMC wasn't still playing something from last frame (which it shouldn't be).... unless my understanding of the DMC is all wrong.  Either way it's worth trying.<br /><br /><br />For NTSC the numbers were much uglier.  Any 17 length went too long.. even the highest frequency.  So the best thing I could find was going with really low frequencies:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 3184 * 1 = 3184&nbsp; &lt;--&nbsp; freq=0, len=0<br />+ 2720 * 1 = 5904&nbsp; &lt;--&nbsp; freq=3, len=0<br /></div>
<br />
<br />But again, if you prefix that with with the freq=F bit, the window should stay relatively small (432 cycles)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Apr 01, 2008 11:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, your math seems sound but it's not what I'm actually seeing ;)
<br />With a single $0d interrupt of length $01 triggered from the start of the frame NMI I'm getting up to 24 lines of busy-waiting (~16% of vblank) until the 40th scanline, and I can't imagine the emulators would be (consistently) off by that much. On the other hand $0d is very nearly perfect on NTSC. Feel free to <a href="http://www.minoan.ath.cx/~doynax/6502/blanking3.zip" class="postlink">check it out yourself</a> if you want to.
<br />Besides I could hardly afford to waste 10 scanlines as "wriggle room" in any case. I'm going to be uploading up to 240 tiles (maybe 160 on average) per rendered frame, plus the nametable, so every cycle is precious.
<br />
<br />As I see it I've got the option of either stringing together a chain $0f interrupts of length zero (with a longer "seed" interrupt), just letting the screen be off-center, using a VRC mapper or trying my hand at timed code. And right now the timed code seems like the cleanest solution, with a decent mapper I could even start the blanking period without any busy-waiting and use DMC for its intended purpose.
<br />
<br />edit:
<br />By the way there's a third way of setting the DMC interrupts. Instead of starting the first from the NMI handler you could let the bottom one trigger the top, and constantly calibrate things by way of sprite-0 hit testing and 9-sprites-on-a-line tests (I'm assuming that flag is accurate enough for timing anyway). But I didn't have any more luck with that method when I tried it on an emulator with stable DMC resets.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Wed Apr 02, 2008 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Whee! My new predictable transfer method (that is it takes a predictable number of cycles, I haven't gotten around to writing the code which makes the predictions yet) actually fills some polygons now =)
<br />Of course there's nothing "3d" about it yet or any form animation either for that matter, so I can still only hope my performance estimates are in the right ballpark, but laying down some vertices manually and watching it place characters is oddly exciting.
<br />
<br />That is it draws this fugly little "ship":
<br /><img src="http://minoan.ath.cx/~doynax/6502/PolyNES_ship.png" alt="Image" />
<br />Using this character set:
<br /><img src="http://minoan.ath.cx/~doynax/6502/PolyNES_tiles.png" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Apr 03, 2008 9:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looks promising. Keep the work up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Fri Apr 04, 2008 4:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Does DMC DMA always steal the same two(?) cycles. That is can it block the processors arbitrarily, does it wait for the bus to become available or is it more complicated than that?
<br />
<br />For instance the C64's 6510 can't just be halted in the middle of a write period, that is when performing consecutive writes, so the VIC starts tying to stop the processor three cycles early (the worst case is an interrupt/BRK with 3 write cycles) and actually halts it at the first read. Meaning that up to three cycles are truly lost, something which can be exploited in stable raster code by placing an RMW instruction right before the DMA to reclaim two of the cycles..
<br />
<br />I ask because I'd like to be able to predict how many cycles will be stolen over a span of several thousand cycles when running DMC. Something which would be a nightmare if it works anything like on the C64. I'm thinking the APU has the sames issues but unlike a graphics chip it can afford to fetch the new data a few cycles late, but it's not something I want to be surprised by later on and for all I know the APU might use an even more convoluted scheme.
<br />
<br />edit: The wiki claims DMC DMA takes four cycles, which would correspond to three cycles of waiting for a write period to settle plus one cycle for actually fetching the sample. Has anyone put together a test ROM which compares the timings of a sequence of NOPs to that of RMW instructions? Then again other sources have claimed all sorts of numbers for the DMA thievery so I'm not panicking just yet..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Fri Apr 04, 2008 8:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wrote a test ROM myself only to discover that Nintendulator appears to follow this theory. Well sort of, the numbers don't quite add up to what I'd have expected but an lsr $ff is faster than a sta $ffff,x which in turn is faster than a lda ($ff),y.
<br />I'm uploading <a href="http://www.minoan.ath.cx/~doynax/6502/dma_delay.zip" class="postlink">the damned thing</a> anyway just because I spent so much time on it ;)
<br />
<br />So I guess I'm going to have to figure out a transfer loop where the stores don't "resonate" with the DMC frequency. For instance a simple unrolled lda abs,x / sta ppu_write sequence takes eight cycles per byte, which obviously is a factor in all the DMC frequencies, and thus the DMA would either always steal three or four cycles. In my case that would correspond to 30 or so cycles of variance, more than enough to throw off the sensitive raster code.
<br />
<br />Would anyone blame me if I took the easy way out switched to an MMC3 setup? I'm still caught up in these damned raster tricks when all I really want to do is try out the polygon filling code and play with some 3d math.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Apr 04, 2008 10:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is always something that I've found interesting.
<br />
<br />I was at one point thinking of making a wireframe engine for the NES. This can be done with an altered raycasting equation as well as a reliable line-drawing routine.
<br />
<br />I made a sample of this for Qbasic. I don't know how most wireframe 3D works, but I use the raycasting equations to find the placements of points with X,Y, and Z coords on the screen. These points are points where lines intersect. So after finding those points, I draw lines between them and I have wireframe 3D.
<br />
<br />But if you can get that done, and combine it with what you're doing, you'll have some pretty nice looking 3D.
<br />
<br />This might even be cool to have "CG" in NES games. Now you've made me really interested in this. I would love to have 3D stuff in my games. And it would be awesome to have colored 3D instead of just wireframe.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Apr 05, 2008 1:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This might even be cool to have "CG" in NES games.</div><br />Yeah, I've always trough about that too. Not they don't have to be 3D calculations or anything, just "pre-rendered" stuff that would look impossible on the NES before one see it.<br />By using pre-defined CHR banks, a lot of raster tricks and sprites, I guess there is a lot of stuff to be done in that departement.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well sort of, the numbers don't quite add up to what I'd have expected but an lsr $ff is faster than a sta $ffff,x which in turn is faster than a lda ($ff),y. </div>
<br />If I remember right lsr $ff would be 5 cycles, sta $ffff,X would be 4 cycles if X=0 and 5 if X different than zero (because the lower byte is $ff, if it would be $00 the instruction would always be 4 cyles regardless of the value of X, and I highly recommand this if you're doing timed stuff), and lda [$ff],Y is 5 cycles, 6 if a page boundary is crossed. So here the faster seems sta $ffff,X
<br />
<br />And why do you use the DMC at all ? To play music or for interrupts ? If it is the former, just play music with no DMC, and if it is the later, I through you used to bypass interrupt techniques.
<br />
<br />EDIT : Look here for timing : <a href="http://www.6502.org/tutorials/6502opcodes.html" class="postlink">http://www.6502.org/tutorials/6502opcodes.html</a>
<br />However I'm pretty sure they got ora $xx and and $xx wrong, they say 2 cycles but that's impossible since the CPU fetches at least 3 bytes for thees instructions. And eor $xx is 3 cyles, and I don't see why it would be any different.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Apr 05, 2008 2:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This might even be cool to have "CG" in NES games.</div><br />Yeah, I've always trough about that too. Not they don't have to be 3D calculations or anything, just "pre-rendered" stuff that would look impossible on the NES before one see it.<br />By using pre-defined CHR banks, a lot of raster tricks and sprites, I guess there is a lot of stuff to be done in that departement.</div>There are a number of NeoGeo games which display prerender CGI sequences, mapped directly (uncompressed) from CHR ROM. Of course there aren't many 1000+ megabit NES cartridges around but something along those lines is certainly feasible with clever compression. For instance you could precalculate many of the time-consuming details when drawing a real 3D sequence (i.e. transformations, clipping/overlapping, line slopes and even some of the CHR allocation details, etc..) and still get relatively small movies. Think something along the lines of the animations from Flashback..<br />Hell one of my all-time favorite C64 demos is a line art animation (<a href="http://noname.c64.org/csdb/release/?id=4358" class="postlink">http://noname.c64.org/csdb/release/?id=4358</a>).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well sort of, the numbers don't quite add up to what I'd have expected but an lsr $ff is faster than a sta $ffff,x which in turn is faster than a lda ($ff),y. </div>If I remember right lsr $ff would be 5 cycles, sta $ffff,X would be 4 cycles if X=0 and 5 if X different than zero (because the lower byte is $ff, if it would be $00 the instruction would always be 4 cyles regardless of the value of X, and I highly recommand this if you're doing timed stuff), and lda [$ff],Y is 5 cycles, 6 if a page boundary is crossed. So here the faster seems sta $ffff,X</div>An absolute indexed LDA run in four cycles by first adding up the index and the low-byte of the address then reading from the resulting address, without page wrapping, in the fourth cycle. Then if it detects a carry it's forced to hijack the ALU for another cycle to increment the high-byte and read from the real address (or something functionally equivalent, though I suspect that it always carries into the high-byte but does so while already reading the dummy byte). Naturally trying to apply this optimization to a store, i.e. adding dummy stores to what could potentially be the wrong address, would be disastrous so it's forced to always performs dummy-reads instead and uses up the full five cycles regardless page crosses.<br />You can even exploit these the dummy reads in cases, say you wanted to write to every other byte of VRAM for instance then you could use a STA $20ff,x with x=8  making dummy read access one of the $2007 mirrors at $20ff and the real write another mirror at $3007. Combined with RMW reads and dummy-writes you can access the same register up to four times in a single instruction.<br /><br />My point above was that all three versions should take 5 cycles (assuming that the zeropage indirection doesn't cross a page) yet DMC DMA will be able to block some longer than others resulting in varying effective code speeds. A very nasty thing when you're trying to write timed raster code.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And why do you use the DMC at all ? To play music or for interrupts ? If it is the former, just play music with no DMC, and if it is the later, I through you used to bypass interrupt techniques.</div>Yes, I'm trying to (ab-)use it to generate raster interrupts in order to prolong the vblank period. Performing the kind of 3D I have in mind involves transferring large quantities of tiles per frame so the normal blanking period just doesn't cut it, not even on a PAL machine.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Look here for timing : <a href="http://www.6502.org/tutorials/6502opcodes.html" class="postlink">http://www.6502.org/tutorials/6502opcodes.html</a><br />However I'm pretty sure they got ora $xx and and $xx wrong, they say 2 cycles but that's impossible since the CPU fetches at least 3 bytes for thees instructions. And eor $xx is 3 cyles, and I don't see why it would be any different.</div>True, they most certainly take three. Personally I prefer AAY64's opcode lists (<a href="http://unusedino.de/ec64/technical/aay/c64/bmain.htm" class="postlink">http://unusedino.de/ec64/technical/aay/c64/bmain.htm</a>) or Graham's tables (<a href="http://www.oxyron.de/html/opcodes02.html" class="postlink">http://www.oxyron.de/html/opcodes02.html</a>) when I need to look up some detail of the 6502 instruction set. The AAY one in particular covers just about everything that's useful to me and is comfortably hyper-linked, and I have yet to discover a single an error in either document.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>