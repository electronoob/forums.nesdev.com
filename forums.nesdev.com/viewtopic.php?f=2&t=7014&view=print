<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - My recent experience with ca65, asm6, nesasm, and wla-dx</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">My recent experience with ca65, asm6, nesasm, and wla-dx</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7014">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7014</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Oct 07, 2010 8:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>My recent experience with ca65, asm6, nesasm, and wla-dx</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After porting some example code for an upcoming release to the four main NES assemblers, I have a good idea of how they compare for implementing the same small demo programs in a custom file format. Overall, asm6 and ca65 are the clear winners. asm6 is to C as ca65 is to C++; asm6 is good for small to medium programs, and ca65 is good for medium to large, or where you want lots of flexibility and plenty of room to grow. ca65 mainly has more indirection, sort of like how a web page with stylesheets can display in many different ways with the same content. Now if I could only get - and + label support supported by the official ca65, then porting between the two would be a lot easier...
<br />
<br /><strong>ca65</strong>
<br />+ Plenty of room to grow.
<br />+ Powerful macro support.
<br />- Heavyweight; inconvenient for small programs.
<br />- Doesn't support - and + labels, the biggest porting headache.
<br />
<br /><strong>asm6</strong>
<br />+ Simple, elegant model for generating files with things at various addresses.
<br />+ Easy to set up files with minimum of specification.
<br />- Can't switch segments as in ca65, so order of things in file must match output (as far as I can tell).
<br />
<br /><strong>nesasm</strong>
<br />- Inflexible about output format if you're changing addresses (e.g. if you want code assembled for $6000, it must go at a file offset that's a multiple of $2000, + $10).
<br />- Poor error reporting, often doesn't report errors even though you likely made one.
<br />- Very picky about syntax. Uses different format for several things.
<br />
<br /><strong>wla-dx</strong>
<br />+ Supports multiple game console CPUs, allowing same assembler for all development.
<br />- Bizarre set of directives, lack of coherency in object model, poor documentation.
<br />- Way too many bugs, obscure behaviors.
<br />- Silly things required like .w on many 16-bit addresses.
<br />- Arithmetic done in floating-point, with unexpected results.
<br />- Doesn't warn about things that are very likely errors.
<br />- Macro parameters are numeric, rather than text, limiting things you can do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cartlemmy</b> [ Thu Oct 07, 2010 8:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awesome, this is the exact post I was looking for a few days ago. Thank you!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gilligan</b> [ Thu Oct 07, 2010 10:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Have you contacted Ulrich (main author of ca65) about anoymous +/- label support ?  He's a nice guy, maybe its even a planned feature - who knows.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Oct 07, 2010 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It would duplicate the existing functionality of :+ and :-.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Oct 07, 2010 10:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just haven't taken the time to draft up a proposal and post. I have many things to suggest for ca65. And yes, ca65 has the functionality already, just a different syntax.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Oct 07, 2010 2:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I guess CC65 is the best one, I have to admit, although I don't use it. I use WLA, which while flawed, isn't as bas as you describe it.
<br />
<br />There is awful bugs in the SPC700 version of WLA, but I didn't ever encounter any in the 6502 version. The error messages are usually informative enough. The segment system is somewhat convenient, and really flexible. For exmemple having a DPCM data that is aligned to $40 bytes and that is always located at $c000-$ffff is something you can pull off easily, without having to "cheat" and force it at $c000 like most assemblers would need you to do. A great feature is overwrite sections, I use it in my game to have non-CHR data in CHR-ROM easily (without the need to truncate my .chr file). I don't think any other assemblers support that. I also found a way to have the same piece of code in each bank (useful for mappers that do 32k switching), but it's a little tricky (you have to include multiple times the same file, and export labels, ask me if you're interested).
<br />The documentation is just fine for me.
<br />
<br />A big plus was that his author WAS active and open to bug report and sugettion, but isn't any longer the case, so this is now a handicap.
<br />
<br />And surprisingly, you don't mention the biggest issue I have with WLA currently : NO SUPORT OF RELOCATABLE CODE. If you want to copy your code to RAM and execute it from here, it's going to be a headache in most assemblers, including WLA.
<br />Also an issue is that the assembler assumes the target system is ROM. This is fine for (S)NESdev, but is really retarded for C64, FDS or SPC-700 development. In those systems you just load files in RAM and execute from here... Of course you reserve some maximum amount of RAM for the file, so all I did was make the file a "romsection" of the maximum reserved size... (I never did anything serious on those systems, but if I were to release them I'd just cut the size of the file manually after compilation... quite cheap but what else can you do ?)
<br />
<br />I think CC65 fixed all the issues I mentioned (confirmation would be fine).
<br />PS : How CC65 handles + and - is really a MAJOR problem. I use them all the time in my code, and I'd never find names for so many labels.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Thu Oct 07, 2010 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No comment on NESASM's macro support?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Thu Oct 07, 2010 3:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A penny for your thoughts on DASM? I've been using it for years, and I'm not sure how it stacks up against these other programs.
<br />
<br />The only major drawback with it that I can see is it doesn't support anonymous labels. Then again, I haven't <em>died</em> from not being able to use them, so it's nothing showstopping in my opinion. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Oct 07, 2010 5:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, the only notable complaint I've had with CA65/CC65 is the anonymous label syntax.  I do remember there being a discussion about on the CC65 email list many years ago, not sure what the conclusion was, but maybe there's some insight there if it's available for searching.
<br />
<br />They look really ugly, so I tend do just make up garbage names (if it's not a very short branch), which is all anonymous labels are supposed to be good for anyways.  I often use local labels (preceded with @), so I can often use the same generic yet more descriptive names anyways.
<br />
<br />I used DASM before, I left it then because it didn't have incbin (it does now though), it seemed good but I was a newb at the time and wasn't using macros or any kind of fancy stuff yet.  If it's got good macro support (I don't remember), it should be just fine.
<br />
<br />x816 seemed like a pretty good assembler, I can't use anymore though without using DOSBox.  I mostly used it for my SNES 2A03 emulator, so it has to be assembled in DOSBox if I rebuild it anymore, heheh.  Nerdtracker 2 used it originally (later I changed Bananmos' old code to assemble in CA65)
<br />
<br />
<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I think CC65 fixed all the issues I mentioned (confirmation would be fine).<br /></div>
<br />
<br />It's kind of funny, for relocatable code (that you want to move yourself) you actually use the .ORG command.  And the end of it you use .reloc.  So it's the rest of the stuff that's truly relocatable as far as the linker is concerned, heheh.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Thu Oct 07, 2010 5:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The most annoying bit about :+ and :- is that it confuses the hell out of emacs' assembly autoindent. Well, aside from the fact that they were broken in a few versions. Unfortunately, automatically rewriting the file to go from +/- to : and :+/:- isn't entirely trivial, since cases like 
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">- cmp<br />&nbsp; beq +<br />&nbsp; bne ++<br />+bit<br />&nbsp; bvc -<br />+rts<br /></div><br /><br />get a bit tricky to convert. You can't get away with converting every - or + in the first column to a :, and prepending a : to +'s and -'s after branches, because the ca65 version of that would be<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">: cmp<br />&nbsp; beq :+<br />&nbsp; bne :++<br />:bit<br />&nbsp; bvc :--<br />:rts<br /></div>
<br />
<br />A 2-pass approach could probably do it though. Alternatively, someone could hack in support, though I recall the sourcebase for it being a bit messy.
<br />
<br />The heavyweight bit can be mitigated somewhat with a decent premade makefile and linker script.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Oct 07, 2010 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh well, I guess we can get into discussing these unnamed labels. ca65's are workable, but no other assemblers use the convention, whereas the + and - convention is shared by many assemblers. The + and - convention also has the benefit of being fairly clear even without explanation, and somewhat consistent. There's a label named -, followed by a branch to -. Or a label named ++ and a branch before it to ++. Then you see multiple labels of the same name, and the first time you figure out which branch goes to which merely by proximity, and then see the way the + and - dictate direction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Oct 07, 2010 6:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">There is awful bugs in the SPC700 version of WLA, but I didn't ever encounter any in the 6502 version. The error messages are usually informative enough. The segment system is somewhat convenient, and really flexible. For exmemple having a DPCM data that is aligned to $40 bytes and that is always located at $c000-$ffff is something you can pull off easily, without having to "cheat" and force it at $c000 like most assemblers would need you to do.</div><br />Under ca65 and ld65, I make a segment with alignment 64 bytes and in the $C000-$FFFF memory area. Then I put all samples in that segment and .align 64 before each .incbin.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A great feature is overwrite sections, I use it in my game to have non-CHR data in CHR-ROM easily (without the need to truncate my .chr file).</div><br />A .png to .chr converter that can handle sizes less than full banks allows this easily. If I want 512 bytes of ROM in a given 4 KiB CHR bank reserved for data, I make that bank's tile sheet 128x112 pixels instead of 128x128.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And surprisingly, you don't mention the biggest issue I have with WLA currently : NO SUPORT OF RELOCATABLE CODE. If you want to copy your code to RAM and execute it from here, it's going to be a headache in most assemblers, including WLA.</div><br />Something that ld65 handles easily with its load and run addresses. See nes.ini and ramcode.s of <a href="http://wiki.nesdev.com/w/index.php/Forbidden_Four" class="postlink">Forbidden Four</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think CC65 fixed all the issues I mentioned (confirmation would be fine).<br />PS : How CC65 handles + and - is really a MAJOR problem. I use them all the time in my code, and I'd never find names for so many labels.</div>
<br />For the tightest of loops (such as waiting for vblank or sprite 0, or clearing memory), I occasionally use the <a href="http://www.cc65.org/doc/ca65-6.html#ss6.5" class="postlink">: labels with :+ and :-</a>. But my current coding style, as seen in <a href="http://www.pineight.com/croom/" class="postlink">Concentration Room</a>, uses <a href="http://www.cc65.org/doc/ca65-11.html#ss11.79" class="postlink">.proc</a> heavily. This allows labels such as "charloop" or "xloop" to be reused from subroutine to subroutine, allowing the labels themselves to reinforce the meaning of the code comments. And before that, back when I was working on <a href="http://www.pineight.com/lj65/" class="postlink">a project that I started in x816 and finished in ca65</a>, I used <a href="http://www.cc65.org/doc/ca65-6.html#ss6.4" class="postlink">@ labels</a>, which are valid only between normal labels. I've seen C compilers for various target platforms generate arbitrarily named @ labels as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Oct 07, 2010 7:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Regarding unnamed labels:
<br />
<br />I may be biased since I never used them but to me it feel more like a mess than anything. For small code with maybe one "-" or maximum two "--" it could be acceptable but the more you add, the mode it becomes messy.  I think locals labels are the way to go (with CC65) since you can re-use their name and it can make the code clearer if used properly.
<br />
<br />If you read the comments from the author of CC65, this is what he said exactly, word for word:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Unnamed labels may be accessed by using the colon plus several minus or plus characters as a label designator. Using the '-' characters will create a back reference &#40;use the n'th label backwards&#41;, using '+' will create a forward reference &#40;use the n'th label in forward direction&#41;. An example will help to understand this:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :&nbsp; &nbsp; &nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;&#40;ptr1&#41;,y&nbsp; &nbsp; &nbsp; &nbsp; ; #1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cmp&nbsp; &nbsp; &nbsp;&#40;ptr2&#41;,y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;:+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -&gt; #2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tax<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; beq&nbsp; &nbsp; &nbsp;:+++&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -&gt; #4<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;:-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -&gt; #1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc&nbsp; &nbsp; &nbsp;ptr1+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc&nbsp; &nbsp; &nbsp;ptr2+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;:-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -&gt; #1<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :&nbsp; &nbsp; &nbsp; &nbsp;bcs&nbsp; &nbsp; &nbsp;:+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; #2 -&gt; #3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp; &nbsp;#$FF<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :&nbsp; &nbsp; &nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;#$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; #3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :&nbsp; &nbsp; &nbsp; &nbsp;rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; #4<br /><br />As you can see from the example, unnamed labels will make even short sections of code hard to understand, because you have to count labels to find branch targets &#40;this is the reason why I for my part do prefer the &quot;cheap&quot; local labels&#41;. Nevertheless, unnamed labels are convenient in some situations, so it's your decision.<br /></div>
<br />
<br />
<br />edit: fixed missing )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Oct 07, 2010 8:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I very rarely use more than one + or -. That's where a named label becomes useful. But a single - is very common for short loops. I think if you've never used them you might <em>imagine</em> they would be hard to read, but that's because you're imagining complex situations where they wouldn't be the best solution. For a typical file of mine that's about 290 source lines, there were 29 total labels, 13 unnamed, with all but one used for a 2-5 instruction loop. Thus, there is no difficulty in following them. It's clear that it's a loop, and a comment describes its purpose better than a label could. By reserving labels for situations that aren't loops or simple branches over a few instructions (i.e. part of an if construct), the very fact that something has a label communicates information about its use. If named labels were used for everything, this extra expressiveness would be lost as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Oct 07, 2010 8:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm a nesasm guy who has never used nameless labels, but I totally see them as useful. One case that immediately come to mind is extended branches.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>