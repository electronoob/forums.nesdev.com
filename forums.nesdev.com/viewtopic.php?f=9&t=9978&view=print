<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MMC1 versions, WRAM disabling, and save 'durability'</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MMC1 versions, WRAM disabling, and save 'durability'</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9978">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9978</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Apr 01, 2013 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I've found what appears to be conflicting data on this dang old 'R' WRAM enable bit that was implemented in later versions of the MMC1.  What follows is a regurgitation of what I've seen in our various sources, and what I've found in experiment sorry if it's tough to read, but I don't know how to present it much better than what follows.  Fair warning, the text below is a bit of me rambling on... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  If you go to the end you'll see where I'm looking for input from the community on the best solution on how to implement the various behaviors on a single design.<br /><br />All sources I've found claim that the<a href="http://wiki.nesdev.com/w/index.php/MMC1#PRG_bank_.28internal.2C_.24E000-.24FFFF.29" class="postlink">'R' bit</a> exists on MMC1B and later.   I have found that the MMC1 is much more 'durable' to abusive power cycling when this 'R' bit is in place while testing on by CPLD boards.   The value of start up on MMC1B's is a separate debate, but I don't think it matters much.  The value at start up doesn't seem to affect save 'durability' much.  So it makes sense that Nintendo implemented this bit later in life. <br /><br />Additionally I found that my saves were fairly susceptible  I to data loss from abusive power cycling, measurably worse than the original carts even when I had this 'R' bit in place.  I tried several things to improve my boards so they were at least comparable to Nintendo's.  I deviated slightly from Nintendo's design and gave WRAM /WE signal to the mapper's control, vice directly wiring it to PRG R/W.  So my design will take /WE high whenever the /CE pin is high, and only passes through PRG R/W to /WE when /CE is low.  This appeared to significantly improve the save durability during abusive power cycling.<br /><br />Note,  I am working with SNROM and it's <a href="http://wiki.nesdev.com/w/index.php/MMC1#SNROM" class="postlink">'E' bits</a> which are implemented on all SNROM boards AFAIK, even on early mmc1 versions without the 'R' bit.  My E bits are internal to the CPLD since the SRAM I typically use only has a single chip enable (/CE).<br /><br />The issue/surprising thing I found was when testing the game 'Sweet Home'.  I don't have access to bootgod's DB at the moment, but from what I recall the cart there has a MMC1B2.  Which according to all sources should have the 'R' bit implemented.  But I found when playing this game is that the attribute tables appeared messed up after the opening title scene.  I haven't gone as far as dissecting the ROM and probably should have, but it appears that this game is relying on the 'R' bit to not exist.  And yes it works just fine with the 'E' bits fully operational.<br /><br />So a few questions come to mind.  Are there any emulators that implement the 'R' bit?  I know most don't implement the 'E' bits.  Does any one know of a game that relies on the later version of MMC1 with the 'R' bit?  I'm guessing that most emulators don't even bother with the 'R' bit since there isn't much function other than to improve save durability from what I can tell.<br /><br />So I've got a plan on how to implement things that is a sort of hybrid of early and late versions of the MMC1 and curious what people think about it.  Since the 'R' bit does improve save durability I'd like to keep it in my design.  While it is still decent without the 'R' bit, it only takes a min or two of heavy power cycling to loose a save slot or two on Zelda.  But from what I've found some games apparently rely on this bit to not exist during operation.  So I'm thinking about implementing the 'R' bit from start-up until the MMC1 is reset via 'PRG D7'.  At which point the 'R' bit would cease to have any effect.  In doing this I figure I'll have the most durable saves I can make (given the hardware limitations of my current design which I don't see reason to change), and also have the added compatibility since my small sampling of games only found titles that relied on the 'R' bit to not exist (I'm unaware of any titles that rely on it's existence).<br /><br />Thoughts?  Criticisms? Questions?<br /><br />All though now that I put all of this to words, I'm realizing that I may have a better logic saving alternative which is kind of already in-place with the 'E' bits.  If the 'R' bit improves the durability regardless of startup value, then why doesn't the 'E' bits themselves give me the same durability.  Perhaps there's power in numbers and the combo of all 3 logic bits gives me better chances of keeping /CE high during undefined power cycling.  One idea might be to just do away with the 'R' bit all together, and have the two separate E bits with the CHR in 4KB mode at s/u.  My CPLD actually starts up in 8KB mode  at the moment, so I've really only got the effect of one 'E' bit at power on.  Although I can't control that the rom most likely uses 8KB mode leaving me with effectively only one 'E' bit at power down either way.  I'd expect that saves are generally lost at power down and not power on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 01, 2013 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When a save is destroyed, how many bytes does it spray over?<br /><br />Has anyone here managed to implement Reed-Solomon coding on a 6502?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Apr 01, 2013 12:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I seem to remember finding that the first few bytes of SRAM were most susceptible to corruption. I did some kind of hardware patch to my devcart to make basically unaffected by the most vigorous power on/off I could abuse it with. OK, looks like I put a 100 ohm resistor in parallel with the 10K resistor that goes from the SRAM's GND to pin 6 on the MMC1. I do remember experimenting with various values and abusing the power switch until I found one that was ironclad.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Apr 01, 2013 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"> I don't have access to bootgod's DB at the moment, but from what I recall the cart there has a MMC1B2</div> You recall correctly.<br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">So a few questions come to mind. Are there any emulators that implement the 'R' bit? </div> Nestopia-1.4.0h does. I don't see the corruption you describe, though.<div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">why doesn't the 'E' bits themselves give me the same durability</div>In an authentic MMC1, the E bit goes to the 6264's /CE pin, and the CHR bits are believed to be random on power up (and so there's a 50% chance of not being protected). Obviously you could do differently...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Apr 01, 2013 2:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In an authentic MMC1, the E bit goes to the 6264's /CE pin, and the CHR bits are believed to be random on power up (and so there's a 50% chance of not being protected). Obviously you could do differently...</div><br />As already discussed in the SRAM initialisation thread, undefined and random are very different.<br />When powered up an uninitialized flip flot will randomly pick a '1' or a '0', but from personal experience I can tell the same flip flop will likely always pick the same value.<br /><br />So your sentence would rather be : With a given MMC1 you have 50% of chances of being protected (always), and 50% of chances of not being protected (always).<br />However those probabilities are probably not 50% and 50%. This could be easily tested with a program that resides in main RAM and reads the data from various cartridges with MMC1s in them that are inserted (a very clever trick invented by Blargg).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Mon Apr 01, 2013 6:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />SNROM for me disabled WRAM on the PRG-register bit, not the CHR-bit? At least thats what I wrote my program to use...and that's what it reported. Disableable:Yes. It was an MMC1B2 from Open Golf.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Apr 01, 2013 11:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">When a save is destroyed, how many bytes does it spray over?</div><br />Not sure, my testing was pretty simple.  I just filled all three save slots of Zelda and power cycled repetitively.  It seemed like the last slot was usually the first to go, then the second, then the first.  I'm not sure if that's how they were arranged in actual addressing though.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">OK, looks like I put a 100 ohm resistor in parallel with the 10K resistor that goes from the SRAM's GND to pin 6 on the MMC1.</div><br />Effectively a 100 ohm then, (10k &amp; 100ohm in parallel = 99 ohms)   I'm using a 10k because that's what Nintendo did and it's a nice large value that still works.  100 ohms is actually pretty small when the MMC1 outputs a high ~4.5v on your 99ohm pull down you're drawing (I = V/R, 4.5v/100ohm = ~45mA)  That's quite a bit of current...  It probably can't actually supply that much current because your stressing that line driver pretty hard only a matter of time before it gives out I'd guess.  (I'd also guess the mmc1 gets warm to the touch)  It would pull down a lot quicker though, and might be why you saw improved 'save' durability.  A 10k gives you 0.5mA which is a lot safer current for a unknown digital IC driver.<br /><br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">So a few questions come to mind. Are there any emulators that implement the 'R' bit? </div> Nestopia-1.4.0h does. I don't see the corruption you describe, though.</div><br />Interesting, wonder if I have some other bug going on...  I'll have to dissect the rom and try to figure out what's triggering the issue. I'm literally removing comments to select the 'R' (aka 'B' per kevtris) in my implementation and confirmed I can remove and re-insert the issue in sweet home, for anyone curious:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;//MMC1A has no B bit&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;//if ((prg_addr == 2'b11) &amp; (prg_ce == 1) &amp; (m2 == 1))&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;//MMC1B su low -&gt; 0 enabled&nbsp; 'B'&nbsp; (Deemed best saves surprisingly)<br />&nbsp; &nbsp;if ((B == 0) &amp; (prg_addr == 2'b11) &amp; (prg_ce == 1) &amp; (m2 == 1))&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;//MMC1C su low -&gt; 0 disabled 'Bn' (probably just as good as B, hard to tell)<br />&nbsp; &nbsp;//if ((Bn == 1) &amp; (prg_addr == 2'b11) &amp; (prg_ce == 1) &amp; (m2 == 1))&nbsp; &nbsp;<br />&nbsp; &nbsp;begin //enabled <br />&nbsp; &nbsp;&nbsp; &nbsp;//w_ce_n = 1'b0; //raw signal to WRAM on non-SNROM boards<br />&nbsp; &nbsp;&nbsp; &nbsp;w_ce_int = 1;&nbsp; &nbsp; //used for SNROM anding CHR A16 signal<br />&nbsp; &nbsp;&nbsp; &nbsp;w_we = prg_rw;&nbsp; &nbsp;//allows for PCB simplification and possibly better save protection<br />&nbsp; &nbsp;&nbsp; &nbsp;end<br />&nbsp; &nbsp;else <br /><br />&nbsp; &nbsp;begin //disabled<br />&nbsp; &nbsp;&nbsp; &nbsp;//w_ce_n = 1'b1; //raw signal to WRAM on non-SNROM boards<br />&nbsp; &nbsp;&nbsp; &nbsp;w_ce_int = 0;&nbsp; &nbsp; //used for SNROM anding CHR A16 signal<br />&nbsp; &nbsp;&nbsp; &nbsp;w_we = &nbsp; &nbsp;&nbsp; 1;<br />&nbsp; &nbsp;&nbsp; &nbsp;end<br /><br />...<br /><br />always @ (w_ce_int)&nbsp; <br />begin<br />&nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;//combine w_ce signal and ca16 signal to create a single WRAM /CE output<br />&nbsp; &nbsp;if ((w_ce_int == 1) &amp; (ca16 == 0))&nbsp; //&nbsp; &nbsp; CE==1 and /CE==0<br />&nbsp; &nbsp;&nbsp; &nbsp;begin //enabled<br />&nbsp; &nbsp;&nbsp; &nbsp;w_ce_n = 0;&nbsp; &nbsp; &nbsp; //my SRAM only has one chip enable<br />&nbsp; &nbsp;&nbsp; &nbsp;end<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;begin //disabled<br />&nbsp; &nbsp;&nbsp; &nbsp;w_ce_n = 1;<br />&nbsp; &nbsp;&nbsp; &nbsp;end<br /><br /></div><br /><br />Here's what I'm seeing:<br /><img src="https://dl.dropbox.com/u/18341918/IMG_4885.jpg" alt="Image" /><br /><br /><img src="https://dl.dropbox.com/u/18341918/IMG_4887.jpg" alt="Image" /><br />The opening scene is fine, and the 'door' scene is good.  Since Nestopia doesn't see the issue I'm guessing I have something else going on...<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">why doesn't the 'E' bits themselves give me the same durability</div>In an authentic MMC1, the E bit goes to the 6264's /CE pin, and the CHR bits are believed to be random on power up (and so there's a 50% chance of not being protected). Obviously you could do differently...</div><br />Yeah that's what I'm thinking mine's defaulting to E bits enabled in 8KB.  But I may try s/u E bits disabled and test each CHR mode although I'm guessing I won't be able to easily measure the difference by my current testing means.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">So your sentence would rather be : With a given MMC1 you have 50% of chances of being protected (always), and 50% of chances of not being protected (always).  However those probabilities are probably not 50% and 50%. This could be easily tested with a program that resides in main RAM and reads the data from various cartridges with MMC1s in them that are inserted (a very clever trick invented by Blargg).</div><br />Relying on the 50% is basically asking for failure...  There's no need to measure the exact amount of failure <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />   Either way I don't intend to exactly emulate the MMC1's and variants including it's random unknowns between one chip and another due to fabrication process variations.  I can control register start up low or high in a CPLD, so I'm trying to use that to my advantage.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">SNROM for me disabled WRAM on the PRG-register bit, not the CHR-bit? At least thats what I wrote my program to use...and that's what it reported. Disableable:Yes. It was an MMC1B2 from Open Golf.</div><br />Indeed there are two separate enables for SNROM boards.  MMC1 pin6 controls CE, address decoding of WRAM and the 'R' bit depending on the revision.  On SNROM the CHR A16 line *always* controls the WRAM /CE for 'software disabling' of WRAM even on mmc1 variants without the 'R' bit.<br /><br />So your test rom is only verifing one of the chip enables (/CE to be specific).  You're getting what you expect though because BOTH chip enable pins must be enabled to activate the SRAM.  So you're really only testing one disable method.  If you additionally tested the 'R' bit separately then you'd determine whether or not the mmc1 was 'old' (without the 'R' bit) or 'new' (with the 'R' bit).  Either way the CHR A16 enable bits 'E' exist, it's not an either/or situation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Apr 02, 2013 1:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For curiosity's sake, I looked at an execution trace. Before it ever touches WRAM, Sweet Home writes the following registers: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$A000←$00 $C000←$00 $8000←$0E $8000←$0E $E000←$0B $E000←$00 $E000←$0A $E000←$0A</tt>. So I'm hard pressed to see how it would be different from any other MMC1B game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Apr 02, 2013 2:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Relying on the 50% is basically asking for failure... There's no need to measure the exact amount of failure  Either way I don't intend to exactly emulate the MMC1's and variants including it's random unknowns between one chip and another due to fabrication process variations. I can control register start up low or high in a CPLD, so I'm trying to use that to my advantage.</div><br /><br />We can't know if we don't measure it. Pehaps those flip flops are made in a way so they always start in a &quot;set&quot; state, which means you'd always be protected.<br /><br />Another option could be that Nintendo tests their chips, and chips with an initial &quot;1&quot; state would be soldered on SNROM carts while chips with an initial &quot;0&quot; state would be attributed to other carts... while for some reason I'm myself not very convinced with this theory...<br /><br />I could write such a test (it would only work with SNROM boards and with MMC1 games with 128kb of CHR unfortunately) but I don't have loads of carts to test it on (5-6 at the very most). Someone that owns &gt;30 of such games (such as bootgod) should do the test instead.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Tue Apr 02, 2013 6:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Pehaps those flip flops are made in a way so they always start in a &quot;set&quot; state, which means you'd always be protected.</div><br />And that would actually be rather simple to do in NMOS - a flip-flop is just two cross-coupled inverters, and since NMOS inverters are just a pull-down transistor and a pull-up resistor, giving one of those resistors a lower resistance would cause that side to go high before the other one does, forcing a particular power-on state.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Apr 02, 2013 7:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are the MMC1 made with NMOS or CMOS technology ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Apr 07, 2013 9:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">OK, looks like I put a 100 ohm resistor in parallel with the 10K resistor that goes from the SRAM's GND to pin 6 on the MMC1.</div><br />Effectively a 100 ohm then, (10k &amp; 100ohm in parallel = 99 ohms)   I'm using a 10k because that's what Nintendo did and it's a nice large value that still works.  100 ohms is actually pretty small when the MMC1 outputs a high ~4.5v on your 99ohm pull down you're drawing (I = V/R, 4.5v/100ohm = ~45mA)  That's quite a bit of current...  It probably can't actually supply that much current because your stressing that line driver pretty hard only a matter of time before it gives out I'd guess.  (I'd also guess the mmc1 gets warm to the touch)  It would pull down a lot quicker though, and might be why you saw improved 'save' durability.  A 10k gives you 0.5mA which is a lot safer current for a unknown digital IC driver.</div><br />Looked at this on a scope and you're right; the CE to the SRAM only goes to about 2.1V. I'd have left just the 10K in there except the SRAM would get corrupt often. With the 100 ohm it works and doesn't get corrupt when powering off/on. MMC1 isn't hot. It's only driving this on SRAM accesses. Anyway, you're right, it is a hack, but might be useful for someone who wants to make the tradeoff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Apr 07, 2013 10:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 versions, WRAM disabling, and save 'durability'</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So it looks like the MMC1's capable of about 20mA max.  Did you ever try something like a 500ohm resistor?  That should still pull down quickly and put a 10ma load on the MMC1.  A 1k with ~5ma sounds better, but might not be as quick to give you more durable saves.<br /><br />I'm surprised you didn't get good saves with the 10k though.  Nintendo used 10k's after all and there are no issues. Did you use your own diodes?  Or were they already on the board?  You NEED to use Schottky diodes.  Standard rectifier diodes aren't fast enough, plus they have a larger foward biased voltage drop ~0.7v compared to ~0.2v.  I tried a standard diode before for saves and it failed often, Schottky's are key.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>