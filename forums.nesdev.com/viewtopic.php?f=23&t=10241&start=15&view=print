<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Electronics Question on Flash(ing) Memory</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Electronics Question on Flash(ing) Memory</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=10241">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=10241</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Wed Jul 03, 2013 9:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">bazz wrote:</div><div class="quotecontent">Well, I thought it would necessary for fast pc-&gt;sram r/w, but please do correct me if I am wrong. I will have to see.</div><br />Doing the math: 140ns Ã— 524288 bytes = 7.3ms. Also, the SNES can't read from anything in its cartridge slot in less than 140ns. (one read cycle at fastest is 3.6MHz; half of that is 140ns)<br /><br />Pretending for the moment that you wanted to build a 12MB/95Mbit SNES RAM cartridge, that would still only be 1/5 of a second. Anything faster is entirely wasted.</div><br /><br />The reason why I have a problem accepting your answer is because I do not see the full picture here of how this is associated with the yet to be found optimal USB transfer and how the speeds of that transfer are affected any way (such as micro controller speed?) This is all new to me so please be slow.<br /><br />Also, in the GB Flasher, it used a crystal of 6Mhz with the FTDI chip, I wonder how that works and could it be sped up. I have yet to learn how it all works.<br /><br />My gripe here is that I want to be sure I am venturing in the right direction. It takes a lot of learning . It would be nice to take the correct approach first.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jul 03, 2013 9:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great. 4Mbit is 512KiB. You don't need to be faster than 200ms. (That's as fast as a nominal web page load). Doing the math: You don't need a write speed faster than 2.5MB/sec, or 20mbit/sec, or a byte every 400ns.<br /><br />This is 1/20th of USB2.0 &quot;high speed&quot;. It's about 2x USB1.1&quot;full speed&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jul 03, 2013 9:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">bazz wrote:</div><div class="quotecontent">Also, in the GB Flasher, it used a crystal of 6Mhz with the FTDI chip, I wonder how that works and could it be sped up. I have yet to learn how it all works.</div><br />The 6MHz crystal is specifically used as the reference timebase for USB communication; it must be a factor of either 12MHz or 480MHz (depending on the specific variant of USB spoken)<br />The ratio is probably fixed in hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jul 03, 2013 9:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">bazz wrote:</div><div class="quotecontent">My gripe here is that I want to be sure I am venturing in the right direction. It takes a lot of learning . It would be nice to take the correct approach first.</div><br />Let's try this: What Are You Really Trying To Do?<br />I'm guessing the answer is &quot;build a really fast programmer&quot;, so if I'm right, let me follow that with:<br />What are you going to use that really fast programmer to do?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jul 03, 2013 9:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />From the moment I saw &quot;EPROM emulator&quot;, I realized that the OP is trying to run a freshly built ROM image on hardware without having to pull the CF out of the PowerPak all the time. When the user clicks &quot;Build and Run&quot; in an IDE, the IDE rebuilds the ROM image from source code and then, instead of opening an emulator, sends it to the cart. Then the cart should write this image to SRAM or PSRAM, connect the RAM to the Super NES cart bus as if it were ROM, and reset the Super NES Control Deck.<br /><br />Or are you asking what one is trying to do by developing software for the Super NES in the first place?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jul 03, 2013 9:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, so then the next questions are:<br />How long do you think it will take to build said ROM image?<br />What percentage overhead is permissible to program a device relative to the time it takes to build said image?<br />Which of the many aspects of the obnoxiousness of removing the CF/SD card from the powerpak/everdrive are the ones you want to fix?<br />What if you had to pick only one of them?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Wed Jul 03, 2013 10:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">From the moment I saw &quot;EPROM emulator&quot;, I realized that the OP is trying to run a freshly built ROM image on hardware without having to pull the CF out of the PowerPak all the time. When the user clicks &quot;Build and Run&quot; in an IDE, the IDE rebuilds the ROM image from source code and then, instead of opening an emulator, sends it to the cart. Then the cart should write this image to SRAM or PSRAM, connect the RAM to the Super NES cart bus as if it were ROM, and reset the Super NES Control Deck.<br /><br />Or are you asking what one is trying to do by developing software for the Super NES in the first place?</div><br />You are hitting the nail on the head, except no PowerPak.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Ok, so then the next questions are:<br />How long do you think it will take to build said ROM image?<br /></div><br />Beats me. It's supposed to go hand-in-hand with a game I am writing in C++ and SDL. So I imagine a multi-platform release with a SNES version to go along.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What percentage overhead is permissible to program a device relative to the time it takes to build said image?</div><br />Very interesting question. I am just enjoying learning. I am not too worried about the relationship between the overhead, because it is teaching me to be patient.[/quote]<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Which of the many aspects of the obnoxiousness of removing the CF/SD card from the powerpak/everdrive are the ones you want to fix?</div><br /><br />I have never tried these devices, so I am not sure. I have a variety of goals that if I organized in serial fashion would be this.<br /><br />1) Get money<br />2) Purchase assorted supplies for:<br />3) Building a Gameboy Cartridge flasher<br />   a) learn about electronics<br />   b) learn about micro-controllers<br />   c) learn about USB (2.0)<br />   d) figure out best approach or design that is the best<br />   e) clean, simple, fast,<br />   f) be happy<br /><br />4) make modifications and boards for snes flasher<br />   a) modify firmware / software to reflect SNES aspects<br />   b) possibly segment the software into a combination software for one unit that can do both<br />   <br />5) I am still interested. Make Eprom Emulator for the perfect explanation Tepples gave as reason for its existence.<br /><br />6) Work on my incompleted SNES VRAM organizer software for importing graphics and exporting VRAM binary for direct DMA. here is a writeup on it, and github: <!-- m --><a class="postlink" href="http://www.bazz1.com/snes-gfx-edit/">http://www.bazz1.com/snes-gfx-edit/</a><!-- m --><br /><br />That has to be determined whether to continue in QT, or I can program in an easier and more intuitive environment. This will involve learning more about graphics file formats such as PNG.<br /><br />7) Work on SNES game<br /><br />There's more to it. Ok I'll keep going<br /><br />8) Minimalize SDL version of the game, ensure raw graphics are directly usable for harmless intuition of use with both SNES and ports. Harmonized to use SVG graphics format with a multi platform SVG-&gt;PNG conversion that is in the works, allows exporting SVG at any scale with no less in quality. <!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=70YGaHByQSQ">http://www.youtube.com/watch?v=70YGaHByQSQ</a><!-- m --><br /> This may or may not help with different screen resolutions. Inconclusive, yet seems to be safest approach. However, I do not know how friendly SVG format is with pixel artist types.<br /><br />9) Get in touch more with graphics artists. Tighten up art specifications for enemies and objects. <br />10) Get money<br /><br />11) Continue programming game in SNES and SDL. Stay happy. Have fun.<br />12) We'll get there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Jul 04, 2013 3:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds like a great plan!<br /><br />One of the best rules of thumb of inexpensiveÂ¹ engineering is: build the simplest thing that could possibly work. Figure out what you like, or don't like about it. <br /><br />Once you've got something to compare to, and with the experience of having built something, you'll now have the experience to know what to change, how to change, and where you need to do further research.<br /><br /><span style="font-size: 85%; line-height: normal">Â¹ Inexpensive means &quot;in terms of human life&quot; or &quot;lawsuits&quot;, so e.g. the space shuttle, medical research, and bridges don't count. Software, most electrical engineering, some bioengineering and mechanical engineering does.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu Jul 04, 2013 4:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I suggest cutting all the superfluous complicated electronics and just stick with the basics:<br /><div class="quotetitle">bazz wrote:</div><div class="quotecontent">1) Get money<br />...<br />   f) be happy<br />...<br />10) Get money<br />...<br />11)  Stay happy. Have fun.<br /></div><br /><br />On a serious note, one thing to consider for target times is the erase time of the memory you're considering.  Large flash chips take ~1min or more to erase.  So in that situation having a 2 second programmer is kind of pointless.  Not that large flash is bad, or 2 seconds isn't valuable time savings.  But I'd consider things like that when considering the speed of the overall design.  If you've settled on slow erasing flash chips, then there isn't much point to jump through a bunch of hoops for sub-10second USB speeds.<br /><br />In regards to flash writing speeds using a chip with buffered writes can drastically reduce programing speeds.  I went from ~12min to ~3min with this switch on one of my projects just due to buffered writes alone.  It's also much more stable and reliable than programing individual bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 04, 2013 5:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">On a serious note, one thing to consider for target times is the erase time of the memory you're considering.  Large flash chips take ~1min or more to erase.</div><br />I think that's why the OP is going with RAM instead: erase happens in the same 140 ns it takes to program each byte.<br /><br />In any case, if you're not using all the RAM in the console, there's always the option to make a cart that just receives 184 KiB of data, stashes it in $7E2000-$7FFFFF and VRAM $0000-$7FFF, and redirects the interrupt vectors. That might be the simplest thing that could possibly allow testing 1-level builds of your game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu Jul 04, 2013 11:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes RAM is a nice option when considering writability/erasability.  But it has it's drawbacks of being volatile, cost, and easy corruption.  When I realized my programming options were not going to cheaply/easily reach USB 2.0 programming speeds, RAM started loosing it's edge.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 04, 2013 1:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If it takes only one to three seconds to reprogram the RAM while the cart is connected to a PC that's providing power, you don't really need to worry about volatility so much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Thu Jul 04, 2013 5:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can you fellas remind me of the most important speed factors in accomplishing a speedy upload/download of Flash Memory? Assuming this setup is through USB (hiSpeed, or Full), and uses a microcontroller. I can't be much more clearer than that (literally)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu Jul 04, 2013 6:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure what you're looking for exactly... Speed factors?  What kind of details are you asking for?  I've tried to provide general input on the matter.  So if you can explain how that input isn't what you're looking for, or what kind of 'factors' your asking about perhaps I can re-direct my answer.<br /><br />Things to consider that might answer your question:<br /><br />*Using a micro-controller to receive data serially in any fashion will be slower than if the mcu can get data in byte chunks from what ever is handling the USB comms.  The less time the mcu has to handle recieving data, the more time it can devote to pumping data into the flash.<br /><br />*Writing to flash is gernally slow, especially old ones.  Current day chips (ones which are still in production) often have means to improve the programming time.  As I pointed out previously buffered writes is one of these tactics.  Another is accelerated voltage for faster programming, this is generally 12v you can apply to a specific pin for faster writes.<br /><br />*Optimizations can make a big difference depending on the application.  If you're developing a game, each build won't likely need the entire chip erased and reprogrammed.  If you do the extra work to sense what bytes/sectors were affected, then you could just transfer the data needed to make those modifications and reflash the needed sectors only.<br /><br />Some other optimizations could be taking advantage of the time the mcu is waiting on the flash chip to finish it's write.  Instead of sitting there and polling the flash for several micro-seconds, the mcu could be making use of that 'down time' to fetch the next chunk of serial data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Thu Jul 04, 2013 6:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Electronics Question on Flash(ing) Memory</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br />*Using a micro-controller to receive data serially in any fashion will be slower than if the mcu can get data in byte chunks from what ever is handling the USB comms.  The less time the mcu has to handle recieving data, the more time it can devote to pumping data into the flash.</div><br /><br />Get the data in byte chunks. What is this called? I am investigating High-Speed USB support with microcontrollers, and I started learning about USB specification, for instance Bulk transfer and - isochronous - is faster but not guaranteed, bulk is always guaranteed. I figured to go with Bulk for my first time around. Now I feel as to try isochronous. However, I don't very much understand the difference between serial transfer and receiving in byte chunks as you suggest. I don't even know where to start.[/quote]<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">*Writing to flash is gernally slow, especially old ones.  Current day chips (ones which are still in production) often have means to improve the programming time.  As I pointed out previously buffered writes is one of these tactics.  Another is accelerated voltage for faster programming, this is generally 12v you can apply to a specific pin for faster writes.</div><br />Interesting,<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">*Optimizations can make a big difference depending on the application.  If you're developing a game, each build won't likely need the entire chip erased and reprogrammed.  If you do the extra work to sense what bytes/sectors were affected, then you could just transfer the data needed to make those modifications and reflash the needed sectors only.</div><br />My plans exactly. Let's not forget I am programming a flasher first, and not the Eprom Emulator. Therefore, this method will only be useful for the RAM method. However, it could still be used to possibly narrow down segments of flash as well.[/quote]<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Some other optimizations could be taking advantage of the time the mcu is waiting on the flash chip to finish it's write.  Instead of sitting there and polling the flash for several micro-seconds, the mcu could be making use of that 'down time' to fetch the next chunk of serial data.</div> no comment

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>